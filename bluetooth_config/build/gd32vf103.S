
build/gd32vf103.elf:     file format elf32-littleriscv
build/gd32vf103.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800015c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x000085c8 memsz 0x000085c8 flags r-x
    LOAD off    0x0000a000 vaddr 0x20000000 paddr 0x080085c8 align 2**12
         filesz 0x00000508 memsz 0x00000508 flags rw-
    LOAD off    0x0000a508 vaddr 0x20000508 paddr 0x20000508 align 2**12
         filesz 0x00000000 memsz 0x00004940 flags rw-
    LOAD off    0x0000b000 vaddr 0x20007000 paddr 0x20004e48 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000254  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ilalign      00000000  08000254  08000254  0000a508  2**0
                  CONTENTS
  2 .text         00008336  08000280  08000280  00001280  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sdata2.usbd_language_id_desc 00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sdata2.EP0_MAXLEN 00000004  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .sdata2.USB_SPEED 00000004  080085c0  080085c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .sdata2._global_impure_ptr 00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000000  080085c8  080085c8  0000a508  2**0
                  CONTENTS
  8 .dalign       00000000  20000000  20000000  0000a508  2**0
                  CONTENTS
  9 .data         00000508  20000000  080085c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004940  20000508  20000508  0000a508  2**3
                  ALLOC
 11 .stack        00001000  20007000  20004e48  0000b000  2**0
                  ALLOC
 12 .debug_info   0002eb9b  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000079af  00000000  00000000  000390a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000115a6  00000000  00000000  00040a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001740  00000000  00000000  00051ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001f50  00000000  00000000  00053738  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ca9  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007715  00000000  00000000  00078331  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000028  00000000  00000000  0007fa46  2**0
                  CONTENTS, READONLY
 20 .riscv.attributes 0000002b  00000000  00000000  0007fa6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003968  00000000  00000000  0007fa9c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .init	00000000 .init
08000254 l    d  .ilalign	00000000 .ilalign
08000280 l    d  .text	00000000 .text
080085b8 l    d  .sdata2.usbd_language_id_desc	00000000 .sdata2.usbd_language_id_desc
080085bc l    d  .sdata2.EP0_MAXLEN	00000000 .sdata2.EP0_MAXLEN
080085c0 l    d  .sdata2.USB_SPEED	00000000 .sdata2.USB_SPEED
080085c4 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
080085c8 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000508 l    d  .bss	00000000 .bss
20007000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/start.o
08000000 l       .init	00000000 vector_base
08000182 l       .init	00000000 _start0800
00000000 l    df *ABS*	00000000 gd32vf103_rcu.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 write_hex.c
00000000 l    df *ABS*	00000000 handlers.c
00000000 l    df *ABS*	00000000 ff.c
080020c6 l     F .text	0000001e ld_dword
080020e4 l     F .text	0000001c st_dword
08002100 l     F .text	0000001a mem_cmp
0800211a l     F .text	0000001c clst2sect
08002136 l     F .text	0000003e get_ldnumber
08002174 l     F .text	0000004e validate
080021c2 l     F .text	0000001a mem_cpy.part.0
080021dc l     F .text	00000026 ld_clust.isra.1
08002202 l     F .text	00000064 sync_window.part.3
08002266 l     F .text	0000004e move_window
080022b4 l     F .text	00000092 check_fs
08002346 l     F .text	00000342 find_volume
08002688 l     F .text	00000154 put_fat
080027dc l     F .text	000000f6 get_fat.isra.7
080028d2 l     F .text	00000128 create_chain
080029fa l     F .text	0000014a dir_next
08002b44 l     F .text	00000098 dir_sdi.constprop.9
20000510 l     O .bss	00000004 FatFs
20000514 l     O .bss	00000002 Fsid
00000000 l    df *ABS*	00000000 tf_card.c
0800359e l     F .text	00000062 xchg_spi
08003600 l     F .text	00000022 deselect
08003622 l     F .text	000000e4 wait_ready
08003706 l     F .text	00000042 _select
08003748 l     F .text	000000ec send_cmd
08003834 l     F .text	00000080 rcvr_datablock
080038b4 l     F .text	00000060 xmit_datablock.part.1
20000516 l     O .bss	00000001 CardType
200004f8 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 cdc_acm_core.c
080002e8 l     O .text	00000018 __compound_literal.0
08000300 l     O .text	0000003a __compound_literal.1
0800033c l     O .text	00000030 __compound_literal.2
00000000 l    df *ABS*	00000000 usbd_enum.c
08005568 l     F .text	00000004 _usb_std_reserved
0800556c l     F .text	0000000e _usb_dev_desc_get
0800557a l     F .text	0000000e _usb_config_desc_get
08005588 l     F .text	00000014 _usb_str_desc_get
0800559c l     F .text	000000fa _usb_std_getdescriptor
08005696 l     F .text	000000a8 _usb_std_setconfiguration
0800573e l     F .text	000000ba _usb_std_getstatus
080057f8 l     F .text	0000003c _usb_std_getconfiguration
08005834 l     F .text	0000002c _usb_std_getinterface
08005860 l     F .text	0000002a _usb_std_setinterface
0800588a l     F .text	00000064 _usb_std_setaddress
080058ee l     F .text	00000080 _usb_std_setfeature
0800596e l     F .text	00000098 _usb_std_clearfeature
08005a06 l     F .text	00000004 _usb_std_setdescriptor
08005a0a l     F .text	00000004 _usb_std_synchframe
08000390 l     O .text	00000034 _std_dev_req
20000530 l     O .bss	00000001 config.4766
20000534 l     O .bss	00000002 status.4696
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 gd32vf103_adc.c
00000000 l    df *ABS*	00000000 gd32vf103_dma.c
00000000 l    df *ABS*	00000000 gd32vf103_eclic.c
00000000 l    df *ABS*	00000000 gd32vf103_exti.c
00000000 l    df *ABS*	00000000 gd32vf103_gpio.c
00000000 l    df *ABS*	00000000 gd32vf103_i2c.c
00000000 l    df *ABS*	00000000 gd32vf103_spi.c
00000000 l    df *ABS*	00000000 gd32vf103_timer.c
00000000 l    df *ABS*	00000000 gd32vf103_usart.c
00000000 l    df *ABS*	00000000 system_gd32vf103.c
00000000 l    df *ABS*	00000000 sbrk.c
200004ec l     O .data	00000004 curbrk.1524
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eclicw.c
20000508 l     O .bss	00000004 pmtisr
2000050c l     O .bss	00000004 pu0tbeisr
00000000 l    df *ABS*	00000000 gd32v_tf_card_if.c
00000000 l    df *ABS*	00000000 tf_delay.c
00000000 l    df *ABS*	00000000 gd32v_mpu6500_if.c
00000000 l    df *ABS*	00000000 mpu6500_driver.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 drv_usb_core.c
00000000 l    df *ABS*	00000000 drv_usb_dev.c
080085bc l     O .sdata2.EP0_MAXLEN	00000004 EP0_MAXLEN
00000000 l    df *ABS*	00000000 drv_usbd_int.c
08004d80 l     F .text	000000fe usbd_int_epout
08004e7e l     F .text	000000bc usbd_int_epin
08004f3a l     F .text	000000c6 usbd_int_rxfifo
08005000 l     F .text	000000d2 usbd_int_reset
080050d2 l     F .text	00000068 usbd_int_enumfinish
0800513a l     F .text	000000e6 usbd_emptytxfifo_write
080085c0 l     O .sdata2.USB_SPEED	00000004 USB_SPEED
00000000 l    df *ABS*	00000000 gd32vf103_hw.c
00000000 l    df *ABS*	00000000 gd32vf103_usb_it.c
00000000 l    df *ABS*	00000000 usb_delay.c
00000000 l    df *ABS*	00000000 usb_serial_if.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_transc.c
00000000 l    df *ABS*	00000000 radioHead.c
00000000 l    df *ABS*	00000000 rn4871.c
00000000 l    df *ABS*	00000000 state.c
2000054c l     O .bss	00000004 current_state
00000000 l    df *ABS*	00000000 build/entry.o
08006b34 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
20000d6c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000488 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
080085c8 l       .sdata2._global_impure_ptr	00000000 __fini_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __fini_array_start
080085c8 l       .sdata2._global_impure_ptr	00000000 __init_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __init_array_start
080085c8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_start
080085a2 g     F .text	00000014 _malloc_usable_size_r
080062a6 g     F .text	00000014 led_off_B1
08001a02 g     F .text	0000000a usart_transmit_config
08007866 g     F .text	0000002a .hidden __ashldi3
08004468 g     F .text	0000001a read_mpu
08000c54 g     F .text	00000034 adc_external_trigger_source_config
08004482 g     F .text	0000001a write_mpu
08005ea0 g     F .text	00000026 send_data_to_phone
20000ce8 g       .data	00000000 __global_pointer$
08005b26 g     F .text	00000030 usbd_ctl_status_recev
08004aa4 g     F .text	0000008c usb_transc_outxfer
080042fc g     F .text	0000002a i2c_master_init_400k
08001146 g     F .text	00000010 i2c_dma_enable
080062ce g     F .text	00000014 led_off_B0
0800852e g     F .text	00000002 __malloc_unlock
080064e0 g     F .text	00000030 append_int_to_string
08005a86 g     F .text	00000038 usbd_ctl_send
080062ba g     F .text	00000014 led_on_B0
08004212 g     F .text	000000ea i2c_master_write_register
08006580 g     F .text	00000054 init_mpu
08008506 g     F .text	00000026 memmove
08000b96 g     F .text	000000be adc_regular_channel_config
0800122e g     F .text	00000014 rcu_usb_clock_config
08000eb4 g     F .text	00000008 eclic_priority_group_set
08004768 g     F .text	0000003e clear_queues
08001de6 g     F .text	0000000e eclic_get_nlbits
08005238 g     F .text	00000056 USBFS_WKUP_IRQHandler
080019d4 g     F .text	00000012 usart_word_length_set
08005220 g     F .text	00000008 usb_udelay
08000dd8 g     F .text	00000026 dma_channel_enable
080048ae g     F .text	00000032 usb_rxfifo_read
20004e44 g     O .bss	00000004 errno
08001242 g     F .text	0000013a rcu_clock_freq_get
08005a26 g     F .text	0000002c usbd_class_request
00001000 g       *ABS*	00000000 __stack_size
0800157a g     F .text	0000023c timer_channel_output_config
20000478 g     O .data	0000000e handles
08001126 g     F .text	0000000a i2c_start_on_bus
08005228 g     F .text	00000010 USBFS_IRQHandler
08000b1a g     F .text	00000010 adc_enable
08006a44 g     F .text	0000000a set_state
08000e84 g     F .text	00000024 dma_interrupt_enable
08000380 g     O .text	00000010 usbd_strings
08001fe2 g     F .text	00000040 DMA0_Channel6_IRQHandler
08004be0 g     F .text	00000020 usb_iepintr_read
080079b4 g     F .text	00000016 memcpy
08004bd2 g     F .text	0000000e usb_iepintnum_read
08005374 g     F .text	000000ee set_usb_clock_96m_hxtal
08002022 g     F .text	00000052 eclic_mtip_handler
08001832 g     F .text	00000056 timer_channel_output_shadow_config
20000e14 g     O .bss	00000010 cb
080019f8 g     F .text	0000000a usart_enable
08007e62 g     F .text	0000029a _svfprintf_r
08007610 g     F .text	00000070 .hidden __floatsidf
080070bc g     F .text	000000a4 .hidden __ltdf2
08003914 g     F .text	0000027c disk_initialize
08005bea g     F .text	000000e6 usbd_out_transc
08000f9e g     F .text	00000004 gpio_bit_set
0800113e g     F .text	00000008 i2c_data_receive
08001556 g     F .text	0000000a timer_enable
200004e8 g     O .data	00000004 SystemCoreClock
08001a4e g     F .text	00000018 usart_interrupt_enable
080011d2 g     F .text	0000001c rcu_periph_reset_disable
0800137c g     F .text	00000036 spi_init
08001ed2  w    F .text	00000038 handle_trap
08003b90 g     F .text	00000014 disk_status
08006b04  w      .text	00000000 irq_entry
08004326 g     F .text	00000040 mpu6500_install
08000e7c g     F .text	00000008 dma_interrupt_flag_clear
20000e24 g     O .bss	00004014 w
08005522 g     F .text	0000003e usbd_ep_stall_clear
080084b6 g     F .text	00000036 _sbrk_r
08003d4e g     F .text	0000021e disk_ioctl
20000538 g     O .bss	00000004 emg
08001a94 g     F .text	0000001a usart_interrupt_flag_clear
080054e2 g     F .text	00000040 usbd_ep_stall
080085b8 g     O .sdata2.usbd_language_id_desc	00000004 usbd_language_id_desc
20000e10 g     O .bss	00000004 i2c_port
080019c4 g     F .text	00000010 usart_parity_config
20007000 g       .stack	00000000 _heap_end
08000a48 g     F .text	00000050 adc_deinit
0800682c g     F .text	00000172 lio_init_bt
08005abe g     F .text	00000038 usbd_ctl_recev
080085c4 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
08008530 g     F .text	00000072 _realloc_r
0800794a g     F .text	0000006a __libc_init_array
08007680 g     F .text	00000056 .hidden __floatunsidf
08001ce0 g     F .text	0000002e _sbrk
08001178 g     F .text	0000002a i2c_flag_clear
08000a98 g     F .text	00000020 adc_mode_config
08001a36 g     F .text	0000000c usart_dma_receive_config
08001a16 g     F .text	00000008 usart_data_receive
0800110a g     F .text	00000012 i2c_master_addressing
08001f0a g     F .text	0000002c _init
080054a2 g     F .text	00000040 usbd_ep_send
08007912 g     F .text	00000038 __libc_fini_array
08001eb0  w    F .text	00000022 handle_nmi
080013bc g     F .text	00000004 spi_i2s_data_transmit
20004e38 g     O .bss	00000001 rxCount
08005462 g     F .text	00000040 usbd_ep_recev
080075ac g     F .text	00000064 .hidden __fixdfsi
080014b0 g     F .text	00000018 timer_struct_para_init
080049ba g     F .text	000000ea usb_transc_inxfer
080062e2 g     F .text	000000fa timer_interrupt_config
080014c8 g     F .text	0000008e timer_init
0800189c g     F .text	00000012 timer_interrupt_flag_get
200004fc g     O .data	00000004 pDatabuffer
20000548 g     O .bss	00000004 write
08004bc0 g     F .text	00000012 usb_oepintr_read
080048e0 g     F .text	00000028 usb_txfifo_flush
0800783c g     F .text	0000002a .hidden __lshrdi3
080070bc g     F .text	000000a4 .hidden __ledf2
080017b6 g     F .text	00000056 timer_channel_output_mode_config
08004c00 g     F .text	00000026 usb_ctlep_startout
080047a6 g     F .text	000000ce delay_1ms
08001a0c g     F .text	0000000a usart_receive_config
08002074 g     F .text	00000052 USART0_IRQHandler
08001df4 g     F .text	00000058 eclic_set_irq_lvl_abs
08001dbc g     F .text	00000012 eclic_enable_interrupt
08000eae g     F .text	00000006 eclic_global_interrupt_disable
08004874 g     F .text	0000003a usb_txfifo_write
08005f1a g     F .text	00000202 TIMER1_IRQHandler
080005f0 g     O .text	00000020 __sf_fake_stderr
08004b6a g     F .text	00000046 usb_transc_clrstall
08001d0e g     F .text	0000007c write_hex
080066c4 g     F .text	0000011e init_radio
08007d60 g     F .text	00000102 __ssputs_r
20000544 g     O .bss	00000004 start_time
08007890 g     F .text	0000003c .hidden __clzsi2
08005b56 g     F .text	00000094 usbd_setup_transc
08000fa2 g     F .text	00000004 gpio_bit_reset
080084ec g     F .text	0000001a memchr
08007ba6 g     F .text	000000b8 _free_r
08000cc2 g     F .text	00000020 adc_software_trigger_enable
20000550 g     O .bss	00000004 _global_atexit
08007ade g     F .text	000000c8 __call_exitprocs
080018ae g     F .text	00000008 timer_interrupt_flag_clear
20008000 g       .stack	00000000 _sp
080019e6 g     F .text	00000012 usart_stop_bit_set
08003516 g     F .text	0000002c f_close
080045c2 g     F .text	00000020 init_q
0800015c g     F .init	00000000 _start
08001890 g     F .text	0000000c timer_interrupt_disable
080011a2 g     F .text	00000018 rcu_periph_clock_enable
08001a66 g     F .text	0000002e usart_interrupt_flag_get
080076d6 g     F .text	00000166 .hidden __floatundidf
0800036c g     O .text	00000012 device_descriptor
08001164 g     F .text	00000014 i2c_flag_get
0800449c g     F .text	00000126 mpu6500_init
0800024c g       .init	00000000 enable_mcycle_minstret
08007a52 g     F .text	0000008c __register_exitproc
08004c26 g     F .text	0000001a usb_clock_active
080013de g     F .text	000000d2 timer_deinit
08004908 g     F .text	00000014 usb_devaddr_set
08001d8a g     F .text	00000010 get_timer_value
08001888 g     F .text	00000008 timer_interrupt_enable
20000df8 g     O .bss	00000016 dataBuffer
08000e0c g     F .text	00000070 dma_interrupt_flag_get
080013b2 g     F .text	0000000a spi_enable
08006510 g     F .text	0000000e append_newLine
080013c8 g     F .text	0000000c spi_crc_polynomial_set
08004bb0 g     F .text	00000010 usb_oepintnum_read
08006b76 g     F .text	00000546 .hidden __divdf3
08001958 g     F .text	0000006c usart_baudrate_set
08001a42 g     F .text	0000000c usart_dma_transmit_config
08007160 g     F .text	0000044c .hidden __muldf3
20000528 g     O .bss	00000001 setupc_flag
08003564 g     F .text	0000003a get_fattime
08000b00 g     F .text	0000001a adc_data_alignment_config
08001fb8 g     F .text	0000002a config_clic_irqs
2000056c g     O .bss	00000400 rx_dma_buffer
0800852c g     F .text	00000002 __malloc_lock
080040d2 g     F .text	00000140 i2c_master_read_register
08001a2a g     F .text	0000000c usart_hardware_flow_cts_config
08001e4c g     F .text	00000052 eclic_set_irq_priority
08000610 g     O .text	00000020 __sf_fake_stdin
20000508 g       .bss	00000000 __bss_start
080079ca g     F .text	00000010 memset
080013c0 g     F .text	00000008 spi_i2s_data_receive
0800068c g     F .text	000003bc main
08005ef4 g     F .text	00000026 reboot_BT
08006a80  w      .text	00000000 trap_entry
08003366 g     F .text	000001b0 f_sync
08003542 g     F .text	00000022 set_fattime
08000246 g       .init	00000000 disable_mcycle_minstret
08004366 g     F .text	00000102 i2c_dma_master_read_register
080010f2 g     F .text	00000018 i2c_ack_config
08000d26 g     F .text	0000008c dma_init
08007c5e g     F .text	00000102 _malloc_r
200004f0 g     O .data	00000008 time
08002bdc g     F .text	0000005c f_mount
08001e9e g     F .text	00000012 eclic_mode_enable
20000540 g     O .bss	00000004 seconds
08004c40 g     F .text	00000140 usbd_isr
20000518 g     O .bss	00000008 tf_current_time
08001dce g     F .text	00000018 eclic_set_nlbits
08007a28 g     F .text	00000018 strcmp
08001aae g     F .text	0000011c SystemInit
0800464e g     F .text	0000000c queue_str_len
08001f36 g     F .text	00000002 _fini
00000000 g       *ABS*	00000000 __dbg_stack_size
2000052c g     O .bss	00000004 usbfs_prescaler
080079da g     F .text	0000004e sprintf
080004f0 g     O .text	00000100 .hidden __clz_tab
080018b6 g     F .text	000000a2 usart_deinit
080078cc g     F .text	00000010 atexit
08005a52 g     F .text	00000004 usbd_vendor_request
0800699e g     F .text	0000009c lio_send_bt
080080fc g     F .text	0000010c _printf_common
20000500 g     O .data	00000004 _impure_ptr
080011ba g     F .text	00000018 rcu_periph_reset_enable
0800491c g     F .text	0000009e usb_transc_active
20000000 g     O .data	00000043 configuration_descriptor
08007e62 g     F .text	0000029a _svfiprintf_r
20000000 g       .dalign	00000000 _data
20000044 g     O .data	00000434 USB_OTG_dev
08005ddc g     F .text	000000c4 write_handle_raw
0800113a g     F .text	00000004 i2c_data_transmit
0800528e g     F .text	00000072 usb_delay_1ms
08001156 g     F .text	0000000e i2c_dma_last_transfer_config
08006458 g     F .text	00000088 int_to_string
08000ebc g     F .text	00000034 eclic_irq_enable
080063dc g     F .text	0000007c formatTime
08001a1e g     F .text	0000000c usart_hardware_flow_rts_config
2000096c g     O .bss	00000400 tx_dma_buffer
080045e2 g     F .text	0000006c enqueue_string
080046fc g     F .text	0000006c empty_string_queue
08004004 g     F .text	000000ce mpu_delay
20000508 g       .bss	00000000 _edata
20004e48 g       .bss	00000000 _end
08005af6 g     F .text	00000030 usbd_ctl_status_send
0800315e g     F .text	00000208 f_write
08003f6c g     F .text	0000005a tf_start_timer
08003fc6 g     F .text	0000003e tf_timer_done
08000ea8 g     F .text	00000006 eclic_global_interrupt_enable
08004b30 g     F .text	0000003a usb_transc_stall
080085c8 g       .lalign	00000000 _data_lma
08000ef0 g     F .text	0000000a exti_interrupt_flag_clear
0800611c g     F .text	0000014c USART2_IRQHandler
08002c38 g     F .text	00000526 f_open
08000c88 g     F .text	0000003a adc_external_trigger_config
08003c46 g     F .text	00000108 disk_write
080078dc g     F .text	00000036 exit
08005a56 g     F .text	00000030 usbd_enum_error
08001560 g     F .text	0000001a timer_channel_output_struct_para_init
08001bca g     F .text	000000ca SystemCoreClockUpdate
080013d4 g     F .text	0000000a spi_i2s_flag_get
08001d9a g     F .text	00000022 eclic_init
0800180c g     F .text	00000026 timer_channel_output_pulse_value_config
08000630 g     O .text	00000020 __sf_fake_stdout
080079da g     F .text	0000004e siprintf
08000b4c g     F .text	0000004a adc_channel_length_config
08006a3a g     F .text	0000000a get_state
2000053c g     O .bss	00000002 milli
0800465a g     F .text	00000026 fuseStrings
08001c94 g     F .text	0000004c _exit
08000ce2 g     F .text	00000044 dma_deinit
0800111c g     F .text	0000000a i2c_enable
2000053e g     O .bss	00000002 minutes
080067e2 g     F .text	0000004a enter_command_mode
08006292 g     F .text	00000014 led_on_B1
08000db2 g     F .text	00000026 dma_circulation_disable
08001f38 g     F .text	00000080 dma_config
08007a40 g     F .text	00000012 strlen
08003ba4 g     F .text	000000a2 disk_read
08008208 g     F .text	000002ae _printf_i
20000520 g     O .bss	00000008 tf_delay_until
20000558 g     O .bss	00000004 __malloc_sbrk_start
08005560 g     F .text	00000008 usbd_addr_set
08005ec6 g     F .text	0000002e stagger_data_to_phone
08000ab8 g     F .text	00000048 adc_special_function_config
080011ee g     F .text	00000040 rcu_adc_clock_config
08006268 g     F .text	0000002a ledInit
08000efa g     F .text	000000a4 gpio_init
08000fb0 g     F .text	00000142 i2c_clock_config
08005300 g     F .text	00000074 usb_delay_1us
08001130 g     F .text	0000000a i2c_stop_on_bus
20000554 g     O .bss	00000004 __malloc_free_list
08000b2a g     F .text	00000022 adc_calibration_enable
20004e3c g     O .bss	00000008 rxbuffer
080065d4 g     F .text	000000f0 init_ADC_EMG
08000dfe g     F .text	0000000e dma_flag_clear
2000055c g     O .bss	00000010 last_Sample_buffer
08005cd0 g     F .text	0000010c usbd_in_transc
08004680 g     F .text	0000007c dequeue_string
0800651e g     F .text	00000062 millis
08000fa6 g     F .text	0000000a gpio_bit_write
08005a0e g     F .text	00000018 usbd_standard_request



Disassembly of section .init:

08000000 <vector_base>:
    .weak  CAN1_RX1_IRQHandler
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    j _start
 8000000:	aab1                	j	800015c <_start>
 8000002:	0001                	nop
	...
 800001c:	2022                	fld	ft0,8(sp)
 800001e:	0800                	addi	s0,sp,16
	...
 8000090:	1fe2                	slli	t6,t6,0x38
 8000092:	0800                	addi	s0,sp,16
	...
 80000bc:	5f1a                	lw	t5,164(sp)
 80000be:	0800                	addi	s0,sp,16
	...
 80000e0:	2074                	fld	fa3,192(s0)
 80000e2:	0800                	addi	s0,sp,16
 80000e4:	0000                	unimp
 80000e6:	0000                	unimp
 80000e8:	611c                	flw	fa5,0(a0)
 80000ea:	0800                	addi	s0,sp,16
	...
 80000f4:	5238                	lw	a4,96(a2)
 80000f6:	0800                	addi	s0,sp,16
	...
 8000158:	5228                	lw	a0,96(a2)
 800015a:	0800                	addi	s0,sp,16

0800015c <_start>:
	.globl _start
	.type _start,@function

_start:

	csrc CSR_MSTATUS, MSTATUS_MIE
 800015c:	30047073          	csrci	mstatus,8
	/* Jump to logical address first to ensure correct operation of RAM region  */
    la		a0,	_start
 8000160:	00000517          	auipc	a0,0x0
 8000164:	ffc50513          	addi	a0,a0,-4 # 800015c <_start>
    li		a1,	1
 8000168:	4585                	li	a1,1
	slli	a1,	a1, 29
 800016a:	05f6                	slli	a1,a1,0x1d
    bleu	a1, a0, _start0800
 800016c:	00b57b63          	bgeu	a0,a1,8000182 <_start0800>
    srli	a1,	a1, 2
 8000170:	8189                	srli	a1,a1,0x2
    bleu	a1, a0, _start0800
 8000172:	00b57863          	bgeu	a0,a1,8000182 <_start0800>
    la		a0,	_start0800
 8000176:	00000517          	auipc	a0,0x0
 800017a:	00c50513          	addi	a0,a0,12 # 8000182 <_start0800>
    add		a0, a0, a1
 800017e:	952e                	add	a0,a0,a1
	jr      a0
 8000180:	8502                	jr	a0

08000182 <_start0800>:

_start0800:

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 8000182:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
 8000186:	7d02a073          	csrs	0x7d0,t0

	/* Intial the mtvt*/
    la t0, vector_base
 800018a:	00000297          	auipc	t0,0x0
 800018e:	e7628293          	addi	t0,t0,-394 # 8000000 <vector_base>
    csrw CSR_MTVT, t0
 8000192:	30729073          	csrw	mtvt,t0

	/* Intial the mtvt2 and enable it*/
    la t0, irq_entry
 8000196:	00007297          	auipc	t0,0x7
 800019a:	96e28293          	addi	t0,t0,-1682 # 8006b04 <irq_entry>
    csrw CSR_MTVT2, t0
 800019e:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
 80001a2:	7ec0e073          	csrsi	0x7ec,1

    /* Intial the CSR MTVEC for the Trap ane NMI base addr*/
    la t0, trap_entry
 80001a6:	00007297          	auipc	t0,0x7
 80001aa:	8da28293          	addi	t0,t0,-1830 # 8006a80 <trap_entry>
    csrw CSR_MTVEC, t0
 80001ae:	30529073          	csrw	mtvec,t0
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80001b2:	18001197          	auipc	gp,0x18001
 80001b6:	b3618193          	addi	gp,gp,-1226 # 20000ce8 <__global_pointer$>
.option pop
	la sp, _sp
 80001ba:	18008117          	auipc	sp,0x18008
 80001be:	e4610113          	addi	sp,sp,-442 # 20008000 <_sp>

	/* Load data section */
	la a0, _data_lma
 80001c2:	00008517          	auipc	a0,0x8
 80001c6:	40650513          	addi	a0,a0,1030 # 80085c8 <__fini_array_end>
	la a1, _data
 80001ca:	18000597          	auipc	a1,0x18000
 80001ce:	e3658593          	addi	a1,a1,-458 # 20000000 <_data>
	la a2, _edata
 80001d2:	18000617          	auipc	a2,0x18000
 80001d6:	33660613          	addi	a2,a2,822 # 20000508 <__bss_start>
	bgeu a1, a2, 2f
 80001da:	00c5fa63          	bgeu	a1,a2,80001ee <_start0800+0x6c>
1:
	lw t0, (a0)
 80001de:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
 80001e2:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
 80001e6:	0511                	addi	a0,a0,4
	addi a1, a1, 4
 80001e8:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
 80001ea:	fec5eae3          	bltu	a1,a2,80001de <_start0800+0x5c>
2:
	/* Clear bss section */
	la a0, __bss_start
 80001ee:	18000517          	auipc	a0,0x18000
 80001f2:	31a50513          	addi	a0,a0,794 # 20000508 <__bss_start>
	la a1, _end
 80001f6:	18005597          	auipc	a1,0x18005
 80001fa:	c5258593          	addi	a1,a1,-942 # 20004e48 <_end>
	bgeu a0, a1, 2f
 80001fe:	00b57763          	bgeu	a0,a1,800020c <_start0800+0x8a>
1:
	sw zero, (a0)
 8000202:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
 8000206:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
 8000208:	feb56de3          	bltu	a0,a1,8000202 <_start0800+0x80>
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 800020c:	3202f073          	csrci	mucounteren,5
	/* Call global constructors */
	la a0, __libc_fini_array
 8000210:	00007517          	auipc	a0,0x7
 8000214:	70250513          	addi	a0,a0,1794 # 8007912 <__libc_fini_array>
	call atexit
 8000218:	00007097          	auipc	ra,0x7
 800021c:	6b4080e7          	jalr	1716(ra) # 80078cc <atexit>
	call __libc_init_array
 8000220:	00007097          	auipc	ra,0x7
 8000224:	72a080e7          	jalr	1834(ra) # 800794a <__libc_init_array>


	/* argc = argv = 0 */
	call _init
 8000228:	00002097          	auipc	ra,0x2
 800022c:	ce2080e7          	jalr	-798(ra) # 8001f0a <_init>
	li a0, 0
 8000230:	4501                	li	a0,0
	li a1, 0
 8000232:	4581                	li	a1,0
	call main
 8000234:	00000097          	auipc	ra,0x0
 8000238:	458080e7          	jalr	1112(ra) # 800068c <main>
	tail exit
 800023c:	00007317          	auipc	t1,0x7
 8000240:	6a030067          	jr	1696(t1) # 80078dc <exit>

1:
	j 1b
 8000244:	a001                	j	8000244 <_start0800+0xc2>

08000246 <disable_mcycle_minstret>:
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
        csrsi CSR_MCOUNTINHIBIT, 0x5
 8000246:	3202e073          	csrsi	mucounteren,5
	ret
 800024a:	8082                	ret

0800024c <enable_mcycle_minstret>:

	.global enable_mcycle_minstret
enable_mcycle_minstret:
        csrci CSR_MCOUNTINHIBIT, 0x5
 800024c:	3202f073          	csrci	mucounteren,5
	ret
 8000250:	8082                	ret
	...

Disassembly of section .text:

08000280 <__compound_literal.0-0x68>:
	...
 8000288:	0201                	addi	tp,tp,0
 800028a:	07060403          	lb	s0,112(a2)
 800028e:	0908                	addi	a0,sp,144
 8000290:	500a                	0x500a
 8000292:	6f72                	flw	ft10,28(sp)
 8000294:	6d617267          	0x6d617267
 8000298:	6820                	flw	fs0,80(s0)
 800029a:	7361                	lui	t1,0xffff8
 800029c:	6520                	flw	fs0,72(a0)
 800029e:	6978                	flw	fa4,84(a0)
 80002a0:	6574                	flw	fa3,76(a0)
 80002a2:	2064                	fld	fs1,192(s0)
 80002a4:	68746977          	0x68746977
 80002a8:	6320                	flw	fs0,64(a4)
 80002aa:	3a65646f          	jal	s0,8056650 <__fini_array_end+0x4e088>
 80002ae:	0000                	unimp
 80002b0:	7830                	flw	fa2,112(s0)
 80002b2:	0000                	unimp
 80002b4:	6d6e                	flw	fs10,216(sp)
 80002b6:	0a69                	addi	s4,s4,26
 80002b8:	0000                	unimp
 80002ba:	0000                	unimp
 80002bc:	7274                	flw	fa3,100(a2)
 80002be:	7061                	c.lui	zero,0xffff8
 80002c0:	000a                	c.slli	zero,0x2
 80002c2:	0000                	unimp
 80002c4:	4146                	lw	sp,80(sp)
 80002c6:	0054                	addi	a3,sp,4
 80002c8:	4146                	lw	sp,80(sp)
 80002ca:	3354                	fld	fa3,160(a4)
 80002cc:	0032                	c.slli	zero,0xc
 80002ce:	0000                	unimp
 80002d0:	2a22                	fld	fs4,8(sp)
 80002d2:	3b3a2c2b          	0x3b3a2c2b
 80002d6:	3d3c                	fld	fa5,120(a0)
 80002d8:	3f3e                	fld	ft10,488(sp)
 80002da:	7f7c5d5b          	0x7f7c5d5b
 80002de:	0000                	unimp
 80002e0:	0000                	unimp
 80002e2:	0000                	unimp
 80002e4:	4000                	lw	s0,0(s0)
 80002e6:	          	0x40af

080002e8 <__compound_literal.0>:
 80002e8:	00470316 00670069 00440061 00760065     ..G.i.g.a.D.e.v.
 80002f8:	00630069 00000065                       i.c.e...

08000300 <__compound_literal.1>:
 8000300:	00470338 00330044 00200032 00530055     8.G.D.3.2. .U.S.
 8000310:	00200042 00440043 00200043 00430041     B. .C.D.C. .A.C.
 8000320:	0020004d 006e0069 00460020 00200053     M. .i.n. .F.S. .
 8000330:	006f004d 00650064 00000000              M.o.d.e.....

0800033c <__compound_literal.2>:
 800033c:	0047032e 00330044 00580032 00580058     ..G.D.3.2.X.X.X.
 800034c:	0033002d 0030002e 0030002e 0037002d     -.3...0...0.-.7.
 800035c:	0038007a 00390078 00650079 00000072     z.8.x.9.y.e.r...

0800036c <device_descriptor>:
 800036c:	02000112 40000002 018a28e9 02010100     .......@.(......
 800037c:	00000103                                ....

08000380 <usbd_strings>:
 8000380:	080085b8 080002e8 08000300 0800033c     ............<...

08000390 <_std_dev_req>:
 8000390:	0800573e 0800596e 08005568 080058ee     >W..nY..hU...X..
 80003a0:	08005568 0800588a 0800559c 08005a06     hU...X...U...Z..
 80003b0:	080057f8 08005696 08005834 08005860     .W...V..4X..`X..
 80003c0:	08005a0a 00000000 72617473 00003074     .Z......start0..
 80003d0:	72617473 00003174 72617473 00003274     start1..start2..
 80003e0:	706f7473 00003070 706f7473 00003170     stopp0..stopp1..
 80003f0:	706f7473 00003270 33323130 37363534     stopp2..01234567
 8000400:	42413938 46454443 00000000 2c574853     89ABCDEF....SHW,
 8000410:	00000000 2e257325 252c7834 000a0d73     ....%s%.4x,%s...
 8000420:	0d312c52 00000000 74736574 00000000     R,1.....test....
 8000430:	48474952 432e4c54 00005653 656d6954     RIGHTL.CSV..Time
 8000440:	612d583b 593b6363 6363612d 612d5a3b     ;X-acc;Y-acc;Z-a
 8000450:	583b6363 6765642d 593b732f 6765642d     cc;X-deg/s;Y-deg
 8000460:	5a3b732f 6765642d 453b732f 000a474d     /s;Z-deg/s;EMG..
 8000470:	00000000 40af4000 00006c2c 00006b7c     .....@.@,l..|k..
 8000480:	00006b82 00006b7c 00006c1e 00006b7c     .k..|k...l..|k..
 8000490:	00006b82 00006c2c 00006c2c 00006c1e     .k..,l..,l...l..
 80004a0:	00006b82 00006b62 00006b62 00006b62     .k..bk..bk..bk..
 80004b0:	00006b86 00007032 00007032 0000704a     .k..2p..2p..Jp..
 80004c0:	0000702c 0000702c 000070d8 0000704a     ,p..,p...p..Jp..
 80004d0:	0000702c 000070d8 0000702c 0000704a     ,p...p..,p..Jp..
 80004e0:	0000702a 0000702a 0000702a 000070d8     *p..*p..*p...p..

080004f0 <__clz_tab>:
 80004f0:	02020100 03030303 04040404 04040404     ................
 8000500:	05050505 05050505 05050505 05050505     ................
 8000510:	06060606 06060606 06060606 06060606     ................
 8000520:	06060606 06060606 06060606 06060606     ................
 8000530:	07070707 07070707 07070707 07070707     ................
 8000540:	07070707 07070707 07070707 07070707     ................
 8000550:	07070707 07070707 07070707 07070707     ................
 8000560:	07070707 07070707 07070707 07070707     ................
 8000570:	08080808 08080808 08080808 08080808     ................
 8000580:	08080808 08080808 08080808 08080808     ................
 8000590:	08080808 08080808 08080808 08080808     ................
 80005a0:	08080808 08080808 08080808 08080808     ................
 80005b0:	08080808 08080808 08080808 08080808     ................
 80005c0:	08080808 08080808 08080808 08080808     ................
 80005d0:	08080808 08080808 08080808 08080808     ................
 80005e0:	08080808 08080808 08080808 08080808     ................

080005f0 <__sf_fake_stderr>:
	...

08000610 <__sf_fake_stdin>:
	...

08000630 <__sf_fake_stdout>:
	...
 8000650:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
 8000660:	00004746 33323130 37363534 42413938     FG..0123456789AB
 8000670:	46454443 00000000 33323130 37363534     CDEF....01234567
 8000680:	62613938 66656463 00000000              89abcdef....

0800068c <main>:
void reboot_BT(){
    lio_send_bt("R,1\r",4);//reboot bluetooth
    delay_1ms(50);
}

int main(void){
 800068c:	81010113          	addi	sp,sp,-2032
 8000690:	7e112623          	sw	ra,2028(sp)
 8000694:	7e812423          	sw	s0,2024(sp)
 8000698:	7e912223          	sw	s1,2020(sp)
 800069c:	7f212023          	sw	s2,2016(sp)
 80006a0:	7d312e23          	sw	s3,2012(sp)
 80006a4:	7d512a23          	sw	s5,2004(sp)
 80006a8:	7d612823          	sw	s6,2000(sp)
 80006ac:	7d712623          	sw	s7,1996(sp)
 80006b0:	7d812423          	sw	s8,1992(sp)
 80006b4:	7d912223          	sw	s9,1988(sp)
 80006b8:	7da12023          	sw	s10,1984(sp)
 80006bc:	7d412c23          	sw	s4,2008(sp)
 80006c0:	7bb12e23          	sw	s11,1980(sp)
 80006c4:	91010113          	addi	sp,sp,-1776
    init_q();
 80006c8:	00004097          	auipc	ra,0x4
 80006cc:	efa080e7          	jalr	-262(ra) # 80045c2 <init_q>
    init_ADC_EMG();
 80006d0:	00006097          	auipc	ra,0x6
 80006d4:	f04080e7          	jalr	-252(ra) # 80065d4 <init_ADC_EMG>
    //configure_usb_serial(); //måste vara före lio_init_bt
    lio_init_bt();
 80006d8:	00006097          	auipc	ra,0x6
 80006dc:	154080e7          	jalr	340(ra) # 800682c <lio_init_bt>
    ledInit();
 80006e0:	00006097          	auipc	ra,0x6
 80006e4:	b88080e7          	jalr	-1144(ra) # 8006268 <ledInit>
    usb_delay_1ms(1);
 80006e8:	4505                	li	a0,1
 80006ea:	00005097          	auipc	ra,0x5
 80006ee:	ba4080e7          	jalr	-1116(ra) # 800528e <usb_delay_1ms>

    /* Used for bytes written */
    UINT bw = 0;
    
    /* Sets a valid date for when writing to file */
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 80006f2:	4701                	li	a4,0
 80006f4:	4681                	li	a3,0
 80006f6:	4781                	li	a5,0
 80006f8:	4605                	li	a2,1
 80006fa:	4585                	li	a1,1
 80006fc:	7bc00513          	li	a0,1980
    UINT bw = 0;
 8000700:	c802                	sw	zero,16(sp)
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 8000702:	00003097          	auipc	ra,0x3
 8000706:	e40080e7          	jalr	-448(ra) # 8003542 <set_fattime>
    delay_1ms(100);
 800070a:	06400513          	li	a0,100
 800070e:	00004097          	auipc	ra,0x4
 8000712:	098080e7          	jalr	152(ra) # 80047a6 <delay_1ms>

    /* This function "mounts" the SD-card which makes the filesystem available */
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000716:	6485                	lui	s1,0x1
    UINT bw = 0;
 8000718:	747d                	lui	s0,0xfffff
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800071a:	ea048793          	addi	a5,s1,-352 # ea0 <__dbg_stack_size+0xea0>
 800071e:	978a                	add	a5,a5,sp
 8000720:	3d040513          	addi	a0,s0,976 # fffff3d0 <_sp+0xdfff73d0>
 8000724:	08000b37          	lui	s6,0x8000
 8000728:	4605                	li	a2,1
 800072a:	428b0593          	addi	a1,s6,1064 # 8000428 <_std_dev_req+0x98>
 800072e:	953e                	add	a0,a0,a5
 8000730:	00002097          	auipc	ra,0x2
 8000734:	4ac080e7          	jalr	1196(ra) # 8002bdc <f_mount>
    f_sync(&fil);
 8000738:	ea048793          	addi	a5,s1,-352
 800073c:	978a                	add	a5,a5,sp
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800073e:	c62a                	sw	a0,12(sp)
    f_sync(&fil);
 8000740:	1a840513          	addi	a0,s0,424
 8000744:	953e                	add	a0,a0,a5
 8000746:	00003097          	auipc	ra,0x3
 800074a:	c20080e7          	jalr	-992(ra) # 8003366 <f_sync>

    /* This function opens a file. In this case, we are creating a file which we want to write to */
    
    delay_1ms(400);
 800074e:	19000513          	li	a0,400
 8000752:	00004097          	auipc	ra,0x4
 8000756:	054080e7          	jalr	84(ra) # 80047a6 <delay_1ms>

    init_mpu();
 800075a:	00006097          	auipc	ra,0x6
 800075e:	e26080e7          	jalr	-474(ra) # 8006580 <init_mpu>

    rcu_periph_clock_enable(RCU_DMA0);
 8000762:	50000513          	li	a0,1280
 8000766:	00001097          	auipc	ra,0x1
 800076a:	a3c080e7          	jalr	-1476(ra) # 80011a2 <rcu_periph_clock_enable>

    delay_1ms(20);
 800076e:	4551                	li	a0,20
 8000770:	00004097          	auipc	ra,0x4
 8000774:	036080e7          	jalr	54(ra) # 80047a6 <delay_1ms>

    char write_to_sd[2560] = {'\0'};
 8000778:	6605                	lui	a2,0x1
 800077a:	a0060613          	addi	a2,a2,-1536 # a00 <__dbg_stack_size+0xa00>
 800077e:	4581                	li	a1,0
 8000780:	4a010513          	addi	a0,sp,1184
 8000784:	00007097          	auipc	ra,0x7
 8000788:	246080e7          	jalr	582(ra) # 80079ca <memset>
/*     while (!usb_serial_available()) {
        usb_delay_1ms(100);
    } */
    init_radio();
     
    write = 0;
 800078c:	20000937          	lui	s2,0x20000
    init_radio();
 8000790:	00006097          	auipc	ra,0x6
 8000794:	f34080e7          	jalr	-204(ra) # 80066c4 <init_radio>
    write = 0;
 8000798:	54092423          	sw	zero,1352(s2) # 20000548 <write>

    int blink = 0;
    int onOff = 0;
    reboot_BT();
 800079c:	00005097          	auipc	ra,0x5
 80007a0:	758080e7          	jalr	1880(ra) # 8005ef4 <reboot_BT>
    enter_command_mode();
 80007a4:	00006097          	auipc	ra,0x6
 80007a8:	03e080e7          	jalr	62(ra) # 80067e2 <enter_command_mode>
    send_data_to_phone(Handle_start_stop,0);
 80007ac:	4581                	li	a1,0
 80007ae:	07500513          	li	a0,117
 80007b2:	00005097          	auipc	ra,0x5
 80007b6:	6ee080e7          	jalr	1774(ra) # 8005ea0 <send_data_to_phone>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
                eclic_global_interrupt_disable();    
                fr = f_mount(&fs, "test", 1); // Mount storage device
                f_sync(&fil);
                
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007ba:	08000bb7          	lui	s7,0x8000
                eclic_global_interrupt_disable();
                //Skicka till telefon jag stoppar nu
                send_data_to_phone(Handle_start_stop,0);
                write_to_sd[0] = '\0';
                while(empty_string_queue(write_to_sd, 10)){
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007be:	ea048793          	addi	a5,s1,-352
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007c2:	3c8b8b93          	addi	s7,s7,968 # 80003c8 <_std_dev_req+0x38>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007c6:	17040a93          	addi	s5,s0,368
 80007ca:	978a                	add	a5,a5,sp
    int onOff = 0;
 80007cc:	4c01                	li	s8,0
    int blink = 0;
 80007ce:	4981                	li	s3,0
 80007d0:	54890913          	addi	s2,s2,1352
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007d4:	068b8c93          	addi	s9,s7,104
                milli = 0;
 80007d8:	20000d37          	lui	s10,0x20000
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007dc:	9abe                	add	s5,s5,a5
        switch (get_state()){
 80007de:	00006097          	auipc	ra,0x6
 80007e2:	25c080e7          	jalr	604(ra) # 8006a3a <get_state>
 80007e6:	4785                	li	a5,1
 80007e8:	0af50063          	beq	a0,a5,8000888 <main+0x1fc>
 80007ec:	4789                	li	a5,2
 80007ee:	1af50063          	beq	a0,a5,800098e <main+0x302>
 80007f2:	f575                	bnez	a0,80007de <main+0x152>
                break;

            case RUNNING:
                //RUNNING CONTROL
                blink++;
                if (blink == 1000000){
 80007f4:	000f47b7          	lui	a5,0xf4
                blink++;
 80007f8:	0985                	addi	s3,s3,1
                if (blink == 1000000){
 80007fa:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf3240>
 80007fe:	00f99a63          	bne	s3,a5,8000812 <main+0x186>
                    blink = 0;
                    if(onOff){
 8000802:	220c0c63          	beqz	s8,8000a3a <main+0x3ae>
                        led_on_B0();
 8000806:	00006097          	auipc	ra,0x6
 800080a:	ab4080e7          	jalr	-1356(ra) # 80062ba <led_on_B0>
                        onOff = 0;
 800080e:	4c01                	li	s8,0
                    blink = 0;
 8000810:	4981                	li	s3,0
                        led_off_B0();
                        onOff = 1;
                    }
                }
                //BREAK IF PROGRAM SHOULDNT WRITE
                if(!write){
 8000812:	00092783          	lw	a5,0(s2)
 8000816:	d7e1                	beqz	a5,80007de <main+0x152>
                    break;
                }
                
                if(queue_str_len() > 5){ //Behövs högre hastighet så kan vi öka denna 5:an
 8000818:	00004097          	auipc	ra,0x4
 800081c:	e36080e7          	jalr	-458(ra) # 800464e <queue_str_len>
 8000820:	4795                	li	a5,5
 8000822:	faa7dee3          	bge	a5,a0,80007de <main+0x152>
                    memset(write_to_sd, '\0', sizeof(write_to_sd));
 8000826:	6785                	lui	a5,0x1
 8000828:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 800082c:	978a                	add	a5,a5,sp
 800082e:	60040493          	addi	s1,s0,1536
 8000832:	94be                	add	s1,s1,a5
 8000834:	6605                	lui	a2,0x1
 8000836:	4581                	li	a1,0
 8000838:	a0060613          	addi	a2,a2,-1536 # a00 <__dbg_stack_size+0xa00>
 800083c:	8526                	mv	a0,s1
 800083e:	00007097          	auipc	ra,0x7
 8000842:	18c080e7          	jalr	396(ra) # 80079ca <memset>
                    if (dequeue_string(write_to_sd, 5)) { //Behövs högre hastighet så kan vi öka denna 5:an
 8000846:	4595                	li	a1,5
 8000848:	8526                	mv	a0,s1
 800084a:	00004097          	auipc	ra,0x4
 800084e:	e36080e7          	jalr	-458(ra) # 8004680 <dequeue_string>
 8000852:	d551                	beqz	a0,80007de <main+0x152>
                        f_write(&fil, write_to_sd, strlen(write_to_sd), &bw);
 8000854:	8526                	mv	a0,s1
 8000856:	00007097          	auipc	ra,0x7
 800085a:	1ea080e7          	jalr	490(ra) # 8007a40 <strlen>
 800085e:	6785                	lui	a5,0x1
 8000860:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 8000864:	978a                	add	a5,a5,sp
 8000866:	1a840a13          	addi	s4,s0,424
 800086a:	9a3e                	add	s4,s4,a5
 800086c:	862a                	mv	a2,a0
 800086e:	86d6                	mv	a3,s5
 8000870:	85a6                	mv	a1,s1
 8000872:	8552                	mv	a0,s4
 8000874:	00003097          	auipc	ra,0x3
 8000878:	8ea080e7          	jalr	-1814(ra) # 800315e <f_write>
                        f_sync(&fil);
 800087c:	8552                	mv	a0,s4
 800087e:	00003097          	auipc	ra,0x3
 8000882:	ae8080e7          	jalr	-1304(ra) # 8003366 <f_sync>
        switch (get_state()){
 8000886:	bfa1                	j	80007de <main+0x152>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 8000888:	4589                	li	a1,2
 800088a:	40000537          	lui	a0,0x40000
 800088e:	00001097          	auipc	ra,0x1
 8000892:	002080e7          	jalr	2(ra) # 8001890 <timer_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 8000896:	6a05                	lui	s4,0x1
                eclic_global_interrupt_disable();    
 8000898:	00000097          	auipc	ra,0x0
 800089c:	616080e7          	jalr	1558(ra) # 8000eae <eclic_global_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80008a0:	ea0a0793          	addi	a5,s4,-352 # ea0 <__dbg_stack_size+0xea0>
 80008a4:	978a                	add	a5,a5,sp
 80008a6:	3d040513          	addi	a0,s0,976
 80008aa:	4605                	li	a2,1
 80008ac:	428b0593          	addi	a1,s6,1064
 80008b0:	953e                	add	a0,a0,a5
 80008b2:	00002097          	auipc	ra,0x2
 80008b6:	32a080e7          	jalr	810(ra) # 8002bdc <f_mount>
                f_sync(&fil);
 80008ba:	ea0a0793          	addi	a5,s4,-352
 80008be:	978a                	add	a5,a5,sp
 80008c0:	1a840493          	addi	s1,s0,424
 80008c4:	94be                	add	s1,s1,a5
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80008c6:	c62a                	sw	a0,12(sp)
                f_sync(&fil);
 80008c8:	8526                	mv	a0,s1
 80008ca:	00003097          	auipc	ra,0x3
 80008ce:	a9c080e7          	jalr	-1380(ra) # 8003366 <f_sync>
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80008d2:	4629                	li	a2,10
 80008d4:	85e6                	mv	a1,s9
 80008d6:	8526                	mv	a0,s1
 80008d8:	00002097          	auipc	ra,0x2
 80008dc:	360080e7          	jalr	864(ra) # 8002c38 <f_open>
 80008e0:	c62a                	sw	a0,12(sp)
                clear_queues();
 80008e2:	00004097          	auipc	ra,0x4
 80008e6:	e86080e7          	jalr	-378(ra) # 8004768 <clear_queues>
                char header[] = "Time;X-acc;Y-acc;Z-acc;X-deg/s;Y-deg/s;Z-deg/s;EMG\n";
 80008ea:	03400613          	li	a2,52
 80008ee:	074b8593          	addi	a1,s7,116
 80008f2:	0848                	addi	a0,sp,20
 80008f4:	00007097          	auipc	ra,0x7
 80008f8:	0c0080e7          	jalr	192(ra) # 80079b4 <memcpy>
                enqueue_string(header);
 80008fc:	ea0a0793          	addi	a5,s4,-352
 8000900:	978a                	add	a5,a5,sp
 8000902:	17440513          	addi	a0,s0,372
 8000906:	953e                	add	a0,a0,a5
 8000908:	00004097          	auipc	ra,0x4
 800090c:	cda080e7          	jalr	-806(ra) # 80045e2 <enqueue_string>
                milli = 0;
 8000910:	53cd0793          	addi	a5,s10,1340 # 2000053c <milli>
 8000914:	00079023          	sh	zero,0(a5)
                seconds = 0;
 8000918:	200007b7          	lui	a5,0x20000
 800091c:	5407a023          	sw	zero,1344(a5) # 20000540 <seconds>
                minutes = 0;
 8000920:	200007b7          	lui	a5,0x20000
 8000924:	52079f23          	sh	zero,1342(a5) # 2000053e <minutes>
                while(millis() < start_time);
 8000928:	200004b7          	lui	s1,0x20000
 800092c:	00006097          	auipc	ra,0x6
 8000930:	bf2080e7          	jalr	-1038(ra) # 800651e <millis>
 8000934:	54448793          	addi	a5,s1,1348 # 20000544 <start_time>
 8000938:	439c                	lw	a5,0(a5)
 800093a:	fef549e3          	blt	a0,a5,800092c <main+0x2a0>
                i2c_dma_master_read_register(I2C0, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H);
 800093e:	40005537          	lui	a0,0x40005
 8000942:	03b00613          	li	a2,59
 8000946:	06900593          	li	a1,105
 800094a:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 800094e:	00004097          	auipc	ra,0x4
 8000952:	a18080e7          	jalr	-1512(ra) # 8004366 <i2c_dma_master_read_register>
                set_state(RUNNING);
 8000956:	4501                	li	a0,0
 8000958:	00006097          	auipc	ra,0x6
 800095c:	0ec080e7          	jalr	236(ra) # 8006a44 <set_state>
                write = 1;
 8000960:	4785                	li	a5,1
 8000962:	00f92023          	sw	a5,0(s2)
                timer_interrupt_config();
 8000966:	00006097          	auipc	ra,0x6
 800096a:	97c080e7          	jalr	-1668(ra) # 80062e2 <timer_interrupt_config>
                config_clic_irqs();
 800096e:	00001097          	auipc	ra,0x1
 8000972:	64a080e7          	jalr	1610(ra) # 8001fb8 <config_clic_irqs>
                send_data_to_phone(Handle_start_stop,1);
 8000976:	4585                	li	a1,1
 8000978:	07500513          	li	a0,117
 800097c:	00005097          	auipc	ra,0x5
 8000980:	524080e7          	jalr	1316(ra) # 8005ea0 <send_data_to_phone>
                eclic_global_interrupt_enable();  
 8000984:	00000097          	auipc	ra,0x0
 8000988:	524080e7          	jalr	1316(ra) # 8000ea8 <eclic_global_interrupt_enable>
                break;
 800098c:	bd89                	j	80007de <main+0x152>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 800098e:	4589                	li	a1,2
 8000990:	40000537          	lui	a0,0x40000
 8000994:	00001097          	auipc	ra,0x1
 8000998:	efc080e7          	jalr	-260(ra) # 8001890 <timer_interrupt_disable>
                eclic_global_interrupt_disable();
 800099c:	00000097          	auipc	ra,0x0
 80009a0:	512080e7          	jalr	1298(ra) # 8000eae <eclic_global_interrupt_disable>
                send_data_to_phone(Handle_start_stop,0);
 80009a4:	4581                	li	a1,0
 80009a6:	07500513          	li	a0,117
 80009aa:	00005097          	auipc	ra,0x5
 80009ae:	4f6080e7          	jalr	1270(ra) # 8005ea0 <send_data_to_phone>
                write_to_sd[0] = '\0';
 80009b2:	6705                	lui	a4,0x1
 80009b4:	ea070793          	addi	a5,a4,-352 # ea0 <__dbg_stack_size+0xea0>
 80009b8:	978a                	add	a5,a5,sp
                while(empty_string_queue(write_to_sd, 10)){
 80009ba:	ea070693          	addi	a3,a4,-352
                write_to_sd[0] = '\0';
 80009be:	97a2                	add	a5,a5,s0
                while(empty_string_queue(write_to_sd, 10)){
 80009c0:	968a                	add	a3,a3,sp
 80009c2:	60040493          	addi	s1,s0,1536
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80009c6:	1a840a13          	addi	s4,s0,424
                write_to_sd[0] = '\0';
 80009ca:	60078023          	sb	zero,1536(a5)
                while(empty_string_queue(write_to_sd, 10)){
 80009ce:	94b6                	add	s1,s1,a3
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80009d0:	9a36                	add	s4,s4,a3
                    write_to_sd[0] = '\0';
 80009d2:	8dbe                	mv	s11,a5
                while(empty_string_queue(write_to_sd, 10)){
 80009d4:	45a9                	li	a1,10
 80009d6:	8526                	mv	a0,s1
 80009d8:	00004097          	auipc	ra,0x4
 80009dc:	d24080e7          	jalr	-732(ra) # 80046fc <empty_string_queue>
 80009e0:	e905                	bnez	a0,8000a10 <main+0x384>
                f_close(&fil);
 80009e2:	6785                	lui	a5,0x1
 80009e4:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 80009e8:	978a                	add	a5,a5,sp
 80009ea:	1a840513          	addi	a0,s0,424
 80009ee:	953e                	add	a0,a0,a5
 80009f0:	00003097          	auipc	ra,0x3
 80009f4:	b26080e7          	jalr	-1242(ra) # 8003516 <f_close>
                set_state(RUNNING);
 80009f8:	4501                	li	a0,0
 80009fa:	00006097          	auipc	ra,0x6
 80009fe:	04a080e7          	jalr	74(ra) # 8006a44 <set_state>
                write = 0;
 8000a02:	00092023          	sw	zero,0(s2)
                eclic_global_interrupt_enable();
 8000a06:	00000097          	auipc	ra,0x0
 8000a0a:	4a2080e7          	jalr	1186(ra) # 8000ea8 <eclic_global_interrupt_enable>
                break;
 8000a0e:	bbc1                	j	80007de <main+0x152>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a10:	8526                	mv	a0,s1
 8000a12:	00007097          	auipc	ra,0x7
 8000a16:	02e080e7          	jalr	46(ra) # 8007a40 <strlen>
 8000a1a:	862a                	mv	a2,a0
 8000a1c:	86d6                	mv	a3,s5
 8000a1e:	85a6                	mv	a1,s1
 8000a20:	8552                	mv	a0,s4
 8000a22:	00002097          	auipc	ra,0x2
 8000a26:	73c080e7          	jalr	1852(ra) # 800315e <f_write>
                    f_sync(&fil);
 8000a2a:	8552                	mv	a0,s4
 8000a2c:	00003097          	auipc	ra,0x3
 8000a30:	93a080e7          	jalr	-1734(ra) # 8003366 <f_sync>
                    write_to_sd[0] = '\0';
 8000a34:	600d8023          	sb	zero,1536(s11)
 8000a38:	bf71                	j	80009d4 <main+0x348>
                        led_off_B0();
 8000a3a:	00006097          	auipc	ra,0x6
 8000a3e:	894080e7          	jalr	-1900(ra) # 80062ce <led_off_B0>
                    blink = 0;
 8000a42:	4981                	li	s3,0
                        onOff = 1;
 8000a44:	4c05                	li	s8,1
 8000a46:	b3f1                	j	8000812 <main+0x186>

08000a48 <adc_deinit>:
    \param[in]  adc_periph: ADCx, x=0,1
    \param[out] none
    \retval     none
*/
void adc_deinit(uint32_t adc_periph)
{
 8000a48:	1141                	addi	sp,sp,-16
    switch(adc_periph){
 8000a4a:	400127b7          	lui	a5,0x40012
{
 8000a4e:	c606                	sw	ra,12(sp)
    switch(adc_periph){
 8000a50:	40078793          	addi	a5,a5,1024 # 40012400 <_sp+0x2000a400>
 8000a54:	00f50b63          	beq	a0,a5,8000a6a <adc_deinit+0x22>
 8000a58:	400137b7          	lui	a5,0x40013
 8000a5c:	80078793          	addi	a5,a5,-2048 # 40012800 <_sp+0x2000a800>
 8000a60:	02f50363          	beq	a0,a5,8000a86 <adc_deinit+0x3e>
        rcu_periph_reset_disable(RCU_ADC1RST);
        break;
    default:
        break;
    }
}
 8000a64:	40b2                	lw	ra,12(sp)
 8000a66:	0141                	addi	sp,sp,16
 8000a68:	8082                	ret
        rcu_periph_reset_enable(RCU_ADC0RST);
 8000a6a:	30900513          	li	a0,777
 8000a6e:	00000097          	auipc	ra,0x0
 8000a72:	74c080e7          	jalr	1868(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC0RST);
 8000a76:	30900513          	li	a0,777
}
 8000a7a:	40b2                	lw	ra,12(sp)
 8000a7c:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000a7e:	00000317          	auipc	t1,0x0
 8000a82:	75430067          	jr	1876(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_ADC1RST);
 8000a86:	30a00513          	li	a0,778
 8000a8a:	00000097          	auipc	ra,0x0
 8000a8e:	730080e7          	jalr	1840(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000a92:	30a00513          	li	a0,778
 8000a96:	b7d5                	j	8000a7a <adc_deinit+0x32>

08000a98 <adc_mode_config>:
    \param[out] none
    \retval     none
*/
void adc_mode_config(uint32_t mode)
{
    ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
 8000a98:	400127b7          	lui	a5,0x40012
 8000a9c:	4047a703          	lw	a4,1028(a5) # 40012404 <_sp+0x2000a404>
 8000aa0:	fff106b7          	lui	a3,0xfff10
 8000aa4:	16fd                	addi	a3,a3,-1
 8000aa6:	8f75                	and	a4,a4,a3
 8000aa8:	40e7a223          	sw	a4,1028(a5)
    ADC_CTL0(ADC0) |= mode;
 8000aac:	4047a703          	lw	a4,1028(a5)
 8000ab0:	8d59                	or	a0,a0,a4
 8000ab2:	40a7a223          	sw	a0,1028(a5)
}
 8000ab6:	8082                	ret

08000ab8 <adc_special_function_config>:
    \param[out] none
    \retval     none
*/
void adc_special_function_config(uint32_t adc_periph, uint32_t function, ControlStatus newvalue)
{
    if(newvalue){
 8000ab8:	1005f793          	andi	a5,a1,256
 8000abc:	4005f713          	andi	a4,a1,1024
 8000ac0:	8989                	andi	a1,a1,2
 8000ac2:	c20d                	beqz	a2,8000ae4 <adc_special_function_config+0x2c>
        if(0U != (function & ADC_SCAN_MODE)){
 8000ac4:	c789                	beqz	a5,8000ace <adc_special_function_config+0x16>
            /* enable scan mode */
            ADC_CTL0(adc_periph) |= ADC_SCAN_MODE;
 8000ac6:	415c                	lw	a5,4(a0)
 8000ac8:	1007e793          	ori	a5,a5,256
 8000acc:	c15c                	sw	a5,4(a0)
        }
        if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
 8000ace:	c709                	beqz	a4,8000ad8 <adc_special_function_config+0x20>
            /* enable inserted channel group convert automatically */
            ADC_CTL0(adc_periph) |= ADC_INSERTED_CHANNEL_AUTO;
 8000ad0:	415c                	lw	a5,4(a0)
 8000ad2:	4007e793          	ori	a5,a5,1024
 8000ad6:	c15c                	sw	a5,4(a0)
        } 
        if(0U != (function & ADC_CONTINUOUS_MODE)){
 8000ad8:	c589                	beqz	a1,8000ae2 <adc_special_function_config+0x2a>
            /* enable continuous mode */
            ADC_CTL1(adc_periph) |= ADC_CONTINUOUS_MODE;
 8000ada:	451c                	lw	a5,8(a0)
 8000adc:	0027e793          	ori	a5,a5,2
            /* disable inserted channel group convert automatically */
            ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
        } 
        if(0U != (function & ADC_CONTINUOUS_MODE)){
            /* disable continuous mode */
            ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
 8000ae0:	c51c                	sw	a5,8(a0)
        }       
    }
}
 8000ae2:	8082                	ret
        if(0U != (function & ADC_SCAN_MODE)){
 8000ae4:	c789                	beqz	a5,8000aee <adc_special_function_config+0x36>
            ADC_CTL0(adc_periph) &= ~ADC_SCAN_MODE;
 8000ae6:	415c                	lw	a5,4(a0)
 8000ae8:	eff7f793          	andi	a5,a5,-257
 8000aec:	c15c                	sw	a5,4(a0)
        if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
 8000aee:	c709                	beqz	a4,8000af8 <adc_special_function_config+0x40>
            ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
 8000af0:	415c                	lw	a5,4(a0)
 8000af2:	bff7f793          	andi	a5,a5,-1025
 8000af6:	c15c                	sw	a5,4(a0)
        if(0U != (function & ADC_CONTINUOUS_MODE)){
 8000af8:	d5ed                	beqz	a1,8000ae2 <adc_special_function_config+0x2a>
            ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
 8000afa:	451c                	lw	a5,8(a0)
 8000afc:	9bf5                	andi	a5,a5,-3
 8000afe:	b7cd                	j	8000ae0 <adc_special_function_config+0x28>

08000b00 <adc_data_alignment_config>:
*/
void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
{
    if(ADC_DATAALIGN_RIGHT != data_alignment){
        /* MSB alignment */
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000b00:	451c                	lw	a5,8(a0)
    if(ADC_DATAALIGN_RIGHT != data_alignment){
 8000b02:	c599                	beqz	a1,8000b10 <adc_data_alignment_config+0x10>
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000b04:	6705                	lui	a4,0x1
 8000b06:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
 8000b0a:	8fd9                	or	a5,a5,a4
    }else{
        /* LSB alignment */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000b0c:	c51c                	sw	a5,8(a0)
    }
}
 8000b0e:	8082                	ret
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000b10:	777d                	lui	a4,0xfffff
 8000b12:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 8000b16:	8ff9                	and	a5,a5,a4
 8000b18:	bfd5                	j	8000b0c <adc_data_alignment_config+0xc>

08000b1a <adc_enable>:
    \param[out] none
    \retval     none
*/
void adc_enable(uint32_t adc_periph)
{
    if((uint32_t)RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
 8000b1a:	451c                	lw	a5,8(a0)
 8000b1c:	8b85                	andi	a5,a5,1
 8000b1e:	e789                	bnez	a5,8000b28 <adc_enable+0xe>
        /* enable ADC */
        ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
 8000b20:	451c                	lw	a5,8(a0)
 8000b22:	0017e793          	ori	a5,a5,1
 8000b26:	c51c                	sw	a5,8(a0)
    }       
}
 8000b28:	8082                	ret

08000b2a <adc_calibration_enable>:
    \retval     none
*/
void adc_calibration_enable(uint32_t adc_periph)
{
    /* reset the selected ADC1 calibration registers */
    ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
 8000b2a:	451c                	lw	a5,8(a0)
 8000b2c:	00850713          	addi	a4,a0,8 # 40000008 <_sp+0x1fff8008>
 8000b30:	0087e793          	ori	a5,a5,8
 8000b34:	c51c                	sw	a5,8(a0)
    /* check the RSTCLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
 8000b36:	431c                	lw	a5,0(a4)
 8000b38:	8ba1                	andi	a5,a5,8
 8000b3a:	fff5                	bnez	a5,8000b36 <adc_calibration_enable+0xc>
    }
    /* enable ADC calibration process */
    ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
 8000b3c:	451c                	lw	a5,8(a0)
 8000b3e:	0047e793          	ori	a5,a5,4
 8000b42:	c51c                	sw	a5,8(a0)
    /* check the CLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
 8000b44:	431c                	lw	a5,0(a4)
 8000b46:	8b91                	andi	a5,a5,4
 8000b48:	fff5                	bnez	a5,8000b44 <adc_calibration_enable+0x1a>
    }
}
 8000b4a:	8082                	ret

08000b4c <adc_channel_length_config>:
    \param[out] none
    \retval     none
*/
void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
{
    switch(adc_channel_group){
 8000b4c:	4785                	li	a5,1
 8000b4e:	00f58663          	beq	a1,a5,8000b5a <adc_channel_length_config+0xe>
 8000b52:	4789                	li	a5,2
 8000b54:	02f58263          	beq	a1,a5,8000b78 <adc_channel_length_config+0x2c>
 8000b58:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure the length of regular channel group */
        ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
 8000b5a:	555c                	lw	a5,44(a0)
 8000b5c:	ff100737          	lui	a4,0xff100
 8000b60:	177d                	addi	a4,a4,-1
 8000b62:	8ff9                	and	a5,a5,a4
 8000b64:	d55c                	sw	a5,44(a0)
        ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000b66:	555c                	lw	a5,44(a0)
 8000b68:	167d                	addi	a2,a2,-1
 8000b6a:	0652                	slli	a2,a2,0x14
 8000b6c:	00f00737          	lui	a4,0xf00
 8000b70:	8e79                	and	a2,a2,a4
 8000b72:	8e5d                	or	a2,a2,a5
 8000b74:	d550                	sw	a2,44(a0)
        break;
 8000b76:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure the length of inserted channel group */
        ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
 8000b78:	5d1c                	lw	a5,56(a0)
 8000b7a:	ffd00737          	lui	a4,0xffd00
 8000b7e:	177d                	addi	a4,a4,-1
 8000b80:	8ff9                	and	a5,a5,a4
 8000b82:	dd1c                	sw	a5,56(a0)
        ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000b84:	5d1c                	lw	a5,56(a0)
 8000b86:	167d                	addi	a2,a2,-1
 8000b88:	0652                	slli	a2,a2,0x14
 8000b8a:	00300737          	lui	a4,0x300
 8000b8e:	8e79                	and	a2,a2,a4
 8000b90:	8e5d                	or	a2,a2,a5
 8000b92:	dd10                	sw	a2,56(a0)
        break;
    default:
        break;
    }
}
 8000b94:	8082                	ret

08000b96 <adc_regular_channel_config>:
void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
{
    uint32_t rsq,sampt;
    
    /* ADC regular sequence config */
    if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
 8000b96:	4715                	li	a4,5
 8000b98:	04b76363          	bltu	a4,a1,8000bde <adc_regular_channel_config+0x48>
        /* the regular group sequence rank is smaller than six */
        rsq = ADC_RSQ2(adc_periph);
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000b9c:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ2(adc_periph);
 8000ba0:	03452803          	lw	a6,52(a0)
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000ba4:	47fd                	li	a5,31
 8000ba6:	00b797b3          	sll	a5,a5,a1
 8000baa:	fff7c793          	not	a5,a5
 8000bae:	0107f7b3          	and	a5,a5,a6
        /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
 8000bb2:	00b615b3          	sll	a1,a2,a1
 8000bb6:	8ddd                	or	a1,a1,a5
        ADC_RSQ2(adc_periph) = rsq;
 8000bb8:	d94c                	sw	a1,52(a0)
        ADC_RSQ0(adc_periph) = rsq;
    }else{
    }
    
    /* ADC sampling time config */
    if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
 8000bba:	47a5                	li	a5,9
 8000bbc:	06c7e963          	bltu	a5,a2,8000c2e <adc_regular_channel_config+0x98>
        /* the regular group sequence rank is smaller than ten */
        sampt = ADC_SAMPT1(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000bc0:	478d                	li	a5,3
 8000bc2:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT1(adc_periph);
 8000bc6:	490c                	lw	a1,16(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000bc8:	471d                	li	a4,7
 8000bca:	00c71733          	sll	a4,a4,a2
 8000bce:	fff74713          	not	a4,a4
 8000bd2:	8f6d                	and	a4,a4,a1
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
 8000bd4:	00c69633          	sll	a2,a3,a2
 8000bd8:	8e59                	or	a2,a2,a4
        ADC_SAMPT1(adc_periph) = sampt;
 8000bda:	c910                	sw	a2,16(a0)
 8000bdc:	8082                	ret
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
 8000bde:	47ad                	li	a5,11
 8000be0:	02b7e363          	bltu	a5,a1,8000c06 <adc_regular_channel_config+0x70>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000be4:	15e9                	addi	a1,a1,-6
 8000be6:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ1(adc_periph);
 8000bea:	03052803          	lw	a6,48(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000bee:	47fd                	li	a5,31
 8000bf0:	00b797b3          	sll	a5,a5,a1
 8000bf4:	fff7c793          	not	a5,a5
 8000bf8:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
 8000bfc:	00b615b3          	sll	a1,a2,a1
 8000c00:	8ddd                	or	a1,a1,a5
        ADC_RSQ1(adc_periph) = rsq;
 8000c02:	d90c                	sw	a1,48(a0)
 8000c04:	bf5d                	j	8000bba <adc_regular_channel_config+0x24>
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
 8000c06:	47bd                	li	a5,15
 8000c08:	fab7e9e3          	bltu	a5,a1,8000bba <adc_regular_channel_config+0x24>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000c0c:	15d1                	addi	a1,a1,-12
 8000c0e:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ0(adc_periph);
 8000c12:	02c52803          	lw	a6,44(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000c16:	47fd                	li	a5,31
 8000c18:	00b797b3          	sll	a5,a5,a1
 8000c1c:	fff7c793          	not	a5,a5
 8000c20:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
 8000c24:	00b615b3          	sll	a1,a2,a1
 8000c28:	8ddd                	or	a1,a1,a5
        ADC_RSQ0(adc_periph) = rsq;
 8000c2a:	d54c                	sw	a1,44(a0)
 8000c2c:	b779                	j	8000bba <adc_regular_channel_config+0x24>
    }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
 8000c2e:	47c5                	li	a5,17
 8000c30:	02c7e163          	bltu	a5,a2,8000c52 <adc_regular_channel_config+0xbc>
        /* the regular group sequence rank is smaller than eighteen */
        sampt = ADC_SAMPT0(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000c34:	478d                	li	a5,3
 8000c36:	1659                	addi	a2,a2,-10
 8000c38:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT0(adc_periph);
 8000c3c:	4558                	lw	a4,12(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000c3e:	479d                	li	a5,7
 8000c40:	00c797b3          	sll	a5,a5,a2
 8000c44:	fff7c793          	not	a5,a5
 8000c48:	8ff9                	and	a5,a5,a4
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
 8000c4a:	00c69633          	sll	a2,a3,a2
 8000c4e:	8fd1                	or	a5,a5,a2
        ADC_SAMPT0(adc_periph) = sampt;
 8000c50:	c55c                	sw	a5,12(a0)
    }else{
    }
}
 8000c52:	8082                	ret

08000c54 <adc_external_trigger_source_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
{   
    switch(adc_channel_group){
 8000c54:	4785                	li	a5,1
 8000c56:	00f58663          	beq	a1,a5,8000c62 <adc_external_trigger_source_config+0xe>
 8000c5a:	4789                	li	a5,2
 8000c5c:	00f58d63          	beq	a1,a5,8000c76 <adc_external_trigger_source_config+0x22>
 8000c60:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure ADC regular group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
 8000c62:	4514                	lw	a3,8(a0)
 8000c64:	fff205b7          	lui	a1,0xfff20
 8000c68:	15fd                	addi	a1,a1,-1
 8000c6a:	8eed                	and	a3,a3,a1
 8000c6c:	c514                	sw	a3,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000c6e:	4518                	lw	a4,8(a0)
 8000c70:	8f51                	or	a4,a4,a2
 8000c72:	c518                	sw	a4,8(a0)
        break;
 8000c74:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure ADC inserted group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
 8000c76:	4518                	lw	a4,8(a0)
 8000c78:	76e5                	lui	a3,0xffff9
 8000c7a:	16fd                	addi	a3,a3,-1
 8000c7c:	8f75                	and	a4,a4,a3
 8000c7e:	c518                	sw	a4,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000c80:	451c                	lw	a5,8(a0)
 8000c82:	8fd1                	or	a5,a5,a2
 8000c84:	c51c                	sw	a5,8(a0)
        break;
    default:
        break;
    }
}
 8000c86:	8082                	ret

08000c88 <adc_external_trigger_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
{
    if(newvalue){
 8000c88:	0015f793          	andi	a5,a1,1
 8000c8c:	8989                	andi	a1,a1,2
 8000c8e:	ce09                	beqz	a2,8000ca8 <adc_external_trigger_config+0x20>
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000c90:	c791                	beqz	a5,8000c9c <adc_external_trigger_config+0x14>
            /* enable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
 8000c92:	451c                	lw	a5,8(a0)
 8000c94:	00100737          	lui	a4,0x100
 8000c98:	8fd9                	or	a5,a5,a4
 8000c9a:	c51c                	sw	a5,8(a0)
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000c9c:	c589                	beqz	a1,8000ca6 <adc_external_trigger_config+0x1e>
            /* enable ADC inserted channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
 8000c9e:	451c                	lw	a5,8(a0)
 8000ca0:	6721                	lui	a4,0x8
 8000ca2:	8fd9                	or	a5,a5,a4
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000ca4:	c51c                	sw	a5,8(a0)
        }      
    }
}
 8000ca6:	8082                	ret
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000ca8:	c799                	beqz	a5,8000cb6 <adc_external_trigger_config+0x2e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
 8000caa:	451c                	lw	a5,8(a0)
 8000cac:	fff00737          	lui	a4,0xfff00
 8000cb0:	177d                	addi	a4,a4,-1
 8000cb2:	8ff9                	and	a5,a5,a4
 8000cb4:	c51c                	sw	a5,8(a0)
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000cb6:	d9e5                	beqz	a1,8000ca6 <adc_external_trigger_config+0x1e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000cb8:	451c                	lw	a5,8(a0)
 8000cba:	7761                	lui	a4,0xffff8
 8000cbc:	177d                	addi	a4,a4,-1
 8000cbe:	8ff9                	and	a5,a5,a4
 8000cc0:	b7d5                	j	8000ca4 <adc_external_trigger_config+0x1c>

08000cc2 <adc_software_trigger_enable>:
    \param[out] none
    \retval     none
*/
void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
{
    if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000cc2:	0015f793          	andi	a5,a1,1
 8000cc6:	c791                	beqz	a5,8000cd2 <adc_software_trigger_enable+0x10>
        /* enable ADC regular channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
 8000cc8:	451c                	lw	a5,8(a0)
 8000cca:	00400737          	lui	a4,0x400
 8000cce:	8fd9                	or	a5,a5,a4
 8000cd0:	c51c                	sw	a5,8(a0)
    }
    if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000cd2:	8989                	andi	a1,a1,2
 8000cd4:	c591                	beqz	a1,8000ce0 <adc_software_trigger_enable+0x1e>
        /* enable ADC inserted channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
 8000cd6:	451c                	lw	a5,8(a0)
 8000cd8:	00200737          	lui	a4,0x200
 8000cdc:	8fd9                	or	a5,a5,a4
 8000cde:	c51c                	sw	a5,8(a0)
    }
}
 8000ce0:	8082                	ret

08000ce2 <dma_deinit>:
*/
static ErrStatus dma_periph_and_channel_check(uint32_t dma_periph, dma_channel_enum channelx)
{
    ErrStatus val = SUCCESS;

    if(DMA1 == dma_periph){
 8000ce2:	400207b7          	lui	a5,0x40020
 8000ce6:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000cea:	00f51663          	bne	a0,a5,8000cf6 <dma_deinit+0x14>
        /* for DMA1, the channel is from DMA_CH0 to DMA_CH4 */
        if(channelx > DMA_CH4){
 8000cee:	4791                	li	a5,4
 8000cf0:	00b7f363          	bgeu	a5,a1,8000cf6 <dma_deinit+0x14>
		DMA_WRONG_HANDLE
 8000cf4:	a001                	j	8000cf4 <dma_deinit+0x12>
	DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
 8000cf6:	47d1                	li	a5,20
 8000cf8:	02f587b3          	mul	a5,a1,a5
 8000cfc:	97aa                	add	a5,a5,a0
 8000cfe:	4798                	lw	a4,8(a5)
 8000d00:	9b79                	andi	a4,a4,-2
 8000d02:	c798                	sw	a4,8(a5)
	DMA_CHCTL(dma_periph, channelx) = DMA_CHCTL_RESET_VALUE;
 8000d04:	0007a423          	sw	zero,8(a5)
	DMA_CHCNT(dma_periph, channelx) = DMA_CHCNT_RESET_VALUE;
 8000d08:	0007a623          	sw	zero,12(a5)
	DMA_CHPADDR(dma_periph, channelx) = DMA_CHPADDR_RESET_VALUE;
 8000d0c:	0007a823          	sw	zero,16(a5)
	DMA_CHMADDR(dma_periph, channelx) = DMA_CHMADDR_RESET_VALUE;
 8000d10:	0007aa23          	sw	zero,20(a5)
	DMA_INTC(dma_periph) |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, (uint32_t)channelx);
 8000d14:	4158                	lw	a4,4(a0)
 8000d16:	00259793          	slli	a5,a1,0x2
 8000d1a:	45bd                	li	a1,15
 8000d1c:	00f595b3          	sll	a1,a1,a5
 8000d20:	8dd9                	or	a1,a1,a4
 8000d22:	c14c                	sw	a1,4(a0)
}
 8000d24:	8082                	ret

08000d26 <dma_init>:
    if(DMA1 == dma_periph){
 8000d26:	400207b7          	lui	a5,0x40020
 8000d2a:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000d2e:	00f51663          	bne	a0,a5,8000d3a <dma_init+0x14>
        if(channelx > DMA_CH4){
 8000d32:	4791                	li	a5,4
 8000d34:	00b7f363          	bgeu	a5,a1,8000d3a <dma_init+0x14>
        DMA_WRONG_HANDLE
 8000d38:	a001                	j	8000d38 <dma_init+0x12>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000d3a:	47d1                	li	a5,20
 8000d3c:	02f585b3          	mul	a1,a1,a5
 8000d40:	421c                	lw	a5,0(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000d42:	7771                	lui	a4,0xffffc
 8000d44:	0ff70713          	addi	a4,a4,255 # ffffc0ff <_sp+0xdfff40ff>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000d48:	952e                	add	a0,a0,a1
 8000d4a:	c91c                	sw	a5,16(a0)
    DMA_CHMADDR(dma_periph, channelx) = init_struct->memory_addr;
 8000d4c:	461c                	lw	a5,8(a2)
 8000d4e:	c95c                	sw	a5,20(a0)
    DMA_CHCNT(dma_periph, channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 8000d50:	01065783          	lhu	a5,16(a2)
 8000d54:	c55c                	sw	a5,12(a0)
    ctl = DMA_CHCTL(dma_periph, channelx);
 8000d56:	451c                	lw	a5,8(a0)
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000d58:	4654                	lw	a3,12(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000d5a:	8f7d                	and	a4,a4,a5
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000d5c:	425c                	lw	a5,4(a2)
 8000d5e:	8fd5                	or	a5,a5,a3
 8000d60:	4a54                	lw	a3,20(a2)
 8000d62:	8fd5                	or	a5,a5,a3
 8000d64:	8fd9                	or	a5,a5,a4
    DMA_CHCTL(dma_periph, channelx) = ctl;
 8000d66:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc){
 8000d68:	01864703          	lbu	a4,24(a2)
 8000d6c:	4785                	li	a5,1
 8000d6e:	02f71663          	bne	a4,a5,8000d9a <dma_init+0x74>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
 8000d72:	451c                	lw	a5,8(a0)
 8000d74:	0407e793          	ori	a5,a5,64
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000d78:	c51c                	sw	a5,8(a0)
    if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc){
 8000d7a:	01964703          	lbu	a4,25(a2)
 8000d7e:	4785                	li	a5,1
 8000d80:	02f71163          	bne	a4,a5,8000da2 <dma_init+0x7c>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
 8000d84:	451c                	lw	a5,8(a0)
 8000d86:	0807e793          	ori	a5,a5,128
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000d8a:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction){
 8000d8c:	01a64783          	lbu	a5,26(a2)
 8000d90:	ef89                	bnez	a5,8000daa <dma_init+0x84>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
 8000d92:	451c                	lw	a5,8(a0)
 8000d94:	9bbd                	andi	a5,a5,-17
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000d96:	c51c                	sw	a5,8(a0)
}
 8000d98:	8082                	ret
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000d9a:	451c                	lw	a5,8(a0)
 8000d9c:	fbf7f793          	andi	a5,a5,-65
 8000da0:	bfe1                	j	8000d78 <dma_init+0x52>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000da2:	451c                	lw	a5,8(a0)
 8000da4:	f7f7f793          	andi	a5,a5,-129
 8000da8:	b7cd                	j	8000d8a <dma_init+0x64>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000daa:	451c                	lw	a5,8(a0)
 8000dac:	0107e793          	ori	a5,a5,16
 8000db0:	b7dd                	j	8000d96 <dma_init+0x70>

08000db2 <dma_circulation_disable>:
    if(DMA1 == dma_periph){
 8000db2:	400207b7          	lui	a5,0x40020
 8000db6:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000dba:	00f51663          	bne	a0,a5,8000dc6 <dma_circulation_disable+0x14>
        if(channelx > DMA_CH4){
 8000dbe:	4791                	li	a5,4
 8000dc0:	00b7f363          	bgeu	a5,a1,8000dc6 <dma_circulation_disable+0x14>
        DMA_WRONG_HANDLE
 8000dc4:	a001                	j	8000dc4 <dma_circulation_disable+0x12>
    DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CMEN;
 8000dc6:	47d1                	li	a5,20
 8000dc8:	02f585b3          	mul	a1,a1,a5
 8000dcc:	952e                	add	a0,a0,a1
 8000dce:	451c                	lw	a5,8(a0)
 8000dd0:	fdf7f793          	andi	a5,a5,-33
 8000dd4:	c51c                	sw	a5,8(a0)
}
 8000dd6:	8082                	ret

08000dd8 <dma_channel_enable>:
    if(DMA1 == dma_periph){
 8000dd8:	400207b7          	lui	a5,0x40020
 8000ddc:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000de0:	00f51663          	bne	a0,a5,8000dec <dma_channel_enable+0x14>
        if(channelx > DMA_CH4){
 8000de4:	4791                	li	a5,4
 8000de6:	00b7f363          	bgeu	a5,a1,8000dec <dma_channel_enable+0x14>
        DMA_WRONG_HANDLE
 8000dea:	a001                	j	8000dea <dma_channel_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CHEN;
 8000dec:	47d1                	li	a5,20
 8000dee:	02f585b3          	mul	a1,a1,a5
 8000df2:	952e                	add	a0,a0,a1
 8000df4:	451c                	lw	a5,8(a0)
 8000df6:	0017e793          	ori	a5,a5,1
 8000dfa:	c51c                	sw	a5,8(a0)
}
 8000dfc:	8082                	ret

08000dfe <dma_flag_clear>:
    DMA_INTC(dma_periph) |= DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000dfe:	415c                	lw	a5,4(a0)
 8000e00:	058a                	slli	a1,a1,0x2
 8000e02:	00b61633          	sll	a2,a2,a1
 8000e06:	8e5d                	or	a2,a2,a5
 8000e08:	c150                	sw	a2,4(a0)
}
 8000e0a:	8082                	ret

08000e0c <dma_interrupt_flag_get>:
	switch(flag){
 8000e0c:	4791                	li	a5,4
 8000e0e:	02f60a63          	beq	a2,a5,8000e42 <dma_interrupt_flag_get+0x36>
 8000e12:	47a1                	li	a5,8
 8000e14:	04f60563          	beq	a2,a5,8000e5e <dma_interrupt_flag_get+0x52>
 8000e18:	4789                	li	a5,2
 8000e1a:	06f61063          	bne	a2,a5,8000e7a <dma_interrupt_flag_get+0x6e>
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e1e:	411c                	lw	a5,0(a0)
 8000e20:	00259713          	slli	a4,a1,0x2
 8000e24:	00e61633          	sll	a2,a2,a4
 8000e28:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_FTFIE;
 8000e2a:	47d1                	li	a5,20
 8000e2c:	02f585b3          	mul	a1,a1,a5
 8000e30:	05a1                	addi	a1,a1,8
 8000e32:	95aa                	add	a1,a1,a0
 8000e34:	419c                	lw	a5,0(a1)
 8000e36:	8b89                	andi	a5,a5,2
	if(interrupt_flag && interrupt_enable){
 8000e38:	c219                	beqz	a2,8000e3e <dma_interrupt_flag_get+0x32>
 8000e3a:	00f03633          	snez	a2,a5
}
 8000e3e:	8532                	mv	a0,a2
 8000e40:	8082                	ret
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e42:	411c                	lw	a5,0(a0)
 8000e44:	00259713          	slli	a4,a1,0x2
 8000e48:	00e61633          	sll	a2,a2,a4
 8000e4c:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_HTFIE;
 8000e4e:	47d1                	li	a5,20
 8000e50:	02f585b3          	mul	a1,a1,a5
 8000e54:	05a1                	addi	a1,a1,8
 8000e56:	95aa                	add	a1,a1,a0
 8000e58:	419c                	lw	a5,0(a1)
 8000e5a:	8b91                	andi	a5,a5,4
			break;
 8000e5c:	bff1                	j	8000e38 <dma_interrupt_flag_get+0x2c>
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e5e:	411c                	lw	a5,0(a0)
 8000e60:	00259713          	slli	a4,a1,0x2
 8000e64:	00e61633          	sll	a2,a2,a4
 8000e68:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_ERRIE;
 8000e6a:	47d1                	li	a5,20
 8000e6c:	02f585b3          	mul	a1,a1,a5
 8000e70:	05a1                	addi	a1,a1,8
 8000e72:	95aa                	add	a1,a1,a0
 8000e74:	419c                	lw	a5,0(a1)
 8000e76:	8ba1                	andi	a5,a5,8
			break;
 8000e78:	b7c1                	j	8000e38 <dma_interrupt_flag_get+0x2c>
			DMA_WRONG_HANDLE
 8000e7a:	a001                	j	8000e7a <dma_interrupt_flag_get+0x6e>

08000e7c <dma_interrupt_flag_clear>:
 8000e7c:	00000317          	auipc	t1,0x0
 8000e80:	f8230067          	jr	-126(t1) # 8000dfe <dma_flag_clear>

08000e84 <dma_interrupt_enable>:
    if(DMA1 == dma_periph){
 8000e84:	40020737          	lui	a4,0x40020
 8000e88:	40070713          	addi	a4,a4,1024 # 40020400 <_sp+0x20018400>
 8000e8c:	00e51663          	bne	a0,a4,8000e98 <dma_interrupt_enable+0x14>
        if(channelx > DMA_CH4){
 8000e90:	4791                	li	a5,4
 8000e92:	00b7f363          	bgeu	a5,a1,8000e98 <dma_interrupt_enable+0x14>
        DMA_WRONG_HANDLE
 8000e96:	a001                	j	8000e96 <dma_interrupt_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= source;
 8000e98:	47d1                	li	a5,20
 8000e9a:	02f585b3          	mul	a1,a1,a5
 8000e9e:	952e                	add	a0,a0,a1
 8000ea0:	451c                	lw	a5,8(a0)
 8000ea2:	8fd1                	or	a5,a5,a2
 8000ea4:	c51c                	sw	a5,8(a0)
}
 8000ea6:	8082                	ret

08000ea8 <eclic_global_interrupt_enable>:
    \retval     none
*/
void eclic_global_interrupt_enable(void)
{
    /* set machine interrupt enable bit */
    set_csr(mstatus, MSTATUS_MIE);
 8000ea8:	300467f3          	csrrsi	a5,mstatus,8
}
 8000eac:	8082                	ret

08000eae <eclic_global_interrupt_disable>:
    \retval     none
*/
void eclic_global_interrupt_disable(void)
{
    /* clear machine interrupt enable bit */
    clear_csr(mstatus, MSTATUS_MIE);
 8000eae:	300477f3          	csrrci	a5,mstatus,8
}
 8000eb2:	8082                	ret

08000eb4 <eclic_priority_group_set>:
    \param[out] none
    \retval     none
*/
void eclic_priority_group_set(uint8_t prigroup)
{
    eclic_set_nlbits(prigroup);
 8000eb4:	00001317          	auipc	t1,0x1
 8000eb8:	f1a30067          	jr	-230(t1) # 8001dce <eclic_set_nlbits>

08000ebc <eclic_irq_enable>:
    \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
    \param[out] none
    \retval     none
*/
void eclic_irq_enable(uint32_t source, uint8_t level, uint8_t priority)
{
 8000ebc:	1101                	addi	sp,sp,-32
 8000ebe:	ce06                	sw	ra,28(sp)
 8000ec0:	cc22                	sw	s0,24(sp)
 8000ec2:	c432                	sw	a2,8(sp)
 8000ec4:	842a                	mv	s0,a0
 8000ec6:	c62e                	sw	a1,12(sp)
    eclic_enable_interrupt(source);
 8000ec8:	00001097          	auipc	ra,0x1
 8000ecc:	ef4080e7          	jalr	-268(ra) # 8001dbc <eclic_enable_interrupt>
    eclic_set_irq_lvl_abs(source, level);
 8000ed0:	45b2                	lw	a1,12(sp)
 8000ed2:	8522                	mv	a0,s0
 8000ed4:	00001097          	auipc	ra,0x1
 8000ed8:	f20080e7          	jalr	-224(ra) # 8001df4 <eclic_set_irq_lvl_abs>
    eclic_set_irq_priority(source, priority);
 8000edc:	4622                	lw	a2,8(sp)
 8000ede:	8522                	mv	a0,s0
}
 8000ee0:	4462                	lw	s0,24(sp)
 8000ee2:	40f2                	lw	ra,28(sp)
    eclic_set_irq_priority(source, priority);
 8000ee4:	85b2                	mv	a1,a2
}
 8000ee6:	6105                	addi	sp,sp,32
    eclic_set_irq_priority(source, priority);
 8000ee8:	00001317          	auipc	t1,0x1
 8000eec:	f6430067          	jr	-156(t1) # 8001e4c <eclic_set_irq_priority>

08000ef0 <exti_interrupt_flag_clear>:
 8000ef0:	400107b7          	lui	a5,0x40010
 8000ef4:	40a7aa23          	sw	a0,1044(a5) # 40010414 <_sp+0x20008414>
 8000ef8:	8082                	ret

08000efa <gpio_init>:

    /* GPIO mode configuration */
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));

    /* GPIO speed configuration */
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000efa:	0105f793          	andi	a5,a1,16
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));
 8000efe:	00f5f893          	andi	a7,a1,15
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000f02:	c399                	beqz	a5,8000f08 <gpio_init+0xe>
        /* output mode max speed:10MHz,2MHz,50MHz */
        temp_mode |= (uint32_t) speed;
 8000f04:	00c8e8b3          	or	a7,a7,a2
{
 8000f08:	4781                	li	a5,0
    }

    /* configure the eight low port pins with GPIO_CTL0 */
    for (i = 0U; i < 8U; i++) {
        if ((1U << i) & pin) {
 8000f0a:	4e05                	li	t3,1
            reg = GPIO_CTL0(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i);
 8000f0c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000f0e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000f12:	04800f93          	li	t6,72
    for (i = 0U; i < 8U; i++) {
 8000f16:	4321                	li	t1,8
        if ((1U << i) & pin) {
 8000f18:	00fe1633          	sll	a2,t3,a5
 8000f1c:	8e75                	and	a2,a2,a3
 8000f1e:	c21d                	beqz	a2,8000f44 <gpio_init+0x4a>
            reg = GPIO_CTL0(gpio_periph);
 8000f20:	00279713          	slli	a4,a5,0x2
 8000f24:	00052283          	lw	t0,0(a0)
            reg &= ~GPIO_MODE_MASK(i);
 8000f28:	00ee9833          	sll	a6,t4,a4
 8000f2c:	fff84813          	not	a6,a6
 8000f30:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i, temp_mode);
 8000f34:	00e89733          	sll	a4,a7,a4
 8000f38:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 8000f3c:	05e59963          	bne	a1,t5,8000f8e <gpio_init+0x94>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f40:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL0 register */
            GPIO_CTL0(gpio_periph) = reg;
 8000f42:	c118                	sw	a4,0(a0)
 8000f44:	0785                	addi	a5,a5,1
    for (i = 0U; i < 8U; i++) {
 8000f46:	fc6799e3          	bne	a5,t1,8000f18 <gpio_init+0x1e>
        }
    }
    /* configure the eight high port pins with GPIO_CTL1 */
    for (i = 8U; i < 16U; i++) {
        if ((1U << i) & pin) {
 8000f4a:	4e05                	li	t3,1
            reg = GPIO_CTL1(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f4c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000f4e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000f52:	04800f93          	li	t6,72
    for (i = 8U; i < 16U; i++) {
 8000f56:	4341                	li	t1,16
        if ((1U << i) & pin) {
 8000f58:	00fe1633          	sll	a2,t3,a5
 8000f5c:	8e75                	and	a2,a2,a3
 8000f5e:	c605                	beqz	a2,8000f86 <gpio_init+0x8c>
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f60:	00279713          	slli	a4,a5,0x2
 8000f64:	1701                	addi	a4,a4,-32
            reg = GPIO_CTL1(gpio_periph);
 8000f66:	00452283          	lw	t0,4(a0)
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f6a:	00ee9833          	sll	a6,t4,a4
 8000f6e:	fff84813          	not	a6,a6
 8000f72:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);
 8000f76:	00e89733          	sll	a4,a7,a4
 8000f7a:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 8000f7e:	01e59c63          	bne	a1,t5,8000f96 <gpio_init+0x9c>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f82:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL1 register */
            GPIO_CTL1(gpio_periph) = reg;
 8000f84:	c158                	sw	a4,4(a0)
 8000f86:	0785                	addi	a5,a5,1
    for (i = 8U; i < 16U; i++) {
 8000f88:	fc6798e3          	bne	a5,t1,8000f58 <gpio_init+0x5e>
        }
    }
}
 8000f8c:	8082                	ret
                if (GPIO_MODE_IPU == mode) {
 8000f8e:	fbf59ae3          	bne	a1,t6,8000f42 <gpio_init+0x48>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f92:	c910                	sw	a2,16(a0)
 8000f94:	b77d                	j	8000f42 <gpio_init+0x48>
                if (GPIO_MODE_IPU == mode) {
 8000f96:	fff597e3          	bne	a1,t6,8000f84 <gpio_init+0x8a>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f9a:	c910                	sw	a2,16(a0)
 8000f9c:	b7e5                	j	8000f84 <gpio_init+0x8a>

08000f9e <gpio_bit_set>:
    \param[out] none
    \retval     none
*/
void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8000f9e:	c90c                	sw	a1,16(a0)
}
 8000fa0:	8082                	ret

08000fa2 <gpio_bit_reset>:
    \param[out] none
    \retval     none
*/
void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BC(gpio_periph) = (uint32_t) pin;
 8000fa2:	c94c                	sw	a1,20(a0)
}
 8000fa4:	8082                	ret

08000fa6 <gpio_bit_write>:
    \param[out] none
    \retval     none
*/
void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
{
    if (RESET != bit_value) {
 8000fa6:	c219                	beqz	a2,8000fac <gpio_bit_write+0x6>
        GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8000fa8:	c90c                	sw	a1,16(a0)
 8000faa:	8082                	ret
    } else {
        GPIO_BC(gpio_periph) = (uint32_t) pin;
 8000fac:	c94c                	sw	a1,20(a0)
    }
}
 8000fae:	8082                	ret

08000fb0 <i2c_clock_config>:
     \arg        I2C_DTCY_2: T_low/T_high=2 
     \arg        I2C_DTCY_16_9: T_low/T_high=16/9
    \param[out] none
    \retval     none
 */
void i2c_clock_config(uint32_t i2c_periph, uint32_t clkspeed, uint32_t dutycyc){
 8000fb0:	1101                	addi	sp,sp,-32
 8000fb2:	cc22                	sw	s0,24(sp)
 8000fb4:	842a                	mv	s0,a0
    uint32_t pclk1, clkc, freq, risetime;
    uint32_t temp;
    
    pclk1 = rcu_clock_freq_get(CK_APB1);
 8000fb6:	4509                	li	a0,2
void i2c_clock_config(uint32_t i2c_periph, uint32_t clkspeed, uint32_t dutycyc){
 8000fb8:	ca26                	sw	s1,20(sp)
 8000fba:	c632                	sw	a2,12(sp)
 8000fbc:	ce06                	sw	ra,28(sp)
 8000fbe:	84ae                	mv	s1,a1
    pclk1 = rcu_clock_freq_get(CK_APB1);
 8000fc0:	00000097          	auipc	ra,0x0
 8000fc4:	282080e7          	jalr	642(ra) # 8001242 <rcu_clock_freq_get>
    /* I2C peripheral clock frequency */
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fc8:	000f47b7          	lui	a5,0xf4
    if (freq >= I2CCLK_MAX) {
 8000fcc:	033806b7          	lui	a3,0x3380
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fd0:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf3240>
    if (freq >= I2CCLK_MAX) {
 8000fd4:	97f68693          	addi	a3,a3,-1665 # 337f97f <__stack_size+0x337e97f>
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fd8:	02f55733          	divu	a4,a0,a5
    if (freq >= I2CCLK_MAX) {
 8000fdc:	4632                	lw	a2,12(sp)
        freq = I2CCLK_MAX;
 8000fde:	03600793          	li	a5,54
    if (freq >= I2CCLK_MAX) {
 8000fe2:	00a6e363          	bltu	a3,a0,8000fe8 <i2c_clock_config+0x38>
 8000fe6:	87ba                	mv	a5,a4
    }
    temp = I2C_CTL1(i2c_periph);
 8000fe8:	4054                	lw	a3,4(s0)
    temp &= ~I2C_CTL1_I2CCLK;
 8000fea:	fc06f693          	andi	a3,a3,-64
    temp |= freq;
 8000fee:	8edd                	or	a3,a3,a5
    
    I2C_CTL1(i2c_periph) = temp;
 8000ff0:	c054                	sw	a3,4(s0)
    
    if (100000U >= clkspeed) {
 8000ff2:	66e1                	lui	a3,0x18
 8000ff4:	6a068693          	addi	a3,a3,1696 # 186a0 <__stack_size+0x176a0>
 8000ff8:	0496e163          	bltu	a3,s1,800103a <i2c_clock_config+0x8a>
        /* the maximum SCL rise time is 1000ns in standard mode */
        risetime = (uint32_t) ((pclk1 / 1000000U) + 1U);
 8000ffc:	00170793          	addi	a5,a4,1
        if (risetime >= I2CCLK_MAX) {
 8001000:	03500713          	li	a4,53
 8001004:	00f77663          	bgeu	a4,a5,8001010 <i2c_clock_config+0x60>
            I2C_RT(i2c_periph) = I2CCLK_MAX;
 8001008:	03600793          	li	a5,54
        } else if (risetime <= I2CCLK_MIN) {
            I2C_RT(i2c_periph) = I2CCLK_MIN;
        } else {
            I2C_RT(i2c_periph) = risetime;
 800100c:	d01c                	sw	a5,32(s0)
 800100e:	a029                	j	8001018 <i2c_clock_config+0x68>
        } else if (risetime <= I2CCLK_MIN) {
 8001010:	4709                	li	a4,2
 8001012:	fef76de3          	bltu	a4,a5,800100c <i2c_clock_config+0x5c>
            I2C_RT(i2c_periph) = I2CCLK_MIN;
 8001016:	d018                	sw	a4,32(s0)
        }
        clkc = (uint32_t) (pclk1 / (clkspeed * 2U)); 
 8001018:	0486                	slli	s1,s1,0x1
        if (clkc < 0x04U) {
            /* the CLKC in standard mode minmum value is 4 */
            clkc = 0x04U;
        }
        I2C_CKCFG(i2c_periph) |= (I2C_CKCFG_CLKC & clkc);
 800101a:	02955533          	divu	a0,a0,s1
 800101e:	4c5c                	lw	a5,28(s0)
 8001020:	4711                	li	a4,4
 8001022:	00e57363          	bgeu	a0,a4,8001028 <i2c_clock_config+0x78>
 8001026:	4511                	li	a0,4
 8001028:	0552                	slli	a0,a0,0x14
 800102a:	8151                	srli	a0,a0,0x14
 800102c:	8d5d                	or	a0,a0,a5
        if (0U == (clkc & I2C_CKCFG_CLKC)) {
            /* the CLKC in fast mode minmum value is 1 */
            clkc |= 0x0001U;  
        }
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
        I2C_CKCFG(i2c_periph) |= clkc;
 800102e:	cc48                	sw	a0,28(s0)
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
        I2C_CKCFG(i2c_periph) |= clkc;
        /* enable I2C fast mode plus */
        I2C_FMPCFG(i2c_periph) |= I2C_FMPCFG_FMPEN;
    }
}
 8001030:	40f2                	lw	ra,28(sp)
 8001032:	4462                	lw	s0,24(sp)
 8001034:	44d2                	lw	s1,20(sp)
 8001036:	6105                	addi	sp,sp,32
 8001038:	8082                	ret
    } else if (400000U >= clkspeed) {
 800103a:	00062737          	lui	a4,0x62
 800103e:	a8070713          	addi	a4,a4,-1408 # 61a80 <__stack_size+0x60a80>
 8001042:	04976c63          	bltu	a4,s1,800109a <i2c_clock_config+0xea>
        I2C_RT(i2c_periph) = (uint32_t) (((freq * (uint32_t) 300U)/(uint32_t)1000U)+(uint32_t)1U);
 8001046:	12c00713          	li	a4,300
 800104a:	02e787b3          	mul	a5,a5,a4
 800104e:	3e800713          	li	a4,1000
 8001052:	02e7d7b3          	divu	a5,a5,a4
 8001056:	0785                	addi	a5,a5,1
 8001058:	d01c                	sw	a5,32(s0)
        if (I2C_DTCY_2 == dutycyc){
 800105a:	e61d                	bnez	a2,8001088 <i2c_clock_config+0xd8>
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 800105c:	478d                	li	a5,3
 800105e:	02f484b3          	mul	s1,s1,a5
            I2C_CKCFG(i2c_periph) &= ~I2C_CKCFG_DTCY;
 8001062:	4c5c                	lw	a5,28(s0)
 8001064:	7771                	lui	a4,0xffffc
 8001066:	177d                	addi	a4,a4,-1
 8001068:	8ff9                	and	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 800106a:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 800106e:	cc5c                	sw	a5,28(s0)
        if (0U == (clkc & I2C_CKCFG_CLKC)) {
 8001070:	01451793          	slli	a5,a0,0x14
 8001074:	e399                	bnez	a5,800107a <i2c_clock_config+0xca>
            clkc |= 0x0001U;  
 8001076:	00156513          	ori	a0,a0,1
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
 800107a:	4c5c                	lw	a5,28(s0)
 800107c:	6721                	lui	a4,0x8
 800107e:	8fd9                	or	a5,a5,a4
 8001080:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= clkc;
 8001082:	4c44                	lw	s1,28(s0)
 8001084:	8d45                	or	a0,a0,s1
 8001086:	b765                	j	800102e <i2c_clock_config+0x7e>
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 8001088:	47e5                	li	a5,25
 800108a:	02f484b3          	mul	s1,s1,a5
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 800108e:	4c5c                	lw	a5,28(s0)
 8001090:	6711                	lui	a4,0x4
 8001092:	8fd9                	or	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 8001094:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 8001098:	bfd9                	j	800106e <i2c_clock_config+0xbe>
        I2C_RT (i2c_periph) = (uint32_t) (((freq * (uint32_t) 120U) / (uint32_t) 1000U)+(uint32_t) 1U);
 800109a:	07800713          	li	a4,120
 800109e:	02e787b3          	mul	a5,a5,a4
 80010a2:	3e800713          	li	a4,1000
 80010a6:	02e7d7b3          	divu	a5,a5,a4
 80010aa:	0785                	addi	a5,a5,1
 80010ac:	d01c                	sw	a5,32(s0)
        if (I2C_DTCY_2 == dutycyc) {
 80010ae:	ea0d                	bnez	a2,80010e0 <i2c_clock_config+0x130>
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 80010b0:	458d                	li	a1,3
 80010b2:	02b484b3          	mul	s1,s1,a1
            I2C_CKCFG(i2c_periph) &= ~I2C_CKCFG_DTCY;
 80010b6:	4c5c                	lw	a5,28(s0)
 80010b8:	7771                	lui	a4,0xffffc
 80010ba:	177d                	addi	a4,a4,-1
 80010bc:	8ff9                	and	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 80010be:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010c2:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
 80010c4:	4c5c                	lw	a5,28(s0)
 80010c6:	6721                	lui	a4,0x8
 80010c8:	8fd9                	or	a5,a5,a4
 80010ca:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= clkc;
 80010cc:	4c44                	lw	s1,28(s0)
 80010ce:	8d45                	or	a0,a0,s1
 80010d0:	cc48                	sw	a0,28(s0)
        I2C_FMPCFG(i2c_periph) |= I2C_FMPCFG_FMPEN;
 80010d2:	09042783          	lw	a5,144(s0)
 80010d6:	0017e793          	ori	a5,a5,1
 80010da:	08f42823          	sw	a5,144(s0)
}
 80010de:	bf89                	j	8001030 <i2c_clock_config+0x80>
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 80010e0:	45e5                	li	a1,25
 80010e2:	02b484b3          	mul	s1,s1,a1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010e6:	4c5c                	lw	a5,28(s0)
 80010e8:	6711                	lui	a4,0x4
 80010ea:	8fd9                	or	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 80010ec:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010f0:	bfc9                	j	80010c2 <i2c_clock_config+0x112>

080010f2 <i2c_ack_config>:
    \param[out] none
    \retval     none
 */
void i2c_ack_config(uint32_t i2c_periph, uint32_t ack) 
{
    if (I2C_ACK_ENABLE == ack) {
 80010f2:	4785                	li	a5,1
 80010f4:	00f59763          	bne	a1,a5,8001102 <i2c_ack_config+0x10>
        I2C_CTL0(i2c_periph) |= I2C_CTL0_ACKEN;
 80010f8:	411c                	lw	a5,0(a0)
 80010fa:	4007e793          	ori	a5,a5,1024
    } else {
        I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_ACKEN);
 80010fe:	c11c                	sw	a5,0(a0)
    }
}
 8001100:	8082                	ret
        I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_ACKEN);
 8001102:	411c                	lw	a5,0(a0)
 8001104:	bff7f793          	andi	a5,a5,-1025
 8001108:	bfdd                	j	80010fe <i2c_ack_config+0xc>

0800110a <i2c_master_addressing>:
    \retval     none
 */
void i2c_master_addressing(uint32_t i2c_periph, uint32_t addr,uint32_t trandirection) 
{
    /* master is a transmitter or a receiver */
    if (I2C_TRANSMITTER == trandirection) {
 800110a:	5779                	li	a4,-2
        addr = addr & I2C_TRANSMITTER;
    } else {
        addr = addr | I2C_RECEIVER;
 800110c:	0015e793          	ori	a5,a1,1
    if (I2C_TRANSMITTER == trandirection) {
 8001110:	00e61463          	bne	a2,a4,8001118 <i2c_master_addressing+0xe>
        addr = addr & I2C_TRANSMITTER;
 8001114:	ffe5f793          	andi	a5,a1,-2
    }
    /* send slave address */
    I2C_DATA(i2c_periph) = addr;
 8001118:	c91c                	sw	a5,16(a0)
}
 800111a:	8082                	ret

0800111c <i2c_enable>:
    \param[out] none
    \retval     none
 */
void i2c_enable(uint32_t i2c_periph) 
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_I2CEN;
 800111c:	411c                	lw	a5,0(a0)
 800111e:	0017e793          	ori	a5,a5,1
 8001122:	c11c                	sw	a5,0(a0)
}
 8001124:	8082                	ret

08001126 <i2c_start_on_bus>:
    \param[out] none
    \retval     none
 */
void i2c_start_on_bus(uint32_t i2c_periph) 
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_START;
 8001126:	411c                	lw	a5,0(a0)
 8001128:	1007e793          	ori	a5,a5,256
 800112c:	c11c                	sw	a5,0(a0)
}
 800112e:	8082                	ret

08001130 <i2c_stop_on_bus>:
    \param[out] none
    \retval     none
 */
void i2c_stop_on_bus(uint32_t i2c_periph)
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_STOP;
 8001130:	411c                	lw	a5,0(a0)
 8001132:	2007e793          	ori	a5,a5,512
 8001136:	c11c                	sw	a5,0(a0)
}
 8001138:	8082                	ret

0800113a <i2c_data_transmit>:
    \param[out] none
    \retval     none
 */
void i2c_data_transmit(uint32_t i2c_periph, uint8_t data) 
{
    I2C_DATA(i2c_periph) = DATA_TRANS(data);
 800113a:	c90c                	sw	a1,16(a0)
}
 800113c:	8082                	ret

0800113e <i2c_data_receive>:
    \param[out] none
    \retval     data of received
 */
uint8_t i2c_data_receive(uint32_t i2c_periph) 
{
    return (uint8_t) DATA_RECV(I2C_DATA(i2c_periph));
 800113e:	4908                	lw	a0,16(a0)
}
 8001140:	0ff57513          	andi	a0,a0,255
 8001144:	8082                	ret

08001146 <i2c_dma_enable>:
void i2c_dma_enable(uint32_t i2c_periph, uint32_t dmastate) 
{
    /* configure I2C DMA function */
    uint32_t ctl = 0U;

    ctl = I2C_CTL1(i2c_periph);
 8001146:	415c                	lw	a5,4(a0)
    ctl &= ~(I2C_CTL1_DMAON);
 8001148:	777d                	lui	a4,0xfffff
 800114a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800114e:	8ff9                	and	a5,a5,a4
    ctl |= dmastate;
 8001150:	8ddd                	or	a1,a1,a5
    I2C_CTL1(i2c_periph) = ctl;
 8001152:	c14c                	sw	a1,4(a0)
}
 8001154:	8082                	ret

08001156 <i2c_dma_last_transfer_config>:
void i2c_dma_last_transfer_config(uint32_t i2c_periph, uint32_t dmalast) 
{
    /* configure DMA last transfer */
    uint32_t ctl = 0U;

    ctl = I2C_CTL1(i2c_periph);
 8001156:	415c                	lw	a5,4(a0)
    ctl &= ~(I2C_CTL1_DMALST);
 8001158:	777d                	lui	a4,0xfffff
 800115a:	177d                	addi	a4,a4,-1
 800115c:	8ff9                	and	a5,a5,a4
    ctl |= dmalast;
 800115e:	8ddd                	or	a1,a1,a5
    I2C_CTL1(i2c_periph) = ctl;
 8001160:	c14c                	sw	a1,4(a0)
}
 8001162:	8082                	ret

08001164 <i2c_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
 */
FlagStatus i2c_flag_get(uint32_t i2c_periph, i2c_flag_enum flag) 
{
    if (RESET != (I2C_REG_VAL(i2c_periph, flag) & BIT(I2C_BIT_POS(flag)))) {
 8001164:	0065d793          	srli	a5,a1,0x6
 8001168:	3ff7f793          	andi	a5,a5,1023
 800116c:	953e                	add	a0,a0,a5
 800116e:	4108                	lw	a0,0(a0)
 8001170:	00b55533          	srl	a0,a0,a1
        return SET;
    } else {
        return RESET;
    }
}
 8001174:	8905                	andi	a0,a0,1
 8001176:	8082                	ret

08001178 <i2c_flag_clear>:
    \param[out] none
    \retval     none
 */
void i2c_flag_clear(uint32_t i2c_periph, i2c_flag_enum flag) 
{
    if (I2C_FLAG_ADDSEND == flag) {
 8001178:	50100793          	li	a5,1281
 800117c:	00f59563          	bne	a1,a5,8001186 <i2c_flag_clear+0xe>
        /* read I2C_STAT0 and then read I2C_STAT1 to clear ADDSEND */
        I2C_STAT0(i2c_periph);
 8001180:	495c                	lw	a5,20(a0)
        I2C_STAT1(i2c_periph);
 8001182:	4d1c                	lw	a5,24(a0)
 8001184:	8082                	ret
    } else {
        I2C_REG_VAL(i2c_periph, flag) &= ~BIT(I2C_BIT_POS(flag));
 8001186:	0065d713          	srli	a4,a1,0x6
 800118a:	3ff77713          	andi	a4,a4,1023
 800118e:	953a                	add	a0,a0,a4
 8001190:	4118                	lw	a4,0(a0)
 8001192:	4785                	li	a5,1
 8001194:	00b797b3          	sll	a5,a5,a1
 8001198:	fff7c793          	not	a5,a5
 800119c:	8ff9                	and	a5,a5,a4
 800119e:	c11c                	sw	a5,0(a0)
    }
}
 80011a0:	8082                	ret

080011a2 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 80011a2:	400217b7          	lui	a5,0x40021
 80011a6:	00655713          	srli	a4,a0,0x6
 80011aa:	973e                	add	a4,a4,a5
 80011ac:	4314                	lw	a3,0(a4)
 80011ae:	4785                	li	a5,1
 80011b0:	00a797b3          	sll	a5,a5,a0
 80011b4:	8fd5                	or	a5,a5,a3
 80011b6:	c31c                	sw	a5,0(a4)
}
 80011b8:	8082                	ret

080011ba <rcu_periph_reset_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
 80011ba:	400217b7          	lui	a5,0x40021
 80011be:	00655713          	srli	a4,a0,0x6
 80011c2:	973e                	add	a4,a4,a5
 80011c4:	4314                	lw	a3,0(a4)
 80011c6:	4785                	li	a5,1
 80011c8:	00a797b3          	sll	a5,a5,a0
 80011cc:	8fd5                	or	a5,a5,a3
 80011ce:	c31c                	sw	a5,0(a4)
}
 80011d0:	8082                	ret

080011d2 <rcu_periph_reset_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
 80011d2:	400217b7          	lui	a5,0x40021
 80011d6:	00655713          	srli	a4,a0,0x6
 80011da:	973e                	add	a4,a4,a5
 80011dc:	4314                	lw	a3,0(a4)
 80011de:	4785                	li	a5,1
 80011e0:	00a797b3          	sll	a5,a5,a0
 80011e4:	fff7c793          	not	a5,a5
 80011e8:	8ff5                	and	a5,a5,a3
 80011ea:	c31c                	sw	a5,0(a4)
}
 80011ec:	8082                	ret

080011ee <rcu_adc_clock_config>:
void rcu_adc_clock_config(uint32_t adc_psc)
{
    uint32_t reg0;

    /* reset the ADCPSC bits */
    reg0 = RCU_CFG0;
 80011ee:	400217b7          	lui	a5,0x40021
 80011f2:	43dc                	lw	a5,4(a5)
    reg0 &= ~(RCU_CFG0_ADCPSC_2 | RCU_CFG0_ADCPSC);
 80011f4:	efff4737          	lui	a4,0xefff4
 80011f8:	177d                	addi	a4,a4,-1
 80011fa:	8ff9                	and	a5,a5,a4

    /* set the ADC prescaler factor */
    switch(adc_psc){
 80011fc:	4715                	li	a4,5
 80011fe:	00e50e63          	beq	a0,a4,800121a <rcu_adc_clock_config+0x2c>
 8001202:	00a76963          	bltu	a4,a0,8001214 <rcu_adc_clock_config+0x26>
 8001206:	470d                	li	a4,3
 8001208:	02a77063          	bgeu	a4,a0,8001228 <rcu_adc_clock_config+0x3a>
        default:
            break;
    }

    /* set the register */
    RCU_CFG0 = reg0;
 800120c:	40021737          	lui	a4,0x40021
 8001210:	c35c                	sw	a5,4(a4)
}
 8001212:	8082                	ret
    switch(adc_psc){
 8001214:	471d                	li	a4,7
 8001216:	fee51be3          	bne	a0,a4,800120c <rcu_adc_clock_config+0x1e>
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 800121a:	053a                	slli	a0,a0,0xe
 800121c:	7731                	lui	a4,0xfffec
 800121e:	8d79                	and	a0,a0,a4
 8001220:	8d5d                	or	a0,a0,a5
 8001222:	100007b7          	lui	a5,0x10000
 8001226:	a011                	j	800122a <rcu_adc_clock_config+0x3c>
            reg0 |= (adc_psc << 14);
 8001228:	053a                	slli	a0,a0,0xe
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 800122a:	8fc9                	or	a5,a5,a0
            break;
 800122c:	b7c5                	j	800120c <rcu_adc_clock_config+0x1e>

0800122e <rcu_usb_clock_config>:
*/
void rcu_usb_clock_config(uint32_t usb_psc)
{
    uint32_t reg;
    
    reg = RCU_CFG0;
 800122e:	400216b7          	lui	a3,0x40021
 8001232:	42dc                	lw	a5,4(a3)

    /* configure the USBFS prescaler factor */
    reg &= ~RCU_CFG0_USBFSPSC;
 8001234:	ff400737          	lui	a4,0xff400
 8001238:	177d                	addi	a4,a4,-1
 800123a:	8ff9                	and	a5,a5,a4
    RCU_CFG0 = (reg | usb_psc);
 800123c:	8d5d                	or	a0,a0,a5
 800123e:	c2c8                	sw	a0,4(a3)
}
 8001240:	8082                	ret

08001242 <rcu_clock_freq_get>:
      \arg        CK_APB2: APB2 clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8001242:	7179                	addi	sp,sp,-48
    uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
    uint32_t pllsel, predv0sel, pllmf,ck_src, idx, clk_exp;
    uint32_t predv0, predv1, pll1mf;

    /* exponent of AHB, APB1 and APB2 clock divider */
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001244:	080005b7          	lui	a1,0x8000
{
 8001248:	d422                	sw	s0,40(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800124a:	4641                	li	a2,16
{
 800124c:	842a                	mv	s0,a0
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800124e:	28058593          	addi	a1,a1,640 # 8000280 <enable_mcycle_minstret+0x34>
 8001252:	0808                	addi	a0,sp,16
{
 8001254:	d606                	sw	ra,44(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001256:	00006097          	auipc	ra,0x6
 800125a:	75e080e7          	jalr	1886(ra) # 80079b4 <memcpy>
    uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800125e:	040307b7          	lui	a5,0x4030
 8001262:	20178793          	addi	a5,a5,513 # 4030201 <__stack_size+0x402f201>
 8001266:	c002                	sw	zero,0(sp)
 8001268:	c23e                	sw	a5,4(sp)
    uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800126a:	c402                	sw	zero,8(sp)
 800126c:	c63e                	sw	a5,12(sp)

    sws = GET_BITS(RCU_CFG0, 2, 3);
 800126e:	40021737          	lui	a4,0x40021
 8001272:	435c                	lw	a5,4(a4)
    switch(sws){
 8001274:	4689                	li	a3,2
    sws = GET_BITS(RCU_CFG0, 2, 3);
 8001276:	8389                	srli	a5,a5,0x2
 8001278:	8b8d                	andi	a5,a5,3
    switch(sws){
 800127a:	0ed79763          	bne	a5,a3,8001368 <rcu_clock_freq_get+0x126>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* PLL clock source selection, HXTAL or IRC8M/2 */
        pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 800127e:	435c                	lw	a5,4(a4)

        if(RCU_PLLSRC_HXTAL == pllsel) {
 8001280:	00f79693          	slli	a3,a5,0xf
 8001284:	0606d663          	bgez	a3,80012f0 <rcu_clock_freq_get+0xae>
            /* PLL clock source is HXTAL */
            ck_src = HXTAL_VALUE;

            predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001288:	575c                	lw	a5,44(a4)
            /* source clock use PLL1 */
            if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 800128a:	00f79693          	slli	a3,a5,0xf
 800128e:	0406dc63          	bgez	a3,80012e6 <rcu_clock_freq_get+0xa4>
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001292:	575c                	lw	a5,44(a4)
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001294:	5758                	lw	a4,44(a4)
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001296:	8391                	srli	a5,a5,0x4
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001298:	8321                	srli	a4,a4,0x8
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800129a:	8bbd                	andi	a5,a5,15
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 800129c:	8b3d                	andi	a4,a4,15
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800129e:	00178693          	addi	a3,a5,1
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 80012a2:	0709                	addi	a4,a4,2
                if(17U == pll1mf){
 80012a4:	47c5                	li	a5,17
 80012a6:	00f71363          	bne	a4,a5,80012ac <rcu_clock_freq_get+0x6a>
                    pll1mf = 20U;
 80012aa:	4751                	li	a4,20
                }
                ck_src = (ck_src / predv1) * pll1mf;
 80012ac:	007a17b7          	lui	a5,0x7a1
 80012b0:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80012b4:	02d7d7b3          	divu	a5,a5,a3
 80012b8:	02e787b3          	mul	a5,a5,a4
            }
            predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 80012bc:	40021737          	lui	a4,0x40021
 80012c0:	5758                	lw	a4,44(a4)
 80012c2:	8b3d                	andi	a4,a4,15
 80012c4:	0705                	addi	a4,a4,1
            ck_src /= predv0;
 80012c6:	02e7d733          	divu	a4,a5,a4
            /* PLL clock source is IRC8M/2 */
            ck_src = IRC8M_VALUE/2U;
        }

        /* PLL multiplication factor */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012ca:	400216b7          	lui	a3,0x40021
 80012ce:	42dc                	lw	a5,4(a3)
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012d0:	42d4                	lw	a3,4(a3)
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012d2:	83c9                	srli	a5,a5,0x12
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012d4:	00269613          	slli	a2,a3,0x2
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012d8:	8bbd                	andi	a5,a5,15
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012da:	02065063          	bgez	a2,80012fa <rcu_clock_freq_get+0xb8>
            pllmf |= 0x10U;
 80012de:	0107e793          	ori	a5,a5,16
        }
        if(pllmf < 15U){
            pllmf += 2U;
        }else{
            pllmf += 1U;
 80012e2:	0785                	addi	a5,a5,1
        }

        cksys_freq = ck_src * pllmf;

        if(15U == pllmf){
 80012e4:	a00d                	j	8001306 <rcu_clock_freq_get+0xc4>
            ck_src = HXTAL_VALUE;
 80012e6:	007a17b7          	lui	a5,0x7a1
 80012ea:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80012ee:	b7f9                	j	80012bc <rcu_clock_freq_get+0x7a>
            ck_src = IRC8M_VALUE/2U;
 80012f0:	003d17b7          	lui	a5,0x3d1
 80012f4:	90078713          	addi	a4,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 80012f8:	bfc9                	j	80012ca <rcu_clock_freq_get+0x88>
        if(pllmf < 15U){
 80012fa:	46bd                	li	a3,15
 80012fc:	fed783e3          	beq	a5,a3,80012e2 <rcu_clock_freq_get+0xa0>
            pllmf += 2U;
 8001300:	0789                	addi	a5,a5,2
        if(15U == pllmf){
 8001302:	04d78d63          	beq	a5,a3,800135c <rcu_clock_freq_get+0x11a>
        cksys_freq = ck_src * pllmf;
 8001306:	02e787b3          	mul	a5,a5,a4
        cksys_freq = IRC8M_VALUE;
        break;
    }

    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 800130a:	400216b7          	lui	a3,0x40021
 800130e:	42d8                	lw	a4,4(a3)
    clk_exp = ahb_exp[idx];
 8001310:	1010                	addi	a2,sp,32
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8001312:	8311                	srli	a4,a4,0x4
 8001314:	8b3d                	andi	a4,a4,15
    clk_exp = ahb_exp[idx];
 8001316:	9732                	add	a4,a4,a2
 8001318:	ff074503          	lbu	a0,-16(a4) # 40020ff0 <_sp+0x20018ff0>
    ahb_freq = cksys_freq >> clk_exp;
    
    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 800131c:	42d8                	lw	a4,4(a3)
    ahb_freq = cksys_freq >> clk_exp;
 800131e:	00a7d533          	srl	a0,a5,a0
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8001322:	8321                	srli	a4,a4,0x8
 8001324:	8b1d                	andi	a4,a4,7
    clk_exp = apb1_exp[idx];
 8001326:	9732                	add	a4,a4,a2
 8001328:	fe074603          	lbu	a2,-32(a4)
    apb1_freq = ahb_freq >> clk_exp;
    
    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800132c:	42d8                	lw	a4,4(a3)
    clk_exp = apb2_exp[idx];
 800132e:	1014                	addi	a3,sp,32
    idx = GET_BITS(RCU_CFG0, 11, 13);
 8001330:	832d                	srli	a4,a4,0xb
 8001332:	8b1d                	andi	a4,a4,7
    clk_exp = apb2_exp[idx];
 8001334:	9736                	add	a4,a4,a3
    apb2_freq = ahb_freq >> clk_exp;
    
    /* return the clocks frequency */
    switch(clock){
 8001336:	4685                	li	a3,1
    clk_exp = apb2_exp[idx];
 8001338:	fe874703          	lbu	a4,-24(a4)
    switch(clock){
 800133c:	00d40c63          	beq	s0,a3,8001354 <rcu_clock_freq_get+0x112>
 8001340:	cc05                	beqz	s0,8001378 <rcu_clock_freq_get+0x136>
 8001342:	4789                	li	a5,2
 8001344:	02f40763          	beq	s0,a5,8001372 <rcu_clock_freq_get+0x130>
 8001348:	478d                	li	a5,3
    apb2_freq = ahb_freq >> clk_exp;
 800134a:	00e55533          	srl	a0,a0,a4
    switch(clock){
 800134e:	00f40363          	beq	s0,a5,8001354 <rcu_clock_freq_get+0x112>
    uint32_t sws, ck_freq = 0U;
 8001352:	4501                	li	a0,0
        break;
    default:
        break;
    }
    return ck_freq;
}
 8001354:	50b2                	lw	ra,44(sp)
 8001356:	5422                	lw	s0,40(sp)
 8001358:	6145                	addi	sp,sp,48
 800135a:	8082                	ret
            cksys_freq = ck_src * 6U + ck_src / 2U;
 800135c:	4799                	li	a5,6
 800135e:	02f707b3          	mul	a5,a4,a5
 8001362:	8305                	srli	a4,a4,0x1
 8001364:	97ba                	add	a5,a5,a4
 8001366:	b755                	j	800130a <rcu_clock_freq_get+0xc8>
        cksys_freq = IRC8M_VALUE;
 8001368:	007a17b7          	lui	a5,0x7a1
 800136c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001370:	bf69                	j	800130a <rcu_clock_freq_get+0xc8>
    apb1_freq = ahb_freq >> clk_exp;
 8001372:	00c55533          	srl	a0,a0,a2
        break;
 8001376:	bff9                	j	8001354 <rcu_clock_freq_get+0x112>
        ck_freq = cksys_freq;
 8001378:	853e                	mv	a0,a5
    return ck_freq;
 800137a:	bfe9                	j	8001354 <rcu_clock_freq_get+0x112>

0800137c <spi_init>:
    \retval     none
*/
void spi_init(uint32_t spi_periph, spi_parameter_struct* spi_struct)
{   
    uint32_t reg = 0U;
    reg = SPI_CTL0(spi_periph);
 800137c:	411c                	lw	a5,0(a0)
    reg &= SPI_INIT_MASK;
 800137e:	670d                	lui	a4,0x3
 8001380:	04070713          	addi	a4,a4,64 # 3040 <__stack_size+0x2040>
    /* select SPI LSB or MSB */
    reg |= spi_struct->endian;
    /* select SPI polarity and phase */
    reg |= spi_struct->clock_polarity_phase;
    /* select SPI prescale to adjust transmit speed */
    reg |= spi_struct->prescale;
 8001384:	41d4                	lw	a3,4(a1)
    reg &= SPI_INIT_MASK;
 8001386:	8f7d                	and	a4,a4,a5
    reg |= spi_struct->prescale;
 8001388:	419c                	lw	a5,0(a1)
 800138a:	8fd5                	or	a5,a5,a3
 800138c:	4594                	lw	a3,8(a1)
 800138e:	8fd5                	or	a5,a5,a3
 8001390:	45d4                	lw	a3,12(a1)
 8001392:	8fd5                	or	a5,a5,a3
 8001394:	4994                	lw	a3,16(a1)
 8001396:	8fd5                	or	a5,a5,a3
 8001398:	49d4                	lw	a3,20(a1)
 800139a:	8fd5                	or	a5,a5,a3
 800139c:	4d94                	lw	a3,24(a1)
 800139e:	8fd5                	or	a5,a5,a3
 80013a0:	8fd9                	or	a5,a5,a4

    /* write to SPI_CTL0 register */
    SPI_CTL0(spi_periph) = (uint32_t)reg;
 80013a2:	c11c                	sw	a5,0(a0)

    SPI_I2SCTL(spi_periph) &= (uint32_t)(~SPI_I2SCTL_I2SSEL);
 80013a4:	4d5c                	lw	a5,28(a0)
 80013a6:	777d                	lui	a4,0xfffff
 80013a8:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 80013ac:	8ff9                	and	a5,a5,a4
 80013ae:	cd5c                	sw	a5,28(a0)
}
 80013b0:	8082                	ret

080013b2 <spi_enable>:
    \param[out] none
    \retval     none
*/
void spi_enable(uint32_t spi_periph)
{
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_SPIEN;
 80013b2:	411c                	lw	a5,0(a0)
 80013b4:	0407e793          	ori	a5,a5,64
 80013b8:	c11c                	sw	a5,0(a0)
}
 80013ba:	8082                	ret

080013bc <spi_i2s_data_transmit>:
    \param[out] none
    \retval     none
*/
void spi_i2s_data_transmit(uint32_t spi_periph, uint16_t data)
{
    SPI_DATA(spi_periph) = (uint32_t)data;
 80013bc:	c54c                	sw	a1,12(a0)
}
 80013be:	8082                	ret

080013c0 <spi_i2s_data_receive>:
    \param[out] none
    \retval     16-bit data
*/
uint16_t spi_i2s_data_receive(uint32_t spi_periph)
{
    return ((uint16_t)SPI_DATA(spi_periph));
 80013c0:	4548                	lw	a0,12(a0)
}
 80013c2:	0542                	slli	a0,a0,0x10
 80013c4:	8141                	srli	a0,a0,0x10
 80013c6:	8082                	ret

080013c8 <spi_crc_polynomial_set>:
    \retval     none
*/
void spi_crc_polynomial_set(uint32_t spi_periph,uint16_t crc_poly)
{
    /* enable SPI CRC */
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_CRCEN;
 80013c8:	411c                	lw	a5,0(a0)
 80013ca:	6709                	lui	a4,0x2
 80013cc:	8fd9                	or	a5,a5,a4
 80013ce:	c11c                	sw	a5,0(a0)

    /* set SPI CRC polynomial */
    SPI_CRCPOLY(spi_periph) = (uint32_t)crc_poly;
 80013d0:	c90c                	sw	a1,16(a0)
}
 80013d2:	8082                	ret

080013d4 <spi_i2s_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus spi_i2s_flag_get(uint32_t spi_periph, uint32_t flag)
{
    if(RESET != (SPI_STAT(spi_periph) & flag)){
 80013d4:	4508                	lw	a0,8(a0)
 80013d6:	8d6d                	and	a0,a0,a1
        return SET;
    }else{
        return RESET;
    }
}
 80013d8:	00a03533          	snez	a0,a0
 80013dc:	8082                	ret

080013de <timer_deinit>:
    \param[in]  timer_periph: TIMERx(x=0..6)
    \param[out] none
    \retval     none
*/
void timer_deinit(uint32_t timer_periph)
{
 80013de:	1141                	addi	sp,sp,-16
    switch(timer_periph){
 80013e0:	400017b7          	lui	a5,0x40001
{
 80013e4:	c606                	sw	ra,12(sp)
    switch(timer_periph){
 80013e6:	c0078713          	addi	a4,a5,-1024 # 40000c00 <_sp+0x1fff8c00>
 80013ea:	08e50e63          	beq	a0,a4,8001486 <timer_deinit+0xa8>
 80013ee:	02a76763          	bltu	a4,a0,800141c <timer_deinit+0x3e>
 80013f2:	40000737          	lui	a4,0x40000
 80013f6:	40070693          	addi	a3,a4,1024 # 40000400 <_sp+0x1fff8400>
 80013fa:	06d50463          	beq	a0,a3,8001462 <timer_deinit+0x84>
 80013fe:	80078793          	addi	a5,a5,-2048
 8001402:	06f50963          	beq	a0,a5,8001474 <timer_deinit+0x96>
 8001406:	0ae51263          	bne	a0,a4,80014aa <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER0RST);
        rcu_periph_reset_disable(RCU_TIMER0RST);
        break;
    case TIMER1:
        /* reset TIMER1 */
        rcu_periph_reset_enable(RCU_TIMER1RST);
 800140a:	40000513          	li	a0,1024
 800140e:	00000097          	auipc	ra,0x0
 8001412:	dac080e7          	jalr	-596(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER1RST);
 8001416:	40000513          	li	a0,1024
 800141a:	a835                	j	8001456 <timer_deinit+0x78>
    switch(timer_periph){
 800141c:	40078713          	addi	a4,a5,1024
 8001420:	06e50c63          	beq	a0,a4,8001498 <timer_deinit+0xba>
 8001424:	40013737          	lui	a4,0x40013
 8001428:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_sp+0x2000ac00>
 800142c:	00e50d63          	beq	a0,a4,8001446 <timer_deinit+0x68>
 8001430:	06f51d63          	bne	a0,a5,80014aa <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER4RST);
        rcu_periph_reset_disable(RCU_TIMER4RST);
        break;
    case TIMER5:
        /* reset TIMER5 */
        rcu_periph_reset_enable(RCU_TIMER5RST);
 8001434:	40400513          	li	a0,1028
 8001438:	00000097          	auipc	ra,0x0
 800143c:	d82080e7          	jalr	-638(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER5RST);
 8001440:	40400513          	li	a0,1028
 8001444:	a809                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER0RST);
 8001446:	30b00513          	li	a0,779
 800144a:	00000097          	auipc	ra,0x0
 800144e:	d70080e7          	jalr	-656(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER0RST);
 8001452:	30b00513          	li	a0,779
        break;

    default:
        break;
    }
}
 8001456:	40b2                	lw	ra,12(sp)
 8001458:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_TIMER6RST);
 800145a:	00000317          	auipc	t1,0x0
 800145e:	d7830067          	jr	-648(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_TIMER2RST);
 8001462:	40100513          	li	a0,1025
 8001466:	00000097          	auipc	ra,0x0
 800146a:	d54080e7          	jalr	-684(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER2RST);
 800146e:	40100513          	li	a0,1025
 8001472:	b7d5                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER3RST);
 8001474:	40200513          	li	a0,1026
 8001478:	00000097          	auipc	ra,0x0
 800147c:	d42080e7          	jalr	-702(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER3RST);
 8001480:	40200513          	li	a0,1026
 8001484:	bfc9                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER4RST);
 8001486:	40300513          	li	a0,1027
 800148a:	00000097          	auipc	ra,0x0
 800148e:	d30080e7          	jalr	-720(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER4RST);
 8001492:	40300513          	li	a0,1027
 8001496:	b7c1                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER6RST);
 8001498:	40500513          	li	a0,1029
 800149c:	00000097          	auipc	ra,0x0
 80014a0:	d1e080e7          	jalr	-738(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER6RST);
 80014a4:	40500513          	li	a0,1029
 80014a8:	b77d                	j	8001456 <timer_deinit+0x78>
}
 80014aa:	40b2                	lw	ra,12(sp)
 80014ac:	0141                	addi	sp,sp,16
 80014ae:	8082                	ret

080014b0 <timer_struct_para_init>:
{
    /* initialize the init parameter struct member with the default value */
    initpara->prescaler         = 0U;
    initpara->alignedmode       = TIMER_COUNTER_EDGE;
    initpara->counterdirection  = TIMER_COUNTER_UP;
    initpara->period            = 65535U;
 80014b0:	67c1                	lui	a5,0x10
 80014b2:	17fd                	addi	a5,a5,-1
    initpara->prescaler         = 0U;
 80014b4:	00052023          	sw	zero,0(a0)
    initpara->counterdirection  = TIMER_COUNTER_UP;
 80014b8:	00051223          	sh	zero,4(a0)
    initpara->period            = 65535U;
 80014bc:	c51c                	sw	a5,8(a0)
    initpara->clockdivision     = TIMER_CKDIV_DIV1;
 80014be:	00051623          	sh	zero,12(a0)
    initpara->repetitioncounter = 0U;
 80014c2:	00050723          	sb	zero,14(a0)
}
 80014c6:	8082                	ret

080014c8 <timer_init>:
    \retval     none
*/
void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
{
    /* configure the counter prescaler value */
    TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
 80014c8:	0005d783          	lhu	a5,0(a1)
 80014cc:	0045d703          	lhu	a4,4(a1)
 80014d0:	bff57693          	andi	a3,a0,-1025
 80014d4:	d51c                	sw	a5,40(a0)

    /* configure the counter direction and aligned mode */
    if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph)
 80014d6:	400137b7          	lui	a5,0x40013
 80014da:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80014de:	8b41                	andi	a4,a4,16
 80014e0:	00f50a63          	beq	a0,a5,80014f4 <timer_init+0x2c>
 80014e4:	77fd                	lui	a5,0xfffff
 80014e6:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_sp+0xdfff73ff>
 80014ea:	8fe9                	and	a5,a5,a0
 80014ec:	40000637          	lui	a2,0x40000
 80014f0:	06c79063          	bne	a5,a2,8001550 <timer_init+0x88>
        || (TIMER3 == timer_periph) || (TIMER4 == timer_periph) ){
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
 80014f4:	411c                	lw	a5,0(a0)
 80014f6:	f8f7f793          	andi	a5,a5,-113
 80014fa:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
 80014fc:	0025d783          	lhu	a5,2(a1)
 8001500:	4110                	lw	a2,0(a0)
 8001502:	0607f793          	andi	a5,a5,96
 8001506:	8fd1                	or	a5,a5,a2
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
    }else{
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 8001508:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK); 
 800150a:	411c                	lw	a5,0(a0)
 800150c:	8f5d                	or	a4,a4,a5
 800150e:	c118                	sw	a4,0(a0)
    }
    
    /* configure the autoreload value */
    TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
 8001510:	459c                	lw	a5,8(a1)
 8001512:	d55c                	sw	a5,44(a0)

    if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
 8001514:	400017b7          	lui	a5,0x40001
 8001518:	02f68763          	beq	a3,a5,8001546 <timer_init+0x7e>
        /* reset the CKDIV bit */
        TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
 800151c:	411c                	lw	a5,0(a0)
 800151e:	cff7f793          	andi	a5,a5,-769
 8001522:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
 8001524:	00c5d783          	lhu	a5,12(a1)
 8001528:	4118                	lw	a4,0(a0)
 800152a:	3007f793          	andi	a5,a5,768
 800152e:	8fd9                	or	a5,a5,a4
 8001530:	c11c                	sw	a5,0(a0)
    }

    if (TIMER0 == timer_periph) {
 8001532:	400137b7          	lui	a5,0x40013
 8001536:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800153a:	00e51663          	bne	a0,a4,8001546 <timer_init+0x7e>
        /* configure the repetition counter value */
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
 800153e:	00e5c703          	lbu	a4,14(a1)
 8001542:	c2e7a823          	sw	a4,-976(a5)
    }

    /* generate an update event */
    TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
 8001546:	495c                	lw	a5,20(a0)
 8001548:	0017e793          	ori	a5,a5,1
 800154c:	c95c                	sw	a5,20(a0)
}
 800154e:	8082                	ret
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 8001550:	411c                	lw	a5,0(a0)
 8001552:	9bbd                	andi	a5,a5,-17
 8001554:	bf55                	j	8001508 <timer_init+0x40>

08001556 <timer_enable>:
    \param[out] none
    \retval     none
*/
void timer_enable(uint32_t timer_periph)
{
    TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
 8001556:	411c                	lw	a5,0(a0)
 8001558:	0017e793          	ori	a5,a5,1
 800155c:	c11c                	sw	a5,0(a0)
}
 800155e:	8082                	ret

08001560 <timer_channel_output_struct_para_init>:
    \retval     none
*/
void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
{
    /* initialize the channel output parameter struct member with the default value */
    ocpara->outputstate  = TIMER_CCX_DISABLE;
 8001560:	00051023          	sh	zero,0(a0)
    ocpara->outputnstate = TIMER_CCXN_DISABLE;
 8001564:	00051123          	sh	zero,2(a0)
    ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8001568:	00051223          	sh	zero,4(a0)
    ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
 800156c:	00051323          	sh	zero,6(a0)
    ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8001570:	00051423          	sh	zero,8(a0)
    ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
 8001574:	00051523          	sh	zero,10(a0)
}
 8001578:	8082                	ret

0800157a <timer_channel_output_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
{
    switch(channel){
 800157a:	4785                	li	a5,1
 800157c:	08f58e63          	beq	a1,a5,8001618 <timer_channel_output_config+0x9e>
 8001580:	c981                	beqz	a1,8001590 <timer_channel_output_config+0x16>
 8001582:	4789                	li	a5,2
 8001584:	12f58963          	beq	a1,a5,80016b6 <timer_channel_output_config+0x13c>
 8001588:	478d                	li	a5,3
 800158a:	1cf58763          	beq	a1,a5,8001758 <timer_channel_output_config+0x1de>
 800158e:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        /* reset the CH0EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
 8001590:	511c                	lw	a5,32(a0)
 8001592:	9bf9                	andi	a5,a5,-2
 8001594:	d11c                	sw	a5,32(a0)
        /* set the CH0EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
 8001596:	5118                	lw	a4,32(a0)
 8001598:	00065783          	lhu	a5,0(a2) # 40000000 <_sp+0x1fff8000>
 800159c:	8fd9                	or	a5,a5,a4
 800159e:	d11c                	sw	a5,32(a0)
        /* reset the CH0P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
 80015a0:	511c                	lw	a5,32(a0)
 80015a2:	9bf5                	andi	a5,a5,-3
 80015a4:	d11c                	sw	a5,32(a0)
        /* set the CH0P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
 80015a6:	5118                	lw	a4,32(a0)
 80015a8:	00465783          	lhu	a5,4(a2)
 80015ac:	8fd9                	or	a5,a5,a4
 80015ae:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80015b0:	400137b7          	lui	a5,0x40013
 80015b4:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80015b8:	04e51c63          	bne	a0,a4,8001610 <timer_channel_output_config+0x96>
            /* reset the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
 80015bc:	5118                	lw	a4,32(a0)
 80015be:	9b6d                	andi	a4,a4,-5
 80015c0:	d118                	sw	a4,32(a0)
            /* set the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
 80015c2:	5114                	lw	a3,32(a0)
 80015c4:	00265703          	lhu	a4,2(a2)
 80015c8:	8f55                	or	a4,a4,a3
 80015ca:	d118                	sw	a4,32(a0)
            /* reset the CH0NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
 80015cc:	5118                	lw	a4,32(a0)
 80015ce:	9b5d                	andi	a4,a4,-9
 80015d0:	d118                	sw	a4,32(a0)
            /* set the CH0NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
 80015d2:	5114                	lw	a3,32(a0)
 80015d4:	00665703          	lhu	a4,6(a2)
 80015d8:	8f55                	or	a4,a4,a3
 80015da:	d118                	sw	a4,32(a0)
            /* reset the ISO0 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
 80015dc:	c047a703          	lw	a4,-1020(a5)
 80015e0:	eff77713          	andi	a4,a4,-257
 80015e4:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
 80015e8:	c047a683          	lw	a3,-1020(a5)
 80015ec:	00865703          	lhu	a4,8(a2)
 80015f0:	8f55                	or	a4,a4,a3
 80015f2:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO0N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
 80015f6:	c047a703          	lw	a4,-1020(a5)
 80015fa:	dff77713          	andi	a4,a4,-513
 80015fe:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
 8001602:	c047a683          	lw	a3,-1020(a5)
 8001606:	00a65703          	lhu	a4,10(a2)
 800160a:	8f55                	or	a4,a4,a3
 800160c:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
 8001610:	4d1c                	lw	a5,24(a0)
 8001612:	9bf1                	andi	a5,a5,-4
            /* reset the ISO1N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
            /* set the ISO1N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 8001614:	cd1c                	sw	a5,24(a0)
        break;
 8001616:	8082                	ret
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
 8001618:	511c                	lw	a5,32(a0)
 800161a:	9bbd                	andi	a5,a5,-17
 800161c:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
 800161e:	00065783          	lhu	a5,0(a2)
 8001622:	5118                	lw	a4,32(a0)
 8001624:	0792                	slli	a5,a5,0x4
 8001626:	8fd9                	or	a5,a5,a4
 8001628:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
 800162a:	511c                	lw	a5,32(a0)
 800162c:	fdf7f793          	andi	a5,a5,-33
 8001630:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 4U);
 8001632:	00465783          	lhu	a5,4(a2)
 8001636:	5118                	lw	a4,32(a0)
 8001638:	0792                	slli	a5,a5,0x4
 800163a:	8fd9                	or	a5,a5,a4
 800163c:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 800163e:	400137b7          	lui	a5,0x40013
 8001642:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001646:	06e51463          	bne	a0,a4,80016ae <timer_channel_output_config+0x134>
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
 800164a:	5118                	lw	a4,32(a0)
 800164c:	fbf77713          	andi	a4,a4,-65
 8001650:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 4U);
 8001652:	00265703          	lhu	a4,2(a2)
 8001656:	5114                	lw	a3,32(a0)
 8001658:	0712                	slli	a4,a4,0x4
 800165a:	8f55                	or	a4,a4,a3
 800165c:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
 800165e:	5118                	lw	a4,32(a0)
 8001660:	f7f77713          	andi	a4,a4,-129
 8001664:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 4U);
 8001666:	00665703          	lhu	a4,6(a2)
 800166a:	5114                	lw	a3,32(a0)
 800166c:	0712                	slli	a4,a4,0x4
 800166e:	8f55                	or	a4,a4,a3
 8001670:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
 8001672:	c047a703          	lw	a4,-1020(a5)
 8001676:	bff77713          	andi	a4,a4,-1025
 800167a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 2U);
 800167e:	00865703          	lhu	a4,8(a2)
 8001682:	c047a683          	lw	a3,-1020(a5)
 8001686:	070a                	slli	a4,a4,0x2
 8001688:	8f55                	or	a4,a4,a3
 800168a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
 800168e:	c047a703          	lw	a4,-1020(a5)
 8001692:	76fd                	lui	a3,0xfffff
 8001694:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001698:	8f75                	and	a4,a4,a3
 800169a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
 800169e:	00a65703          	lhu	a4,10(a2)
 80016a2:	c047a683          	lw	a3,-1020(a5)
 80016a6:	070a                	slli	a4,a4,0x2
 80016a8:	8f55                	or	a4,a4,a3
 80016aa:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 80016ae:	4d1c                	lw	a5,24(a0)
 80016b0:	cff7f793          	andi	a5,a5,-769
 80016b4:	b785                	j	8001614 <timer_channel_output_config+0x9a>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        /* reset the CH2EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
 80016b6:	511c                	lw	a5,32(a0)
 80016b8:	eff7f793          	andi	a5,a5,-257
 80016bc:	d11c                	sw	a5,32(a0)
        /* set the CH2EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
 80016be:	00065783          	lhu	a5,0(a2)
 80016c2:	5118                	lw	a4,32(a0)
 80016c4:	07a2                	slli	a5,a5,0x8
 80016c6:	8fd9                	or	a5,a5,a4
 80016c8:	d11c                	sw	a5,32(a0)
        /* reset the CH2P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
 80016ca:	511c                	lw	a5,32(a0)
 80016cc:	dff7f793          	andi	a5,a5,-513
 80016d0:	d11c                	sw	a5,32(a0)
        /* set the CH2P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 8U);
 80016d2:	00465783          	lhu	a5,4(a2)
 80016d6:	5118                	lw	a4,32(a0)
 80016d8:	07a2                	slli	a5,a5,0x8
 80016da:	8fd9                	or	a5,a5,a4
 80016dc:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80016de:	400137b7          	lui	a5,0x40013
 80016e2:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80016e6:	06e51563          	bne	a0,a4,8001750 <timer_channel_output_config+0x1d6>
            /* reset the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
 80016ea:	5118                	lw	a4,32(a0)
 80016ec:	bff77713          	andi	a4,a4,-1025
 80016f0:	d118                	sw	a4,32(a0)
            /* set the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 8U);
 80016f2:	00265703          	lhu	a4,2(a2)
 80016f6:	5114                	lw	a3,32(a0)
 80016f8:	0722                	slli	a4,a4,0x8
 80016fa:	8f55                	or	a4,a4,a3
 80016fc:	d118                	sw	a4,32(a0)
            /* reset the CH2NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
 80016fe:	5118                	lw	a4,32(a0)
 8001700:	76fd                	lui	a3,0xfffff
 8001702:	7ff68593          	addi	a1,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001706:	8f6d                	and	a4,a4,a1
 8001708:	d118                	sw	a4,32(a0)
            /* set the CH2NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 800170a:	00665703          	lhu	a4,6(a2)
 800170e:	510c                	lw	a1,32(a0)
            /* reset the ISO2 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001710:	16fd                	addi	a3,a3,-1
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 8001712:	0722                	slli	a4,a4,0x8
 8001714:	8f4d                	or	a4,a4,a1
 8001716:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001718:	c047a703          	lw	a4,-1020(a5)
 800171c:	8ef9                	and	a3,a3,a4
 800171e:	c0d7a223          	sw	a3,-1020(a5)
            /* set the ISO2 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 4U);
 8001722:	00865703          	lhu	a4,8(a2)
 8001726:	c047a683          	lw	a3,-1020(a5)
 800172a:	0712                	slli	a4,a4,0x4
 800172c:	8f55                	or	a4,a4,a3
 800172e:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO2N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
 8001732:	c047a703          	lw	a4,-1020(a5)
 8001736:	76f9                	lui	a3,0xffffe
 8001738:	16fd                	addi	a3,a3,-1
 800173a:	8f75                	and	a4,a4,a3
 800173c:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO2N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
 8001740:	00a65703          	lhu	a4,10(a2)
 8001744:	c047a683          	lw	a3,-1020(a5)
 8001748:	0712                	slli	a4,a4,0x4
 800174a:	8f55                	or	a4,a4,a3
 800174c:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
 8001750:	4d5c                	lw	a5,28(a0)
 8001752:	9bf1                	andi	a5,a5,-4
            /* reset the ISO3 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
            /* set the ISO3 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 8001754:	cd5c                	sw	a5,28(a0)
        break;
    default:
        break;
    }
}
 8001756:	8082                	ret
        TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
 8001758:	511c                	lw	a5,32(a0)
 800175a:	777d                	lui	a4,0xfffff
 800175c:	177d                	addi	a4,a4,-1
 800175e:	8ff9                	and	a5,a5,a4
 8001760:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
 8001762:	00065783          	lhu	a5,0(a2)
 8001766:	5118                	lw	a4,32(a0)
 8001768:	07b2                	slli	a5,a5,0xc
 800176a:	8fd9                	or	a5,a5,a4
 800176c:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
 800176e:	511c                	lw	a5,32(a0)
 8001770:	7779                	lui	a4,0xffffe
 8001772:	177d                	addi	a4,a4,-1
 8001774:	8ff9                	and	a5,a5,a4
 8001776:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 12U);
 8001778:	00465783          	lhu	a5,4(a2)
 800177c:	5118                	lw	a4,32(a0)
 800177e:	07b2                	slli	a5,a5,0xc
 8001780:	8fd9                	or	a5,a5,a4
 8001782:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 8001784:	400137b7          	lui	a5,0x40013
 8001788:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800178c:	02e51163          	bne	a0,a4,80017ae <timer_channel_output_config+0x234>
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
 8001790:	c047a703          	lw	a4,-1020(a5)
 8001794:	76f1                	lui	a3,0xffffc
 8001796:	16fd                	addi	a3,a3,-1
 8001798:	8f75                	and	a4,a4,a3
 800179a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
 800179e:	00865703          	lhu	a4,8(a2)
 80017a2:	c047a683          	lw	a3,-1020(a5)
 80017a6:	071a                	slli	a4,a4,0x6
 80017a8:	8f55                	or	a4,a4,a3
 80017aa:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 80017ae:	4d5c                	lw	a5,28(a0)
 80017b0:	cff7f793          	andi	a5,a5,-769
 80017b4:	b745                	j	8001754 <timer_channel_output_config+0x1da>

080017b6 <timer_channel_output_mode_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
{
    switch(channel){
 80017b6:	4785                	li	a5,1
 80017b8:	02f58263          	beq	a1,a5,80017dc <timer_channel_output_mode_config+0x26>
 80017bc:	c981                	beqz	a1,80017cc <timer_channel_output_mode_config+0x16>
 80017be:	4789                	li	a5,2
 80017c0:	02f58663          	beq	a1,a5,80017ec <timer_channel_output_mode_config+0x36>
 80017c4:	478d                	li	a5,3
 80017c6:	02f58b63          	beq	a1,a5,80017fc <timer_channel_output_mode_config+0x46>
 80017ca:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
 80017cc:	4d1c                	lw	a5,24(a0)
 80017ce:	f8f7f793          	andi	a5,a5,-113
 80017d2:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
 80017d4:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017d6:	8e5d                	or	a2,a2,a5
 80017d8:	cd10                	sw	a2,24(a0)
        break;
 80017da:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
 80017dc:	4d1c                	lw	a5,24(a0)
 80017de:	7765                	lui	a4,0xffff9
 80017e0:	177d                	addi	a4,a4,-1
 80017e2:	8ff9                	and	a5,a5,a4
 80017e4:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017e6:	4d1c                	lw	a5,24(a0)
 80017e8:	0622                	slli	a2,a2,0x8
 80017ea:	b7f5                	j	80017d6 <timer_channel_output_mode_config+0x20>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
 80017ec:	4d5c                	lw	a5,28(a0)
 80017ee:	f8f7f793          	andi	a5,a5,-113
 80017f2:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
 80017f4:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017f6:	8e5d                	or	a2,a2,a5
 80017f8:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 80017fa:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
 80017fc:	4d5c                	lw	a5,28(a0)
 80017fe:	7765                	lui	a4,0xffff9
 8001800:	177d                	addi	a4,a4,-1
 8001802:	8ff9                	and	a5,a5,a4
 8001804:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 8001806:	4d5c                	lw	a5,28(a0)
 8001808:	0622                	slli	a2,a2,0x8
 800180a:	b7f5                	j	80017f6 <timer_channel_output_mode_config+0x40>

0800180c <timer_channel_output_pulse_value_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint32_t pulse)
{
    switch(channel){
 800180c:	4785                	li	a5,1
 800180e:	00f58c63          	beq	a1,a5,8001826 <timer_channel_output_pulse_value_config+0x1a>
 8001812:	c981                	beqz	a1,8001822 <timer_channel_output_pulse_value_config+0x16>
 8001814:	4789                	li	a5,2
 8001816:	00f58a63          	beq	a1,a5,800182a <timer_channel_output_pulse_value_config+0x1e>
 800181a:	478d                	li	a5,3
 800181c:	00f58963          	beq	a1,a5,800182e <timer_channel_output_pulse_value_config+0x22>
 8001820:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
 8001822:	d950                	sw	a2,52(a0)
        break;
 8001824:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
 8001826:	dd10                	sw	a2,56(a0)
        break;
 8001828:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
 800182a:	dd50                	sw	a2,60(a0)
        break;
 800182c:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
         TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
 800182e:	c130                	sw	a2,64(a0)
        break;
    default:
        break;
    }
}
 8001830:	8082                	ret

08001832 <timer_channel_output_shadow_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
{
    switch(channel){
 8001832:	4785                	li	a5,1
 8001834:	02f58163          	beq	a1,a5,8001856 <timer_channel_output_shadow_config+0x24>
 8001838:	c981                	beqz	a1,8001848 <timer_channel_output_shadow_config+0x16>
 800183a:	4789                	li	a5,2
 800183c:	02f58663          	beq	a1,a5,8001868 <timer_channel_output_shadow_config+0x36>
 8001840:	478d                	li	a5,3
 8001842:	02f58a63          	beq	a1,a5,8001876 <timer_channel_output_shadow_config+0x44>
 8001846:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
 8001848:	4d1c                	lw	a5,24(a0)
 800184a:	9bdd                	andi	a5,a5,-9
 800184c:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
 800184e:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001850:	8e5d                	or	a2,a2,a5
 8001852:	cd10                	sw	a2,24(a0)
        break;
 8001854:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
 8001856:	4d1c                	lw	a5,24(a0)
 8001858:	777d                	lui	a4,0xfffff
 800185a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800185e:	8ff9                	and	a5,a5,a4
 8001860:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001862:	4d1c                	lw	a5,24(a0)
 8001864:	0622                	slli	a2,a2,0x8
 8001866:	b7ed                	j	8001850 <timer_channel_output_shadow_config+0x1e>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
 8001868:	4d5c                	lw	a5,28(a0)
 800186a:	9bdd                	andi	a5,a5,-9
 800186c:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
 800186e:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001870:	8e5d                	or	a2,a2,a5
 8001872:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8001874:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
 8001876:	4d5c                	lw	a5,28(a0)
 8001878:	777d                	lui	a4,0xfffff
 800187a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800187e:	8ff9                	and	a5,a5,a4
 8001880:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001882:	4d5c                	lw	a5,28(a0)
 8001884:	0622                	slli	a2,a2,0x8
 8001886:	b7ed                	j	8001870 <timer_channel_output_shadow_config+0x3e>

08001888 <timer_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
 8001888:	455c                	lw	a5,12(a0)
 800188a:	8ddd                	or	a1,a1,a5
 800188c:	c54c                	sw	a1,12(a0)
}
 800188e:	8082                	ret

08001890 <timer_interrupt_disable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_disable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)interrupt); 
 8001890:	455c                	lw	a5,12(a0)
 8001892:	fff5c593          	not	a1,a1
 8001896:	8dfd                	and	a1,a1,a5
 8001898:	c54c                	sw	a1,12(a0)
}
 800189a:	8082                	ret

0800189c <timer_interrupt_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus timer_interrupt_flag_get(uint32_t timer_periph, uint32_t interrupt)
{
    uint32_t val;
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 800189c:	455c                	lw	a5,12(a0)
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 800189e:	4908                	lw	a0,16(a0)
 80018a0:	8d6d                	and	a0,a0,a1
 80018a2:	c509                	beqz	a0,80018ac <timer_interrupt_flag_get+0x10>
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 80018a4:	00b7f533          	and	a0,a5,a1
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 80018a8:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET;
    }
}
 80018ac:	8082                	ret

080018ae <timer_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_flag_clear(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_INTF(timer_periph) = (~(uint32_t)interrupt);
 80018ae:	fff5c593          	not	a1,a1
 80018b2:	c90c                	sw	a1,16(a0)
}
 80018b4:	8082                	ret

080018b6 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 80018b6:	1141                	addi	sp,sp,-16
    switch(usart_periph){
 80018b8:	400057b7          	lui	a5,0x40005
{
 80018bc:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 80018be:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
 80018c2:	06e50963          	beq	a0,a4,8001934 <usart_deinit+0x7e>
 80018c6:	00a76f63          	bltu	a4,a0,80018e4 <usart_deinit+0x2e>
 80018ca:	40004737          	lui	a4,0x40004
 80018ce:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 80018d2:	02e50f63          	beq	a0,a4,8001910 <usart_deinit+0x5a>
 80018d6:	80078793          	addi	a5,a5,-2048
 80018da:	04f50463          	beq	a0,a5,8001922 <usart_deinit+0x6c>
        rcu_periph_reset_disable(RCU_UART4RST);
        break;
    default:
        break;
    }
}
 80018de:	40b2                	lw	ra,12(sp)
 80018e0:	0141                	addi	sp,sp,16
 80018e2:	8082                	ret
    switch(usart_periph){
 80018e4:	06f50163          	beq	a0,a5,8001946 <usart_deinit+0x90>
 80018e8:	400147b7          	lui	a5,0x40014
 80018ec:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
 80018f0:	fef517e3          	bne	a0,a5,80018de <usart_deinit+0x28>
        rcu_periph_reset_enable(RCU_USART0RST);
 80018f4:	30e00513          	li	a0,782
 80018f8:	00000097          	auipc	ra,0x0
 80018fc:	8c2080e7          	jalr	-1854(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 8001900:	30e00513          	li	a0,782
}
 8001904:	40b2                	lw	ra,12(sp)
 8001906:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_UART4RST);
 8001908:	00000317          	auipc	t1,0x0
 800190c:	8ca30067          	jr	-1846(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 8001910:	41100513          	li	a0,1041
 8001914:	00000097          	auipc	ra,0x0
 8001918:	8a6080e7          	jalr	-1882(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 800191c:	41100513          	li	a0,1041
 8001920:	b7d5                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_USART2RST);
 8001922:	41200513          	li	a0,1042
 8001926:	00000097          	auipc	ra,0x0
 800192a:	894080e7          	jalr	-1900(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART2RST);
 800192e:	41200513          	li	a0,1042
 8001932:	bfc9                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART3RST);
 8001934:	41300513          	li	a0,1043
 8001938:	00000097          	auipc	ra,0x0
 800193c:	882080e7          	jalr	-1918(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART3RST);
 8001940:	41300513          	li	a0,1043
 8001944:	b7c1                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART4RST);
 8001946:	41400513          	li	a0,1044
 800194a:	00000097          	auipc	ra,0x0
 800194e:	870080e7          	jalr	-1936(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART4RST);
 8001952:	41400513          	li	a0,1044
 8001956:	b77d                	j	8001904 <usart_deinit+0x4e>

08001958 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/ 
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8001958:	1141                	addi	sp,sp,-16
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
    switch(usart_periph){
 800195a:	400057b7          	lui	a5,0x40005
{
 800195e:	c422                	sw	s0,8(sp)
 8001960:	c226                	sw	s1,4(sp)
 8001962:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 8001964:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
{
 8001968:	842a                	mv	s0,a0
 800196a:	84ae                	mv	s1,a1
    switch(usart_periph){
 800196c:	00e50f63          	beq	a0,a4,800198a <usart_baudrate_set+0x32>
 8001970:	00a76f63          	bltu	a4,a0,800198e <usart_baudrate_set+0x36>
 8001974:	40004737          	lui	a4,0x40004
 8001978:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 800197c:	00e50763          	beq	a0,a4,800198a <usart_baudrate_set+0x32>
 8001980:	80078793          	addi	a5,a5,-2048
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001984:	4501                	li	a0,0
    switch(usart_periph){
 8001986:	02f41263          	bne	s0,a5,80019aa <usart_baudrate_set+0x52>
         /* get USART0 clock */
         uclk=rcu_clock_freq_get(CK_APB2);
         break;
    case USART1:
         /* get USART1 clock */
         uclk=rcu_clock_freq_get(CK_APB1);
 800198a:	4509                	li	a0,2
 800198c:	a819                	j	80019a2 <usart_baudrate_set+0x4a>
    switch(usart_periph){
 800198e:	fef50ee3          	beq	a0,a5,800198a <usart_baudrate_set+0x32>
 8001992:	400147b7          	lui	a5,0x40014
 8001996:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 800199a:	4501                	li	a0,0
    switch(usart_periph){
 800199c:	00f41763          	bne	s0,a5,80019aa <usart_baudrate_set+0x52>
         uclk=rcu_clock_freq_get(CK_APB2);
 80019a0:	450d                	li	a0,3
         uclk=rcu_clock_freq_get(CK_APB1);
 80019a2:	00000097          	auipc	ra,0x0
 80019a6:	8a0080e7          	jalr	-1888(ra) # 8001242 <rcu_clock_freq_get>
         break;  
    default:
         break;
    }
    /* oversampling by 16, configure the value of USART_BAUD */
    udiv = (uclk+baudval/2U)/baudval;
 80019aa:	0014d793          	srli	a5,s1,0x1
 80019ae:	97aa                	add	a5,a5,a0
 80019b0:	0297d7b3          	divu	a5,a5,s1
    intdiv = udiv & (0x0000fff0U);
    fradiv = udiv & (0x0000000fU);
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
}
 80019b4:	40b2                	lw	ra,12(sp)
 80019b6:	4492                	lw	s1,4(sp)
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 80019b8:	07c2                	slli	a5,a5,0x10
 80019ba:	83c1                	srli	a5,a5,0x10
 80019bc:	c41c                	sw	a5,8(s0)
}
 80019be:	4422                	lw	s0,8(sp)
 80019c0:	0141                	addi	sp,sp,16
 80019c2:	8082                	ret

080019c4 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 80019c4:	455c                	lw	a5,12(a0)
 80019c6:	9ff7f793          	andi	a5,a5,-1537
 80019ca:	c55c                	sw	a5,12(a0)
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg ;
 80019cc:	455c                	lw	a5,12(a0)
 80019ce:	8ddd                	or	a1,a1,a5
 80019d0:	c54c                	sw	a1,12(a0)
}
 80019d2:	8082                	ret

080019d4 <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 80019d4:	455c                	lw	a5,12(a0)
 80019d6:	777d                	lui	a4,0xfffff
 80019d8:	177d                	addi	a4,a4,-1
 80019da:	8ff9                	and	a5,a5,a4
 80019dc:	c55c                	sw	a5,12(a0)
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 80019de:	455c                	lw	a5,12(a0)
 80019e0:	8ddd                	or	a1,a1,a5
 80019e2:	c54c                	sw	a1,12(a0)
}
 80019e4:	8082                	ret

080019e6 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB; 
 80019e6:	491c                	lw	a5,16(a0)
 80019e8:	7775                	lui	a4,0xffffd
 80019ea:	177d                	addi	a4,a4,-1
 80019ec:	8ff9                	and	a5,a5,a4
 80019ee:	c91c                	sw	a5,16(a0)
    /* configure USART stop bits */
    USART_CTL1(usart_periph) |= stblen;
 80019f0:	491c                	lw	a5,16(a0)
 80019f2:	8ddd                	or	a1,a1,a5
 80019f4:	c90c                	sw	a1,16(a0)
}
 80019f6:	8082                	ret

080019f8 <usart_enable>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph){
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 80019f8:	455c                	lw	a5,12(a0)
 80019fa:	6709                	lui	a4,0x2
 80019fc:	8fd9                	or	a5,a5,a4
 80019fe:	c55c                	sw	a5,12(a0)
}
 8001a00:	8082                	ret

08001a02 <usart_transmit_config>:
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 8001a02:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_TEN;
 8001a04:	9bdd                	andi	a5,a5,-9
    ctl |= txconfig;
 8001a06:	8ddd                	or	a1,a1,a5
    /* configure transfer mode */
    USART_CTL0(usart_periph) = ctl;
 8001a08:	c54c                	sw	a1,12(a0)
}
 8001a0a:	8082                	ret

08001a0c <usart_receive_config>:
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 8001a0c:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_REN;
 8001a0e:	9bed                	andi	a5,a5,-5
    ctl |= rxconfig;
 8001a10:	8ddd                	or	a1,a1,a5
    /* configure receiver mode */
    USART_CTL0(usart_periph) = ctl;
 8001a12:	c54c                	sw	a1,12(a0)
}
 8001a14:	8082                	ret

08001a16 <usart_data_receive>:
    \param[out] none
    \retval     data of received
*/
uint16_t usart_data_receive(uint32_t usart_periph)
{
    return (uint16_t)(GET_BITS(USART_DATA(usart_periph), 0U, 8U));
 8001a16:	4148                	lw	a0,4(a0)
}
 8001a18:	1ff57513          	andi	a0,a0,511
 8001a1c:	8082                	ret

08001a1e <usart_hardware_flow_rts_config>:
*/
void usart_hardware_flow_rts_config(uint32_t usart_periph, uint32_t rtsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a1e:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_RTSEN;
 8001a20:	eff7f793          	andi	a5,a5,-257
    ctl |= rtsconfig;
 8001a24:	8ddd                	or	a1,a1,a5
    /* configure RTS */
    USART_CTL2(usart_periph) = ctl;
 8001a26:	c94c                	sw	a1,20(a0)
}
 8001a28:	8082                	ret

08001a2a <usart_hardware_flow_cts_config>:
*/
void usart_hardware_flow_cts_config(uint32_t usart_periph, uint32_t ctsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a2a:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_CTSEN;
 8001a2c:	dff7f793          	andi	a5,a5,-513
    ctl |= ctsconfig;
 8001a30:	8ddd                	or	a1,a1,a5
    /* configure CTS */
    USART_CTL2(usart_periph) = ctl;
 8001a32:	c94c                	sw	a1,20(a0)
}
 8001a34:	8082                	ret

08001a36 <usart_dma_receive_config>:
*/
void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a36:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENR;
 8001a38:	fbf7f793          	andi	a5,a5,-65
    ctl |= dmacmd;
 8001a3c:	8ddd                	or	a1,a1,a5
    /* configure DMA reception */
    USART_CTL2(usart_periph) = ctl;
 8001a3e:	c94c                	sw	a1,20(a0)
}
 8001a40:	8082                	ret

08001a42 <usart_dma_transmit_config>:
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a42:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENT;
 8001a44:	f7f7f793          	andi	a5,a5,-129
    ctl |= dmacmd;
 8001a48:	8ddd                	or	a1,a1,a5
    /* configure DMA transmission */
    USART_CTL2(usart_periph) = ctl;
 8001a4a:	c94c                	sw	a1,20(a0)
}
 8001a4c:	8082                	ret

08001a4e <usart_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_enable(uint32_t usart_periph, uint32_t interrupt)
{
    USART_REG_VAL(usart_periph, interrupt) |= BIT(USART_BIT_POS(interrupt));
 8001a4e:	0065d793          	srli	a5,a1,0x6
 8001a52:	3ff7f793          	andi	a5,a5,1023
 8001a56:	953e                	add	a0,a0,a5
 8001a58:	4118                	lw	a4,0(a0)
 8001a5a:	4785                	li	a5,1
 8001a5c:	00b797b3          	sll	a5,a5,a1
 8001a60:	8fd9                	or	a5,a5,a4
 8001a62:	c11c                	sw	a5,0(a0)
}
 8001a64:	8082                	ret

08001a66 <usart_interrupt_flag_get>:
*/
FlagStatus usart_interrupt_flag_get(uint32_t usart_periph, uint32_t int_flag)
{
    uint32_t intenable = 0U, flagstatus = 0U;
    /* get the interrupt enable bit status */
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8001a66:	0065d713          	srli	a4,a1,0x6
 8001a6a:	3ff77713          	andi	a4,a4,1023
 8001a6e:	972a                	add	a4,a4,a0
 8001a70:	4314                	lw	a3,0(a4)
    /* get the corresponding flag bit status */
    flagstatus = (USART_REG_VAL2(usart_periph, int_flag) & BIT(USART_BIT_POS2(int_flag)));
 8001a72:	0165d713          	srli	a4,a1,0x16
 8001a76:	972a                	add	a4,a4,a0
 8001a78:	4318                	lw	a4,0(a4)
 8001a7a:	0105d513          	srli	a0,a1,0x10
 8001a7e:	4785                	li	a5,1
 8001a80:	00a79533          	sll	a0,a5,a0
 8001a84:	8d79                	and	a0,a0,a4

    if(flagstatus && intenable){
 8001a86:	c511                	beqz	a0,8001a92 <usart_interrupt_flag_get+0x2c>
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8001a88:	00b79533          	sll	a0,a5,a1
 8001a8c:	8d75                	and	a0,a0,a3
    if(flagstatus && intenable){
 8001a8e:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET; 
    }
}
 8001a92:	8082                	ret

08001a94 <usart_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_flag_clear(uint32_t usart_periph, uint32_t int_flag)
{
    USART_REG_VAL2(usart_periph, int_flag) &= ~BIT(USART_BIT_POS2(int_flag));
 8001a94:	0165d713          	srli	a4,a1,0x16
 8001a98:	953a                	add	a0,a0,a4
 8001a9a:	4118                	lw	a4,0(a0)
 8001a9c:	81c1                	srli	a1,a1,0x10
 8001a9e:	4785                	li	a5,1
 8001aa0:	00b797b3          	sll	a5,a5,a1
 8001aa4:	fff7c793          	not	a5,a5
 8001aa8:	8ff9                	and	a5,a5,a4
 8001aaa:	c11c                	sw	a5,0(a0)
}
 8001aac:	8082                	ret

08001aae <SystemInit>:
*/
void SystemInit(void)
{
    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001aae:	400217b7          	lui	a5,0x40021
 8001ab2:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001ab4:	e0ff06b7          	lui	a3,0xe0ff0
 8001ab8:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001aba:	00176713          	ori	a4,a4,1
 8001abe:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001ac0:	43d8                	lw	a4,4(a5)
 8001ac2:	8f75                	and	a4,a4,a3
 8001ac4:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 8001ac6:	4398                	lw	a4,0(a5)
 8001ac8:	fef706b7          	lui	a3,0xfef70
 8001acc:	16fd                	addi	a3,a3,-1
 8001ace:	8f75                	and	a4,a4,a3
 8001ad0:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8001ad2:	4398                	lw	a4,0(a5)
 8001ad4:	fffc06b7          	lui	a3,0xfffc0
 8001ad8:	16fd                	addi	a3,a3,-1
 8001ada:	8f75                	and	a4,a4,a3
 8001adc:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8001ade:	43d8                	lw	a4,4(a5)
 8001ae0:	df0106b7          	lui	a3,0xdf010
 8001ae4:	16fd                	addi	a3,a3,-1
 8001ae6:	8f75                	and	a4,a4,a3
 8001ae8:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8001aea:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8001aee:	4398                	lw	a4,0(a5)
 8001af0:	eaf706b7          	lui	a3,0xeaf70
 8001af4:	16fd                	addi	a3,a3,-1
 8001af6:	8f75                	and	a4,a4,a3
 8001af8:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8001afa:	00ff0737          	lui	a4,0xff0
 8001afe:	c798                	sw	a4,8(a5)
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8001b00:	4394                	lw	a3,0(a5)
 8001b02:	6741                	lui	a4,0x10
 8001b04:	8ed9                	or	a3,a3,a4
 8001b06:	c394                	sw	a3,0(a5)
 8001b08:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8001b0c:	40021737          	lui	a4,0x40021
 8001b10:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8001b12:	00e69613          	slli	a2,a3,0xe
 8001b16:	00064463          	bltz	a2,8001b1e <SystemInit+0x70>
 8001b1a:	17fd                	addi	a5,a5,-1
 8001b1c:	fbf5                	bnez	a5,8001b10 <SystemInit+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8001b1e:	400217b7          	lui	a5,0x40021
 8001b22:	4398                	lw	a4,0(a5)
 8001b24:	00e71693          	slli	a3,a4,0xe
 8001b28:	0006c363          	bltz	a3,8001b2e <SystemInit+0x80>
        while(1){
        }
 8001b2c:	a001                	j	8001b2c <SystemInit+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8001b2e:	43d8                	lw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8001b30:	dfc406b7          	lui	a3,0xdfc40
 8001b34:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8001b36:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8001b38:	43d8                	lw	a4,4(a5)
 8001b3a:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8001b3c:	43d8                	lw	a4,4(a5)
 8001b3e:	40076713          	ori	a4,a4,1024
 8001b42:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8001b44:	43d8                	lw	a4,4(a5)
 8001b46:	8f75                	and	a4,a4,a3
 8001b48:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 8001b4a:	43d8                	lw	a4,4(a5)
 8001b4c:	202906b7          	lui	a3,0x20290
 8001b50:	8f55                	or	a4,a4,a3
 8001b52:	c3d8                	sw	a4,4(a5)
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8001b54:	57d8                	lw	a4,44(a5)
 8001b56:	76bd                	lui	a3,0xfffef
 8001b58:	8f75                	and	a4,a4,a3
 8001b5a:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 8001b5c:	57d8                	lw	a4,44(a5)
 8001b5e:	66c1                	lui	a3,0x10
 8001b60:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xef11>
 8001b64:	8f55                	or	a4,a4,a3
 8001b66:	d7d8                	sw	a4,44(a5)

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 8001b68:	4398                	lw	a4,0(a5)
 8001b6a:	040006b7          	lui	a3,0x4000
 8001b6e:	8f55                	or	a4,a4,a3
 8001b70:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 8001b72:	400217b7          	lui	a5,0x40021
 8001b76:	4398                	lw	a4,0(a5)
 8001b78:	00471693          	slli	a3,a4,0x4
 8001b7c:	fe06dde3          	bgez	a3,8001b76 <SystemInit+0xc8>
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 8001b80:	4398                	lw	a4,0(a5)
 8001b82:	100006b7          	lui	a3,0x10000
 8001b86:	8f55                	or	a4,a4,a3
 8001b88:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 8001b8a:	400217b7          	lui	a5,0x40021
 8001b8e:	4398                	lw	a4,0(a5)
 8001b90:	00271693          	slli	a3,a4,0x2
 8001b94:	fe06dde3          	bgez	a3,8001b8e <SystemInit+0xe0>
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8001b98:	4398                	lw	a4,0(a5)
 8001b9a:	010006b7          	lui	a3,0x1000
 8001b9e:	8f55                	or	a4,a4,a3
 8001ba0:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8001ba2:	400217b7          	lui	a5,0x40021
 8001ba6:	4398                	lw	a4,0(a5)
 8001ba8:	00671693          	slli	a3,a4,0x6
 8001bac:	fe06dde3          	bgez	a3,8001ba6 <SystemInit+0xf8>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8001bb0:	43d8                	lw	a4,4(a5)
 8001bb2:	9b71                	andi	a4,a4,-4
 8001bb4:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8001bb6:	43d8                	lw	a4,4(a5)
 8001bb8:	00276713          	ori	a4,a4,2
 8001bbc:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8001bbe:	40021737          	lui	a4,0x40021
 8001bc2:	435c                	lw	a5,4(a4)
 8001bc4:	8ba1                	andi	a5,a5,8
 8001bc6:	dff5                	beqz	a5,8001bc2 <SystemInit+0x114>
}
 8001bc8:	8082                	ret

08001bca <SystemCoreClockUpdate>:
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001bca:	40021737          	lui	a4,0x40021
 8001bce:	435c                	lw	a5,4(a4)
 8001bd0:	20000637          	lui	a2,0x20000
    switch (scss)
 8001bd4:	4685                	li	a3,1
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001bd6:	8389                	srli	a5,a5,0x2
 8001bd8:	8b8d                	andi	a5,a5,3
    switch (scss)
 8001bda:	4e860613          	addi	a2,a2,1256 # 200004e8 <SystemCoreClock>
 8001bde:	00d78663          	beq	a5,a3,8001bea <SystemCoreClockUpdate+0x20>
 8001be2:	c781                	beqz	a5,8001bea <SystemCoreClockUpdate+0x20>
 8001be4:	4689                	li	a3,2
 8001be6:	00d78863          	beq	a5,a3,8001bf6 <SystemCoreClockUpdate+0x2c>
            SystemCoreClock = IRC8M_VALUE;
 8001bea:	007a17b7          	lui	a5,0x7a1
 8001bee:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001bf2:	c21c                	sw	a5,0(a2)
}
 8001bf4:	8082                	ret
            pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 8001bf6:	435c                	lw	a5,4(a4)
            if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
 8001bf8:	00f79693          	slli	a3,a5,0xf
 8001bfc:	0606db63          	bgez	a3,8001c72 <SystemCoreClockUpdate+0xa8>
                predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001c00:	575c                	lw	a5,44(a4)
                if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001c02:	00f79693          	slli	a3,a5,0xf
 8001c06:	0606d163          	bgez	a3,8001c68 <SystemCoreClockUpdate+0x9e>
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c0a:	575c                	lw	a5,44(a4)
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c0c:	5758                	lw	a4,44(a4)
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c0e:	8391                	srli	a5,a5,0x4
 8001c10:	8bbd                	andi	a5,a5,15
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c12:	8321                	srli	a4,a4,0x8
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c14:	00178693          	addi	a3,a5,1
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c18:	00f77793          	andi	a5,a4,15
 8001c1c:	00278713          	addi	a4,a5,2
                    if(17U == pll1mf){
 8001c20:	47c5                	li	a5,17
 8001c22:	00f71363          	bne	a4,a5,8001c28 <SystemCoreClockUpdate+0x5e>
                        pll1mf = 20U;
 8001c26:	4751                	li	a4,20
                    ck_src = (ck_src / predv1) * pll1mf;
 8001c28:	007a17b7          	lui	a5,0x7a1
 8001c2c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001c30:	02d7d7b3          	divu	a5,a5,a3
 8001c34:	02e787b3          	mul	a5,a5,a4
                predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 8001c38:	40021737          	lui	a4,0x40021
 8001c3c:	5758                	lw	a4,44(a4)
 8001c3e:	8b3d                	andi	a4,a4,15
 8001c40:	0705                	addi	a4,a4,1
                ck_src /= predv0;
 8001c42:	02e7d7b3          	divu	a5,a5,a4
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c46:	400216b7          	lui	a3,0x40021
 8001c4a:	42d8                	lw	a4,4(a3)
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c4c:	42d4                	lw	a3,4(a3)
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c4e:	8349                	srli	a4,a4,0x12
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c50:	00269593          	slli	a1,a3,0x2
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c54:	8b3d                	andi	a4,a4,15
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c56:	0205d363          	bgez	a1,8001c7c <SystemCoreClockUpdate+0xb2>
                pllmf |= 0x10U;
 8001c5a:	01076713          	ori	a4,a4,16
                pllmf += 1U;
 8001c5e:	0705                	addi	a4,a4,1
            SystemCoreClock = ck_src * pllmf;
 8001c60:	02f70733          	mul	a4,a4,a5
 8001c64:	c218                	sw	a4,0(a2)
 8001c66:	8082                	ret
                ck_src = HXTAL_VALUE;
 8001c68:	007a17b7          	lui	a5,0x7a1
 8001c6c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001c70:	b7e1                	j	8001c38 <SystemCoreClockUpdate+0x6e>
                ck_src = IRC8M_VALUE / 2U;
 8001c72:	003d17b7          	lui	a5,0x3d1
 8001c76:	90078793          	addi	a5,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 8001c7a:	b7f1                	j	8001c46 <SystemCoreClockUpdate+0x7c>
            if(pllmf >= 15U){
 8001c7c:	46bd                	li	a3,15
 8001c7e:	fed700e3          	beq	a4,a3,8001c5e <SystemCoreClockUpdate+0x94>
                pllmf += 2U;
 8001c82:	0709                	addi	a4,a4,2
            if(15U == pllmf){
 8001c84:	fcd71ee3          	bne	a4,a3,8001c60 <SystemCoreClockUpdate+0x96>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001c88:	4719                	li	a4,6
 8001c8a:	02e78733          	mul	a4,a5,a4
 8001c8e:	8385                	srli	a5,a5,0x1
 8001c90:	97ba                	add	a5,a5,a4
 8001c92:	b785                	j	8001bf2 <SystemCoreClockUpdate+0x28>

08001c94 <_exit>:

#include "stub.h"


void _exit(int code)
{
 8001c94:	7179                	addi	sp,sp,-48
  const char message[] = "\nProgram has exited with code:";
 8001c96:	080005b7          	lui	a1,0x8000
{
 8001c9a:	d422                	sw	s0,40(sp)
  const char message[] = "\nProgram has exited with code:";
 8001c9c:	467d                	li	a2,31
{
 8001c9e:	842a                	mv	s0,a0
  const char message[] = "\nProgram has exited with code:";
 8001ca0:	29058593          	addi	a1,a1,656 # 8000290 <enable_mcycle_minstret+0x44>
 8001ca4:	850a                	mv	a0,sp
{
 8001ca6:	d606                	sw	ra,44(sp)
  const char message[] = "\nProgram has exited with code:";
 8001ca8:	00006097          	auipc	ra,0x6
 8001cac:	d0c080e7          	jalr	-756(ra) # 80079b4 <memcpy>

  write(STDERR_FILENO, message, sizeof(message) - 1);
 8001cb0:	4679                	li	a2,30
 8001cb2:	858a                	mv	a1,sp
 8001cb4:	4509                	li	a0,2
 8001cb6:	17fff097          	auipc	ra,0x17fff
 8001cba:	892080e7          	jalr	-1902(ra) # 20000548 <write>
  write_hex(STDERR_FILENO, code);
 8001cbe:	85a2                	mv	a1,s0
 8001cc0:	4509                	li	a0,2
 8001cc2:	00000097          	auipc	ra,0x0
 8001cc6:	04c080e7          	jalr	76(ra) # 8001d0e <write_hex>
  write(STDERR_FILENO, "\n", 1);
 8001cca:	080005b7          	lui	a1,0x8000
 8001cce:	4605                	li	a2,1
 8001cd0:	2c058593          	addi	a1,a1,704 # 80002c0 <enable_mcycle_minstret+0x74>
 8001cd4:	4509                	li	a0,2
 8001cd6:	17fff097          	auipc	ra,0x17fff
 8001cda:	872080e7          	jalr	-1934(ra) # 20000548 <write>

  for (;;);
 8001cde:	a001                	j	8001cde <_exit+0x4a>

08001ce0 <_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
 8001ce0:	20000737          	lui	a4,0x20000
 8001ce4:	4ec70713          	addi	a4,a4,1260 # 200004ec <curbrk.1524>
 8001ce8:	431c                	lw	a5,0(a4)
 8001cea:	200056b7          	lui	a3,0x20005
 8001cee:	e4868693          	addi	a3,a3,-440 # 20004e48 <_end>
 8001cf2:	953e                	add	a0,a0,a5
 8001cf4:	00d56b63          	bltu	a0,a3,8001d0a <_sbrk+0x2a>
 8001cf8:	200076b7          	lui	a3,0x20007
 8001cfc:	00068693          	mv	a3,a3
 8001d00:	00a6e563          	bltu	a3,a0,8001d0a <_sbrk+0x2a>
    return NULL - 1;

  curbrk += incr;
 8001d04:	c308                	sw	a0,0(a4)
  return curbrk - incr;
 8001d06:	853e                	mv	a0,a5
 8001d08:	8082                	ret
    return NULL - 1;
 8001d0a:	57fd                	li	a5,-1
 8001d0c:	bfed                	j	8001d06 <_sbrk+0x26>

08001d0e <write_hex>:

#include <stdint.h>
#include <unistd.h>

void write_hex(int fd, unsigned long int hex)
{
 8001d0e:	7179                	addi	sp,sp,-48
 8001d10:	ce4e                	sw	s3,28(sp)
 8001d12:	89ae                	mv	s3,a1
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
 8001d14:	080005b7          	lui	a1,0x8000
 8001d18:	4609                	li	a2,2
 8001d1a:	2b058593          	addi	a1,a1,688 # 80002b0 <enable_mcycle_minstret+0x64>
{
 8001d1e:	d422                	sw	s0,40(sp)
 8001d20:	d226                	sw	s1,36(sp)
 8001d22:	d04a                	sw	s2,32(sp)
 8001d24:	cc52                	sw	s4,24(sp)
 8001d26:	ca56                	sw	s5,20(sp)
 8001d28:	d606                	sw	ra,44(sp)
 8001d2a:	892a                	mv	s2,a0
  write(fd , "0x", 2);
 8001d2c:	4471                	li	s0,28
 8001d2e:	17fff097          	auipc	ra,0x17fff
 8001d32:	81a080e7          	jalr	-2022(ra) # 20000548 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001d36:	4a3d                	li	s4,15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d38:	4aa5                	li	s5,9
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001d3a:	54f1                	li	s1,-4
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001d3c:	008a17b3          	sll	a5,s4,s0
 8001d40:	0137f7b3          	and	a5,a5,s3
 8001d44:	0087d7b3          	srl	a5,a5,s0
 8001d48:	0ff7f793          	andi	a5,a5,255
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d4c:	02faec63          	bltu	s5,a5,8001d84 <write_hex+0x76>
 8001d50:	03078793          	addi	a5,a5,48
 8001d54:	0ff7f793          	andi	a5,a5,255
    write(fd, &towrite, 1);
 8001d58:	4605                	li	a2,1
 8001d5a:	00f10593          	addi	a1,sp,15
 8001d5e:	854a                	mv	a0,s2
 8001d60:	1471                	addi	s0,s0,-4
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d62:	00f107a3          	sb	a5,15(sp)
    write(fd, &towrite, 1);
 8001d66:	17ffe097          	auipc	ra,0x17ffe
 8001d6a:	7e2080e7          	jalr	2018(ra) # 20000548 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001d6e:	fc9417e3          	bne	s0,s1,8001d3c <write_hex+0x2e>
  }
}
 8001d72:	50b2                	lw	ra,44(sp)
 8001d74:	5422                	lw	s0,40(sp)
 8001d76:	5492                	lw	s1,36(sp)
 8001d78:	5902                	lw	s2,32(sp)
 8001d7a:	49f2                	lw	s3,28(sp)
 8001d7c:	4a62                	lw	s4,24(sp)
 8001d7e:	4ad2                	lw	s5,20(sp)
 8001d80:	6145                	addi	sp,sp,48
 8001d82:	8082                	ret
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d84:	03778793          	addi	a5,a5,55
 8001d88:	b7f1                	j	8001d54 <write_hex+0x46>

08001d8a <get_timer_value>:
}


uint32_t mtime_hi(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001d8a:	d10007b7          	lui	a5,0xd1000
 8001d8e:	43d8                	lw	a4,4(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME);
 8001d90:	4388                	lw	a0,0(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001d92:	43cc                	lw	a1,4(a5)
uint64_t get_timer_value(void)
{
  while (1) {
    uint32_t hi = mtime_hi();
    uint32_t lo = mtime_lo();
    if (hi == mtime_hi())
 8001d94:	fee59de3          	bne	a1,a4,8001d8e <get_timer_value+0x4>
      return ((uint64_t)hi << 32) | lo;
  }
}
 8001d98:	8082                	ret

08001d9a <eclic_init>:
{

  typedef volatile uint32_t vuint32_t;

  /* clear cfg register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 8001d9a:	d20007b7          	lui	a5,0xd2000
 8001d9e:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ff8000>

  /* clear minthresh register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 8001da2:	000785a3          	sb	zero,11(a5)

  /* clear all IP/IE/ATTR/CTRL bits for all interrupt sources */
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 8001da6:	0512                	slli	a0,a0,0x4
 8001da8:	d20017b7          	lui	a5,0xd2001
 8001dac:	953e                	add	a0,a0,a5

  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001dae:	00a7e363          	bltu	a5,a0,8001db4 <eclic_init+0x1a>
    *ptr = 0;
  }
}
 8001db2:	8082                	ret
    *ptr = 0;
 8001db4:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ff9000>
  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001db8:	07c1                	addi	a5,a5,16
 8001dba:	bfd5                	j	8001dae <eclic_init+0x14>

08001dbc <eclic_enable_interrupt>:

void eclic_enable_interrupt (uint32_t source) {
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8001dbc:	d20017b7          	lui	a5,0xd2001
 8001dc0:	0785                	addi	a5,a5,1
 8001dc2:	050a                	slli	a0,a0,0x2
 8001dc4:	953e                	add	a0,a0,a5
 8001dc6:	4785                	li	a5,1
 8001dc8:	00f50023          	sb	a5,0(a0)
}
 8001dcc:	8082                	ret

08001dce <eclic_set_nlbits>:
void eclic_set_cliccfg (uint8_t cliccfg){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
}

uint8_t eclic_get_cliccfg (void){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001dce:	d2000737          	lui	a4,0xd2000
 8001dd2:	00074783          	lbu	a5,0(a4) # d2000000 <_sp+0xb1ff8000>
}

/* sets nlbits */
void eclic_set_nlbits(uint8_t nlbits) {
  /* shift nlbits to correct position */
  uint8_t nlbits_shifted = nlbits << ECLIC_CFG_NLBITS_LSB;
 8001dd6:	0506                	slli	a0,a0,0x1

  /* read the current cliccfg */ 
  uint8_t old_cliccfg = eclic_get_cliccfg();
  uint8_t new_cliccfg = (old_cliccfg & (~ECLIC_CFG_NLBITS_MASK)) | (ECLIC_CFG_NLBITS_MASK & nlbits_shifted); 
 8001dd8:	8979                	andi	a0,a0,30
 8001dda:	0e17f793          	andi	a5,a5,225
 8001dde:	8d5d                	or	a0,a0,a5
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
 8001de0:	00a70023          	sb	a0,0(a4)

  eclic_set_cliccfg(new_cliccfg);
}
 8001de4:	8082                	ret

08001de6 <eclic_get_nlbits>:
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001de6:	d20007b7          	lui	a5,0xd2000
 8001dea:	0007c503          	lbu	a0,0(a5) # d2000000 <_sp+0xb1ff8000>

/* get nlbits */
uint8_t eclic_get_nlbits(void) {
  /* extract nlbits */
  uint8_t nlbits = eclic_get_cliccfg();
  nlbits = (nlbits & ECLIC_CFG_NLBITS_MASK) >> ECLIC_CFG_NLBITS_LSB;
 8001dee:	8105                	srli	a0,a0,0x1
  return nlbits;
}
 8001df0:	893d                	andi	a0,a0,15
 8001df2:	8082                	ret

08001df4 <eclic_set_irq_lvl_abs>:
  uint8_t lvl = intctrl << (8-nlbits);

  return lvl;
}

void eclic_set_irq_lvl_abs(uint32_t source, uint8_t lvl_abs) {
 8001df4:	1141                	addi	sp,sp,-16
 8001df6:	c422                	sw	s0,8(sp)
 8001df8:	c226                	sw	s1,4(sp)
 8001dfa:	c606                	sw	ra,12(sp)
 8001dfc:	842a                	mv	s0,a0
 8001dfe:	84ae                	mv	s1,a1
  /* extract nlbits */
  uint8_t nlbits = eclic_get_nlbits();
 8001e00:	00000097          	auipc	ra,0x0
 8001e04:	fe6080e7          	jalr	-26(ra) # 8001de6 <eclic_get_nlbits>
  if (nlbits > ECLICINTCTLBITS) {
    nlbits = ECLICINTCTLBITS;
  }

  /* shift lvl_abs into correct bit position */
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e08:	4791                	li	a5,4
 8001e0a:	4711                	li	a4,4
 8001e0c:	00a7e363          	bltu	a5,a0,8001e12 <eclic_set_irq_lvl_abs+0x1e>
 8001e10:	872a                	mv	a4,a0
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001e12:	d2001537          	lui	a0,0xd2001
 8001e16:	040a                	slli	s0,s0,0x2
 8001e18:	050d                	addi	a0,a0,3
 8001e1a:	9522                	add	a0,a0,s0
 8001e1c:	00054783          	lbu	a5,0(a0) # d2001000 <_sp+0xb1ff9000>
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e20:	0ff77693          	andi	a3,a4,255
 8001e24:	45a1                	li	a1,8
 
  /* write to clicintctrl */
  uint8_t current_intctrl = eclic_get_intctrl(source);
  /* shift intctrl left to mask off unused bits */
  current_intctrl = current_intctrl << nlbits;
 8001e26:	00e797b3          	sll	a5,a5,a4
  /* shift intctrl into correct bit position */
  current_intctrl = current_intctrl >> nlbits;
 8001e2a:	0ff7f793          	andi	a5,a5,255
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e2e:	8d95                	sub	a1,a1,a3
 8001e30:	00b494b3          	sll	s1,s1,a1
  current_intctrl = current_intctrl >> nlbits;
 8001e34:	40e7d7b3          	sra	a5,a5,a4

  eclic_set_intctrl(source, (current_intctrl | lvl));
 8001e38:	8fc5                	or	a5,a5,s1
 8001e3a:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001e3e:	00f50023          	sb	a5,0(a0)
}
 8001e42:	40b2                	lw	ra,12(sp)
 8001e44:	4422                	lw	s0,8(sp)
 8001e46:	4492                	lw	s1,4(sp)
 8001e48:	0141                	addi	sp,sp,16
 8001e4a:	8082                	ret

08001e4c <eclic_set_irq_priority>:

  return lvl_abs;
}

/* sets an interrupt priority based encoding of nlbits and ECLICINTCTLBITS */
uint8_t eclic_set_irq_priority(uint32_t source, uint8_t priority) {
 8001e4c:	1101                	addi	sp,sp,-32
 8001e4e:	cc22                	sw	s0,24(sp)
 8001e50:	c62e                	sw	a1,12(sp)
 8001e52:	ce06                	sw	ra,28(sp)
 8001e54:	842a                	mv	s0,a0
    /* extract nlbits */
    uint8_t nlbits = eclic_get_nlbits();
 8001e56:	00000097          	auipc	ra,0x0
 8001e5a:	f90080e7          	jalr	-112(ra) # 8001de6 <eclic_get_nlbits>
    if (nlbits >= ECLICINTCTLBITS) {
 8001e5e:	478d                	li	a5,3
        nlbits = ECLICINTCTLBITS;
        return 0;
 8001e60:	4581                	li	a1,0
    if (nlbits >= ECLICINTCTLBITS) {
 8001e62:	02a7e963          	bltu	a5,a0,8001e94 <eclic_set_irq_priority+0x48>
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001e66:	d2001737          	lui	a4,0xd2001
 8001e6a:	040a                	slli	s0,s0,0x2
 8001e6c:	070d                	addi	a4,a4,3
 8001e6e:	9722                	add	a4,a4,s0
 8001e70:	00074783          	lbu	a5,0(a4) # d2001000 <_sp+0xb1ff9000>
    }

    /* shift priority into correct bit position */
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e74:	45b2                	lw	a1,12(sp)

    /* write to eclicintctrl */
    uint8_t current_intctrl = eclic_get_intctrl(source);
    /* shift intctrl right to mask off unused bits */
    current_intctrl = current_intctrl >> (8-nlbits);
 8001e76:	46a1                	li	a3,8
 8001e78:	40a68533          	sub	a0,a3,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e7c:	0592                	slli	a1,a1,0x4
    current_intctrl = current_intctrl >> (8-nlbits);
 8001e7e:	40a7d7b3          	sra	a5,a5,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e82:	0ff5f593          	andi	a1,a1,255
    /* shift intctrl into correct bit position */
    current_intctrl = current_intctrl << (8-nlbits);
 8001e86:	00a797b3          	sll	a5,a5,a0

    eclic_set_intctrl(source, (current_intctrl | priority));
 8001e8a:	8fcd                	or	a5,a5,a1
 8001e8c:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001e90:	00f70023          	sb	a5,0(a4)

    return priority;
}
 8001e94:	40f2                	lw	ra,28(sp)
 8001e96:	4462                	lw	s0,24(sp)
 8001e98:	852e                	mv	a0,a1
 8001e9a:	6105                	addi	sp,sp,32
 8001e9c:	8082                	ret

08001e9e <eclic_mode_enable>:
  uint32_t mtvec_value = read_csr(CSR_MTVEC);
  mtvec_value = mtvec_value & 0xFFFFFFC0;
  mtvec_value = mtvec_value | 0x00000003;
  write_csr(CSR_MTVEC,mtvec_value);
#elif defined ( __GNUC__ )
  uint32_t mtvec_value = read_csr(mtvec);
 8001e9e:	305027f3          	csrr	a5,mtvec
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 8001ea2:	fc07f793          	andi	a5,a5,-64
  mtvec_value = mtvec_value | 0x00000003;
 8001ea6:	0037e793          	ori	a5,a5,3
  write_csr(mtvec,mtvec_value);
 8001eaa:	30579073          	csrw	mtvec,a5
#endif

}
 8001eae:	8082                	ret

08001eb0 <handle_nmi>:
#include "riscv_encoding.h"
#include "n200_func.h"

__attribute__((weak)) uintptr_t handle_nmi()
{
  write(1, "nmi\n", 5);
 8001eb0:	080005b7          	lui	a1,0x8000
{
 8001eb4:	1141                	addi	sp,sp,-16
  write(1, "nmi\n", 5);
 8001eb6:	4615                	li	a2,5
 8001eb8:	2b458593          	addi	a1,a1,692 # 80002b4 <enable_mcycle_minstret+0x68>
 8001ebc:	4505                	li	a0,1
{
 8001ebe:	c606                	sw	ra,12(sp)
  write(1, "nmi\n", 5);
 8001ec0:	17ffe097          	auipc	ra,0x17ffe
 8001ec4:	688080e7          	jalr	1672(ra) # 20000548 <write>
  _exit(1);
 8001ec8:	4505                	li	a0,1
 8001eca:	00000097          	auipc	ra,0x0
 8001ece:	dca080e7          	jalr	-566(ra) # 8001c94 <_exit>

08001ed2 <handle_trap>:
  return 0;
}


__attribute__((weak)) uintptr_t handle_trap(uintptr_t mcause, uintptr_t sp)
{
 8001ed2:	1141                	addi	sp,sp,-16
  if((mcause & 0xFFF) == 0xFFF) {
 8001ed4:	fff54793          	not	a5,a0
{
 8001ed8:	c422                	sw	s0,8(sp)
 8001eda:	c606                	sw	ra,12(sp)
  if((mcause & 0xFFF) == 0xFFF) {
 8001edc:	01479713          	slli	a4,a5,0x14
{
 8001ee0:	842a                	mv	s0,a0
  if((mcause & 0xFFF) == 0xFFF) {
 8001ee2:	e709                	bnez	a4,8001eec <handle_trap+0x1a>
      handle_nmi();
 8001ee4:	00000097          	auipc	ra,0x0
 8001ee8:	fcc080e7          	jalr	-52(ra) # 8001eb0 <handle_nmi>
  }
  write(1, "trap\n", 5);
 8001eec:	080005b7          	lui	a1,0x8000
 8001ef0:	4615                	li	a2,5
 8001ef2:	2bc58593          	addi	a1,a1,700 # 80002bc <enable_mcycle_minstret+0x70>
 8001ef6:	4505                	li	a0,1
 8001ef8:	17ffe097          	auipc	ra,0x17ffe
 8001efc:	650080e7          	jalr	1616(ra) # 20000548 <write>
  //printf("In trap handler, the mcause is %d\n", mcause);
  //printf("In trap handler, the mepc is 0x%x\n", read_csr(mepc));
  //printf("In trap handler, the mtval is 0x%x\n", read_csr(mbadaddr));
  _exit(mcause);
 8001f00:	8522                	mv	a0,s0
 8001f02:	00000097          	auipc	ra,0x0
 8001f06:	d92080e7          	jalr	-622(ra) # 8001c94 <_exit>

08001f0a <_init>:
#include "debugger.h"
#endif

extern uint32_t disable_mcycle_minstret();
void _init()
{
 8001f0a:	1141                	addi	sp,sp,-16
 8001f0c:	c606                	sw	ra,12(sp)
	SystemInit();
 8001f0e:	00000097          	auipc	ra,0x0
 8001f12:	ba0080e7          	jalr	-1120(ra) # 8001aae <SystemInit>

	//ECLIC init
	eclic_init(ECLIC_NUM_INTERRUPTS);
 8001f16:	05700513          	li	a0,87
 8001f1a:	00000097          	auipc	ra,0x0
 8001f1e:	e80080e7          	jalr	-384(ra) # 8001d9a <eclic_init>
	eclic_mode_enable();
 8001f22:	00000097          	auipc	ra,0x0
 8001f26:	f7c080e7          	jalr	-132(ra) # 8001e9e <eclic_mode_enable>
#ifdef USE_SOFTWARE_DEBUGGER
	dbg_init();
#endif
	

}
 8001f2a:	40b2                	lw	ra,12(sp)
 8001f2c:	0141                	addi	sp,sp,16
	disable_mcycle_minstret();
 8001f2e:	ffffe317          	auipc	t1,0xffffe
 8001f32:	31830067          	jr	792(t1) # 8000246 <disable_mcycle_minstret>

08001f36 <_fini>:

void _fini()
{
}
 8001f36:	8082                	ret

08001f38 <dma_config>:
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_1, TIMER_OC_SHADOW_DISABLE);

	timer_auto_reload_shadow_enable(TIMER1);
}

void dma_config(void){
 8001f38:	7179                	addi	sp,sp,-48
    /* DMA_channel configuration */
    /* initialize DMA mode */
    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH6);
 8001f3a:	4599                	li	a1,6
 8001f3c:	40020537          	lui	a0,0x40020
void dma_config(void){
 8001f40:	d606                	sw	ra,44(sp)
    dma_deinit(DMA0, DMA_CH6);
 8001f42:	fffff097          	auipc	ra,0xfffff
 8001f46:	da0080e7          	jalr	-608(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)&dataBuffer;
 8001f4a:	200017b7          	lui	a5,0x20001
 8001f4e:	df878793          	addi	a5,a5,-520 # 20000df8 <dataBuffer>
 8001f52:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = 14;  //fourteen memory adresses for all datapoints 0x3B-0x48
    dma_init_struct.periph_addr = (uint32_t)I2C0_DATA_ADDRESS; //DMA0 adress
 8001f54:	400057b7          	lui	a5,0x40005
 8001f58:	41078793          	addi	a5,a5,1040 # 40005410 <_sp+0x1fffd410>
 8001f5c:	c23e                	sw	a5,4(sp)
    dma_init_struct.number = 14;  //fourteen memory adresses for all datapoints 0x3B-0x48
 8001f5e:	47b9                	li	a5,14
 8001f60:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8001f62:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f64:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8001f66:	cc3e                	sw	a5,24(sp)
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f68:	4599                	li	a1,6
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8001f6a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f6e:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8001f72:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8001f76:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8001f78:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8001f7a:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f7e:	fffff097          	auipc	ra,0xfffff
 8001f82:	da8080e7          	jalr	-600(ra) # 8000d26 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH6);
 8001f86:	4599                	li	a1,6
 8001f88:	40020537          	lui	a0,0x40020
 8001f8c:	fffff097          	auipc	ra,0xfffff
 8001f90:	e26080e7          	jalr	-474(ra) # 8000db2 <dma_circulation_disable>

    dma_interrupt_enable(DMA0, DMA_CH6, DMA_FLAG_FTF);
 8001f94:	4609                	li	a2,2
 8001f96:	4599                	li	a1,6
 8001f98:	40020537          	lui	a0,0x40020
 8001f9c:	fffff097          	auipc	ra,0xfffff
 8001fa0:	ee8080e7          	jalr	-280(ra) # 8000e84 <dma_interrupt_enable>
    /* enable DMA channel5 */
    dma_channel_enable(DMA0, DMA_CH6);
 8001fa4:	4599                	li	a1,6
 8001fa6:	40020537          	lui	a0,0x40020
 8001faa:	fffff097          	auipc	ra,0xfffff
 8001fae:	e2e080e7          	jalr	-466(ra) # 8000dd8 <dma_channel_enable>
}
 8001fb2:	50b2                	lw	ra,44(sp)
 8001fb4:	6145                	addi	sp,sp,48
 8001fb6:	8082                	ret

08001fb8 <config_clic_irqs>:

void config_clic_irqs (void){
 8001fb8:	1141                	addi	sp,sp,-16
 8001fba:	c606                	sw	ra,12(sp)

    eclic_global_interrupt_enable();
 8001fbc:	fffff097          	auipc	ra,0xfffff
 8001fc0:	eec080e7          	jalr	-276(ra) # 8000ea8 <eclic_global_interrupt_enable>
    eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);
 8001fc4:	450d                	li	a0,3
 8001fc6:	fffff097          	auipc	ra,0xfffff
 8001fca:	eee080e7          	jalr	-274(ra) # 8000eb4 <eclic_priority_group_set>
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);

}
 8001fce:	40b2                	lw	ra,12(sp)
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);
 8001fd0:	4605                	li	a2,1
 8001fd2:	4585                	li	a1,1
 8001fd4:	02400513          	li	a0,36
}
 8001fd8:	0141                	addi	sp,sp,16
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);
 8001fda:	fffff317          	auipc	t1,0xfffff
 8001fde:	ee230067          	jr	-286(t1) # 8000ebc <eclic_irq_enable>

08001fe2 <DMA0_Channel6_IRQHandler>:

//uint8_t* pDataBuffer;

void DMA0_Channel6_IRQHandler(void){
    i2c_stop_on_bus(I2C0);
 8001fe2:	40005537          	lui	a0,0x40005
void DMA0_Channel6_IRQHandler(void){
 8001fe6:	1141                	addi	sp,sp,-16
    i2c_stop_on_bus(I2C0);
 8001fe8:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
void DMA0_Channel6_IRQHandler(void){
 8001fec:	c606                	sw	ra,12(sp)
    i2c_stop_on_bus(I2C0);
 8001fee:	fffff097          	auipc	ra,0xfffff
 8001ff2:	142080e7          	jalr	322(ra) # 8001130 <i2c_stop_on_bus>

	if(dma_interrupt_flag_get(DMA0, DMA_CH6, DMA_INT_FLAG_FTF)){ 
 8001ff6:	4609                	li	a2,2
 8001ff8:	4599                	li	a1,6
 8001ffa:	40020537          	lui	a0,0x40020
 8001ffe:	fffff097          	auipc	ra,0xfffff
 8002002:	e0e080e7          	jalr	-498(ra) # 8000e0c <dma_interrupt_flag_get>
 8002006:	c919                	beqz	a0,800201c <DMA0_Channel6_IRQHandler+0x3a>
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
    }

}
 8002008:	40b2                	lw	ra,12(sp)
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
 800200a:	4605                	li	a2,1
 800200c:	4599                	li	a1,6
 800200e:	40020537          	lui	a0,0x40020
}
 8002012:	0141                	addi	sp,sp,16
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
 8002014:	fffff317          	auipc	t1,0xfffff
 8002018:	e6830067          	jr	-408(t1) # 8000e7c <dma_interrupt_flag_clear>
}
 800201c:	40b2                	lw	ra,12(sp)
 800201e:	0141                	addi	sp,sp,16
 8002020:	8082                	ret

08002022 <eclic_mtip_handler>:
       case USART0_IRQn  : pu0tbeisr=pISR;
   }
}

__attribute__( ( interrupt ) )
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8002022:	7139                	addi	sp,sp,-64
 8002024:	cc3e                	sw	a5,24(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8002026:	200007b7          	lui	a5,0x20000
 800202a:	5087a783          	lw	a5,1288(a5) # 20000508 <__bss_start>
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 800202e:	de06                	sw	ra,60(sp)
 8002030:	dc16                	sw	t0,56(sp)
 8002032:	da1a                	sw	t1,52(sp)
 8002034:	d81e                	sw	t2,48(sp)
 8002036:	d62a                	sw	a0,44(sp)
 8002038:	d42e                	sw	a1,40(sp)
 800203a:	d232                	sw	a2,36(sp)
 800203c:	d036                	sw	a3,32(sp)
 800203e:	ce3a                	sw	a4,28(sp)
 8002040:	ca42                	sw	a6,20(sp)
 8002042:	c846                	sw	a7,16(sp)
 8002044:	c672                	sw	t3,12(sp)
 8002046:	c476                	sw	t4,8(sp)
 8002048:	c27a                	sw	t5,4(sp)
 800204a:	c07e                	sw	t6,0(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 800204c:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 800204e:	50f2                	lw	ra,60(sp)
 8002050:	52e2                	lw	t0,56(sp)
 8002052:	5352                	lw	t1,52(sp)
 8002054:	53c2                	lw	t2,48(sp)
 8002056:	5532                	lw	a0,44(sp)
 8002058:	55a2                	lw	a1,40(sp)
 800205a:	5612                	lw	a2,36(sp)
 800205c:	5682                	lw	a3,32(sp)
 800205e:	4772                	lw	a4,28(sp)
 8002060:	47e2                	lw	a5,24(sp)
 8002062:	4852                	lw	a6,20(sp)
 8002064:	48c2                	lw	a7,16(sp)
 8002066:	4e32                	lw	t3,12(sp)
 8002068:	4ea2                	lw	t4,8(sp)
 800206a:	4f12                	lw	t5,4(sp)
 800206c:	4f82                	lw	t6,0(sp)
 800206e:	6121                	addi	sp,sp,64
 8002070:	30200073          	mret

08002074 <USART0_IRQHandler>:

__attribute__( ( interrupt ) )                  // !!! ALL USART0 INT GOES HERE !!!
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8002074:	7139                	addi	sp,sp,-64
 8002076:	cc3e                	sw	a5,24(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8002078:	200007b7          	lui	a5,0x20000
 800207c:	50c7a783          	lw	a5,1292(a5) # 2000050c <pu0tbeisr>
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8002080:	de06                	sw	ra,60(sp)
 8002082:	dc16                	sw	t0,56(sp)
 8002084:	da1a                	sw	t1,52(sp)
 8002086:	d81e                	sw	t2,48(sp)
 8002088:	d62a                	sw	a0,44(sp)
 800208a:	d42e                	sw	a1,40(sp)
 800208c:	d232                	sw	a2,36(sp)
 800208e:	d036                	sw	a3,32(sp)
 8002090:	ce3a                	sw	a4,28(sp)
 8002092:	ca42                	sw	a6,20(sp)
 8002094:	c846                	sw	a7,16(sp)
 8002096:	c672                	sw	t3,12(sp)
 8002098:	c476                	sw	t4,8(sp)
 800209a:	c27a                	sw	t5,4(sp)
 800209c:	c07e                	sw	t6,0(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 800209e:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 80020a0:	50f2                	lw	ra,60(sp)
 80020a2:	52e2                	lw	t0,56(sp)
 80020a4:	5352                	lw	t1,52(sp)
 80020a6:	53c2                	lw	t2,48(sp)
 80020a8:	5532                	lw	a0,44(sp)
 80020aa:	55a2                	lw	a1,40(sp)
 80020ac:	5612                	lw	a2,36(sp)
 80020ae:	5682                	lw	a3,32(sp)
 80020b0:	4772                	lw	a4,28(sp)
 80020b2:	47e2                	lw	a5,24(sp)
 80020b4:	4852                	lw	a6,20(sp)
 80020b6:	48c2                	lw	a7,16(sp)
 80020b8:	4e32                	lw	t3,12(sp)
 80020ba:	4ea2                	lw	t4,8(sp)
 80020bc:	4f12                	lw	t5,4(sp)
 80020be:	4f82                	lw	t6,0(sp)
 80020c0:	6121                	addi	sp,sp,64
 80020c2:	30200073          	mret

080020c6 <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80020c6:	00354783          	lbu	a5,3(a0) # 40020003 <_sp+0x20018003>
 80020ca:	00254703          	lbu	a4,2(a0)
 80020ce:	07a2                	slli	a5,a5,0x8
 80020d0:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[1];
 80020d2:	00154703          	lbu	a4,1(a0)
 80020d6:	07a2                	slli	a5,a5,0x8
	rv = rv << 8 | ptr[0];
 80020d8:	00054503          	lbu	a0,0(a0)
	rv = rv << 8 | ptr[1];
 80020dc:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[0];
 80020de:	07a2                	slli	a5,a5,0x8
	return rv;
}
 80020e0:	8d5d                	or	a0,a0,a5
 80020e2:	8082                	ret

080020e4 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80020e4:	0085d793          	srli	a5,a1,0x8
 80020e8:	00b50023          	sb	a1,0(a0)
	*ptr++ = (BYTE)val; val >>= 8;
 80020ec:	00f500a3          	sb	a5,1(a0)
 80020f0:	0105d793          	srli	a5,a1,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 80020f4:	81e1                	srli	a1,a1,0x18
 80020f6:	00f50123          	sb	a5,2(a0)
	*ptr++ = (BYTE)val;
 80020fa:	00b501a3          	sb	a1,3(a0)
}
 80020fe:	8082                	ret

08002100 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002100:	87aa                	mv	a5,a0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;
 8002102:	962a                	add	a2,a2,a0

	do {
		r = *d++ - *s++;
 8002104:	0785                	addi	a5,a5,1
 8002106:	0585                	addi	a1,a1,1
 8002108:	fff7c503          	lbu	a0,-1(a5)
 800210c:	fff5c703          	lbu	a4,-1(a1)
 8002110:	8d19                	sub	a0,a0,a4
	} while (--cnt && r == 0);
 8002112:	00c78363          	beq	a5,a2,8002118 <mem_cmp+0x18>
 8002116:	d57d                	beqz	a0,8002104 <mem_cmp+0x4>

	return r;
}
 8002118:	8082                	ret

0800211a <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800211a:	4958                	lw	a4,20(a0)
	clst -= 2;		/* Cluster number is origin from 2 */
 800211c:	15f9                	addi	a1,a1,-2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800211e:	1779                	addi	a4,a4,-2
 8002120:	00e5f963          	bgeu	a1,a4,8002132 <clst2sect+0x18>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002124:	00a55783          	lhu	a5,10(a0)
 8002128:	5508                	lw	a0,40(a0)
 800212a:	02b787b3          	mul	a5,a5,a1
 800212e:	953e                	add	a0,a0,a5
 8002130:	8082                	ret
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002132:	4501                	li	a0,0
}
 8002134:	8082                	ret

08002136 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002136:	411c                	lw	a5,0(a0)
	if (!tp) return vol;	/* Invalid path name? */
 8002138:	c38d                	beqz	a5,800215a <get_ldnumber+0x24>
 800213a:	873e                	mv	a4,a5
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800213c:	02000593          	li	a1,32
 8002140:	03a00613          	li	a2,58
 8002144:	0705                	addi	a4,a4,1
 8002146:	fff74683          	lbu	a3,-1(a4)
 800214a:	02d5f263          	bgeu	a1,a3,800216e <get_ldnumber+0x38>
 800214e:	fec69be3          	bne	a3,a2,8002144 <get_ldnumber+0xe>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002152:	00278693          	addi	a3,a5,2
 8002156:	00d70463          	beq	a4,a3,800215e <get_ldnumber+0x28>
	if (!tp) return vol;	/* Invalid path name? */
 800215a:	57fd                	li	a5,-1
 800215c:	a811                	j	8002170 <get_ldnumber+0x3a>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800215e:	0007c603          	lbu	a2,0(a5)
 8002162:	03000693          	li	a3,48
	if (!tp) return vol;	/* Invalid path name? */
 8002166:	57fd                	li	a5,-1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002168:	00d61463          	bne	a2,a3,8002170 <get_ldnumber+0x3a>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 800216c:	c118                	sw	a4,0(a0)
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800216e:	4781                	li	a5,0
}
 8002170:	853e                	mv	a0,a5
 8002172:	8082                	ret

08002174 <validate>:
)
{
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002174:	ed01                	bnez	a0,800218c <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002176:	4781                	li	a5,0
	FRESULT res = FR_INVALID_OBJECT;
 8002178:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800217a:	c19c                	sw	a5,0(a1)
	return res;
}
 800217c:	8082                	ret
	FRESULT res = FR_INVALID_OBJECT;
 800217e:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002180:	4781                	li	a5,0
}
 8002182:	40f2                	lw	ra,28(sp)
 8002184:	4462                	lw	s0,24(sp)
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002186:	c19c                	sw	a5,0(a1)
}
 8002188:	6105                	addi	sp,sp,32
 800218a:	8082                	ret
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800218c:	411c                	lw	a5,0(a0)
{
 800218e:	1101                	addi	sp,sp,-32
 8002190:	cc22                	sw	s0,24(sp)
 8002192:	ce06                	sw	ra,28(sp)
 8002194:	842a                	mv	s0,a0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002196:	d7e5                	beqz	a5,800217e <validate+0xa>
 8002198:	0007c703          	lbu	a4,0(a5)
 800219c:	d36d                	beqz	a4,800217e <validate+0xa>
 800219e:	00455683          	lhu	a3,4(a0)
 80021a2:	0067d703          	lhu	a4,6(a5)
 80021a6:	fce69ce3          	bne	a3,a4,800217e <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80021aa:	0017c503          	lbu	a0,1(a5)
 80021ae:	c62e                	sw	a1,12(sp)
 80021b0:	00002097          	auipc	ra,0x2
 80021b4:	9e0080e7          	jalr	-1568(ra) # 8003b90 <disk_status>
 80021b8:	8905                	andi	a0,a0,1
 80021ba:	45b2                	lw	a1,12(sp)
 80021bc:	f169                	bnez	a0,800217e <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80021be:	401c                	lw	a5,0(s0)
 80021c0:	b7c9                	j	8002182 <validate+0xe>

080021c2 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 80021c2:	4781                	li	a5,0
			*d++ = *s++;
 80021c4:	00f58733          	add	a4,a1,a5
 80021c8:	00074683          	lbu	a3,0(a4)
 80021cc:	00f50733          	add	a4,a0,a5
 80021d0:	0785                	addi	a5,a5,1
 80021d2:	00d70023          	sb	a3,0(a4)
		} while (--cnt);
 80021d6:	fef617e3          	bne	a2,a5,80021c4 <mem_cpy.part.0+0x2>
}
 80021da:	8082                	ret

080021dc <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80021dc:	01b5c783          	lbu	a5,27(a1)
 80021e0:	01a5c703          	lbu	a4,26(a1)
 80021e4:	07a2                	slli	a5,a5,0x8
	cl = ld_word(dir + DIR_FstClusLO);
 80021e6:	8fd9                	or	a5,a5,a4
	if (fs->fs_type == FS_FAT32) {
 80021e8:	470d                	li	a4,3
 80021ea:	00e51a63          	bne	a0,a4,80021fe <ld_clust.isra.1+0x22>
	rv = rv << 8 | ptr[0];
 80021ee:	0155c703          	lbu	a4,21(a1)
 80021f2:	0145c683          	lbu	a3,20(a1)
 80021f6:	0722                	slli	a4,a4,0x8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80021f8:	8f55                	or	a4,a4,a3
 80021fa:	0742                	slli	a4,a4,0x10
 80021fc:	8fd9                	or	a5,a5,a4
}
 80021fe:	853e                	mv	a0,a5
 8002200:	8082                	ret

08002202 <sync_window.part.3>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002202:	1141                	addi	sp,sp,-16
 8002204:	c422                	sw	s0,8(sp)
 8002206:	c226                	sw	s1,4(sp)
 8002208:	c04a                	sw	s2,0(sp)
 800220a:	c606                	sw	ra,12(sp)
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800220c:	03050913          	addi	s2,a0,48
 8002210:	5550                	lw	a2,44(a0)
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002212:	842a                	mv	s0,a0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002214:	00154503          	lbu	a0,1(a0)
 8002218:	4685                	li	a3,1
 800221a:	85ca                	mv	a1,s2
 800221c:	00002097          	auipc	ra,0x2
 8002220:	a2a080e7          	jalr	-1494(ra) # 8003c46 <disk_write>
			res = FR_DISK_ERR;
 8002224:	4485                	li	s1,1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002226:	e90d                	bnez	a0,8002258 <sync_window.part.3+0x56>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002228:	5450                	lw	a2,44(s0)
 800222a:	501c                	lw	a5,32(s0)
 800222c:	4c18                	lw	a4,24(s0)
			fs->wflag = 0;	/* Clear window dirty flag */
 800222e:	000401a3          	sb	zero,3(s0)
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002232:	40f607b3          	sub	a5,a2,a5
 8002236:	84aa                	mv	s1,a0
 8002238:	02e7f063          	bgeu	a5,a4,8002258 <sync_window.part.3+0x56>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800223c:	00244683          	lbu	a3,2(s0)
 8002240:	4789                	li	a5,2
 8002242:	00f69b63          	bne	a3,a5,8002258 <sync_window.part.3+0x56>
 8002246:	00144503          	lbu	a0,1(s0)
 800224a:	4685                	li	a3,1
 800224c:	963a                	add	a2,a2,a4
 800224e:	85ca                	mv	a1,s2
 8002250:	00002097          	auipc	ra,0x2
 8002254:	9f6080e7          	jalr	-1546(ra) # 8003c46 <disk_write>
}
 8002258:	40b2                	lw	ra,12(sp)
 800225a:	4422                	lw	s0,8(sp)
 800225c:	8526                	mv	a0,s1
 800225e:	4902                	lw	s2,0(sp)
 8002260:	4492                	lw	s1,4(sp)
 8002262:	0141                	addi	sp,sp,16
 8002264:	8082                	ret

08002266 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002266:	555c                	lw	a5,44(a0)
 8002268:	04b78463          	beq	a5,a1,80022b0 <move_window+0x4a>
{
 800226c:	1141                	addi	sp,sp,-16
 800226e:	c422                	sw	s0,8(sp)
 8002270:	c226                	sw	s1,4(sp)
 8002272:	c606                	sw	ra,12(sp)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002274:	00354783          	lbu	a5,3(a0)
 8002278:	842a                	mv	s0,a0
 800227a:	84ae                	mv	s1,a1
 800227c:	e385                	bnez	a5,800229c <move_window+0x36>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800227e:	00144503          	lbu	a0,1(s0)
 8002282:	4685                	li	a3,1
 8002284:	8626                	mv	a2,s1
 8002286:	03040593          	addi	a1,s0,48
 800228a:	00002097          	auipc	ra,0x2
 800228e:	91a080e7          	jalr	-1766(ra) # 8003ba4 <disk_read>
 8002292:	c119                	beqz	a0,8002298 <move_window+0x32>
				res = FR_DISK_ERR;
 8002294:	4505                	li	a0,1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8002296:	54fd                	li	s1,-1
			fs->winsect = sector;
 8002298:	d444                	sw	s1,44(s0)
	return res;
 800229a:	a031                	j	80022a6 <move_window+0x40>
 800229c:	00000097          	auipc	ra,0x0
 80022a0:	f66080e7          	jalr	-154(ra) # 8002202 <sync_window.part.3>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80022a4:	dd69                	beqz	a0,800227e <move_window+0x18>
}
 80022a6:	40b2                	lw	ra,12(sp)
 80022a8:	4422                	lw	s0,8(sp)
 80022aa:	4492                	lw	s1,4(sp)
 80022ac:	0141                	addi	sp,sp,16
 80022ae:	8082                	ret
	FRESULT res = FR_OK;
 80022b0:	4501                	li	a0,0
}
 80022b2:	8082                	ret

080022b4 <check_fs>:
{
 80022b4:	1141                	addi	sp,sp,-16
 80022b6:	c422                	sw	s0,8(sp)
 80022b8:	c606                	sw	ra,12(sp)
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80022ba:	57fd                	li	a5,-1
 80022bc:	d55c                	sw	a5,44(a0)
 80022be:	000501a3          	sb	zero,3(a0)
{
 80022c2:	842a                	mv	s0,a0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80022c4:	00000097          	auipc	ra,0x0
 80022c8:	fa2080e7          	jalr	-94(ra) # 8002266 <move_window>
 80022cc:	4791                	li	a5,4
 80022ce:	e53d                	bnez	a0,800233c <check_fs+0x88>
	rv = rv << 8 | ptr[0];
 80022d0:	22f44703          	lbu	a4,559(s0)
 80022d4:	22e44783          	lbu	a5,558(s0)
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80022d8:	76ed                	lui	a3,0xffffb
	rv = rv << 8 | ptr[0];
 80022da:	0722                	slli	a4,a4,0x8
 80022dc:	8f5d                	or	a4,a4,a5
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80022de:	0742                	slli	a4,a4,0x10
 80022e0:	8741                	srai	a4,a4,0x10
 80022e2:	a5568693          	addi	a3,a3,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80022e6:	478d                	li	a5,3
 80022e8:	04d71a63          	bne	a4,a3,800233c <check_fs+0x88>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80022ec:	03044783          	lbu	a5,48(s0)
 80022f0:	0eb00713          	li	a4,235
 80022f4:	00e78963          	beq	a5,a4,8002306 <check_fs+0x52>
 80022f8:	07e1                	addi	a5,a5,24
 80022fa:	0ff7f713          	andi	a4,a5,255
 80022fe:	4685                	li	a3,1
	return 2;	/* Valid BS but not FAT */
 8002300:	4789                	li	a5,2
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002302:	02e6ed63          	bltu	a3,a4,800233c <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002306:	080005b7          	lui	a1,0x8000
 800230a:	460d                	li	a2,3
 800230c:	2c458593          	addi	a1,a1,708 # 80002c4 <enable_mcycle_minstret+0x78>
 8002310:	06640513          	addi	a0,s0,102
 8002314:	00000097          	auipc	ra,0x0
 8002318:	dec080e7          	jalr	-532(ra) # 8002100 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800231c:	4781                	li	a5,0
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800231e:	cd19                	beqz	a0,800233c <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002320:	080005b7          	lui	a1,0x8000
 8002324:	4615                	li	a2,5
 8002326:	2c858593          	addi	a1,a1,712 # 80002c8 <enable_mcycle_minstret+0x7c>
 800232a:	08240513          	addi	a0,s0,130
 800232e:	00000097          	auipc	ra,0x0
 8002332:	dd2080e7          	jalr	-558(ra) # 8002100 <mem_cmp>
 8002336:	00a037b3          	snez	a5,a0
 800233a:	0786                	slli	a5,a5,0x1
}
 800233c:	40b2                	lw	ra,12(sp)
 800233e:	4422                	lw	s0,8(sp)
 8002340:	853e                	mv	a0,a5
 8002342:	0141                	addi	sp,sp,16
 8002344:	8082                	ret

08002346 <find_volume>:
{
 8002346:	7139                	addi	sp,sp,-64
 8002348:	d84a                	sw	s2,48(sp)
 800234a:	de06                	sw	ra,60(sp)
 800234c:	dc22                	sw	s0,56(sp)
 800234e:	da26                	sw	s1,52(sp)
 8002350:	d64e                	sw	s3,44(sp)
 8002352:	d452                	sw	s4,40(sp)
 8002354:	d256                	sw	s5,36(sp)
 8002356:	d05a                	sw	s6,32(sp)
	*rfs = 0;
 8002358:	0005a023          	sw	zero,0(a1)
{
 800235c:	8932                	mv	s2,a2
	*rfs = 0;
 800235e:	c62e                	sw	a1,12(sp)
	vol = get_ldnumber(path);
 8002360:	00000097          	auipc	ra,0x0
 8002364:	dd6080e7          	jalr	-554(ra) # 8002136 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002368:	47ad                	li	a5,11
 800236a:	04054263          	bltz	a0,80023ae <find_volume+0x68>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800236e:	20000737          	lui	a4,0x20000
 8002372:	00251793          	slli	a5,a0,0x2
 8002376:	51070713          	addi	a4,a4,1296 # 20000510 <FatFs>
 800237a:	97ba                	add	a5,a5,a4
 800237c:	4380                	lw	s0,0(a5)
 800237e:	84aa                	mv	s1,a0
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002380:	47b1                	li	a5,12
 8002382:	c415                	beqz	s0,80023ae <find_volume+0x68>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002384:	45b2                	lw	a1,12(sp)
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002386:	0fe97913          	andi	s2,s2,254
	*rfs = fs;							/* Return pointer to the filesystem object */
 800238a:	c180                	sw	s0,0(a1)
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800238c:	00044783          	lbu	a5,0(s0)
 8002390:	cb95                	beqz	a5,80023c4 <find_volume+0x7e>
		stat = disk_status(fs->pdrv);
 8002392:	00144503          	lbu	a0,1(s0)
 8002396:	00001097          	auipc	ra,0x1
 800239a:	7fa080e7          	jalr	2042(ra) # 8003b90 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800239e:	00157793          	andi	a5,a0,1
 80023a2:	e38d                	bnez	a5,80023c4 <find_volume+0x7e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80023a4:	00090563          	beqz	s2,80023ae <find_volume+0x68>
 80023a8:	8911                	andi	a0,a0,4
 80023aa:	c111                	beqz	a0,80023ae <find_volume+0x68>
				return FR_WRITE_PROTECTED;
 80023ac:	47a9                	li	a5,10
}
 80023ae:	50f2                	lw	ra,60(sp)
 80023b0:	5462                	lw	s0,56(sp)
 80023b2:	54d2                	lw	s1,52(sp)
 80023b4:	5942                	lw	s2,48(sp)
 80023b6:	59b2                	lw	s3,44(sp)
 80023b8:	5a22                	lw	s4,40(sp)
 80023ba:	5a92                	lw	s5,36(sp)
 80023bc:	5b02                	lw	s6,32(sp)
 80023be:	853e                	mv	a0,a5
 80023c0:	6121                	addi	sp,sp,64
 80023c2:	8082                	ret
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80023c4:	0ff4f513          	andi	a0,s1,255
	fs->fs_type = 0;					/* Clear the filesystem object */
 80023c8:	00040023          	sb	zero,0(s0)
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80023cc:	00a400a3          	sb	a0,1(s0)
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80023d0:	00001097          	auipc	ra,0x1
 80023d4:	544080e7          	jalr	1348(ra) # 8003914 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80023d8:	00157713          	andi	a4,a0,1
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80023dc:	478d                	li	a5,3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80023de:	fb61                	bnez	a4,80023ae <find_volume+0x68>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80023e0:	00090463          	beqz	s2,80023e8 <find_volume+0xa2>
 80023e4:	8911                	andi	a0,a0,4
 80023e6:	f179                	bnez	a0,80023ac <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80023e8:	4581                	li	a1,0
 80023ea:	8522                	mv	a0,s0
 80023ec:	00000097          	auipc	ra,0x0
 80023f0:	ec8080e7          	jalr	-312(ra) # 80022b4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80023f4:	4789                	li	a5,2
 80023f6:	04f51f63          	bne	a0,a5,8002454 <find_volume+0x10e>
 80023fa:	0804                	addi	s1,sp,16
 80023fc:	1f640913          	addi	s2,s0,502
 8002400:	23640a13          	addi	s4,s0,566
 8002404:	89a6                	mv	s3,s1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002406:	ffc94783          	lbu	a5,-4(s2)
 800240a:	4501                	li	a0,0
 800240c:	c791                	beqz	a5,8002418 <find_volume+0xd2>
 800240e:	854a                	mv	a0,s2
 8002410:	00000097          	auipc	ra,0x0
 8002414:	cb6080e7          	jalr	-842(ra) # 80020c6 <ld_dword>
 8002418:	00a9a023          	sw	a0,0(s3)
 800241c:	0941                	addi	s2,s2,16
 800241e:	0991                	addi	s3,s3,4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002420:	ff2a13e3          	bne	s4,s2,8002406 <find_volume+0xc0>
 8002424:	01048913          	addi	s2,s1,16
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002428:	4985                	li	s3,1
			bsect = br[i];
 800242a:	0004aa03          	lw	s4,0(s1)
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800242e:	450d                	li	a0,3
 8002430:	000a0a63          	beqz	s4,8002444 <find_volume+0xfe>
 8002434:	85d2                	mv	a1,s4
 8002436:	8522                	mv	a0,s0
 8002438:	00000097          	auipc	ra,0x0
 800243c:	e7c080e7          	jalr	-388(ra) # 80022b4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002440:	02a9f363          	bgeu	s3,a0,8002466 <find_volume+0x120>
 8002444:	0491                	addi	s1,s1,4
 8002446:	fe9912e3          	bne	s2,s1,800242a <find_volume+0xe4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800244a:	4711                	li	a4,4
 800244c:	4785                	li	a5,1
 800244e:	00e51a63          	bne	a0,a4,8002462 <find_volume+0x11c>
 8002452:	bfb1                	j	80023ae <find_volume+0x68>
 8002454:	4711                	li	a4,4
 8002456:	4785                	li	a5,1
 8002458:	f4e50be3          	beq	a0,a4,80023ae <find_volume+0x68>
	bsect = 0;
 800245c:	4a01                	li	s4,0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800245e:	00a7f463          	bgeu	a5,a0,8002466 <find_volume+0x120>
 8002462:	47b5                	li	a5,13
 8002464:	b7a9                	j	80023ae <find_volume+0x68>
	rv = rv << 8 | ptr[0];
 8002466:	03c44783          	lbu	a5,60(s0)
 800246a:	03b44703          	lbu	a4,59(s0)
 800246e:	07a2                	slli	a5,a5,0x8
 8002470:	8fd9                	or	a5,a5,a4
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002472:	07c2                	slli	a5,a5,0x10
 8002474:	87c1                	srai	a5,a5,0x10
 8002476:	20000713          	li	a4,512
 800247a:	fee794e3          	bne	a5,a4,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 800247e:	04744983          	lbu	s3,71(s0)
 8002482:	04644783          	lbu	a5,70(s0)
 8002486:	09a2                	slli	s3,s3,0x8
 8002488:	00f9e9b3          	or	s3,s3,a5
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800248c:	00099963          	bnez	s3,800249e <find_volume+0x158>
 8002490:	05440513          	addi	a0,s0,84
 8002494:	00000097          	auipc	ra,0x0
 8002498:	c32080e7          	jalr	-974(ra) # 80020c6 <ld_dword>
 800249c:	89aa                	mv	s3,a0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800249e:	04044483          	lbu	s1,64(s0)
		fs->fsize = fasize;
 80024a2:	01342c23          	sw	s3,24(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80024a6:	4705                	li	a4,1
 80024a8:	fff48793          	addi	a5,s1,-1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80024ac:	00940123          	sb	s1,2(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80024b0:	0ff7f793          	andi	a5,a5,255
 80024b4:	faf767e3          	bltu	a4,a5,8002462 <find_volume+0x11c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80024b8:	03d44903          	lbu	s2,61(s0)
 80024bc:	01091793          	slli	a5,s2,0x10
 80024c0:	83c1                	srli	a5,a5,0x10
 80024c2:	00f41523          	sh	a5,10(s0)
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80024c6:	dfd1                	beqz	a5,8002462 <find_volume+0x11c>
 80024c8:	fff90793          	addi	a5,s2,-1
 80024cc:	0127f7b3          	and	a5,a5,s2
 80024d0:	fbc9                	bnez	a5,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80024d2:	04244783          	lbu	a5,66(s0)
 80024d6:	04144a83          	lbu	s5,65(s0)
 80024da:	07a2                	slli	a5,a5,0x8
 80024dc:	0157e7b3          	or	a5,a5,s5
 80024e0:	01079a93          	slli	s5,a5,0x10
 80024e4:	410ada93          	srai	s5,s5,0x10
 80024e8:	010a9b13          	slli	s6,s5,0x10
 80024ec:	010b5b13          	srli	s6,s6,0x10
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80024f0:	01641423          	sh	s6,8(s0)
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80024f4:	00fb7793          	andi	a5,s6,15
 80024f8:	f7ad                	bnez	a5,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80024fa:	04444503          	lbu	a0,68(s0)
 80024fe:	04344783          	lbu	a5,67(s0)
 8002502:	0522                	slli	a0,a0,0x8
 8002504:	8d5d                	or	a0,a0,a5
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002506:	e519                	bnez	a0,8002514 <find_volume+0x1ce>
 8002508:	05040513          	addi	a0,s0,80
 800250c:	00000097          	auipc	ra,0x0
 8002510:	bba080e7          	jalr	-1094(ra) # 80020c6 <ld_dword>
	rv = rv << 8 | ptr[0];
 8002514:	03f44783          	lbu	a5,63(s0)
 8002518:	03e44703          	lbu	a4,62(s0)
 800251c:	07a2                	slli	a5,a5,0x8
 800251e:	8fd9                	or	a5,a5,a4
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002520:	d3a9                	beqz	a5,8002462 <find_volume+0x11c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002522:	033486b3          	mul	a3,s1,s3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002526:	004b5713          	srli	a4,s6,0x4
 800252a:	973e                	add	a4,a4,a5
 800252c:	9736                	add	a4,a4,a3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800252e:	f2e56ae3          	bltu	a0,a4,8002462 <find_volume+0x11c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002532:	8d19                	sub	a0,a0,a4
 8002534:	032554b3          	divu	s1,a0,s2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002538:	f32565e3          	bltu	a0,s2,8002462 <find_volume+0x11c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800253c:	10000637          	lui	a2,0x10000
 8002540:	1655                	addi	a2,a2,-11
 8002542:	f29660e3          	bltu	a2,s1,8002462 <find_volume+0x11c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002546:	6641                	lui	a2,0x10
 8002548:	1655                	addi	a2,a2,-11
 800254a:	12967963          	bgeu	a2,s1,800267c <find_volume+0x336>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800254e:	490d                	li	s2,3
		fs->database = bsect + sysect;					/* Data start sector */
 8002550:	9752                	add	a4,a4,s4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002552:	0489                	addi	s1,s1,2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002554:	97d2                	add	a5,a5,s4
		fs->database = bsect + sysect;					/* Data start sector */
 8002556:	d418                	sw	a4,40(s0)
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002558:	c844                	sw	s1,20(s0)
		fs->volbase = bsect;							/* Volume start sector */
 800255a:	01442e23          	sw	s4,28(s0)
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800255e:	d01c                	sw	a5,32(s0)
		if (fmt == FS_FAT32) {
 8002560:	470d                	li	a4,3
 8002562:	0ee91e63          	bne	s2,a4,800265e <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 8002566:	05b44783          	lbu	a5,91(s0)
 800256a:	05a44703          	lbu	a4,90(s0)
 800256e:	07a2                	slli	a5,a5,0x8
 8002570:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002572:	00fae7b3          	or	a5,s5,a5
 8002576:	07c2                	slli	a5,a5,0x10
 8002578:	87c1                	srai	a5,a5,0x10
 800257a:	ee0794e3          	bnez	a5,8002462 <find_volume+0x11c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800257e:	05c40513          	addi	a0,s0,92
 8002582:	00000097          	auipc	ra,0x0
 8002586:	b44080e7          	jalr	-1212(ra) # 80020c6 <ld_dword>
 800258a:	d048                	sw	a0,36(s0)
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800258c:	048a                	slli	s1,s1,0x2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800258e:	1ff48493          	addi	s1,s1,511
 8002592:	80a5                	srli	s1,s1,0x9
 8002594:	ec99e7e3          	bltu	s3,s1,8002462 <find_volume+0x11c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002598:	57fd                	li	a5,-1
 800259a:	c81c                	sw	a5,16(s0)
 800259c:	c45c                	sw	a5,12(s0)
		fs->fsi_flag = 0x80;
 800259e:	f8000793          	li	a5,-128
 80025a2:	00f40223          	sb	a5,4(s0)
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80025a6:	478d                	li	a5,3
 80025a8:	08f91a63          	bne	s2,a5,800263c <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80025ac:	06144783          	lbu	a5,97(s0)
 80025b0:	06044703          	lbu	a4,96(s0)
 80025b4:	07a2                	slli	a5,a5,0x8
 80025b6:	8fd9                	or	a5,a5,a4
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80025b8:	07c2                	slli	a5,a5,0x10
 80025ba:	87c1                	srai	a5,a5,0x10
 80025bc:	4705                	li	a4,1
 80025be:	06e79f63          	bne	a5,a4,800263c <find_volume+0x2f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80025c2:	001a0593          	addi	a1,s4,1
 80025c6:	8522                	mv	a0,s0
 80025c8:	00000097          	auipc	ra,0x0
 80025cc:	c9e080e7          	jalr	-866(ra) # 8002266 <move_window>
 80025d0:	e535                	bnez	a0,800263c <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80025d2:	22f44783          	lbu	a5,559(s0)
 80025d6:	22e44703          	lbu	a4,558(s0)
			fs->fsi_flag = 0;
 80025da:	00040223          	sb	zero,4(s0)
	rv = rv << 8 | ptr[0];
 80025de:	07a2                	slli	a5,a5,0x8
 80025e0:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80025e2:	07c2                	slli	a5,a5,0x10
 80025e4:	776d                	lui	a4,0xffffb
 80025e6:	87c1                	srai	a5,a5,0x10
 80025e8:	a5570713          	addi	a4,a4,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80025ec:	04e79863          	bne	a5,a4,800263c <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80025f0:	03040513          	addi	a0,s0,48
 80025f4:	00000097          	auipc	ra,0x0
 80025f8:	ad2080e7          	jalr	-1326(ra) # 80020c6 <ld_dword>
 80025fc:	416157b7          	lui	a5,0x41615
 8002600:	25278793          	addi	a5,a5,594 # 41615252 <_sp+0x2160d252>
 8002604:	02f51c63          	bne	a0,a5,800263c <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002608:	21440513          	addi	a0,s0,532
 800260c:	00000097          	auipc	ra,0x0
 8002610:	aba080e7          	jalr	-1350(ra) # 80020c6 <ld_dword>
 8002614:	614177b7          	lui	a5,0x61417
 8002618:	27278793          	addi	a5,a5,626 # 61417272 <_sp+0x4140f272>
 800261c:	02f51063          	bne	a0,a5,800263c <find_volume+0x2f6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002620:	21840513          	addi	a0,s0,536
 8002624:	00000097          	auipc	ra,0x0
 8002628:	aa2080e7          	jalr	-1374(ra) # 80020c6 <ld_dword>
 800262c:	c808                	sw	a0,16(s0)
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800262e:	21c40513          	addi	a0,s0,540
 8002632:	00000097          	auipc	ra,0x0
 8002636:	a94080e7          	jalr	-1388(ra) # 80020c6 <ld_dword>
 800263a:	c448                	sw	a0,12(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 800263c:	20000737          	lui	a4,0x20000
 8002640:	51470713          	addi	a4,a4,1300 # 20000514 <Fsid>
 8002644:	00075783          	lhu	a5,0(a4)
	fs->fs_type = fmt;		/* FAT sub-type */
 8002648:	01240023          	sb	s2,0(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 800264c:	0785                	addi	a5,a5,1
 800264e:	07c2                	slli	a5,a5,0x10
 8002650:	83c1                	srli	a5,a5,0x10
 8002652:	00f71023          	sh	a5,0(a4)
 8002656:	00f41323          	sh	a5,6(s0)
	return FR_OK;
 800265a:	4781                	li	a5,0
 800265c:	bb89                	j	80023ae <find_volume+0x68>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800265e:	e00b02e3          	beqz	s6,8002462 <find_volume+0x11c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002662:	97b6                	add	a5,a5,a3
 8002664:	d05c                	sw	a5,36(s0)
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002666:	4789                	li	a5,2
 8002668:	00f91463          	bne	s2,a5,8002670 <find_volume+0x32a>
 800266c:	0486                	slli	s1,s1,0x1
 800266e:	b705                	j	800258e <find_volume+0x248>
 8002670:	02e48733          	mul	a4,s1,a4
 8002674:	8885                	andi	s1,s1,1
 8002676:	8305                	srli	a4,a4,0x1
 8002678:	94ba                	add	s1,s1,a4
 800267a:	bf11                	j	800258e <find_volume+0x248>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800267c:	6905                	lui	s2,0x1
 800267e:	1955                	addi	s2,s2,-11
 8002680:	00993933          	sltu	s2,s2,s1
 8002684:	0905                	addi	s2,s2,1
 8002686:	b5e9                	j	8002550 <find_volume+0x20a>

08002688 <put_fat>:
{
 8002688:	1101                	addi	sp,sp,-32
 800268a:	c64e                	sw	s3,12(sp)
 800268c:	c452                	sw	s4,8(sp)
 800268e:	ce06                	sw	ra,28(sp)
 8002690:	cc22                	sw	s0,24(sp)
 8002692:	ca26                	sw	s1,20(sp)
 8002694:	c84a                	sw	s2,16(sp)
 8002696:	c256                	sw	s5,4(sp)
 8002698:	c05a                	sw	s6,0(sp)
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800269a:	4a05                	li	s4,1
	FRESULT res = FR_INT_ERR;
 800269c:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800269e:	0aba7463          	bgeu	s4,a1,8002746 <put_fat+0xbe>
 80026a2:	495c                	lw	a5,20(a0)
 80026a4:	892a                	mv	s2,a0
	FRESULT res = FR_INT_ERR;
 80026a6:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80026a8:	08f5ff63          	bgeu	a1,a5,8002746 <put_fat+0xbe>
		switch (fs->fs_type) {
 80026ac:	00054783          	lbu	a5,0(a0)
 80026b0:	4709                	li	a4,2
 80026b2:	84b2                	mv	s1,a2
 80026b4:	842e                	mv	s0,a1
 80026b6:	0ae78a63          	beq	a5,a4,800276a <put_fat+0xe2>
 80026ba:	470d                	li	a4,3
 80026bc:	0ee78063          	beq	a5,a4,800279c <put_fat+0x114>
 80026c0:	09479363          	bne	a5,s4,8002746 <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80026c4:	0015da13          	srli	s4,a1,0x1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80026c8:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80026ca:	9a2e                	add	s4,s4,a1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80026cc:	009a5593          	srli	a1,s4,0x9
 80026d0:	95be                	add	a1,a1,a5
 80026d2:	00000097          	auipc	ra,0x0
 80026d6:	b94080e7          	jalr	-1132(ra) # 8002266 <move_window>
 80026da:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80026dc:	e52d                	bnez	a0,8002746 <put_fat+0xbe>
			p = fs->win + bc++ % SS(fs);
 80026de:	03090a93          	addi	s5,s2,48 # 1030 <__stack_size+0x30>
 80026e2:	001a0b13          	addi	s6,s4,1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80026e6:	8805                	andi	s0,s0,1
			p = fs->win + bc++ % SS(fs);
 80026e8:	1ffa7a13          	andi	s4,s4,511
 80026ec:	9a56                	add	s4,s4,s5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80026ee:	0ff4f793          	andi	a5,s1,255
 80026f2:	cc09                	beqz	s0,800270c <put_fat+0x84>
 80026f4:	000a4783          	lbu	a5,0(s4)
 80026f8:	6685                	lui	a3,0x1
 80026fa:	16c1                	addi	a3,a3,-16
 80026fc:	00f7f713          	andi	a4,a5,15
 8002700:	00449793          	slli	a5,s1,0x4
 8002704:	8ff5                	and	a5,a5,a3
 8002706:	8fd9                	or	a5,a5,a4
 8002708:	0ff7f793          	andi	a5,a5,255
 800270c:	00fa0023          	sb	a5,0(s4)
			fs->wflag = 1;
 8002710:	4785                	li	a5,1
 8002712:	00f901a3          	sb	a5,3(s2)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002716:	02092783          	lw	a5,32(s2)
 800271a:	009b5593          	srli	a1,s6,0x9
 800271e:	854a                	mv	a0,s2
 8002720:	95be                	add	a1,a1,a5
 8002722:	00000097          	auipc	ra,0x0
 8002726:	b44080e7          	jalr	-1212(ra) # 8002266 <move_window>
 800272a:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800272c:	ed09                	bnez	a0,8002746 <put_fat+0xbe>
			p = fs->win + bc % SS(fs);
 800272e:	1ffb7b13          	andi	s6,s6,511
 8002732:	9ada                	add	s5,s5,s6
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002734:	c405                	beqz	s0,800275c <put_fat+0xd4>
 8002736:	8091                	srli	s1,s1,0x4
 8002738:	0ff4f493          	andi	s1,s1,255
 800273c:	009a8023          	sb	s1,0(s5)
			fs->wflag = 1;
 8002740:	4785                	li	a5,1
 8002742:	00f901a3          	sb	a5,3(s2)
}
 8002746:	40f2                	lw	ra,28(sp)
 8002748:	4462                	lw	s0,24(sp)
 800274a:	854e                	mv	a0,s3
 800274c:	44d2                	lw	s1,20(sp)
 800274e:	4942                	lw	s2,16(sp)
 8002750:	49b2                	lw	s3,12(sp)
 8002752:	4a22                	lw	s4,8(sp)
 8002754:	4a92                	lw	s5,4(sp)
 8002756:	4b02                	lw	s6,0(sp)
 8002758:	6105                	addi	sp,sp,32
 800275a:	8082                	ret
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800275c:	000ac783          	lbu	a5,0(s5)
 8002760:	80a1                	srli	s1,s1,0x8
 8002762:	88bd                	andi	s1,s1,15
 8002764:	9bc1                	andi	a5,a5,-16
 8002766:	8cdd                	or	s1,s1,a5
 8002768:	bfd1                	j	800273c <put_fat+0xb4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800276a:	511c                	lw	a5,32(a0)
 800276c:	81a1                	srli	a1,a1,0x8
 800276e:	95be                	add	a1,a1,a5
 8002770:	00000097          	auipc	ra,0x0
 8002774:	af6080e7          	jalr	-1290(ra) # 8002266 <move_window>
 8002778:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800277a:	f571                	bnez	a0,8002746 <put_fat+0xbe>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800277c:	0406                	slli	s0,s0,0x1
 800277e:	03090793          	addi	a5,s2,48
 8002782:	1fe47413          	andi	s0,s0,510
 8002786:	943e                	add	s0,s0,a5
	*ptr++ = (BYTE)val; val >>= 8;
 8002788:	00940023          	sb	s1,0(s0)
 800278c:	04c2                	slli	s1,s1,0x10
 800278e:	80c1                	srli	s1,s1,0x10
 8002790:	80a1                	srli	s1,s1,0x8
	*ptr++ = (BYTE)val;
 8002792:	009400a3          	sb	s1,1(s0)
			fs->wflag = 1;
 8002796:	014901a3          	sb	s4,3(s2)
			break;
 800279a:	b775                	j	8002746 <put_fat+0xbe>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800279c:	511c                	lw	a5,32(a0)
 800279e:	819d                	srli	a1,a1,0x7
 80027a0:	95be                	add	a1,a1,a5
 80027a2:	00000097          	auipc	ra,0x0
 80027a6:	ac4080e7          	jalr	-1340(ra) # 8002266 <move_window>
 80027aa:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80027ac:	fd49                	bnez	a0,8002746 <put_fat+0xbe>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80027ae:	040a                	slli	s0,s0,0x2
 80027b0:	03090793          	addi	a5,s2,48
 80027b4:	1fc47413          	andi	s0,s0,508
 80027b8:	943e                	add	s0,s0,a5
 80027ba:	8522                	mv	a0,s0
 80027bc:	00000097          	auipc	ra,0x0
 80027c0:	90a080e7          	jalr	-1782(ra) # 80020c6 <ld_dword>
 80027c4:	0492                	slli	s1,s1,0x4
 80027c6:	f00005b7          	lui	a1,0xf0000
 80027ca:	8091                	srli	s1,s1,0x4
 80027cc:	8de9                	and	a1,a1,a0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80027ce:	8dc5                	or	a1,a1,s1
 80027d0:	8522                	mv	a0,s0
 80027d2:	00000097          	auipc	ra,0x0
 80027d6:	912080e7          	jalr	-1774(ra) # 80020e4 <st_dword>
 80027da:	bf75                	j	8002796 <put_fat+0x10e>

080027dc <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80027dc:	4785                	li	a5,1
 80027de:	0eb7f763          	bgeu	a5,a1,80028cc <get_fat.isra.7+0xf0>
 80027e2:	4958                	lw	a4,20(a0)
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80027e4:	1101                	addi	sp,sp,-32
 80027e6:	cc22                	sw	s0,24(sp)
 80027e8:	ce06                	sw	ra,28(sp)
 80027ea:	ca26                	sw	s1,20(sp)
 80027ec:	c84a                	sw	s2,16(sp)
 80027ee:	c64e                	sw	s3,12(sp)
 80027f0:	842a                	mv	s0,a0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80027f2:	02e5fa63          	bgeu	a1,a4,8002826 <get_fat.isra.7+0x4a>
		switch (fs->fs_type) {
 80027f6:	00054703          	lbu	a4,0(a0)
 80027fa:	4689                	li	a3,2
 80027fc:	84ae                	mv	s1,a1
 80027fe:	06d70c63          	beq	a4,a3,8002876 <get_fat.isra.7+0x9a>
 8002802:	468d                	li	a3,3
 8002804:	08d70e63          	beq	a4,a3,80028a0 <get_fat.isra.7+0xc4>
 8002808:	00f71f63          	bne	a4,a5,8002826 <get_fat.isra.7+0x4a>
			bc = (UINT)clst; bc += bc / 2;
 800280c:	0015d913          	srli	s2,a1,0x1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002810:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;
 8002812:	992e                	add	s2,s2,a1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002814:	00995593          	srli	a1,s2,0x9
 8002818:	95be                	add	a1,a1,a5
 800281a:	00000097          	auipc	ra,0x0
 800281e:	a4c080e7          	jalr	-1460(ra) # 8002266 <move_window>
 8002822:	c911                	beqz	a0,8002836 <get_fat.isra.7+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002824:	57fd                	li	a5,-1
}
 8002826:	40f2                	lw	ra,28(sp)
 8002828:	4462                	lw	s0,24(sp)
 800282a:	44d2                	lw	s1,20(sp)
 800282c:	4942                	lw	s2,16(sp)
 800282e:	49b2                	lw	s3,12(sp)
 8002830:	853e                	mv	a0,a5
 8002832:	6105                	addi	sp,sp,32
 8002834:	8082                	ret
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002836:	501c                	lw	a5,32(s0)
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002838:	00190993          	addi	s3,s2,1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800283c:	0099d593          	srli	a1,s3,0x9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002840:	1ff97913          	andi	s2,s2,511
 8002844:	9922                	add	s2,s2,s0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002846:	95be                	add	a1,a1,a5
 8002848:	8522                	mv	a0,s0
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800284a:	03094903          	lbu	s2,48(s2)
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800284e:	00000097          	auipc	ra,0x0
 8002852:	a18080e7          	jalr	-1512(ra) # 8002266 <move_window>
 8002856:	f579                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002858:	1ff9f993          	andi	s3,s3,511
 800285c:	944e                	add	s0,s0,s3
 800285e:	03044783          	lbu	a5,48(s0)
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002862:	8885                	andi	s1,s1,1
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002864:	07a2                	slli	a5,a5,0x8
 8002866:	0127e7b3          	or	a5,a5,s2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800286a:	c099                	beqz	s1,8002870 <get_fat.isra.7+0x94>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800286c:	8391                	srli	a5,a5,0x4
			break;
 800286e:	bf65                	j	8002826 <get_fat.isra.7+0x4a>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002870:	07d2                	slli	a5,a5,0x14
 8002872:	83d1                	srli	a5,a5,0x14
 8002874:	bf4d                	j	8002826 <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002876:	511c                	lw	a5,32(a0)
 8002878:	81a1                	srli	a1,a1,0x8
 800287a:	95be                	add	a1,a1,a5
 800287c:	00000097          	auipc	ra,0x0
 8002880:	9ea080e7          	jalr	-1558(ra) # 8002266 <move_window>
 8002884:	f145                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002886:	0486                	slli	s1,s1,0x1
 8002888:	03040413          	addi	s0,s0,48
 800288c:	1fe4f493          	andi	s1,s1,510
 8002890:	9426                	add	s0,s0,s1
	rv = rv << 8 | ptr[0];
 8002892:	00144783          	lbu	a5,1(s0)
 8002896:	00044703          	lbu	a4,0(s0)
 800289a:	07a2                	slli	a5,a5,0x8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800289c:	8fd9                	or	a5,a5,a4
			break;
 800289e:	b761                	j	8002826 <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80028a0:	511c                	lw	a5,32(a0)
 80028a2:	819d                	srli	a1,a1,0x7
 80028a4:	95be                	add	a1,a1,a5
 80028a6:	00000097          	auipc	ra,0x0
 80028aa:	9c0080e7          	jalr	-1600(ra) # 8002266 <move_window>
 80028ae:	f93d                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80028b0:	00249513          	slli	a0,s1,0x2
 80028b4:	03040413          	addi	s0,s0,48
 80028b8:	1fc57513          	andi	a0,a0,508
 80028bc:	9522                	add	a0,a0,s0
 80028be:	00000097          	auipc	ra,0x0
 80028c2:	808080e7          	jalr	-2040(ra) # 80020c6 <ld_dword>
 80028c6:	00451793          	slli	a5,a0,0x4
 80028ca:	b74d                	j	800286c <get_fat.isra.7+0x90>
		val = 1;	/* Internal error */
 80028cc:	4785                	li	a5,1
}
 80028ce:	853e                	mv	a0,a5
 80028d0:	8082                	ret

080028d2 <create_chain>:
{
 80028d2:	1101                	addi	sp,sp,-32
 80028d4:	ca26                	sw	s1,20(sp)
 80028d6:	c64e                	sw	s3,12(sp)
 80028d8:	c452                	sw	s4,8(sp)
 80028da:	ce06                	sw	ra,28(sp)
 80028dc:	cc22                	sw	s0,24(sp)
 80028de:	c84a                	sw	s2,16(sp)
 80028e0:	c256                	sw	s5,4(sp)
 80028e2:	c05a                	sw	s6,0(sp)
 80028e4:	8a2a                	mv	s4,a0
 80028e6:	89ae                	mv	s3,a1
	FATFS *fs = obj->fs;
 80028e8:	4104                	lw	s1,0(a0)
	if (clst == 0) {	/* Create a new chain */
 80028ea:	e991                	bnez	a1,80028fe <create_chain+0x2c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80028ec:	00c4a903          	lw	s2,12(s1)
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80028f0:	00090563          	beqz	s2,80028fa <create_chain+0x28>
 80028f4:	48dc                	lw	a5,20(s1)
 80028f6:	04f96063          	bltu	s2,a5,8002936 <create_chain+0x64>
 80028fa:	4905                	li	s2,1
 80028fc:	a82d                	j	8002936 <create_chain+0x64>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80028fe:	8526                	mv	a0,s1
 8002900:	00000097          	auipc	ra,0x0
 8002904:	edc080e7          	jalr	-292(ra) # 80027dc <get_fat.isra.7>
		if (cs < 2) return 1;				/* Test for insanity */
 8002908:	4785                	li	a5,1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800290a:	842a                	mv	s0,a0
		if (cs < 2) return 1;				/* Test for insanity */
 800290c:	00a7ee63          	bltu	a5,a0,8002928 <create_chain+0x56>
 8002910:	4405                	li	s0,1
}
 8002912:	8522                	mv	a0,s0
 8002914:	40f2                	lw	ra,28(sp)
 8002916:	4462                	lw	s0,24(sp)
 8002918:	44d2                	lw	s1,20(sp)
 800291a:	4942                	lw	s2,16(sp)
 800291c:	49b2                	lw	s3,12(sp)
 800291e:	4a22                	lw	s4,8(sp)
 8002920:	4a92                	lw	s5,4(sp)
 8002922:	4b02                	lw	s6,0(sp)
 8002924:	6105                	addi	sp,sp,32
 8002926:	8082                	ret
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002928:	57fd                	li	a5,-1
 800292a:	0cf50363          	beq	a0,a5,80029f0 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800292e:	48dc                	lw	a5,20(s1)
 8002930:	894e                	mv	s2,s3
 8002932:	fef560e3          	bltu	a0,a5,8002912 <create_chain+0x40>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002936:	489c                	lw	a5,16(s1)
 8002938:	e399                	bnez	a5,800293e <create_chain+0x6c>
 800293a:	4401                	li	s0,0
 800293c:	bfd9                	j	8002912 <create_chain+0x40>
		if (scl == clst) {						/* Stretching an existing chain? */
 800293e:	03391d63          	bne	s2,s3,8002978 <create_chain+0xa6>
			if (ncl >= fs->n_fatent) ncl = 2;
 8002942:	48dc                	lw	a5,20(s1)
 8002944:	00190413          	addi	s0,s2,1
 8002948:	00f46363          	bltu	s0,a5,800294e <create_chain+0x7c>
 800294c:	4409                	li	s0,2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800294e:	000a2503          	lw	a0,0(s4)
 8002952:	85a2                	mv	a1,s0
 8002954:	00000097          	auipc	ra,0x0
 8002958:	e88080e7          	jalr	-376(ra) # 80027dc <get_fat.isra.7>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800295c:	4705                	li	a4,1
 800295e:	fae509e3          	beq	a0,a4,8002910 <create_chain+0x3e>
 8002962:	57fd                	li	a5,-1
 8002964:	08f50663          	beq	a0,a5,80029f0 <create_chain+0x11e>
			if (cs != 0) {						/* Not free? */
 8002968:	c129                	beqz	a0,80029aa <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800296a:	44dc                	lw	a5,12(s1)
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800296c:	00f77663          	bgeu	a4,a5,8002978 <create_chain+0xa6>
 8002970:	48d8                	lw	a4,20(s1)
 8002972:	00e7f363          	bgeu	a5,a4,8002978 <create_chain+0xa6>
 8002976:	893e                	mv	s2,a5
 8002978:	844a                	mv	s0,s2
					if (ncl > scl) return 0;	/* No free cluster found? */
 800297a:	4a85                	li	s5,1
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800297c:	5b7d                	li	s6,-1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800297e:	48dc                	lw	a5,20(s1)
				ncl++;							/* Next cluster */
 8002980:	0405                	addi	s0,s0,1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002982:	00f46563          	bltu	s0,a5,800298c <create_chain+0xba>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002986:	fb2afae3          	bgeu	s5,s2,800293a <create_chain+0x68>
					ncl = 2;
 800298a:	4409                	li	s0,2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800298c:	000a2503          	lw	a0,0(s4)
 8002990:	85a2                	mv	a1,s0
 8002992:	00000097          	auipc	ra,0x0
 8002996:	e4a080e7          	jalr	-438(ra) # 80027dc <get_fat.isra.7>
				if (cs == 0) break;				/* Found a free cluster? */
 800299a:	c909                	beqz	a0,80029ac <create_chain+0xda>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800299c:	f7550ae3          	beq	a0,s5,8002910 <create_chain+0x3e>
 80029a0:	05650863          	beq	a0,s6,80029f0 <create_chain+0x11e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80029a4:	fd241de3          	bne	s0,s2,800297e <create_chain+0xac>
 80029a8:	bf49                	j	800293a <create_chain+0x68>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80029aa:	d479                	beqz	s0,8002978 <create_chain+0xa6>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80029ac:	567d                	li	a2,-1
 80029ae:	85a2                	mv	a1,s0
 80029b0:	8526                	mv	a0,s1
 80029b2:	00000097          	auipc	ra,0x0
 80029b6:	cd6080e7          	jalr	-810(ra) # 8002688 <put_fat>
		if (res == FR_OK && clst != 0) {
 80029ba:	e905                	bnez	a0,80029ea <create_chain+0x118>
 80029bc:	00099f63          	bnez	s3,80029da <create_chain+0x108>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029c0:	48d8                	lw	a4,20(s1)
 80029c2:	489c                	lw	a5,16(s1)
		fs->last_clst = ncl;
 80029c4:	c4c0                	sw	s0,12(s1)
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029c6:	1779                	addi	a4,a4,-2
 80029c8:	02f77663          	bgeu	a4,a5,80029f4 <create_chain+0x122>
		fs->fsi_flag |= 1;
 80029cc:	0044c783          	lbu	a5,4(s1)
 80029d0:	0017e793          	ori	a5,a5,1
 80029d4:	00f48223          	sb	a5,4(s1)
 80029d8:	bf2d                	j	8002912 <create_chain+0x40>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80029da:	8622                	mv	a2,s0
 80029dc:	85ce                	mv	a1,s3
 80029de:	8526                	mv	a0,s1
 80029e0:	00000097          	auipc	ra,0x0
 80029e4:	ca8080e7          	jalr	-856(ra) # 8002688 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80029e8:	dd61                	beqz	a0,80029c0 <create_chain+0xee>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80029ea:	4785                	li	a5,1
 80029ec:	f2f512e3          	bne	a0,a5,8002910 <create_chain+0x3e>
 80029f0:	547d                	li	s0,-1
 80029f2:	b705                	j	8002912 <create_chain+0x40>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029f4:	17fd                	addi	a5,a5,-1
 80029f6:	c89c                	sw	a5,16(s1)
 80029f8:	bfd1                	j	80029cc <create_chain+0xfa>

080029fa <dir_next>:
{
 80029fa:	7179                	addi	sp,sp,-48
 80029fc:	cc52                	sw	s4,24(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80029fe:	01052a03          	lw	s4,16(a0)
{
 8002a02:	d422                	sw	s0,40(sp)
 8002a04:	d606                	sw	ra,44(sp)
 8002a06:	d226                	sw	s1,36(sp)
 8002a08:	d04a                	sw	s2,32(sp)
 8002a0a:	ce4e                	sw	s3,28(sp)
 8002a0c:	ca56                	sw	s5,20(sp)
 8002a0e:	c85a                	sw	s6,16(sp)
 8002a10:	c65e                	sw	s7,12(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002a12:	020a0a13          	addi	s4,s4,32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002a16:	002007b7          	lui	a5,0x200
	FATFS *fs = dp->obj.fs;
 8002a1a:	4100                	lw	s0,0(a0)
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002a1c:	00fa6463          	bltu	s4,a5,8002a24 <dir_next+0x2a>
 8002a20:	00052c23          	sw	zero,24(a0)
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002a24:	4d18                	lw	a4,24(a0)
 8002a26:	4791                	li	a5,4
 8002a28:	c705                	beqz	a4,8002a50 <dir_next+0x56>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002a2a:	1ffa7b13          	andi	s6,s4,511
 8002a2e:	8aae                	mv	s5,a1
 8002a30:	84aa                	mv	s1,a0
 8002a32:	0c0b1d63          	bnez	s6,8002b0c <dir_next+0x112>
		if (dp->clust == 0) {	/* Static table */
 8002a36:	494c                	lw	a1,20(a0)
		dp->sect++;				/* Next sector */
 8002a38:	0705                	addi	a4,a4,1
 8002a3a:	cd18                	sw	a4,24(a0)
		if (dp->clust == 0) {	/* Static table */
 8002a3c:	e595                	bnez	a1,8002a68 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002a3e:	00845703          	lhu	a4,8(s0)
 8002a42:	005a5793          	srli	a5,s4,0x5
 8002a46:	0ce7e363          	bltu	a5,a4,8002b0c <dir_next+0x112>
				dp->sect = 0; return FR_NO_FILE;
 8002a4a:	0004ac23          	sw	zero,24(s1)
 8002a4e:	4791                	li	a5,4
}
 8002a50:	50b2                	lw	ra,44(sp)
 8002a52:	5422                	lw	s0,40(sp)
 8002a54:	5492                	lw	s1,36(sp)
 8002a56:	5902                	lw	s2,32(sp)
 8002a58:	49f2                	lw	s3,28(sp)
 8002a5a:	4a62                	lw	s4,24(sp)
 8002a5c:	4ad2                	lw	s5,20(sp)
 8002a5e:	4b42                	lw	s6,16(sp)
 8002a60:	4bb2                	lw	s7,12(sp)
 8002a62:	853e                	mv	a0,a5
 8002a64:	6145                	addi	sp,sp,48
 8002a66:	8082                	ret
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002a68:	00a45983          	lhu	s3,10(s0)
 8002a6c:	009a5793          	srli	a5,s4,0x9
 8002a70:	19fd                	addi	s3,s3,-1
 8002a72:	00f9f9b3          	and	s3,s3,a5
 8002a76:	08099b63          	bnez	s3,8002b0c <dir_next+0x112>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002a7a:	8522                	mv	a0,s0
 8002a7c:	00000097          	auipc	ra,0x0
 8002a80:	d60080e7          	jalr	-672(ra) # 80027dc <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002a84:	4b85                	li	s7,1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002a86:	892a                	mv	s2,a0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002a88:	00abe463          	bltu	s7,a0,8002a90 <dir_next+0x96>
 8002a8c:	4789                	li	a5,2
 8002a8e:	b7c9                	j	8002a50 <dir_next+0x56>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002a90:	57fd                	li	a5,-1
 8002a92:	00f51463          	bne	a0,a5,8002a9a <dir_next+0xa0>
 8002a96:	4785                	li	a5,1
 8002a98:	bf65                	j	8002a50 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002a9a:	485c                	lw	a5,20(s0)
 8002a9c:	04f56f63          	bltu	a0,a5,8002afa <dir_next+0x100>
					if (!stretch) {								/* If no stretch, report EOT */
 8002aa0:	fa0a85e3          	beqz	s5,8002a4a <dir_next+0x50>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002aa4:	48cc                	lw	a1,20(s1)
 8002aa6:	8526                	mv	a0,s1
 8002aa8:	00000097          	auipc	ra,0x0
 8002aac:	e2a080e7          	jalr	-470(ra) # 80028d2 <create_chain>
 8002ab0:	892a                	mv	s2,a0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ab2:	479d                	li	a5,7
 8002ab4:	dd51                	beqz	a0,8002a50 <dir_next+0x56>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002ab6:	fd750be3          	beq	a0,s7,8002a8c <dir_next+0x92>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002aba:	57fd                	li	a5,-1
 8002abc:	fcf50de3          	beq	a0,a5,8002a96 <dir_next+0x9c>
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002ac0:	00344783          	lbu	a5,3(s0)
 8002ac4:	efa1                	bnez	a5,8002b1c <dir_next+0x122>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002ac6:	85ca                	mv	a1,s2
 8002ac8:	8522                	mv	a0,s0
 8002aca:	fffff097          	auipc	ra,0xfffff
 8002ace:	650080e7          	jalr	1616(ra) # 800211a <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002ad2:	03040a93          	addi	s5,s0,48
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002ad6:	8baa                	mv	s7,a0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002ad8:	d448                	sw	a0,44(s0)
	BYTE *d = (BYTE*)dst;
 8002ada:	23040713          	addi	a4,s0,560
 8002ade:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 8002ae0:	0785                	addi	a5,a5,1
 8002ae2:	fe078fa3          	sb	zero,-1(a5) # 1fffff <__stack_size+0x1fefff>
	} while (--cnt);
 8002ae6:	fee79de3          	bne	a5,a4,8002ae0 <dir_next+0xe6>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002aea:	00a45783          	lhu	a5,10(s0)
 8002aee:	02f9ee63          	bltu	s3,a5,8002b2a <dir_next+0x130>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002af2:	00a45783          	lhu	a5,10(s0)
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002af6:	faf990e3          	bne	s3,a5,8002a96 <dir_next+0x9c>
				dp->clust = clst;		/* Initialize data for new cluster */
 8002afa:	0124aa23          	sw	s2,20(s1)
				dp->sect = clst2sect(fs, clst);
 8002afe:	85ca                	mv	a1,s2
 8002b00:	8522                	mv	a0,s0
 8002b02:	fffff097          	auipc	ra,0xfffff
 8002b06:	618080e7          	jalr	1560(ra) # 800211a <clst2sect>
 8002b0a:	cc88                	sw	a0,24(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002b0c:	03040413          	addi	s0,s0,48
 8002b10:	945a                	add	s0,s0,s6
	dp->dptr = ofs;						/* Current entry */
 8002b12:	0144a823          	sw	s4,16(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002b16:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 8002b18:	4781                	li	a5,0
 8002b1a:	bf1d                	j	8002a50 <dir_next+0x56>
 8002b1c:	8522                	mv	a0,s0
 8002b1e:	fffff097          	auipc	ra,0xfffff
 8002b22:	6e4080e7          	jalr	1764(ra) # 8002202 <sync_window.part.3>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002b26:	f925                	bnez	a0,8002a96 <dir_next+0x9c>
 8002b28:	bf79                	j	8002ac6 <dir_next+0xcc>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002b2a:	00144503          	lbu	a0,1(s0)
 8002b2e:	4685                	li	a3,1
 8002b30:	013b8633          	add	a2,s7,s3
 8002b34:	85d6                	mv	a1,s5
 8002b36:	00001097          	auipc	ra,0x1
 8002b3a:	110080e7          	jalr	272(ra) # 8003c46 <disk_write>
 8002b3e:	f955                	bnez	a0,8002af2 <dir_next+0xf8>
 8002b40:	0985                	addi	s3,s3,1
 8002b42:	b765                	j	8002aea <dir_next+0xf0>

08002b44 <dir_sdi.constprop.9>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b44:	1101                	addi	sp,sp,-32
 8002b46:	c84a                	sw	s2,16(sp)
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002b48:	00852903          	lw	s2,8(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b4c:	cc22                	sw	s0,24(sp)
 8002b4e:	ca26                	sw	s1,20(sp)
 8002b50:	ce06                	sw	ra,28(sp)
 8002b52:	c64e                	sw	s3,12(sp)
 8002b54:	c452                	sw	s4,8(sp)
	dp->dptr = ofs;				/* Set current offset */
 8002b56:	00052823          	sw	zero,16(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b5a:	84aa                	mv	s1,a0
	FATFS *fs = dp->obj.fs;
 8002b5c:	4100                	lw	s0,0(a0)
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002b5e:	04091163          	bnez	s2,8002ba0 <dir_sdi.constprop.9+0x5c>
 8002b62:	00044703          	lbu	a4,0(s0)
 8002b66:	4789                	li	a5,2
 8002b68:	00e7f463          	bgeu	a5,a4,8002b70 <dir_sdi.constprop.9+0x2c>
		clst = fs->dirbase;
 8002b6c:	505c                	lw	a5,36(s0)
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002b6e:	eb85                	bnez	a5,8002b9e <dir_sdi.constprop.9+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002b70:	00845783          	lhu	a5,8(s0)
 8002b74:	eb91                	bnez	a5,8002b88 <dir_sdi.constprop.9+0x44>
 8002b76:	4509                	li	a0,2
}
 8002b78:	40f2                	lw	ra,28(sp)
 8002b7a:	4462                	lw	s0,24(sp)
 8002b7c:	44d2                	lw	s1,20(sp)
 8002b7e:	4942                	lw	s2,16(sp)
 8002b80:	49b2                	lw	s3,12(sp)
 8002b82:	4a22                	lw	s4,8(sp)
 8002b84:	6105                	addi	sp,sp,32
 8002b86:	8082                	ret
		dp->sect = fs->dirbase;
 8002b88:	505c                	lw	a5,36(s0)
 8002b8a:	cc9c                	sw	a5,24(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002b8c:	4c9c                	lw	a5,24(s1)
	dp->clust = clst;					/* Current cluster# */
 8002b8e:	0124aa23          	sw	s2,20(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002b92:	d3f5                	beqz	a5,8002b76 <dir_sdi.constprop.9+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002b94:	03040413          	addi	s0,s0,48
 8002b98:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 8002b9a:	4501                	li	a0,0
 8002b9c:	bff1                	j	8002b78 <dir_sdi.constprop.9+0x34>
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002b9e:	893e                	mv	s2,a5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002ba0:	00a45783          	lhu	a5,10(s0)
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ba4:	59fd                	li	s3,-1
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002ba6:	4a05                	li	s4,1
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ba8:	e385                	bnez	a5,8002bc8 <dir_sdi.constprop.9+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002baa:	4088                	lw	a0,0(s1)
 8002bac:	85ca                	mv	a1,s2
 8002bae:	00000097          	auipc	ra,0x0
 8002bb2:	c2e080e7          	jalr	-978(ra) # 80027dc <get_fat.isra.7>
 8002bb6:	892a                	mv	s2,a0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bb8:	03350063          	beq	a0,s3,8002bd8 <dir_sdi.constprop.9+0x94>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002bbc:	faaa7de3          	bgeu	s4,a0,8002b76 <dir_sdi.constprop.9+0x32>
 8002bc0:	485c                	lw	a5,20(s0)
 8002bc2:	fef564e3          	bltu	a0,a5,8002baa <dir_sdi.constprop.9+0x66>
 8002bc6:	bf45                	j	8002b76 <dir_sdi.constprop.9+0x32>
		dp->sect = clst2sect(fs, clst);
 8002bc8:	85ca                	mv	a1,s2
 8002bca:	8522                	mv	a0,s0
 8002bcc:	fffff097          	auipc	ra,0xfffff
 8002bd0:	54e080e7          	jalr	1358(ra) # 800211a <clst2sect>
 8002bd4:	cc88                	sw	a0,24(s1)
 8002bd6:	bf5d                	j	8002b8c <dir_sdi.constprop.9+0x48>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bd8:	4505                	li	a0,1
 8002bda:	bf79                	j	8002b78 <dir_sdi.constprop.9+0x34>

08002bdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002bdc:	7179                	addi	sp,sp,-48
 8002bde:	c62a                	sw	a0,12(sp)
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002be0:	0868                	addi	a0,sp,28
{
 8002be2:	d606                	sw	ra,44(sp)
 8002be4:	c42e                	sw	a1,8(sp)
 8002be6:	c232                	sw	a2,4(sp)
	const TCHAR *rp = path;
 8002be8:	ce2e                	sw	a1,28(sp)
	vol = get_ldnumber(&rp);
 8002bea:	fffff097          	auipc	ra,0xfffff
 8002bee:	54c080e7          	jalr	1356(ra) # 8002136 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002bf2:	04054163          	bltz	a0,8002c34 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002bf6:	200007b7          	lui	a5,0x20000
 8002bfa:	51078713          	addi	a4,a5,1296 # 20000510 <FatFs>
 8002bfe:	050a                	slli	a0,a0,0x2
 8002c00:	972a                	add	a4,a4,a0
 8002c02:	4318                	lw	a4,0(a4)

	if (cfs) {
 8002c04:	51078793          	addi	a5,a5,1296
 8002c08:	4612                	lw	a2,4(sp)
 8002c0a:	c319                	beqz	a4,8002c10 <f_mount+0x34>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002c0c:	00070023          	sb	zero,0(a4)
	}

	if (fs) {
 8002c10:	4732                	lw	a4,12(sp)
 8002c12:	c319                	beqz	a4,8002c18 <f_mount+0x3c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002c14:	00070023          	sb	zero,0(a4)
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002c18:	97aa                	add	a5,a5,a0
 8002c1a:	c398                	sw	a4,0(a5)

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002c1c:	4501                	li	a0,0
 8002c1e:	ca01                	beqz	a2,8002c2e <f_mount+0x52>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002c20:	4601                	li	a2,0
 8002c22:	006c                	addi	a1,sp,12
 8002c24:	0028                	addi	a0,sp,8
 8002c26:	fffff097          	auipc	ra,0xfffff
 8002c2a:	720080e7          	jalr	1824(ra) # 8002346 <find_volume>
	LEAVE_FF(fs, res);
}
 8002c2e:	50b2                	lw	ra,44(sp)
 8002c30:	6145                	addi	sp,sp,48
 8002c32:	8082                	ret
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c34:	452d                	li	a0,11
 8002c36:	bfe5                	j	8002c2e <f_mount+0x52>

08002c38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002c38:	7119                	addi	sp,sp,-128
 8002c3a:	d4d2                	sw	s4,104(sp)
 8002c3c:	de86                	sw	ra,124(sp)
 8002c3e:	dca2                	sw	s0,120(sp)
 8002c40:	daa6                	sw	s1,116(sp)
 8002c42:	d8ca                	sw	s2,112(sp)
 8002c44:	d6ce                	sw	s3,108(sp)
 8002c46:	d2d6                	sw	s5,100(sp)
 8002c48:	d0da                	sw	s6,96(sp)
 8002c4a:	cede                	sw	s7,92(sp)
 8002c4c:	cce2                	sw	s8,88(sp)
 8002c4e:	cae6                	sw	s9,84(sp)
 8002c50:	c8ea                	sw	s10,80(sp)
 8002c52:	c6ee                	sw	s11,76(sp)
 8002c54:	c62e                	sw	a1,12(sp)
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002c56:	4a25                	li	s4,9
 8002c58:	4a050a63          	beqz	a0,800310c <f_open+0x4d4>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002c5c:	03f67993          	andi	s3,a2,63
 8002c60:	8932                	mv	s2,a2
 8002c62:	84aa                	mv	s1,a0
	res = find_volume(&path, &fs, mode);
 8002c64:	864e                	mv	a2,s3
 8002c66:	080c                	addi	a1,sp,16
 8002c68:	0068                	addi	a0,sp,12
 8002c6a:	fffff097          	auipc	ra,0xfffff
 8002c6e:	6dc080e7          	jalr	1756(ra) # 8002346 <find_volume>
 8002c72:	8a2a                	mv	s4,a0
	if (res == FR_OK) {
 8002c74:	842a                	mv	s0,a0
 8002c76:	30051b63          	bnez	a0,8002f8c <f_open+0x354>
		dj.obj.fs = fs;
 8002c7a:	4ac2                	lw	s5,16(sp)
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002c7c:	4d32                	lw	s10,12(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c7e:	02f00693          	li	a3,47
		dj.obj.fs = fs;
 8002c82:	ca56                	sw	s5,20(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c84:	05c00713          	li	a4,92
 8002c88:	000d4783          	lbu	a5,0(s10)
 8002c8c:	0ed78d63          	beq	a5,a3,8002d86 <f_open+0x14e>
 8002c90:	0ee78b63          	beq	a5,a4,8002d86 <f_open+0x14e>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002c94:	ce02                	sw	zero,28(sp)
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002c96:	000d4703          	lbu	a4,0(s10)
 8002c9a:	47fd                	li	a5,31
 8002c9c:	0ee7f763          	bgeu	a5,a4,8002d8a <f_open+0x152>
 8002ca0:	01f10c13          	addi	s8,sp,31
		*d++ = (BYTE)val;
 8002ca4:	02000b13          	li	s6,32
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002ca8:	02f00b93          	li	s7,47
	if (c >= DbcTbl[0]) {
 8002cac:	08000cb7          	lui	s9,0x8000
	mem_set(sfn, ' ', 11);
 8002cb0:	085c                	addi	a5,sp,20
		*d++ = (BYTE)val;
 8002cb2:	03678023          	sb	s6,32(a5)
 8002cb6:	0785                	addi	a5,a5,1
	} while (--cnt);
 8002cb8:	fefc1de3          	bne	s8,a5,8002cb2 <f_open+0x7a>
	si = i = 0; ni = 8;
 8002cbc:	4701                	li	a4,0
 8002cbe:	4601                	li	a2,0
 8002cc0:	45a1                	li	a1,8
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002cc2:	05c00513          	li	a0,92
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002cc6:	02e00813          	li	a6,46
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002cca:	48ad                	li	a7,11
	if (c >= DbcTbl[0]) {
 8002ccc:	07d00313          	li	t1,125
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002cd0:	4e65                	li	t3,25
	if (c >= DbcTbl[4]) {
 8002cd2:	03f00e93          	li	t4,63
		if (c <= DbcTbl[5]) return 1;
 8002cd6:	07e00f13          	li	t5,126
		c = (BYTE)p[si++];				/* Get a byte */
 8002cda:	00cd07b3          	add	a5,s10,a2
 8002cde:	0007c783          	lbu	a5,0(a5)
 8002ce2:	00160693          	addi	a3,a2,1 # 10001 <__stack_size+0xf001>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002ce6:	02fb7063          	bgeu	s6,a5,8002d06 <f_open+0xce>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002cea:	01778463          	beq	a5,s7,8002cf2 <f_open+0xba>
 8002cee:	1aa79763          	bne	a5,a0,8002e9c <f_open+0x264>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002cf2:	05c00593          	li	a1,92
 8002cf6:	00dd0633          	add	a2,s10,a3
 8002cfa:	00064603          	lbu	a2,0(a2)
 8002cfe:	19760d63          	beq	a2,s7,8002e98 <f_open+0x260>
 8002d02:	18b60b63          	beq	a2,a1,8002e98 <f_open+0x260>
	*path = p + si;						/* Return pointer to the next segment */
 8002d06:	9d36                	add	s10,s10,a3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002d08:	18070e63          	beqz	a4,8002ea4 <f_open+0x26c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002d0c:	03414683          	lbu	a3,52(sp)
 8002d10:	0e500713          	li	a4,229
 8002d14:	00e69563          	bne	a3,a4,8002d1e <f_open+0xe6>
 8002d18:	4715                	li	a4,5
 8002d1a:	02e10a23          	sb	a4,52(sp)
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002d1e:	4711                	li	a4,4
 8002d20:	00fb7363          	bgeu	s6,a5,8002d26 <f_open+0xee>
 8002d24:	4701                	li	a4,0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002d26:	0848                	addi	a0,sp,20
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002d28:	02e10fa3          	sb	a4,63(sp)
	FATFS *fs = dp->obj.fs;
 8002d2c:	4dd2                	lw	s11,20(sp)
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002d2e:	00000097          	auipc	ra,0x0
 8002d32:	e16080e7          	jalr	-490(ra) # 8002b44 <dir_sdi.constprop.9>
 8002d36:	842a                	mv	s0,a0
	if (res != FR_OK) return res;
 8002d38:	1e051663          	bnez	a0,8002f24 <f_open+0x2ec>
		res = move_window(fs, dp->sect);
 8002d3c:	55b2                	lw	a1,44(sp)
 8002d3e:	856e                	mv	a0,s11
 8002d40:	fffff097          	auipc	ra,0xfffff
 8002d44:	526080e7          	jalr	1318(ra) # 8002266 <move_window>
 8002d48:	842a                	mv	s0,a0
		if (res != FR_OK) break;
 8002d4a:	1c051d63          	bnez	a0,8002f24 <f_open+0x2ec>
		c = dp->dir[DIR_Name];
 8002d4e:	5542                	lw	a0,48(sp)
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002d50:	00054783          	lbu	a5,0(a0)
 8002d54:	1c078763          	beqz	a5,8002f22 <f_open+0x2ea>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002d58:	00b54783          	lbu	a5,11(a0)
 8002d5c:	03f7f713          	andi	a4,a5,63
 8002d60:	00e10d23          	sb	a4,26(sp)
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002d64:	8ba1                	andi	a5,a5,8
 8002d66:	eb89                	bnez	a5,8002d78 <f_open+0x140>
 8002d68:	462d                	li	a2,11
 8002d6a:	184c                	addi	a1,sp,52
 8002d6c:	fffff097          	auipc	ra,0xfffff
 8002d70:	394080e7          	jalr	916(ra) # 8002100 <mem_cmp>
 8002d74:	1a050863          	beqz	a0,8002f24 <f_open+0x2ec>
		res = dir_next(dp, 0);	/* Next entry */
 8002d78:	4581                	li	a1,0
 8002d7a:	0848                	addi	a0,sp,20
 8002d7c:	00000097          	auipc	ra,0x0
 8002d80:	c7e080e7          	jalr	-898(ra) # 80029fa <dir_next>
 8002d84:	bf4d                	j	8002d36 <f_open+0xfe>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002d86:	0d05                	addi	s10,s10,1
 8002d88:	b701                	j	8002c88 <f_open+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002d8a:	f8000793          	li	a5,-128
		res = dir_sdi(dp, 0);
 8002d8e:	0848                	addi	a0,sp,20
		dp->fn[NSFLAG] = NS_NONAME;
 8002d90:	02f10fa3          	sb	a5,63(sp)
		res = dir_sdi(dp, 0);
 8002d94:	00000097          	auipc	ra,0x0
 8002d98:	db0080e7          	jalr	-592(ra) # 8002b44 <dir_sdi.constprop.9>
 8002d9c:	842a                	mv	s0,a0
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002d9e:	1c050263          	beqz	a0,8002f62 <f_open+0x32a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002da2:	01c97793          	andi	a5,s2,28
 8002da6:	28078563          	beqz	a5,8003030 <f_open+0x3f8>
			if (res != FR_OK) {					/* No file, create new */
 8002daa:	1e040563          	beqz	s0,8002f94 <f_open+0x35c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002dae:	4791                	li	a5,4
 8002db0:	1cf41e63          	bne	s0,a5,8002f8c <f_open+0x354>
	res = dir_sdi(dp, 0);
 8002db4:	0848                	addi	a0,sp,20
	FATFS *fs = dp->obj.fs;
 8002db6:	4952                	lw	s2,20(sp)
	res = dir_sdi(dp, 0);
 8002db8:	00000097          	auipc	ra,0x0
 8002dbc:	d8c080e7          	jalr	-628(ra) # 8002b44 <dir_sdi.constprop.9>
 8002dc0:	842a                	mv	s0,a0
	if (res == FR_OK) {
 8002dc2:	1c051163          	bnez	a0,8002f84 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002dc6:	0e500a93          	li	s5,229
			res = move_window(fs, dp->sect);
 8002dca:	55b2                	lw	a1,44(sp)
 8002dcc:	854a                	mv	a0,s2
 8002dce:	fffff097          	auipc	ra,0xfffff
 8002dd2:	498080e7          	jalr	1176(ra) # 8002266 <move_window>
 8002dd6:	842a                	mv	s0,a0
			if (res != FR_OK) break;
 8002dd8:	1a051663          	bnez	a0,8002f84 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002ddc:	57c2                	lw	a5,48(sp)
 8002dde:	0007c783          	lbu	a5,0(a5)
 8002de2:	19579663          	bne	a5,s5,8002f6e <f_open+0x336>
		res = move_window(fs, dp->sect);
 8002de6:	55b2                	lw	a1,44(sp)
 8002de8:	854a                	mv	a0,s2
 8002dea:	fffff097          	auipc	ra,0xfffff
 8002dee:	47c080e7          	jalr	1148(ra) # 8002266 <move_window>
 8002df2:	842a                	mv	s0,a0
		if (res == FR_OK) {
 8002df4:	18051c63          	bnez	a0,8002f8c <f_open+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002df8:	57c2                	lw	a5,48(sp)
	BYTE *d = (BYTE*)dst;
 8002dfa:	02078713          	addi	a4,a5,32
		*d++ = (BYTE)val;
 8002dfe:	0785                	addi	a5,a5,1
 8002e00:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002e04:	fef71de3          	bne	a4,a5,8002dfe <f_open+0x1c6>
	if (cnt != 0) {
 8002e08:	5542                	lw	a0,48(sp)
 8002e0a:	462d                	li	a2,11
 8002e0c:	184c                	addi	a1,sp,52
 8002e0e:	fffff097          	auipc	ra,0xfffff
 8002e12:	3b4080e7          	jalr	948(ra) # 80021c2 <mem_cpy.part.0>
			fs->wflag = 1;
 8002e16:	4785                	li	a5,1
 8002e18:	00f901a3          	sb	a5,3(s2)
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002e1c:	0089e993          	ori	s3,s3,8
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8002e20:	47c2                	lw	a5,16(sp)
 8002e22:	5442                	lw	s0,48(sp)
 8002e24:	0007c503          	lbu	a0,0(a5)
 8002e28:	85a2                	mv	a1,s0
 8002e2a:	fffff097          	auipc	ra,0xfffff
 8002e2e:	3b2080e7          	jalr	946(ra) # 80021dc <ld_clust.isra.1>
 8002e32:	892a                	mv	s2,a0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8002e34:	00000097          	auipc	ra,0x0
 8002e38:	730080e7          	jalr	1840(ra) # 8003564 <get_fattime>
 8002e3c:	85aa                	mv	a1,a0
 8002e3e:	00e40513          	addi	a0,s0,14
 8002e42:	fffff097          	auipc	ra,0xfffff
 8002e46:	2a2080e7          	jalr	674(ra) # 80020e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002e4a:	57c2                	lw	a5,48(sp)
 8002e4c:	02000713          	li	a4,32
	if (fs->fs_type == FS_FAT32) {
 8002e50:	468d                	li	a3,3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002e52:	00e785a3          	sb	a4,11(a5)
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002e56:	57c2                	lw	a5,48(sp)
 8002e58:	4742                	lw	a4,16(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e5a:	00078d23          	sb	zero,26(a5)
	*ptr++ = (BYTE)val;
 8002e5e:	00078da3          	sb	zero,27(a5)
	if (fs->fs_type == FS_FAT32) {
 8002e62:	00074603          	lbu	a2,0(a4)
 8002e66:	00d61663          	bne	a2,a3,8002e72 <f_open+0x23a>
	*ptr++ = (BYTE)val; val >>= 8;
 8002e6a:	00078a23          	sb	zero,20(a5)
	*ptr++ = (BYTE)val;
 8002e6e:	00078aa3          	sb	zero,21(a5)
					st_dword(dj.dir + DIR_FileSize, 0);
 8002e72:	57c2                	lw	a5,48(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e74:	00078e23          	sb	zero,28(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e78:	00078ea3          	sb	zero,29(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e7c:	00078f23          	sb	zero,30(a5)
	*ptr++ = (BYTE)val;
 8002e80:	00078fa3          	sb	zero,31(a5)
					fs->wflag = 1;
 8002e84:	4785                	li	a5,1
 8002e86:	00f701a3          	sb	a5,3(a4)
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8002e8a:	1c090063          	beqz	s2,800304a <f_open+0x412>
	FATFS *fs = obj->fs;
 8002e8e:	4ad2                	lw	s5,20(sp)
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002e90:	1127ef63          	bltu	a5,s2,8002fae <f_open+0x376>
 8002e94:	4409                	li	s0,2
 8002e96:	a8dd                	j	8002f8c <f_open+0x354>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002e98:	0685                	addi	a3,a3,1
 8002e9a:	bdb1                	j	8002cf6 <f_open+0xbe>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002e9c:	2b078c63          	beq	a5,a6,8003154 <f_open+0x51c>
 8002ea0:	00b76463          	bltu	a4,a1,8002ea8 <f_open+0x270>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002ea4:	4419                	li	s0,6
 8002ea6:	bdf5                	j	8002da2 <f_open+0x16a>
	if (c >= DbcTbl[0]) {
 8002ea8:	07f78f93          	addi	t6,a5,127
 8002eac:	0fffff93          	andi	t6,t6,255
 8002eb0:	05f36763          	bltu	t1,t6,8002efe <f_open+0x2c6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002eb4:	96ea                	add	a3,a3,s10
 8002eb6:	0006cf83          	lbu	t6,0(a3) # 1000 <__stack_size>
 8002eba:	0609                	addi	a2,a2,2
	if (c >= DbcTbl[4]) {
 8002ebc:	fffef4e3          	bgeu	t4,t6,8002ea4 <f_open+0x26c>
		if (c <= DbcTbl[5]) return 1;
 8002ec0:	07fff693          	andi	a3,t6,127
 8002ec4:	fedf60e3          	bltu	t5,a3,8002ea4 <f_open+0x26c>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002ec8:	fff58693          	addi	a3,a1,-1 # efffffff <_sp+0xcfff7fff>
 8002ecc:	fcd77ce3          	bgeu	a4,a3,8002ea4 <f_open+0x26c>
			sfn[i++] = c;
 8002ed0:	0080                	addi	s0,sp,64
 8002ed2:	00170693          	addi	a3,a4,1
 8002ed6:	00e402b3          	add	t0,s0,a4
 8002eda:	fef28a23          	sb	a5,-12(t0)
			sfn[i++] = d;
 8002ede:	87b6                	mv	a5,a3
 8002ee0:	97a2                	add	a5,a5,s0
 8002ee2:	0709                	addi	a4,a4,2
 8002ee4:	fff78a23          	sb	t6,-12(a5)
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002ee8:	86b2                	mv	a3,a2
			i = 8; ni = 11;				/* Enter file extension field */
 8002eea:	8636                	mv	a2,a3
 8002eec:	b3fd                	j	8002cda <f_open+0xa2>
	while (*str && *str != chr) str++;
 8002eee:	0605                	addi	a2,a2,1
 8002ef0:	00064f83          	lbu	t6,0(a2)
 8002ef4:	000f8863          	beqz	t6,8002f04 <f_open+0x2cc>
 8002ef8:	fff79be3          	bne	a5,t6,8002eee <f_open+0x2b6>
 8002efc:	b765                	j	8002ea4 <f_open+0x26c>
	if (c >= DbcTbl[0]) {
 8002efe:	2d0c8613          	addi	a2,s9,720 # 80002d0 <enable_mcycle_minstret+0x84>
 8002f02:	b7fd                	j	8002ef0 <f_open+0x2b8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002f04:	f9f78613          	addi	a2,a5,-97
 8002f08:	0ff67613          	andi	a2,a2,255
 8002f0c:	00ce6563          	bltu	t3,a2,8002f16 <f_open+0x2de>
 8002f10:	1781                	addi	a5,a5,-32
 8002f12:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
 8002f16:	0090                	addi	a2,sp,64
 8002f18:	963a                	add	a2,a2,a4
 8002f1a:	fef60a23          	sb	a5,-12(a2)
 8002f1e:	0705                	addi	a4,a4,1
 8002f20:	b7e9                	j	8002eea <f_open+0x2b2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002f22:	4411                	li	s0,4
			ns = dp->fn[NSFLAG];
 8002f24:	03f14783          	lbu	a5,63(sp)
			if (res != FR_OK) {				/* Failed to find the object */
 8002f28:	c809                	beqz	s0,8002f3a <f_open+0x302>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002f2a:	4711                	li	a4,4
 8002f2c:	e6e41be3          	bne	s0,a4,8002da2 <f_open+0x16a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002f30:	8b91                	andi	a5,a5,4
 8002f32:	e60798e3          	bnez	a5,8002da2 <f_open+0x16a>
				res = FR_NO_PATH; break;
 8002f36:	4415                	li	s0,5
 8002f38:	b5ad                	j	8002da2 <f_open+0x16a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002f3a:	8b91                	andi	a5,a5,4
 8002f3c:	e39d                	bnez	a5,8002f62 <f_open+0x32a>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002f3e:	01a14783          	lbu	a5,26(sp)
 8002f42:	8bc1                	andi	a5,a5,16
 8002f44:	dbed                	beqz	a5,8002f36 <f_open+0x2fe>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002f46:	5792                	lw	a5,36(sp)
 8002f48:	000ac503          	lbu	a0,0(s5)
 8002f4c:	030a8593          	addi	a1,s5,48
 8002f50:	1ff7f793          	andi	a5,a5,511
 8002f54:	95be                	add	a1,a1,a5
 8002f56:	fffff097          	auipc	ra,0xfffff
 8002f5a:	286080e7          	jalr	646(ra) # 80021dc <ld_clust.isra.1>
 8002f5e:	ce2a                	sw	a0,28(sp)
 8002f60:	bb81                	j	8002cb0 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002f62:	03f10783          	lb	a5,63(sp)
		res = follow_path(&dj, path);	/* Follow the file path */
 8002f66:	4401                	li	s0,0
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002f68:	e207dde3          	bgez	a5,8002da2 <f_open+0x16a>
 8002f6c:	bf25                	j	8002ea4 <f_open+0x26c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002f6e:	e6078ce3          	beqz	a5,8002de6 <f_open+0x1ae>
			res = dir_next(dp, 1);
 8002f72:	4585                	li	a1,1
 8002f74:	0848                	addi	a0,sp,20
 8002f76:	00000097          	auipc	ra,0x0
 8002f7a:	a84080e7          	jalr	-1404(ra) # 80029fa <dir_next>
 8002f7e:	842a                	mv	s0,a0
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002f80:	e40505e3          	beqz	a0,8002dca <f_open+0x192>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002f84:	4791                	li	a5,4
 8002f86:	00f41363          	bne	s0,a5,8002f8c <f_open+0x354>
 8002f8a:	441d                	li	s0,7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002f8c:	0004a023          	sw	zero,0(s1)
 8002f90:	8a22                	mv	s4,s0
 8002f92:	aaad                	j	800310c <f_open+0x4d4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002f94:	01a14783          	lbu	a5,26(sp)
 8002f98:	8bc5                	andi	a5,a5,17
 8002f9a:	fbe5                	bnez	a5,8002f8a <f_open+0x352>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002f9c:	00497793          	andi	a5,s2,4
 8002fa0:	1a079663          	bnez	a5,800314c <f_open+0x514>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002fa4:	00897913          	andi	s2,s2,8
 8002fa8:	0a090163          	beqz	s2,800304a <f_open+0x412>
 8002fac:	bd95                	j	8002e20 <f_open+0x1e8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002fae:	014aa783          	lw	a5,20(s5)
 8002fb2:	eef971e3          	bgeu	s2,a5,8002e94 <f_open+0x25c>
						dw = fs->winsect;
 8002fb6:	02c72b83          	lw	s7,44(a4)
 8002fba:	844a                	mv	s0,s2
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002fbc:	4c05                	li	s8,1
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002fbe:	5cfd                	li	s9,-1
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002fc0:	4552                	lw	a0,20(sp)
 8002fc2:	85a2                	mv	a1,s0
 8002fc4:	00000097          	auipc	ra,0x0
 8002fc8:	818080e7          	jalr	-2024(ra) # 80027dc <get_fat.isra.7>
 8002fcc:	8b2a                	mv	s6,a0
		if (nxt == 0) break;				/* Empty cluster? */
 8002fce:	c521                	beqz	a0,8003016 <f_open+0x3de>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002fd0:	ed8502e3          	beq	a0,s8,8002e94 <f_open+0x25c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002fd4:	01951463          	bne	a0,s9,8002fdc <f_open+0x3a4>
 8002fd8:	4405                	li	s0,1
 8002fda:	bf4d                	j	8002f8c <f_open+0x354>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002fdc:	85a2                	mv	a1,s0
 8002fde:	4601                	li	a2,0
 8002fe0:	8556                	mv	a0,s5
 8002fe2:	fffff097          	auipc	ra,0xfffff
 8002fe6:	6a6080e7          	jalr	1702(ra) # 8002688 <put_fat>
 8002fea:	842a                	mv	s0,a0
			if (res != FR_OK) return res;
 8002fec:	f145                	bnez	a0,8002f8c <f_open+0x354>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002fee:	014aa703          	lw	a4,20(s5)
 8002ff2:	010aa783          	lw	a5,16(s5)
 8002ff6:	ffe70693          	addi	a3,a4,-2
 8002ffa:	00d7fb63          	bgeu	a5,a3,8003010 <f_open+0x3d8>
			fs->free_clst++;
 8002ffe:	0785                	addi	a5,a5,1
 8003000:	00faa823          	sw	a5,16(s5)
			fs->fsi_flag |= 1;
 8003004:	004ac783          	lbu	a5,4(s5)
 8003008:	0017e793          	ori	a5,a5,1
 800300c:	00fa8223          	sb	a5,4(s5)
		clst = nxt;					/* Next cluster */
 8003010:	845a                	mv	s0,s6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003012:	faeb67e3          	bltu	s6,a4,8002fc0 <f_open+0x388>
							res = move_window(fs, dw);
 8003016:	4542                	lw	a0,16(sp)
 8003018:	85de                	mv	a1,s7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800301a:	197d                	addi	s2,s2,-1
							res = move_window(fs, dw);
 800301c:	fffff097          	auipc	ra,0xfffff
 8003020:	24a080e7          	jalr	586(ra) # 8002266 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003024:	47c2                	lw	a5,16(sp)
							res = move_window(fs, dw);
 8003026:	842a                	mv	s0,a0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003028:	0127a623          	sw	s2,12(a5)
		if (res == FR_OK) {
 800302c:	cd19                	beqz	a0,800304a <f_open+0x412>
 800302e:	bfb9                	j	8002f8c <f_open+0x354>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003030:	fc31                	bnez	s0,8002f8c <f_open+0x354>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003032:	01a14783          	lbu	a5,26(sp)
 8003036:	0107f713          	andi	a4,a5,16
 800303a:	10071b63          	bnez	a4,8003150 <f_open+0x518>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800303e:	00297913          	andi	s2,s2,2
 8003042:	00090463          	beqz	s2,800304a <f_open+0x412>
 8003046:	8b85                	andi	a5,a5,1
 8003048:	f3a9                	bnez	a5,8002f8a <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800304a:	0089f793          	andi	a5,s3,8
 800304e:	c399                	beqz	a5,8003054 <f_open+0x41c>
 8003050:	0409e993          	ori	s3,s3,64
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003054:	4442                	lw	s0,16(sp)
			fp->dir_ptr = dj.dir;
 8003056:	5942                	lw	s2,48(sp)
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003058:	02848a93          	addi	s5,s1,40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800305c:	545c                	lw	a5,44(s0)
			fp->dir_ptr = dj.dir;
 800305e:	0324a223          	sw	s2,36(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003062:	85ca                	mv	a1,s2
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003064:	d09c                	sw	a5,32(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003066:	00044503          	lbu	a0,0(s0)
 800306a:	fffff097          	auipc	ra,0xfffff
 800306e:	172080e7          	jalr	370(ra) # 80021dc <ld_clust.isra.1>
 8003072:	c488                	sw	a0,8(s1)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003074:	01c90513          	addi	a0,s2,28
 8003078:	fffff097          	auipc	ra,0xfffff
 800307c:	04e080e7          	jalr	78(ra) # 80020c6 <ld_dword>
			fp->obj.id = fs->id;
 8003080:	00645783          	lhu	a5,6(s0)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003084:	c4c8                	sw	a0,12(s1)
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003086:	c080                	sw	s0,0(s1)
			fp->obj.id = fs->id;
 8003088:	00f49223          	sh	a5,4(s1)
			fp->flag = mode;		/* Set file access mode */
 800308c:	01348823          	sb	s3,16(s1)
			fp->err = 0;			/* Clear error flag */
 8003090:	000488a3          	sb	zero,17(s1)
			fp->sect = 0;			/* Invalidate current data sector */
 8003094:	0004ae23          	sw	zero,28(s1)
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003098:	0004aa23          	sw	zero,20(s1)
	BYTE *d = (BYTE*)dst;
 800309c:	22848713          	addi	a4,s1,552
 80030a0:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 80030a2:	0785                	addi	a5,a5,1
 80030a4:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 80030a8:	fee79de3          	bne	a5,a4,80030a2 <f_open+0x46a>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80030ac:	0209f993          	andi	s3,s3,32
 80030b0:	04098e63          	beqz	s3,800310c <f_open+0x4d4>
 80030b4:	00c4a903          	lw	s2,12(s1)
 80030b8:	04090a63          	beqz	s2,800310c <f_open+0x4d4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80030bc:	00a45403          	lhu	s0,10(s0)
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80030c0:	448c                	lw	a1,8(s1)
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80030c2:	0124aa23          	sw	s2,20(s1)
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80030c6:	0426                	slli	s0,s0,0x9
					if (clst <= 1) res = FR_INT_ERR;
 80030c8:	4985                	li	s3,1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80030ca:	5b7d                	li	s6,-1
 80030cc:	07246063          	bltu	s0,s2,800312c <f_open+0x4f4>
 80030d0:	4401                	li	s0,0
				fp->clust = clst;
 80030d2:	cc8c                	sw	a1,24(s1)
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80030d4:	ea041ce3          	bnez	s0,8002f8c <f_open+0x354>
 80030d8:	1ff97793          	andi	a5,s2,511
 80030dc:	cb85                	beqz	a5,800310c <f_open+0x4d4>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80030de:	4442                	lw	s0,16(sp)
 80030e0:	8522                	mv	a0,s0
 80030e2:	fffff097          	auipc	ra,0xfffff
 80030e6:	038080e7          	jalr	56(ra) # 800211a <clst2sect>
 80030ea:	da0505e3          	beqz	a0,8002e94 <f_open+0x25c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80030ee:	00995913          	srli	s2,s2,0x9
 80030f2:	00a90633          	add	a2,s2,a0
 80030f6:	ccd0                	sw	a2,28(s1)
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80030f8:	00144503          	lbu	a0,1(s0)
 80030fc:	4685                	li	a3,1
 80030fe:	85d6                	mv	a1,s5
 8003100:	00001097          	auipc	ra,0x1
 8003104:	aa4080e7          	jalr	-1372(ra) # 8003ba4 <disk_read>
 8003108:	ec0518e3          	bnez	a0,8002fd8 <f_open+0x3a0>

	LEAVE_FF(fs, res);
}
 800310c:	50f6                	lw	ra,124(sp)
 800310e:	5466                	lw	s0,120(sp)
 8003110:	8552                	mv	a0,s4
 8003112:	54d6                	lw	s1,116(sp)
 8003114:	5946                	lw	s2,112(sp)
 8003116:	59b6                	lw	s3,108(sp)
 8003118:	5a26                	lw	s4,104(sp)
 800311a:	5a96                	lw	s5,100(sp)
 800311c:	5b06                	lw	s6,96(sp)
 800311e:	4bf6                	lw	s7,92(sp)
 8003120:	4c66                	lw	s8,88(sp)
 8003122:	4cd6                	lw	s9,84(sp)
 8003124:	4d46                	lw	s10,80(sp)
 8003126:	4db6                	lw	s11,76(sp)
 8003128:	6109                	addi	sp,sp,128
 800312a:	8082                	ret
					clst = get_fat(&fp->obj, clst);
 800312c:	4088                	lw	a0,0(s1)
 800312e:	40890933          	sub	s2,s2,s0
 8003132:	fffff097          	auipc	ra,0xfffff
 8003136:	6aa080e7          	jalr	1706(ra) # 80027dc <get_fat.isra.7>
 800313a:	85aa                	mv	a1,a0
					if (clst <= 1) res = FR_INT_ERR;
 800313c:	00a9f663          	bgeu	s3,a0,8003148 <f_open+0x510>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003140:	f96516e3          	bne	a0,s6,80030cc <f_open+0x494>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003144:	4405                	li	s0,1
 8003146:	b771                	j	80030d2 <f_open+0x49a>
					if (clst <= 1) res = FR_INT_ERR;
 8003148:	4409                	li	s0,2
 800314a:	b761                	j	80030d2 <f_open+0x49a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800314c:	4421                	li	s0,8
 800314e:	bd3d                	j	8002f8c <f_open+0x354>
					res = FR_NO_FILE;
 8003150:	4411                	li	s0,4
 8003152:	bd2d                	j	8002f8c <f_open+0x354>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003154:	d51588e3          	beq	a1,a7,8002ea4 <f_open+0x26c>
			i = 8; ni = 11;				/* Enter file extension field */
 8003158:	4721                	li	a4,8
 800315a:	45ad                	li	a1,11
 800315c:	b379                	j	8002eea <f_open+0x2b2>

0800315e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800315e:	711d                	addi	sp,sp,-96
 8003160:	cca2                	sw	s0,88(sp)
 8003162:	c8ca                	sw	s2,80(sp)
 8003164:	c6ce                	sw	s3,76(sp)
 8003166:	c4d2                	sw	s4,72(sp)
 8003168:	c0da                	sw	s6,64(sp)
 800316a:	ce86                	sw	ra,92(sp)
 800316c:	caa6                	sw	s1,84(sp)
 800316e:	c2d6                	sw	s5,68(sp)
 8003170:	de5e                	sw	s7,60(sp)
 8003172:	dc62                	sw	s8,56(sp)
 8003174:	da66                	sw	s9,52(sp)
 8003176:	d86a                	sw	s10,48(sp)
 8003178:	d66e                	sw	s11,44(sp)
 800317a:	8a2e                	mv	s4,a1
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800317c:	0006a023          	sw	zero,0(a3)
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003180:	086c                	addi	a1,sp,28
{
 8003182:	842a                	mv	s0,a0
 8003184:	8932                	mv	s2,a2
 8003186:	8b36                	mv	s6,a3
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003188:	fffff097          	auipc	ra,0xfffff
 800318c:	fec080e7          	jalr	-20(ra) # 8002174 <validate>
 8003190:	89aa                	mv	s3,a0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003192:	e539                	bnez	a0,80031e0 <f_write+0x82>
 8003194:	01144983          	lbu	s3,17(s0)
 8003198:	04099463          	bnez	s3,80031e0 <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800319c:	01044783          	lbu	a5,16(s0)
 80031a0:	8b89                	andi	a5,a5,2
 80031a2:	1c078063          	beqz	a5,8003362 <f_write+0x204>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80031a6:	485c                	lw	a5,20(s0)
 80031a8:	01278733          	add	a4,a5,s2
 80031ac:	00f77463          	bgeu	a4,a5,80031b4 <f_write+0x56>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80031b0:	fff7c913          	not	s2,a5
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80031b4:	20000b93          	li	s7,512
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80031b8:	02840a93          	addi	s5,s0,40
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80031bc:	1ff00c13          	li	s8,511
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80031c0:	5cfd                	li	s9,-1
 80031c2:	a239                	j	80032d0 <f_write+0x172>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80031c4:	4c0c                	lw	a1,24(s0)
 80031c6:	8522                	mv	a0,s0
 80031c8:	fffff097          	auipc	ra,0xfffff
 80031cc:	70a080e7          	jalr	1802(ra) # 80028d2 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80031d0:	12051663          	bnez	a0,80032fc <f_write+0x19e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80031d4:	01044783          	lbu	a5,16(s0)
 80031d8:	0407e793          	ori	a5,a5,64
 80031dc:	00f40823          	sb	a5,16(s0)

	LEAVE_FF(fs, FR_OK);
}
 80031e0:	40f6                	lw	ra,92(sp)
 80031e2:	4466                	lw	s0,88(sp)
 80031e4:	854e                	mv	a0,s3
 80031e6:	44d6                	lw	s1,84(sp)
 80031e8:	4946                	lw	s2,80(sp)
 80031ea:	49b6                	lw	s3,76(sp)
 80031ec:	4a26                	lw	s4,72(sp)
 80031ee:	4a96                	lw	s5,68(sp)
 80031f0:	4b06                	lw	s6,64(sp)
 80031f2:	5bf2                	lw	s7,60(sp)
 80031f4:	5c62                	lw	s8,56(sp)
 80031f6:	5cd2                	lw	s9,52(sp)
 80031f8:	5d42                	lw	s10,48(sp)
 80031fa:	5db2                	lw	s11,44(sp)
 80031fc:	6125                	addi	sp,sp,96
 80031fe:	8082                	ret
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003200:	01951763          	bne	a0,s9,800320e <f_write+0xb0>
 8003204:	4785                	li	a5,1
 8003206:	00f408a3          	sb	a5,17(s0)
 800320a:	4985                	li	s3,1
 800320c:	bfd1                	j	80031e0 <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800320e:	441c                	lw	a5,8(s0)
				fp->clust = clst;			/* Update current cluster */
 8003210:	cc08                	sw	a0,24(s0)
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003212:	e391                	bnez	a5,8003216 <f_write+0xb8>
 8003214:	c408                	sw	a0,8(s0)
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003216:	01040783          	lb	a5,16(s0)
 800321a:	0207d363          	bgez	a5,8003240 <f_write+0xe2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800321e:	47f2                	lw	a5,28(sp)
 8003220:	4c50                	lw	a2,28(s0)
 8003222:	4685                	li	a3,1
 8003224:	0017c503          	lbu	a0,1(a5)
 8003228:	85d6                	mv	a1,s5
 800322a:	00001097          	auipc	ra,0x1
 800322e:	a1c080e7          	jalr	-1508(ra) # 8003c46 <disk_write>
 8003232:	f969                	bnez	a0,8003204 <f_write+0xa6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003234:	01044783          	lbu	a5,16(s0)
 8003238:	07f7f793          	andi	a5,a5,127
 800323c:	00f40823          	sb	a5,16(s0)
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003240:	47f2                	lw	a5,28(sp)
 8003242:	4c0c                	lw	a1,24(s0)
 8003244:	853e                	mv	a0,a5
 8003246:	c63e                	sw	a5,12(sp)
 8003248:	fffff097          	auipc	ra,0xfffff
 800324c:	ed2080e7          	jalr	-302(ra) # 800211a <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003250:	c94d                	beqz	a0,8003302 <f_write+0x1a4>
			sect += csect;
 8003252:	00ad8d33          	add	s10,s11,a0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003256:	47b2                	lw	a5,12(sp)
 8003258:	0b2c7a63          	bgeu	s8,s2,800330c <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800325c:	00a7d703          	lhu	a4,10(a5)
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003260:	00995493          	srli	s1,s2,0x9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003264:	009d86b3          	add	a3,s11,s1
 8003268:	00d77463          	bgeu	a4,a3,8003270 <f_write+0x112>
					cc = fs->csize - csect;
 800326c:	41b704b3          	sub	s1,a4,s11
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003270:	0017c503          	lbu	a0,1(a5)
 8003274:	86a6                	mv	a3,s1
 8003276:	866a                	mv	a2,s10
 8003278:	85d2                	mv	a1,s4
 800327a:	00001097          	auipc	ra,0x1
 800327e:	9cc080e7          	jalr	-1588(ra) # 8003c46 <disk_write>
 8003282:	f149                	bnez	a0,8003204 <f_write+0xa6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003284:	4c4c                	lw	a1,28(s0)
 8003286:	41a58d33          	sub	s10,a1,s10
 800328a:	029d7263          	bgeu	s10,s1,80032ae <f_write+0x150>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800328e:	0d26                	slli	s10,s10,0x9
 8003290:	20000613          	li	a2,512
 8003294:	01aa05b3          	add	a1,s4,s10
 8003298:	8556                	mv	a0,s5
 800329a:	fffff097          	auipc	ra,0xfffff
 800329e:	f28080e7          	jalr	-216(ra) # 80021c2 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80032a2:	01044783          	lbu	a5,16(s0)
 80032a6:	07f7f793          	andi	a5,a5,127
 80032aa:	00f40823          	sb	a5,16(s0)
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80032ae:	04a6                	slli	s1,s1,0x9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80032b0:	000b2783          	lw	a5,0(s6)
 80032b4:	40990933          	sub	s2,s2,s1
 80032b8:	9a26                	add	s4,s4,s1
 80032ba:	97a6                	add	a5,a5,s1
 80032bc:	00fb2023          	sw	a5,0(s6)
 80032c0:	485c                	lw	a5,20(s0)
 80032c2:	94be                	add	s1,s1,a5
 80032c4:	445c                	lw	a5,12(s0)
 80032c6:	c844                	sw	s1,20(s0)
 80032c8:	0097f363          	bgeu	a5,s1,80032ce <f_write+0x170>
 80032cc:	87a6                	mv	a5,s1
 80032ce:	c45c                	sw	a5,12(s0)
	for ( ;  btw;							/* Repeat until all data written */
 80032d0:	f00902e3          	beqz	s2,80031d4 <f_write+0x76>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80032d4:	485c                	lw	a5,20(s0)
 80032d6:	1ff7f713          	andi	a4,a5,511
 80032da:	ef29                	bnez	a4,8003334 <f_write+0x1d6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80032dc:	4772                	lw	a4,28(sp)
 80032de:	00a75d83          	lhu	s11,10(a4)
 80032e2:	0097d713          	srli	a4,a5,0x9
 80032e6:	1dfd                	addi	s11,s11,-1
 80032e8:	00edfdb3          	and	s11,s11,a4
			if (csect == 0) {				/* On the cluster boundary? */
 80032ec:	f20d95e3          	bnez	s11,8003216 <f_write+0xb8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80032f0:	ec079ae3          	bnez	a5,80031c4 <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80032f4:	4408                	lw	a0,8(s0)
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80032f6:	4581                	li	a1,0
					if (clst == 0) {		/* If no cluster is allocated, */
 80032f8:	ec0507e3          	beqz	a0,80031c6 <f_write+0x68>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80032fc:	4785                	li	a5,1
 80032fe:	f0f511e3          	bne	a0,a5,8003200 <f_write+0xa2>
 8003302:	4789                	li	a5,2
 8003304:	00f408a3          	sb	a5,17(s0)
 8003308:	4989                	li	s3,2
 800330a:	bdd9                	j	80031e0 <f_write+0x82>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800330c:	4c58                	lw	a4,28(s0)
 800330e:	03a70163          	beq	a4,s10,8003330 <f_write+0x1d2>
 8003312:	4454                	lw	a3,12(s0)
 8003314:	4858                	lw	a4,20(s0)
 8003316:	00d77d63          	bgeu	a4,a3,8003330 <f_write+0x1d2>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800331a:	0017c503          	lbu	a0,1(a5)
 800331e:	4685                	li	a3,1
 8003320:	866a                	mv	a2,s10
 8003322:	85d6                	mv	a1,s5
 8003324:	00001097          	auipc	ra,0x1
 8003328:	880080e7          	jalr	-1920(ra) # 8003ba4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800332c:	ec051ce3          	bnez	a0,8003204 <f_write+0xa6>
			fp->sect = sect;
 8003330:	01a42e23          	sw	s10,28(s0)
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003334:	4848                	lw	a0,20(s0)
 8003336:	84ca                	mv	s1,s2
 8003338:	1ff57513          	andi	a0,a0,511
 800333c:	40ab87b3          	sub	a5,s7,a0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003340:	0127f363          	bgeu	a5,s2,8003346 <f_write+0x1e8>
 8003344:	84be                	mv	s1,a5
	if (cnt != 0) {
 8003346:	8626                	mv	a2,s1
 8003348:	85d2                	mv	a1,s4
 800334a:	9556                	add	a0,a0,s5
 800334c:	fffff097          	auipc	ra,0xfffff
 8003350:	e76080e7          	jalr	-394(ra) # 80021c2 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8003354:	01044783          	lbu	a5,16(s0)
 8003358:	f807e793          	ori	a5,a5,-128
 800335c:	00f40823          	sb	a5,16(s0)
 8003360:	bf81                	j	80032b0 <f_write+0x152>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003362:	499d                	li	s3,7
 8003364:	bdb5                	j	80031e0 <f_write+0x82>

08003366 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003366:	1101                	addi	sp,sp,-32
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003368:	006c                	addi	a1,sp,12
{
 800336a:	ca26                	sw	s1,20(sp)
 800336c:	ce06                	sw	ra,28(sp)
 800336e:	cc22                	sw	s0,24(sp)
 8003370:	c84a                	sw	s2,16(sp)
 8003372:	84aa                	mv	s1,a0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003374:	fffff097          	auipc	ra,0xfffff
 8003378:	e00080e7          	jalr	-512(ra) # 8002174 <validate>
 800337c:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800337e:	18051563          	bnez	a0,8003508 <f_sync+0x1a2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003382:	0104c703          	lbu	a4,16(s1)
 8003386:	04077693          	andi	a3,a4,64
 800338a:	16068f63          	beqz	a3,8003508 <f_sync+0x1a2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800338e:	0762                	slli	a4,a4,0x18
 8003390:	8761                	srai	a4,a4,0x18
 8003392:	02075663          	bgez	a4,80033be <f_sync+0x58>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003396:	47b2                	lw	a5,12(sp)
 8003398:	4cd0                	lw	a2,28(s1)
 800339a:	4685                	li	a3,1
 800339c:	0017c503          	lbu	a0,1(a5)
 80033a0:	02848593          	addi	a1,s1,40
 80033a4:	00001097          	auipc	ra,0x1
 80033a8:	8a2080e7          	jalr	-1886(ra) # 8003c46 <disk_write>
 80033ac:	4785                	li	a5,1
 80033ae:	14051d63          	bnez	a0,8003508 <f_sync+0x1a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80033b2:	0104c783          	lbu	a5,16(s1)
 80033b6:	07f7f793          	andi	a5,a5,127
 80033ba:	00f48823          	sb	a5,16(s1)
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80033be:	00000097          	auipc	ra,0x0
 80033c2:	1a6080e7          	jalr	422(ra) # 8003564 <get_fattime>
 80033c6:	892a                	mv	s2,a0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80033c8:	508c                	lw	a1,32(s1)
 80033ca:	4532                	lw	a0,12(sp)
 80033cc:	fffff097          	auipc	ra,0xfffff
 80033d0:	e9a080e7          	jalr	-358(ra) # 8002266 <move_window>
 80033d4:	87aa                	mv	a5,a0
				if (res == FR_OK) {
 80033d6:	12051963          	bnez	a0,8003508 <f_sync+0x1a2>
					dir = fp->dir_ptr;
 80033da:	50c0                	lw	s0,36(s1)
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80033dc:	00b44783          	lbu	a5,11(s0)
 80033e0:	0207e793          	ori	a5,a5,32
 80033e4:	00f405a3          	sb	a5,11(s0)
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80033e8:	449c                	lw	a5,8(s1)
 80033ea:	4094                	lw	a3,0(s1)
	*ptr++ = (BYTE)val; val >>= 8;
 80033ec:	01079713          	slli	a4,a5,0x10
 80033f0:	8341                	srli	a4,a4,0x10
 80033f2:	8321                	srli	a4,a4,0x8
	*ptr++ = (BYTE)val;
 80033f4:	00e40da3          	sb	a4,27(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80033f8:	00f40d23          	sb	a5,26(s0)
	if (fs->fs_type == FS_FAT32) {
 80033fc:	0006c683          	lbu	a3,0(a3)
 8003400:	470d                	li	a4,3
 8003402:	00e69863          	bne	a3,a4,8003412 <f_sync+0xac>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003406:	83c1                	srli	a5,a5,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 8003408:	00f40a23          	sb	a5,20(s0)
 800340c:	83a1                	srli	a5,a5,0x8
	*ptr++ = (BYTE)val;
 800340e:	00f40aa3          	sb	a5,21(s0)
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003412:	44cc                	lw	a1,12(s1)
 8003414:	01c40513          	addi	a0,s0,28
 8003418:	fffff097          	auipc	ra,0xfffff
 800341c:	ccc080e7          	jalr	-820(ra) # 80020e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003420:	85ca                	mv	a1,s2
 8003422:	01640513          	addi	a0,s0,22
 8003426:	fffff097          	auipc	ra,0xfffff
 800342a:	cbe080e7          	jalr	-834(ra) # 80020e4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800342e:	00040923          	sb	zero,18(s0)
	*ptr++ = (BYTE)val;
 8003432:	000409a3          	sb	zero,19(s0)
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8003436:	4432                	lw	s0,12(sp)
 8003438:	4905                	li	s2,1
 800343a:	012401a3          	sb	s2,3(s0)
	if (fs->wflag) {	/* Is the disk access window dirty */
 800343e:	8522                	mv	a0,s0
 8003440:	fffff097          	auipc	ra,0xfffff
 8003444:	dc2080e7          	jalr	-574(ra) # 8002202 <sync_window.part.3>
 8003448:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800344a:	e94d                	bnez	a0,80034fc <f_sync+0x196>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800344c:	00044703          	lbu	a4,0(s0)
 8003450:	478d                	li	a5,3
 8003452:	08f71b63          	bne	a4,a5,80034e8 <f_sync+0x182>
 8003456:	00444783          	lbu	a5,4(s0)
 800345a:	09279763          	bne	a5,s2,80034e8 <f_sync+0x182>
			mem_set(fs->win, 0, sizeof fs->win);
 800345e:	03040913          	addi	s2,s0,48
	BYTE *d = (BYTE*)dst;
 8003462:	23040713          	addi	a4,s0,560
 8003466:	87ca                	mv	a5,s2
		*d++ = (BYTE)val;
 8003468:	0785                	addi	a5,a5,1
 800346a:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 800346e:	fee79de3          	bne	a5,a4,8003468 <f_sync+0x102>
	*ptr++ = (BYTE)val; val >>= 8;
 8003472:	05500793          	li	a5,85
 8003476:	22f40723          	sb	a5,558(s0)
	*ptr++ = (BYTE)val;
 800347a:	faa00793          	li	a5,-86
 800347e:	22f407a3          	sb	a5,559(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003482:	480c                	lw	a1,16(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003484:	05200793          	li	a5,82
	*ptr++ = (BYTE)val;
 8003488:	04100713          	li	a4,65
	*ptr++ = (BYTE)val; val >>= 8;
 800348c:	07200693          	li	a3,114
 8003490:	02f40823          	sb	a5,48(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003494:	02f408a3          	sb	a5,49(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003498:	06100793          	li	a5,97
 800349c:	02f40923          	sb	a5,50(s0)
	*ptr++ = (BYTE)val;
 80034a0:	02e409a3          	sb	a4,51(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034a4:	20d40a23          	sb	a3,532(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034a8:	20d40aa3          	sb	a3,533(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034ac:	20e40b23          	sb	a4,534(s0)
	*ptr++ = (BYTE)val;
 80034b0:	20f40ba3          	sb	a5,535(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80034b4:	21840513          	addi	a0,s0,536
 80034b8:	fffff097          	auipc	ra,0xfffff
 80034bc:	c2c080e7          	jalr	-980(ra) # 80020e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80034c0:	444c                	lw	a1,12(s0)
 80034c2:	21c40513          	addi	a0,s0,540
 80034c6:	fffff097          	auipc	ra,0xfffff
 80034ca:	c1e080e7          	jalr	-994(ra) # 80020e4 <st_dword>
			fs->winsect = fs->volbase + 1;
 80034ce:	4c50                	lw	a2,28(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80034d0:	00144503          	lbu	a0,1(s0)
 80034d4:	4685                	li	a3,1
			fs->winsect = fs->volbase + 1;
 80034d6:	0605                	addi	a2,a2,1
 80034d8:	d450                	sw	a2,44(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80034da:	85ca                	mv	a1,s2
 80034dc:	00000097          	auipc	ra,0x0
 80034e0:	76a080e7          	jalr	1898(ra) # 8003c46 <disk_write>
			fs->fsi_flag = 0;
 80034e4:	00040223          	sb	zero,4(s0)
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80034e8:	00144503          	lbu	a0,1(s0)
 80034ec:	4601                	li	a2,0
 80034ee:	4581                	li	a1,0
 80034f0:	00001097          	auipc	ra,0x1
 80034f4:	85e080e7          	jalr	-1954(ra) # 8003d4e <disk_ioctl>
 80034f8:	00a037b3          	snez	a5,a0
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
 80034fc:	0104c703          	lbu	a4,16(s1)
 8003500:	fbf77713          	andi	a4,a4,-65
 8003504:	00e48823          	sb	a4,16(s1)
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003508:	40f2                	lw	ra,28(sp)
 800350a:	4462                	lw	s0,24(sp)
 800350c:	44d2                	lw	s1,20(sp)
 800350e:	4942                	lw	s2,16(sp)
 8003510:	853e                	mv	a0,a5
 8003512:	6105                	addi	sp,sp,32
 8003514:	8082                	ret

08003516 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003516:	1101                	addi	sp,sp,-32
 8003518:	cc22                	sw	s0,24(sp)
 800351a:	ce06                	sw	ra,28(sp)
 800351c:	842a                	mv	s0,a0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800351e:	00000097          	auipc	ra,0x0
 8003522:	e48080e7          	jalr	-440(ra) # 8003366 <f_sync>
	if (res == FR_OK)
 8003526:	e911                	bnez	a0,800353a <f_close+0x24>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003528:	006c                	addi	a1,sp,12
 800352a:	8522                	mv	a0,s0
 800352c:	fffff097          	auipc	ra,0xfffff
 8003530:	c48080e7          	jalr	-952(ra) # 8002174 <validate>
		if (res == FR_OK) {
 8003534:	e119                	bnez	a0,800353a <f_close+0x24>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003536:	00042023          	sw	zero,0(s0)
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800353a:	40f2                	lw	ra,28(sp)
 800353c:	4462                	lw	s0,24(sp)
 800353e:	6105                	addi	sp,sp,32
 8003540:	8082                	ret

08003542 <set_fattime>:
#include "tf_card.h"

fat_time_t time = {.year = 2020, .month = 3, .day = 6, .hour = 0, .minute = 0};

void set_fattime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second){
    time.year = year;
 8003542:	20000837          	lui	a6,0x20000
 8003546:	4f080813          	addi	a6,a6,1264 # 200004f0 <time>
 800354a:	00a81023          	sh	a0,0(a6)
    time.month = month;
 800354e:	00b80123          	sb	a1,2(a6)
    time.day = day;
 8003552:	00c801a3          	sb	a2,3(a6)
    time.hour = hour;
 8003556:	00d80223          	sb	a3,4(a6)
    time.minute = minute;
 800355a:	00e802a3          	sb	a4,5(a6)
    time.second = second;
 800355e:	00f80323          	sb	a5,6(a6)
}
 8003562:	8082                	ret

08003564 <get_fattime>:

DWORD get_fattime (void){
	return
		(((uint8_t)(time.year - 1980))  << 25) |
		(time.month	                    << 21) |
 8003564:	20000737          	lui	a4,0x20000
 8003568:	4f070713          	addi	a4,a4,1264 # 200004f0 <time>
 800356c:	00274783          	lbu	a5,2(a4)
		(time.day	                    << 16) |
 8003570:	00374503          	lbu	a0,3(a4)
		(time.month	                    << 21) |
 8003574:	07d6                	slli	a5,a5,0x15
		(time.day	                    << 16) |
 8003576:	0542                	slli	a0,a0,0x10
		(time.hour	                    << 11) |
		(time.minute	                <<  5) |
 8003578:	8fc9                	or	a5,a5,a0
		(time.second	                <<  0);
 800357a:	00674503          	lbu	a0,6(a4)
		(time.minute	                <<  5) |
 800357e:	8fc9                	or	a5,a5,a0
		(time.hour	                    << 11) |
 8003580:	00474503          	lbu	a0,4(a4)
 8003584:	052e                	slli	a0,a0,0xb
		(time.minute	                <<  5) |
 8003586:	8fc9                	or	a5,a5,a0
 8003588:	00574503          	lbu	a0,5(a4)
 800358c:	0516                	slli	a0,a0,0x5
 800358e:	8fc9                	or	a5,a5,a0
		(((uint8_t)(time.year - 1980))  << 25) |
 8003590:	00074503          	lbu	a0,0(a4)
 8003594:	04450513          	addi	a0,a0,68
 8003598:	0566                	slli	a0,a0,0x19
 800359a:	8d5d                	or	a0,a0,a5
 800359c:	8082                	ret

0800359e <xchg_spi>:

/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
){
 800359e:	1141                	addi	sp,sp,-16
 80035a0:	c422                	sw	s0,8(sp)
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80035a2:	40004437          	lui	s0,0x40004
){
 80035a6:	c226                	sw	s1,4(sp)
 80035a8:	c04a                	sw	s2,0(sp)
 80035aa:	c606                	sw	ra,12(sp)
 80035ac:	84aa                	mv	s1,a0
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80035ae:	80040913          	addi	s2,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80035b2:	4589                	li	a1,2
 80035b4:	854a                	mv	a0,s2
 80035b6:	ffffe097          	auipc	ra,0xffffe
 80035ba:	e1e080e7          	jalr	-482(ra) # 80013d4 <spi_i2s_flag_get>
 80035be:	d975                	beqz	a0,80035b2 <xchg_spi+0x14>
        spi_i2s_data_transmit(SPI1, dat);
 80035c0:	85a6                	mv	a1,s1
 80035c2:	80040513          	addi	a0,s0,-2048
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80035c6:	40004437          	lui	s0,0x40004
        spi_i2s_data_transmit(SPI1, dat);
 80035ca:	ffffe097          	auipc	ra,0xffffe
 80035ce:	df2080e7          	jalr	-526(ra) # 80013bc <spi_i2s_data_transmit>
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80035d2:	80040493          	addi	s1,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80035d6:	4585                	li	a1,1
 80035d8:	8526                	mv	a0,s1
 80035da:	ffffe097          	auipc	ra,0xffffe
 80035de:	dfa080e7          	jalr	-518(ra) # 80013d4 <spi_i2s_flag_get>
 80035e2:	d975                	beqz	a0,80035d6 <xchg_spi+0x38>
        return(spi_i2s_data_receive(SPI1));     /* Return received byte */
 80035e4:	80040513          	addi	a0,s0,-2048
 80035e8:	ffffe097          	auipc	ra,0xffffe
 80035ec:	dd8080e7          	jalr	-552(ra) # 80013c0 <spi_i2s_data_receive>
}
 80035f0:	40b2                	lw	ra,12(sp)
 80035f2:	4422                	lw	s0,8(sp)
 80035f4:	4492                	lw	s1,4(sp)
 80035f6:	4902                	lw	s2,0(sp)
 80035f8:	0ff57513          	andi	a0,a0,255
 80035fc:	0141                	addi	sp,sp,16
 80035fe:	8082                	ret

08003600 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void){
 8003600:	1141                	addi	sp,sp,-16
	CS_HIGH();		/* Set CS# high */
 8003602:	40011537          	lui	a0,0x40011
 8003606:	6591                	lui	a1,0x4
void deselect (void){
 8003608:	c606                	sw	ra,12(sp)
	CS_HIGH();		/* Set CS# high */
 800360a:	ffffe097          	auipc	ra,0xffffe
 800360e:	994080e7          	jalr	-1644(ra) # 8000f9e <gpio_bit_set>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
}
 8003612:	40b2                	lw	ra,12(sp)
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003614:	0ff00513          	li	a0,255
}
 8003618:	0141                	addi	sp,sp,16
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800361a:	00000317          	auipc	t1,0x0
 800361e:	f8430067          	jr	-124(t1) # 800359e <xchg_spi>

08003622 <wait_ready>:
){
 8003622:	7139                	addi	sp,sp,-64
 8003624:	da26                	sw	s1,52(sp)
 8003626:	d05a                	sw	s6,32(sp)
 8003628:	ce5e                	sw	s7,28(sp)
 800362a:	cc62                	sw	s8,24(sp)
 800362c:	ca66                	sw	s9,20(sp)
 800362e:	c86a                	sw	s10,16(sp)
 8003630:	de06                	sw	ra,60(sp)
 8003632:	dc22                	sw	s0,56(sp)
 8003634:	d84a                	sw	s2,48(sp)
 8003636:	d64e                	sw	s3,44(sp)
 8003638:	d452                	sw	s4,40(sp)
 800363a:	d256                	sw	s5,36(sp)
 800363c:	84aa                	mv	s1,a0
	start_mtime = get_timer_value();
 800363e:	ffffe097          	auipc	ra,0xffffe
 8003642:	74c080e7          	jalr	1868(ra) # 8001d8a <get_timer_value>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003646:	080007b7          	lui	a5,0x8000
 800364a:	2e07ab03          	lw	s6,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 800364e:	2e47ab83          	lw	s7,740(a5)
	start_mtime = get_timer_value();
 8003652:	8caa                	mv	s9,a0
 8003654:	8d2e                	mv	s10,a1
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003656:	20000c37          	lui	s8,0x20000
		delta_mtime = get_timer_value();
 800365a:	ffffe097          	auipc	ra,0xffffe
 800365e:	730080e7          	jalr	1840(ra) # 8001d8a <get_timer_value>
		delta_mtime -=  start_mtime;
 8003662:	41950933          	sub	s2,a0,s9
 8003666:	01253533          	sltu	a0,a0,s2
 800366a:	41a585b3          	sub	a1,a1,s10
 800366e:	8d89                	sub	a1,a1,a0
		d = xchg_spi(0xFF);
 8003670:	0ff00513          	li	a0,255
		delta_mtime -=  start_mtime;
 8003674:	c62e                	sw	a1,12(sp)
		d = xchg_spi(0xFF);
 8003676:	00000097          	auipc	ra,0x0
 800367a:	f28080e7          	jalr	-216(ra) # 800359e <xchg_spi>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800367e:	0ff00793          	li	a5,255
		d = xchg_spi(0xFF);
 8003682:	842a                	mv	s0,a0
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003684:	04f50f63          	beq	a0,a5,80036e2 <wait_ready+0xc0>
 8003688:	45b2                	lw	a1,12(sp)
 800368a:	854a                	mv	a0,s2
 800368c:	00004097          	auipc	ra,0x4
 8003690:	04a080e7          	jalr	74(ra) # 80076d6 <__floatundidf>
 8003694:	892a                	mv	s2,a0
 8003696:	4e8c2503          	lw	a0,1256(s8) # 200004e8 <SystemCoreClock>
 800369a:	89ae                	mv	s3,a1
 800369c:	00004097          	auipc	ra,0x4
 80036a0:	fe4080e7          	jalr	-28(ra) # 8007680 <__floatunsidf>
 80036a4:	865a                	mv	a2,s6
 80036a6:	86de                	mv	a3,s7
 80036a8:	00003097          	auipc	ra,0x3
 80036ac:	4ce080e7          	jalr	1230(ra) # 8006b76 <__divdf3>
 80036b0:	8a2a                	mv	s4,a0
 80036b2:	8526                	mv	a0,s1
 80036b4:	8aae                	mv	s5,a1
 80036b6:	00004097          	auipc	ra,0x4
 80036ba:	fca080e7          	jalr	-54(ra) # 8007680 <__floatunsidf>
 80036be:	862a                	mv	a2,a0
 80036c0:	86ae                	mv	a3,a1
 80036c2:	8552                	mv	a0,s4
 80036c4:	85d6                	mv	a1,s5
 80036c6:	00004097          	auipc	ra,0x4
 80036ca:	a9a080e7          	jalr	-1382(ra) # 8007160 <__muldf3>
 80036ce:	862a                	mv	a2,a0
 80036d0:	86ae                	mv	a3,a1
 80036d2:	854a                	mv	a0,s2
 80036d4:	85ce                	mv	a1,s3
 80036d6:	00004097          	auipc	ra,0x4
 80036da:	9e6080e7          	jalr	-1562(ra) # 80070bc <__ledf2>
 80036de:	f6054ee3          	bltz	a0,800365a <wait_ready+0x38>
	return (d == 0xFF) ? 1 : 0; 
 80036e2:	f0140513          	addi	a0,s0,-255
}
 80036e6:	50f2                	lw	ra,60(sp)
 80036e8:	5462                	lw	s0,56(sp)
 80036ea:	54d2                	lw	s1,52(sp)
 80036ec:	5942                	lw	s2,48(sp)
 80036ee:	59b2                	lw	s3,44(sp)
 80036f0:	5a22                	lw	s4,40(sp)
 80036f2:	5a92                	lw	s5,36(sp)
 80036f4:	5b02                	lw	s6,32(sp)
 80036f6:	4bf2                	lw	s7,28(sp)
 80036f8:	4c62                	lw	s8,24(sp)
 80036fa:	4cd2                	lw	s9,20(sp)
 80036fc:	4d42                	lw	s10,16(sp)
 80036fe:	00153513          	seqz	a0,a0
 8003702:	6121                	addi	sp,sp,64
 8003704:	8082                	ret

08003706 <_select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int _select (void)	/* 1:OK, 0:Timeout */
{
 8003706:	1101                	addi	sp,sp,-32
	CS_LOW();		/* Set CS# low */
 8003708:	6591                	lui	a1,0x4
 800370a:	40011537          	lui	a0,0x40011
{
 800370e:	ce06                	sw	ra,28(sp)
	CS_LOW();		/* Set CS# low */
 8003710:	ffffe097          	auipc	ra,0xffffe
 8003714:	892080e7          	jalr	-1902(ra) # 8000fa2 <gpio_bit_reset>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003718:	0ff00513          	li	a0,255
 800371c:	00000097          	auipc	ra,0x0
 8003720:	e82080e7          	jalr	-382(ra) # 800359e <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003724:	1f400513          	li	a0,500
 8003728:	00000097          	auipc	ra,0x0
 800372c:	efa080e7          	jalr	-262(ra) # 8003622 <wait_ready>
 8003730:	c62a                	sw	a0,12(sp)
 8003732:	e909                	bnez	a0,8003744 <_select+0x3e>

	deselect();
 8003734:	00000097          	auipc	ra,0x0
 8003738:	ecc080e7          	jalr	-308(ra) # 8003600 <deselect>
	return 0;	/* Timeout */
 800373c:	4532                	lw	a0,12(sp)
}
 800373e:	40f2                	lw	ra,28(sp)
 8003740:	6105                	addi	sp,sp,32
 8003742:	8082                	ret
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003744:	4505                	li	a0,1
 8003746:	bfe5                	j	800373e <_select+0x38>

08003748 <send_cmd>:

static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
){
 8003748:	1141                	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800374a:	01851793          	slli	a5,a0,0x18
){
 800374e:	c422                	sw	s0,8(sp)
 8003750:	c226                	sw	s1,4(sp)
 8003752:	c606                	sw	ra,12(sp)
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003754:	87e1                	srai	a5,a5,0x18
){
 8003756:	842a                	mv	s0,a0
 8003758:	84ae                	mv	s1,a1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800375a:	0007df63          	bgez	a5,8003778 <send_cmd+0x30>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 800375e:	4581                	li	a1,0
 8003760:	03700513          	li	a0,55
 8003764:	00000097          	auipc	ra,0x0
 8003768:	fe4080e7          	jalr	-28(ra) # 8003748 <send_cmd>
		if (res > 1) return res;
 800376c:	4705                	li	a4,1
		res = send_cmd(CMD55, 0);
 800376e:	87aa                	mv	a5,a0
		if (res > 1) return res;
 8003770:	0aa76c63          	bltu	a4,a0,8003828 <send_cmd+0xe0>
		cmd &= 0x7F;
 8003774:	07f47413          	andi	s0,s0,127
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003778:	47b1                	li	a5,12
 800377a:	08f41c63          	bne	s0,a5,8003812 <send_cmd+0xca>
		deselect();
		if (!_select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800377e:	04046513          	ori	a0,s0,64
 8003782:	00000097          	auipc	ra,0x0
 8003786:	e1c080e7          	jalr	-484(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800378a:	0184d513          	srli	a0,s1,0x18
 800378e:	00000097          	auipc	ra,0x0
 8003792:	e10080e7          	jalr	-496(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003796:	0104d513          	srli	a0,s1,0x10
 800379a:	0ff57513          	andi	a0,a0,255
 800379e:	00000097          	auipc	ra,0x0
 80037a2:	e00080e7          	jalr	-512(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80037a6:	0084d513          	srli	a0,s1,0x8
 80037aa:	0ff57513          	andi	a0,a0,255
 80037ae:	00000097          	auipc	ra,0x0
 80037b2:	df0080e7          	jalr	-528(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80037b6:	0ff4f513          	andi	a0,s1,255
 80037ba:	00000097          	auipc	ra,0x0
 80037be:	de4080e7          	jalr	-540(ra) # 800359e <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80037c2:	09500513          	li	a0,149
 80037c6:	c419                	beqz	s0,80037d4 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037c8:	47a1                	li	a5,8
	n = 0x01;							/* Dummy CRC + Stop */
 80037ca:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037cc:	00f41463          	bne	s0,a5,80037d4 <send_cmd+0x8c>
 80037d0:	08700513          	li	a0,135
	xchg_spi(n);
 80037d4:	00000097          	auipc	ra,0x0
 80037d8:	dca080e7          	jalr	-566(ra) # 800359e <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80037dc:	47b1                	li	a5,12
 80037de:	00f41863          	bne	s0,a5,80037ee <send_cmd+0xa6>
 80037e2:	0ff00513          	li	a0,255
 80037e6:	00000097          	auipc	ra,0x0
 80037ea:	db8080e7          	jalr	-584(ra) # 800359e <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037ee:	4429                	li	s0,10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 80037f0:	0ff00513          	li	a0,255
 80037f4:	00000097          	auipc	ra,0x0
 80037f8:	daa080e7          	jalr	-598(ra) # 800359e <xchg_spi>
	} while ((res & 0x80) && --n);
 80037fc:	01851713          	slli	a4,a0,0x18
 8003800:	8761                	srai	a4,a4,0x18
		res = xchg_spi(0xFF);
 8003802:	87aa                	mv	a5,a0
	} while ((res & 0x80) && --n);
 8003804:	02075263          	bgez	a4,8003828 <send_cmd+0xe0>
 8003808:	147d                	addi	s0,s0,-1
 800380a:	0ff47413          	andi	s0,s0,255
 800380e:	f06d                	bnez	s0,80037f0 <send_cmd+0xa8>
 8003810:	a821                	j	8003828 <send_cmd+0xe0>
		deselect();
 8003812:	00000097          	auipc	ra,0x0
 8003816:	dee080e7          	jalr	-530(ra) # 8003600 <deselect>
		if (!_select()) return 0xFF;
 800381a:	00000097          	auipc	ra,0x0
 800381e:	eec080e7          	jalr	-276(ra) # 8003706 <_select>
 8003822:	0ff00793          	li	a5,255
 8003826:	fd21                	bnez	a0,800377e <send_cmd+0x36>

	return res;							/* Return received response */
}
 8003828:	40b2                	lw	ra,12(sp)
 800382a:	4422                	lw	s0,8(sp)
 800382c:	4492                	lw	s1,4(sp)
 800382e:	853e                	mv	a0,a5
 8003830:	0141                	addi	sp,sp,16
 8003832:	8082                	ret

08003834 <rcvr_datablock>:
){
 8003834:	1141                	addi	sp,sp,-16
 8003836:	c422                	sw	s0,8(sp)
 8003838:	842a                	mv	s0,a0
	tf_start_timer(200);
 800383a:	0c800513          	li	a0,200
){
 800383e:	c226                	sw	s1,4(sp)
 8003840:	c606                	sw	ra,12(sp)
 8003842:	84ae                	mv	s1,a1
	tf_start_timer(200);
 8003844:	00000097          	auipc	ra,0x0
 8003848:	728080e7          	jalr	1832(ra) # 8003f6c <tf_start_timer>
		token = xchg_spi(0xFF);
 800384c:	0ff00513          	li	a0,255
 8003850:	00000097          	auipc	ra,0x0
 8003854:	d4e080e7          	jalr	-690(ra) # 800359e <xchg_spi>
	} while ((token == 0xFF) && tf_timer_done());
 8003858:	0ff00793          	li	a5,255
 800385c:	00f51d63          	bne	a0,a5,8003876 <rcvr_datablock+0x42>
 8003860:	00000097          	auipc	ra,0x0
 8003864:	766080e7          	jalr	1894(ra) # 8003fc6 <tf_timer_done>
 8003868:	f175                	bnez	a0,800384c <rcvr_datablock+0x18>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800386a:	4501                	li	a0,0
}
 800386c:	40b2                	lw	ra,12(sp)
 800386e:	4422                	lw	s0,8(sp)
 8003870:	4492                	lw	s1,4(sp)
 8003872:	0141                	addi	sp,sp,16
 8003874:	8082                	ret
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003876:	0fe00793          	li	a5,254
 800387a:	fef518e3          	bne	a0,a5,800386a <rcvr_datablock+0x36>
 800387e:	0485                	addi	s1,s1,1
 8003880:	94a2                	add	s1,s1,s0
		*buff = xchg_spi(0xff);
 8003882:	0ff00513          	li	a0,255
 8003886:	00000097          	auipc	ra,0x0
 800388a:	d18080e7          	jalr	-744(ra) # 800359e <xchg_spi>
 800388e:	00a40023          	sb	a0,0(s0)
		buff++;
 8003892:	0405                	addi	s0,s0,1
	} while (btr--);
 8003894:	fe8497e3          	bne	s1,s0,8003882 <rcvr_datablock+0x4e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003898:	0ff00513          	li	a0,255
 800389c:	00000097          	auipc	ra,0x0
 80038a0:	d02080e7          	jalr	-766(ra) # 800359e <xchg_spi>
 80038a4:	0ff00513          	li	a0,255
 80038a8:	00000097          	auipc	ra,0x0
 80038ac:	cf6080e7          	jalr	-778(ra) # 800359e <xchg_spi>
 80038b0:	4505                	li	a0,1
 80038b2:	bf6d                	j	800386c <rcvr_datablock+0x38>

080038b4 <xmit_datablock.part.1>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 80038b4:	1141                	addi	sp,sp,-16
 80038b6:	c422                	sw	s0,8(sp)
 80038b8:	c226                	sw	s1,4(sp)
 80038ba:	c04a                	sw	s2,0(sp)
 80038bc:	c606                	sw	ra,12(sp)
 80038be:	892a                	mv	s2,a0
	for(UINT i=0; i<btx; i++) {
 80038c0:	4401                	li	s0,0
 80038c2:	20000493          	li	s1,512
		xchg_spi(*(buff+i));
 80038c6:	008907b3          	add	a5,s2,s0
 80038ca:	0007c503          	lbu	a0,0(a5)
	for(UINT i=0; i<btx; i++) {
 80038ce:	0405                	addi	s0,s0,1
		xchg_spi(*(buff+i));
 80038d0:	00000097          	auipc	ra,0x0
 80038d4:	cce080e7          	jalr	-818(ra) # 800359e <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80038d8:	fe9417e3          	bne	s0,s1,80038c6 <xmit_datablock.part.1+0x12>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80038dc:	0ff00513          	li	a0,255
 80038e0:	00000097          	auipc	ra,0x0
 80038e4:	cbe080e7          	jalr	-834(ra) # 800359e <xchg_spi>
 80038e8:	0ff00513          	li	a0,255
 80038ec:	00000097          	auipc	ra,0x0
 80038f0:	cb2080e7          	jalr	-846(ra) # 800359e <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80038f4:	0ff00513          	li	a0,255
 80038f8:	00000097          	auipc	ra,0x0
 80038fc:	ca6080e7          	jalr	-858(ra) # 800359e <xchg_spi>
}
 8003900:	40b2                	lw	ra,12(sp)
 8003902:	4422                	lw	s0,8(sp)
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003904:	897d                	andi	a0,a0,31
 8003906:	156d                	addi	a0,a0,-5
}
 8003908:	4492                	lw	s1,4(sp)
 800390a:	4902                	lw	s2,0(sp)
 800390c:	00153513          	seqz	a0,a0
 8003910:	0141                	addi	sp,sp,16
 8003912:	8082                	ret

08003914 <disk_initialize>:

DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003914:	26051c63          	bnez	a0,8003b8c <disk_initialize+0x278>
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 8003918:	7179                	addi	sp,sp,-48
    rcu_periph_clock_enable(RCU_GPIOB);
 800391a:	60300513          	li	a0,1539
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 800391e:	d606                	sw	ra,44(sp)
 8003920:	d422                	sw	s0,40(sp)
 8003922:	d226                	sw	s1,36(sp)
 8003924:	d04a                	sw	s2,32(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8003926:	ffffe097          	auipc	ra,0xffffe
 800392a:	87c080e7          	jalr	-1924(ra) # 80011a2 <rcu_periph_clock_enable>
	rcu_periph_clock_enable(RCU_GPIOC);
 800392e:	60400513          	li	a0,1540
 8003932:	ffffe097          	auipc	ra,0xffffe
 8003936:	870080e7          	jalr	-1936(ra) # 80011a2 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_SPI1);
 800393a:	70e00513          	li	a0,1806
 800393e:	ffffe097          	auipc	ra,0xffffe
 8003942:	864080e7          	jalr	-1948(ra) # 80011a2 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_13 | GPIO_PIN_15);
 8003946:	40011437          	lui	s0,0x40011
 800394a:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 800394e:	66a9                	lui	a3,0xa
 8003950:	460d                	li	a2,3
 8003952:	45e1                	li	a1,24
 8003954:	ffffd097          	auipc	ra,0xffffd
 8003958:	5a6080e7          	jalr	1446(ra) # 8000efa <gpio_init>
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 800395c:	c0040513          	addi	a0,s0,-1024
 8003960:	6691                	lui	a3,0x4
 8003962:	460d                	li	a2,3
 8003964:	4591                	li	a1,4
 8003966:	ffffd097          	auipc	ra,0xffffd
 800396a:	594080e7          	jalr	1428(ra) # 8000efa <gpio_init>
    gpio_init(GPIOC, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 800396e:	6691                	lui	a3,0x4
 8003970:	460d                	li	a2,3
 8003972:	45c1                	li	a1,16
 8003974:	40011537          	lui	a0,0x40011
 8003978:	ffffd097          	auipc	ra,0xffffd
 800397c:	582080e7          	jalr	1410(ra) # 8000efa <gpio_init>
    CS_HIGH();
 8003980:	6591                	lui	a1,0x4
 8003982:	40011537          	lui	a0,0x40011
 8003986:	ffffd097          	auipc	ra,0xffffd
 800398a:	618080e7          	jalr	1560(ra) # 8000f9e <gpio_bit_set>
    spi_init_struct.device_mode          = SPI_MASTER;
 800398e:	10400793          	li	a5,260
 8003992:	c23e                	sw	a5,4(sp)
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 8003994:	478d                	li	a5,3
    spi_init(SPI1, &spi_init_struct);
 8003996:	400044b7          	lui	s1,0x40004
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 800399a:	cc3e                	sw	a5,24(sp)
    spi_init_struct.nss                  = SPI_NSS_SOFT;
 800399c:	20000793          	li	a5,512
 80039a0:	c83e                	sw	a5,16(sp)
    spi_init(SPI1, &spi_init_struct);
 80039a2:	004c                	addi	a1,sp,4
    spi_init_struct.prescale             = SPI_PSC_64;
 80039a4:	02800793          	li	a5,40
    spi_init(SPI1, &spi_init_struct);
 80039a8:	80048513          	addi	a0,s1,-2048 # 40003800 <_sp+0x1fffb800>
    spi_init_struct.prescale             = SPI_PSC_64;
 80039ac:	ce3e                	sw	a5,28(sp)
    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;
 80039ae:	c402                	sw	zero,8(sp)
    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;
 80039b0:	c602                	sw	zero,12(sp)
    spi_init_struct.endian               = SPI_ENDIAN_MSB;
 80039b2:	ca02                	sw	zero,20(sp)
    spi_init(SPI1, &spi_init_struct);
 80039b4:	ffffe097          	auipc	ra,0xffffe
 80039b8:	9c8080e7          	jalr	-1592(ra) # 800137c <spi_init>
    spi_crc_polynomial_set(SPI1,7);
 80039bc:	459d                	li	a1,7
 80039be:	80048513          	addi	a0,s1,-2048
 80039c2:	ffffe097          	auipc	ra,0xffffe
 80039c6:	a06080e7          	jalr	-1530(ra) # 80013c8 <spi_crc_polynomial_set>
    spi_enable(SPI1);
 80039ca:	80048513          	addi	a0,s1,-2048
 80039ce:	ffffe097          	auipc	ra,0xffffe
 80039d2:	9e4080e7          	jalr	-1564(ra) # 80013b2 <spi_enable>
	init_spi();							/* Initialize SPI */
    delay_1ms(10);
 80039d6:	4529                	li	a0,10
 80039d8:	00001097          	auipc	ra,0x1
 80039dc:	dce080e7          	jalr	-562(ra) # 80047a6 <delay_1ms>
    //init_timer2();

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80039e0:	20000437          	lui	s0,0x20000
 80039e4:	4f840713          	addi	a4,s0,1272 # 200004f8 <Stat>
 80039e8:	00074783          	lbu	a5,0(a4)
 80039ec:	4f840413          	addi	s0,s0,1272
 80039f0:	8b89                	andi	a5,a5,2
 80039f2:	cb99                	beqz	a5,8003a08 <disk_initialize+0xf4>
 80039f4:	00074503          	lbu	a0,0(a4)
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
}
 80039f8:	50b2                	lw	ra,44(sp)
 80039fa:	5422                	lw	s0,40(sp)
 80039fc:	5492                	lw	s1,36(sp)
 80039fe:	5902                	lw	s2,32(sp)
	return Stat;
 8003a00:	0ff57513          	andi	a0,a0,255
}
 8003a04:	6145                	addi	sp,sp,48
 8003a06:	8082                	ret
	FCLK_SLOW();
 8003a08:	8004a783          	lw	a5,-2048(s1)
	CS_LOW();
 8003a0c:	6591                	lui	a1,0x4
 8003a0e:	40011537          	lui	a0,0x40011
	FCLK_SLOW();
 8003a12:	fc77f793          	andi	a5,a5,-57
 8003a16:	0287e793          	ori	a5,a5,40
 8003a1a:	80f4a023          	sw	a5,-2048(s1)
	CS_LOW();
 8003a1e:	ffffd097          	auipc	ra,0xffffd
 8003a22:	584080e7          	jalr	1412(ra) # 8000fa2 <gpio_bit_reset>
 8003a26:	44a9                	li	s1,10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003a28:	14fd                	addi	s1,s1,-1
 8003a2a:	0ff00513          	li	a0,255
 8003a2e:	0ff4f493          	andi	s1,s1,255
 8003a32:	00000097          	auipc	ra,0x0
 8003a36:	b6c080e7          	jalr	-1172(ra) # 800359e <xchg_spi>
 8003a3a:	f4fd                	bnez	s1,8003a28 <disk_initialize+0x114>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003a3c:	4581                	li	a1,0
 8003a3e:	4501                	li	a0,0
 8003a40:	00000097          	auipc	ra,0x0
 8003a44:	d08080e7          	jalr	-760(ra) # 8003748 <send_cmd>
 8003a48:	4785                	li	a5,1
 8003a4a:	892a                	mv	s2,a0
 8003a4c:	12f51e63          	bne	a0,a5,8003b88 <disk_initialize+0x274>
		tf_start_timer(1000);						/* Initialization timeout = 1 sec */
 8003a50:	3e800513          	li	a0,1000
 8003a54:	00000097          	auipc	ra,0x0
 8003a58:	518080e7          	jalr	1304(ra) # 8003f6c <tf_start_timer>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003a5c:	1aa00593          	li	a1,426
 8003a60:	4521                	li	a0,8
 8003a62:	00000097          	auipc	ra,0x0
 8003a66:	ce6080e7          	jalr	-794(ra) # 8003748 <send_cmd>
 8003a6a:	0d251963          	bne	a0,s2,8003b3c <disk_initialize+0x228>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003a6e:	4911                	li	s2,4
 8003a70:	0ff00513          	li	a0,255
 8003a74:	00000097          	auipc	ra,0x0
 8003a78:	b2a080e7          	jalr	-1238(ra) # 800359e <xchg_spi>
 8003a7c:	005c                	addi	a5,sp,4
 8003a7e:	97a6                	add	a5,a5,s1
 8003a80:	00a78023          	sb	a0,0(a5)
 8003a84:	0485                	addi	s1,s1,1
 8003a86:	ff2495e3          	bne	s1,s2,8003a70 <disk_initialize+0x15c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003a8a:	00614703          	lbu	a4,6(sp)
 8003a8e:	4785                	li	a5,1
 8003a90:	0ef71c63          	bne	a4,a5,8003b88 <disk_initialize+0x274>
 8003a94:	00714703          	lbu	a4,7(sp)
 8003a98:	0aa00793          	li	a5,170
 8003a9c:	0ef71663          	bne	a4,a5,8003b88 <disk_initialize+0x274>
				while (tf_timer_done() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003aa0:	00000097          	auipc	ra,0x0
 8003aa4:	526080e7          	jalr	1318(ra) # 8003fc6 <tf_timer_done>
 8003aa8:	c911                	beqz	a0,8003abc <disk_initialize+0x1a8>
 8003aaa:	400005b7          	lui	a1,0x40000
 8003aae:	0a900513          	li	a0,169
 8003ab2:	00000097          	auipc	ra,0x0
 8003ab6:	c96080e7          	jalr	-874(ra) # 8003748 <send_cmd>
 8003aba:	f17d                	bnez	a0,8003aa0 <disk_initialize+0x18c>
				if (tf_timer_done() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003abc:	00000097          	auipc	ra,0x0
 8003ac0:	50a080e7          	jalr	1290(ra) # 8003fc6 <tf_timer_done>
 8003ac4:	c171                	beqz	a0,8003b88 <disk_initialize+0x274>
 8003ac6:	4581                	li	a1,0
 8003ac8:	03a00513          	li	a0,58
 8003acc:	00000097          	auipc	ra,0x0
 8003ad0:	c7c080e7          	jalr	-900(ra) # 8003748 <send_cmd>
 8003ad4:	e955                	bnez	a0,8003b88 <disk_initialize+0x274>
 8003ad6:	4481                	li	s1,0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003ad8:	4911                	li	s2,4
 8003ada:	0ff00513          	li	a0,255
 8003ade:	00000097          	auipc	ra,0x0
 8003ae2:	ac0080e7          	jalr	-1344(ra) # 800359e <xchg_spi>
 8003ae6:	005c                	addi	a5,sp,4
 8003ae8:	97a6                	add	a5,a5,s1
 8003aea:	00a78023          	sb	a0,0(a5)
 8003aee:	0485                	addi	s1,s1,1
 8003af0:	ff2495e3          	bne	s1,s2,8003ada <disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003af4:	00414783          	lbu	a5,4(sp)
 8003af8:	44b1                	li	s1,12
 8003afa:	0407f793          	andi	a5,a5,64
 8003afe:	e391                	bnez	a5,8003b02 <disk_initialize+0x1ee>
 8003b00:	4491                	li	s1,4
	CardType = ty;	/* Card type */
 8003b02:	200007b7          	lui	a5,0x20000
 8003b06:	50978b23          	sb	s1,1302(a5) # 20000516 <CardType>
	deselect();
 8003b0a:	00000097          	auipc	ra,0x0
 8003b0e:	af6080e7          	jalr	-1290(ra) # 8003600 <deselect>
		Stat = STA_NOINIT;
 8003b12:	4785                	li	a5,1
	if (ty) {			/* OK */
 8003b14:	cc99                	beqz	s1,8003b32 <disk_initialize+0x21e>
		FCLK_FAST();			/* Set fast clock */
 8003b16:	40004737          	lui	a4,0x40004
 8003b1a:	80072783          	lw	a5,-2048(a4) # 40003800 <_sp+0x1fffb800>
 8003b1e:	fc77f793          	andi	a5,a5,-57
 8003b22:	0287e793          	ori	a5,a5,40
 8003b26:	80f72023          	sw	a5,-2048(a4)
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b2a:	00044783          	lbu	a5,0(s0)
 8003b2e:	0fe7f793          	andi	a5,a5,254
		Stat = STA_NOINIT;
 8003b32:	00f40023          	sb	a5,0(s0)
	return Stat;
 8003b36:	00044503          	lbu	a0,0(s0)
 8003b3a:	bd7d                	j	80039f8 <disk_initialize+0xe4>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b3c:	4581                	li	a1,0
 8003b3e:	0a900513          	li	a0,169
 8003b42:	00000097          	auipc	ra,0x0
 8003b46:	c06080e7          	jalr	-1018(ra) # 8003748 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003b4a:	4485                	li	s1,1
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b4c:	00a96563          	bltu	s2,a0,8003b56 <disk_initialize+0x242>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003b50:	4489                	li	s1,2
 8003b52:	0a900913          	li	s2,169
			while (tf_timer_done() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003b56:	00000097          	auipc	ra,0x0
 8003b5a:	470080e7          	jalr	1136(ra) # 8003fc6 <tf_timer_done>
 8003b5e:	c901                	beqz	a0,8003b6e <disk_initialize+0x25a>
 8003b60:	4581                	li	a1,0
 8003b62:	854a                	mv	a0,s2
 8003b64:	00000097          	auipc	ra,0x0
 8003b68:	be4080e7          	jalr	-1052(ra) # 8003748 <send_cmd>
 8003b6c:	f56d                	bnez	a0,8003b56 <disk_initialize+0x242>
			if (!tf_timer_done() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003b6e:	00000097          	auipc	ra,0x0
 8003b72:	458080e7          	jalr	1112(ra) # 8003fc6 <tf_timer_done>
 8003b76:	c909                	beqz	a0,8003b88 <disk_initialize+0x274>
 8003b78:	20000593          	li	a1,512
 8003b7c:	4541                	li	a0,16
 8003b7e:	00000097          	auipc	ra,0x0
 8003b82:	bca080e7          	jalr	-1078(ra) # 8003748 <send_cmd>
 8003b86:	dd35                	beqz	a0,8003b02 <disk_initialize+0x1ee>
				ty = 0;
 8003b88:	4481                	li	s1,0
 8003b8a:	bfa5                	j	8003b02 <disk_initialize+0x1ee>
	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003b8c:	4505                	li	a0,1
}
 8003b8e:	8082                	ret

08003b90 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
){
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003b90:	e901                	bnez	a0,8003ba0 <disk_status+0x10>

	return Stat;	/* Return disk status */
 8003b92:	200007b7          	lui	a5,0x20000
 8003b96:	4f87c503          	lbu	a0,1272(a5) # 200004f8 <Stat>
 8003b9a:	0ff57513          	andi	a0,a0,255
 8003b9e:	8082                	ret
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003ba0:	4505                	li	a0,1
}
 8003ba2:	8082                	ret

08003ba4 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ba4:	ed59                	bnez	a0,8003c42 <disk_read+0x9e>
){
 8003ba6:	1141                	addi	sp,sp,-16
 8003ba8:	c422                	sw	s0,8(sp)
 8003baa:	c606                	sw	ra,12(sp)
 8003bac:	c226                	sw	s1,4(sp)
 8003bae:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003bb0:	4511                	li	a0,4
 8003bb2:	cab1                	beqz	a3,8003c06 <disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003bb4:	200007b7          	lui	a5,0x20000
 8003bb8:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003bbc:	450d                	li	a0,3
 8003bbe:	8b85                	andi	a5,a5,1
 8003bc0:	e3b9                	bnez	a5,8003c06 <disk_read+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003bc2:	200007b7          	lui	a5,0x20000
 8003bc6:	5167c783          	lbu	a5,1302(a5) # 20000516 <CardType>
 8003bca:	84ae                	mv	s1,a1
 8003bcc:	85b2                	mv	a1,a2
 8003bce:	8ba1                	andi	a5,a5,8
 8003bd0:	e399                	bnez	a5,8003bd6 <disk_read+0x32>
 8003bd2:	00961593          	slli	a1,a2,0x9

	if (count == 1) {	/* Single sector read */
 8003bd6:	4785                	li	a5,1
 8003bd8:	02f41c63          	bne	s0,a5,8003c10 <disk_read+0x6c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003bdc:	4545                	li	a0,17
 8003bde:	00000097          	auipc	ra,0x0
 8003be2:	b6a080e7          	jalr	-1174(ra) # 8003748 <send_cmd>
 8003be6:	e911                	bnez	a0,8003bfa <disk_read+0x56>
			&& rcvr_datablock(buff, 512)) {
 8003be8:	20000593          	li	a1,512
 8003bec:	8526                	mv	a0,s1
 8003bee:	00000097          	auipc	ra,0x0
 8003bf2:	c46080e7          	jalr	-954(ra) # 8003834 <rcvr_datablock>
 8003bf6:	00153413          	seqz	s0,a0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
 8003bfa:	00000097          	auipc	ra,0x0
 8003bfe:	a06080e7          	jalr	-1530(ra) # 8003600 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003c02:	00803533          	snez	a0,s0
}
 8003c06:	40b2                	lw	ra,12(sp)
 8003c08:	4422                	lw	s0,8(sp)
 8003c0a:	4492                	lw	s1,4(sp)
 8003c0c:	0141                	addi	sp,sp,16
 8003c0e:	8082                	ret
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003c10:	4549                	li	a0,18
 8003c12:	00000097          	auipc	ra,0x0
 8003c16:	b36080e7          	jalr	-1226(ra) # 8003748 <send_cmd>
 8003c1a:	f165                	bnez	a0,8003bfa <disk_read+0x56>
				if (!rcvr_datablock(buff, 512)) break;
 8003c1c:	20000593          	li	a1,512
 8003c20:	8526                	mv	a0,s1
 8003c22:	00000097          	auipc	ra,0x0
 8003c26:	c12080e7          	jalr	-1006(ra) # 8003834 <rcvr_datablock>
 8003c2a:	c509                	beqz	a0,8003c34 <disk_read+0x90>
			} while (--count);
 8003c2c:	147d                	addi	s0,s0,-1
				buff += 512;
 8003c2e:	20048493          	addi	s1,s1,512
			} while (--count);
 8003c32:	f46d                	bnez	s0,8003c1c <disk_read+0x78>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003c34:	4581                	li	a1,0
 8003c36:	4531                	li	a0,12
 8003c38:	00000097          	auipc	ra,0x0
 8003c3c:	b10080e7          	jalr	-1264(ra) # 8003748 <send_cmd>
 8003c40:	bf6d                	j	8003bfa <disk_read+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c42:	4511                	li	a0,4
}
 8003c44:	8082                	ret

08003c46 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c46:	10051263          	bnez	a0,8003d4a <disk_write+0x104>
){
 8003c4a:	1101                	addi	sp,sp,-32
 8003c4c:	cc22                	sw	s0,24(sp)
 8003c4e:	ce06                	sw	ra,28(sp)
 8003c50:	ca26                	sw	s1,20(sp)
 8003c52:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c54:	4511                	li	a0,4
 8003c56:	caa9                	beqz	a3,8003ca8 <disk_write+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003c58:	200007b7          	lui	a5,0x20000
 8003c5c:	4f878793          	addi	a5,a5,1272 # 200004f8 <Stat>
 8003c60:	0007c703          	lbu	a4,0(a5)
 8003c64:	450d                	li	a0,3
 8003c66:	8b05                	andi	a4,a4,1
 8003c68:	e321                	bnez	a4,8003ca8 <disk_write+0x62>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003c6a:	0007c783          	lbu	a5,0(a5)
 8003c6e:	4509                	li	a0,2
 8003c70:	8b91                	andi	a5,a5,4
 8003c72:	eb9d                	bnez	a5,8003ca8 <disk_write+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003c74:	200007b7          	lui	a5,0x20000
 8003c78:	5167c783          	lbu	a5,1302(a5) # 20000516 <CardType>
 8003c7c:	84ae                	mv	s1,a1
 8003c7e:	0087f713          	andi	a4,a5,8
 8003c82:	e311                	bnez	a4,8003c86 <disk_write+0x40>
 8003c84:	0626                	slli	a2,a2,0x9

	if (count == 1) {	/* Single sector write */
 8003c86:	4705                	li	a4,1
 8003c88:	04e41a63          	bne	s0,a4,8003cdc <disk_write+0x96>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003c8c:	85b2                	mv	a1,a2
 8003c8e:	4561                	li	a0,24
 8003c90:	00000097          	auipc	ra,0x0
 8003c94:	ab8080e7          	jalr	-1352(ra) # 8003748 <send_cmd>
 8003c98:	cd09                	beqz	a0,8003cb2 <disk_write+0x6c>
){
 8003c9a:	4405                	li	s0,1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
 8003c9c:	00000097          	auipc	ra,0x0
 8003ca0:	964080e7          	jalr	-1692(ra) # 8003600 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ca4:	00803533          	snez	a0,s0
}
 8003ca8:	40f2                	lw	ra,28(sp)
 8003caa:	4462                	lw	s0,24(sp)
 8003cac:	44d2                	lw	s1,20(sp)
 8003cae:	6105                	addi	sp,sp,32
 8003cb0:	8082                	ret
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003cb2:	1f400513          	li	a0,500
 8003cb6:	00000097          	auipc	ra,0x0
 8003cba:	96c080e7          	jalr	-1684(ra) # 8003622 <wait_ready>
 8003cbe:	dd71                	beqz	a0,8003c9a <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003cc0:	0fe00513          	li	a0,254
 8003cc4:	00000097          	auipc	ra,0x0
 8003cc8:	8da080e7          	jalr	-1830(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ccc:	8526                	mv	a0,s1
 8003cce:	00000097          	auipc	ra,0x0
 8003cd2:	be6080e7          	jalr	-1050(ra) # 80038b4 <xmit_datablock.part.1>
			&& xmit_datablock(buff, 0xFE)) {
 8003cd6:	00153413          	seqz	s0,a0
 8003cda:	b7c9                	j	8003c9c <disk_write+0x56>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003cdc:	8b99                	andi	a5,a5,6
 8003cde:	cb91                	beqz	a5,8003cf2 <disk_write+0xac>
 8003ce0:	85a2                	mv	a1,s0
 8003ce2:	09700513          	li	a0,151
 8003ce6:	c632                	sw	a2,12(sp)
 8003ce8:	00000097          	auipc	ra,0x0
 8003cec:	a60080e7          	jalr	-1440(ra) # 8003748 <send_cmd>
 8003cf0:	4632                	lw	a2,12(sp)
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003cf2:	85b2                	mv	a1,a2
 8003cf4:	4565                	li	a0,25
 8003cf6:	00000097          	auipc	ra,0x0
 8003cfa:	a52080e7          	jalr	-1454(ra) # 8003748 <send_cmd>
 8003cfe:	fd59                	bnez	a0,8003c9c <disk_write+0x56>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003d00:	1f400513          	li	a0,500
 8003d04:	00000097          	auipc	ra,0x0
 8003d08:	91e080e7          	jalr	-1762(ra) # 8003622 <wait_ready>
 8003d0c:	c10d                	beqz	a0,8003d2e <disk_write+0xe8>
	xchg_spi(token);					/* Send token */
 8003d0e:	0fc00513          	li	a0,252
 8003d12:	00000097          	auipc	ra,0x0
 8003d16:	88c080e7          	jalr	-1908(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d1a:	8526                	mv	a0,s1
 8003d1c:	00000097          	auipc	ra,0x0
 8003d20:	b98080e7          	jalr	-1128(ra) # 80038b4 <xmit_datablock.part.1>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003d24:	c509                	beqz	a0,8003d2e <disk_write+0xe8>
			} while (--count);
 8003d26:	147d                	addi	s0,s0,-1
				buff += 512;
 8003d28:	20048493          	addi	s1,s1,512
			} while (--count);
 8003d2c:	f871                	bnez	s0,8003d00 <disk_write+0xba>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003d2e:	1f400513          	li	a0,500
 8003d32:	00000097          	auipc	ra,0x0
 8003d36:	8f0080e7          	jalr	-1808(ra) # 8003622 <wait_ready>
 8003d3a:	d125                	beqz	a0,8003c9a <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003d3c:	0fd00513          	li	a0,253
 8003d40:	00000097          	auipc	ra,0x0
 8003d44:	85e080e7          	jalr	-1954(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d48:	bf91                	j	8003c9c <disk_write+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d4a:	4511                	li	a0,4
}
 8003d4c:	8082                	ret

08003d4e <disk_ioctl>:

DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
){
 8003d4e:	1101                	addi	sp,sp,-32
 8003d50:	ca26                	sw	s1,20(sp)
 8003d52:	ce06                	sw	ra,28(sp)
 8003d54:	cc22                	sw	s0,24(sp)
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003d56:	4491                	li	s1,4
 8003d58:	e90d                	bnez	a0,8003d8a <disk_ioctl+0x3c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003d5a:	200007b7          	lui	a5,0x20000
 8003d5e:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003d62:	448d                	li	s1,3
 8003d64:	8b85                	andi	a5,a5,1
 8003d66:	e395                	bnez	a5,8003d8a <disk_ioctl+0x3c>

	res = RES_ERROR;

	switch (cmd) {
 8003d68:	4785                	li	a5,1
 8003d6a:	8432                	mv	s0,a2
 8003d6c:	84ae                	mv	s1,a1
 8003d6e:	02f58b63          	beq	a1,a5,8003da4 <disk_ioctl+0x56>
 8003d72:	c195                	beqz	a1,8003d96 <disk_ioctl+0x48>
 8003d74:	478d                	li	a5,3
 8003d76:	0af58863          	beq	a1,a5,8003e26 <disk_ioctl+0xd8>
 8003d7a:	4791                	li	a5,4
 8003d7c:	16f58363          	beq	a1,a5,8003ee2 <disk_ioctl+0x194>
			res = RES_OK;	/* FatFs does not check result of this command */
		}
		break;

	default:
		res = RES_PARERR;
 8003d80:	4491                	li	s1,4
	}

	deselect();
 8003d82:	00000097          	auipc	ra,0x0
 8003d86:	87e080e7          	jalr	-1922(ra) # 8003600 <deselect>

	return res;
}
 8003d8a:	40f2                	lw	ra,28(sp)
 8003d8c:	4462                	lw	s0,24(sp)
 8003d8e:	8526                	mv	a0,s1
 8003d90:	44d2                	lw	s1,20(sp)
 8003d92:	6105                	addi	sp,sp,32
 8003d94:	8082                	ret
		if (_select()) res = RES_OK;
 8003d96:	00000097          	auipc	ra,0x0
 8003d9a:	970080e7          	jalr	-1680(ra) # 8003706 <_select>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d9e:	00153493          	seqz	s1,a0
 8003da2:	b7c5                	j	8003d82 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003da4:	4581                	li	a1,0
 8003da6:	4525                	li	a0,9
 8003da8:	00000097          	auipc	ra,0x0
 8003dac:	9a0080e7          	jalr	-1632(ra) # 8003748 <send_cmd>
 8003db0:	c119                	beqz	a0,8003db6 <disk_ioctl+0x68>
	res = RES_ERROR;
 8003db2:	4485                	li	s1,1
 8003db4:	b7f9                	j	8003d82 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003db6:	45c1                	li	a1,16
 8003db8:	850a                	mv	a0,sp
 8003dba:	00000097          	auipc	ra,0x0
 8003dbe:	a7a080e7          	jalr	-1414(ra) # 8003834 <rcvr_datablock>
 8003dc2:	d965                	beqz	a0,8003db2 <disk_ioctl+0x64>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003dc4:	00014603          	lbu	a2,0(sp)
 8003dc8:	00814783          	lbu	a5,8(sp)
 8003dcc:	00914683          	lbu	a3,9(sp)
 8003dd0:	8219                	srli	a2,a2,0x6
 8003dd2:	00714703          	lbu	a4,7(sp)
 8003dd6:	00961e63          	bne	a2,s1,8003df2 <disk_ioctl+0xa4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003dda:	07a2                	slli	a5,a5,0x8
 8003ddc:	97b6                	add	a5,a5,a3
 8003dde:	0742                	slli	a4,a4,0x10
 8003de0:	003f06b7          	lui	a3,0x3f0
 8003de4:	8f75                	and	a4,a4,a3
 8003de6:	0705                	addi	a4,a4,1
 8003de8:	97ba                	add	a5,a5,a4
				*(DWORD*)buff = csize << 10;
 8003dea:	07aa                	slli	a5,a5,0xa
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003dec:	c01c                	sw	a5,0(s0)
				res = RES_OK;
 8003dee:	4481                	li	s1,0
 8003df0:	bf49                	j	8003d82 <disk_ioctl+0x34>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003df2:	070a                	slli	a4,a4,0x2
 8003df4:	8399                	srli	a5,a5,0x6
 8003df6:	97ba                	add	a5,a5,a4
 8003df8:	00614703          	lbu	a4,6(sp)
 8003dfc:	6605                	lui	a2,0x1
 8003dfe:	c0060613          	addi	a2,a2,-1024 # c00 <__dbg_stack_size+0xc00>
 8003e02:	072a                	slli	a4,a4,0xa
 8003e04:	8f71                	and	a4,a4,a2
 8003e06:	97ba                	add	a5,a5,a4
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003e08:	00a14603          	lbu	a2,10(sp)
 8003e0c:	00514703          	lbu	a4,5(sp)
 8003e10:	0686                	slli	a3,a3,0x1
 8003e12:	821d                	srli	a2,a2,0x7
 8003e14:	8b3d                	andi	a4,a4,15
 8003e16:	9732                	add	a4,a4,a2
 8003e18:	8a99                	andi	a3,a3,6
				*(DWORD*)buff = csize << (n - 9);
 8003e1a:	9736                	add	a4,a4,a3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003e1c:	0785                	addi	a5,a5,1
				*(DWORD*)buff = csize << (n - 9);
 8003e1e:	1765                	addi	a4,a4,-7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003e20:	00e797b3          	sll	a5,a5,a4
 8003e24:	b7e1                	j	8003dec <disk_ioctl+0x9e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e26:	200004b7          	lui	s1,0x20000
 8003e2a:	51648493          	addi	s1,s1,1302 # 20000516 <CardType>
 8003e2e:	0004c783          	lbu	a5,0(s1)
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e32:	4581                	li	a1,0
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e34:	8b91                	andi	a5,a5,4
 8003e36:	cbb1                	beqz	a5,8003e8a <disk_ioctl+0x13c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e38:	08d00513          	li	a0,141
 8003e3c:	00000097          	auipc	ra,0x0
 8003e40:	90c080e7          	jalr	-1780(ra) # 8003748 <send_cmd>
 8003e44:	f53d                	bnez	a0,8003db2 <disk_ioctl+0x64>
				xchg_spi(0xFF);
 8003e46:	0ff00513          	li	a0,255
 8003e4a:	fffff097          	auipc	ra,0xfffff
 8003e4e:	754080e7          	jalr	1876(ra) # 800359e <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003e52:	45c1                	li	a1,16
 8003e54:	850a                	mv	a0,sp
 8003e56:	00000097          	auipc	ra,0x0
 8003e5a:	9de080e7          	jalr	-1570(ra) # 8003834 <rcvr_datablock>
 8003e5e:	d931                	beqz	a0,8003db2 <disk_ioctl+0x64>
 8003e60:	03000493          	li	s1,48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003e64:	14fd                	addi	s1,s1,-1
 8003e66:	0ff00513          	li	a0,255
 8003e6a:	0ff4f493          	andi	s1,s1,255
 8003e6e:	fffff097          	auipc	ra,0xfffff
 8003e72:	730080e7          	jalr	1840(ra) # 800359e <xchg_spi>
 8003e76:	f4fd                	bnez	s1,8003e64 <disk_ioctl+0x116>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003e78:	00a14783          	lbu	a5,10(sp)
 8003e7c:	0047d713          	srli	a4,a5,0x4
 8003e80:	47c1                	li	a5,16
 8003e82:	00e797b3          	sll	a5,a5,a4
 8003e86:	c01c                	sw	a5,0(s0)
					res = RES_OK;
 8003e88:	bded                	j	8003d82 <disk_ioctl+0x34>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003e8a:	4525                	li	a0,9
 8003e8c:	00000097          	auipc	ra,0x0
 8003e90:	8bc080e7          	jalr	-1860(ra) # 8003748 <send_cmd>
 8003e94:	fd19                	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003e96:	45c1                	li	a1,16
 8003e98:	850a                	mv	a0,sp
 8003e9a:	00000097          	auipc	ra,0x0
 8003e9e:	99a080e7          	jalr	-1638(ra) # 8003834 <rcvr_datablock>
 8003ea2:	d901                	beqz	a0,8003db2 <disk_ioctl+0x64>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ea4:	0004c703          	lbu	a4,0(s1)
 8003ea8:	00a14783          	lbu	a5,10(sp)
 8003eac:	00b14683          	lbu	a3,11(sp)
 8003eb0:	8b09                	andi	a4,a4,2
 8003eb2:	cf01                	beqz	a4,8003eca <disk_ioctl+0x17c>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003eb4:	00d14703          	lbu	a4,13(sp)
 8003eb8:	0786                	slli	a5,a5,0x1
 8003eba:	07e7f793          	andi	a5,a5,126
 8003ebe:	829d                	srli	a3,a3,0x7
 8003ec0:	97b6                	add	a5,a5,a3
 8003ec2:	8319                	srli	a4,a4,0x6
 8003ec4:	0785                	addi	a5,a5,1
 8003ec6:	177d                	addi	a4,a4,-1
 8003ec8:	bfa1                	j	8003e20 <disk_ioctl+0xd2>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003eca:	00369713          	slli	a4,a3,0x3
 8003ece:	8b61                	andi	a4,a4,24
 8003ed0:	8295                	srli	a3,a3,0x5
 8003ed2:	8789                	srai	a5,a5,0x2
 8003ed4:	9736                	add	a4,a4,a3
 8003ed6:	8bfd                	andi	a5,a5,31
 8003ed8:	0705                	addi	a4,a4,1
 8003eda:	0785                	addi	a5,a5,1
 8003edc:	02f707b3          	mul	a5,a4,a5
 8003ee0:	b731                	j	8003dec <disk_ioctl+0x9e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ee2:	200004b7          	lui	s1,0x20000
 8003ee6:	51648493          	addi	s1,s1,1302 # 20000516 <CardType>
 8003eea:	0004c783          	lbu	a5,0(s1)
 8003eee:	8b99                	andi	a5,a5,6
 8003ef0:	ec0781e3          	beqz	a5,8003db2 <disk_ioctl+0x64>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003ef4:	860a                	mv	a2,sp
 8003ef6:	45ad                	li	a1,11
 8003ef8:	00000097          	auipc	ra,0x0
 8003efc:	e56080e7          	jalr	-426(ra) # 8003d4e <disk_ioctl>
 8003f00:	ea0519e3          	bnez	a0,8003db2 <disk_ioctl+0x64>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003f04:	00014783          	lbu	a5,0(sp)
 8003f08:	00a14703          	lbu	a4,10(sp)
 8003f0c:	8399                	srli	a5,a5,0x6
 8003f0e:	04077713          	andi	a4,a4,64
 8003f12:	8fd9                	or	a5,a5,a4
 8003f14:	e8078fe3          	beqz	a5,8003db2 <disk_ioctl+0x64>
		if (!(CardType & CT_BLOCK)) {
 8003f18:	0004c783          	lbu	a5,0(s1)
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003f1c:	400c                	lw	a1,0(s0)
 8003f1e:	4040                	lw	s0,4(s0)
		if (!(CardType & CT_BLOCK)) {
 8003f20:	8ba1                	andi	a5,a5,8
 8003f22:	e399                	bnez	a5,8003f28 <disk_ioctl+0x1da>
			st *= 512; ed *= 512;
 8003f24:	05a6                	slli	a1,a1,0x9
 8003f26:	0426                	slli	s0,s0,0x9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003f28:	02000513          	li	a0,32
 8003f2c:	00000097          	auipc	ra,0x0
 8003f30:	81c080e7          	jalr	-2020(ra) # 8003748 <send_cmd>
 8003f34:	e6051fe3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f38:	85a2                	mv	a1,s0
 8003f3a:	02100513          	li	a0,33
 8003f3e:	00000097          	auipc	ra,0x0
 8003f42:	80a080e7          	jalr	-2038(ra) # 8003748 <send_cmd>
 8003f46:	e60516e3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f4a:	4581                	li	a1,0
 8003f4c:	02600513          	li	a0,38
 8003f50:	fffff097          	auipc	ra,0xfffff
 8003f54:	7f8080e7          	jalr	2040(ra) # 8003748 <send_cmd>
 8003f58:	e4051de3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f5c:	651d                	lui	a0,0x7
 8003f5e:	53050513          	addi	a0,a0,1328 # 7530 <__stack_size+0x6530>
 8003f62:	fffff097          	auipc	ra,0xfffff
 8003f66:	6c0080e7          	jalr	1728(ra) # 8003622 <wait_ready>
 8003f6a:	bd15                	j	8003d9e <disk_ioctl+0x50>

08003f6c <tf_start_timer>:


volatile uint64_t tf_current_time = 0;
volatile uint64_t tf_delay_until = 0;

void tf_start_timer(int32_t millis){
 8003f6c:	1141                	addi	sp,sp,-16
 8003f6e:	c422                	sw	s0,8(sp)
 8003f70:	c606                	sw	ra,12(sp)
 8003f72:	842a                	mv	s0,a0
    tf_current_time = get_timer_value();
 8003f74:	ffffe097          	auipc	ra,0xffffe
 8003f78:	e16080e7          	jalr	-490(ra) # 8001d8a <get_timer_value>
 8003f7c:	200007b7          	lui	a5,0x20000
 8003f80:	51878793          	addi	a5,a5,1304 # 20000518 <tf_current_time>
 8003f84:	c388                	sw	a0,0(a5)
 8003f86:	c3cc                	sw	a1,4(a5)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003f88:	0007a803          	lw	a6,0(a5)
 8003f8c:	0047a883          	lw	a7,4(a5)
 8003f90:	200007b7          	lui	a5,0x20000
 8003f94:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8003f98:	6785                	lui	a5,0x1
 8003f9a:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8003f9e:	02f55533          	divu	a0,a0,a5
 8003fa2:	200006b7          	lui	a3,0x20000
}
 8003fa6:	40b2                	lw	ra,12(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003fa8:	02850533          	mul	a0,a0,s0
}
 8003fac:	4422                	lw	s0,8(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003fae:	01050633          	add	a2,a0,a6
 8003fb2:	00a63533          	sltu	a0,a2,a0
 8003fb6:	52c6a023          	sw	a2,1312(a3) # 20000520 <tf_delay_until>
 8003fba:	011507b3          	add	a5,a0,a7
 8003fbe:	52f6a223          	sw	a5,1316(a3)
}
 8003fc2:	0141                	addi	sp,sp,16
 8003fc4:	8082                	ret

08003fc6 <tf_timer_done>:
uint32_t tf_timer_done(void){
 8003fc6:	1141                	addi	sp,sp,-16
 8003fc8:	c606                	sw	ra,12(sp)
    
    tf_current_time = get_timer_value();
 8003fca:	ffffe097          	auipc	ra,0xffffe
 8003fce:	dc0080e7          	jalr	-576(ra) # 8001d8a <get_timer_value>
 8003fd2:	200007b7          	lui	a5,0x20000
 8003fd6:	51878793          	addi	a5,a5,1304 # 20000518 <tf_current_time>
 8003fda:	c388                	sw	a0,0(a5)
 8003fdc:	c3cc                	sw	a1,4(a5)
    //if(tf_delay_start > tf_delay_until) return tf_delay_start > current_time && current_time > tf_delay_until ? 0 : 1; //On overflow
    if(tf_current_time > tf_delay_until) return 0;   //No overflow
 8003fde:	200006b7          	lui	a3,0x20000
 8003fe2:	4398                	lw	a4,0(a5)
 8003fe4:	43dc                	lw	a5,4(a5)
 8003fe6:	5206a603          	lw	a2,1312(a3) # 20000520 <tf_delay_until>
 8003fea:	5246a683          	lw	a3,1316(a3)
 8003fee:	00f6e763          	bltu	a3,a5,8003ffc <tf_timer_done+0x36>
 8003ff2:	4505                	li	a0,1
 8003ff4:	00d79563          	bne	a5,a3,8003ffe <tf_timer_done+0x38>
 8003ff8:	00e67363          	bgeu	a2,a4,8003ffe <tf_timer_done+0x38>
 8003ffc:	4501                	li	a0,0
    return 1;
 8003ffe:	40b2                	lw	ra,12(sp)
 8004000:	0141                	addi	sp,sp,16
 8004002:	8082                	ret

08004004 <mpu_delay>:
void i2c_master_init_400k(uint32_t port){
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
    i2c_enable(port);
}

void mpu_delay(int millis){
 8004004:	7179                	addi	sp,sp,-48
 8004006:	d04a                	sw	s2,32(sp)
 8004008:	ce4e                	sw	s3,28(sp)
 800400a:	c85a                	sw	s6,16(sp)
 800400c:	d606                	sw	ra,44(sp)
 800400e:	d422                	sw	s0,40(sp)
 8004010:	d226                	sw	s1,36(sp)
 8004012:	cc52                	sw	s4,24(sp)
 8004014:	ca56                	sw	s5,20(sp)
 8004016:	c65e                	sw	s7,12(sp)
 8004018:	c462                	sw	s8,8(sp)
 800401a:	c266                	sw	s9,4(sp)
 800401c:	8b2a                	mv	s6,a0
    uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 800401e:	ffffe097          	auipc	ra,0xffffe
 8004022:	d6c080e7          	jalr	-660(ra) # 8001d8a <get_timer_value>
 8004026:	89aa                	mv	s3,a0
 8004028:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 800402a:	ffffe097          	auipc	ra,0xffffe
 800402e:	d60080e7          	jalr	-672(ra) # 8001d8a <get_timer_value>
 8004032:	84aa                	mv	s1,a0
 8004034:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 8004036:	00a99463          	bne	s3,a0,800403e <mpu_delay+0x3a>
 800403a:	feb908e3          	beq	s2,a1,800402a <mpu_delay+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 * millis ));
 800403e:	080007b7          	lui	a5,0x8000
 8004042:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8004046:	2e47a983          	lw	s3,740(a5)
 800404a:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 800404e:	ffffe097          	auipc	ra,0xffffe
 8004052:	d3c080e7          	jalr	-708(ra) # 8001d8a <get_timer_value>
 8004056:	87aa                	mv	a5,a0
 8004058:	8d05                	sub	a0,a0,s1
 800405a:	00a7b7b3          	sltu	a5,a5,a0
 800405e:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 * millis ));
 8004060:	8d9d                	sub	a1,a1,a5
 8004062:	00003097          	auipc	ra,0x3
 8004066:	674080e7          	jalr	1652(ra) # 80076d6 <__floatundidf>
 800406a:	8a2a                	mv	s4,a0
 800406c:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8004070:	8aae                	mv	s5,a1
 8004072:	00003097          	auipc	ra,0x3
 8004076:	60e080e7          	jalr	1550(ra) # 8007680 <__floatunsidf>
 800407a:	864a                	mv	a2,s2
 800407c:	86ce                	mv	a3,s3
 800407e:	00003097          	auipc	ra,0x3
 8004082:	af8080e7          	jalr	-1288(ra) # 8006b76 <__divdf3>
 8004086:	8c2a                	mv	s8,a0
 8004088:	855a                	mv	a0,s6
 800408a:	8cae                	mv	s9,a1
 800408c:	00003097          	auipc	ra,0x3
 8004090:	584080e7          	jalr	1412(ra) # 8007610 <__floatsidf>
 8004094:	862a                	mv	a2,a0
 8004096:	86ae                	mv	a3,a1
 8004098:	8562                	mv	a0,s8
 800409a:	85e6                	mv	a1,s9
 800409c:	00003097          	auipc	ra,0x3
 80040a0:	0c4080e7          	jalr	196(ra) # 8007160 <__muldf3>
 80040a4:	862a                	mv	a2,a0
 80040a6:	86ae                	mv	a3,a1
 80040a8:	8552                	mv	a0,s4
 80040aa:	85d6                	mv	a1,s5
 80040ac:	00003097          	auipc	ra,0x3
 80040b0:	010080e7          	jalr	16(ra) # 80070bc <__ledf2>
 80040b4:	f8054de3          	bltz	a0,800404e <mpu_delay+0x4a>
}
 80040b8:	50b2                	lw	ra,44(sp)
 80040ba:	5422                	lw	s0,40(sp)
 80040bc:	5492                	lw	s1,36(sp)
 80040be:	5902                	lw	s2,32(sp)
 80040c0:	49f2                	lw	s3,28(sp)
 80040c2:	4a62                	lw	s4,24(sp)
 80040c4:	4ad2                	lw	s5,20(sp)
 80040c6:	4b42                	lw	s6,16(sp)
 80040c8:	4bb2                	lw	s7,12(sp)
 80040ca:	4c22                	lw	s8,8(sp)
 80040cc:	4c92                	lw	s9,4(sp)
 80040ce:	6145                	addi	sp,sp,48
 80040d0:	8082                	ret

080040d2 <i2c_master_read_register>:

void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040d2:	1101                	addi	sp,sp,-32
 80040d4:	cc22                	sw	s0,24(sp)
    int32_t port = *((uint32_t*)handle);
 80040d6:	4100                	lw	s0,0(a0)
void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040d8:	ca26                	sw	s1,20(sp)
 80040da:	c84a                	sw	s2,16(sp)
    /* send a NACK for the next data byte which will be received into the shift register */
	//i2c_ackpos_config(port, I2C_ACKPOS_NEXT);
    //while(i2c_flag_get(port, I2C_FLAG_I2CBSY));

    /* send a start condition to I2C bus */
    i2c_start_on_bus(port);
 80040dc:	8522                	mv	a0,s0
void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040de:	c64e                	sw	s3,12(sp)
 80040e0:	c452                	sw	s4,8(sp)
 80040e2:	ce06                	sw	ra,28(sp)
 80040e4:	84ae                	mv	s1,a1
 80040e6:	8a32                	mv	s4,a2
 80040e8:	8936                	mv	s2,a3
 80040ea:	89ba                	mv	s3,a4
    i2c_start_on_bus(port);
 80040ec:	ffffd097          	auipc	ra,0xffffd
 80040f0:	03a080e7          	jalr	58(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 80040f4:	50000593          	li	a1,1280
 80040f8:	8522                	mv	a0,s0
 80040fa:	ffffd097          	auipc	ra,0xffffd
 80040fe:	06a080e7          	jalr	106(ra) # 8001164 <i2c_flag_get>
 8004102:	d96d                	beqz	a0,80040f4 <i2c_master_read_register+0x22>

    /* send slave address to I2C bus */
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 8004104:	0486                	slli	s1,s1,0x1
 8004106:	5679                	li	a2,-2
 8004108:	85a6                	mv	a1,s1
 800410a:	8522                	mv	a0,s0
 800410c:	ffffd097          	auipc	ra,0xffffd
 8004110:	ffe080e7          	jalr	-2(ra) # 800110a <i2c_master_addressing>
    /* disable ACK before clearing ADDSEND bit */
    //i2c_ack_config(port, I2C_ACK_DISABLE);
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 8004114:	50100593          	li	a1,1281
 8004118:	8522                	mv	a0,s0
 800411a:	ffffd097          	auipc	ra,0xffffd
 800411e:	04a080e7          	jalr	74(ra) # 8001164 <i2c_flag_get>
 8004122:	d96d                	beqz	a0,8004114 <i2c_master_read_register+0x42>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004124:	50100593          	li	a1,1281
 8004128:	8522                	mv	a0,s0
 800412a:	ffffd097          	auipc	ra,0xffffd
 800412e:	04e080e7          	jalr	78(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 8004132:	50700593          	li	a1,1287
 8004136:	8522                	mv	a0,s0
 8004138:	ffffd097          	auipc	ra,0xffffd
 800413c:	02c080e7          	jalr	44(ra) # 8001164 <i2c_flag_get>
 8004140:	d96d                	beqz	a0,8004132 <i2c_master_read_register+0x60>


    i2c_data_transmit(port, reg);
 8004142:	85d2                	mv	a1,s4
 8004144:	8522                	mv	a0,s0
 8004146:	ffffd097          	auipc	ra,0xffffd
 800414a:	ff4080e7          	jalr	-12(ra) # 800113a <i2c_data_transmit>
    /* wait until the TBE bit is set */
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 800414e:	50700593          	li	a1,1287
 8004152:	8522                	mv	a0,s0
 8004154:	ffffd097          	auipc	ra,0xffffd
 8004158:	010080e7          	jalr	16(ra) # 8001164 <i2c_flag_get>
 800415c:	d96d                	beqz	a0,800414e <i2c_master_read_register+0x7c>

    i2c_start_on_bus(port);
 800415e:	8522                	mv	a0,s0
 8004160:	ffffd097          	auipc	ra,0xffffd
 8004164:	fc6080e7          	jalr	-58(ra) # 8001126 <i2c_start_on_bus>
    while( ! i2c_flag_get(port, I2C_FLAG_SBSEND) );
 8004168:	50000593          	li	a1,1280
 800416c:	8522                	mv	a0,s0
 800416e:	ffffd097          	auipc	ra,0xffffd
 8004172:	ff6080e7          	jalr	-10(ra) # 8001164 <i2c_flag_get>
 8004176:	d96d                	beqz	a0,8004168 <i2c_master_read_register+0x96>

    i2c_master_addressing(port, addr << 1, I2C_RECEIVER);
 8004178:	4605                	li	a2,1
 800417a:	85a6                	mv	a1,s1
 800417c:	8522                	mv	a0,s0
 800417e:	ffffd097          	auipc	ra,0xffffd
 8004182:	f8c080e7          	jalr	-116(ra) # 800110a <i2c_master_addressing>
    while( ! i2c_flag_get(port, I2C_FLAG_ADDSEND) );
 8004186:	50100593          	li	a1,1281
 800418a:	8522                	mv	a0,s0
 800418c:	ffffd097          	auipc	ra,0xffffd
 8004190:	fd8080e7          	jalr	-40(ra) # 8001164 <i2c_flag_get>
 8004194:	d96d                	beqz	a0,8004186 <i2c_master_read_register+0xb4>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004196:	50100593          	li	a1,1281
 800419a:	8522                	mv	a0,s0
 800419c:	ffffd097          	auipc	ra,0xffffd
 80041a0:	fdc080e7          	jalr	-36(ra) # 8001178 <i2c_flag_clear>

    i2c_ack_config(port, I2C_ACK_ENABLE);
 80041a4:	4585                	li	a1,1
 80041a6:	8522                	mv	a0,s0
 80041a8:	ffffd097          	auipc	ra,0xffffd
 80041ac:	f4a080e7          	jalr	-182(ra) # 80010f2 <i2c_ack_config>

    for(int i = 0; i < size; i++) {
 80041b0:	4481                	li	s1,0
        if(i == size - 1) {
 80041b2:	fff90a13          	addi	s4,s2,-1
    for(int i = 0; i < size; i++) {
 80041b6:	0324c363          	blt	s1,s2,80041dc <i2c_master_read_register+0x10a>
        }
        while(!i2c_flag_get(port, I2C_FLAG_RBNE));
        *data++ = i2c_data_receive(port);
    }

    i2c_stop_on_bus(port);
 80041ba:	8522                	mv	a0,s0
 80041bc:	ffffd097          	auipc	ra,0xffffd
 80041c0:	f74080e7          	jalr	-140(ra) # 8001130 <i2c_stop_on_bus>
    while( I2C_CTL0(port) & I2C_CTL0_STOP );
 80041c4:	401c                	lw	a5,0(s0)
 80041c6:	2007f793          	andi	a5,a5,512
 80041ca:	ffed                	bnez	a5,80041c4 <i2c_master_read_register+0xf2>
}
 80041cc:	40f2                	lw	ra,28(sp)
 80041ce:	4462                	lw	s0,24(sp)
 80041d0:	44d2                	lw	s1,20(sp)
 80041d2:	4942                	lw	s2,16(sp)
 80041d4:	49b2                	lw	s3,12(sp)
 80041d6:	4a22                	lw	s4,8(sp)
 80041d8:	6105                	addi	sp,sp,32
 80041da:	8082                	ret
        if(i == size - 1) {
 80041dc:	009a1863          	bne	s4,s1,80041ec <i2c_master_read_register+0x11a>
            i2c_ack_config(port, I2C_ACK_DISABLE);
 80041e0:	4581                	li	a1,0
 80041e2:	8522                	mv	a0,s0
 80041e4:	ffffd097          	auipc	ra,0xffffd
 80041e8:	f0e080e7          	jalr	-242(ra) # 80010f2 <i2c_ack_config>
        while(!i2c_flag_get(port, I2C_FLAG_RBNE));
 80041ec:	50600593          	li	a1,1286
 80041f0:	8522                	mv	a0,s0
 80041f2:	ffffd097          	auipc	ra,0xffffd
 80041f6:	f72080e7          	jalr	-142(ra) # 8001164 <i2c_flag_get>
 80041fa:	d96d                	beqz	a0,80041ec <i2c_master_read_register+0x11a>
        *data++ = i2c_data_receive(port);
 80041fc:	8522                	mv	a0,s0
 80041fe:	ffffd097          	auipc	ra,0xffffd
 8004202:	f40080e7          	jalr	-192(ra) # 800113e <i2c_data_receive>
 8004206:	009987b3          	add	a5,s3,s1
 800420a:	00a78023          	sb	a0,0(a5)
    for(int i = 0; i < size; i++) {
 800420e:	0485                	addi	s1,s1,1
 8004210:	b75d                	j	80041b6 <i2c_master_read_register+0xe4>

08004212 <i2c_master_write_register>:
    i2c_dma_last_transfer_config(port, I2C_DMALST_ON);
    dma_config();
    
}

void i2c_master_write_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 8004212:	1101                	addi	sp,sp,-32
 8004214:	cc22                	sw	s0,24(sp)
    int32_t port = *((uint32_t*)handle);
 8004216:	4100                	lw	s0,0(a0)
void i2c_master_write_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 8004218:	ca26                	sw	s1,20(sp)
 800421a:	c84a                	sw	s2,16(sp)
 800421c:	c64e                	sw	s3,12(sp)
 800421e:	c452                	sw	s4,8(sp)
 8004220:	ce06                	sw	ra,28(sp)
 8004222:	8a2e                	mv	s4,a1
 8004224:	84b2                	mv	s1,a2
 8004226:	8936                	mv	s2,a3
 8004228:	89ba                	mv	s3,a4
    
    /* send a NACK for the next data byte which will be received into the shift register */
	//i2c_ackpos_config(port, I2C_ACKPOS_NEXT);
    while(i2c_flag_get(port, I2C_FLAG_I2CBSY));
 800422a:	60100593          	li	a1,1537
 800422e:	8522                	mv	a0,s0
 8004230:	ffffd097          	auipc	ra,0xffffd
 8004234:	f34080e7          	jalr	-204(ra) # 8001164 <i2c_flag_get>
 8004238:	f96d                	bnez	a0,800422a <i2c_master_write_register+0x18>

    /* send a start condition to I2C bus */
    i2c_start_on_bus(port);
 800423a:	8522                	mv	a0,s0
 800423c:	ffffd097          	auipc	ra,0xffffd
 8004240:	eea080e7          	jalr	-278(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 8004244:	50000593          	li	a1,1280
 8004248:	8522                	mv	a0,s0
 800424a:	ffffd097          	auipc	ra,0xffffd
 800424e:	f1a080e7          	jalr	-230(ra) # 8001164 <i2c_flag_get>
 8004252:	d96d                	beqz	a0,8004244 <i2c_master_write_register+0x32>

    /* send slave address to I2C bus */
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 8004254:	5679                	li	a2,-2
 8004256:	001a1593          	slli	a1,s4,0x1
 800425a:	8522                	mv	a0,s0
 800425c:	ffffd097          	auipc	ra,0xffffd
 8004260:	eae080e7          	jalr	-338(ra) # 800110a <i2c_master_addressing>
    /* disable ACK before clearing ADDSEND bit */
    //i2c_ack_config(port, I2C_ACK_DISABLE);
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 8004264:	50100593          	li	a1,1281
 8004268:	8522                	mv	a0,s0
 800426a:	ffffd097          	auipc	ra,0xffffd
 800426e:	efa080e7          	jalr	-262(ra) # 8001164 <i2c_flag_get>
 8004272:	d96d                	beqz	a0,8004264 <i2c_master_write_register+0x52>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004274:	50100593          	li	a1,1281
 8004278:	8522                	mv	a0,s0
 800427a:	ffffd097          	auipc	ra,0xffffd
 800427e:	efe080e7          	jalr	-258(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 8004282:	50700593          	li	a1,1287
 8004286:	8522                	mv	a0,s0
 8004288:	ffffd097          	auipc	ra,0xffffd
 800428c:	edc080e7          	jalr	-292(ra) # 8001164 <i2c_flag_get>
 8004290:	d96d                	beqz	a0,8004282 <i2c_master_write_register+0x70>

    i2c_data_transmit(port, reg);
 8004292:	85a6                	mv	a1,s1
 8004294:	8522                	mv	a0,s0
 8004296:	ffffd097          	auipc	ra,0xffffd
 800429a:	ea4080e7          	jalr	-348(ra) # 800113a <i2c_data_transmit>
        /* wait until the TBE bit is set */
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 800429e:	50700593          	li	a1,1287
 80042a2:	8522                	mv	a0,s0
 80042a4:	ffffd097          	auipc	ra,0xffffd
 80042a8:	ec0080e7          	jalr	-320(ra) # 8001164 <i2c_flag_get>
 80042ac:	d96d                	beqz	a0,800429e <i2c_master_write_register+0x8c>

    for(int i = 0; i < size; i++){
 80042ae:	4481                	li	s1,0
 80042b0:	0324c363          	blt	s1,s2,80042d6 <i2c_master_write_register+0xc4>
        i2c_data_transmit(port, *data++);
        /* wait until the TBE bit is set */
        while(!i2c_flag_get(port, I2C_FLAG_TBE));
    }

    i2c_stop_on_bus(port);
 80042b4:	8522                	mv	a0,s0
 80042b6:	ffffd097          	auipc	ra,0xffffd
 80042ba:	e7a080e7          	jalr	-390(ra) # 8001130 <i2c_stop_on_bus>
    while( I2C_CTL0(port) & I2C_CTL0_STOP );
 80042be:	401c                	lw	a5,0(s0)
 80042c0:	2007f793          	andi	a5,a5,512
 80042c4:	ffed                	bnez	a5,80042be <i2c_master_write_register+0xac>
 80042c6:	40f2                	lw	ra,28(sp)
 80042c8:	4462                	lw	s0,24(sp)
 80042ca:	44d2                	lw	s1,20(sp)
 80042cc:	4942                	lw	s2,16(sp)
 80042ce:	49b2                	lw	s3,12(sp)
 80042d0:	4a22                	lw	s4,8(sp)
 80042d2:	6105                	addi	sp,sp,32
 80042d4:	8082                	ret
        i2c_data_transmit(port, *data++);
 80042d6:	009987b3          	add	a5,s3,s1
 80042da:	0007c583          	lbu	a1,0(a5)
 80042de:	8522                	mv	a0,s0
 80042e0:	ffffd097          	auipc	ra,0xffffd
 80042e4:	e5a080e7          	jalr	-422(ra) # 800113a <i2c_data_transmit>
        while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80042e8:	50700593          	li	a1,1287
 80042ec:	8522                	mv	a0,s0
 80042ee:	ffffd097          	auipc	ra,0xffffd
 80042f2:	e76080e7          	jalr	-394(ra) # 8001164 <i2c_flag_get>
 80042f6:	d96d                	beqz	a0,80042e8 <i2c_master_write_register+0xd6>
    for(int i = 0; i < size; i++){
 80042f8:	0485                	addi	s1,s1,1
 80042fa:	bf5d                	j	80042b0 <i2c_master_write_register+0x9e>

080042fc <i2c_master_init_400k>:
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 80042fc:	000625b7          	lui	a1,0x62
void i2c_master_init_400k(uint32_t port){
 8004300:	1141                	addi	sp,sp,-16
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 8004302:	6611                	lui	a2,0x4
 8004304:	a8058593          	addi	a1,a1,-1408 # 61a80 <__stack_size+0x60a80>
void i2c_master_init_400k(uint32_t port){
 8004308:	c422                	sw	s0,8(sp)
 800430a:	c606                	sw	ra,12(sp)
 800430c:	842a                	mv	s0,a0
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 800430e:	ffffd097          	auipc	ra,0xffffd
 8004312:	ca2080e7          	jalr	-862(ra) # 8000fb0 <i2c_clock_config>
    i2c_enable(port);
 8004316:	8522                	mv	a0,s0
}
 8004318:	4422                	lw	s0,8(sp)
 800431a:	40b2                	lw	ra,12(sp)
 800431c:	0141                	addi	sp,sp,16
    i2c_enable(port);
 800431e:	ffffd317          	auipc	t1,0xffffd
 8004322:	dfe30067          	jr	-514(t1) # 800111c <i2c_enable>

08004326 <mpu6500_install>:
void mpu6500_install(uint32_t port){
 8004326:	1141                	addi	sp,sp,-16
 8004328:	c422                	sw	s0,8(sp)
	i2c_port = port;
 800432a:	20001437          	lui	s0,0x20001
void mpu6500_install(uint32_t port){
 800432e:	c606                	sw	ra,12(sp)
	i2c_port = port;
 8004330:	e0a42823          	sw	a0,-496(s0) # 20000e10 <i2c_port>
    i2c_master_init_400k(i2c_port);
 8004334:	00000097          	auipc	ra,0x0
 8004338:	fc8080e7          	jalr	-56(ra) # 80042fc <i2c_master_init_400k>
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 800433c:	e1040693          	addi	a3,s0,-496
}
 8004340:	4422                	lw	s0,8(sp)
 8004342:	40b2                	lw	ra,12(sp)
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 8004344:	08004637          	lui	a2,0x8004
 8004348:	080045b7          	lui	a1,0x8004
 800434c:	08004537          	lui	a0,0x8004
 8004350:	00460613          	addi	a2,a2,4 # 8004004 <mpu_delay>
 8004354:	21258593          	addi	a1,a1,530 # 8004212 <i2c_master_write_register>
 8004358:	0d250513          	addi	a0,a0,210 # 80040d2 <i2c_master_read_register>
}
 800435c:	0141                	addi	sp,sp,16
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 800435e:	00000317          	auipc	t1,0x0
 8004362:	13e30067          	jr	318(t1) # 800449c <mpu6500_init>

08004366 <i2c_dma_master_read_register>:
void i2c_dma_master_read_register(uint32_t handle, uint8_t addr, uint8_t reg){
 8004366:	1141                	addi	sp,sp,-16
 8004368:	c422                	sw	s0,8(sp)
 800436a:	c226                	sw	s1,4(sp)
 800436c:	c04a                	sw	s2,0(sp)
 800436e:	c606                	sw	ra,12(sp)
 8004370:	842a                	mv	s0,a0
 8004372:	84ae                	mv	s1,a1
 8004374:	8932                	mv	s2,a2
    i2c_start_on_bus(port);
 8004376:	ffffd097          	auipc	ra,0xffffd
 800437a:	db0080e7          	jalr	-592(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 800437e:	50000593          	li	a1,1280
 8004382:	8522                	mv	a0,s0
 8004384:	ffffd097          	auipc	ra,0xffffd
 8004388:	de0080e7          	jalr	-544(ra) # 8001164 <i2c_flag_get>
 800438c:	d96d                	beqz	a0,800437e <i2c_dma_master_read_register+0x18>
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 800438e:	0486                	slli	s1,s1,0x1
 8004390:	5679                	li	a2,-2
 8004392:	85a6                	mv	a1,s1
 8004394:	8522                	mv	a0,s0
 8004396:	ffffd097          	auipc	ra,0xffffd
 800439a:	d74080e7          	jalr	-652(ra) # 800110a <i2c_master_addressing>
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 800439e:	50100593          	li	a1,1281
 80043a2:	8522                	mv	a0,s0
 80043a4:	ffffd097          	auipc	ra,0xffffd
 80043a8:	dc0080e7          	jalr	-576(ra) # 8001164 <i2c_flag_get>
 80043ac:	d96d                	beqz	a0,800439e <i2c_dma_master_read_register+0x38>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 80043ae:	50100593          	li	a1,1281
 80043b2:	8522                	mv	a0,s0
 80043b4:	ffffd097          	auipc	ra,0xffffd
 80043b8:	dc4080e7          	jalr	-572(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80043bc:	50700593          	li	a1,1287
 80043c0:	8522                	mv	a0,s0
 80043c2:	ffffd097          	auipc	ra,0xffffd
 80043c6:	da2080e7          	jalr	-606(ra) # 8001164 <i2c_flag_get>
 80043ca:	d96d                	beqz	a0,80043bc <i2c_dma_master_read_register+0x56>
    i2c_data_transmit(port, reg);
 80043cc:	85ca                	mv	a1,s2
 80043ce:	8522                	mv	a0,s0
 80043d0:	ffffd097          	auipc	ra,0xffffd
 80043d4:	d6a080e7          	jalr	-662(ra) # 800113a <i2c_data_transmit>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80043d8:	50700593          	li	a1,1287
 80043dc:	8522                	mv	a0,s0
 80043de:	ffffd097          	auipc	ra,0xffffd
 80043e2:	d86080e7          	jalr	-634(ra) # 8001164 <i2c_flag_get>
 80043e6:	d96d                	beqz	a0,80043d8 <i2c_dma_master_read_register+0x72>
    i2c_start_on_bus(port);
 80043e8:	8522                	mv	a0,s0
 80043ea:	ffffd097          	auipc	ra,0xffffd
 80043ee:	d3c080e7          	jalr	-708(ra) # 8001126 <i2c_start_on_bus>
    while( ! i2c_flag_get(port, I2C_FLAG_SBSEND) );
 80043f2:	50000593          	li	a1,1280
 80043f6:	8522                	mv	a0,s0
 80043f8:	ffffd097          	auipc	ra,0xffffd
 80043fc:	d6c080e7          	jalr	-660(ra) # 8001164 <i2c_flag_get>
 8004400:	d96d                	beqz	a0,80043f2 <i2c_dma_master_read_register+0x8c>
    i2c_master_addressing(port, addr << 1, I2C_RECEIVER);
 8004402:	4605                	li	a2,1
 8004404:	85a6                	mv	a1,s1
 8004406:	8522                	mv	a0,s0
 8004408:	ffffd097          	auipc	ra,0xffffd
 800440c:	d02080e7          	jalr	-766(ra) # 800110a <i2c_master_addressing>
    while( ! i2c_flag_get(port, I2C_FLAG_ADDSEND) );
 8004410:	50100593          	li	a1,1281
 8004414:	8522                	mv	a0,s0
 8004416:	ffffd097          	auipc	ra,0xffffd
 800441a:	d4e080e7          	jalr	-690(ra) # 8001164 <i2c_flag_get>
 800441e:	d96d                	beqz	a0,8004410 <i2c_dma_master_read_register+0xaa>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004420:	8522                	mv	a0,s0
 8004422:	50100593          	li	a1,1281
 8004426:	ffffd097          	auipc	ra,0xffffd
 800442a:	d52080e7          	jalr	-686(ra) # 8001178 <i2c_flag_clear>
    i2c_ack_config(port, I2C_ACK_ENABLE);
 800442e:	8522                	mv	a0,s0
 8004430:	4585                	li	a1,1
 8004432:	ffffd097          	auipc	ra,0xffffd
 8004436:	cc0080e7          	jalr	-832(ra) # 80010f2 <i2c_ack_config>
    i2c_dma_enable(port, I2C_DMA_ON);
 800443a:	6585                	lui	a1,0x1
 800443c:	8522                	mv	a0,s0
 800443e:	80058593          	addi	a1,a1,-2048 # 800 <__dbg_stack_size+0x800>
 8004442:	ffffd097          	auipc	ra,0xffffd
 8004446:	d04080e7          	jalr	-764(ra) # 8001146 <i2c_dma_enable>
    i2c_dma_last_transfer_config(port, I2C_DMALST_ON);
 800444a:	8522                	mv	a0,s0
 800444c:	6585                	lui	a1,0x1
 800444e:	ffffd097          	auipc	ra,0xffffd
 8004452:	d08080e7          	jalr	-760(ra) # 8001156 <i2c_dma_last_transfer_config>
}
 8004456:	4422                	lw	s0,8(sp)
 8004458:	40b2                	lw	ra,12(sp)
 800445a:	4492                	lw	s1,4(sp)
 800445c:	4902                	lw	s2,0(sp)
 800445e:	0141                	addi	sp,sp,16
    dma_config();
 8004460:	ffffe317          	auipc	t1,0xffffe
 8004464:	ad830067          	jr	-1320(t1) # 8001f38 <dma_config>

08004468 <read_mpu>:
}mpu6500_comms_t;

mpu6500_comms_t cb;

void read_mpu(uint8_t reg, uint8_t size, uint8_t* data){
	cb.read(cb.pHandle, MPU6500_ADDR, reg, size, data);
 8004468:	200017b7          	lui	a5,0x20001
 800446c:	e1478793          	addi	a5,a5,-492 # 20000e14 <cb>
 8004470:	8732                	mv	a4,a2
 8004472:	0007a303          	lw	t1,0(a5)
 8004476:	862a                	mv	a2,a0
 8004478:	47c8                	lw	a0,12(a5)
 800447a:	86ae                	mv	a3,a1
 800447c:	06900593          	li	a1,105
 8004480:	8302                	jr	t1

08004482 <write_mpu>:
}

void write_mpu(uint8_t reg, uint8_t size, uint8_t* data){
	cb.write(cb.pHandle, MPU6500_ADDR, reg, size, data);
 8004482:	200017b7          	lui	a5,0x20001
 8004486:	e1478793          	addi	a5,a5,-492 # 20000e14 <cb>
 800448a:	8732                	mv	a4,a2
 800448c:	0047a303          	lw	t1,4(a5)
 8004490:	862a                	mv	a2,a0
 8004492:	47c8                	lw	a0,12(a5)
 8004494:	86ae                	mv	a3,a1
 8004496:	06900593          	li	a1,105
 800449a:	8302                	jr	t1

0800449c <mpu6500_init>:
}

int mpu6500_init(void (*read_cb)(void* pHandle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t* pData), 
				 void (*write_cb)(void* pHandle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t* pData),
				 void (*delay_cb)(int millis),
				 void* pHandle){
 800449c:	1101                	addi	sp,sp,-32
 800449e:	cc22                	sw	s0,24(sp)
	uint8_t read_buffer[4];
	uint8_t write_buffer[4];
	cb.read = read_cb;
 80044a0:	20001437          	lui	s0,0x20001
 80044a4:	e1440793          	addi	a5,s0,-492 # 20000e14 <cb>
				 void* pHandle){
 80044a8:	ce06                	sw	ra,28(sp)
	cb.read = read_cb;
 80044aa:	c388                	sw	a0,0(a5)
	cb.write = write_cb;
 80044ac:	c3cc                	sw	a1,4(a5)
	cb.delay = delay_cb;
 80044ae:	c790                	sw	a2,8(a5)
	cb.pHandle = pHandle;



	read_mpu(MPU6500_WHO_AM_I, 1, read_buffer);
 80044b0:	07500513          	li	a0,117
 80044b4:	0030                	addi	a2,sp,8
 80044b6:	4585                	li	a1,1
	cb.pHandle = pHandle;
 80044b8:	c7d4                	sw	a3,12(a5)
	read_mpu(MPU6500_WHO_AM_I, 1, read_buffer);
 80044ba:	00000097          	auipc	ra,0x0
 80044be:	fae080e7          	jalr	-82(ra) # 8004468 <read_mpu>
	if(read_buffer[0] != MPU6500_WHO_AM_I_ID) return -1;
 80044c2:	00814703          	lbu	a4,8(sp)
 80044c6:	47c5                	li	a5,17
 80044c8:	557d                	li	a0,-1
 80044ca:	0cf71f63          	bne	a4,a5,80045a8 <mpu6500_init+0x10c>

	write_buffer[0] = MPU6500_DEVICE_RESET;
 80044ce:	f8000793          	li	a5,-128
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 80044d2:	06b00513          	li	a0,107
 80044d6:	0070                	addi	a2,sp,12
 80044d8:	4585                	li	a1,1
	write_buffer[0] = MPU6500_DEVICE_RESET;
 80044da:	00f10623          	sb	a5,12(sp)
 80044de:	e1440413          	addi	s0,s0,-492
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 80044e2:	00000097          	auipc	ra,0x0
 80044e6:	fa0080e7          	jalr	-96(ra) # 8004482 <write_mpu>

	cb.delay(100);
 80044ea:	441c                	lw	a5,8(s0)
 80044ec:	06400513          	li	a0,100
 80044f0:	9782                	jalr	a5

	while(read_buffer[0] & MPU6500_DEVICE_RESET) read_mpu(MPU6500_PWR_MGMT_1, 1, read_buffer);
 80044f2:	00810783          	lb	a5,8(sp)
 80044f6:	0a07cd63          	bltz	a5,80045b0 <mpu6500_init+0x114>

	cb.delay(100);
 80044fa:	441c                	lw	a5,8(s0)
 80044fc:	06400513          	li	a0,100
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);

	write_buffer[0] = 0x00;
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);

	write_buffer[0] = MPU6500_G_DLPF_92HZ;
 8004500:	4409                	li	s0,2
	cb.delay(100);
 8004502:	9782                	jalr	a5
	write_buffer[0] = MPU6500_TEMP_DIS | 0x01; //select PLL
 8004504:	47a5                	li	a5,9
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 8004506:	0070                	addi	a2,sp,12
 8004508:	4585                	li	a1,1
 800450a:	06b00513          	li	a0,107
	write_buffer[0] = MPU6500_TEMP_DIS | 0x01; //select PLL
 800450e:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 8004512:	00000097          	auipc	ra,0x0
 8004516:	f70080e7          	jalr	-144(ra) # 8004482 <write_mpu>
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);
 800451a:	0070                	addi	a2,sp,12
 800451c:	4585                	li	a1,1
 800451e:	4565                	li	a0,25
	write_buffer[0] = 0x00;
 8004520:	00010623          	sb	zero,12(sp)
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);
 8004524:	00000097          	auipc	ra,0x0
 8004528:	f5e080e7          	jalr	-162(ra) # 8004482 <write_mpu>
	write_mpu(MPU6500_CONFIG, 1, write_buffer);
 800452c:	0070                	addi	a2,sp,12
 800452e:	4585                	li	a1,1
 8004530:	4569                	li	a0,26
	write_buffer[0] = MPU6500_G_DLPF_92HZ;
 8004532:	00810623          	sb	s0,12(sp)
	write_mpu(MPU6500_CONFIG, 1, write_buffer);
 8004536:	00000097          	auipc	ra,0x0
 800453a:	f4c080e7          	jalr	-180(ra) # 8004482 <write_mpu>

	write_buffer[0] = MPU6500_GYRO_FS_2000DPS;
 800453e:	47e1                	li	a5,24
	write_mpu(MPU6500_GYRO_CONFIG, 1, write_buffer);
 8004540:	0070                	addi	a2,sp,12
 8004542:	4585                	li	a1,1
 8004544:	456d                	li	a0,27
	write_buffer[0] = MPU6500_GYRO_FS_2000DPS;
 8004546:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_GYRO_CONFIG, 1, write_buffer);
 800454a:	00000097          	auipc	ra,0x0
 800454e:	f38080e7          	jalr	-200(ra) # 8004482 <write_mpu>

	write_buffer[0] = MPU6500_ACCEL_FS_8G;
 8004552:	47c1                	li	a5,16
	write_mpu(MPU6500_ACCEL_CONFIG, 1, write_buffer);
 8004554:	0070                	addi	a2,sp,12
 8004556:	4585                	li	a1,1
 8004558:	4571                	li	a0,28
	write_buffer[0] = MPU6500_ACCEL_FS_8G;
 800455a:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_ACCEL_CONFIG, 1, write_buffer);
 800455e:	00000097          	auipc	ra,0x0
 8004562:	f24080e7          	jalr	-220(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_A_DPLF_92HZ;
	write_mpu(MPU6500_ACCEL_CONFIG2, 1, write_buffer);
 8004566:	0070                	addi	a2,sp,12
 8004568:	4585                	li	a1,1
 800456a:	4575                	li	a0,29
	write_buffer[0] = MPU6500_A_DPLF_92HZ;
 800456c:	00810623          	sb	s0,12(sp)
	write_mpu(MPU6500_ACCEL_CONFIG2, 1, write_buffer);
 8004570:	00000097          	auipc	ra,0x0
 8004574:	f12080e7          	jalr	-238(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_LATCH_INT_EN | MPU6500_INT_ANYRD_2CLEAR | MPU6500_INT_BYPASS_EN;
 8004578:	03200793          	li	a5,50
	write_mpu(MPU6500_INT_PIN_CFG, 1, write_buffer);
 800457c:	0070                	addi	a2,sp,12
 800457e:	4585                	li	a1,1
 8004580:	03700513          	li	a0,55
	write_buffer[0] = MPU6500_LATCH_INT_EN | MPU6500_INT_ANYRD_2CLEAR | MPU6500_INT_BYPASS_EN;
 8004584:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_INT_PIN_CFG, 1, write_buffer);
 8004588:	00000097          	auipc	ra,0x0
 800458c:	efa080e7          	jalr	-262(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_INT_RAW_RDY_EN;
 8004590:	4785                	li	a5,1
	write_mpu(MPU6500_INT_ENABLE, 1, write_buffer);
 8004592:	03800513          	li	a0,56
 8004596:	0070                	addi	a2,sp,12
 8004598:	4585                	li	a1,1
	write_buffer[0] = MPU6500_INT_RAW_RDY_EN;
 800459a:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_INT_ENABLE, 1, write_buffer);
 800459e:	00000097          	auipc	ra,0x0
 80045a2:	ee4080e7          	jalr	-284(ra) # 8004482 <write_mpu>

	return 1;
 80045a6:	4505                	li	a0,1

}
 80045a8:	40f2                	lw	ra,28(sp)
 80045aa:	4462                	lw	s0,24(sp)
 80045ac:	6105                	addi	sp,sp,32
 80045ae:	8082                	ret
	while(read_buffer[0] & MPU6500_DEVICE_RESET) read_mpu(MPU6500_PWR_MGMT_1, 1, read_buffer);
 80045b0:	0030                	addi	a2,sp,8
 80045b2:	4585                	li	a1,1
 80045b4:	06b00513          	li	a0,107
 80045b8:	00000097          	auipc	ra,0x0
 80045bc:	eb0080e7          	jalr	-336(ra) # 8004468 <read_mpu>
 80045c0:	bf0d                	j	80044f2 <mpu6500_init+0x56>

080045c2 <init_q>:
    //q.memorySize = Q_SIZE;
    //q.size       = SIZE_INIT;
    //q.head       = HEAD_INIT;
    //q.tail       = TAIL_INIT;

    w.memorySize  = STRING_QUEUE_SIZE;
 80045c2:	200057b7          	lui	a5,0x20005
 80045c6:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
 80045ca:	02000713          	li	a4,32
 80045ce:	c398                	sw	a4,0(a5)
    w.size        = SIZE_INIT;
 80045d0:	0007a223          	sw	zero,4(a5)
    w.head        = HEAD_INIT;
 80045d4:	0007a423          	sw	zero,8(a5)
    w.tail        = TAIL_INIT;
 80045d8:	0007a623          	sw	zero,12(a5)
    w.tail_string = TAIL_INIT;
 80045dc:	0007a823          	sw	zero,16(a5)
}
 80045e0:	8082                	ret

080045e2 <enqueue_string>:
//	return 1;
//}

int enqueue_string(char *string) {
    // Check if the queue is already full.
    if (w.size == w.memorySize) {
 80045e2:	200017b7          	lui	a5,0x20001
 80045e6:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 80045ea:	6691                	lui	a3,0x4
 80045ec:	9736                	add	a4,a4,a3
 80045ee:	00072883          	lw	a7,0(a4)
 80045f2:	4358                	lw	a4,4(a4)
 80045f4:	e2478593          	addi	a1,a5,-476
 80045f8:	200057b7          	lui	a5,0x20005
 80045fc:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
        w.buf[w.tail][w.tail_string] = *string;
        string++; // Move to the next character in 'string'.
        w.tail_string++; // Move to the next position in the current buffer.

        // If the current buffer is full (512 characters), wrap around to the next buffer.
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8004600:	1ff00e13          	li	t3,511
    if (w.size == w.memorySize) {
 8004604:	03171c63          	bne	a4,a7,800463c <enqueue_string+0x5a>
        return 0; // Return 0 to indicate that the queue is full.
 8004608:	4501                	li	a0,0
 800460a:	8082                	ret
        w.buf[w.tail][w.tail_string] = *string;
 800460c:	47d8                	lw	a4,12(a5)
 800460e:	4b94                	lw	a3,16(a5)
        string++; // Move to the next character in 'string'.
 8004610:	0505                	addi	a0,a0,1
        w.buf[w.tail][w.tail_string] = *string;
 8004612:	00971813          	slli	a6,a4,0x9
 8004616:	982e                	add	a6,a6,a1
 8004618:	00d80eb3          	add	t4,a6,a3
        w.tail_string++; // Move to the next position in the current buffer.
 800461c:	0685                	addi	a3,a3,1
        w.buf[w.tail][w.tail_string] = *string;
 800461e:	006e8023          	sb	t1,0(t4)
        w.tail_string++; // Move to the next position in the current buffer.
 8004622:	cb94                	sw	a3,16(a5)
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8004624:	01c69c63          	bne	a3,t3,800463c <enqueue_string+0x5a>
            w.buf[w.tail][w.tail_string] = '\0';
            w.tail_string = 0; // Reset the buffer position.
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8004628:	0705                	addi	a4,a4,1
 800462a:	03176733          	rem	a4,a4,a7
            w.size++; // Increment the size of the queue.
 800462e:	0605                	addi	a2,a2,1
            w.buf[w.tail][w.tail_string] = '\0';
 8004630:	1e080fa3          	sb	zero,511(a6)
            w.tail_string = 0; // Reset the buffer position.
 8004634:	0007a823          	sw	zero,16(a5)
            w.size++; // Increment the size of the queue.
 8004638:	c3d0                	sw	a2,4(a5)
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 800463a:	c7d8                	sw	a4,12(a5)
    while (*string != '\0' && w.size != w.memorySize) {
 800463c:	00054303          	lbu	t1,0(a0)
 8004640:	00030563          	beqz	t1,800464a <enqueue_string+0x68>
 8004644:	43d0                	lw	a2,4(a5)
 8004646:	fcc893e3          	bne	a7,a2,800460c <enqueue_string+0x2a>
        }
    }

    return 1; // Return 1 to indicate successful enqueuing.
 800464a:	4505                	li	a0,1
}
 800464c:	8082                	ret

0800464e <queue_str_len>:
    return str_len; // Return the length of the concatenated string.
}

int queue_str_len(void) {
    return w.size; // Return the size of the queue.
}
 800464e:	200057b7          	lui	a5,0x20005
 8004652:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
 8004656:	43c8                	lw	a0,4(a5)
 8004658:	8082                	ret

0800465a <fuseStrings>:
}

int fuseStrings(char *str1, const char *str2) {
    char *start = str1;  // Save the starting position of str1
    // Find the end of the first string
    while (*str1 != '\0') {
 800465a:	87aa                	mv	a5,a0
 800465c:	0007c703          	lbu	a4,0(a5)
 8004660:	eb09                	bnez	a4,8004672 <fuseStrings+0x18>
        str1++;
    }
    // Copy characters from the second string to the end of the first string
    while (*str2 != '\0') {
 8004662:	0005c703          	lbu	a4,0(a1) # 1000 <__stack_size>
 8004666:	eb01                	bnez	a4,8004676 <fuseStrings+0x1c>
        *str1 = *str2;
        str1++;
        str2++;
    }
    // Add the null terminator to mark the end of the concatenated string
    *str1 = '\0';
 8004668:	00078023          	sb	zero,0(a5)
    // Calculate and return the length of the concatenated string
    return str1 - start;
}
 800466c:	40a78533          	sub	a0,a5,a0
 8004670:	8082                	ret
        str1++;
 8004672:	0785                	addi	a5,a5,1
 8004674:	b7e5                	j	800465c <fuseStrings+0x2>
        *str1 = *str2;
 8004676:	00e78023          	sb	a4,0(a5)
        str2++;
 800467a:	0585                	addi	a1,a1,1
        str1++;
 800467c:	0785                	addi	a5,a5,1
        str2++;
 800467e:	b7d5                	j	8004662 <fuseStrings+0x8>

08004680 <dequeue_string>:
    if (w.size == 0) {
 8004680:	200017b7          	lui	a5,0x20001
 8004684:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 8004688:	6691                	lui	a3,0x4
int dequeue_string(char *string, int num_of_blocks) {
 800468a:	1101                	addi	sp,sp,-32
    if (w.size == 0) {
 800468c:	9736                	add	a4,a4,a3
int dequeue_string(char *string, int num_of_blocks) {
 800468e:	ca26                	sw	s1,20(sp)
    if (w.size == 0) {
 8004690:	4344                	lw	s1,4(a4)
int dequeue_string(char *string, int num_of_blocks) {
 8004692:	ce06                	sw	ra,28(sp)
 8004694:	cc22                	sw	s0,24(sp)
 8004696:	c84a                	sw	s2,16(sp)
 8004698:	c64e                	sw	s3,12(sp)
 800469a:	c452                	sw	s4,8(sp)
 800469c:	c256                	sw	s5,4(sp)
    if (w.size == 0) {
 800469e:	cc99                	beqz	s1,80046bc <dequeue_string+0x3c>
    } else if (num_of_blocks > w.size) {
 80046a0:	04b4cc63          	blt	s1,a1,80046f8 <dequeue_string+0x78>
 80046a4:	20005437          	lui	s0,0x20005
 80046a8:	e2478993          	addi	s3,a5,-476
 80046ac:	e2440413          	addi	s0,s0,-476 # 20004e24 <w+0x4000>
 80046b0:	892e                	mv	s2,a1
 80046b2:	8aaa                	mv	s5,a0
    int blocks_dequeued = 0; // Track the number of blocks dequeued
 80046b4:	4a01                	li	s4,0
    int str_len = 0;
 80046b6:	4481                	li	s1,0
    while (blocks_dequeued < num_of_blocks) {
 80046b8:	012a4c63          	blt	s4,s2,80046d0 <dequeue_string+0x50>
}
 80046bc:	40f2                	lw	ra,28(sp)
 80046be:	4462                	lw	s0,24(sp)
 80046c0:	8526                	mv	a0,s1
 80046c2:	4942                	lw	s2,16(sp)
 80046c4:	44d2                	lw	s1,20(sp)
 80046c6:	49b2                	lw	s3,12(sp)
 80046c8:	4a22                	lw	s4,8(sp)
 80046ca:	4a92                	lw	s5,4(sp)
 80046cc:	6105                	addi	sp,sp,32
 80046ce:	8082                	ret
        str_len += fuseStrings(string, w.buf[w.head]);
 80046d0:	440c                	lw	a1,8(s0)
 80046d2:	8556                	mv	a0,s5
        blocks_dequeued++; // Increment the number of blocks dequeued.
 80046d4:	0a05                	addi	s4,s4,1
        str_len += fuseStrings(string, w.buf[w.head]);
 80046d6:	05a6                	slli	a1,a1,0x9
 80046d8:	95ce                	add	a1,a1,s3
 80046da:	00000097          	auipc	ra,0x0
 80046de:	f80080e7          	jalr	-128(ra) # 800465a <fuseStrings>
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 80046e2:	441c                	lw	a5,8(s0)
 80046e4:	4018                	lw	a4,0(s0)
        str_len += fuseStrings(string, w.buf[w.head]);
 80046e6:	94aa                	add	s1,s1,a0
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 80046e8:	0785                	addi	a5,a5,1
 80046ea:	02e7e7b3          	rem	a5,a5,a4
 80046ee:	c41c                	sw	a5,8(s0)
        w.size--; // Decrement the size of the queue.
 80046f0:	405c                	lw	a5,4(s0)
 80046f2:	17fd                	addi	a5,a5,-1
 80046f4:	c05c                	sw	a5,4(s0)
        blocks_dequeued++; // Increment the number of blocks dequeued.
 80046f6:	b7c9                	j	80046b8 <dequeue_string+0x38>
        return -1; // Return -1 to indicate that there are not enough blocks in the queue.
 80046f8:	54fd                	li	s1,-1
 80046fa:	b7c9                	j	80046bc <dequeue_string+0x3c>

080046fc <empty_string_queue>:
int empty_string_queue(char *dest, int max_block_size){
 80046fc:	1101                	addi	sp,sp,-32
 80046fe:	ca26                	sw	s1,20(sp)
 8004700:	c84a                	sw	s2,16(sp)
 8004702:	c64e                	sw	s3,12(sp)
 8004704:	892a                	mv	s2,a0
 8004706:	ce06                	sw	ra,28(sp)
 8004708:	cc22                	sw	s0,24(sp)
 800470a:	89ae                	mv	s3,a1
    for(int i = max_block_size; i > 0; i--){
 800470c:	84ae                	mv	s1,a1
    int str_len = 0;
 800470e:	4501                	li	a0,0
    for(int i = max_block_size; i > 0; i--){
 8004710:	04904263          	bgtz	s1,8004754 <empty_string_queue+0x58>
    int blocks_dequeued = 0;
 8004714:	4481                	li	s1,0
    if(w.size == 0 && blocks_dequeued < max_block_size){
 8004716:	200015b7          	lui	a1,0x20001
 800471a:	e2458593          	addi	a1,a1,-476 # 20000e24 <w>
 800471e:	6411                	lui	s0,0x4
 8004720:	942e                	add	s0,s0,a1
 8004722:	405c                	lw	a5,4(s0)
 8004724:	e38d                	bnez	a5,8004746 <empty_string_queue+0x4a>
 8004726:	0334d063          	bge	s1,s3,8004746 <empty_string_queue+0x4a>
        w.buf[w.head][w.tail_string] = '\0';
 800472a:	4418                	lw	a4,8(s0)
 800472c:	481c                	lw	a5,16(s0)
        str_len = fuseStrings(dest, w.buf[w.head]);
 800472e:	854a                	mv	a0,s2
        w.buf[w.head][w.tail_string] = '\0';
 8004730:	0726                	slli	a4,a4,0x9
 8004732:	95ba                	add	a1,a1,a4
 8004734:	97ae                	add	a5,a5,a1
 8004736:	00078023          	sb	zero,0(a5)
        str_len = fuseStrings(dest, w.buf[w.head]);
 800473a:	00000097          	auipc	ra,0x0
 800473e:	f20080e7          	jalr	-224(ra) # 800465a <fuseStrings>
        w.tail_string = 0;
 8004742:	00042823          	sw	zero,16(s0) # 4010 <__stack_size+0x3010>
}
 8004746:	40f2                	lw	ra,28(sp)
 8004748:	4462                	lw	s0,24(sp)
 800474a:	44d2                	lw	s1,20(sp)
 800474c:	4942                	lw	s2,16(sp)
 800474e:	49b2                	lw	s3,12(sp)
 8004750:	6105                	addi	sp,sp,32
 8004752:	8082                	ret
        str_len = dequeue_string(dest,i);
 8004754:	85a6                	mv	a1,s1
 8004756:	854a                	mv	a0,s2
 8004758:	00000097          	auipc	ra,0x0
 800475c:	f28080e7          	jalr	-216(ra) # 8004680 <dequeue_string>
        if(str_len > 0){
 8004760:	faa04be3          	bgtz	a0,8004716 <empty_string_queue+0x1a>
    for(int i = max_block_size; i > 0; i--){
 8004764:	14fd                	addi	s1,s1,-1
 8004766:	b76d                	j	8004710 <empty_string_queue+0x14>

08004768 <clear_queues>:
    //q.size = SIZE_INIT;
    //q.head = HEAD_INIT;
    //q.tail = TAIL_INIT;

    // Reset the string queue (w)
    w.size = SIZE_INIT;
 8004768:	200017b7          	lui	a5,0x20001
 800476c:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 8004770:	6691                	lui	a3,0x4
 8004772:	9736                	add	a4,a4,a3
 8004774:	00072223          	sw	zero,4(a4)
    w.head = HEAD_INIT;
 8004778:	00072423          	sw	zero,8(a4)
    w.tail = TAIL_INIT;
 800477c:	00072623          	sw	zero,12(a4)
    w.tail_string = TAIL_INIT;
 8004780:	00072823          	sw	zero,16(a4)
    //    q.values[i].gyroZ = 0;
    //    q.values[i].emg = 0;
    //}

    // Clear values in the string queue
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8004784:	e2478793          	addi	a5,a5,-476
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8004788:	20000613          	li	a2,512
 800478c:	4681                	li	a3,0
            w.buf[i][j] = '\0';
 800478e:	00d785b3          	add	a1,a5,a3
 8004792:	00058023          	sb	zero,0(a1)
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8004796:	0685                	addi	a3,a3,1
 8004798:	fec69be3          	bne	a3,a2,800478e <clear_queues+0x26>
 800479c:	20078793          	addi	a5,a5,512
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 80047a0:	fef716e3          	bne	a4,a5,800478c <clear_queues+0x24>
        }
    }
}
 80047a4:	8082                	ret

080047a6 <delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void delay_1ms(uint32_t count)
{
 80047a6:	7179                	addi	sp,sp,-48
 80047a8:	d04a                	sw	s2,32(sp)
 80047aa:	ce4e                	sw	s3,28(sp)
 80047ac:	c85a                	sw	s6,16(sp)
 80047ae:	d606                	sw	ra,44(sp)
 80047b0:	d422                	sw	s0,40(sp)
 80047b2:	d226                	sw	s1,36(sp)
 80047b4:	cc52                	sw	s4,24(sp)
 80047b6:	ca56                	sw	s5,20(sp)
 80047b8:	c65e                	sw	s7,12(sp)
 80047ba:	c462                	sw	s8,8(sp)
 80047bc:	c266                	sw	s9,4(sp)
 80047be:	8b2a                	mv	s6,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 80047c0:	ffffd097          	auipc	ra,0xffffd
 80047c4:	5ca080e7          	jalr	1482(ra) # 8001d8a <get_timer_value>
 80047c8:	89aa                	mv	s3,a0
 80047ca:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 80047cc:	ffffd097          	auipc	ra,0xffffd
 80047d0:	5be080e7          	jalr	1470(ra) # 8001d8a <get_timer_value>
 80047d4:	84aa                	mv	s1,a0
 80047d6:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 80047d8:	00a99463          	bne	s3,a0,80047e0 <delay_1ms+0x3a>
 80047dc:	feb908e3          	beq	s2,a1,80047cc <delay_1ms+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 80047e0:	080007b7          	lui	a5,0x8000
 80047e4:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 80047e8:	2e47a983          	lw	s3,740(a5)
 80047ec:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 80047f0:	ffffd097          	auipc	ra,0xffffd
 80047f4:	59a080e7          	jalr	1434(ra) # 8001d8a <get_timer_value>
 80047f8:	87aa                	mv	a5,a0
 80047fa:	8d05                	sub	a0,a0,s1
 80047fc:	00a7b7b3          	sltu	a5,a5,a0
 8004800:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8004802:	8d9d                	sub	a1,a1,a5
 8004804:	00003097          	auipc	ra,0x3
 8004808:	ed2080e7          	jalr	-302(ra) # 80076d6 <__floatundidf>
 800480c:	8a2a                	mv	s4,a0
 800480e:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8004812:	8aae                	mv	s5,a1
 8004814:	00003097          	auipc	ra,0x3
 8004818:	e6c080e7          	jalr	-404(ra) # 8007680 <__floatunsidf>
 800481c:	864a                	mv	a2,s2
 800481e:	86ce                	mv	a3,s3
 8004820:	00002097          	auipc	ra,0x2
 8004824:	356080e7          	jalr	854(ra) # 8006b76 <__divdf3>
 8004828:	8c2a                	mv	s8,a0
 800482a:	855a                	mv	a0,s6
 800482c:	8cae                	mv	s9,a1
 800482e:	00003097          	auipc	ra,0x3
 8004832:	e52080e7          	jalr	-430(ra) # 8007680 <__floatunsidf>
 8004836:	862a                	mv	a2,a0
 8004838:	86ae                	mv	a3,a1
 800483a:	8562                	mv	a0,s8
 800483c:	85e6                	mv	a1,s9
 800483e:	00003097          	auipc	ra,0x3
 8004842:	922080e7          	jalr	-1758(ra) # 8007160 <__muldf3>
 8004846:	862a                	mv	a2,a0
 8004848:	86ae                	mv	a3,a1
 800484a:	8552                	mv	a0,s4
 800484c:	85d6                	mv	a1,s5
 800484e:	00003097          	auipc	ra,0x3
 8004852:	86e080e7          	jalr	-1938(ra) # 80070bc <__ledf2>
 8004856:	f8054de3          	bltz	a0,80047f0 <delay_1ms+0x4a>
}
 800485a:	50b2                	lw	ra,44(sp)
 800485c:	5422                	lw	s0,40(sp)
 800485e:	5492                	lw	s1,36(sp)
 8004860:	5902                	lw	s2,32(sp)
 8004862:	49f2                	lw	s3,28(sp)
 8004864:	4a62                	lw	s4,24(sp)
 8004866:	4ad2                	lw	s5,20(sp)
 8004868:	4b42                	lw	s6,16(sp)
 800486a:	4bb2                	lw	s7,12(sp)
 800486c:	4c22                	lw	s8,8(sp)
 800486e:	4c92                	lw	s9,4(sp)
 8004870:	6145                	addi	sp,sp,48
 8004872:	8082                	ret

08004874 <usb_txfifo_write>:
                             uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8004874:	0671                	addi	a2,a2,28
 8004876:	060a                	slli	a2,a2,0x2
 8004878:	962a                	add	a2,a2,a0
    uint32_t word_count = (byte_count + 3U) / 4U;
 800487a:	068d                	addi	a3,a3,3
 800487c:	8289                	srli	a3,a3,0x2
    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 800487e:	4650                	lw	a2,12(a2)

    while (word_count-- > 0) {
 8004880:	068a                	slli	a3,a3,0x2
 8004882:	96ae                	add	a3,a3,a1
 8004884:	00b69463          	bne	a3,a1,800488c <usb_txfifo_write+0x18>

        src_buf += 4U;
    }

    return USB_OK;
}
 8004888:	4501                	li	a0,0
 800488a:	8082                	ret
        word = src_buf[0] | (src_buf[1] << 8) | (src_buf[2] << 16) | (src_buf[3] << 24);
 800488c:	0015c703          	lbu	a4,1(a1)
 8004890:	0005c783          	lbu	a5,0(a1)
        src_buf += 4U;
 8004894:	0591                	addi	a1,a1,4
 8004896:	0722                	slli	a4,a4,0x8
 8004898:	8f5d                	or	a4,a4,a5
 800489a:	ffe5c783          	lbu	a5,-2(a1)
 800489e:	07c2                	slli	a5,a5,0x10
 80048a0:	8f5d                	or	a4,a4,a5
 80048a2:	fff5c783          	lbu	a5,-1(a1)
 80048a6:	07e2                	slli	a5,a5,0x18
 80048a8:	8fd9                	or	a5,a5,a4
        *fifo = word;
 80048aa:	c21c                	sw	a5,0(a2)
        src_buf += 4U;
 80048ac:	bfe1                	j	8004884 <usb_txfifo_write+0x10>

080048ae <usb_rxfifo_read>:
    \param[out] none
    \retval     void type pointer
*/
void *usb_rxfifo_read (usb_core_regs *usb_regs, uint8_t *dest_buf, uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
 80048ae:	060d                	addi	a2,a2,3
 80048b0:	8209                	srli	a2,a2,0x2
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[0];
 80048b2:	5d78                	lw	a4,124(a0)

    while (word_count-- > 0) {
 80048b4:	060a                	slli	a2,a2,0x2
 80048b6:	962e                	add	a2,a2,a1
 80048b8:	00c59463          	bne	a1,a2,80048c0 <usb_rxfifo_read+0x12>

        dest_buf += 4U;
    }

    return ((void *)dest_buf);
}
 80048bc:	852e                	mv	a0,a1
 80048be:	8082                	ret
        word = *fifo;
 80048c0:	431c                	lw	a5,0(a4)
        dest_buf += 4U;
 80048c2:	0591                	addi	a1,a1,4
        dest_buf[1] = (word >> 8) & 0xff;
 80048c4:	0087d693          	srli	a3,a5,0x8
        dest_buf[0] = word & 0xff;
 80048c8:	fef58e23          	sb	a5,-4(a1)
        dest_buf[1] = (word >> 8) & 0xff;
 80048cc:	fed58ea3          	sb	a3,-3(a1)
        dest_buf[2] = (word >> 16) & 0xff;
 80048d0:	0107d693          	srli	a3,a5,0x10
        dest_buf[3] = (word >> 24) & 0xff;
 80048d4:	83e1                	srli	a5,a5,0x18
        dest_buf[2] = (word >> 16) & 0xff;
 80048d6:	fed58f23          	sb	a3,-2(a1)
        dest_buf[3] = (word >> 24) & 0xff;
 80048da:	fef58fa3          	sb	a5,-1(a1)
        dest_buf += 4U;
 80048de:	bfe9                	j	80048b8 <usb_rxfifo_read+0xa>

080048e0 <usb_txfifo_flush>:
    \param[out] none
    \retval     operation status
*/
usb_status usb_txfifo_flush (usb_core_regs *usb_regs, uint8_t fifo_num)
{
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e0:	4118                	lw	a4,0(a0)
{
 80048e2:	1141                	addi	sp,sp,-16
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e4:	059a                	slli	a1,a1,0x6
{
 80048e6:	c606                	sw	ra,12(sp)
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e8:	0205e593          	ori	a1,a1,32
 80048ec:	cb0c                	sw	a1,16(a4)

    /* wait for Tx FIFO flush bit is set */
    while (usb_regs->gr->GRSTCTL & GRSTCTL_TXFF);
 80048ee:	4b1c                	lw	a5,16(a4)
 80048f0:	0207f793          	andi	a5,a5,32
 80048f4:	ffed                	bnez	a5,80048ee <usb_txfifo_flush+0xe>

    /* wait for 3 PHY clocks*/
    usb_udelay(3);
 80048f6:	450d                	li	a0,3
 80048f8:	00001097          	auipc	ra,0x1
 80048fc:	928080e7          	jalr	-1752(ra) # 8005220 <usb_udelay>

    return USB_OK;
}
 8004900:	40b2                	lw	ra,12(sp)
 8004902:	4501                	li	a0,0
 8004904:	0141                	addi	sp,sp,16
 8004906:	8082                	ret

08004908 <usb_devaddr_set>:
    \param[out] none
    \retval     operation status
*/
void usb_devaddr_set (usb_core_driver *udev, uint8_t dev_addr)
{
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8004908:	455c                	lw	a5,12(a0)
    udev->regs.dr->DCFG |= dev_addr << 4;
 800490a:	0592                	slli	a1,a1,0x4
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 800490c:	4398                	lw	a4,0(a5)
 800490e:	80f77713          	andi	a4,a4,-2033
 8004912:	c398                	sw	a4,0(a5)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8004914:	4398                	lw	a4,0(a5)
 8004916:	8dd9                	or	a1,a1,a4
 8004918:	c38c                	sw	a1,0(a5)
}
 800491a:	8082                	ret

0800491c <usb_transc_active>:
    __IO uint32_t *reg_addr = NULL;

    __IO uint32_t epinten = 0U;

    /* get the endpoint number */
    uint8_t ep_num = transc->ep_addr.num;
 800491c:	4198                	lw	a4,0(a1)

    /* enable endpoint interrupt number */
    if (transc->ep_addr.dir) {
 800491e:	00058783          	lb	a5,0(a1)
{
 8004922:	1141                	addi	sp,sp,-16
    __IO uint32_t epinten = 0U;
 8004924:	c602                	sw	zero,12(sp)
    uint8_t ep_num = transc->ep_addr.num;
 8004926:	8b3d                	andi	a4,a4,15
    if (transc->ep_addr.dir) {
 8004928:	0607d963          	bgez	a5,800499a <usb_transc_active+0x7e>
        reg_addr = &udev->regs.er_in[ep_num]->DIEPCTL;
 800492c:	00271793          	slli	a5,a4,0x2
 8004930:	97aa                	add	a5,a5,a0
 8004932:	4bdc                	lw	a5,20(a5)

        epinten = 1 << ep_num;
 8004934:	4685                	li	a3,1
 8004936:	00e696b3          	sll	a3,a3,a4
    } else {
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;

        epinten = 1 << (16 + ep_num);
 800493a:	c636                	sw	a3,12(sp)
    }

    /* if the endpoint is not active, need change the endpoint control register */
    if (!(*reg_addr & DEPCTL_EPACT)) {
 800493c:	4394                	lw	a3,0(a5)
 800493e:	4550                	lw	a2,12(a0)
 8004940:	01069513          	slli	a0,a3,0x10
 8004944:	04054463          	bltz	a0,800498c <usb_transc_active+0x70>
        *reg_addr &= ~(DEPCTL_MPL | DEPCTL_EPTYPE | DIEPCTL_TXFNUM);
 8004948:	4394                	lw	a3,0(a5)
 800494a:	fc340537          	lui	a0,0xfc340
 800494e:	80050513          	addi	a0,a0,-2048 # fc33f800 <_sp+0xdc337800>
 8004952:	8ee9                	and	a3,a3,a0
 8004954:	c394                	sw	a3,0(a5)

        /* set endpoint maximum packet length */
        if (0U == ep_num) {
 8004956:	ef29                	bnez	a4,80049b0 <usb_transc_active+0x94>
            *reg_addr |= EP0_MAXLEN[udev->regs.dr->DSTAT & DSTAT_ES];
 8004958:	4614                	lw	a3,8(a2)
 800495a:	0007a803          	lw	a6,0(a5)
 800495e:	0066f513          	andi	a0,a3,6
 8004962:	080086b7          	lui	a3,0x8008
 8004966:	5bc68693          	addi	a3,a3,1468 # 80085bc <EP0_MAXLEN>
 800496a:	96aa                	add	a3,a3,a0
 800496c:	0006c683          	lbu	a3,0(a3)
 8004970:	0106e6b3          	or	a3,a3,a6
        } else {
            *reg_addr |= transc->max_len;
 8004974:	c394                	sw	a3,0(a5)
        }

        /* activate endpoint */
        *reg_addr |= (transc->ep_type << 18) | (ep_num << 22) | DEPCTL_SD0PID | DEPCTL_EPACT;
 8004976:	0015c683          	lbu	a3,1(a1)
 800497a:	4388                	lw	a0,0(a5)
 800497c:	075a                	slli	a4,a4,0x16
 800497e:	06ca                	slli	a3,a3,0x12
 8004980:	8f55                	or	a4,a4,a3
 8004982:	8f49                	or	a4,a4,a0
 8004984:	100086b7          	lui	a3,0x10008
 8004988:	8f55                	or	a4,a4,a3
 800498a:	c398                	sw	a4,0(a5)
    }
    else
#endif
    {
        /* enable the interrupts for this endpoint */
        udev->regs.dr->DAEPINTEN |= epinten;
 800498c:	4732                	lw	a4,12(sp)
 800498e:	4e5c                	lw	a5,28(a2)
    }

    return USB_OK;
}
 8004990:	4501                	li	a0,0
        udev->regs.dr->DAEPINTEN |= epinten;
 8004992:	8fd9                	or	a5,a5,a4
 8004994:	ce5c                	sw	a5,28(a2)
}
 8004996:	0141                	addi	sp,sp,16
 8004998:	8082                	ret
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 800499a:	00870793          	addi	a5,a4,8
 800499e:	078a                	slli	a5,a5,0x2
 80049a0:	97aa                	add	a5,a5,a0
        epinten = 1 << (16 + ep_num);
 80049a2:	01070613          	addi	a2,a4,16
 80049a6:	4685                	li	a3,1
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 80049a8:	47dc                	lw	a5,12(a5)
        epinten = 1 << (16 + ep_num);
 80049aa:	00c696b3          	sll	a3,a3,a2
 80049ae:	b771                	j	800493a <usb_transc_active+0x1e>
            *reg_addr |= transc->max_len;
 80049b0:	4388                	lw	a0,0(a5)
 80049b2:	0045d683          	lhu	a3,4(a1)
 80049b6:	8ec9                	or	a3,a3,a0
 80049b8:	bf75                	j	8004974 <usb_transc_active+0x58>

080049ba <usb_transc_inxfer>:
*/
usb_status usb_transc_inxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 80049ba:	4190                	lw	a2,0(a1)
{
 80049bc:	1101                	addi	sp,sp,-32

    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 80049be:	e00006b7          	lui	a3,0xe0000
    uint8_t ep_num = transc->ep_addr.num;
 80049c2:	8a3d                	andi	a2,a2,15
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 80049c4:	00261793          	slli	a5,a2,0x2
 80049c8:	97aa                	add	a5,a5,a0
 80049ca:	4bd8                	lw	a4,20(a5)
{
 80049cc:	ce06                	sw	ra,28(sp)
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 80049ce:	431c                	lw	a5,0(a4)
 80049d0:	c43e                	sw	a5,8(sp)
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;
 80049d2:	4b1c                	lw	a5,16(a4)
 80049d4:	c63e                	sw	a5,12(sp)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 80049d6:	47b2                	lw	a5,12(sp)
 80049d8:	8ff5                	and	a5,a5,a3
 80049da:	c63e                	sw	a5,12(sp)

    /* zero length packet or endpoint 0 */
    if (0U == transc->xfer_len) {
 80049dc:	45dc                	lw	a5,12(a1)
 80049de:	e7a5                	bnez	a5,8004a46 <usb_transc_inxfer+0x8c>
        /* set transfer packet count to 1 */
        eplen |= 1 << 19;
 80049e0:	47b2                	lw	a5,12(sp)
 80049e2:	000806b7          	lui	a3,0x80

        /* set endpoint transfer length */
        eplen |= transc->xfer_len;

        if (transc->ep_type == USB_EPTYPE_ISOC) {
            eplen |= DIEPLEN_MCNT;
 80049e6:	8fd5                	or	a5,a5,a3
 80049e8:	c63e                	sw	a5,12(sp)
        }
    }

    udev->regs.er_in[ep_num]->DIEPLEN = eplen;
 80049ea:	47b2                	lw	a5,12(sp)
 80049ec:	cb1c                	sw	a5,16(a4)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80049ee:	00454683          	lbu	a3,4(a0)
 80049f2:	4785                	li	a5,1
 80049f4:	00f69463          	bne	a3,a5,80049fc <usb_transc_inxfer+0x42>
        udev->regs.er_in[ep_num]->DIEPDMAADDR = transc->dma_addr;
 80049f8:	4d9c                	lw	a5,24(a1)
 80049fa:	cb5c                	sw	a5,20(a4)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 80049fc:	0015c803          	lbu	a6,1(a1)
 8004a00:	4785                	li	a5,1
 8004a02:	00f81c63          	bne	a6,a5,8004a1a <usb_transc_inxfer+0x60>
        if (((udev->regs.dr->DSTAT & DSTAT_FNRSOF) >> 8) & 0x1) {
 8004a06:	455c                	lw	a5,12(a0)
 8004a08:	479c                	lw	a5,8(a5)
 8004a0a:	1007f793          	andi	a5,a5,256
 8004a0e:	cfb5                	beqz	a5,8004a8a <usb_transc_inxfer+0xd0>
            epctl |= DEPCTL_SD1PID;
 8004a10:	47a2                	lw	a5,8(sp)
 8004a12:	200006b7          	lui	a3,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004a16:	8fd5                	or	a5,a5,a3
 8004a18:	c43e                	sw	a5,8(sp)
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_CNAK | DEPCTL_EPEN;
 8004a1a:	47a2                	lw	a5,8(sp)
 8004a1c:	840006b7          	lui	a3,0x84000
 8004a20:	8fd5                	or	a5,a5,a3
 8004a22:	c43e                	sw	a5,8(sp)

    udev->regs.er_in[ep_num]->DIEPCTL = epctl;
 8004a24:	47a2                	lw	a5,8(sp)
 8004a26:	45d4                	lw	a3,12(a1)
 8004a28:	c31c                	sw	a5,0(a4)

    if (transc->ep_type != USB_EPTYPE_ISOC) {
 8004a2a:	4785                	li	a5,1
 8004a2c:	06f80363          	beq	a6,a5,8004a92 <usb_transc_inxfer+0xd8>
        /* enable the Tx FIFO empty interrupt for this endpoint */
        if (transc->xfer_len > 0) {
 8004a30:	c699                	beqz	a3,8004a3e <usb_transc_inxfer+0x84>
            udev->regs.dr->DIEPFEINTEN |= 1 << ep_num;
 8004a32:	4558                	lw	a4,12(a0)
 8004a34:	00c79633          	sll	a2,a5,a2
 8004a38:	5b54                	lw	a3,52(a4)
 8004a3a:	8e55                	or	a2,a2,a3
 8004a3c:	db50                	sw	a2,52(a4)
    } else {
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
    }

    return status;
}
 8004a3e:	40f2                	lw	ra,28(sp)
 8004a40:	4501                	li	a0,0
 8004a42:	6105                	addi	sp,sp,32
 8004a44:	8082                	ret
        if (0U == ep_num) {
 8004a46:	0045d683          	lhu	a3,4(a1)
 8004a4a:	e61d                	bnez	a2,8004a78 <usb_transc_inxfer+0xbe>
            transc->xfer_len = USB_MIN(transc->xfer_len, transc->max_len);
 8004a4c:	00f6f363          	bgeu	a3,a5,8004a52 <usb_transc_inxfer+0x98>
 8004a50:	87b6                	mv	a5,a3
 8004a52:	c5dc                	sw	a5,12(a1)
            eplen |= 1 << 19;
 8004a54:	47b2                	lw	a5,12(sp)
 8004a56:	000806b7          	lui	a3,0x80
 8004a5a:	8fd5                	or	a5,a5,a3
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 8004a5c:	c63e                	sw	a5,12(sp)
        eplen |= transc->xfer_len;
 8004a5e:	47b2                	lw	a5,12(sp)
 8004a60:	45d4                	lw	a3,12(a1)
 8004a62:	8fd5                	or	a5,a5,a3
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004a64:	0015c683          	lbu	a3,1(a1)
        eplen |= transc->xfer_len;
 8004a68:	c63e                	sw	a5,12(sp)
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004a6a:	4785                	li	a5,1
 8004a6c:	f6f69fe3          	bne	a3,a5,80049ea <usb_transc_inxfer+0x30>
            eplen |= DIEPLEN_MCNT;
 8004a70:	47b2                	lw	a5,12(sp)
 8004a72:	600006b7          	lui	a3,0x60000
 8004a76:	bf85                	j	80049e6 <usb_transc_inxfer+0x2c>
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 8004a78:	17fd                	addi	a5,a5,-1
 8004a7a:	97b6                	add	a5,a5,a3
 8004a7c:	02d7d7b3          	divu	a5,a5,a3
 8004a80:	4832                	lw	a6,12(sp)
 8004a82:	07ce                	slli	a5,a5,0x13
 8004a84:	0107e7b3          	or	a5,a5,a6
 8004a88:	bfd1                	j	8004a5c <usb_transc_inxfer+0xa2>
            epctl |= DEPCTL_SD0PID;
 8004a8a:	47a2                	lw	a5,8(sp)
 8004a8c:	100006b7          	lui	a3,0x10000
 8004a90:	b759                	j	8004a16 <usb_transc_inxfer+0x5c>
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
 8004a92:	458c                	lw	a1,8(a1)
 8004a94:	06c2                	slli	a3,a3,0x10
 8004a96:	82c1                	srli	a3,a3,0x10
 8004a98:	0521                	addi	a0,a0,8
 8004a9a:	00000097          	auipc	ra,0x0
 8004a9e:	dda080e7          	jalr	-550(ra) # 8004874 <usb_txfifo_write>
 8004aa2:	bf71                	j	8004a3e <usb_transc_inxfer+0x84>

08004aa4 <usb_transc_outxfer>:
*/
usb_status usb_transc_outxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 8004aa4:	4198                	lw	a4,0(a1)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);

    /* zero length packet or endpoint 0 */
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004aa6:	45d4                	lw	a3,12(a1)
    uint8_t ep_num = transc->ep_addr.num;
 8004aa8:	8b3d                	andi	a4,a4,15
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 8004aaa:	00870793          	addi	a5,a4,8
 8004aae:	078a                	slli	a5,a5,0x2
 8004ab0:	97aa                	add	a5,a5,a0
 8004ab2:	00c7a883          	lw	a7,12(a5)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004ab6:	e00007b7          	lui	a5,0xe0000
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 8004aba:	0008a603          	lw	a2,0(a7)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004abe:	0108a803          	lw	a6,16(a7)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004ac2:	00f87833          	and	a6,a6,a5
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004ac6:	0045d783          	lhu	a5,4(a1)
 8004aca:	c291                	beqz	a3,8004ace <usb_transc_outxfer+0x2a>
 8004acc:	e339                	bnez	a4,8004b12 <usb_transc_outxfer+0x6e>
        /* set the transfer length to max packet size */
        eplen |= transc->max_len;
 8004ace:	00f86833          	or	a6,a6,a5

        /* set the transfer packet count to 1 */
        eplen |= 1U << 19;
 8004ad2:	000807b7          	lui	a5,0x80
         * xfersize = N * maxpacket
         */
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;

        eplen |= packet_count << 19;
        eplen |= packet_count * transc->max_len;
 8004ad6:	0107e7b3          	or	a5,a5,a6
    }

    udev->regs.er_out[ep_num]->DOEPLEN = eplen;
 8004ada:	00f8a823          	sw	a5,16(a7)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ade:	00454703          	lbu	a4,4(a0)
 8004ae2:	4785                	li	a5,1
 8004ae4:	00f71563          	bne	a4,a5,8004aee <usb_transc_outxfer+0x4a>
        udev->regs.er_out[ep_num]->DOEPDMAADDR = transc->dma_addr;
 8004ae8:	4d9c                	lw	a5,24(a1)
 8004aea:	00f8aa23          	sw	a5,20(a7)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004aee:	0015c703          	lbu	a4,1(a1)
 8004af2:	4785                	li	a5,1
 8004af4:	00f71863          	bne	a4,a5,8004b04 <usb_transc_outxfer+0x60>
        if (transc->frame_num) {
 8004af8:	0035c783          	lbu	a5,3(a1)
 8004afc:	c79d                	beqz	a5,8004b2a <usb_transc_outxfer+0x86>
            epctl |= DEPCTL_SD1PID;
 8004afe:	200007b7          	lui	a5,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004b02:	8e5d                	or	a2,a2,a5
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_EPEN | DEPCTL_CNAK;
 8004b04:	840007b7          	lui	a5,0x84000
 8004b08:	8e5d                	or	a2,a2,a5

    udev->regs.er_out[ep_num]->DOEPCTL = epctl;
 8004b0a:	00c8a023          	sw	a2,0(a7)

    return status;
}
 8004b0e:	4501                	li	a0,0
 8004b10:	8082                	ret
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;
 8004b12:	fff68713          	addi	a4,a3,-1 # fffffff <__fini_array_end+0x7ff7a37>
 8004b16:	973e                	add	a4,a4,a5
 8004b18:	02f75733          	divu	a4,a4,a5
        eplen |= packet_count << 19;
 8004b1c:	01371693          	slli	a3,a4,0x13
 8004b20:	0106e833          	or	a6,a3,a6
        eplen |= packet_count * transc->max_len;
 8004b24:	02f707b3          	mul	a5,a4,a5
 8004b28:	b77d                	j	8004ad6 <usb_transc_outxfer+0x32>
            epctl |= DEPCTL_SD0PID;
 8004b2a:	100007b7          	lui	a5,0x10000
 8004b2e:	bfd1                	j	8004b02 <usb_transc_outxfer+0x5e>

08004b30 <usb_transc_stall>:
*/
usb_status usb_transc_stall (usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004b30:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004b32:	00058703          	lb	a4,0(a1)
 8004b36:	8bbd                	andi	a5,a5,15
 8004b38:	02075463          	bgez	a4,8004b60 <usb_transc_stall+0x30>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 8004b3c:	078a                	slli	a5,a5,0x2
 8004b3e:	97aa                	add	a5,a5,a0
 8004b40:	4bdc                	lw	a5,20(a5)

        /* set the endpoint disable bit */
        if (*reg_addr & DEPCTL_EPEN) {
 8004b42:	4398                	lw	a4,0(a5)
 8004b44:	00075763          	bgez	a4,8004b52 <usb_transc_stall+0x22>
            *reg_addr |= DEPCTL_EPD;
 8004b48:	4398                	lw	a4,0(a5)
 8004b4a:	400006b7          	lui	a3,0x40000
 8004b4e:	8f55                	or	a4,a4,a3
 8004b50:	c398                	sw	a4,0(a5)
        /* set the endpoint stall bit */
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
    }

    /* set the endpoint stall bit */
    *reg_addr |= DEPCTL_STALL;
 8004b52:	4398                	lw	a4,0(a5)
 8004b54:	002006b7          	lui	a3,0x200

    return USB_OK;
}
 8004b58:	4501                	li	a0,0
    *reg_addr |= DEPCTL_STALL;
 8004b5a:	8f55                	or	a4,a4,a3
 8004b5c:	c398                	sw	a4,0(a5)
}
 8004b5e:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004b60:	07a1                	addi	a5,a5,8
 8004b62:	078a                	slli	a5,a5,0x2
 8004b64:	97aa                	add	a5,a5,a0
 8004b66:	47dc                	lw	a5,12(a5)
 8004b68:	b7ed                	j	8004b52 <usb_transc_stall+0x22>

08004b6a <usb_transc_clrstall>:
*/
usb_status usb_transc_clrstall(usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004b6a:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004b6c:	00058703          	lb	a4,0(a1)
 8004b70:	8bbd                	andi	a5,a5,15
 8004b72:	02075a63          	bgez	a4,8004ba6 <usb_transc_clrstall+0x3c>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 8004b76:	078a                	slli	a5,a5,0x2
 8004b78:	97aa                	add	a5,a5,a0
 8004b7a:	4bdc                	lw	a5,20(a5)
    } else {
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004b7c:	4398                	lw	a4,0(a5)
    }

    /* clear the endpoint stall bits */
    *reg_addr &= ~DEPCTL_STALL;
 8004b7e:	ffe006b7          	lui	a3,0xffe00
 8004b82:	16fd                	addi	a3,a3,-1
 8004b84:	8f75                	and	a4,a4,a3
 8004b86:	c398                	sw	a4,0(a5)

    /* reset data PID of the periodic endpoints */
    if ((transc->ep_type == USB_EPTYPE_INTR) || (transc->ep_type == USB_EPTYPE_BULK)) {
 8004b88:	0015c703          	lbu	a4,1(a1)
 8004b8c:	4685                	li	a3,1
 8004b8e:	1779                	addi	a4,a4,-2
 8004b90:	0ff77713          	andi	a4,a4,255
 8004b94:	00e6e763          	bltu	a3,a4,8004ba2 <usb_transc_clrstall+0x38>
        *reg_addr |= DEPCTL_SD0PID;
 8004b98:	4398                	lw	a4,0(a5)
 8004b9a:	100006b7          	lui	a3,0x10000
 8004b9e:	8f55                	or	a4,a4,a3
 8004ba0:	c398                	sw	a4,0(a5)
    }

    return USB_OK;
}
 8004ba2:	4501                	li	a0,0
 8004ba4:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004ba6:	07a1                	addi	a5,a5,8
 8004ba8:	078a                	slli	a5,a5,0x2
 8004baa:	97aa                	add	a5,a5,a0
 8004bac:	47dc                	lw	a5,12(a5)
 8004bae:	b7f9                	j	8004b7c <usb_transc_clrstall+0x12>

08004bb0 <usb_oepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004bb0:	455c                	lw	a5,12(a0)
 8004bb2:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004bb4:	4fdc                	lw	a5,28(a5)
 8004bb6:	8d7d                	and	a0,a0,a5

    return (value & DAEPINT_OEPITB) >> 16;
 8004bb8:	8141                	srli	a0,a0,0x10
}
 8004bba:	03f57513          	andi	a0,a0,63
 8004bbe:	8082                	ret

08004bc0 <usb_oepintr_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = udev->regs.er_out[ep_num]->DOEPINTF;
 8004bc0:	05a1                	addi	a1,a1,8
 8004bc2:	058a                	slli	a1,a1,0x2
 8004bc4:	95aa                	add	a1,a1,a0
 8004bc6:	45dc                	lw	a5,12(a1)
 8004bc8:	4798                	lw	a4,8(a5)

    value &= udev->regs.dr->DOEPINTEN;
 8004bca:	455c                	lw	a5,12(a0)
 8004bcc:	4bc8                	lw	a0,20(a5)

    return value;
}
 8004bce:	8d79                	and	a0,a0,a4
 8004bd0:	8082                	ret

08004bd2 <usb_iepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_iepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004bd2:	455c                	lw	a5,12(a0)
 8004bd4:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004bd6:	4fdc                	lw	a5,28(a5)
 8004bd8:	8d7d                	and	a0,a0,a5
    
    return value & DAEPINT_IEPITB;
}
 8004bda:	03f57513          	andi	a0,a0,63
 8004bde:	8082                	ret

08004be0 <usb_iepintr_read>:
*/
uint32_t usb_iepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = 0U, fifoemptymask = 0U, commonintmask = 0U;

    commonintmask = udev->regs.dr->DIEPINTEN;
 8004be0:	4558                	lw	a4,12(a0)
 8004be2:	4b14                	lw	a3,16(a4)
    fifoemptymask = udev->regs.dr->DIEPFEINTEN;
 8004be4:	5b5c                	lw	a5,52(a4)

    /* check FIFO empty interrupt enable bit */
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;

    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004be6:	00259713          	slli	a4,a1,0x2
 8004bea:	953a                	add	a0,a0,a4
 8004bec:	4958                	lw	a4,20(a0)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004bee:	00b7d7b3          	srl	a5,a5,a1
 8004bf2:	079e                	slli	a5,a5,0x7
    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004bf4:	4708                	lw	a0,8(a4)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004bf6:	0ff7f793          	andi	a5,a5,255
 8004bfa:	8fd5                	or	a5,a5,a3

    return value;
}
 8004bfc:	8d7d                	and	a0,a0,a5
 8004bfe:	8082                	ret

08004c00 <usb_ctlep_startout>:
    \retval     none
*/
void usb_ctlep_startout (usb_core_driver *udev)
{
    /* set OUT endpoint 0 receive length to 24 bytes, 1 packet and 3 setup packets */
    udev->regs.er_out[0]->DOEPLEN = DOEP0_TLEN(8U * 3U) | DOEP0_PCNT(1U) | DOEP0_STPCNT(3U);
 8004c00:	555c                	lw	a5,44(a0)
 8004c02:	60080737          	lui	a4,0x60080
 8004c06:	0761                	addi	a4,a4,24
 8004c08:	cb98                	sw	a4,16(a5)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004c0a:	00454683          	lbu	a3,4(a0)
 8004c0e:	4705                	li	a4,1
 8004c10:	00e69a63          	bne	a3,a4,8004c24 <usb_ctlep_startout+0x24>
        udev->regs.er_out[0]->DOEPDMAADDR = (uint32_t)&udev->dev.control.req;
 8004c14:	42450513          	addi	a0,a0,1060
 8004c18:	cbc8                	sw	a0,20(a5)

        /* endpoint enable */
        udev->regs.er_out[0]->DOEPCTL |= DEPCTL_EPACT | DEPCTL_EPEN;
 8004c1a:	4398                	lw	a4,0(a5)
 8004c1c:	800086b7          	lui	a3,0x80008
 8004c20:	8f55                	or	a4,a4,a3
 8004c22:	c398                	sw	a4,0(a5)
    }
}
 8004c24:	8082                	ret

08004c26 <usb_clock_active>:
    \param[out] none
    \retval     none
*/
void usb_clock_active (usb_core_driver *udev)
{
    if (udev->bp.low_power) {
 8004c26:	00754783          	lbu	a5,7(a0)
 8004c2a:	cb91                	beqz	a5,8004c3e <usb_clock_active+0x18>
        if (udev->regs.dr->DSTAT & DSTAT_SPST) {
 8004c2c:	455c                	lw	a5,12(a0)
 8004c2e:	479c                	lw	a5,8(a5)
 8004c30:	8b85                	andi	a5,a5,1
 8004c32:	c791                	beqz	a5,8004c3e <usb_clock_active+0x18>
            /* un-gate USB Core clock */
            *udev->regs.PWRCLKCTL &= ~(PWRCLKCTL_SHCLK | PWRCLKCTL_SUCLK);
 8004c34:	0c052703          	lw	a4,192(a0)
 8004c38:	431c                	lw	a5,0(a4)
 8004c3a:	9bf1                	andi	a5,a5,-4
 8004c3c:	c31c                	sw	a5,0(a4)
        }
    }
}
 8004c3e:	8082                	ret

08004c40 <usbd_isr>:
    \param[out] none
    \retval     none
*/
void usbd_isr (usb_core_driver *udev)
{
    if (HOST_MODE != (udev->regs.gr->GINTF & GINTF_COPM)) {
 8004c40:	451c                	lw	a5,8(a0)
 8004c42:	4bd8                	lw	a4,20(a5)
 8004c44:	8b05                	andi	a4,a4,1
 8004c46:	12071c63          	bnez	a4,8004d7e <usbd_isr+0x13e>
{
 8004c4a:	1141                	addi	sp,sp,-16
 8004c4c:	c226                	sw	s1,4(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 8004c4e:	4bc4                	lw	s1,20(a5)
 8004c50:	4f9c                	lw	a5,24(a5)
{
 8004c52:	c606                	sw	ra,12(sp)
 8004c54:	c422                	sw	s0,8(sp)
 8004c56:	c04a                	sw	s2,0(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 8004c58:	8cfd                	and	s1,s1,a5

        /* there are no interrupts, avoid spurious interrupt */
        if (!intr) {
 8004c5a:	10048c63          	beqz	s1,8004d72 <usbd_isr+0x132>
            return;
        }

        /* OUT endpoints interrupts */
        if (intr & GINTF_OEPIF) {
 8004c5e:	00c49793          	slli	a5,s1,0xc
 8004c62:	842a                	mv	s0,a0
 8004c64:	0007d663          	bgez	a5,8004c70 <usbd_isr+0x30>
            usbd_int_epout (udev);
 8004c68:	00000097          	auipc	ra,0x0
 8004c6c:	118080e7          	jalr	280(ra) # 8004d80 <usbd_int_epout>
        }

        /* IN endpoints interrupts */
        if (intr & GINTF_IEPIF) {
 8004c70:	00d49793          	slli	a5,s1,0xd
 8004c74:	0007d763          	bgez	a5,8004c82 <usbd_isr+0x42>
            usbd_int_epin (udev);
 8004c78:	8522                	mv	a0,s0
 8004c7a:	00000097          	auipc	ra,0x0
 8004c7e:	204080e7          	jalr	516(ra) # 8004e7e <usbd_int_epin>
        }

        /* suspend interrupt */
        if (intr & GINTF_SP) {
 8004c82:	6785                	lui	a5,0x1
 8004c84:	80078793          	addi	a5,a5,-2048 # 800 <__dbg_stack_size+0x800>
 8004c88:	00f4f733          	and	a4,s1,a5
 8004c8c:	c319                	beqz	a4,8004c92 <usbd_isr+0x52>
        /* enter DEEP_SLEEP mode with LDO in low power mode */
   //     pmu_to_deepsleepmode(PMU_LDO_LOWPOWER, WFI_CMD);
    //}

    /* clear interrupt */
    udev->regs.gr->GINTF = GINTF_SP;
 8004c8e:	4418                	lw	a4,8(s0)
 8004c90:	cb5c                	sw	a5,20(a4)
        if (intr & GINTF_WKUPIF) {
 8004c92:	0004dc63          	bgez	s1,8004caa <usbd_isr+0x6a>
            udev->dev.cur_status = udev->dev.backup_status;
 8004c96:	0c744783          	lbu	a5,199(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004c9a:	80000737          	lui	a4,0x80000
            udev->dev.cur_status = udev->dev.backup_status;
 8004c9e:	0ff7f793          	andi	a5,a5,255
 8004ca2:	0cf40323          	sb	a5,198(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004ca6:	441c                	lw	a5,8(s0)
 8004ca8:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_MFIF) {
 8004caa:	0024f793          	andi	a5,s1,2
 8004cae:	c781                	beqz	a5,8004cb6 <usbd_isr+0x76>
            udev->regs.gr->GINTF = GINTF_MFIF;
 8004cb0:	441c                	lw	a5,8(s0)
 8004cb2:	4709                	li	a4,2
 8004cb4:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_SOF) {
 8004cb6:	0084f793          	andi	a5,s1,8
 8004cba:	c7b1                	beqz	a5,8004d06 <usbd_isr+0xc6>
            if (udev->dev.class_core->SOF) {
 8004cbc:	43042783          	lw	a5,1072(s0)
 8004cc0:	4f9c                	lw	a5,24(a5)
 8004cc2:	c399                	beqz	a5,8004cc8 <usbd_isr+0x88>
                udev->dev.class_core->SOF(udev); 
 8004cc4:	8522                	mv	a0,s0
 8004cc6:	9782                	jalr	a5
            if (0U != setupc_flag) {
 8004cc8:	20000937          	lui	s2,0x20000
 8004ccc:	52890913          	addi	s2,s2,1320 # 20000528 <setupc_flag>
 8004cd0:	00094783          	lbu	a5,0(s2)
 8004cd4:	0ff7f793          	andi	a5,a5,255
 8004cd8:	c785                	beqz	a5,8004d00 <usbd_isr+0xc0>
                setupc_flag ++;
 8004cda:	00094783          	lbu	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004cde:	4709                	li	a4,2
                setupc_flag ++;
 8004ce0:	0785                	addi	a5,a5,1
 8004ce2:	0ff7f793          	andi	a5,a5,255
 8004ce6:	00f90023          	sb	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004cea:	00094783          	lbu	a5,0(s2)
 8004cee:	00f77963          	bgeu	a4,a5,8004d00 <usbd_isr+0xc0>
                    usbd_setup_transc (udev);
 8004cf2:	8522                	mv	a0,s0
 8004cf4:	00001097          	auipc	ra,0x1
 8004cf8:	e62080e7          	jalr	-414(ra) # 8005b56 <usbd_setup_transc>
                    setupc_flag = 0U;
 8004cfc:	00090023          	sb	zero,0(s2)
            udev->regs.gr->GINTF = GINTF_SOF;
 8004d00:	441c                	lw	a5,8(s0)
 8004d02:	4721                	li	a4,8
 8004d04:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_RXFNEIF) {
 8004d06:	0104f793          	andi	a5,s1,16
 8004d0a:	c791                	beqz	a5,8004d16 <usbd_isr+0xd6>
            usbd_int_rxfifo (udev);
 8004d0c:	8522                	mv	a0,s0
 8004d0e:	00000097          	auipc	ra,0x0
 8004d12:	22c080e7          	jalr	556(ra) # 8004f3a <usbd_int_rxfifo>
        if (intr & GINTF_RST) {
 8004d16:	01349793          	slli	a5,s1,0x13
 8004d1a:	0007d763          	bgez	a5,8004d28 <usbd_isr+0xe8>
            usbd_int_reset (udev);
 8004d1e:	8522                	mv	a0,s0
 8004d20:	00000097          	auipc	ra,0x0
 8004d24:	2e0080e7          	jalr	736(ra) # 8005000 <usbd_int_reset>
        if (intr & GINTF_ENUMFIF) {
 8004d28:	01249793          	slli	a5,s1,0x12
 8004d2c:	0007d763          	bgez	a5,8004d3a <usbd_isr+0xfa>
            usbd_int_enumfinish (udev);
 8004d30:	8522                	mv	a0,s0
 8004d32:	00000097          	auipc	ra,0x0
 8004d36:	3a0080e7          	jalr	928(ra) # 80050d2 <usbd_int_enumfinish>
        if (intr & GINTF_ISOINCIF) {
 8004d3a:	00b49793          	slli	a5,s1,0xb
 8004d3e:	0007dc63          	bgez	a5,8004d56 <usbd_isr+0x116>
            if (NULL != udev->dev.class_core->incomplete_isoc_in) {
 8004d42:	43042783          	lw	a5,1072(s0)
 8004d46:	4fdc                	lw	a5,28(a5)
 8004d48:	c399                	beqz	a5,8004d4e <usbd_isr+0x10e>
                udev->dev.class_core->incomplete_isoc_in(udev);
 8004d4a:	8522                	mv	a0,s0
 8004d4c:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOINCIF;
 8004d4e:	441c                	lw	a5,8(s0)
 8004d50:	00100737          	lui	a4,0x100
 8004d54:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_ISOONCIF) {
 8004d56:	00a49793          	slli	a5,s1,0xa
 8004d5a:	0007dc63          	bgez	a5,8004d72 <usbd_isr+0x132>
            if (NULL != udev->dev.class_core->incomplete_isoc_out) {
 8004d5e:	43042783          	lw	a5,1072(s0)
 8004d62:	539c                	lw	a5,32(a5)
 8004d64:	c399                	beqz	a5,8004d6a <usbd_isr+0x12a>
                udev->dev.class_core->incomplete_isoc_out(udev);
 8004d66:	8522                	mv	a0,s0
 8004d68:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOONCIF;
 8004d6a:	441c                	lw	a5,8(s0)
 8004d6c:	00200737          	lui	a4,0x200
 8004d70:	cbd8                	sw	a4,20(a5)
}
 8004d72:	40b2                	lw	ra,12(sp)
 8004d74:	4422                	lw	s0,8(sp)
 8004d76:	4492                	lw	s1,4(sp)
 8004d78:	4902                	lw	s2,0(sp)
 8004d7a:	0141                	addi	sp,sp,16
 8004d7c:	8082                	ret
 8004d7e:	8082                	ret

08004d80 <usbd_int_epout>:
{
 8004d80:	7139                	addi	sp,sp,-64
 8004d82:	dc22                	sw	s0,56(sp)
 8004d84:	da26                	sw	s1,52(sp)
 8004d86:	d84a                	sw	s2,48(sp)
 8004d88:	d64e                	sw	s3,44(sp)
 8004d8a:	d452                	sw	s4,40(sp)
 8004d8c:	d256                	sw	s5,36(sp)
 8004d8e:	d05a                	sw	s6,32(sp)
 8004d90:	ce5e                	sw	s7,28(sp)
 8004d92:	cc62                	sw	s8,24(sp)
 8004d94:	de06                	sw	ra,60(sp)
 8004d96:	ca66                	sw	s9,20(sp)
 8004d98:	842a                	mv	s0,a0
                                                                (eplen & DEPLEN_TLEN);
 8004d9a:	00080a37          	lui	s4,0x80
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004d9e:	00000097          	auipc	ra,0x0
 8004da2:	e12080e7          	jalr	-494(ra) # 8004bb0 <usb_oepintnum_read>
 8004da6:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 8004da8:	4481                	li	s1,0
                if ((0U == ep_num) && (0U != setupc_flag)) {
 8004daa:	20000ab7          	lui	s5,0x20000
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004dae:	4b21                	li	s6,8
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004db0:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004db2:	4b99                	li	s7,6
 8004db4:	4c61                	li	s8,24
                                                                (eplen & DEPLEN_TLEN);
 8004db6:	1a7d                	addi	s4,s4,-1
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004db8:	02091063          	bnez	s2,8004dd8 <usbd_int_epout+0x58>
}
 8004dbc:	50f2                	lw	ra,60(sp)
 8004dbe:	5462                	lw	s0,56(sp)
 8004dc0:	54d2                	lw	s1,52(sp)
 8004dc2:	5942                	lw	s2,48(sp)
 8004dc4:	59b2                	lw	s3,44(sp)
 8004dc6:	5a22                	lw	s4,40(sp)
 8004dc8:	5a92                	lw	s5,36(sp)
 8004dca:	5b02                	lw	s6,32(sp)
 8004dcc:	4bf2                	lw	s7,28(sp)
 8004dce:	4c62                	lw	s8,24(sp)
 8004dd0:	4cd2                	lw	s9,20(sp)
 8004dd2:	4505                	li	a0,1
 8004dd4:	6121                	addi	sp,sp,64
 8004dd6:	8082                	ret
        if (epintnum & 0x1) {
 8004dd8:	00197793          	andi	a5,s2,1
 8004ddc:	cfc9                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
            __IO uint32_t oepintr = usb_oepintr_read (udev, ep_num);
 8004dde:	0ff4fc93          	andi	s9,s1,255
 8004de2:	85e6                	mv	a1,s9
 8004de4:	8522                	mv	a0,s0
 8004de6:	00000097          	auipc	ra,0x0
 8004dea:	dda080e7          	jalr	-550(ra) # 8004bc0 <usb_oepintr_read>
 8004dee:	c42a                	sw	a0,8(sp)
            if (oepintr & DOEPINTF_TF) {
 8004df0:	47a2                	lw	a5,8(sp)
 8004df2:	8b85                	andi	a5,a5,1
 8004df4:	cfa1                	beqz	a5,8004e4c <usbd_int_epout+0xcc>
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004df6:	00249793          	slli	a5,s1,0x2
 8004dfa:	97a2                	add	a5,a5,s0
 8004dfc:	57d8                	lw	a4,44(a5)
 8004dfe:	01372423          	sw	s3,8(a4) # 200008 <__stack_size+0x1ff008>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004e02:	00444683          	lbu	a3,4(s0)
 8004e06:	01369f63          	bne	a3,s3,8004e24 <usbd_int_epout+0xa4>
                    __IO uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004e0a:	4b18                	lw	a4,16(a4)
 8004e0c:	c63a                	sw	a4,12(sp)
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004e0e:	03848733          	mul	a4,s1,s8
                                                                (eplen & DEPLEN_TLEN);
 8004e12:	46b2                	lw	a3,12(sp)
 8004e14:	0146f6b3          	and	a3,a3,s4
 8004e18:	97ba                	add	a5,a5,a4
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004e1a:	2707d703          	lhu	a4,624(a5)
 8004e1e:	8f15                	sub	a4,a4,a3
 8004e20:	26e7ae23          	sw	a4,636(a5)
                usbd_out_transc (udev, ep_num);
 8004e24:	85e6                	mv	a1,s9
 8004e26:	8522                	mv	a0,s0
 8004e28:	00001097          	auipc	ra,0x1
 8004e2c:	dc2080e7          	jalr	-574(ra) # 8005bea <usbd_out_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004e30:	00444783          	lbu	a5,4(s0)
 8004e34:	01379c63          	bne	a5,s3,8004e4c <usbd_int_epout+0xcc>
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004e38:	e891                	bnez	s1,8004e4c <usbd_int_epout+0xcc>
 8004e3a:	42c44783          	lbu	a5,1068(s0)
 8004e3e:	01779763          	bne	a5,s7,8004e4c <usbd_int_epout+0xcc>
                        usb_ctlep_startout (udev);
 8004e42:	8522                	mv	a0,s0
 8004e44:	00000097          	auipc	ra,0x0
 8004e48:	dbc080e7          	jalr	-580(ra) # 8004c00 <usb_ctlep_startout>
            if (oepintr & DOEPINTF_STPF) {
 8004e4c:	47a2                	lw	a5,8(sp)
 8004e4e:	8ba1                	andi	a5,a5,8
 8004e50:	c39d                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
                if ((0U == ep_num) && (0U != setupc_flag)) {
 8004e52:	e095                	bnez	s1,8004e76 <usbd_int_epout+0xf6>
 8004e54:	528a8c93          	addi	s9,s5,1320 # 20000528 <setupc_flag>
 8004e58:	000cc783          	lbu	a5,0(s9)
 8004e5c:	0ff7f793          	andi	a5,a5,255
 8004e60:	cb99                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
                    usbd_setup_transc (udev);
 8004e62:	8522                	mv	a0,s0
 8004e64:	00001097          	auipc	ra,0x1
 8004e68:	cf2080e7          	jalr	-782(ra) # 8005b56 <usbd_setup_transc>
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004e6c:	545c                	lw	a5,44(s0)
                    setupc_flag = 0U;
 8004e6e:	000c8023          	sb	zero,0(s9)
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004e72:	0167a423          	sw	s6,8(a5)
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004e76:	00195913          	srli	s2,s2,0x1
 8004e7a:	0485                	addi	s1,s1,1
 8004e7c:	bf35                	j	8004db8 <usbd_int_epout+0x38>

08004e7e <usbd_int_epin>:
{
 8004e7e:	7179                	addi	sp,sp,-48
 8004e80:	d422                	sw	s0,40(sp)
 8004e82:	d226                	sw	s1,36(sp)
 8004e84:	d04a                	sw	s2,32(sp)
 8004e86:	ce4e                	sw	s3,28(sp)
 8004e88:	cc52                	sw	s4,24(sp)
 8004e8a:	ca56                	sw	s5,20(sp)
 8004e8c:	d606                	sw	ra,44(sp)
 8004e8e:	c85a                	sw	s6,16(sp)
 8004e90:	842a                	mv	s0,a0
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004e92:	00000097          	auipc	ra,0x0
 8004e96:	d40080e7          	jalr	-704(ra) # 8004bd2 <usb_iepintnum_read>
 8004e9a:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 8004e9c:	4481                	li	s1,0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004e9e:	08000a13          	li	s4,128
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004ea2:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004ea4:	4a95                	li	s5,5
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004ea6:	00091d63          	bnez	s2,8004ec0 <usbd_int_epin+0x42>
}
 8004eaa:	50b2                	lw	ra,44(sp)
 8004eac:	5422                	lw	s0,40(sp)
 8004eae:	5492                	lw	s1,36(sp)
 8004eb0:	5902                	lw	s2,32(sp)
 8004eb2:	49f2                	lw	s3,28(sp)
 8004eb4:	4a62                	lw	s4,24(sp)
 8004eb6:	4ad2                	lw	s5,20(sp)
 8004eb8:	4b42                	lw	s6,16(sp)
 8004eba:	4505                	li	a0,1
 8004ebc:	6145                	addi	sp,sp,48
 8004ebe:	8082                	ret
        if (epintnum & 0x1U) {
 8004ec0:	00197793          	andi	a5,s2,1
 8004ec4:	c7bd                	beqz	a5,8004f32 <usbd_int_epin+0xb4>
            __IO uint32_t iepintr = usb_iepintr_read (udev, ep_num);
 8004ec6:	0ff4fb13          	andi	s6,s1,255
 8004eca:	85da                	mv	a1,s6
 8004ecc:	8522                	mv	a0,s0
 8004ece:	00000097          	auipc	ra,0x0
 8004ed2:	d12080e7          	jalr	-750(ra) # 8004be0 <usb_iepintr_read>
 8004ed6:	c62a                	sw	a0,12(sp)
            if (iepintr & DIEPINTF_TF) {
 8004ed8:	47b2                	lw	a5,12(sp)
 8004eda:	8b85                	andi	a5,a5,1
 8004edc:	cb9d                	beqz	a5,8004f12 <usbd_int_epin+0x94>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004ede:	00249793          	slli	a5,s1,0x2
 8004ee2:	97a2                	add	a5,a5,s0
 8004ee4:	4bdc                	lw	a5,20(a5)
                usbd_in_transc (udev, ep_num);
 8004ee6:	85da                	mv	a1,s6
 8004ee8:	8522                	mv	a0,s0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004eea:	0137a423          	sw	s3,8(a5)
                usbd_in_transc (udev, ep_num);
 8004eee:	00001097          	auipc	ra,0x1
 8004ef2:	de2080e7          	jalr	-542(ra) # 8005cd0 <usbd_in_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ef6:	00444783          	lbu	a5,4(s0)
 8004efa:	01379c63          	bne	a5,s3,8004f12 <usbd_int_epin+0x94>
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004efe:	e891                	bnez	s1,8004f12 <usbd_int_epin+0x94>
 8004f00:	42c44783          	lbu	a5,1068(s0)
 8004f04:	01579763          	bne	a5,s5,8004f12 <usbd_int_epin+0x94>
                        usb_ctlep_startout (udev);
 8004f08:	8522                	mv	a0,s0
 8004f0a:	00000097          	auipc	ra,0x0
 8004f0e:	cf6080e7          	jalr	-778(ra) # 8004c00 <usb_ctlep_startout>
            if (iepintr & DIEPINTF_TXFE) {
 8004f12:	47b2                	lw	a5,12(sp)
 8004f14:	0807f793          	andi	a5,a5,128
 8004f18:	cf89                	beqz	a5,8004f32 <usbd_int_epin+0xb4>
                usbd_emptytxfifo_write (udev, ep_num);
 8004f1a:	85a6                	mv	a1,s1
 8004f1c:	8522                	mv	a0,s0
 8004f1e:	00000097          	auipc	ra,0x0
 8004f22:	21c080e7          	jalr	540(ra) # 800513a <usbd_emptytxfifo_write>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004f26:	00249793          	slli	a5,s1,0x2
 8004f2a:	97a2                	add	a5,a5,s0
 8004f2c:	4bdc                	lw	a5,20(a5)
 8004f2e:	0147a423          	sw	s4,8(a5)
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004f32:	00195913          	srli	s2,s2,0x1
 8004f36:	0485                	addi	s1,s1,1
 8004f38:	b7bd                	j	8004ea6 <usbd_int_epin+0x28>

08004f3a <usbd_int_rxfifo>:
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f3a:	451c                	lw	a5,8(a0)
{
 8004f3c:	1101                	addi	sp,sp,-32
    __IO uint32_t devrxstat = 0;
 8004f3e:	c602                	sw	zero,12(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f40:	4f98                	lw	a4,24(a5)
{
 8004f42:	cc22                	sw	s0,24(sp)
 8004f44:	ca26                	sw	s1,20(sp)
 8004f46:	c84a                	sw	s2,16(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f48:	9b3d                	andi	a4,a4,-17
{
 8004f4a:	ce06                	sw	ra,28(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f4c:	cf98                	sw	a4,24(a5)
    devrxstat = udev->regs.gr->GRSTATP;
 8004f4e:	539c                	lw	a5,32(a5)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f50:	4689                	li	a3,2
{
 8004f52:	892a                	mv	s2,a0
    devrxstat = udev->regs.gr->GRSTATP;
 8004f54:	c63e                	sw	a5,12(sp)
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 8004f56:	4432                	lw	s0,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f58:	44b2                	lw	s1,12(sp)
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004f5a:	4732                	lw	a4,12(sp)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f5c:	47b2                	lw	a5,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f5e:	8091                	srli	s1,s1,0x4
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 8004f60:	883d                	andi	s0,s0,15
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f62:	83c5                	srli	a5,a5,0x11
 8004f64:	8bbd                	andi	a5,a5,15
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f66:	7ff4f493          	andi	s1,s1,2047
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f6a:	02d78263          	beq	a5,a3,8004f8e <usbd_int_rxfifo+0x54>
 8004f6e:	4699                	li	a3,6
 8004f70:	04d78763          	beq	a5,a3,8004fbe <usbd_int_rxfifo+0x84>
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f74:	00892703          	lw	a4,8(s2)
}
 8004f78:	40f2                	lw	ra,28(sp)
 8004f7a:	4462                	lw	s0,24(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f7c:	4f1c                	lw	a5,24(a4)
}
 8004f7e:	44d2                	lw	s1,20(sp)
 8004f80:	4942                	lw	s2,16(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f82:	0107e793          	ori	a5,a5,16
 8004f86:	cf1c                	sw	a5,24(a4)
}
 8004f88:	4505                	li	a0,1
 8004f8a:	6105                	addi	sp,sp,32
 8004f8c:	8082                	ret
            if (bcount > 0) {
 8004f8e:	d0fd                	beqz	s1,8004f74 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, transc->xfer_buf, bcount);
 8004f90:	47f1                	li	a5,28
 8004f92:	02f40433          	mul	s0,s0,a5
 8004f96:	8626                	mv	a2,s1
 8004f98:	942a                	add	s0,s0,a0
 8004f9a:	27442583          	lw	a1,628(s0)
 8004f9e:	0521                	addi	a0,a0,8
 8004fa0:	00000097          	auipc	ra,0x0
 8004fa4:	90e080e7          	jalr	-1778(ra) # 80048ae <usb_rxfifo_read>
                transc->xfer_buf += bcount;
 8004fa8:	27442783          	lw	a5,628(s0)
 8004fac:	97a6                	add	a5,a5,s1
 8004fae:	26f42a23          	sw	a5,628(s0)
                transc->xfer_count += bcount;
 8004fb2:	27c42783          	lw	a5,636(s0)
 8004fb6:	94be                	add	s1,s1,a5
 8004fb8:	26942e23          	sw	s1,636(s0)
 8004fbc:	bf65                	j	8004f74 <usbd_int_rxfifo+0x3a>
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004fbe:	47f1                	li	a5,28
 8004fc0:	02f40433          	mul	s0,s0,a5
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004fc4:	833d                	srli	a4,a4,0xf
 8004fc6:	8b0d                	andi	a4,a4,3
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004fc8:	942a                	add	s0,s0,a0
 8004fca:	26c44783          	lbu	a5,620(s0)
 8004fce:	8bbd                	andi	a5,a5,15
 8004fd0:	8fd9                	or	a5,a5,a4
 8004fd2:	f3cd                	bnez	a5,8004f74 <usbd_int_rxfifo+0x3a>
 8004fd4:	47a1                	li	a5,8
 8004fd6:	f8f49fe3          	bne	s1,a5,8004f74 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, (uint8_t *)&udev->dev.control.req, bcount);
 8004fda:	42450593          	addi	a1,a0,1060
 8004fde:	4621                	li	a2,8
 8004fe0:	0521                	addi	a0,a0,8
 8004fe2:	00000097          	auipc	ra,0x0
 8004fe6:	8cc080e7          	jalr	-1844(ra) # 80048ae <usb_rxfifo_read>
                transc->xfer_count += bcount;
 8004fea:	27c42783          	lw	a5,636(s0)
                setupc_flag = 1;
 8004fee:	4705                	li	a4,1
                transc->xfer_count += bcount;
 8004ff0:	07a1                	addi	a5,a5,8
 8004ff2:	26f42e23          	sw	a5,636(s0)
                setupc_flag = 1;
 8004ff6:	200007b7          	lui	a5,0x20000
 8004ffa:	52e78423          	sb	a4,1320(a5) # 20000528 <setupc_flag>
 8004ffe:	bf9d                	j	8004f74 <usbd_int_rxfifo+0x3a>

08005000 <usbd_int_reset>:
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005000:	4558                	lw	a4,12(a0)
{
 8005002:	1141                	addi	sp,sp,-16
 8005004:	c422                	sw	s0,8(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005006:	435c                	lw	a5,4(a4)
{
 8005008:	c606                	sw	ra,12(sp)
 800500a:	c226                	sw	s1,4(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 800500c:	9bf9                	andi	a5,a5,-2
{
 800500e:	c04a                	sw	s2,0(sp)
 8005010:	842a                	mv	s0,a0
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005012:	c35c                	sw	a5,4(a4)
    usb_txfifo_flush (&udev->regs, 0);
 8005014:	4581                	li	a1,0
 8005016:	0521                	addi	a0,a0,8
 8005018:	00000097          	auipc	ra,0x0
 800501c:	8c8080e7          	jalr	-1848(ra) # 80048e0 <usb_txfifo_flush>
    for (i = 0; i < udev->bp.num_ep; i++) {
 8005020:	00344603          	lbu	a2,3(s0)
 8005024:	01440793          	addi	a5,s0,20
 8005028:	4701                	li	a4,0
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800502a:	0ff00693          	li	a3,255
    for (i = 0; i < udev->bp.num_ep; i++) {
 800502e:	08c76b63          	bltu	a4,a2,80050c4 <usbd_int_reset+0xc4>
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8005032:	445c                	lw	a5,12(s0)
 8005034:	577d                	li	a4,-1
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8005036:	4485                	li	s1,1
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8005038:	cf98                	sw	a4,24(a5)
    udev->regs.dr->DAEPINTEN = 1U | (1U << 16);
 800503a:	6741                	lui	a4,0x10
 800503c:	0705                	addi	a4,a4,1
 800503e:	cfd8                	sw	a4,28(a5)
    udev->regs.dr->DOEPINTEN = DOEPINTEN_STPFEN | DOEPINTEN_TFEN;
 8005040:	4725                	li	a4,9
 8005042:	cbd8                	sw	a4,20(a5)
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8005044:	cb84                	sw	s1,16(a5)
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8005046:	4398                	lw	a4,0(a5)
    usb_ctlep_startout (udev);
 8005048:	8522                	mv	a0,s0
    udev->dev.transc_out[0] = (usb_transc) {
 800504a:	04000913          	li	s2,64
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 800504e:	80f77713          	andi	a4,a4,-2033
 8005052:	c398                	sw	a4,0(a5)
    udev->dev.dev_addr = 0U;
 8005054:	0c0402a3          	sb	zero,197(s0)
    usb_ctlep_startout (udev);
 8005058:	00000097          	auipc	ra,0x0
 800505c:	ba8080e7          	jalr	-1112(ra) # 8004c00 <usb_ctlep_startout>
    udev->regs.gr->GINTF = GINTF_RST;
 8005060:	441c                	lw	a5,8(s0)
 8005062:	6705                	lui	a4,0x1
    udev->dev.transc_out[0] = (usb_transc) {
 8005064:	4671                	li	a2,28
    udev->regs.gr->GINTF = GINTF_RST;
 8005066:	cbd8                	sw	a4,20(a5)
    udev->dev.transc_out[0] = (usb_transc) {
 8005068:	26c40793          	addi	a5,s0,620
 800506c:	853e                	mv	a0,a5
 800506e:	4581                	li	a1,0
 8005070:	00003097          	auipc	ra,0x3
 8005074:	95a080e7          	jalr	-1702(ra) # 80079ca <memset>
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 8005078:	85aa                	mv	a1,a0
    udev->dev.transc_out[0] = (usb_transc) {
 800507a:	27241823          	sh	s2,624(s0)
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 800507e:	8522                	mv	a0,s0
 8005080:	00000097          	auipc	ra,0x0
 8005084:	89c080e7          	jalr	-1892(ra) # 800491c <usb_transc_active>
    udev->dev.transc_in[0] = (usb_transc) {
 8005088:	0c840793          	addi	a5,s0,200
 800508c:	4671                	li	a2,28
 800508e:	4581                	li	a1,0
 8005090:	853e                	mv	a0,a5
 8005092:	00003097          	auipc	ra,0x3
 8005096:	938080e7          	jalr	-1736(ra) # 80079ca <memset>
 800509a:	f8000713          	li	a4,-128
 800509e:	0d241623          	sh	s2,204(s0)
 80050a2:	0ce40423          	sb	a4,200(s0)
    usb_transc_active (udev, &udev->dev.transc_in[0]);
 80050a6:	85aa                	mv	a1,a0
 80050a8:	8522                	mv	a0,s0
 80050aa:	00000097          	auipc	ra,0x0
 80050ae:	872080e7          	jalr	-1934(ra) # 800491c <usb_transc_active>
}
 80050b2:	40b2                	lw	ra,12(sp)
    udev->dev.cur_status = USBD_DEFAULT;
 80050b4:	0c940323          	sb	s1,198(s0)
}
 80050b8:	4422                	lw	s0,8(sp)
 80050ba:	4492                	lw	s1,4(sp)
 80050bc:	4902                	lw	s2,0(sp)
 80050be:	4505                	li	a0,1
 80050c0:	0141                	addi	sp,sp,16
 80050c2:	8082                	ret
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 80050c4:	438c                	lw	a1,0(a5)
    for (i = 0; i < udev->bp.num_ep; i++) {
 80050c6:	0705                	addi	a4,a4,1
 80050c8:	0791                	addi	a5,a5,4
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 80050ca:	c594                	sw	a3,8(a1)
        udev->regs.er_out[i]->DOEPINTF = 0xFFU;
 80050cc:	4bcc                	lw	a1,20(a5)
 80050ce:	c594                	sw	a3,8(a1)
 80050d0:	bfb9                	j	800502e <usbd_int_reset+0x2e>

080050d2 <usbd_int_enumfinish>:
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050d2:	455c                	lw	a5,12(a0)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 80050d4:	7671                	lui	a2,0xffffc
 80050d6:	3ff60613          	addi	a2,a2,1023 # ffffc3ff <_sp+0xdfff43ff>
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050da:	4798                	lw	a4,8(a5)
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 80050dc:	43d4                	lw	a3,4(a5)
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050de:	8305                	srli	a4,a4,0x1
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 80050e0:	eff6f693          	andi	a3,a3,-257
 80050e4:	c3d4                	sw	a3,4(a5)
    udev->regs.dr->DCTL |= DCTL_CGINAK;
 80050e6:	43d4                	lw	a3,4(a5)
 80050e8:	1006e693          	ori	a3,a3,256
 80050ec:	c3d4                	sw	a3,4(a5)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 80050ee:	451c                	lw	a5,8(a0)
 80050f0:	47d4                	lw	a3,12(a5)
 80050f2:	8ef1                	and	a3,a3,a2
 80050f4:	c7d4                	sw	a3,12(a5)
    if (USB_SPEED[enum_speed] == USB_SPEED_HIGH) {
 80050f6:	00377693          	andi	a3,a4,3
 80050fa:	08008737          	lui	a4,0x8008
 80050fe:	5c070713          	addi	a4,a4,1472 # 80085c0 <USB_SPEED>
 8005102:	9736                	add	a4,a4,a3
 8005104:	00074703          	lbu	a4,0(a4)
 8005108:	468d                	li	a3,3
 800510a:	00d71e63          	bne	a4,a3,8005126 <usbd_int_enumfinish+0x54>
        udev->bp.core_speed = USB_SPEED_HIGH;
 800510e:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x09 << 10;
 8005112:	47d8                	lw	a4,12(a5)
 8005114:	6689                	lui	a3,0x2
 8005116:	40068693          	addi	a3,a3,1024 # 2400 <__stack_size+0x1400>
 800511a:	8f55                	or	a4,a4,a3
 800511c:	c7d8                	sw	a4,12(a5)
    udev->regs.gr->GINTF = GINTF_ENUMFIF;
 800511e:	6709                	lui	a4,0x2
 8005120:	cbd8                	sw	a4,20(a5)
}
 8005122:	4505                	li	a0,1
 8005124:	8082                	ret
        udev->bp.core_speed = USB_SPEED_FULL;
 8005126:	4709                	li	a4,2
 8005128:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x05 << 10;
 800512c:	47d8                	lw	a4,12(a5)
 800512e:	6685                	lui	a3,0x1
 8005130:	40068693          	addi	a3,a3,1024 # 1400 <__stack_size+0x400>
 8005134:	8f55                	or	a4,a4,a3
 8005136:	c7d8                	sw	a4,12(a5)
 8005138:	b7dd                	j	800511e <usbd_int_enumfinish+0x4c>

0800513a <usbd_emptytxfifo_write>:
    uint32_t len = 0;
    uint32_t word_count = 0;

    transc = &udev->dev.transc_in[ep_num];

    len = transc->xfer_len - transc->xfer_count;
 800513a:	47f1                	li	a5,28
 800513c:	02f587b3          	mul	a5,a1,a5
{
 8005140:	7179                	addi	sp,sp,-48
 8005142:	ce4e                	sw	s3,28(sp)
 8005144:	d606                	sw	ra,44(sp)
 8005146:	d422                	sw	s0,40(sp)
 8005148:	d226                	sw	s1,36(sp)
 800514a:	d04a                	sw	s2,32(sp)
 800514c:	cc52                	sw	s4,24(sp)
 800514e:	ca56                	sw	s5,20(sp)
 8005150:	c85a                	sw	s6,16(sp)
    len = transc->xfer_len - transc->xfer_count;
 8005152:	97aa                	add	a5,a5,a0
 8005154:	0d47a703          	lw	a4,212(a5)
 8005158:	0d87a683          	lw	a3,216(a5)

    /* get the data length to write */
    if (len > transc->max_len) {
 800515c:	0cc7d783          	lhu	a5,204(a5)
{
 8005160:	c65e                	sw	s7,12(sp)
 8005162:	c462                	sw	s8,8(sp)
    len = transc->xfer_len - transc->xfer_count;
 8005164:	8f15                	sub	a4,a4,a3
{
 8005166:	89aa                	mv	s3,a0
        len = transc->max_len;
    }

    word_count = (len + 3) / 4;
 8005168:	00f77363          	bgeu	a4,a5,800516e <usbd_emptytxfifo_write+0x34>
 800516c:	87ba                	mv	a5,a4

    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
        (transc->xfer_count < transc->xfer_len)) {
 800516e:	4471                	li	s0,28
 8005170:	02858433          	mul	s0,a1,s0
        transc->xfer_buf += len;
        transc->xfer_count += len;

        if (transc->xfer_count == transc->xfer_len) {
            /* disable the device endpoint FIFO empty interrupt */
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005174:	4a85                	li	s5,1
    word_count = (len + 3) / 4;
 8005176:	078d                	addi	a5,a5,3
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005178:	00ba9ab3          	sll	s5,s5,a1
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 800517c:	00259b13          	slli	s6,a1,0x2
 8005180:	6bc1                	lui	s7,0x10
    word_count = (len + 3) / 4;
 8005182:	0027da13          	srli	s4,a5,0x2
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005186:	fffaca93          	not	s5,s5
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 800518a:	9b4e                	add	s6,s6,s3
 800518c:	1bfd                	addi	s7,s7,-1
        (transc->xfer_count < transc->xfer_len)) {
 800518e:	944e                	add	s0,s0,s3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8005190:	0ff5f913          	andi	s2,a1,255
 8005194:	00898c13          	addi	s8,s3,8
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 8005198:	014b2783          	lw	a5,20(s6)
 800519c:	4f98                	lw	a4,24(a5)
 800519e:	01777733          	and	a4,a4,s7
 80051a2:	00ea7863          	bgeu	s4,a4,80051b2 <usbd_emptytxfifo_write+0x78>
        (transc->xfer_count < transc->xfer_len)) {
 80051a6:	0d842703          	lw	a4,216(s0)
 80051aa:	0d442783          	lw	a5,212(s0)
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80051ae:	00f76f63          	bltu	a4,a5,80051cc <usbd_emptytxfifo_write+0x92>
        }
    }

    return 1;
}
 80051b2:	50b2                	lw	ra,44(sp)
 80051b4:	5422                	lw	s0,40(sp)
 80051b6:	5492                	lw	s1,36(sp)
 80051b8:	5902                	lw	s2,32(sp)
 80051ba:	49f2                	lw	s3,28(sp)
 80051bc:	4a62                	lw	s4,24(sp)
 80051be:	4ad2                	lw	s5,20(sp)
 80051c0:	4b42                	lw	s6,16(sp)
 80051c2:	4bb2                	lw	s7,12(sp)
 80051c4:	4c22                	lw	s8,8(sp)
 80051c6:	4505                	li	a0,1
 80051c8:	6145                	addi	sp,sp,48
 80051ca:	8082                	ret
        if (len > transc->max_len) {
 80051cc:	0cc45483          	lhu	s1,204(s0)
        len = transc->xfer_len - transc->xfer_count;
 80051d0:	8f99                	sub	a5,a5,a4
        if (len > transc->max_len) {
 80051d2:	0097f363          	bgeu	a5,s1,80051d8 <usbd_emptytxfifo_write+0x9e>
 80051d6:	84be                	mv	s1,a5
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051d8:	0d042583          	lw	a1,208(s0)
 80051dc:	01049693          	slli	a3,s1,0x10
        word_count = (len + 3) / 4;
 80051e0:	00348793          	addi	a5,s1,3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051e4:	82c1                	srli	a3,a3,0x10
 80051e6:	864a                	mv	a2,s2
 80051e8:	8562                	mv	a0,s8
        word_count = (len + 3) / 4;
 80051ea:	0027da13          	srli	s4,a5,0x2
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051ee:	fffff097          	auipc	ra,0xfffff
 80051f2:	686080e7          	jalr	1670(ra) # 8004874 <usb_txfifo_write>
        transc->xfer_count += len;
 80051f6:	0d842783          	lw	a5,216(s0)
        transc->xfer_buf += len;
 80051fa:	0d042703          	lw	a4,208(s0)
 80051fe:	9726                	add	a4,a4,s1
        transc->xfer_count += len;
 8005200:	94be                	add	s1,s1,a5
        if (transc->xfer_count == transc->xfer_len) {
 8005202:	0d442783          	lw	a5,212(s0)
        transc->xfer_buf += len;
 8005206:	0ce42823          	sw	a4,208(s0)
        transc->xfer_count += len;
 800520a:	0c942c23          	sw	s1,216(s0)
        if (transc->xfer_count == transc->xfer_len) {
 800520e:	f8f495e3          	bne	s1,a5,8005198 <usbd_emptytxfifo_write+0x5e>
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005212:	00c9a783          	lw	a5,12(s3)
 8005216:	5bd8                	lw	a4,52(a5)
 8005218:	01577733          	and	a4,a4,s5
 800521c:	dbd8                	sw	a4,52(a5)
 800521e:	bfad                	j	8005198 <usbd_emptytxfifo_write+0x5e>

08005220 <usb_udelay>:
    \retval     none
*/
static void hw_delay(uint32_t ntime, uint8_t unit)
{
    if(unit == TIM_USEC_DELAY){
        usb_delay_1us(ntime);
 8005220:	00000317          	auipc	t1,0x0
 8005224:	0e030067          	jr	224(t1) # 8005300 <usb_delay_1us>

08005228 <USBFS_IRQHandler>:
    \retval     none
*/
void USBFS_IRQHandler (void)
{ 
    //DEBUG_PIN_ON();
    usbd_isr (&USB_OTG_dev);
 8005228:	20000537          	lui	a0,0x20000
 800522c:	04450513          	addi	a0,a0,68 # 20000044 <USB_OTG_dev>
 8005230:	00000317          	auipc	t1,0x0
 8005234:	a1030067          	jr	-1520(t1) # 8004c40 <usbd_isr>

08005238 <USBFS_WKUP_IRQHandler>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void USBFS_WKUP_IRQHandler(void)
{
 8005238:	1141                	addi	sp,sp,-16
 800523a:	c422                	sw	s0,8(sp)
    //DEBUG_PIN_ON();
    if (USB_OTG_dev.bp.low_power) {
 800523c:	20000437          	lui	s0,0x20000
{
 8005240:	c606                	sw	ra,12(sp)
    if (USB_OTG_dev.bp.low_power) {
 8005242:	04440793          	addi	a5,s0,68 # 20000044 <USB_OTG_dev>
 8005246:	0077c783          	lbu	a5,7(a5)
 800524a:	cb8d                	beqz	a5,800527c <USBFS_WKUP_IRQHandler+0x44>
        //SystemInit();
        set_usb_clock_96m_hxtal();
 800524c:	00000097          	auipc	ra,0x0
 8005250:	128080e7          	jalr	296(ra) # 8005374 <set_usb_clock_96m_hxtal>
        rcu_usb_clock_config(usbfs_prescaler);
 8005254:	200007b7          	lui	a5,0x20000
 8005258:	52c7a503          	lw	a0,1324(a5) # 2000052c <usbfs_prescaler>
 800525c:	ffffc097          	auipc	ra,0xffffc
 8005260:	fd2080e7          	jalr	-46(ra) # 800122e <rcu_usb_clock_config>

        rcu_periph_clock_enable(RCU_USBFS);
 8005264:	50c00513          	li	a0,1292
 8005268:	ffffc097          	auipc	ra,0xffffc
 800526c:	f3a080e7          	jalr	-198(ra) # 80011a2 <rcu_periph_clock_enable>

        usb_clock_active(&USB_OTG_dev);
 8005270:	04440513          	addi	a0,s0,68
 8005274:	00000097          	auipc	ra,0x0
 8005278:	9b2080e7          	jalr	-1614(ra) # 8004c26 <usb_clock_active>
    }

    exti_interrupt_flag_clear(EXTI_18);
}
 800527c:	4422                	lw	s0,8(sp)
 800527e:	40b2                	lw	ra,12(sp)
    exti_interrupt_flag_clear(EXTI_18);
 8005280:	00040537          	lui	a0,0x40
}
 8005284:	0141                	addi	sp,sp,16
    exti_interrupt_flag_clear(EXTI_18);
 8005286:	ffffc317          	auipc	t1,0xffffc
 800528a:	c6a30067          	jr	-918(t1) # 8000ef0 <exti_interrupt_flag_clear>

0800528e <usb_delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void usb_delay_1ms(uint32_t count)
{
 800528e:	1101                	addi	sp,sp,-32
 8005290:	cc22                	sw	s0,24(sp)
 8005292:	c64e                	sw	s3,12(sp)
 8005294:	c452                	sw	s4,8(sp)
 8005296:	ce06                	sw	ra,28(sp)
 8005298:	ca26                	sw	s1,20(sp)
 800529a:	c84a                	sw	s2,16(sp)
 800529c:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 800529e:	ffffd097          	auipc	ra,0xffffd
 80052a2:	aec080e7          	jalr	-1300(ra) # 8001d8a <get_timer_value>
 80052a6:	8a2a                	mv	s4,a0
 80052a8:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 80052aa:	ffffd097          	auipc	ra,0xffffd
 80052ae:	ae0080e7          	jalr	-1312(ra) # 8001d8a <get_timer_value>
 80052b2:	84aa                	mv	s1,a0
 80052b4:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 80052b6:	00aa1463          	bne	s4,a0,80052be <usb_delay_1ms+0x30>
 80052ba:	feb408e3          	beq	s0,a1,80052aa <usb_delay_1ms+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052be:	6405                	lui	s0,0x1
 80052c0:	20000a37          	lui	s4,0x20000
 80052c4:	fa040413          	addi	s0,s0,-96 # fa0 <__dbg_stack_size+0xfa0>
	delta_mtime = get_timer_value() - start_mtime;
 80052c8:	ffffd097          	auipc	ra,0xffffd
 80052cc:	ac2080e7          	jalr	-1342(ra) # 8001d8a <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052d0:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 80052d4:	40950733          	sub	a4,a0,s1
 80052d8:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052dc:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 80052e0:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052e4:	033787b3          	mul	a5,a5,s3
 80052e8:	00a59463          	bne	a1,a0,80052f0 <usb_delay_1ms+0x62>
 80052ec:	fcf76ee3          	bltu	a4,a5,80052c8 <usb_delay_1ms+0x3a>
}
 80052f0:	40f2                	lw	ra,28(sp)
 80052f2:	4462                	lw	s0,24(sp)
 80052f4:	44d2                	lw	s1,20(sp)
 80052f6:	4942                	lw	s2,16(sp)
 80052f8:	49b2                	lw	s3,12(sp)
 80052fa:	4a22                	lw	s4,8(sp)
 80052fc:	6105                	addi	sp,sp,32
 80052fe:	8082                	ret

08005300 <usb_delay_1us>:

void usb_delay_1us(uint32_t count)
{
 8005300:	1101                	addi	sp,sp,-32
 8005302:	cc22                	sw	s0,24(sp)
 8005304:	c64e                	sw	s3,12(sp)
 8005306:	c452                	sw	s4,8(sp)
 8005308:	ce06                	sw	ra,28(sp)
 800530a:	ca26                	sw	s1,20(sp)
 800530c:	c84a                	sw	s2,16(sp)
 800530e:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8005310:	ffffd097          	auipc	ra,0xffffd
 8005314:	a7a080e7          	jalr	-1414(ra) # 8001d8a <get_timer_value>
 8005318:	8a2a                	mv	s4,a0
 800531a:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800531c:	ffffd097          	auipc	ra,0xffffd
 8005320:	a6e080e7          	jalr	-1426(ra) # 8001d8a <get_timer_value>
 8005324:	84aa                	mv	s1,a0
 8005326:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 8005328:	00aa1463          	bne	s4,a0,8005330 <usb_delay_1us+0x30>
 800532c:	feb408e3          	beq	s0,a1,800531c <usb_delay_1us+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005330:	003d1437          	lui	s0,0x3d1
 8005334:	20000a37          	lui	s4,0x20000
 8005338:	90040413          	addi	s0,s0,-1792 # 3d0900 <__stack_size+0x3cf900>
	delta_mtime = get_timer_value() - start_mtime;
 800533c:	ffffd097          	auipc	ra,0xffffd
 8005340:	a4e080e7          	jalr	-1458(ra) # 8001d8a <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005344:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 8005348:	40950733          	sub	a4,a0,s1
 800534c:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005350:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 8005354:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005358:	033787b3          	mul	a5,a5,s3
 800535c:	00a59463          	bne	a1,a0,8005364 <usb_delay_1us+0x64>
 8005360:	fcf76ee3          	bltu	a4,a5,800533c <usb_delay_1us+0x3c>
 8005364:	40f2                	lw	ra,28(sp)
 8005366:	4462                	lw	s0,24(sp)
 8005368:	44d2                	lw	s1,20(sp)
 800536a:	4942                	lw	s2,16(sp)
 800536c:	49b2                	lw	s3,12(sp)
 800536e:	4a22                	lw	s4,8(sp)
 8005370:	6105                	addi	sp,sp,32
 8005372:	8082                	ret

08005374 <set_usb_clock_96m_hxtal>:

void set_usb_clock_96m_hxtal(void){

    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8005374:	400217b7          	lui	a5,0x40021
 8005378:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 800537a:	e0ff06b7          	lui	a3,0xe0ff0
 800537e:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8005380:	00176713          	ori	a4,a4,1
 8005384:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8005386:	43d8                	lw	a4,4(a5)
 8005388:	8f75                	and	a4,a4,a3
 800538a:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800538c:	4398                	lw	a4,0(a5)
 800538e:	fef706b7          	lui	a3,0xfef70
 8005392:	16fd                	addi	a3,a3,-1
 8005394:	8f75                	and	a4,a4,a3
 8005396:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8005398:	4398                	lw	a4,0(a5)
 800539a:	fffc06b7          	lui	a3,0xfffc0
 800539e:	16fd                	addi	a3,a3,-1
 80053a0:	8f75                	and	a4,a4,a3
 80053a2:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 80053a4:	43d8                	lw	a4,4(a5)
 80053a6:	df0106b7          	lui	a3,0xdf010
 80053aa:	16fd                	addi	a3,a3,-1
 80053ac:	8f75                	and	a4,a4,a3
 80053ae:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 80053b0:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 80053b4:	4398                	lw	a4,0(a5)
 80053b6:	eaf706b7          	lui	a3,0xeaf70
 80053ba:	16fd                	addi	a3,a3,-1
 80053bc:	8f75                	and	a4,a4,a3
 80053be:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 80053c0:	00ff0737          	lui	a4,0xff0
 80053c4:	c798                	sw	a4,8(a5)

    uint32_t timeout = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 80053c6:	4394                	lw	a3,0(a5)
 80053c8:	6741                	lui	a4,0x10
 80053ca:	8ed9                	or	a3,a3,a4
 80053cc:	c394                	sw	a3,0(a5)
 80053ce:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 80053d2:	40021737          	lui	a4,0x40021
 80053d6:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 80053d8:	00e69613          	slli	a2,a3,0xe
 80053dc:	00064463          	bltz	a2,80053e4 <set_usb_clock_96m_hxtal+0x70>
 80053e0:	17fd                	addi	a5,a5,-1
 80053e2:	fbf5                	bnez	a5,80053d6 <set_usb_clock_96m_hxtal+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 80053e4:	400217b7          	lui	a5,0x40021
 80053e8:	4398                	lw	a4,0(a5)
 80053ea:	00e71693          	slli	a3,a4,0xe
 80053ee:	0006c363          	bltz	a3,80053f4 <set_usb_clock_96m_hxtal+0x80>
        while(1){
        }
 80053f2:	a001                	j	80053f2 <set_usb_clock_96m_hxtal+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80053f4:	43d8                	lw	a4,4(a5)
        while((RCU_CTL & RCU_CTL_PLL1STB) == 0){
        }

    }else if(HXTAL_VALUE==8000000){
        /* CK_PLL = (CK_PREDIV0) * 24 = 96 MHz */
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80053f6:	dfc406b7          	lui	a3,0xdfc40
 80053fa:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80053fc:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 80053fe:	43d8                	lw	a4,4(a5)
 8005400:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8005402:	43d8                	lw	a4,4(a5)
 8005404:	40076713          	ori	a4,a4,1024
 8005408:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 800540a:	43d8                	lw	a4,4(a5)
 800540c:	8f75                	and	a4,a4,a3
 800540e:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL24);
 8005410:	43d8                	lw	a4,4(a5)
 8005412:	201d06b7          	lui	a3,0x201d0
 8005416:	8f55                	or	a4,a4,a3
 8005418:	c3d8                	sw	a4,4(a5)

		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 800541a:	57d8                	lw	a4,44(a5)
 800541c:	76bd                	lui	a3,0xfffef
 800541e:	8f75                	and	a4,a4,a3
 8005420:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8005422:	57d8                	lw	a4,44(a5)
    }

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8005424:	010006b7          	lui	a3,0x1000
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8005428:	00176713          	ori	a4,a4,1
 800542c:	d7d8                	sw	a4,44(a5)
    RCU_CTL |= RCU_CTL_PLLEN;
 800542e:	4398                	lw	a4,0(a5)
 8005430:	8f55                	or	a4,a4,a3
 8005432:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8005434:	400217b7          	lui	a5,0x40021
 8005438:	4398                	lw	a4,0(a5)
 800543a:	00671693          	slli	a3,a4,0x6
 800543e:	fe06dde3          	bgez	a3,8005438 <set_usb_clock_96m_hxtal+0xc4>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8005442:	43d8                	lw	a4,4(a5)
 8005444:	9b71                	andi	a4,a4,-4
 8005446:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8005448:	43d8                	lw	a4,4(a5)
 800544a:	00276713          	ori	a4,a4,2
 800544e:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8005450:	40021737          	lui	a4,0x40021
 8005454:	435c                	lw	a5,4(a4)
 8005456:	8ba1                	andi	a5,a5,8
 8005458:	dff5                	beqz	a5,8005454 <set_usb_clock_96m_hxtal+0xe0>
    }
    //SystemCoreClock = 96000000;
    SystemCoreClockUpdate();
 800545a:	ffffc317          	auipc	t1,0xffffc
 800545e:	77030067          	jr	1904(t1) # 8001bca <SystemCoreClockUpdate>

08005462 <usbd_ep_recev>:
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_recev (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005462:	07f5f793          	andi	a5,a1,127
 8005466:	45f1                	li	a1,28
 8005468:	02b787b3          	mul	a5,a5,a1
{
 800546c:	1141                	addi	sp,sp,-16
 800546e:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8005470:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005472:	26c78593          	addi	a1,a5,620 # 4002126c <_sp+0x2001926c>
    transc->xfer_buf = pbuf;
 8005476:	97aa                	add	a5,a5,a0
 8005478:	26c7aa23          	sw	a2,628(a5)
    transc->xfer_len = len;
 800547c:	26d7ac23          	sw	a3,632(a5)
    transc->xfer_count = 0;
 8005480:	2607ae23          	sw	zero,636(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8005484:	00454683          	lbu	a3,4(a0) # 40004 <__stack_size+0x3f004>
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005488:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 800548a:	00e69463          	bne	a3,a4,8005492 <usbd_ep_recev+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 800548e:	28c7a223          	sw	a2,644(a5)
    }

    /* start the transfer */
    usb_transc_outxfer (udev, transc);
 8005492:	fffff097          	auipc	ra,0xfffff
 8005496:	612080e7          	jalr	1554(ra) # 8004aa4 <usb_transc_outxfer>

    return 0;
}
 800549a:	40b2                	lw	ra,12(sp)
 800549c:	4501                	li	a0,0
 800549e:	0141                	addi	sp,sp,16
 80054a0:	8082                	ret

080054a2 <usbd_ep_send>:
    \param[out] none
    \retval     none
*/
uint32_t  usbd_ep_send (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054a2:	07f5f793          	andi	a5,a1,127
 80054a6:	45f1                	li	a1,28
 80054a8:	02b787b3          	mul	a5,a5,a1
{
 80054ac:	1141                	addi	sp,sp,-16
 80054ae:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054b0:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054b2:	0c878593          	addi	a1,a5,200
    transc->xfer_buf = pbuf;
 80054b6:	97aa                	add	a5,a5,a0
 80054b8:	0cc7a823          	sw	a2,208(a5)
    transc->xfer_len = len;
 80054bc:	0cd7aa23          	sw	a3,212(a5)
    transc->xfer_count = 0;
 80054c0:	0c07ac23          	sw	zero,216(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054c4:	00454683          	lbu	a3,4(a0)
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054c8:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054ca:	00e69463          	bne	a3,a4,80054d2 <usbd_ep_send+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 80054ce:	0ec7a023          	sw	a2,224(a5)
    }

    /* start the transfer */
    usb_transc_inxfer (udev, transc);
 80054d2:	fffff097          	auipc	ra,0xfffff
 80054d6:	4e8080e7          	jalr	1256(ra) # 80049ba <usb_transc_inxfer>

    return 0;
}
 80054da:	40b2                	lw	ra,12(sp)
 80054dc:	4501                	li	a0,0
 80054de:	0141                	addi	sp,sp,16
 80054e0:	8082                	ret

080054e2 <usbd_ep_stall>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall (usb_core_driver *udev, uint8_t ep_addr)
{
 80054e2:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 80054e4:	01859793          	slli	a5,a1,0x18
{
 80054e8:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 80054ea:	87e1                	srai	a5,a5,0x18
 80054ec:	0207d563          	bgez	a5,8005516 <usbd_ep_stall+0x34>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054f0:	07f5f593          	andi	a1,a1,127
 80054f4:	47f1                	li	a5,28
 80054f6:	02f585b3          	mul	a1,a1,a5
 80054fa:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 80054fe:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 1;
 8005500:	4785                	li	a5,1
 8005502:	00f58123          	sb	a5,2(a1)

    usb_transc_stall (udev, transc);
 8005506:	fffff097          	auipc	ra,0xfffff
 800550a:	62a080e7          	jalr	1578(ra) # 8004b30 <usb_transc_stall>

    return (0);
}
 800550e:	40b2                	lw	ra,12(sp)
 8005510:	4501                	li	a0,0
 8005512:	0141                	addi	sp,sp,16
 8005514:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8005516:	47f1                	li	a5,28
 8005518:	02f585b3          	mul	a1,a1,a5
 800551c:	26c58593          	addi	a1,a1,620
 8005520:	bff9                	j	80054fe <usbd_ep_stall+0x1c>

08005522 <usbd_ep_stall_clear>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall_clear (usb_core_driver *udev, uint8_t ep_addr)
{
 8005522:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8005524:	01859793          	slli	a5,a1,0x18
{
 8005528:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 800552a:	87e1                	srai	a5,a5,0x18
 800552c:	0207d463          	bgez	a5,8005554 <usbd_ep_stall_clear+0x32>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8005530:	07f5f593          	andi	a1,a1,127
 8005534:	47f1                	li	a5,28
 8005536:	02f585b3          	mul	a1,a1,a5
 800553a:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 800553e:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 0;
 8005540:	00058123          	sb	zero,2(a1)

    usb_transc_clrstall (udev, transc);
 8005544:	fffff097          	auipc	ra,0xfffff
 8005548:	626080e7          	jalr	1574(ra) # 8004b6a <usb_transc_clrstall>

    return (0);
}
 800554c:	40b2                	lw	ra,12(sp)
 800554e:	4501                	li	a0,0
 8005550:	0141                	addi	sp,sp,16
 8005552:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8005554:	47f1                	li	a5,28
 8005556:	02f585b3          	mul	a1,a1,a5
 800555a:	26c58593          	addi	a1,a1,620
 800555e:	b7c5                	j	800553e <usbd_ep_stall_clear+0x1c>

08005560 <usbd_addr_set>:
    \param[out] none
    \retval     none
*/
void  usbd_addr_set (usb_core_driver *udev, uint8_t addr)
{
    usb_devaddr_set(udev, addr);
 8005560:	fffff317          	auipc	t1,0xfffff
 8005564:	3a830067          	jr	936(t1) # 8004908 <usb_devaddr_set>

08005568 <_usb_std_reserved>:
static usb_reqsta _usb_std_reserved (usb_core_driver *udev, usb_req *req)
{
    /* no operation... */

    return REQ_NOTSUPP;
}
 8005568:	4505                	li	a0,1
 800556a:	8082                	ret

0800556c <_usb_dev_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_dev_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.dev_desc[0];
 800556c:	41452503          	lw	a0,1044(a0)
 8005570:	00054783          	lbu	a5,0(a0)
 8005574:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.dev_desc;
}
 8005578:	8082                	ret

0800557a <_usb_config_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_config_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.config_desc[2];
 800557a:	41852503          	lw	a0,1048(a0)
 800557e:	00254783          	lbu	a5,2(a0)
 8005582:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.config_desc;
}
 8005586:	8082                	ret

08005588 <_usb_str_desc_get>:
    \param[out] len: pointer to string length
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_str_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    uint8_t *desc = udev->dev.desc.strings[index];
 8005588:	42052783          	lw	a5,1056(a0)
 800558c:	058a                	slli	a1,a1,0x2
 800558e:	97ae                	add	a5,a5,a1
 8005590:	4388                	lw	a0,0(a5)

    *len = desc[0];
 8005592:	00054783          	lbu	a5,0(a0)
 8005596:	00f61023          	sh	a5,0(a2)

    return desc;
}
 800559a:	8082                	ret

0800559c <_usb_std_getdescriptor>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getdescriptor (usb_core_driver *udev, usb_req *req)
{
 800559c:	1141                	addi	sp,sp,-16
 800559e:	c422                	sw	s0,8(sp)
 80055a0:	c226                	sw	s1,4(sp)
 80055a2:	c606                	sw	ra,12(sp)
 80055a4:	0005c783          	lbu	a5,0(a1)
 80055a8:	842a                	mv	s0,a0
 80055aa:	84ae                	mv	s1,a1
 80055ac:	8b8d                	andi	a5,a5,3
    uint8_t desc_index = 0;

    usb_transc *transc = &udev->dev.transc_in[0];

    /* get device standard descriptor */
    switch (req->bmRequestType & USB_RECPTYPE_MASK) {
 80055ae:	cf8d                	beqz	a5,80055e8 <_usb_std_getdescriptor+0x4c>
 80055b0:	4705                	li	a4,1
 80055b2:	0ce78563          	beq	a5,a4,800567c <_usb_std_getdescriptor+0xe0>

    default:
        break;
    }

    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 80055b6:	0dc42703          	lw	a4,220(s0)
        }

        return REQ_SUPP;
    }

    return REQ_NOTSUPP;
 80055ba:	4505                	li	a0,1
    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 80055bc:	c761                	beqz	a4,8005684 <_usb_std_getdescriptor+0xe8>
 80055be:	0074c783          	lbu	a5,7(s1)
 80055c2:	0064c683          	lbu	a3,6(s1)
 80055c6:	07a2                	slli	a5,a5,0x8
 80055c8:	8fd5                	or	a5,a5,a3
 80055ca:	cfcd                	beqz	a5,8005684 <_usb_std_getdescriptor+0xe8>
        if (transc->remain_len < req->wLength) {
 80055cc:	0cf77163          	bgeu	a4,a5,800568e <_usb_std_getdescriptor+0xf2>
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 80055d0:	0cc45783          	lhu	a5,204(s0)
        return REQ_SUPP;
 80055d4:	4501                	li	a0,0
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 80055d6:	0af76763          	bltu	a4,a5,8005684 <_usb_std_getdescriptor+0xe8>
 80055da:	02f77533          	remu	a0,a4,a5
 80055de:	e955                	bnez	a0,8005692 <_usb_std_getdescriptor+0xf6>
                udev->dev.control.ctl_zlp = 1;
 80055e0:	4785                	li	a5,1
 80055e2:	42f406a3          	sb	a5,1069(s0)
 80055e6:	a879                	j	8005684 <_usb_std_getdescriptor+0xe8>
        desc_type = BYTE_HIGH(req->wValue);
 80055e8:	0025c783          	lbu	a5,2(a1)
 80055ec:	0035c583          	lbu	a1,3(a1)
 80055f0:	4709                	li	a4,2
 80055f2:	05a2                	slli	a1,a1,0x8
 80055f4:	8ddd                	or	a1,a1,a5
 80055f6:	0085d793          	srli	a5,a1,0x8
        desc_index = BYTE_LOW(req->wValue);
 80055fa:	0ff5f593          	andi	a1,a1,255
        switch (desc_type) {
 80055fe:	04e78c63          	beq	a5,a4,8005656 <_usb_std_getdescriptor+0xba>
 8005602:	02f76b63          	bltu	a4,a5,8005638 <_usb_std_getdescriptor+0x9c>
 8005606:	4705                	li	a4,1
 8005608:	fae797e3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 800560c:	0dc50613          	addi	a2,a0,220
 8005610:	00000097          	auipc	ra,0x0
 8005614:	f5c080e7          	jalr	-164(ra) # 800556c <_usb_dev_desc_get>
 8005618:	0ca42823          	sw	a0,208(s0)
            if (64U == req->wLength) {
 800561c:	0074c783          	lbu	a5,7(s1)
 8005620:	0064c703          	lbu	a4,6(s1)
 8005624:	07a2                	slli	a5,a5,0x8
 8005626:	8fd9                	or	a5,a5,a4
 8005628:	04000713          	li	a4,64
 800562c:	f8e795e3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
                transc->remain_len = 8U;
 8005630:	47a1                	li	a5,8
 8005632:	0cf42e23          	sw	a5,220(s0)
 8005636:	b741                	j	80055b6 <_usb_std_getdescriptor+0x1a>
 8005638:	470d                	li	a4,3
 800563a:	02e78763          	beq	a5,a4,8005668 <_usb_std_getdescriptor+0xcc>
 800563e:	473d                	li	a4,15
 8005640:	f6e79be3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
    *len = udev->dev.desc.bos_desc[2];
 8005644:	41c52783          	lw	a5,1052(a0)
 8005648:	0027c703          	lbu	a4,2(a5)
            transc->xfer_buf = _usb_bos_desc_get(udev, desc_index, (uint16_t *)&(transc->remain_len));
 800564c:	0cf52823          	sw	a5,208(a0)
    *len = udev->dev.desc.bos_desc[2];
 8005650:	0ce51e23          	sh	a4,220(a0)
            break;
 8005654:	b78d                	j	80055b6 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8005656:	0dc50613          	addi	a2,a0,220
 800565a:	00000097          	auipc	ra,0x0
 800565e:	f20080e7          	jalr	-224(ra) # 800557a <_usb_config_desc_get>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8005662:	0ca42823          	sw	a0,208(s0)
 8005666:	bf81                	j	80055b6 <_usb_std_getdescriptor+0x1a>
            if (desc_index < STR_IDX_MAX) {
 8005668:	4795                	li	a5,5
 800566a:	f4b7e6e3          	bltu	a5,a1,80055b6 <_usb_std_getdescriptor+0x1a>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 800566e:	0dc50613          	addi	a2,a0,220
 8005672:	00000097          	auipc	ra,0x0
 8005676:	f16080e7          	jalr	-234(ra) # 8005588 <_usb_str_desc_get>
 800567a:	b7e5                	j	8005662 <_usb_std_getdescriptor+0xc6>
        return (usb_reqsta)(udev->dev.class_core->req_proc(udev, req));
 800567c:	43052783          	lw	a5,1072(a0)
 8005680:	47dc                	lw	a5,12(a5)
 8005682:	9782                	jalr	a5
}
 8005684:	40b2                	lw	ra,12(sp)
 8005686:	4422                	lw	s0,8(sp)
 8005688:	4492                	lw	s1,4(sp)
 800568a:	0141                	addi	sp,sp,16
 800568c:	8082                	ret
            transc->remain_len = req->wLength;
 800568e:	0cf42e23          	sw	a5,220(s0)
        return REQ_SUPP;
 8005692:	4501                	li	a0,0
 8005694:	bfc5                	j	8005684 <_usb_std_getdescriptor+0xe8>

08005696 <_usb_std_setconfiguration>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setconfiguration (usb_core_driver *udev, usb_req *req)
{
 8005696:	1141                	addi	sp,sp,-16
 8005698:	c04a                	sw	s2,0(sp)
 800569a:	c606                	sw	ra,12(sp)
 800569c:	c422                	sw	s0,8(sp)
 800569e:	c226                	sw	s1,4(sp)
    static uint8_t config;

    config = (uint8_t)(req->wValue);
 80056a0:	0025c783          	lbu	a5,2(a1)
 80056a4:	20000937          	lui	s2,0x20000
 80056a8:	53090913          	addi	s2,s2,1328 # 20000530 <config.4766>
 80056ac:	00f90023          	sb	a5,0(s2)

    if (config <= USBD_CFG_MAX_NUM) {
 80056b0:	4685                	li	a3,1
 80056b2:	00f6ed63          	bltu	a3,a5,80056cc <_usb_std_setconfiguration+0x36>
        switch (udev->dev.cur_status) {
 80056b6:	0c654703          	lbu	a4,198(a0)
 80056ba:	4489                	li	s1,2
 80056bc:	842a                	mv	s0,a0
 80056be:	0ff77713          	andi	a4,a4,255
 80056c2:	00970763          	beq	a4,s1,80056d0 <_usb_std_setconfiguration+0x3a>
 80056c6:	460d                	li	a2,3
 80056c8:	02c70963          	beq	a4,a2,80056fa <_usb_std_setconfiguration+0x64>
        default:
            break;
        }
    }

    return REQ_NOTSUPP;
 80056cc:	4485                	li	s1,1
 80056ce:	a839                	j	80056ec <_usb_std_setconfiguration+0x56>
            return REQ_SUPP;
 80056d0:	4481                	li	s1,0
            if (config){
 80056d2:	cf89                	beqz	a5,80056ec <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->init(udev, config);
 80056d4:	43052783          	lw	a5,1072(a0)
 80056d8:	4585                	li	a1,1
 80056da:	43dc                	lw	a5,4(a5)
 80056dc:	9782                	jalr	a5
                udev->dev.config = config;
 80056de:	00094783          	lbu	a5,0(s2)
 80056e2:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_CONFIGURED;
 80056e6:	478d                	li	a5,3
 80056e8:	0cf40323          	sb	a5,198(s0)
}
 80056ec:	40b2                	lw	ra,12(sp)
 80056ee:	4422                	lw	s0,8(sp)
 80056f0:	8526                	mv	a0,s1
 80056f2:	4902                	lw	s2,0(sp)
 80056f4:	4492                	lw	s1,4(sp)
 80056f6:	0141                	addi	sp,sp,16
 80056f8:	8082                	ret
            if (USB_DEFAULT_CONFIG == config) {
 80056fa:	ef91                	bnez	a5,8005716 <_usb_std_setconfiguration+0x80>
                udev->dev.class_core->deinit(udev, config);
 80056fc:	43052783          	lw	a5,1072(a0)
 8005700:	4581                	li	a1,0
 8005702:	479c                	lw	a5,8(a5)
 8005704:	9782                	jalr	a5
                udev->dev.config = config;
 8005706:	00094783          	lbu	a5,0(s2)
                udev->dev.cur_status = USBD_ADDRESSED;
 800570a:	0c940323          	sb	s1,198(s0)
            return REQ_SUPP;
 800570e:	4481                	li	s1,0
                udev->dev.config = config;
 8005710:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_ADDRESSED;
 8005714:	bfe1                	j	80056ec <_usb_std_setconfiguration+0x56>
            } else if (config != udev->dev.config) {
 8005716:	0c454783          	lbu	a5,196(a0)
            return REQ_SUPP;
 800571a:	4481                	li	s1,0
            } else if (config != udev->dev.config) {
 800571c:	fcd788e3          	beq	a5,a3,80056ec <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->deinit(udev, config);
 8005720:	43052783          	lw	a5,1072(a0)
 8005724:	4585                	li	a1,1
 8005726:	479c                	lw	a5,8(a5)
 8005728:	9782                	jalr	a5
                udev->dev.config = config;
 800572a:	00094583          	lbu	a1,0(s2)
                udev->dev.class_core->init(udev, config);
 800572e:	43042783          	lw	a5,1072(s0)
 8005732:	8522                	mv	a0,s0
                udev->dev.config = config;
 8005734:	0cb40223          	sb	a1,196(s0)
                udev->dev.class_core->init(udev, config);
 8005738:	43dc                	lw	a5,4(a5)
 800573a:	9782                	jalr	a5
 800573c:	bf45                	j	80056ec <_usb_std_setconfiguration+0x56>

0800573e <_usb_std_getstatus>:
    uint8_t recp = BYTE_LOW(req->wIndex);
 800573e:	0055c683          	lbu	a3,5(a1)
 8005742:	0045c703          	lbu	a4,4(a1)
 8005746:	0005c603          	lbu	a2,0(a1)
 800574a:	06a2                	slli	a3,a3,0x8
 800574c:	8ed9                	or	a3,a3,a4
 800574e:	8a0d                	andi	a2,a2,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8005750:	4585                	li	a1,1
{
 8005752:	87aa                	mv	a5,a0
    uint8_t recp = BYTE_LOW(req->wIndex);
 8005754:	0ff6f713          	andi	a4,a3,255
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8005758:	04b60363          	beq	a2,a1,800579e <_usb_std_getstatus+0x60>
 800575c:	c611                	beqz	a2,8005768 <_usb_std_getstatus+0x2a>
 800575e:	4589                	li	a1,2
 8005760:	06b60263          	beq	a2,a1,80057c4 <_usb_std_getstatus+0x86>
    return REQ_NOTSUPP;
 8005764:	4505                	li	a0,1
 8005766:	8082                	ret
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005768:	0c654703          	lbu	a4,198(a0)
 800576c:	4689                	li	a3,2
 800576e:	00e68863          	beq	a3,a4,800577e <_usb_std_getstatus+0x40>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005772:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005776:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005778:	4505                	li	a0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800577a:	04e69463          	bne	a3,a4,80057c2 <_usb_std_getstatus+0x84>
                if (udev->dev.pm.dev_remote_wakeup) {
 800577e:	4127c683          	lbu	a3,1042(a5)
                if (udev->dev.pm.power_mode) {
 8005782:	4107c703          	lbu	a4,1040(a5)
                if (udev->dev.pm.dev_remote_wakeup) {
 8005786:	c689                	beqz	a3,8005790 <_usb_std_getstatus+0x52>
                if (udev->dev.pm.power_mode) {
 8005788:	00e036b3          	snez	a3,a4
                    status[0] |= USB_STATUS_REMOTE_WAKEUP;
 800578c:	0026e693          	ori	a3,a3,2
 8005790:	20000737          	lui	a4,0x20000
 8005794:	53470713          	addi	a4,a4,1332 # 20000534 <status.4696>
 8005798:	00d70023          	sb	a3,0(a4)
 800579c:	a829                	j	80057b6 <_usb_std_getstatus+0x78>
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 800579e:	0c654683          	lbu	a3,198(a0)
 80057a2:	460d                	li	a2,3
    return REQ_NOTSUPP;
 80057a4:	4505                	li	a0,1
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 80057a6:	00d61e63          	bne	a2,a3,80057c2 <_usb_std_getstatus+0x84>
 80057aa:	00e56c63          	bltu	a0,a4,80057c2 <_usb_std_getstatus+0x84>
                transc->xfer_buf = status;
 80057ae:	20000737          	lui	a4,0x20000
 80057b2:	53470713          	addi	a4,a4,1332 # 20000534 <status.4696>
                transc->xfer_buf = status;
 80057b6:	0ce7a823          	sw	a4,208(a5)
                transc->remain_len = 2U;
 80057ba:	4709                	li	a4,2
 80057bc:	0ce7ae23          	sw	a4,220(a5)
                return REQ_SUPP;
 80057c0:	4501                	li	a0,0
}
 80057c2:	8082                	ret
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 80057c4:	0c654603          	lbu	a2,198(a0)
 80057c8:	458d                	li	a1,3
    return REQ_NOTSUPP;
 80057ca:	4505                	li	a0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 80057cc:	fec59be3          	bne	a1,a2,80057c2 <_usb_std_getstatus+0x84>
                if (0x80U == (recp & 0x80U)) {
 80057d0:	06e2                	slli	a3,a3,0x18
 80057d2:	86e1                	srai	a3,a3,0x18
 80057d4:	0006db63          	bgez	a3,80057ea <_usb_std_getstatus+0xac>
                    status[0] = udev->dev.transc_in[EP_ID(recp)].ep_stall;
 80057d8:	46f1                	li	a3,28
 80057da:	07f77713          	andi	a4,a4,127
 80057de:	02d70733          	mul	a4,a4,a3
 80057e2:	973e                	add	a4,a4,a5
 80057e4:	0ca74683          	lbu	a3,202(a4)
 80057e8:	b765                	j	8005790 <_usb_std_getstatus+0x52>
                    status[0] = udev->dev.transc_out[recp].ep_stall;
 80057ea:	46f1                	li	a3,28
 80057ec:	02d70733          	mul	a4,a4,a3
 80057f0:	973e                	add	a4,a4,a5
 80057f2:	26e74683          	lbu	a3,622(a4)
 80057f6:	bf69                	j	8005790 <_usb_std_getstatus+0x52>

080057f8 <_usb_std_getconfiguration>:
    switch (udev->dev.cur_status) {
 80057f8:	0c654703          	lbu	a4,198(a0)
 80057fc:	4689                	li	a3,2
{
 80057fe:	87aa                	mv	a5,a0
    switch (udev->dev.cur_status) {
 8005800:	0ff77713          	andi	a4,a4,255
 8005804:	00d70763          	beq	a4,a3,8005812 <_usb_std_getconfiguration+0x1a>
 8005808:	468d                	li	a3,3
 800580a:	02d70163          	beq	a4,a3,800582c <_usb_std_getconfiguration+0x34>
    return REQ_NOTSUPP;
 800580e:	4505                	li	a0,1
}
 8005810:	8082                	ret
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8005812:	0c454703          	lbu	a4,196(a0)
    return REQ_NOTSUPP;
 8005816:	4505                	li	a0,1
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8005818:	ff65                	bnez	a4,8005810 <_usb_std_getconfiguration+0x18>
            transc->xfer_buf = &(udev->dev.config);
 800581a:	0c478713          	addi	a4,a5,196
 800581e:	0ce7a823          	sw	a4,208(a5)
            transc->remain_len = 1U;
 8005822:	4705                	li	a4,1
 8005824:	0ce7ae23          	sw	a4,220(a5)
            return REQ_SUPP;
 8005828:	4501                	li	a0,0
 800582a:	8082                	ret
        if (udev->dev.config != USB_DEFAULT_CONFIG) {
 800582c:	0c454703          	lbu	a4,196(a0)
 8005830:	df79                	beqz	a4,800580e <_usb_std_getconfiguration+0x16>
 8005832:	b7e5                	j	800581a <_usb_std_getconfiguration+0x22>

08005834 <_usb_std_getinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8005834:	0c654783          	lbu	a5,198(a0)
 8005838:	470d                	li	a4,3
 800583a:	02f71163          	bne	a4,a5,800585c <_usb_std_getinterface+0x28>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800583e:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8005842:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005844:	00e7ea63          	bltu	a5,a4,8005858 <_usb_std_getinterface+0x24>
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8005848:	43052703          	lw	a4,1072(a0)
            transc->remain_len = 1U;
 800584c:	0cf52e23          	sw	a5,220(a0)
            return REQ_SUPP;
 8005850:	4781                	li	a5,0
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8005852:	0705                	addi	a4,a4,1
 8005854:	0ce52823          	sw	a4,208(a0)
}
 8005858:	853e                	mv	a0,a5
 800585a:	8082                	ret
    return REQ_NOTSUPP;
 800585c:	4785                	li	a5,1
 800585e:	bfed                	j	8005858 <_usb_std_getinterface+0x24>

08005860 <_usb_std_setinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8005860:	0c654783          	lbu	a5,198(a0)
 8005864:	470d                	li	a4,3
 8005866:	02f71063          	bne	a4,a5,8005886 <_usb_std_setinterface+0x26>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800586a:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 800586e:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005870:	00e7e963          	bltu	a5,a4,8005882 <_usb_std_setinterface+0x22>
            udev->dev.class_core->alter_set = req->wValue;
 8005874:	43052783          	lw	a5,1072(a0)
 8005878:	0025c703          	lbu	a4,2(a1)
 800587c:	00e780a3          	sb	a4,1(a5)
            return REQ_SUPP;
 8005880:	4781                	li	a5,0
}
 8005882:	853e                	mv	a0,a5
 8005884:	8082                	ret
    return REQ_NOTSUPP;
 8005886:	4785                	li	a5,1
 8005888:	bfed                	j	8005882 <_usb_std_setinterface+0x22>

0800588a <_usb_std_setaddress>:
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 800588a:	0055c703          	lbu	a4,5(a1)
 800588e:	0045c683          	lbu	a3,4(a1)
 8005892:	0722                	slli	a4,a4,0x8
 8005894:	8f55                	or	a4,a4,a3
 8005896:	cb01                	beqz	a4,80058a6 <_usb_std_setaddress+0x1c>
    return REQ_NOTSUPP;
 8005898:	4505                	li	a0,1
}
 800589a:	8082                	ret
    return REQ_NOTSUPP;
 800589c:	4505                	li	a0,1
}
 800589e:	40b2                	lw	ra,12(sp)
 80058a0:	4422                	lw	s0,8(sp)
 80058a2:	0141                	addi	sp,sp,16
 80058a4:	8082                	ret
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 80058a6:	0075c703          	lbu	a4,7(a1)
 80058aa:	0065c683          	lbu	a3,6(a1)
 80058ae:	0722                	slli	a4,a4,0x8
 80058b0:	8f55                	or	a4,a4,a3
 80058b2:	f37d                	bnez	a4,8005898 <_usb_std_setaddress+0xe>
{
 80058b4:	1141                	addi	sp,sp,-16
 80058b6:	c422                	sw	s0,8(sp)
 80058b8:	c606                	sw	ra,12(sp)
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ba:	0025c583          	lbu	a1,2(a1)
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 80058be:	0c654703          	lbu	a4,198(a0)
 80058c2:	468d                	li	a3,3
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058c4:	07f5f593          	andi	a1,a1,127
 80058c8:	0cb502a3          	sb	a1,197(a0)
 80058cc:	842a                	mv	s0,a0
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 80058ce:	fce687e3          	beq	a3,a4,800589c <_usb_std_setaddress+0x12>
            usbd_addr_set (udev, udev->dev.dev_addr);
 80058d2:	00000097          	auipc	ra,0x0
 80058d6:	c8e080e7          	jalr	-882(ra) # 8005560 <usbd_addr_set>
            if (udev->dev.dev_addr) {
 80058da:	0c544783          	lbu	a5,197(s0)
 80058de:	c791                	beqz	a5,80058ea <_usb_std_setaddress+0x60>
                udev->dev.cur_status = USBD_ADDRESSED;
 80058e0:	4789                	li	a5,2
                udev->dev.cur_status = USBD_DEFAULT;
 80058e2:	0cf40323          	sb	a5,198(s0)
            return REQ_SUPP;
 80058e6:	4501                	li	a0,0
 80058e8:	bf5d                	j	800589e <_usb_std_setaddress+0x14>
                udev->dev.cur_status = USBD_DEFAULT;
 80058ea:	4785                	li	a5,1
 80058ec:	bfdd                	j	80058e2 <_usb_std_setaddress+0x58>

080058ee <_usb_std_setfeature>:
{
 80058ee:	1141                	addi	sp,sp,-16
 80058f0:	c606                	sw	ra,12(sp)
 80058f2:	c422                	sw	s0,8(sp)
 80058f4:	0005c783          	lbu	a5,0(a1)
 80058f8:	872a                	mv	a4,a0
 80058fa:	8b8d                	andi	a5,a5,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 80058fc:	cf8d                	beqz	a5,8005936 <_usb_std_setfeature+0x48>
 80058fe:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8005900:	4405                	li	s0,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005902:	06d79163          	bne	a5,a3,8005964 <_usb_std_setfeature+0x76>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005906:	0c654783          	lbu	a5,198(a0)
 800590a:	470d                	li	a4,3
    return REQ_NOTSUPP;
 800590c:	4405                	li	s0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 800590e:	04f71b63          	bne	a4,a5,8005964 <_usb_std_setfeature+0x76>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005912:	0035c783          	lbu	a5,3(a1)
 8005916:	0025c703          	lbu	a4,2(a1)
                return REQ_SUPP;
 800591a:	4401                	li	s0,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 800591c:	07a2                	slli	a5,a5,0x8
 800591e:	8fd9                	or	a5,a5,a4
 8005920:	e3b1                	bnez	a5,8005964 <_usb_std_setfeature+0x76>
            ep = BYTE_LOW(req->wIndex);
 8005922:	0045c583          	lbu	a1,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005926:	07f5f793          	andi	a5,a1,127
 800592a:	cf8d                	beqz	a5,8005964 <_usb_std_setfeature+0x76>
                    usbd_ep_stall (udev, ep);
 800592c:	00000097          	auipc	ra,0x0
 8005930:	bb6080e7          	jalr	-1098(ra) # 80054e2 <usbd_ep_stall>
 8005934:	a805                	j	8005964 <_usb_std_setfeature+0x76>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005936:	0c654783          	lbu	a5,198(a0)
 800593a:	4689                	li	a3,2
 800593c:	00f68863          	beq	a3,a5,800594c <_usb_std_setfeature+0x5e>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005940:	0c654783          	lbu	a5,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005944:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005946:	4405                	li	s0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005948:	00f69e63          	bne	a3,a5,8005964 <_usb_std_setfeature+0x76>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 800594c:	0035c783          	lbu	a5,3(a1)
 8005950:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8005954:	4401                	li	s0,0
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8005956:	07a2                	slli	a5,a5,0x8
 8005958:	8fd5                	or	a5,a5,a3
 800595a:	4685                	li	a3,1
 800595c:	00d79463          	bne	a5,a3,8005964 <_usb_std_setfeature+0x76>
                    udev->dev.pm.dev_remote_wakeup = 1U;
 8005960:	40f70923          	sb	a5,1042(a4)
}
 8005964:	8522                	mv	a0,s0
 8005966:	40b2                	lw	ra,12(sp)
 8005968:	4422                	lw	s0,8(sp)
 800596a:	0141                	addi	sp,sp,16
 800596c:	8082                	ret

0800596e <_usb_std_clearfeature>:
{
 800596e:	1141                	addi	sp,sp,-16
 8005970:	c226                	sw	s1,4(sp)
 8005972:	c606                	sw	ra,12(sp)
 8005974:	c422                	sw	s0,8(sp)
 8005976:	c04a                	sw	s2,0(sp)
 8005978:	0005c703          	lbu	a4,0(a1)
 800597c:	84aa                	mv	s1,a0
 800597e:	8b0d                	andi	a4,a4,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005980:	c729                	beqz	a4,80059ca <_usb_std_clearfeature+0x5c>
 8005982:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8005984:	4905                	li	s2,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005986:	06d71963          	bne	a4,a3,80059f8 <_usb_std_clearfeature+0x8a>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 800598a:	0c654703          	lbu	a4,198(a0)
 800598e:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005990:	4905                	li	s2,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005992:	06e69363          	bne	a3,a4,80059f8 <_usb_std_clearfeature+0x8a>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005996:	0035c703          	lbu	a4,3(a1)
 800599a:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 800599e:	4901                	li	s2,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 80059a0:	0722                	slli	a4,a4,0x8
 80059a2:	8f55                	or	a4,a4,a3
 80059a4:	eb31                	bnez	a4,80059f8 <_usb_std_clearfeature+0x8a>
            ep = BYTE_LOW(req->wIndex);
 80059a6:	0045c703          	lbu	a4,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 80059aa:	07f77693          	andi	a3,a4,127
 80059ae:	c6a9                	beqz	a3,80059f8 <_usb_std_clearfeature+0x8a>
 80059b0:	842e                	mv	s0,a1
                    usbd_ep_stall_clear (udev, ep);
 80059b2:	85ba                	mv	a1,a4
 80059b4:	00000097          	auipc	ra,0x0
 80059b8:	b6e080e7          	jalr	-1170(ra) # 8005522 <usbd_ep_stall_clear>
                    udev->dev.class_core->req_proc (udev, req);
 80059bc:	4304a783          	lw	a5,1072(s1)
 80059c0:	85a2                	mv	a1,s0
 80059c2:	8526                	mv	a0,s1
 80059c4:	47dc                	lw	a5,12(a5)
 80059c6:	9782                	jalr	a5
 80059c8:	a805                	j	80059f8 <_usb_std_clearfeature+0x8a>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059ca:	0c654703          	lbu	a4,198(a0)
 80059ce:	4689                	li	a3,2
 80059d0:	00e68863          	beq	a3,a4,80059e0 <_usb_std_clearfeature+0x72>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 80059d4:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059d8:	468d                	li	a3,3
    return REQ_NOTSUPP;
 80059da:	4905                	li	s2,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059dc:	00e69e63          	bne	a3,a4,80059f8 <_usb_std_clearfeature+0x8a>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 80059e0:	0035c703          	lbu	a4,3(a1)
 80059e4:	0025c683          	lbu	a3,2(a1)
    return REQ_NOTSUPP;
 80059e8:	4905                	li	s2,1
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 80059ea:	0722                	slli	a4,a4,0x8
 80059ec:	8f55                	or	a4,a4,a3
 80059ee:	01271563          	bne	a4,s2,80059f8 <_usb_std_clearfeature+0x8a>
                    udev->dev.pm.dev_remote_wakeup = 0U;
 80059f2:	40048923          	sb	zero,1042(s1)
                    return REQ_SUPP;
 80059f6:	4901                	li	s2,0
}
 80059f8:	40b2                	lw	ra,12(sp)
 80059fa:	4422                	lw	s0,8(sp)
 80059fc:	854a                	mv	a0,s2
 80059fe:	4492                	lw	s1,4(sp)
 8005a00:	4902                	lw	s2,0(sp)
 8005a02:	0141                	addi	sp,sp,16
 8005a04:	8082                	ret

08005a06 <_usb_std_setdescriptor>:
 8005a06:	4501                	li	a0,0
 8005a08:	8082                	ret

08005a0a <_usb_std_synchframe>:
 8005a0a:	4501                	li	a0,0
 8005a0c:	8082                	ret

08005a0e <usbd_standard_request>:
    return (*_std_dev_req[req->bRequest])(udev, req);
 8005a0e:	0015c783          	lbu	a5,1(a1)
 8005a12:	00279713          	slli	a4,a5,0x2
 8005a16:	080007b7          	lui	a5,0x8000
 8005a1a:	39078793          	addi	a5,a5,912 # 8000390 <_std_dev_req>
 8005a1e:	97ba                	add	a5,a5,a4
 8005a20:	0007a303          	lw	t1,0(a5)
 8005a24:	8302                	jr	t1

08005a26 <usbd_class_request>:
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005a26:	0c654683          	lbu	a3,198(a0)
 8005a2a:	460d                	li	a2,3
    return REQ_NOTSUPP;
 8005a2c:	4785                	li	a5,1
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005a2e:	02d61063          	bne	a2,a3,8005a4e <usbd_class_request+0x28>
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005a32:	0045c683          	lbu	a3,4(a1)
    return REQ_NOTSUPP;
 8005a36:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005a38:	00d7eb63          	bltu	a5,a3,8005a4e <usbd_class_request+0x28>
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 8005a3c:	43052783          	lw	a5,1072(a0)
{
 8005a40:	1141                	addi	sp,sp,-16
 8005a42:	c606                	sw	ra,12(sp)
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 8005a44:	47dc                	lw	a5,12(a5)
 8005a46:	9782                	jalr	a5
}
 8005a48:	40b2                	lw	ra,12(sp)
 8005a4a:	0141                	addi	sp,sp,16
 8005a4c:	8082                	ret
 8005a4e:	853e                	mv	a0,a5
 8005a50:	8082                	ret

08005a52 <usbd_vendor_request>:
}
 8005a52:	4501                	li	a0,0
 8005a54:	8082                	ret

08005a56 <usbd_enum_error>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     none
*/
void usbd_enum_error (usb_core_driver *udev, usb_req *req)
{
 8005a56:	1141                	addi	sp,sp,-16
    usbd_ep_stall (udev, 0x80);
 8005a58:	08000593          	li	a1,128
{
 8005a5c:	c606                	sw	ra,12(sp)
 8005a5e:	c422                	sw	s0,8(sp)
 8005a60:	842a                	mv	s0,a0
    usbd_ep_stall (udev, 0x80);
 8005a62:	00000097          	auipc	ra,0x0
 8005a66:	a80080e7          	jalr	-1408(ra) # 80054e2 <usbd_ep_stall>
    usbd_ep_stall (udev, 0x00);
 8005a6a:	8522                	mv	a0,s0
 8005a6c:	4581                	li	a1,0
 8005a6e:	00000097          	auipc	ra,0x0
 8005a72:	a74080e7          	jalr	-1420(ra) # 80054e2 <usbd_ep_stall>

    usb_ctlep_startout(udev);
 8005a76:	8522                	mv	a0,s0
}
 8005a78:	4422                	lw	s0,8(sp)
 8005a7a:	40b2                	lw	ra,12(sp)
 8005a7c:	0141                	addi	sp,sp,16
    usb_ctlep_startout(udev);
 8005a7e:	fffff317          	auipc	t1,0xfffff
 8005a82:	18230067          	jr	386(t1) # 8004c00 <usb_ctlep_startout>

08005a86 <usbd_ctl_send>:
*/
usbd_status usbd_ctl_send (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_in[0];

    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a86:	0dc55683          	lhu	a3,220(a0)
 8005a8a:	0d052603          	lw	a2,208(a0)
{
 8005a8e:	1141                	addi	sp,sp,-16
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a90:	4581                	li	a1,0
{
 8005a92:	c422                	sw	s0,8(sp)
 8005a94:	c606                	sw	ra,12(sp)
 8005a96:	842a                	mv	s0,a0
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a98:	00000097          	auipc	ra,0x0
 8005a9c:	a0a080e7          	jalr	-1526(ra) # 80054a2 <usbd_ep_send>

    if (transc->remain_len > transc->max_len) {
 8005aa0:	0cc45703          	lhu	a4,204(s0)
 8005aa4:	0dc42683          	lw	a3,220(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_IN;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_IN;
 8005aa8:	4789                	li	a5,2
    if (transc->remain_len > transc->max_len) {
 8005aaa:	00d77363          	bgeu	a4,a3,8005ab0 <usbd_ctl_send+0x2a>
 8005aae:	4785                	li	a5,1
 8005ab0:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005ab4:	40b2                	lw	ra,12(sp)
 8005ab6:	4422                	lw	s0,8(sp)
 8005ab8:	4501                	li	a0,0
 8005aba:	0141                	addi	sp,sp,16
 8005abc:	8082                	ret

08005abe <usbd_ctl_recev>:
*/
usbd_status  usbd_ctl_recev (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_out[0];

    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005abe:	28055683          	lhu	a3,640(a0)
 8005ac2:	27452603          	lw	a2,628(a0)
{
 8005ac6:	1141                	addi	sp,sp,-16
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005ac8:	4581                	li	a1,0
{
 8005aca:	c422                	sw	s0,8(sp)
 8005acc:	c606                	sw	ra,12(sp)
 8005ace:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005ad0:	00000097          	auipc	ra,0x0
 8005ad4:	992080e7          	jalr	-1646(ra) # 8005462 <usbd_ep_recev>

    if (transc->remain_len > transc->max_len) {
 8005ad8:	27045703          	lhu	a4,624(s0)
 8005adc:	28042683          	lw	a3,640(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_OUT;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_OUT;
 8005ae0:	4791                	li	a5,4
    if (transc->remain_len > transc->max_len) {
 8005ae2:	00d77363          	bgeu	a4,a3,8005ae8 <usbd_ctl_recev+0x2a>
 8005ae6:	478d                	li	a5,3
 8005ae8:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005aec:	40b2                	lw	ra,12(sp)
 8005aee:	4422                	lw	s0,8(sp)
 8005af0:	4501                	li	a0,0
 8005af2:	0141                	addi	sp,sp,16
 8005af4:	8082                	ret

08005af6 <usbd_ctl_status_send>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status  usbd_ctl_status_send (usb_core_driver *udev)
{
 8005af6:	1141                	addi	sp,sp,-16
 8005af8:	c606                	sw	ra,12(sp)
 8005afa:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_IN;
 8005afc:	4795                	li	a5,5
 8005afe:	42f50623          	sb	a5,1068(a0)

    usbd_ep_send (udev, 0U, NULL, 0U);
 8005b02:	4681                	li	a3,0
 8005b04:	4601                	li	a2,0
 8005b06:	4581                	li	a1,0
{
 8005b08:	842a                	mv	s0,a0
    usbd_ep_send (udev, 0U, NULL, 0U);
 8005b0a:	00000097          	auipc	ra,0x0
 8005b0e:	998080e7          	jalr	-1640(ra) # 80054a2 <usbd_ep_send>

    usb_ctlep_startout(udev);
 8005b12:	8522                	mv	a0,s0
 8005b14:	fffff097          	auipc	ra,0xfffff
 8005b18:	0ec080e7          	jalr	236(ra) # 8004c00 <usb_ctlep_startout>

    return USBD_OK;
}
 8005b1c:	40b2                	lw	ra,12(sp)
 8005b1e:	4422                	lw	s0,8(sp)
 8005b20:	4501                	li	a0,0
 8005b22:	0141                	addi	sp,sp,16
 8005b24:	8082                	ret

08005b26 <usbd_ctl_status_recev>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status usbd_ctl_status_recev (usb_core_driver *udev)
{
 8005b26:	1141                	addi	sp,sp,-16
 8005b28:	c606                	sw	ra,12(sp)
 8005b2a:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_OUT;
 8005b2c:	4799                	li	a5,6
 8005b2e:	42f50623          	sb	a5,1068(a0)

    usbd_ep_recev (udev, 0, NULL, 0);
 8005b32:	4681                	li	a3,0
 8005b34:	4601                	li	a2,0
 8005b36:	4581                	li	a1,0
{
 8005b38:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0, NULL, 0);
 8005b3a:	00000097          	auipc	ra,0x0
 8005b3e:	928080e7          	jalr	-1752(ra) # 8005462 <usbd_ep_recev>

    usb_ctlep_startout(udev);
 8005b42:	8522                	mv	a0,s0
 8005b44:	fffff097          	auipc	ra,0xfffff
 8005b48:	0bc080e7          	jalr	188(ra) # 8004c00 <usb_ctlep_startout>

    return USBD_OK;
}
 8005b4c:	40b2                	lw	ra,12(sp)
 8005b4e:	4422                	lw	s0,8(sp)
 8005b50:	4501                	li	a0,0
 8005b52:	0141                	addi	sp,sp,16
 8005b54:	8082                	ret

08005b56 <usbd_setup_transc>:
*/
uint8_t usbd_setup_transc (usb_core_driver *udev)
{
    usb_reqsta reqstat = REQ_NOTSUPP;

    usb_req req = udev->dev.control.req;
 8005b56:	42452783          	lw	a5,1060(a0)
 8005b5a:	42852703          	lw	a4,1064(a0)
{
 8005b5e:	1101                	addi	sp,sp,-32
 8005b60:	cc22                	sw	s0,24(sp)
    usb_req req = udev->dev.control.req;
 8005b62:	c43e                	sw	a5,8(sp)
 8005b64:	c63a                	sw	a4,12(sp)
{
 8005b66:	ce06                	sw	ra,28(sp)
 8005b68:	0607f793          	andi	a5,a5,96

    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 8005b6c:	02000713          	li	a4,32
{
 8005b70:	842a                	mv	s0,a0
    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 8005b72:	02e78a63          	beq	a5,a4,8005ba6 <usbd_setup_transc+0x50>
 8005b76:	04000713          	li	a4,64
 8005b7a:	02e78c63          	beq	a5,a4,8005bb2 <usbd_setup_transc+0x5c>
 8005b7e:	efb9                	bnez	a5,8005bdc <usbd_setup_transc+0x86>
    /* standard device request */
    case USB_REQTYPE_STRD:
        reqstat = usbd_standard_request (udev, &req);
 8005b80:	002c                	addi	a1,sp,8
 8005b82:	00000097          	auipc	ra,0x0
 8005b86:	e8c080e7          	jalr	-372(ra) # 8005a0e <usbd_standard_request>

    default:
        break;
    }

    if (REQ_SUPP == reqstat) {
 8005b8a:	e929                	bnez	a0,8005bdc <usbd_setup_transc+0x86>
        if (req.wLength == 0) {
 8005b8c:	00e15783          	lhu	a5,14(sp)
 8005b90:	e79d                	bnez	a5,8005bbe <usbd_setup_transc+0x68>
            usbd_ctl_status_send (udev);
 8005b92:	8522                	mv	a0,s0
 8005b94:	00000097          	auipc	ra,0x0
 8005b98:	f62080e7          	jalr	-158(ra) # 8005af6 <usbd_ctl_status_send>
    } else {
        usbd_enum_error (udev, &req);
    }

    return USBD_OK;
}
 8005b9c:	40f2                	lw	ra,28(sp)
 8005b9e:	4462                	lw	s0,24(sp)
 8005ba0:	4501                	li	a0,0
 8005ba2:	6105                	addi	sp,sp,32
 8005ba4:	8082                	ret
        reqstat = usbd_class_request (udev, &req);
 8005ba6:	002c                	addi	a1,sp,8
 8005ba8:	00000097          	auipc	ra,0x0
 8005bac:	e7e080e7          	jalr	-386(ra) # 8005a26 <usbd_class_request>
        break;
 8005bb0:	bfe9                	j	8005b8a <usbd_setup_transc+0x34>
        reqstat = usbd_vendor_request (udev, &req);
 8005bb2:	002c                	addi	a1,sp,8
 8005bb4:	00000097          	auipc	ra,0x0
 8005bb8:	e9e080e7          	jalr	-354(ra) # 8005a52 <usbd_vendor_request>
        break;
 8005bbc:	b7f9                	j	8005b8a <usbd_setup_transc+0x34>
            if (req.bmRequestType & 0x80) {
 8005bbe:	00810783          	lb	a5,8(sp)
                usbd_ctl_send (udev);
 8005bc2:	8522                	mv	a0,s0
            if (req.bmRequestType & 0x80) {
 8005bc4:	0007d763          	bgez	a5,8005bd2 <usbd_setup_transc+0x7c>
                usbd_ctl_send (udev);
 8005bc8:	00000097          	auipc	ra,0x0
 8005bcc:	ebe080e7          	jalr	-322(ra) # 8005a86 <usbd_ctl_send>
 8005bd0:	b7f1                	j	8005b9c <usbd_setup_transc+0x46>
                usbd_ctl_recev (udev);
 8005bd2:	00000097          	auipc	ra,0x0
 8005bd6:	eec080e7          	jalr	-276(ra) # 8005abe <usbd_ctl_recev>
 8005bda:	b7c9                	j	8005b9c <usbd_setup_transc+0x46>
        usbd_enum_error (udev, &req);
 8005bdc:	002c                	addi	a1,sp,8
 8005bde:	8522                	mv	a0,s0
 8005be0:	00000097          	auipc	ra,0x0
 8005be4:	e76080e7          	jalr	-394(ra) # 8005a56 <usbd_enum_error>
 8005be8:	bf55                	j	8005b9c <usbd_setup_transc+0x46>

08005bea <usbd_out_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_out_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005bea:	7179                	addi	sp,sp,-48
 8005bec:	d606                	sw	ra,44(sp)
 8005bee:	d422                	sw	s0,40(sp)
 8005bf0:	1800                	addi	s0,sp,48
 8005bf2:	fca42e23          	sw	a0,-36(s0)
 8005bf6:	87ae                	mv	a5,a1
 8005bf8:	fcf40da3          	sb	a5,-37(s0)
    if (ep_num == 0) {
 8005bfc:	fdb44783          	lbu	a5,-37(s0)
 8005c00:	ebc1                	bnez	a5,8005c90 <usbd_out_transc+0xa6>
        usb_transc *transc = &udev->dev.transc_out[0];
 8005c02:	fdc42783          	lw	a5,-36(s0)
 8005c06:	26c78793          	addi	a5,a5,620
 8005c0a:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005c0e:	fdc42783          	lw	a5,-36(s0)
 8005c12:	42c7c783          	lbu	a5,1068(a5)
 8005c16:	470d                	li	a4,3
 8005c18:	00e78663          	beq	a5,a4,8005c24 <usbd_out_transc+0x3a>
 8005c1c:	4711                	li	a4,4
 8005c1e:	02e78663          	beq	a5,a4,8005c4a <usbd_out_transc+0x60>

            usbd_ctl_status_send (udev);
            break;

        default:
            break;
 8005c22:	a04d                	j	8005cc4 <usbd_out_transc+0xda>
            transc->remain_len -= transc->max_len;
 8005c24:	fec42783          	lw	a5,-20(s0)
 8005c28:	4bdc                	lw	a5,20(a5)
 8005c2a:	fec42703          	lw	a4,-20(s0)
 8005c2e:	00475703          	lhu	a4,4(a4)
 8005c32:	40e78733          	sub	a4,a5,a4
 8005c36:	fec42783          	lw	a5,-20(s0)
 8005c3a:	cbd8                	sw	a4,20(a5)
            usbd_ctl_recev (udev);
 8005c3c:	fdc42503          	lw	a0,-36(s0)
 8005c40:	00000097          	auipc	ra,0x0
 8005c44:	e7e080e7          	jalr	-386(ra) # 8005abe <usbd_ctl_recev>
            break;
 8005c48:	a8b5                	j	8005cc4 <usbd_out_transc+0xda>
            if (udev->dev.cur_status == USBD_CONFIGURED) {
 8005c4a:	fdc42783          	lw	a5,-36(s0)
 8005c4e:	0c67c783          	lbu	a5,198(a5)
 8005c52:	0ff7f713          	andi	a4,a5,255
 8005c56:	478d                	li	a5,3
 8005c58:	02f71163          	bne	a4,a5,8005c7a <usbd_out_transc+0x90>
                if (udev->dev.class_core->data_out != NULL) {
 8005c5c:	fdc42783          	lw	a5,-36(s0)
 8005c60:	4307a783          	lw	a5,1072(a5)
 8005c64:	4bdc                	lw	a5,20(a5)
 8005c66:	cb91                	beqz	a5,8005c7a <usbd_out_transc+0x90>
                    udev->dev.class_core->data_out (udev, 0U);
 8005c68:	fdc42783          	lw	a5,-36(s0)
 8005c6c:	4307a783          	lw	a5,1072(a5)
 8005c70:	4bdc                	lw	a5,20(a5)
 8005c72:	4581                	li	a1,0
 8005c74:	fdc42503          	lw	a0,-36(s0)
 8005c78:	9782                	jalr	a5
            transc->remain_len = 0U;
 8005c7a:	fec42783          	lw	a5,-20(s0)
 8005c7e:	0007aa23          	sw	zero,20(a5)
            usbd_ctl_status_send (udev);
 8005c82:	fdc42503          	lw	a0,-36(s0)
 8005c86:	00000097          	auipc	ra,0x0
 8005c8a:	e70080e7          	jalr	-400(ra) # 8005af6 <usbd_ctl_status_send>
            break;
 8005c8e:	a81d                	j	8005cc4 <usbd_out_transc+0xda>
        }
    } else if ((udev->dev.class_core->data_out != NULL) && (udev->dev.cur_status == USBD_CONFIGURED)) {
 8005c90:	fdc42783          	lw	a5,-36(s0)
 8005c94:	4307a783          	lw	a5,1072(a5)
 8005c98:	4bdc                	lw	a5,20(a5)
 8005c9a:	c78d                	beqz	a5,8005cc4 <usbd_out_transc+0xda>
 8005c9c:	fdc42783          	lw	a5,-36(s0)
 8005ca0:	0c67c783          	lbu	a5,198(a5)
 8005ca4:	0ff7f713          	andi	a4,a5,255
 8005ca8:	478d                	li	a5,3
 8005caa:	00f71d63          	bne	a4,a5,8005cc4 <usbd_out_transc+0xda>
        udev->dev.class_core->data_out (udev, ep_num);
 8005cae:	fdc42783          	lw	a5,-36(s0)
 8005cb2:	4307a783          	lw	a5,1072(a5)
 8005cb6:	4bd8                	lw	a4,20(a5)
 8005cb8:	fdb44783          	lbu	a5,-37(s0)
 8005cbc:	85be                	mv	a1,a5
 8005cbe:	fdc42503          	lw	a0,-36(s0)
 8005cc2:	9702                	jalr	a4
    }

    return USBD_OK;
 8005cc4:	4781                	li	a5,0
}
 8005cc6:	853e                	mv	a0,a5
 8005cc8:	50b2                	lw	ra,44(sp)
 8005cca:	5422                	lw	s0,40(sp)
 8005ccc:	6145                	addi	sp,sp,48
 8005cce:	8082                	ret

08005cd0 <usbd_in_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_in_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005cd0:	7179                	addi	sp,sp,-48
 8005cd2:	d606                	sw	ra,44(sp)
 8005cd4:	d422                	sw	s0,40(sp)
 8005cd6:	1800                	addi	s0,sp,48
 8005cd8:	fca42e23          	sw	a0,-36(s0)
 8005cdc:	87ae                	mv	a5,a1
 8005cde:	fcf40da3          	sb	a5,-37(s0)
    if (0U == ep_num) {
 8005ce2:	fdb44783          	lbu	a5,-37(s0)
 8005ce6:	ebdd                	bnez	a5,8005d9c <usbd_in_transc+0xcc>
        usb_transc *transc = &udev->dev.transc_in[0];
 8005ce8:	fdc42783          	lw	a5,-36(s0)
 8005cec:	0c878793          	addi	a5,a5,200
 8005cf0:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005cf4:	fdc42783          	lw	a5,-36(s0)
 8005cf8:	42c7c783          	lbu	a5,1068(a5)
 8005cfc:	4705                	li	a4,1
 8005cfe:	00e78663          	beq	a5,a4,8005d0a <usbd_in_transc+0x3a>
 8005d02:	4709                	li	a4,2
 8005d04:	02e78663          	beq	a5,a4,8005d30 <usbd_in_transc+0x60>
                usbd_ctl_status_recev (udev);
            }
            break;

        default:
            break;
 8005d08:	a0e1                	j	8005dd0 <usbd_in_transc+0x100>
            transc->remain_len -= transc->max_len;
 8005d0a:	fec42783          	lw	a5,-20(s0)
 8005d0e:	4bdc                	lw	a5,20(a5)
 8005d10:	fec42703          	lw	a4,-20(s0)
 8005d14:	00475703          	lhu	a4,4(a4)
 8005d18:	40e78733          	sub	a4,a5,a4
 8005d1c:	fec42783          	lw	a5,-20(s0)
 8005d20:	cbd8                	sw	a4,20(a5)
            usbd_ctl_send (udev);
 8005d22:	fdc42503          	lw	a0,-36(s0)
 8005d26:	00000097          	auipc	ra,0x0
 8005d2a:	d60080e7          	jalr	-672(ra) # 8005a86 <usbd_ctl_send>
            break;
 8005d2e:	a04d                	j	8005dd0 <usbd_in_transc+0x100>
            if (udev->dev.control.ctl_zlp) {
 8005d30:	fdc42783          	lw	a5,-36(s0)
 8005d34:	42d7c783          	lbu	a5,1069(a5)
 8005d38:	cf99                	beqz	a5,8005d56 <usbd_in_transc+0x86>
                usbd_ep_send (udev, 0U, NULL, 0U);
 8005d3a:	4681                	li	a3,0
 8005d3c:	4601                	li	a2,0
 8005d3e:	4581                	li	a1,0
 8005d40:	fdc42503          	lw	a0,-36(s0)
 8005d44:	fffff097          	auipc	ra,0xfffff
 8005d48:	75e080e7          	jalr	1886(ra) # 80054a2 <usbd_ep_send>
                udev->dev.control.ctl_zlp = 0U;
 8005d4c:	fdc42783          	lw	a5,-36(s0)
 8005d50:	420786a3          	sb	zero,1069(a5)
            break;
 8005d54:	a8b5                	j	8005dd0 <usbd_in_transc+0x100>
                if (udev->dev.cur_status == USBD_CONFIGURED) {
 8005d56:	fdc42783          	lw	a5,-36(s0)
 8005d5a:	0c67c783          	lbu	a5,198(a5)
 8005d5e:	0ff7f713          	andi	a4,a5,255
 8005d62:	478d                	li	a5,3
 8005d64:	02f71163          	bne	a4,a5,8005d86 <usbd_in_transc+0xb6>
                    if (udev->dev.class_core->data_in != NULL) {
 8005d68:	fdc42783          	lw	a5,-36(s0)
 8005d6c:	4307a783          	lw	a5,1072(a5)
 8005d70:	4b9c                	lw	a5,16(a5)
 8005d72:	cb91                	beqz	a5,8005d86 <usbd_in_transc+0xb6>
                        udev->dev.class_core->data_in (udev, 0U);
 8005d74:	fdc42783          	lw	a5,-36(s0)
 8005d78:	4307a783          	lw	a5,1072(a5)
 8005d7c:	4b9c                	lw	a5,16(a5)
 8005d7e:	4581                	li	a1,0
 8005d80:	fdc42503          	lw	a0,-36(s0)
 8005d84:	9782                	jalr	a5
                transc->remain_len = 0U;
 8005d86:	fec42783          	lw	a5,-20(s0)
 8005d8a:	0007aa23          	sw	zero,20(a5)
                usbd_ctl_status_recev (udev);
 8005d8e:	fdc42503          	lw	a0,-36(s0)
 8005d92:	00000097          	auipc	ra,0x0
 8005d96:	d94080e7          	jalr	-620(ra) # 8005b26 <usbd_ctl_status_recev>
            break;
 8005d9a:	a81d                	j	8005dd0 <usbd_in_transc+0x100>
        }
    } else {
        if ((udev->dev.cur_status == USBD_CONFIGURED) && (udev->dev.class_core->data_in != NULL)) {
 8005d9c:	fdc42783          	lw	a5,-36(s0)
 8005da0:	0c67c783          	lbu	a5,198(a5)
 8005da4:	0ff7f713          	andi	a4,a5,255
 8005da8:	478d                	li	a5,3
 8005daa:	02f71363          	bne	a4,a5,8005dd0 <usbd_in_transc+0x100>
 8005dae:	fdc42783          	lw	a5,-36(s0)
 8005db2:	4307a783          	lw	a5,1072(a5)
 8005db6:	4b9c                	lw	a5,16(a5)
 8005db8:	cf81                	beqz	a5,8005dd0 <usbd_in_transc+0x100>
            udev->dev.class_core->data_in (udev, ep_num);
 8005dba:	fdc42783          	lw	a5,-36(s0)
 8005dbe:	4307a783          	lw	a5,1072(a5)
 8005dc2:	4b98                	lw	a4,16(a5)
 8005dc4:	fdb44783          	lbu	a5,-37(s0)
 8005dc8:	85be                	mv	a1,a5
 8005dca:	fdc42503          	lw	a0,-36(s0)
 8005dce:	9702                	jalr	a4
        }
    }

    return USBD_OK;
 8005dd0:	4781                	li	a5,0
}
 8005dd2:	853e                	mv	a0,a5
 8005dd4:	50b2                	lw	ra,44(sp)
 8005dd6:	5422                	lw	s0,40(sp)
 8005dd8:	6145                	addi	sp,sp,48
 8005dda:	8082                	ret

08005ddc <write_handle_raw>:
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 8005ddc:	7151                	addi	sp,sp,-240
 8005dde:	d5a2                	sw	s0,232(sp)
 8005de0:	d1ca                	sw	s2,224(sp)
 8005de2:	c62a                	sw	a0,12(sp)
 8005de4:	892e                	mv	s2,a1
 8005de6:	8432                	mv	s0,a2
	uint8_t string_buffer[128] = {'\0'};
 8005de8:	4581                	li	a1,0
 8005dea:	08000613          	li	a2,128
 8005dee:	1088                	addi	a0,sp,96
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 8005df0:	d786                	sw	ra,236(sp)
 8005df2:	d3a6                	sw	s1,228(sp)
	uint8_t string_buffer[128] = {'\0'};
 8005df4:	00002097          	auipc	ra,0x2
 8005df8:	bd6080e7          	jalr	-1066(ra) # 80079ca <memset>
	uint8_t data_buffer[(20*2)+15] = {'\0'};
 8005dfc:	03700613          	li	a2,55
 8005e00:	4581                	li	a1,0
 8005e02:	1028                	addi	a0,sp,40
 8005e04:	00002097          	auipc	ra,0x2
 8005e08:	bc6080e7          	jalr	-1082(ra) # 80079ca <memset>
	const uint8_t lut_hex[] = "0123456789ABCDEF";
 8005e0c:	080004b7          	lui	s1,0x8000
 8005e10:	3c848593          	addi	a1,s1,968 # 80003c8 <_std_dev_req+0x38>
 8005e14:	4645                	li	a2,17
 8005e16:	03058593          	addi	a1,a1,48
 8005e1a:	0848                	addi	a0,sp,20
 8005e1c:	00002097          	auipc	ra,0x2
 8005e20:	b98080e7          	jalr	-1128(ra) # 80079b4 <memcpy>
	for(int i = 0; i < size; i++){
 8005e24:	46b2                	lw	a3,12(sp)
 8005e26:	1030                	addi	a2,sp,40
 8005e28:	4701                	li	a4,0
 8005e2a:	3c848593          	addi	a1,s1,968
 8005e2e:	04874463          	blt	a4,s0,8005e76 <write_handle_raw+0x9a>
	data_buffer[size*2] = '\0';
 8005e32:	119c                	addi	a5,sp,224
 8005e34:	0406                	slli	s0,s0,0x1
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e36:	08000637          	lui	a2,0x8000
	data_buffer[size*2] = '\0';
 8005e3a:	943e                	add	s0,s0,a5
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e3c:	1038                	addi	a4,sp,40
 8005e3e:	40c60613          	addi	a2,a2,1036 # 800040c <_std_dev_req+0x7c>
 8005e42:	04c58593          	addi	a1,a1,76
 8005e46:	1088                	addi	a0,sp,96
	data_buffer[size*2] = '\0';
 8005e48:	f4040423          	sb	zero,-184(s0)
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e4c:	00002097          	auipc	ra,0x2
 8005e50:	b8e080e7          	jalr	-1138(ra) # 80079da <siprintf>
	lio_send_bt(string_buffer, strlen(string_buffer));
 8005e54:	1088                	addi	a0,sp,96
 8005e56:	00002097          	auipc	ra,0x2
 8005e5a:	bea080e7          	jalr	-1046(ra) # 8007a40 <strlen>
 8005e5e:	85aa                	mv	a1,a0
 8005e60:	1088                	addi	a0,sp,96
 8005e62:	00001097          	auipc	ra,0x1
 8005e66:	b3c080e7          	jalr	-1220(ra) # 800699e <lio_send_bt>
}
 8005e6a:	50be                	lw	ra,236(sp)
 8005e6c:	542e                	lw	s0,232(sp)
 8005e6e:	549e                	lw	s1,228(sp)
 8005e70:	590e                	lw	s2,224(sp)
 8005e72:	616d                	addi	sp,sp,240
 8005e74:	8082                	ret
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e76:	00e907b3          	add	a5,s2,a4
 8005e7a:	0007c783          	lbu	a5,0(a5)
 8005e7e:	1184                	addi	s1,sp,224
	for(int i = 0; i < size; i++){
 8005e80:	0705                	addi	a4,a4,1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e82:	0047d513          	srli	a0,a5,0x4
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e86:	8bbd                	andi	a5,a5,15
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e88:	9526                	add	a0,a0,s1
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e8a:	97a6                	add	a5,a5,s1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e8c:	f3454503          	lbu	a0,-204(a0)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e90:	f347c783          	lbu	a5,-204(a5)
 8005e94:	0609                	addi	a2,a2,2
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e96:	fea60f23          	sb	a0,-2(a2)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e9a:	fef60fa3          	sb	a5,-1(a2)
 8005e9e:	bf41                	j	8005e2e <write_handle_raw+0x52>

08005ea0 <send_data_to_phone>:
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 8005ea0:	00859793          	slli	a5,a1,0x8
 8005ea4:	05c2                	slli	a1,a1,0x10
 8005ea6:	81c1                	srli	a1,a1,0x10
 8005ea8:	81a1                	srli	a1,a1,0x8
void send_data_to_phone(uint16_t handle, int16_t value){
 8005eaa:	1101                	addi	sp,sp,-32
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 8005eac:	8ddd                	or	a1,a1,a5
 8005eae:	00b11623          	sh	a1,12(sp)
    write_handle_raw(handle,bytes,2);
 8005eb2:	4609                	li	a2,2
 8005eb4:	006c                	addi	a1,sp,12
void send_data_to_phone(uint16_t handle, int16_t value){
 8005eb6:	ce06                	sw	ra,28(sp)
    write_handle_raw(handle,bytes,2);
 8005eb8:	00000097          	auipc	ra,0x0
 8005ebc:	f24080e7          	jalr	-220(ra) # 8005ddc <write_handle_raw>
}
 8005ec0:	40f2                	lw	ra,28(sp)
 8005ec2:	6105                	addi	sp,sp,32
 8005ec4:	8082                	ret

08005ec6 <stagger_data_to_phone>:
    int index = (seconds - 1) % 7; // Adjust the size according to the number of handles
 8005ec6:	479d                	li	a5,7
 8005ec8:	157d                	addi	a0,a0,-1
 8005eca:	02f56533          	rem	a0,a0,a5
    value = last_Sample_buffer[index];
 8005ece:	20000737          	lui	a4,0x20000
    send_data_to_phone(handles[index], value);
 8005ed2:	200007b7          	lui	a5,0x20000
    value = last_Sample_buffer[index];
 8005ed6:	55c70713          	addi	a4,a4,1372 # 2000055c <last_Sample_buffer>
    send_data_to_phone(handles[index], value);
 8005eda:	47878793          	addi	a5,a5,1144 # 20000478 <handles>
    value = last_Sample_buffer[index];
 8005ede:	0506                	slli	a0,a0,0x1
 8005ee0:	972a                	add	a4,a4,a0
    send_data_to_phone(handles[index], value);
 8005ee2:	953e                	add	a0,a0,a5
 8005ee4:	00071583          	lh	a1,0(a4)
 8005ee8:	00055503          	lhu	a0,0(a0)
 8005eec:	00000317          	auipc	t1,0x0
 8005ef0:	fb430067          	jr	-76(t1) # 8005ea0 <send_data_to_phone>

08005ef4 <reboot_BT>:
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005ef4:	08000537          	lui	a0,0x8000
void reboot_BT(){
 8005ef8:	1141                	addi	sp,sp,-16
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005efa:	4591                	li	a1,4
 8005efc:	42050513          	addi	a0,a0,1056 # 8000420 <_std_dev_req+0x90>
void reboot_BT(){
 8005f00:	c606                	sw	ra,12(sp)
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005f02:	00001097          	auipc	ra,0x1
 8005f06:	a9c080e7          	jalr	-1380(ra) # 800699e <lio_send_bt>
}
 8005f0a:	40b2                	lw	ra,12(sp)
    delay_1ms(50);
 8005f0c:	03200513          	li	a0,50
}
 8005f10:	0141                	addi	sp,sp,16
    delay_1ms(50);
 8005f12:	fffff317          	auipc	t1,0xfffff
 8005f16:	89430067          	jr	-1900(t1) # 80047a6 <delay_1ms>

08005f1a <TIMER1_IRQHandler>:
                break;
        }
    }
}

void TIMER1_IRQHandler(void){
 8005f1a:	711d                	addi	sp,sp,-96
    char buf[64] = {'\0'};
 8005f1c:	04000613          	li	a2,64
 8005f20:	4581                	li	a1,0
 8005f22:	850a                	mv	a0,sp
void TIMER1_IRQHandler(void){
 8005f24:	ce86                	sw	ra,92(sp)
 8005f26:	cca2                	sw	s0,88(sp)
 8005f28:	caa6                	sw	s1,84(sp)
 8005f2a:	c8ca                	sw	s2,80(sp)
 8005f2c:	c6ce                	sw	s3,76(sp)
    char buf[64] = {'\0'};
 8005f2e:	00002097          	auipc	ra,0x2
 8005f32:	a9c080e7          	jalr	-1380(ra) # 80079ca <memset>
    int buf_size = 0;   
    dma_vector_t vector_write;
    /* Check which channel triggered the interrupt */
    if(SET == timer_interrupt_flag_get(TIMER1, TIMER_INT_CH0)){
 8005f36:	4589                	li	a1,2
 8005f38:	40000537          	lui	a0,0x40000
 8005f3c:	ffffc097          	auipc	ra,0xffffc
 8005f40:	960080e7          	jalr	-1696(ra) # 800189c <timer_interrupt_flag_get>
 8005f44:	4785                	li	a5,1
 8005f46:	1cf51463          	bne	a0,a5,800610e <TIMER1_IRQHandler+0x1f4>
        //led_on_B1();
        milli++;
 8005f4a:	200004b7          	lui	s1,0x20000
 8005f4e:	53c48713          	addi	a4,s1,1340 # 2000053c <milli>
 8005f52:	00075783          	lhu	a5,0(a4)
 8005f56:	20000437          	lui	s0,0x20000
 8005f5a:	53c48493          	addi	s1,s1,1340
 8005f5e:	0785                	addi	a5,a5,1
 8005f60:	07c2                	slli	a5,a5,0x10
 8005f62:	87c1                	srai	a5,a5,0x10
 8005f64:	00f71023          	sh	a5,0(a4)
        if(milli == 1000){
 8005f68:	00075783          	lhu	a5,0(a4)
 8005f6c:	3e800713          	li	a4,1000
 8005f70:	54040413          	addi	s0,s0,1344 # 20000540 <seconds>
 8005f74:	07c2                	slli	a5,a5,0x10
 8005f76:	87c1                	srai	a5,a5,0x10
 8005f78:	00e79763          	bne	a5,a4,8005f86 <TIMER1_IRQHandler+0x6c>
            milli = 0;
 8005f7c:	00049023          	sh	zero,0(s1)
            seconds++;
 8005f80:	401c                	lw	a5,0(s0)
 8005f82:	0785                	addi	a5,a5,1
 8005f84:	c01c                	sw	a5,0(s0)
            //skicka data till telefon
        }
        if(seconds==60){
 8005f86:	4018                	lw	a4,0(s0)
 8005f88:	200009b7          	lui	s3,0x20000
 8005f8c:	03c00793          	li	a5,60
 8005f90:	53e98993          	addi	s3,s3,1342 # 2000053e <minutes>
 8005f94:	00f71b63          	bne	a4,a5,8005faa <TIMER1_IRQHandler+0x90>
            seconds = 0;
 8005f98:	00042023          	sw	zero,0(s0)
            minutes++;
 8005f9c:	0009d783          	lhu	a5,0(s3)
 8005fa0:	0785                	addi	a5,a5,1
 8005fa2:	07c2                	slli	a5,a5,0x10
 8005fa4:	87c1                	srai	a5,a5,0x10
 8005fa6:	00f99023          	sh	a5,0(s3)
        }
        if(milli == 0){ //Right leg
 8005faa:	0004d783          	lhu	a5,0(s1)
 8005fae:	07c2                	slli	a5,a5,0x10
 8005fb0:	87c1                	srai	a5,a5,0x10
 8005fb2:	eb81                	bnez	a5,8005fc2 <TIMER1_IRQHandler+0xa8>
            stagger_data_to_phone(seconds);
 8005fb4:	4008                	lw	a0,0(s0)
 8005fb6:	0542                	slli	a0,a0,0x10
 8005fb8:	8541                	srai	a0,a0,0x10
 8005fba:	00000097          	auipc	ra,0x0
 8005fbe:	f0c080e7          	jalr	-244(ra) # 8005ec6 <stagger_data_to_phone>
        //if(milli == 400){ //Chest
        //    stagger_data_to_phone(seconds);
        //}
        
        
        emg = ADC_RDATA(ADC0);
 8005fc2:	40012937          	lui	s2,0x40012
 8005fc6:	44c92703          	lw	a4,1100(s2) # 4001244c <_sp+0x2000a44c>
 8005fca:	200007b7          	lui	a5,0x20000

        formatTime(buf,minutes,seconds,milli);
 8005fce:	850a                	mv	a0,sp
        emg = ADC_RDATA(ADC0);
 8005fd0:	52e7ac23          	sw	a4,1336(a5) # 20000538 <emg>
        formatTime(buf,minutes,seconds,milli);
 8005fd4:	0009d583          	lhu	a1,0(s3)
 8005fd8:	4010                	lw	a2,0(s0)
 8005fda:	0004d683          	lhu	a3,0(s1)
 8005fde:	05c2                	slli	a1,a1,0x10
 8005fe0:	85c1                	srai	a1,a1,0x10
 8005fe2:	06c2                	slli	a3,a3,0x10
 8005fe4:	86c1                	srai	a3,a3,0x10
 8005fe6:	00000097          	auipc	ra,0x0
 8005fea:	3f6080e7          	jalr	1014(ra) # 80063dc <formatTime>
        last_Sample_buffer[0] = (int16_t)((*(pDatabuffer + 0  ) << 8) | *(pDatabuffer + 1  ));
 8005fee:	200007b7          	lui	a5,0x20000
 8005ff2:	4fc7a783          	lw	a5,1276(a5) # 200004fc <pDatabuffer>
 8005ff6:	20000437          	lui	s0,0x20000
 8005ffa:	55c40413          	addi	s0,s0,1372 # 2000055c <last_Sample_buffer>
 8005ffe:	0007c583          	lbu	a1,0(a5)
 8006002:	0017c703          	lbu	a4,1(a5)
        last_Sample_buffer[3] = (int16_t)((*(pDatabuffer + 8  ) << 8) | *(pDatabuffer + 9  ));
        last_Sample_buffer[4] = (int16_t)((*(pDatabuffer + 10 ) << 8) | *(pDatabuffer + 11 ));
        last_Sample_buffer[5] = (int16_t)((*(pDatabuffer + 12 ) << 8) | *(pDatabuffer + 13 ));
        last_Sample_buffer[6] = ADC_RDATA(ADC0);

        append_int_to_string(buf, last_Sample_buffer[0]);
 8006006:	850a                	mv	a0,sp
        last_Sample_buffer[0] = (int16_t)((*(pDatabuffer + 0  ) << 8) | *(pDatabuffer + 1  ));
 8006008:	05a2                	slli	a1,a1,0x8
 800600a:	8dd9                	or	a1,a1,a4
 800600c:	05c2                	slli	a1,a1,0x10
 800600e:	85c1                	srai	a1,a1,0x10
 8006010:	00b41023          	sh	a1,0(s0)
        last_Sample_buffer[1] = (int16_t)((*(pDatabuffer + 2  ) << 8) | *(pDatabuffer + 3  ));
 8006014:	0027c703          	lbu	a4,2(a5)
 8006018:	0037c683          	lbu	a3,3(a5)
 800601c:	0722                	slli	a4,a4,0x8
 800601e:	8f55                	or	a4,a4,a3
 8006020:	00e41123          	sh	a4,2(s0)
        last_Sample_buffer[2] = (int16_t)((*(pDatabuffer + 4  ) << 8) | *(pDatabuffer + 5  ));
 8006024:	0047c703          	lbu	a4,4(a5)
 8006028:	0057c683          	lbu	a3,5(a5)
 800602c:	0722                	slli	a4,a4,0x8
 800602e:	8f55                	or	a4,a4,a3
 8006030:	00e41223          	sh	a4,4(s0)
        last_Sample_buffer[3] = (int16_t)((*(pDatabuffer + 8  ) << 8) | *(pDatabuffer + 9  ));
 8006034:	0087c703          	lbu	a4,8(a5)
 8006038:	0097c683          	lbu	a3,9(a5)
 800603c:	0722                	slli	a4,a4,0x8
 800603e:	8f55                	or	a4,a4,a3
 8006040:	00e41323          	sh	a4,6(s0)
        last_Sample_buffer[4] = (int16_t)((*(pDatabuffer + 10 ) << 8) | *(pDatabuffer + 11 ));
 8006044:	00a7c703          	lbu	a4,10(a5)
 8006048:	00b7c683          	lbu	a3,11(a5)
 800604c:	0722                	slli	a4,a4,0x8
 800604e:	8f55                	or	a4,a4,a3
 8006050:	00e41423          	sh	a4,8(s0)
        last_Sample_buffer[5] = (int16_t)((*(pDatabuffer + 12 ) << 8) | *(pDatabuffer + 13 ));
 8006054:	00c7c703          	lbu	a4,12(a5)
 8006058:	00d7c783          	lbu	a5,13(a5)
 800605c:	0722                	slli	a4,a4,0x8
 800605e:	8fd9                	or	a5,a5,a4
 8006060:	00f41523          	sh	a5,10(s0)
        last_Sample_buffer[6] = ADC_RDATA(ADC0);
 8006064:	44c92783          	lw	a5,1100(s2)
 8006068:	00f41623          	sh	a5,12(s0)
        append_int_to_string(buf, last_Sample_buffer[0]);
 800606c:	00000097          	auipc	ra,0x0
 8006070:	474080e7          	jalr	1140(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[1]);
 8006074:	00241583          	lh	a1,2(s0)
 8006078:	850a                	mv	a0,sp
 800607a:	00000097          	auipc	ra,0x0
 800607e:	466080e7          	jalr	1126(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[2]);
 8006082:	00441583          	lh	a1,4(s0)
 8006086:	850a                	mv	a0,sp
 8006088:	00000097          	auipc	ra,0x0
 800608c:	458080e7          	jalr	1112(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[3]);
 8006090:	00641583          	lh	a1,6(s0)
 8006094:	850a                	mv	a0,sp
 8006096:	00000097          	auipc	ra,0x0
 800609a:	44a080e7          	jalr	1098(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[4]);
 800609e:	00841583          	lh	a1,8(s0)
 80060a2:	850a                	mv	a0,sp
 80060a4:	00000097          	auipc	ra,0x0
 80060a8:	43c080e7          	jalr	1084(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[5]);
 80060ac:	00a41583          	lh	a1,10(s0)
 80060b0:	850a                	mv	a0,sp
 80060b2:	00000097          	auipc	ra,0x0
 80060b6:	42e080e7          	jalr	1070(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[6]);
 80060ba:	00c41583          	lh	a1,12(s0)
 80060be:	850a                	mv	a0,sp
 80060c0:	00000097          	auipc	ra,0x0
 80060c4:	420080e7          	jalr	1056(ra) # 80064e0 <append_int_to_string>

        append_newLine(buf, strlen(buf)); //Testa byt strlen till buf_size för bättre prestanda
 80060c8:	850a                	mv	a0,sp
 80060ca:	00002097          	auipc	ra,0x2
 80060ce:	976080e7          	jalr	-1674(ra) # 8007a40 <strlen>
 80060d2:	85aa                	mv	a1,a0
 80060d4:	850a                	mv	a0,sp
 80060d6:	00000097          	auipc	ra,0x0
 80060da:	43a080e7          	jalr	1082(ra) # 8006510 <append_newLine>
        enqueue_string(buf);
 80060de:	850a                	mv	a0,sp
 80060e0:	ffffe097          	auipc	ra,0xffffe
 80060e4:	502080e7          	jalr	1282(ra) # 80045e2 <enqueue_string>

        i2c_dma_master_read_register(I2C0, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H);
 80060e8:	40005537          	lui	a0,0x40005
 80060ec:	06900593          	li	a1,105
 80060f0:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 80060f4:	03b00613          	li	a2,59
 80060f8:	ffffe097          	auipc	ra,0xffffe
 80060fc:	26e080e7          	jalr	622(ra) # 8004366 <i2c_dma_master_read_register>
        timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 8006100:	4589                	li	a1,2
 8006102:	40000537          	lui	a0,0x40000
 8006106:	ffffb097          	auipc	ra,0xffffb
 800610a:	7a8080e7          	jalr	1960(ra) # 80018ae <timer_interrupt_flag_clear>
        //led_off_B1();
    }
}
 800610e:	40f6                	lw	ra,92(sp)
 8006110:	4466                	lw	s0,88(sp)
 8006112:	44d6                	lw	s1,84(sp)
 8006114:	4946                	lw	s2,80(sp)
 8006116:	49b6                	lw	s3,76(sp)
 8006118:	6125                	addi	sp,sp,96
 800611a:	8082                	ret

0800611c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800611c:	1101                	addi	sp,sp,-32
 800611e:	ca26                	sw	s1,20(sp)
 8006120:	c84a                	sw	s2,16(sp)
    if(RESET != usart_interrupt_flag_get(USART2, USART_INT_FLAG_RBNE)){
 8006122:	400054b7          	lui	s1,0x40005
 8006126:	00050937          	lui	s2,0x50
 800612a:	30590593          	addi	a1,s2,773 # 50305 <__stack_size+0x4f305>
 800612e:	80048513          	addi	a0,s1,-2048 # 40004800 <_sp+0x1fffc800>
void USART2_IRQHandler(void){
 8006132:	ce06                	sw	ra,28(sp)
 8006134:	cc22                	sw	s0,24(sp)
 8006136:	c64e                	sw	s3,12(sp)
    if(RESET != usart_interrupt_flag_get(USART2, USART_INT_FLAG_RBNE)){
 8006138:	ffffc097          	auipc	ra,0xffffc
 800613c:	92e080e7          	jalr	-1746(ra) # 8001a66 <usart_interrupt_flag_get>
 8006140:	10050d63          	beqz	a0,800625a <USART2_IRQHandler+0x13e>
        start_time = millis() + 1000;
 8006144:	00000097          	auipc	ra,0x0
 8006148:	3da080e7          	jalr	986(ra) # 800651e <millis>
 800614c:	200007b7          	lui	a5,0x20000
 8006150:	3e850513          	addi	a0,a0,1000 # 400003e8 <_sp+0x1fff83e8>
 8006154:	54a7a223          	sw	a0,1348(a5) # 20000544 <start_time>
        rxbuffer[rxCount++] = usart_data_receive(USART2);
 8006158:	80048513          	addi	a0,s1,-2048
 800615c:	ffffc097          	auipc	ra,0xffffc
 8006160:	8ba080e7          	jalr	-1862(ra) # 8001a16 <usart_data_receive>
 8006164:	20005737          	lui	a4,0x20005
 8006168:	e3874783          	lbu	a5,-456(a4) # 20004e38 <rxCount>
 800616c:	20005437          	lui	s0,0x20005
 8006170:	89ba                	mv	s3,a4
 8006172:	00178693          	addi	a3,a5,1
 8006176:	e2d70c23          	sb	a3,-456(a4)
 800617a:	e3c40693          	addi	a3,s0,-452 # 20004e3c <rxbuffer>
 800617e:	97b6                	add	a5,a5,a3
 8006180:	00a78023          	sb	a0,0(a5)
        if(rxbuffer[0] != 's'){
 8006184:	0006c683          	lbu	a3,0(a3) # 1000000 <__stack_size+0xfff000>
 8006188:	07300793          	li	a5,115
 800618c:	02f68463          	beq	a3,a5,80061b4 <USART2_IRQHandler+0x98>
            rxCount = 0;
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 8006190:	4581                	li	a1,0
 8006192:	4621                	li	a2,8
 8006194:	e3c40513          	addi	a0,s0,-452
            rxCount = 0;
 8006198:	e2070c23          	sb	zero,-456(a4)
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 800619c:	00002097          	auipc	ra,0x2
 80061a0:	82e080e7          	jalr	-2002(ra) # 80079ca <memset>
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 80061a4:	30590593          	addi	a1,s2,773
 80061a8:	80048513          	addi	a0,s1,-2048
 80061ac:	ffffc097          	auipc	ra,0xffffc
 80061b0:	8e8080e7          	jalr	-1816(ra) # 8001a94 <usart_interrupt_flag_clear>
        }
        if(rxCount == 6){
 80061b4:	e389c703          	lbu	a4,-456(s3)
 80061b8:	4799                	li	a5,6
 80061ba:	0af71063          	bne	a4,a5,800625a <USART2_IRQHandler+0x13e>
            if(!strcmp(rxbuffer, "start0")) {
 80061be:	080005b7          	lui	a1,0x8000
 80061c2:	3c858593          	addi	a1,a1,968 # 80003c8 <_std_dev_req+0x38>
 80061c6:	e3c40513          	addi	a0,s0,-452
 80061ca:	00002097          	auipc	ra,0x2
 80061ce:	85e080e7          	jalr	-1954(ra) # 8007a28 <strcmp>
 80061d2:	e939                	bnez	a0,8006228 <USART2_IRQHandler+0x10c>
                set_state(START);
 80061d4:	4505                	li	a0,1
 80061d6:	00001097          	auipc	ra,0x1
 80061da:	86e080e7          	jalr	-1938(ra) # 8006a44 <set_state>
                led_on_B1();
 80061de:	00000097          	auipc	ra,0x0
 80061e2:	0b4080e7          	jalr	180(ra) # 8006292 <led_on_B1>
                write = 1;
 80061e6:	200007b7          	lui	a5,0x20000
 80061ea:	4705                	li	a4,1
 80061ec:	54e7a423          	sw	a4,1352(a5) # 20000548 <write>
                set_state(STOP);
                led_off_B1();
                write = 0;
            }
            rxCount = 0;
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 80061f0:	4581                	li	a1,0
 80061f2:	e3c40513          	addi	a0,s0,-452
 80061f6:	4621                	li	a2,8
            rxCount = 0;
 80061f8:	e2098c23          	sb	zero,-456(s3)
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 80061fc:	00001097          	auipc	ra,0x1
 8006200:	7ce080e7          	jalr	1998(ra) # 80079ca <memset>
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
        }
    }
}
 8006204:	4462                	lw	s0,24(sp)
 8006206:	40f2                	lw	ra,28(sp)
 8006208:	44d2                	lw	s1,20(sp)
 800620a:	4942                	lw	s2,16(sp)
 800620c:	49b2                	lw	s3,12(sp)
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 800620e:	000505b7          	lui	a1,0x50
 8006212:	40005537          	lui	a0,0x40005
 8006216:	30558593          	addi	a1,a1,773 # 50305 <__stack_size+0x4f305>
 800621a:	80050513          	addi	a0,a0,-2048 # 40004800 <_sp+0x1fffc800>
}
 800621e:	6105                	addi	sp,sp,32
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 8006220:	ffffc317          	auipc	t1,0xffffc
 8006224:	87430067          	jr	-1932(t1) # 8001a94 <usart_interrupt_flag_clear>
            }else if(!strcmp(rxbuffer, "stopp0")){
 8006228:	080005b7          	lui	a1,0x8000
 800622c:	3e058593          	addi	a1,a1,992 # 80003e0 <_std_dev_req+0x50>
 8006230:	e3c40513          	addi	a0,s0,-452
 8006234:	00001097          	auipc	ra,0x1
 8006238:	7f4080e7          	jalr	2036(ra) # 8007a28 <strcmp>
 800623c:	f955                	bnez	a0,80061f0 <USART2_IRQHandler+0xd4>
                set_state(STOP);
 800623e:	4509                	li	a0,2
 8006240:	00001097          	auipc	ra,0x1
 8006244:	804080e7          	jalr	-2044(ra) # 8006a44 <set_state>
                led_off_B1();
 8006248:	00000097          	auipc	ra,0x0
 800624c:	05e080e7          	jalr	94(ra) # 80062a6 <led_off_B1>
                write = 0;
 8006250:	200007b7          	lui	a5,0x20000
 8006254:	5407a423          	sw	zero,1352(a5) # 20000548 <write>
 8006258:	bf61                	j	80061f0 <USART2_IRQHandler+0xd4>
}
 800625a:	40f2                	lw	ra,28(sp)
 800625c:	4462                	lw	s0,24(sp)
 800625e:	44d2                	lw	s1,20(sp)
 8006260:	4942                	lw	s2,16(sp)
 8006262:	49b2                	lw	s3,12(sp)
 8006264:	6105                	addi	sp,sp,32
 8006266:	8082                	ret

08006268 <ledInit>:

void ledInit (void){
 8006268:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 800626a:	60300513          	li	a0,1539
void ledInit (void){
 800626e:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8006270:	ffffb097          	auipc	ra,0xffffb
 8006274:	f32080e7          	jalr	-206(ra) # 80011a2 <rcu_periph_clock_enable>
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
}
 8006278:	40b2                	lw	ra,12(sp)
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
 800627a:	40011537          	lui	a0,0x40011
 800627e:	468d                	li	a3,3
 8006280:	460d                	li	a2,3
 8006282:	45c1                	li	a1,16
 8006284:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
}
 8006288:	0141                	addi	sp,sp,16
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
 800628a:	ffffb317          	auipc	t1,0xffffb
 800628e:	c7030067          	jr	-912(t1) # 8000efa <gpio_init>

08006292 <led_on_B1>:

void led_on_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 1);
 8006292:	40011537          	lui	a0,0x40011
 8006296:	4605                	li	a2,1
 8006298:	4589                	li	a1,2
 800629a:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 800629e:	ffffb317          	auipc	t1,0xffffb
 80062a2:	d0830067          	jr	-760(t1) # 8000fa6 <gpio_bit_write>

080062a6 <led_off_B1>:
}
void led_off_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 0);
 80062a6:	40011537          	lui	a0,0x40011
 80062aa:	4601                	li	a2,0
 80062ac:	4589                	li	a1,2
 80062ae:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062b2:	ffffb317          	auipc	t1,0xffffb
 80062b6:	cf430067          	jr	-780(t1) # 8000fa6 <gpio_bit_write>

080062ba <led_on_B0>:
}

void led_on_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 1);
 80062ba:	40011537          	lui	a0,0x40011
 80062be:	4605                	li	a2,1
 80062c0:	4585                	li	a1,1
 80062c2:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062c6:	ffffb317          	auipc	t1,0xffffb
 80062ca:	ce030067          	jr	-800(t1) # 8000fa6 <gpio_bit_write>

080062ce <led_off_B0>:
}
void led_off_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 0);
 80062ce:	40011537          	lui	a0,0x40011
 80062d2:	4601                	li	a2,0
 80062d4:	4585                	li	a1,1
 80062d6:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062da:	ffffb317          	auipc	t1,0xffffb
 80062de:	ccc30067          	jr	-820(t1) # 8000fa6 <gpio_bit_write>

080062e2 <timer_interrupt_config>:
}

void timer_interrupt_config(){
 80062e2:	7179                	addi	sp,sp,-48
    /* Configuration structs */ 
    timer_oc_parameter_struct timer_ocinitpara;
    timer_parameter_struct timer_initpara;

    /* Enable the TIMER1 interrupt request */
    eclic_irq_enable(TIMER1_IRQn,1,0);
 80062e4:	4601                	li	a2,0
 80062e6:	4585                	li	a1,1
 80062e8:	02f00513          	li	a0,47
void timer_interrupt_config(){
 80062ec:	d606                	sw	ra,44(sp)
 80062ee:	d422                	sw	s0,40(sp)
 80062f0:	d226                	sw	s1,36(sp)
    eclic_irq_enable(TIMER1_IRQn,1,0);
 80062f2:	ffffb097          	auipc	ra,0xffffb
 80062f6:	bca080e7          	jalr	-1078(ra) # 8000ebc <eclic_irq_enable>
    
    /* Enable the peripheral clock. */
    rcu_periph_clock_enable(RCU_TIMER1);
 80062fa:	70000513          	li	a0,1792
 80062fe:	ffffb097          	auipc	ra,0xffffb
 8006302:	ea4080e7          	jalr	-348(ra) # 80011a2 <rcu_periph_clock_enable>

    /* Reset the timer */
    timer_deinit(TIMER1);
 8006306:	40000537          	lui	a0,0x40000
 800630a:	ffffb097          	auipc	ra,0xffffb
 800630e:	0d4080e7          	jalr	212(ra) # 80013de <timer_deinit>

    /* initialize timer configuration struct */
    timer_struct_para_init(&timer_initpara);
 8006312:	0808                	addi	a0,sp,16
 8006314:	ffffb097          	auipc	ra,0xffffb
 8006318:	19c080e7          	jalr	412(ra) # 80014b0 <timer_struct_para_init>
    /* TIMER1 configuration */
    /* Frequency = core clock / ((1+prescaler)*period) = 108MHz / (2*54000) = 1KHz */
    timer_initpara.prescaler         = 1;
    timer_initpara.alignedmode       = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
    timer_initpara.period            = SystemCoreClock/2000;
 800631c:	20000437          	lui	s0,0x20000
 8006320:	4e842783          	lw	a5,1256(s0) # 200004e8 <SystemCoreClock>
 8006324:	7d000713          	li	a4,2000
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
    timer_init(TIMER1, &timer_initpara);
 8006328:	080c                	addi	a1,sp,16
    timer_initpara.period            = SystemCoreClock/2000;
 800632a:	02e7d7b3          	divu	a5,a5,a4
    timer_initpara.prescaler         = 1;
 800632e:	4485                	li	s1,1
    timer_init(TIMER1, &timer_initpara);
 8006330:	40000537          	lui	a0,0x40000
    timer_initpara.prescaler         = 1;
 8006334:	c826                	sw	s1,16(sp)
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
 8006336:	00011a23          	sh	zero,20(sp)
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
 800633a:	00011e23          	sh	zero,28(sp)
    timer_initpara.period            = SystemCoreClock/2000;
 800633e:	cc3e                	sw	a5,24(sp)
    timer_init(TIMER1, &timer_initpara);
 8006340:	ffffb097          	auipc	ra,0xffffb
 8006344:	188080e7          	jalr	392(ra) # 80014c8 <timer_init>

    /* initialize TIMER channel output parameter struct */
    timer_channel_output_struct_para_init(&timer_ocinitpara);
 8006348:	0048                	addi	a0,sp,4
 800634a:	ffffb097          	auipc	ra,0xffffb
 800634e:	216080e7          	jalr	534(ra) # 8001560 <timer_channel_output_struct_para_init>

    /* Set the channel configuration */
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 8006352:	0050                	addi	a2,sp,4
 8006354:	4581                	li	a1,0
 8006356:	40000537          	lui	a0,0x40000
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
 800635a:	00911223          	sh	s1,4(sp)
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
 800635e:	00011423          	sh	zero,8(sp)
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8006362:	00011623          	sh	zero,12(sp)
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 8006366:	ffffb097          	auipc	ra,0xffffb
 800636a:	214080e7          	jalr	532(ra) # 800157a <timer_channel_output_config>
    
    /* CH0 configuration in OC timing mode */
    timer_channel_output_pulse_value_config(TIMER1, TIMER_CH_0, SystemCoreClock/4000);
 800636e:	4e842603          	lw	a2,1256(s0)
 8006372:	6785                	lui	a5,0x1
 8006374:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8006378:	02f65633          	divu	a2,a2,a5
 800637c:	4581                	li	a1,0
 800637e:	40000537          	lui	a0,0x40000
 8006382:	ffffb097          	auipc	ra,0xffffb
 8006386:	48a080e7          	jalr	1162(ra) # 800180c <timer_channel_output_pulse_value_config>
    timer_channel_output_mode_config(TIMER1, TIMER_CH_0, TIMER_OC_MODE_TIMING);
 800638a:	4601                	li	a2,0
 800638c:	4581                	li	a1,0
 800638e:	40000537          	lui	a0,0x40000
 8006392:	ffffb097          	auipc	ra,0xffffb
 8006396:	424080e7          	jalr	1060(ra) # 80017b6 <timer_channel_output_mode_config>
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_0, TIMER_OC_SHADOW_DISABLE);
 800639a:	4601                	li	a2,0
 800639c:	4581                	li	a1,0
 800639e:	40000537          	lui	a0,0x40000
 80063a2:	ffffb097          	auipc	ra,0xffffb
 80063a6:	490080e7          	jalr	1168(ra) # 8001832 <timer_channel_output_shadow_config>

    /* Enable interrupt on the channel */
    timer_interrupt_enable(TIMER1, TIMER_INT_CH0);
 80063aa:	4589                	li	a1,2
 80063ac:	40000537          	lui	a0,0x40000
 80063b0:	ffffb097          	auipc	ra,0xffffb
 80063b4:	4d8080e7          	jalr	1240(ra) # 8001888 <timer_interrupt_enable>
    /* Make sure interrupt flag is clear */
    timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 80063b8:	4589                	li	a1,2
 80063ba:	40000537          	lui	a0,0x40000
 80063be:	ffffb097          	auipc	ra,0xffffb
 80063c2:	4f0080e7          	jalr	1264(ra) # 80018ae <timer_interrupt_flag_clear>

    /* Start the timer */
    timer_enable(TIMER1);
 80063c6:	40000537          	lui	a0,0x40000
 80063ca:	ffffb097          	auipc	ra,0xffffb
 80063ce:	18c080e7          	jalr	396(ra) # 8001556 <timer_enable>
}
 80063d2:	50b2                	lw	ra,44(sp)
 80063d4:	5422                	lw	s0,40(sp)
 80063d6:	5492                	lw	s1,36(sp)
 80063d8:	6145                	addi	sp,sp,48
 80063da:	8082                	ret

080063dc <formatTime>:

void formatTime(char *output, int minutes, int seconds, int milliseconds) {
    // Format minutes
    output[0] = (minutes / 10) + '0';
 80063dc:	47a9                	li	a5,10
 80063de:	02f5c733          	div	a4,a1,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
    output[8] = (milliseconds % 10) + '0';

    // Add a semicolon and null terminator
    output[9] = ';';
    output[10] = '\0';
 80063e2:	00050523          	sb	zero,10(a0) # 4000000a <_sp+0x1fff800a>
    output[0] = (minutes / 10) + '0';
 80063e6:	03070713          	addi	a4,a4,48
 80063ea:	00e50023          	sb	a4,0(a0)
    output[3] = (seconds / 10) + '0';
 80063ee:	02f64733          	div	a4,a2,a5
 80063f2:	03070713          	addi	a4,a4,48
 80063f6:	00e501a3          	sb	a4,3(a0)
    output[6] = ((milliseconds / 100) % 10) + '0';
 80063fa:	06400713          	li	a4,100
 80063fe:	02e6c733          	div	a4,a3,a4
 8006402:	02f76733          	rem	a4,a4,a5
 8006406:	03070713          	addi	a4,a4,48
 800640a:	00e50323          	sb	a4,6(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 800640e:	02f6c733          	div	a4,a3,a5
    output[1] = (minutes % 10) + '0';
 8006412:	02f5e5b3          	rem	a1,a1,a5
    output[4] = (seconds % 10) + '0';
 8006416:	02f66633          	rem	a2,a2,a5
    output[1] = (minutes % 10) + '0';
 800641a:	03058593          	addi	a1,a1,48
 800641e:	00b500a3          	sb	a1,1(a0)
    output[2] = '.';
 8006422:	02e00593          	li	a1,46
 8006426:	00b50123          	sb	a1,2(a0)
    output[5] = '.';
 800642a:	00b502a3          	sb	a1,5(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 800642e:	02f76733          	rem	a4,a4,a5
    output[4] = (seconds % 10) + '0';
 8006432:	03060613          	addi	a2,a2,48
 8006436:	00c50223          	sb	a2,4(a0)
    output[8] = (milliseconds % 10) + '0';
 800643a:	02f6e6b3          	rem	a3,a3,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
 800643e:	03070713          	addi	a4,a4,48
    output[9] = ';';
 8006442:	03b00793          	li	a5,59
    output[7] = ((milliseconds / 10) % 10) + '0';
 8006446:	00e503a3          	sb	a4,7(a0)
    output[9] = ';';
 800644a:	00f504a3          	sb	a5,9(a0)
    output[8] = (milliseconds % 10) + '0';
 800644e:	03068693          	addi	a3,a3,48
 8006452:	00d50423          	sb	a3,8(a0)
}
 8006456:	8082                	ret

08006458 <int_to_string>:

int int_to_string(char *string, int integer){
 8006458:	87aa                	mv	a5,a0
    int i = 0;
    int divider = 1000;
    if(integer < 0){
 800645a:	0605d363          	bgez	a1,80064c0 <int_to_string+0x68>
        string[i++] = '-';
 800645e:	02d00713          	li	a4,45
 8006462:	00e50023          	sb	a4,0(a0)
        integer = -integer;
 8006466:	40b005b3          	neg	a1,a1
        string[i++] = '-';
 800646a:	4705                	li	a4,1
    int divider = 1000;
 800646c:	3e800693          	li	a3,1000
        string[i++] = ';';
        string[i] = '\0';
        return i;
    }
    int og_num = integer;
    while (integer >= divider * 10) {
 8006470:	4529                	li	a0,10
 8006472:	02a68633          	mul	a2,a3,a0
 8006476:	06c5d363          	bge	a1,a2,80064dc <int_to_string+0x84>
 800647a:	852e                	mv	a0,a1
        divider *= 10; 
    }

    while(divider){
        char digit = (integer/divider)+ '0';
        if(digit != '0' || og_num > integer){
 800647c:	03000893          	li	a7,48
            string[i++] = digit; 
        }
        
        integer %= divider;
        divider /= 10;
 8006480:	4829                	li	a6,10
        char digit = (integer/divider)+ '0';
 8006482:	02d54633          	div	a2,a0,a3
 8006486:	03060613          	addi	a2,a2,48
 800648a:	0ff67613          	andi	a2,a2,255
        if(digit != '0' || og_num > integer){
 800648e:	01161463          	bne	a2,a7,8006496 <int_to_string+0x3e>
 8006492:	00b55763          	bge	a0,a1,80064a0 <int_to_string+0x48>
            string[i++] = digit; 
 8006496:	00e78333          	add	t1,a5,a4
 800649a:	00c30023          	sb	a2,0(t1)
 800649e:	0705                	addi	a4,a4,1
        integer %= divider;
 80064a0:	02d56533          	rem	a0,a0,a3
        divider /= 10;
 80064a4:	0306c6b3          	div	a3,a3,a6
    while(divider){
 80064a8:	fee9                	bnez	a3,8006482 <int_to_string+0x2a>
    }
    string[i++] = ';';
 80064aa:	00170513          	addi	a0,a4,1
 80064ae:	03b00693          	li	a3,59
 80064b2:	973e                	add	a4,a4,a5
 80064b4:	00d70023          	sb	a3,0(a4)
    string[i] = '\0';
 80064b8:	97aa                	add	a5,a5,a0
 80064ba:	00078023          	sb	zero,0(a5)
    return i;
}
 80064be:	8082                	ret
    int i = 0;
 80064c0:	4701                	li	a4,0
    }else if(integer == 0){
 80064c2:	f5cd                	bnez	a1,800646c <int_to_string+0x14>
        string[i++] = '0';
 80064c4:	03000713          	li	a4,48
 80064c8:	00e50023          	sb	a4,0(a0)
        string[i++] = ';';
 80064cc:	03b00713          	li	a4,59
 80064d0:	00e500a3          	sb	a4,1(a0)
        string[i] = '\0';
 80064d4:	00050123          	sb	zero,2(a0)
        return i;
 80064d8:	4509                	li	a0,2
 80064da:	8082                	ret
 80064dc:	86b2                	mv	a3,a2
 80064de:	bf51                	j	8006472 <int_to_string+0x1a>

080064e0 <append_int_to_string>:

int append_int_to_string(char *string, int integer){
 80064e0:	7179                	addi	sp,sp,-48
 80064e2:	d422                	sw	s0,40(sp)
 80064e4:	842a                	mv	s0,a0
    char temp[20] = {'\0'};
    int_to_string(temp, integer);
 80064e6:	0068                	addi	a0,sp,12
int append_int_to_string(char *string, int integer){
 80064e8:	d606                	sw	ra,44(sp)
    char temp[20] = {'\0'};
 80064ea:	c602                	sw	zero,12(sp)
 80064ec:	c802                	sw	zero,16(sp)
 80064ee:	ca02                	sw	zero,20(sp)
 80064f0:	cc02                	sw	zero,24(sp)
 80064f2:	ce02                	sw	zero,28(sp)
    int_to_string(temp, integer);
 80064f4:	00000097          	auipc	ra,0x0
 80064f8:	f64080e7          	jalr	-156(ra) # 8006458 <int_to_string>
    int len = fuseStrings(string, temp);
 80064fc:	006c                	addi	a1,sp,12
 80064fe:	8522                	mv	a0,s0
 8006500:	ffffe097          	auipc	ra,0xffffe
 8006504:	15a080e7          	jalr	346(ra) # 800465a <fuseStrings>
    return len;
}
 8006508:	50b2                	lw	ra,44(sp)
 800650a:	5422                	lw	s0,40(sp)
 800650c:	6145                	addi	sp,sp,48
 800650e:	8082                	ret

08006510 <append_newLine>:

void append_newLine(char *string, int length) {
    string[length-1] = '\n';
 8006510:	95aa                	add	a1,a1,a0
 8006512:	47a9                	li	a5,10
 8006514:	fef58fa3          	sb	a5,-1(a1)
    string[length] = '\0'; // Add a null terminator at the new end
 8006518:	00058023          	sb	zero,0(a1)
}
 800651c:	8082                	ret

0800651e <millis>:

int millis(void) {
 800651e:	1141                	addi	sp,sp,-16
 8006520:	c606                	sw	ra,12(sp)
 8006522:	c422                	sw	s0,8(sp)
 8006524:	c226                	sw	s1,4(sp)
    uint64_t mtime = get_timer_value();
 8006526:	ffffc097          	auipc	ra,0xffffc
 800652a:	864080e7          	jalr	-1948(ra) # 8001d8a <get_timer_value>
    return ((mtime * 4000.0) / SystemCoreClock); // Adjusted for seconds and milliseconds
 800652e:	00001097          	auipc	ra,0x1
 8006532:	1a8080e7          	jalr	424(ra) # 80076d6 <__floatundidf>
 8006536:	080007b7          	lui	a5,0x8000
 800653a:	4707a603          	lw	a2,1136(a5) # 8000470 <_std_dev_req+0xe0>
 800653e:	4747a683          	lw	a3,1140(a5)
 8006542:	00001097          	auipc	ra,0x1
 8006546:	c1e080e7          	jalr	-994(ra) # 8007160 <__muldf3>
 800654a:	200007b7          	lui	a5,0x20000
 800654e:	842a                	mv	s0,a0
 8006550:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8006554:	84ae                	mv	s1,a1
 8006556:	00001097          	auipc	ra,0x1
 800655a:	12a080e7          	jalr	298(ra) # 8007680 <__floatunsidf>
 800655e:	862a                	mv	a2,a0
 8006560:	86ae                	mv	a3,a1
 8006562:	8522                	mv	a0,s0
 8006564:	85a6                	mv	a1,s1
 8006566:	00000097          	auipc	ra,0x0
 800656a:	610080e7          	jalr	1552(ra) # 8006b76 <__divdf3>
 800656e:	00001097          	auipc	ra,0x1
 8006572:	03e080e7          	jalr	62(ra) # 80075ac <__fixdfsi>
}
 8006576:	40b2                	lw	ra,12(sp)
 8006578:	4422                	lw	s0,8(sp)
 800657a:	4492                	lw	s1,4(sp)
 800657c:	0141                	addi	sp,sp,16
 800657e:	8082                	ret

08006580 <init_mpu>:

void init_mpu(void){
 8006580:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 8006582:	60300513          	li	a0,1539
void init_mpu(void){
 8006586:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8006588:	ffffb097          	auipc	ra,0xffffb
 800658c:	c1a080e7          	jalr	-998(ra) # 80011a2 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_I2C0);
 8006590:	71500513          	li	a0,1813
 8006594:	ffffb097          	auipc	ra,0xffffb
 8006598:	c0e080e7          	jalr	-1010(ra) # 80011a2 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7); //led?
 800659c:	40011537          	lui	a0,0x40011
 80065a0:	0c000693          	li	a3,192
 80065a4:	460d                	li	a2,3
 80065a6:	45f1                	li	a1,28
 80065a8:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80065ac:	ffffb097          	auipc	ra,0xffffb
 80065b0:	94e080e7          	jalr	-1714(ra) # 8000efa <gpio_init>

    mpu6500_install(I2C0);
 80065b4:	40005537          	lui	a0,0x40005
 80065b8:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 80065bc:	ffffe097          	auipc	ra,0xffffe
 80065c0:	d6a080e7          	jalr	-662(ra) # 8004326 <mpu6500_install>

    delay_1ms(100);   
}
 80065c4:	40b2                	lw	ra,12(sp)
    delay_1ms(100);   
 80065c6:	06400513          	li	a0,100
}
 80065ca:	0141                	addi	sp,sp,16
    delay_1ms(100);   
 80065cc:	ffffe317          	auipc	t1,0xffffe
 80065d0:	1da30067          	jr	474(t1) # 80047a6 <delay_1ms>

080065d4 <init_ADC_EMG>:

void init_ADC_EMG(){
 80065d4:	1141                	addi	sp,sp,-16
    /* enable GPIOA clock */
    rcu_periph_clock_enable(RCU_GPIOA);
 80065d6:	60200513          	li	a0,1538
void init_ADC_EMG(){
 80065da:	c606                	sw	ra,12(sp)
 80065dc:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_GPIOA);
 80065de:	ffffb097          	auipc	ra,0xffffb
 80065e2:	bc4080e7          	jalr	-1084(ra) # 80011a2 <rcu_periph_clock_enable>
    /* Initialize the GPIO that will be used for ADC. A0-A7 and B0-B1 are connected to an ADC-channel each. */
    gpio_init(ANALOG_PORT, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, ANALOG_PIN); //A3
 80065e6:	40011537          	lui	a0,0x40011
 80065ea:	46a1                	li	a3,8
 80065ec:	460d                	li	a2,3
 80065ee:	4581                	li	a1,0
 80065f0:	80050513          	addi	a0,a0,-2048 # 40010800 <_sp+0x20008800>
 80065f4:	ffffb097          	auipc	ra,0xffffb
 80065f8:	906080e7          	jalr	-1786(ra) # 8000efa <gpio_init>
    /* enable ADC clock */
    rcu_periph_clock_enable(RCU_ADC0);
 80065fc:	60900513          	li	a0,1545
 8006600:	ffffb097          	auipc	ra,0xffffb
 8006604:	ba2080e7          	jalr	-1118(ra) # 80011a2 <rcu_periph_clock_enable>

    /* Select the clock frequency that will be used for the ADC core. Refer to README for more info on what to select. */
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8006608:	450d                	li	a0,3

    /* Reset ADC0 configuration. GD32VF103 has two internal ADCs (ADC0, ADC1). */
    adc_deinit(ADC0);
 800660a:	40012437          	lui	s0,0x40012
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 800660e:	ffffb097          	auipc	ra,0xffffb
 8006612:	be0080e7          	jalr	-1056(ra) # 80011ee <rcu_adc_clock_config>
    adc_deinit(ADC0);
 8006616:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 800661a:	ffffa097          	auipc	ra,0xffffa
 800661e:	42e080e7          	jalr	1070(ra) # 8000a48 <adc_deinit>

    /* Set the ADCs to work independently. Refer to the manual for the different parallel modes available. */
    adc_mode_config(ADC_MODE_FREE);
 8006622:	4501                	li	a0,0
 8006624:	ffffa097          	auipc	ra,0xffffa
 8006628:	474080e7          	jalr	1140(ra) # 8000a98 <adc_mode_config>

    /* Set the conversion mode to continuous. Continious mode lets the ADC take measurements continiously without
       an external trigger. */
    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);
 800662c:	4605                	li	a2,1
 800662e:	40040513          	addi	a0,s0,1024
 8006632:	4589                	li	a1,2
 8006634:	ffffa097          	auipc	ra,0xffffa
 8006638:	484080e7          	jalr	1156(ra) # 8000ab8 <adc_special_function_config>

    /* Sets where padding is applied to the measurement. Data alignment right puts padding bits above MSB */
    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);
 800663c:	40040513          	addi	a0,s0,1024
 8006640:	4581                	li	a1,0
 8006642:	ffffa097          	auipc	ra,0xffffa
 8006646:	4be080e7          	jalr	1214(ra) # 8000b00 <adc_data_alignment_config>

    /* Selects how many channels to convert each time. This can be used to "queue" multiple channels. Here just one channel is selected. */
    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, 1);
 800664a:	40040513          	addi	a0,s0,1024
 800664e:	4605                	li	a2,1
 8006650:	4585                	li	a1,1
 8006652:	ffffa097          	auipc	ra,0xffffa
 8006656:	4fa080e7          	jalr	1274(ra) # 8000b4c <adc_channel_length_config>

    /* Set the channel as the first "queued" conversion each time the ADC is activated. */
    adc_regular_channel_config(ADC0, 0, ANALOG_CHANNEL, ADC_SAMPLETIME_28POINT5);
 800665a:	468d                	li	a3,3
 800665c:	40040513          	addi	a0,s0,1024
 8006660:	460d                	li	a2,3
 8006662:	4581                	li	a1,0
 8006664:	ffffa097          	auipc	ra,0xffffa
 8006668:	532080e7          	jalr	1330(ra) # 8000b96 <adc_regular_channel_config>

    /* Since we are using continious conversion we do not want to use an external trigger. */
    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_EXTTRIG_REGULAR_NONE);
 800666c:	40040513          	addi	a0,s0,1024
 8006670:	000e0637          	lui	a2,0xe0
 8006674:	4585                	li	a1,1
 8006676:	ffffa097          	auipc	ra,0xffffa
 800667a:	5de080e7          	jalr	1502(ra) # 8000c54 <adc_external_trigger_source_config>
    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);
 800667e:	4585                	li	a1,1
 8006680:	4605                	li	a2,1
 8006682:	40040513          	addi	a0,s0,1024
 8006686:	ffffa097          	auipc	ra,0xffffa
 800668a:	602080e7          	jalr	1538(ra) # 8000c88 <adc_external_trigger_config>

    /* Enable ADC.*/
    adc_enable(ADC0);
 800668e:	40040513          	addi	a0,s0,1024
 8006692:	ffffa097          	auipc	ra,0xffffa
 8006696:	488080e7          	jalr	1160(ra) # 8000b1a <adc_enable>

    /* Let ADC stabilize */
    delay_1ms(1);
 800669a:	4505                	li	a0,1
 800669c:	ffffe097          	auipc	ra,0xffffe
 80066a0:	10a080e7          	jalr	266(ra) # 80047a6 <delay_1ms>

    /* Calibrates the ADC against an internal source. */
    adc_calibration_enable(ADC0);
 80066a4:	40040513          	addi	a0,s0,1024
 80066a8:	ffffa097          	auipc	ra,0xffffa
 80066ac:	482080e7          	jalr	1154(ra) # 8000b2a <adc_calibration_enable>

    /* Start converting */
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066b0:	40040513          	addi	a0,s0,1024
 80066b4:	4422                	lw	s0,8(sp)
 80066b6:	40b2                	lw	ra,12(sp)
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066b8:	4585                	li	a1,1
 80066ba:	0141                	addi	sp,sp,16
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066bc:	ffffa317          	auipc	t1,0xffffa
 80066c0:	60630067          	jr	1542(t1) # 8000cc2 <adc_software_trigger_enable>

080066c4 <init_radio>:


char rx_radio_buffer[1024] = {'\0'};
char tx_radio_buffer[1024] = {'\0'};

void init_radio(){
 80066c4:	1141                	addi	sp,sp,-16
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 80066c6:	50000513          	li	a0,1280
void init_radio(){
 80066ca:	c606                	sw	ra,12(sp)
 80066cc:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 80066ce:	ffffb097          	auipc	ra,0xffffb
 80066d2:	ad4080e7          	jalr	-1324(ra) # 80011a2 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOB);
 80066d6:	60300513          	li	a0,1539
 80066da:	ffffb097          	auipc	ra,0xffffb
 80066de:	ac8080e7          	jalr	-1336(ra) # 80011a2 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART2);
 80066e2:	71200513          	li	a0,1810
 80066e6:	ffffb097          	auipc	ra,0xffffb
 80066ea:	abc080e7          	jalr	-1348(ra) # 80011a2 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_10); //PP for no half duplex
 80066ee:	40011437          	lui	s0,0x40011
 80066f2:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 80066f6:	40000693          	li	a3,1024
 80066fa:	460d                	li	a2,3
 80066fc:	45e1                	li	a1,24
 80066fe:	ffffa097          	auipc	ra,0xffffa
 8006702:	7fc080e7          	jalr	2044(ra) # 8000efa <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
 8006706:	6685                	lui	a3,0x1
 8006708:	80068693          	addi	a3,a3,-2048 # 800 <__dbg_stack_size+0x800>
 800670c:	460d                	li	a2,3
 800670e:	4591                	li	a1,4
 8006710:	c0040513          	addi	a0,s0,-1024
 8006714:	ffffa097          	auipc	ra,0xffffa
 8006718:	7e6080e7          	jalr	2022(ra) # 8000efa <gpio_init>

    /* USART configure */
    usart_deinit(USART2);
 800671c:	40005437          	lui	s0,0x40005
 8006720:	80040513          	addi	a0,s0,-2048 # 40004800 <_sp+0x1fffc800>
 8006724:	ffffb097          	auipc	ra,0xffffb
 8006728:	192080e7          	jalr	402(ra) # 80018b6 <usart_deinit>
    usart_baudrate_set(USART2, 1200);
 800672c:	80040513          	addi	a0,s0,-2048
 8006730:	4b000593          	li	a1,1200
 8006734:	ffffb097          	auipc	ra,0xffffb
 8006738:	224080e7          	jalr	548(ra) # 8001958 <usart_baudrate_set>
    usart_word_length_set(USART2, USART_WL_8BIT);
 800673c:	80040513          	addi	a0,s0,-2048
 8006740:	4581                	li	a1,0
 8006742:	ffffb097          	auipc	ra,0xffffb
 8006746:	292080e7          	jalr	658(ra) # 80019d4 <usart_word_length_set>
    usart_stop_bit_set(USART2, USART_STB_1BIT);
 800674a:	80040513          	addi	a0,s0,-2048
 800674e:	4581                	li	a1,0
 8006750:	ffffb097          	auipc	ra,0xffffb
 8006754:	296080e7          	jalr	662(ra) # 80019e6 <usart_stop_bit_set>
    usart_parity_config(USART2, USART_PM_NONE);
 8006758:	80040513          	addi	a0,s0,-2048
 800675c:	4581                	li	a1,0
 800675e:	ffffb097          	auipc	ra,0xffffb
 8006762:	266080e7          	jalr	614(ra) # 80019c4 <usart_parity_config>
    usart_hardware_flow_rts_config(USART2, USART_RTS_DISABLE);
 8006766:	80040513          	addi	a0,s0,-2048
 800676a:	4581                	li	a1,0
 800676c:	ffffb097          	auipc	ra,0xffffb
 8006770:	2b2080e7          	jalr	690(ra) # 8001a1e <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART2, USART_CTS_DISABLE);
 8006774:	80040513          	addi	a0,s0,-2048
 8006778:	4581                	li	a1,0
 800677a:	ffffb097          	auipc	ra,0xffffb
 800677e:	2b0080e7          	jalr	688(ra) # 8001a2a <usart_hardware_flow_cts_config>
    usart_receive_config(USART2, USART_RECEIVE_ENABLE);
 8006782:	80040513          	addi	a0,s0,-2048
 8006786:	4591                	li	a1,4
 8006788:	ffffb097          	auipc	ra,0xffffb
 800678c:	284080e7          	jalr	644(ra) # 8001a0c <usart_receive_config>
    usart_transmit_config(USART2, USART_TRANSMIT_ENABLE);
 8006790:	45a1                	li	a1,8
 8006792:	80040513          	addi	a0,s0,-2048
 8006796:	ffffb097          	auipc	ra,0xffffb
 800679a:	26c080e7          	jalr	620(ra) # 8001a02 <usart_transmit_config>

    eclic_global_interrupt_enable();
 800679e:	ffffa097          	auipc	ra,0xffffa
 80067a2:	70a080e7          	jalr	1802(ra) # 8000ea8 <eclic_global_interrupt_enable>
    eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);
 80067a6:	450d                	li	a0,3
 80067a8:	ffffa097          	auipc	ra,0xffffa
 80067ac:	70c080e7          	jalr	1804(ra) # 8000eb4 <eclic_priority_group_set>
    eclic_irq_enable(USART2_IRQn, 1, 0);
 80067b0:	4601                	li	a2,0
 80067b2:	4585                	li	a1,1
 80067b4:	03a00513          	li	a0,58
 80067b8:	ffffa097          	auipc	ra,0xffffa
 80067bc:	704080e7          	jalr	1796(ra) # 8000ebc <eclic_irq_enable>

    usart_interrupt_enable(USART2, USART_INT_RBNE); 
 80067c0:	80040513          	addi	a0,s0,-2048
 80067c4:	30500593          	li	a1,773
 80067c8:	ffffb097          	auipc	ra,0xffffb
 80067cc:	286080e7          	jalr	646(ra) # 8001a4e <usart_interrupt_enable>

    usart_enable(USART2);
 80067d0:	80040513          	addi	a0,s0,-2048
//        /* configure DMA mode */
//    dma_circulation_disable(DMA0, DMA_CH2);
//        /* enable DMA channel4 */
//    dma_channel_enable(DMA0, DMA_CH2); 

}
 80067d4:	4422                	lw	s0,8(sp)
 80067d6:	40b2                	lw	ra,12(sp)
 80067d8:	0141                	addi	sp,sp,16
    usart_enable(USART2);
 80067da:	ffffb317          	auipc	t1,0xffffb
 80067de:	21e30067          	jr	542(t1) # 80019f8 <usart_enable>

080067e2 <enter_command_mode>:
        output[len - i - 1] = input[i + 1];
    }
    output[len] = '\0';
}

void enter_command_mode(void){
 80067e2:	1101                	addi	sp,sp,-32
    usb_delay_1ms(1000);
 80067e4:	3e800513          	li	a0,1000
void enter_command_mode(void){
 80067e8:	ce06                	sw	ra,28(sp)
    usb_delay_1ms(1000);
 80067ea:	fffff097          	auipc	ra,0xfffff
 80067ee:	aa4080e7          	jalr	-1372(ra) # 800528e <usb_delay_1ms>
    char command_mode[] = "$$$";
 80067f2:	002427b7          	lui	a5,0x242
 80067f6:	42478793          	addi	a5,a5,1060 # 242424 <__stack_size+0x241424>
    lio_send_bt(command_mode, 3);
 80067fa:	458d                	li	a1,3
 80067fc:	0068                	addi	a0,sp,12
    char command_mode[] = "$$$";
 80067fe:	c63e                	sw	a5,12(sp)
    lio_send_bt(command_mode, 3);
 8006800:	00000097          	auipc	ra,0x0
 8006804:	19e080e7          	jalr	414(ra) # 800699e <lio_send_bt>
    usb_delay_1ms(1000);
 8006808:	3e800513          	li	a0,1000
 800680c:	fffff097          	auipc	ra,0xfffff
 8006810:	a82080e7          	jalr	-1406(ra) # 800528e <usb_delay_1ms>
    command_mode[0] = '\r';
 8006814:	47b5                	li	a5,13
    lio_send_bt(command_mode, 1);
 8006816:	0068                	addi	a0,sp,12
 8006818:	4585                	li	a1,1
    command_mode[0] = '\r';
 800681a:	00f10623          	sb	a5,12(sp)
    lio_send_bt(command_mode, 1);
 800681e:	00000097          	auipc	ra,0x0
 8006822:	180080e7          	jalr	384(ra) # 800699e <lio_send_bt>
}
 8006826:	40f2                	lw	ra,28(sp)
 8006828:	6105                	addi	sp,sp,32
 800682a:	8082                	ret

0800682c <lio_init_bt>:

void lio_init_bt(){
 800682c:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 800682e:	50000513          	li	a0,1280
void lio_init_bt(){
 8006832:	d606                	sw	ra,44(sp)
 8006834:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8006836:	ffffb097          	auipc	ra,0xffffb
 800683a:	96c080e7          	jalr	-1684(ra) # 80011a2 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOA);
 800683e:	60200513          	li	a0,1538
 8006842:	ffffb097          	auipc	ra,0xffffb
 8006846:	960080e7          	jalr	-1696(ra) # 80011a2 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART0);
 800684a:	60e00513          	li	a0,1550
 800684e:	ffffb097          	auipc	ra,0xffffb
 8006852:	954080e7          	jalr	-1708(ra) # 80011a2 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);
 8006856:	40011437          	lui	s0,0x40011
 800685a:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 800685e:	20000693          	li	a3,512
 8006862:	460d                	li	a2,3
 8006864:	45e1                	li	a1,24
 8006866:	ffffa097          	auipc	ra,0xffffa
 800686a:	694080e7          	jalr	1684(ra) # 8000efa <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);
 800686e:	40000693          	li	a3,1024
 8006872:	460d                	li	a2,3
 8006874:	4591                	li	a1,4
 8006876:	80040513          	addi	a0,s0,-2048
 800687a:	ffffa097          	auipc	ra,0xffffa
 800687e:	680080e7          	jalr	1664(ra) # 8000efa <gpio_init>

    /* USART configure */
    usart_deinit(USART0);
 8006882:	40014437          	lui	s0,0x40014
 8006886:	80040513          	addi	a0,s0,-2048 # 40013800 <_sp+0x2000b800>
 800688a:	ffffb097          	auipc	ra,0xffffb
 800688e:	02c080e7          	jalr	44(ra) # 80018b6 <usart_deinit>
    usart_baudrate_set(USART0, 115200U);
 8006892:	65f1                	lui	a1,0x1c
 8006894:	80040513          	addi	a0,s0,-2048
 8006898:	20058593          	addi	a1,a1,512 # 1c200 <__stack_size+0x1b200>
 800689c:	ffffb097          	auipc	ra,0xffffb
 80068a0:	0bc080e7          	jalr	188(ra) # 8001958 <usart_baudrate_set>
    usart_word_length_set(USART0, USART_WL_8BIT);
 80068a4:	80040513          	addi	a0,s0,-2048
 80068a8:	4581                	li	a1,0
 80068aa:	ffffb097          	auipc	ra,0xffffb
 80068ae:	12a080e7          	jalr	298(ra) # 80019d4 <usart_word_length_set>
    usart_stop_bit_set(USART0, USART_STB_1BIT);
 80068b2:	80040513          	addi	a0,s0,-2048
 80068b6:	4581                	li	a1,0
 80068b8:	ffffb097          	auipc	ra,0xffffb
 80068bc:	12e080e7          	jalr	302(ra) # 80019e6 <usart_stop_bit_set>
    usart_parity_config(USART0, USART_PM_NONE);
 80068c0:	80040513          	addi	a0,s0,-2048
 80068c4:	4581                	li	a1,0
 80068c6:	ffffb097          	auipc	ra,0xffffb
 80068ca:	0fe080e7          	jalr	254(ra) # 80019c4 <usart_parity_config>
    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);
 80068ce:	80040513          	addi	a0,s0,-2048
 80068d2:	4581                	li	a1,0
 80068d4:	ffffb097          	auipc	ra,0xffffb
 80068d8:	14a080e7          	jalr	330(ra) # 8001a1e <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);
 80068dc:	80040513          	addi	a0,s0,-2048
 80068e0:	4581                	li	a1,0
 80068e2:	ffffb097          	auipc	ra,0xffffb
 80068e6:	148080e7          	jalr	328(ra) # 8001a2a <usart_hardware_flow_cts_config>
    usart_receive_config(USART0, USART_RECEIVE_ENABLE);
 80068ea:	80040513          	addi	a0,s0,-2048
 80068ee:	4591                	li	a1,4
 80068f0:	ffffb097          	auipc	ra,0xffffb
 80068f4:	11c080e7          	jalr	284(ra) # 8001a0c <usart_receive_config>
    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);
 80068f8:	45a1                	li	a1,8
 80068fa:	80040513          	addi	a0,s0,-2048
 80068fe:	ffffb097          	auipc	ra,0xffffb
 8006902:	104080e7          	jalr	260(ra) # 8001a02 <usart_transmit_config>
    usart_enable(USART0);
 8006906:	80040513          	addi	a0,s0,-2048
 800690a:	ffffb097          	auipc	ra,0xffffb
 800690e:	0ee080e7          	jalr	238(ra) # 80019f8 <usart_enable>

    usart_dma_transmit_config(USART0, USART_DENT_ENABLE);
 8006912:	80040513          	addi	a0,s0,-2048
 8006916:	08000593          	li	a1,128
 800691a:	ffffb097          	auipc	ra,0xffffb
 800691e:	128080e7          	jalr	296(ra) # 8001a42 <usart_dma_transmit_config>
    usart_dma_receive_config(USART0, USART_DENR_ENABLE);
 8006922:	80040513          	addi	a0,s0,-2048
 8006926:	04000593          	li	a1,64
 800692a:	ffffb097          	auipc	ra,0xffffb
 800692e:	10c080e7          	jalr	268(ra) # 8001a36 <usart_dma_receive_config>

   

    dma_deinit(DMA0, DMA_CH4);
 8006932:	4591                	li	a1,4
 8006934:	40020537          	lui	a0,0x40020
 8006938:	ffffa097          	auipc	ra,0xffffa
 800693c:	3aa080e7          	jalr	938(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 8006940:	200007b7          	lui	a5,0x20000
 8006944:	56c78793          	addi	a5,a5,1388 # 2000056c <rx_dma_buffer>
 8006948:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 800694a:	40000793          	li	a5,1024
 800694e:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006950:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006952:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006954:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006956:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800695a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800695e:	4591                	li	a1,4
 8006960:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006964:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006968:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 800696a:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 800696c:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 800696e:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006972:	ffffa097          	auipc	ra,0xffffa
 8006976:	3b4080e7          	jalr	948(ra) # 8000d26 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH4);
 800697a:	4591                	li	a1,4
 800697c:	40020537          	lui	a0,0x40020
 8006980:	ffffa097          	auipc	ra,0xffffa
 8006984:	432080e7          	jalr	1074(ra) # 8000db2 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH4);
 8006988:	4591                	li	a1,4
 800698a:	40020537          	lui	a0,0x40020
 800698e:	ffffa097          	auipc	ra,0xffffa
 8006992:	44a080e7          	jalr	1098(ra) # 8000dd8 <dma_channel_enable>
}
 8006996:	50b2                	lw	ra,44(sp)
 8006998:	5422                	lw	s0,40(sp)
 800699a:	6145                	addi	sp,sp,48
 800699c:	8082                	ret

0800699e <lio_send_bt>:
        return i;
    }
    return 0;
}

size_t lio_send_bt(char* message, uint32_t size){
 800699e:	7179                	addi	sp,sp,-48
 80069a0:	d422                	sw	s0,40(sp)
 80069a2:	20001437          	lui	s0,0x20001
 80069a6:	d226                	sw	s1,36(sp)
 80069a8:	d606                	sw	ra,44(sp)
 80069aa:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 80069ac:	4781                	li	a5,0
 80069ae:	96c40413          	addi	s0,s0,-1684 # 2000096c <tx_dma_buffer>
 80069b2:	40000713          	li	a4,1024
 80069b6:	00978463          	beq	a5,s1,80069be <lio_send_bt+0x20>
 80069ba:	06e79663          	bne	a5,a4,8006a26 <lio_send_bt+0x88>
        tx_dma_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH3);
 80069be:	458d                	li	a1,3
 80069c0:	40020537          	lui	a0,0x40020
 80069c4:	ffffa097          	auipc	ra,0xffffa
 80069c8:	31e080e7          	jalr	798(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 80069cc:	400147b7          	lui	a5,0x40014
 80069d0:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 80069d4:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 80069d6:	678d                	lui	a5,0x3
 80069d8:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 80069da:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069de:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 80069e0:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069e4:	458d                	li	a1,3
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 80069e6:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069e8:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 80069ec:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
 80069f0:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 80069f2:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 80069f4:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 80069f6:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069f8:	ffffa097          	auipc	ra,0xffffa
 80069fc:	32e080e7          	jalr	814(ra) # 8000d26 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH3);
 8006a00:	458d                	li	a1,3
 8006a02:	40020537          	lui	a0,0x40020
 8006a06:	ffffa097          	auipc	ra,0xffffa
 8006a0a:	3ac080e7          	jalr	940(ra) # 8000db2 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH3);
 8006a0e:	40020537          	lui	a0,0x40020
 8006a12:	458d                	li	a1,3
 8006a14:	ffffa097          	auipc	ra,0xffffa
 8006a18:	3c4080e7          	jalr	964(ra) # 8000dd8 <dma_channel_enable>
}
 8006a1c:	50b2                	lw	ra,44(sp)
 8006a1e:	5422                	lw	s0,40(sp)
 8006a20:	5492                	lw	s1,36(sp)
 8006a22:	6145                	addi	sp,sp,48
 8006a24:	8082                	ret
        tx_dma_buffer[i] = message[i];
 8006a26:	00f506b3          	add	a3,a0,a5
 8006a2a:	0006c603          	lbu	a2,0(a3)
 8006a2e:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 8006a32:	0785                	addi	a5,a5,1
        tx_dma_buffer[i] = message[i];
 8006a34:	00c68023          	sb	a2,0(a3)
 8006a38:	bfbd                	j	80069b6 <lio_send_bt+0x18>

08006a3a <get_state>:

static int current_state = RUNNING;

int get_state(){
    return current_state;
};
 8006a3a:	200007b7          	lui	a5,0x20000
 8006a3e:	54c7a503          	lw	a0,1356(a5) # 2000054c <current_state>
 8006a42:	8082                	ret

08006a44 <set_state>:

void set_state(int state){
    current_state = state;
 8006a44:	200007b7          	lui	a5,0x20000
 8006a48:	54a7a623          	sw	a0,1356(a5) # 2000054c <current_state>
}
 8006a4c:	8082                	ret
	...

08006a80 <trap_entry>:
trap_entry:
  // Allocate the stack space
 // addi sp, sp, -19*REGBYTES

  // Save the caller saving registers (context)
  SAVE_CONTEXT
 8006a80:	715d                	addi	sp,sp,-80
 8006a82:	c006                	sw	ra,0(sp)
 8006a84:	c212                	sw	tp,4(sp)
 8006a86:	c416                	sw	t0,8(sp)
 8006a88:	c61a                	sw	t1,12(sp)
 8006a8a:	c81e                	sw	t2,16(sp)
 8006a8c:	ca2a                	sw	a0,20(sp)
 8006a8e:	cc2e                	sw	a1,24(sp)
 8006a90:	ce32                	sw	a2,28(sp)
 8006a92:	d036                	sw	a3,32(sp)
 8006a94:	d23a                	sw	a4,36(sp)
 8006a96:	d43e                	sw	a5,40(sp)
 8006a98:	d642                	sw	a6,44(sp)
 8006a9a:	d846                	sw	a7,48(sp)
 8006a9c:	da72                	sw	t3,52(sp)
 8006a9e:	dc76                	sw	t4,56(sp)
 8006aa0:	de7a                	sw	t5,60(sp)
 8006aa2:	c0fe                	sw	t6,64(sp)
  // Save the MEPC/Mstatus/Msubm reg
  SAVE_EPC_STATUS
 8006aa4:	341022f3          	csrr	t0,mepc
 8006aa8:	c096                	sw	t0,64(sp)
 8006aaa:	300022f3          	csrr	t0,mstatus
 8006aae:	c296                	sw	t0,68(sp)
 8006ab0:	7c4022f3          	csrr	t0,0x7c4
 8006ab4:	c496                	sw	t0,72(sp)

     // Set the function argument
  csrr a0, mcause
 8006ab6:	34202573          	csrr	a0,mcause
  mv a1, sp
 8006aba:	858a                	mv	a1,sp
     // Call the function
  call handle_trap
 8006abc:	ffffb097          	auipc	ra,0xffffb
 8006ac0:	416080e7          	jalr	1046(ra) # 8001ed2 <handle_trap>

  // Restore the MEPC/Mstatus/Msubm reg
  RESTORE_EPC_STATUS
 8006ac4:	4286                	lw	t0,64(sp)
 8006ac6:	34129073          	csrw	mepc,t0
 8006aca:	4296                	lw	t0,68(sp)
 8006acc:	30029073          	csrw	mstatus,t0
 8006ad0:	42a6                	lw	t0,72(sp)
 8006ad2:	7c429073          	csrw	0x7c4,t0
  // Restore the caller saving registers (context)
  RESTORE_CONTEXT
 8006ad6:	4082                	lw	ra,0(sp)
 8006ad8:	4212                	lw	tp,4(sp)
 8006ada:	42a2                	lw	t0,8(sp)
 8006adc:	4332                	lw	t1,12(sp)
 8006ade:	43c2                	lw	t2,16(sp)
 8006ae0:	4552                	lw	a0,20(sp)
 8006ae2:	45e2                	lw	a1,24(sp)
 8006ae4:	4672                	lw	a2,28(sp)
 8006ae6:	5682                	lw	a3,32(sp)
 8006ae8:	5712                	lw	a4,36(sp)
 8006aea:	57a2                	lw	a5,40(sp)
 8006aec:	5832                	lw	a6,44(sp)
 8006aee:	58c2                	lw	a7,48(sp)
 8006af0:	5e52                	lw	t3,52(sp)
 8006af2:	5ee2                	lw	t4,56(sp)
 8006af4:	5f72                	lw	t5,60(sp)
 8006af6:	4f86                	lw	t6,64(sp)
 8006af8:	6161                	addi	sp,sp,80

  // De-allocate the stack space
 // addi sp, sp, 19*REGBYTES
  // Return to regular code
  mret
 8006afa:	30200073          	mret
 8006afe:	0000                	unimp
 8006b00:	0000                	unimp
	...

08006b04 <irq_entry>:
  csrrw 
  sp, mscratch, 
  sp

  #endif
  SAVE_CONTEXT// Save 16 regs
 8006b04:	715d                	addi	sp,sp,-80
 8006b06:	c006                	sw	ra,0(sp)
 8006b08:	c212                	sw	tp,4(sp)
 8006b0a:	c416                	sw	t0,8(sp)
 8006b0c:	c61a                	sw	t1,12(sp)
 8006b0e:	c81e                	sw	t2,16(sp)
 8006b10:	ca2a                	sw	a0,20(sp)
 8006b12:	cc2e                	sw	a1,24(sp)
 8006b14:	ce32                	sw	a2,28(sp)
 8006b16:	d036                	sw	a3,32(sp)
 8006b18:	d23a                	sw	a4,36(sp)
 8006b1a:	d43e                	sw	a5,40(sp)
 8006b1c:	d642                	sw	a6,44(sp)
 8006b1e:	d846                	sw	a7,48(sp)
 8006b20:	da72                	sw	t3,52(sp)
 8006b22:	dc76                	sw	t4,56(sp)
 8006b24:	de7a                	sw	t5,60(sp)
 8006b26:	c0fe                	sw	t6,64(sp)

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 8006b28:	7ee8d073          	csrwi	0x7ee,17
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 8006b2c:	7ef95073          	csrwi	0x7ef,18
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 8006b30:	7eb9d073          	csrwi	0x7eb,19

08006b34 <service_loop>:
 
service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register 
  csrrw ra, CSR_JALMNXTI, ra 
 8006b34:	7ed090f3          	csrrw	ra,0x7ed,ra
  
  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts 
 8006b38:	30047073          	csrci	mstatus,8

  LOAD x5,  19*REGBYTES(sp)
 8006b3c:	42b6                	lw	t0,76(sp)
  csrw CSR_MSUBM, x5  
 8006b3e:	7c429073          	csrw	0x7c4,t0
  LOAD x5,  18*REGBYTES(sp)
 8006b42:	42a6                	lw	t0,72(sp)
  csrw CSR_MEPC, x5  
 8006b44:	34129073          	csrw	mepc,t0
  LOAD x5,  17*REGBYTES(sp)
 8006b48:	4296                	lw	t0,68(sp)
  csrw CSR_MCAUSE, x5  
 8006b4a:	34229073          	csrw	mcause,t0


  RESTORE_CONTEXT
 8006b4e:	4082                	lw	ra,0(sp)
 8006b50:	4212                	lw	tp,4(sp)
 8006b52:	42a2                	lw	t0,8(sp)
 8006b54:	4332                	lw	t1,12(sp)
 8006b56:	43c2                	lw	t2,16(sp)
 8006b58:	4552                	lw	a0,20(sp)
 8006b5a:	45e2                	lw	a1,24(sp)
 8006b5c:	4672                	lw	a2,28(sp)
 8006b5e:	5682                	lw	a3,32(sp)
 8006b60:	5712                	lw	a4,36(sp)
 8006b62:	57a2                	lw	a5,40(sp)
 8006b64:	5832                	lw	a6,44(sp)
 8006b66:	58c2                	lw	a7,48(sp)
 8006b68:	5e52                	lw	t3,52(sp)
 8006b6a:	5ee2                	lw	t4,56(sp)
 8006b6c:	5f72                	lw	t5,60(sp)
 8006b6e:	4f86                	lw	t6,64(sp)
 8006b70:	6161                	addi	sp,sp,80
  sp
  
  #endif
  
  // Return to regular code
  mret
 8006b72:	30200073          	mret

08006b76 <__divdf3>:
 8006b76:	7179                	addi	sp,sp,-48
 8006b78:	0145d813          	srli	a6,a1,0x14
 8006b7c:	d226                	sw	s1,36(sp)
 8006b7e:	ce4e                	sw	s3,28(sp)
 8006b80:	cc52                	sw	s4,24(sp)
 8006b82:	c85a                	sw	s6,16(sp)
 8006b84:	c65e                	sw	s7,12(sp)
 8006b86:	00c59493          	slli	s1,a1,0xc
 8006b8a:	d606                	sw	ra,44(sp)
 8006b8c:	d422                	sw	s0,40(sp)
 8006b8e:	d04a                	sw	s2,32(sp)
 8006b90:	ca56                	sw	s5,20(sp)
 8006b92:	7ff87813          	andi	a6,a6,2047
 8006b96:	8b2a                	mv	s6,a0
 8006b98:	8bb2                	mv	s7,a2
 8006b9a:	8a36                	mv	s4,a3
 8006b9c:	80b1                	srli	s1,s1,0xc
 8006b9e:	01f5d993          	srli	s3,a1,0x1f
 8006ba2:	08080463          	beqz	a6,8006c2a <__divdf3+0xb4>
 8006ba6:	7ff00793          	li	a5,2047
 8006baa:	0cf80e63          	beq	a6,a5,8006c86 <__divdf3+0x110>
 8006bae:	01d55a93          	srli	s5,a0,0x1d
 8006bb2:	048e                	slli	s1,s1,0x3
 8006bb4:	009ae4b3          	or	s1,s5,s1
 8006bb8:	00800ab7          	lui	s5,0x800
 8006bbc:	0154eab3          	or	s5,s1,s5
 8006bc0:	00351413          	slli	s0,a0,0x3
 8006bc4:	c0180913          	addi	s2,a6,-1023
 8006bc8:	4b01                	li	s6,0
 8006bca:	014a5513          	srli	a0,s4,0x14
 8006bce:	00ca1493          	slli	s1,s4,0xc
 8006bd2:	7ff57813          	andi	a6,a0,2047
 8006bd6:	80b1                	srli	s1,s1,0xc
 8006bd8:	01fa5a13          	srli	s4,s4,0x1f
 8006bdc:	0c080863          	beqz	a6,8006cac <__divdf3+0x136>
 8006be0:	7ff00793          	li	a5,2047
 8006be4:	12f80163          	beq	a6,a5,8006d06 <__divdf3+0x190>
 8006be8:	00349513          	slli	a0,s1,0x3
 8006bec:	01dbd793          	srli	a5,s7,0x1d
 8006bf0:	8d5d                	or	a0,a0,a5
 8006bf2:	008004b7          	lui	s1,0x800
 8006bf6:	8cc9                	or	s1,s1,a0
 8006bf8:	003b9f13          	slli	t5,s7,0x3
 8006bfc:	c0180513          	addi	a0,a6,-1023
 8006c00:	4781                	li	a5,0
 8006c02:	002b1713          	slli	a4,s6,0x2
 8006c06:	8f5d                	or	a4,a4,a5
 8006c08:	177d                	addi	a4,a4,-1
 8006c0a:	46b9                	li	a3,14
 8006c0c:	0149c633          	xor	a2,s3,s4
 8006c10:	40a90833          	sub	a6,s2,a0
 8006c14:	10e6eb63          	bltu	a3,a4,8006d2a <__divdf3+0x1b4>
 8006c18:	ffffa697          	auipc	a3,0xffffa
 8006c1c:	86068693          	addi	a3,a3,-1952 # 8000478 <_std_dev_req+0xe8>
 8006c20:	070a                	slli	a4,a4,0x2
 8006c22:	9736                	add	a4,a4,a3
 8006c24:	4318                	lw	a4,0(a4)
 8006c26:	9736                	add	a4,a4,a3
 8006c28:	8702                	jr	a4
 8006c2a:	00a4eab3          	or	s5,s1,a0
 8006c2e:	060a8663          	beqz	s5,8006c9a <__divdf3+0x124>
 8006c32:	cc8d                	beqz	s1,8006c6c <__divdf3+0xf6>
 8006c34:	8526                	mv	a0,s1
 8006c36:	00001097          	auipc	ra,0x1
 8006c3a:	c5a080e7          	jalr	-934(ra) # 8007890 <__clzsi2>
 8006c3e:	ff550793          	addi	a5,a0,-11 # 4001fff5 <_sp+0x20017ff5>
 8006c42:	4771                	li	a4,28
 8006c44:	02f74b63          	blt	a4,a5,8006c7a <__divdf3+0x104>
 8006c48:	4af5                	li	s5,29
 8006c4a:	ff850413          	addi	s0,a0,-8
 8006c4e:	40fa8ab3          	sub	s5,s5,a5
 8006c52:	008494b3          	sll	s1,s1,s0
 8006c56:	015b5ab3          	srl	s5,s6,s5
 8006c5a:	009aeab3          	or	s5,s5,s1
 8006c5e:	008b1433          	sll	s0,s6,s0
 8006c62:	c0d00813          	li	a6,-1011
 8006c66:	40a80933          	sub	s2,a6,a0
 8006c6a:	bfb9                	j	8006bc8 <__divdf3+0x52>
 8006c6c:	00001097          	auipc	ra,0x1
 8006c70:	c24080e7          	jalr	-988(ra) # 8007890 <__clzsi2>
 8006c74:	02050513          	addi	a0,a0,32
 8006c78:	b7d9                	j	8006c3e <__divdf3+0xc8>
 8006c7a:	fd850493          	addi	s1,a0,-40
 8006c7e:	009b1ab3          	sll	s5,s6,s1
 8006c82:	4401                	li	s0,0
 8006c84:	bff9                	j	8006c62 <__divdf3+0xec>
 8006c86:	00a4eab3          	or	s5,s1,a0
 8006c8a:	000a8c63          	beqz	s5,8006ca2 <__divdf3+0x12c>
 8006c8e:	842a                	mv	s0,a0
 8006c90:	8aa6                	mv	s5,s1
 8006c92:	7ff00913          	li	s2,2047
 8006c96:	4b0d                	li	s6,3
 8006c98:	bf0d                	j	8006bca <__divdf3+0x54>
 8006c9a:	4401                	li	s0,0
 8006c9c:	4901                	li	s2,0
 8006c9e:	4b05                	li	s6,1
 8006ca0:	b72d                	j	8006bca <__divdf3+0x54>
 8006ca2:	4401                	li	s0,0
 8006ca4:	7ff00913          	li	s2,2047
 8006ca8:	4b09                	li	s6,2
 8006caa:	b705                	j	8006bca <__divdf3+0x54>
 8006cac:	0174ef33          	or	t5,s1,s7
 8006cb0:	060f0463          	beqz	t5,8006d18 <__divdf3+0x1a2>
 8006cb4:	c89d                	beqz	s1,8006cea <__divdf3+0x174>
 8006cb6:	8526                	mv	a0,s1
 8006cb8:	00001097          	auipc	ra,0x1
 8006cbc:	bd8080e7          	jalr	-1064(ra) # 8007890 <__clzsi2>
 8006cc0:	ff550793          	addi	a5,a0,-11
 8006cc4:	4771                	li	a4,28
 8006cc6:	02f74a63          	blt	a4,a5,8006cfa <__divdf3+0x184>
 8006cca:	4775                	li	a4,29
 8006ccc:	ff850f13          	addi	t5,a0,-8
 8006cd0:	8f1d                	sub	a4,a4,a5
 8006cd2:	01e494b3          	sll	s1,s1,t5
 8006cd6:	00ebd733          	srl	a4,s7,a4
 8006cda:	8cd9                	or	s1,s1,a4
 8006cdc:	01eb9f33          	sll	t5,s7,t5
 8006ce0:	c0d00613          	li	a2,-1011
 8006ce4:	40a60533          	sub	a0,a2,a0
 8006ce8:	bf21                	j	8006c00 <__divdf3+0x8a>
 8006cea:	855e                	mv	a0,s7
 8006cec:	00001097          	auipc	ra,0x1
 8006cf0:	ba4080e7          	jalr	-1116(ra) # 8007890 <__clzsi2>
 8006cf4:	02050513          	addi	a0,a0,32
 8006cf8:	b7e1                	j	8006cc0 <__divdf3+0x14a>
 8006cfa:	fd850493          	addi	s1,a0,-40
 8006cfe:	009b94b3          	sll	s1,s7,s1
 8006d02:	4f01                	li	t5,0
 8006d04:	bff1                	j	8006ce0 <__divdf3+0x16a>
 8006d06:	0174ef33          	or	t5,s1,s7
 8006d0a:	000f0b63          	beqz	t5,8006d20 <__divdf3+0x1aa>
 8006d0e:	8f5e                	mv	t5,s7
 8006d10:	7ff00513          	li	a0,2047
 8006d14:	478d                	li	a5,3
 8006d16:	b5f5                	j	8006c02 <__divdf3+0x8c>
 8006d18:	4481                	li	s1,0
 8006d1a:	4501                	li	a0,0
 8006d1c:	4785                	li	a5,1
 8006d1e:	b5d5                	j	8006c02 <__divdf3+0x8c>
 8006d20:	4481                	li	s1,0
 8006d22:	7ff00513          	li	a0,2047
 8006d26:	4789                	li	a5,2
 8006d28:	bde9                	j	8006c02 <__divdf3+0x8c>
 8006d2a:	0154e663          	bltu	s1,s5,8006d36 <__divdf3+0x1c0>
 8006d2e:	2a9a9363          	bne	s5,s1,8006fd4 <__divdf3+0x45e>
 8006d32:	2be46163          	bltu	s0,t5,8006fd4 <__divdf3+0x45e>
 8006d36:	01fa9693          	slli	a3,s5,0x1f
 8006d3a:	00145713          	srli	a4,s0,0x1
 8006d3e:	01f41793          	slli	a5,s0,0x1f
 8006d42:	001ada93          	srli	s5,s5,0x1
 8006d46:	00e6e433          	or	s0,a3,a4
 8006d4a:	00849513          	slli	a0,s1,0x8
 8006d4e:	018f5493          	srli	s1,t5,0x18
 8006d52:	8d45                	or	a0,a0,s1
 8006d54:	01055e13          	srli	t3,a0,0x10
 8006d58:	03cad8b3          	divu	a7,s5,t3
 8006d5c:	01051313          	slli	t1,a0,0x10
 8006d60:	01035313          	srli	t1,t1,0x10
 8006d64:	01045713          	srli	a4,s0,0x10
 8006d68:	008f1593          	slli	a1,t5,0x8
 8006d6c:	03caf4b3          	remu	s1,s5,t3
 8006d70:	8fc6                	mv	t6,a7
 8006d72:	031306b3          	mul	a3,t1,a7
 8006d76:	01049a93          	slli	s5,s1,0x10
 8006d7a:	01576733          	or	a4,a4,s5
 8006d7e:	00d77c63          	bgeu	a4,a3,8006d96 <__divdf3+0x220>
 8006d82:	972a                	add	a4,a4,a0
 8006d84:	fff88f93          	addi	t6,a7,-1
 8006d88:	00a76763          	bltu	a4,a0,8006d96 <__divdf3+0x220>
 8006d8c:	00d77563          	bgeu	a4,a3,8006d96 <__divdf3+0x220>
 8006d90:	ffe88f93          	addi	t6,a7,-2
 8006d94:	972a                	add	a4,a4,a0
 8006d96:	8f15                	sub	a4,a4,a3
 8006d98:	03c75eb3          	divu	t4,a4,t3
 8006d9c:	0442                	slli	s0,s0,0x10
 8006d9e:	8041                	srli	s0,s0,0x10
 8006da0:	03c77733          	remu	a4,a4,t3
 8006da4:	86f6                	mv	a3,t4
 8006da6:	03d308b3          	mul	a7,t1,t4
 8006daa:	0742                	slli	a4,a4,0x10
 8006dac:	8f41                	or	a4,a4,s0
 8006dae:	01177c63          	bgeu	a4,a7,8006dc6 <__divdf3+0x250>
 8006db2:	972a                	add	a4,a4,a0
 8006db4:	fffe8693          	addi	a3,t4,-1
 8006db8:	00a76763          	bltu	a4,a0,8006dc6 <__divdf3+0x250>
 8006dbc:	01177563          	bgeu	a4,a7,8006dc6 <__divdf3+0x250>
 8006dc0:	ffee8693          	addi	a3,t4,-2
 8006dc4:	972a                	add	a4,a4,a0
 8006dc6:	0fc2                	slli	t6,t6,0x10
 8006dc8:	00dfefb3          	or	t6,t6,a3
 8006dcc:	66c1                	lui	a3,0x10
 8006dce:	41170433          	sub	s0,a4,a7
 8006dd2:	fff68893          	addi	a7,a3,-1 # ffff <__stack_size+0xefff>
 8006dd6:	010fdf13          	srli	t5,t6,0x10
 8006dda:	011ff733          	and	a4,t6,a7
 8006dde:	0105de93          	srli	t4,a1,0x10
 8006de2:	0115f8b3          	and	a7,a1,a7
 8006de6:	031703b3          	mul	t2,a4,a7
 8006dea:	031f04b3          	mul	s1,t5,a7
 8006dee:	02ee8733          	mul	a4,t4,a4
 8006df2:	03df02b3          	mul	t0,t5,t4
 8006df6:	00970f33          	add	t5,a4,s1
 8006dfa:	0103d713          	srli	a4,t2,0x10
 8006dfe:	977a                	add	a4,a4,t5
 8006e00:	00977363          	bgeu	a4,s1,8006e06 <__divdf3+0x290>
 8006e04:	92b6                	add	t0,t0,a3
 8006e06:	01075f13          	srli	t5,a4,0x10
 8006e0a:	9f16                	add	t5,t5,t0
 8006e0c:	62c1                	lui	t0,0x10
 8006e0e:	12fd                	addi	t0,t0,-1
 8006e10:	005776b3          	and	a3,a4,t0
 8006e14:	06c2                	slli	a3,a3,0x10
 8006e16:	0053f3b3          	and	t2,t2,t0
 8006e1a:	969e                	add	a3,a3,t2
 8006e1c:	01e46763          	bltu	s0,t5,8006e2a <__divdf3+0x2b4>
 8006e20:	84fe                	mv	s1,t6
 8006e22:	03e41e63          	bne	s0,t5,8006e5e <__divdf3+0x2e8>
 8006e26:	02d7fc63          	bgeu	a5,a3,8006e5e <__divdf3+0x2e8>
 8006e2a:	97ae                	add	a5,a5,a1
 8006e2c:	00b7b733          	sltu	a4,a5,a1
 8006e30:	972a                	add	a4,a4,a0
 8006e32:	943a                	add	s0,s0,a4
 8006e34:	ffff8493          	addi	s1,t6,-1
 8006e38:	00856663          	bltu	a0,s0,8006e44 <__divdf3+0x2ce>
 8006e3c:	02851163          	bne	a0,s0,8006e5e <__divdf3+0x2e8>
 8006e40:	00b7ef63          	bltu	a5,a1,8006e5e <__divdf3+0x2e8>
 8006e44:	01e46663          	bltu	s0,t5,8006e50 <__divdf3+0x2da>
 8006e48:	008f1b63          	bne	t5,s0,8006e5e <__divdf3+0x2e8>
 8006e4c:	00d7f963          	bgeu	a5,a3,8006e5e <__divdf3+0x2e8>
 8006e50:	97ae                	add	a5,a5,a1
 8006e52:	00b7b733          	sltu	a4,a5,a1
 8006e56:	972a                	add	a4,a4,a0
 8006e58:	ffef8493          	addi	s1,t6,-2
 8006e5c:	943a                	add	s0,s0,a4
 8006e5e:	40d786b3          	sub	a3,a5,a3
 8006e62:	41e40433          	sub	s0,s0,t5
 8006e66:	00d7b7b3          	sltu	a5,a5,a3
 8006e6a:	8c1d                	sub	s0,s0,a5
 8006e6c:	5f7d                	li	t5,-1
 8006e6e:	0e850563          	beq	a0,s0,8006f58 <__divdf3+0x3e2>
 8006e72:	03c45f33          	divu	t5,s0,t3
 8006e76:	0106d713          	srli	a4,a3,0x10
 8006e7a:	03c47433          	remu	s0,s0,t3
 8006e7e:	03e307b3          	mul	a5,t1,t5
 8006e82:	0442                	slli	s0,s0,0x10
 8006e84:	8c59                	or	s0,s0,a4
 8006e86:	877a                	mv	a4,t5
 8006e88:	00f47c63          	bgeu	s0,a5,8006ea0 <__divdf3+0x32a>
 8006e8c:	942a                	add	s0,s0,a0
 8006e8e:	ffff0713          	addi	a4,t5,-1
 8006e92:	00a46763          	bltu	s0,a0,8006ea0 <__divdf3+0x32a>
 8006e96:	00f47563          	bgeu	s0,a5,8006ea0 <__divdf3+0x32a>
 8006e9a:	ffef0713          	addi	a4,t5,-2
 8006e9e:	942a                	add	s0,s0,a0
 8006ea0:	8c1d                	sub	s0,s0,a5
 8006ea2:	03c45f33          	divu	t5,s0,t3
 8006ea6:	06c2                	slli	a3,a3,0x10
 8006ea8:	82c1                	srli	a3,a3,0x10
 8006eaa:	03c47433          	remu	s0,s0,t3
 8006eae:	87fa                	mv	a5,t5
 8006eb0:	03e30333          	mul	t1,t1,t5
 8006eb4:	0442                	slli	s0,s0,0x10
 8006eb6:	8c55                	or	s0,s0,a3
 8006eb8:	00647c63          	bgeu	s0,t1,8006ed0 <__divdf3+0x35a>
 8006ebc:	942a                	add	s0,s0,a0
 8006ebe:	ffff0793          	addi	a5,t5,-1
 8006ec2:	00a46763          	bltu	s0,a0,8006ed0 <__divdf3+0x35a>
 8006ec6:	00647563          	bgeu	s0,t1,8006ed0 <__divdf3+0x35a>
 8006eca:	ffef0793          	addi	a5,t5,-2
 8006ece:	942a                	add	s0,s0,a0
 8006ed0:	0742                	slli	a4,a4,0x10
 8006ed2:	8f5d                	or	a4,a4,a5
 8006ed4:	01071793          	slli	a5,a4,0x10
 8006ed8:	83c1                	srli	a5,a5,0x10
 8006eda:	40640433          	sub	s0,s0,t1
 8006ede:	01075313          	srli	t1,a4,0x10
 8006ee2:	03178e33          	mul	t3,a5,a7
 8006ee6:	031308b3          	mul	a7,t1,a7
 8006eea:	026e8333          	mul	t1,t4,t1
 8006eee:	02fe8eb3          	mul	t4,t4,a5
 8006ef2:	010e5793          	srli	a5,t3,0x10
 8006ef6:	9ec6                	add	t4,t4,a7
 8006ef8:	97f6                	add	a5,a5,t4
 8006efa:	0117f463          	bgeu	a5,a7,8006f02 <__divdf3+0x38c>
 8006efe:	66c1                	lui	a3,0x10
 8006f00:	9336                	add	t1,t1,a3
 8006f02:	0107d893          	srli	a7,a5,0x10
 8006f06:	989a                	add	a7,a7,t1
 8006f08:	6341                	lui	t1,0x10
 8006f0a:	137d                	addi	t1,t1,-1
 8006f0c:	0067f6b3          	and	a3,a5,t1
 8006f10:	06c2                	slli	a3,a3,0x10
 8006f12:	006e7e33          	and	t3,t3,t1
 8006f16:	96f2                	add	a3,a3,t3
 8006f18:	01146663          	bltu	s0,a7,8006f24 <__divdf3+0x3ae>
 8006f1c:	19141e63          	bne	s0,a7,80070b8 <__divdf3+0x542>
 8006f20:	8f3a                	mv	t5,a4
 8006f22:	ca9d                	beqz	a3,8006f58 <__divdf3+0x3e2>
 8006f24:	942a                	add	s0,s0,a0
 8006f26:	fff70f13          	addi	t5,a4,-1
 8006f2a:	02a46163          	bltu	s0,a0,8006f4c <__divdf3+0x3d6>
 8006f2e:	01146663          	bltu	s0,a7,8006f3a <__divdf3+0x3c4>
 8006f32:	19141263          	bne	s0,a7,80070b6 <__divdf3+0x540>
 8006f36:	00d5fd63          	bgeu	a1,a3,8006f50 <__divdf3+0x3da>
 8006f3a:	00159793          	slli	a5,a1,0x1
 8006f3e:	00b7b5b3          	sltu	a1,a5,a1
 8006f42:	952e                	add	a0,a0,a1
 8006f44:	ffe70f13          	addi	t5,a4,-2
 8006f48:	942a                	add	s0,s0,a0
 8006f4a:	85be                	mv	a1,a5
 8006f4c:	01141463          	bne	s0,a7,8006f54 <__divdf3+0x3de>
 8006f50:	00b68463          	beq	a3,a1,8006f58 <__divdf3+0x3e2>
 8006f54:	001f6f13          	ori	t5,t5,1
 8006f58:	3ff80713          	addi	a4,a6,1023
 8006f5c:	0ae05763          	blez	a4,800700a <__divdf3+0x494>
 8006f60:	007f7793          	andi	a5,t5,7
 8006f64:	cf81                	beqz	a5,8006f7c <__divdf3+0x406>
 8006f66:	00ff7793          	andi	a5,t5,15
 8006f6a:	4691                	li	a3,4
 8006f6c:	00d78863          	beq	a5,a3,8006f7c <__divdf3+0x406>
 8006f70:	004f0693          	addi	a3,t5,4
 8006f74:	01e6bf33          	sltu	t5,a3,t5
 8006f78:	94fa                	add	s1,s1,t5
 8006f7a:	8f36                	mv	t5,a3
 8006f7c:	00749793          	slli	a5,s1,0x7
 8006f80:	0007d863          	bgez	a5,8006f90 <__divdf3+0x41a>
 8006f84:	ff0007b7          	lui	a5,0xff000
 8006f88:	17fd                	addi	a5,a5,-1
 8006f8a:	8cfd                	and	s1,s1,a5
 8006f8c:	40080713          	addi	a4,a6,1024
 8006f90:	7fe00793          	li	a5,2046
 8006f94:	10e7c863          	blt	a5,a4,80070a4 <__divdf3+0x52e>
 8006f98:	003f5f13          	srli	t5,t5,0x3
 8006f9c:	01d49793          	slli	a5,s1,0x1d
 8006fa0:	01e7e7b3          	or	a5,a5,t5
 8006fa4:	0034d513          	srli	a0,s1,0x3
 8006fa8:	0532                	slli	a0,a0,0xc
 8006faa:	7ff77713          	andi	a4,a4,2047
 8006fae:	0752                	slli	a4,a4,0x14
 8006fb0:	50b2                	lw	ra,44(sp)
 8006fb2:	5422                	lw	s0,40(sp)
 8006fb4:	8131                	srli	a0,a0,0xc
 8006fb6:	8d59                	or	a0,a0,a4
 8006fb8:	067e                	slli	a2,a2,0x1f
 8006fba:	00c56733          	or	a4,a0,a2
 8006fbe:	5492                	lw	s1,36(sp)
 8006fc0:	5902                	lw	s2,32(sp)
 8006fc2:	49f2                	lw	s3,28(sp)
 8006fc4:	4a62                	lw	s4,24(sp)
 8006fc6:	4ad2                	lw	s5,20(sp)
 8006fc8:	4b42                	lw	s6,16(sp)
 8006fca:	4bb2                	lw	s7,12(sp)
 8006fcc:	853e                	mv	a0,a5
 8006fce:	85ba                	mv	a1,a4
 8006fd0:	6145                	addi	sp,sp,48
 8006fd2:	8082                	ret
 8006fd4:	187d                	addi	a6,a6,-1
 8006fd6:	4781                	li	a5,0
 8006fd8:	bb8d                	j	8006d4a <__divdf3+0x1d4>
 8006fda:	864e                	mv	a2,s3
 8006fdc:	84d6                	mv	s1,s5
 8006fde:	8f22                	mv	t5,s0
 8006fe0:	87da                	mv	a5,s6
 8006fe2:	4709                	li	a4,2
 8006fe4:	0ce78063          	beq	a5,a4,80070a4 <__divdf3+0x52e>
 8006fe8:	470d                	li	a4,3
 8006fea:	0ae78663          	beq	a5,a4,8007096 <__divdf3+0x520>
 8006fee:	4705                	li	a4,1
 8006ff0:	f6e794e3          	bne	a5,a4,8006f58 <__divdf3+0x3e2>
 8006ff4:	4501                	li	a0,0
 8006ff6:	4781                	li	a5,0
 8006ff8:	a885                	j	8007068 <__divdf3+0x4f2>
 8006ffa:	8652                	mv	a2,s4
 8006ffc:	b7dd                	j	8006fe2 <__divdf3+0x46c>
 8006ffe:	000804b7          	lui	s1,0x80
 8007002:	4f01                	li	t5,0
 8007004:	4601                	li	a2,0
 8007006:	478d                	li	a5,3
 8007008:	bfe9                	j	8006fe2 <__divdf3+0x46c>
 800700a:	4505                	li	a0,1
 800700c:	8d19                	sub	a0,a0,a4
 800700e:	03800793          	li	a5,56
 8007012:	fea7c1e3          	blt	a5,a0,8006ff4 <__divdf3+0x47e>
 8007016:	47fd                	li	a5,31
 8007018:	04a7ca63          	blt	a5,a0,800706c <__divdf3+0x4f6>
 800701c:	41e80813          	addi	a6,a6,1054
 8007020:	010497b3          	sll	a5,s1,a6
 8007024:	00af5733          	srl	a4,t5,a0
 8007028:	010f1833          	sll	a6,t5,a6
 800702c:	8fd9                	or	a5,a5,a4
 800702e:	01003833          	snez	a6,a6
 8007032:	0107e7b3          	or	a5,a5,a6
 8007036:	00a4d533          	srl	a0,s1,a0
 800703a:	0077f713          	andi	a4,a5,7
 800703e:	cf01                	beqz	a4,8007056 <__divdf3+0x4e0>
 8007040:	00f7f713          	andi	a4,a5,15
 8007044:	4691                	li	a3,4
 8007046:	00d70863          	beq	a4,a3,8007056 <__divdf3+0x4e0>
 800704a:	00478713          	addi	a4,a5,4 # ff000004 <_sp+0xdeff8004>
 800704e:	00f737b3          	sltu	a5,a4,a5
 8007052:	953e                	add	a0,a0,a5
 8007054:	87ba                	mv	a5,a4
 8007056:	00851713          	slli	a4,a0,0x8
 800705a:	04074a63          	bltz	a4,80070ae <__divdf3+0x538>
 800705e:	01d51713          	slli	a4,a0,0x1d
 8007062:	838d                	srli	a5,a5,0x3
 8007064:	8fd9                	or	a5,a5,a4
 8007066:	810d                	srli	a0,a0,0x3
 8007068:	4701                	li	a4,0
 800706a:	bf3d                	j	8006fa8 <__divdf3+0x432>
 800706c:	5785                	li	a5,-31
 800706e:	8f99                	sub	a5,a5,a4
 8007070:	02000693          	li	a3,32
 8007074:	00f4d7b3          	srl	a5,s1,a5
 8007078:	4701                	li	a4,0
 800707a:	00d50663          	beq	a0,a3,8007086 <__divdf3+0x510>
 800707e:	43e80813          	addi	a6,a6,1086
 8007082:	01049733          	sll	a4,s1,a6
 8007086:	01e76f33          	or	t5,a4,t5
 800708a:	01e03f33          	snez	t5,t5
 800708e:	01e7e7b3          	or	a5,a5,t5
 8007092:	4501                	li	a0,0
 8007094:	b75d                	j	800703a <__divdf3+0x4c4>
 8007096:	00080537          	lui	a0,0x80
 800709a:	4781                	li	a5,0
 800709c:	7ff00713          	li	a4,2047
 80070a0:	4601                	li	a2,0
 80070a2:	b719                	j	8006fa8 <__divdf3+0x432>
 80070a4:	4501                	li	a0,0
 80070a6:	4781                	li	a5,0
 80070a8:	7ff00713          	li	a4,2047
 80070ac:	bdf5                	j	8006fa8 <__divdf3+0x432>
 80070ae:	4501                	li	a0,0
 80070b0:	4781                	li	a5,0
 80070b2:	4705                	li	a4,1
 80070b4:	bdd5                	j	8006fa8 <__divdf3+0x432>
 80070b6:	877a                	mv	a4,t5
 80070b8:	8f3a                	mv	t5,a4
 80070ba:	bd69                	j	8006f54 <__divdf3+0x3de>

080070bc <__ledf2>:
 80070bc:	0145d813          	srli	a6,a1,0x14
 80070c0:	001007b7          	lui	a5,0x100
 80070c4:	17fd                	addi	a5,a5,-1
 80070c6:	0146d713          	srli	a4,a3,0x14
 80070ca:	7ff87813          	andi	a6,a6,2047
 80070ce:	7ff00e93          	li	t4,2047
 80070d2:	00b7f8b3          	and	a7,a5,a1
 80070d6:	832a                	mv	t1,a0
 80070d8:	8ff5                	and	a5,a5,a3
 80070da:	81fd                	srli	a1,a1,0x1f
 80070dc:	8e32                	mv	t3,a2
 80070de:	7ff77713          	andi	a4,a4,2047
 80070e2:	82fd                	srli	a3,a3,0x1f
 80070e4:	01d81863          	bne	a6,t4,80070f4 <__ledf2+0x38>
 80070e8:	00a8eeb3          	or	t4,a7,a0
 80070ec:	060e8563          	beqz	t4,8007156 <__ledf2+0x9a>
 80070f0:	4589                	li	a1,2
 80070f2:	a80d                	j	8007124 <__ledf2+0x68>
 80070f4:	01d71663          	bne	a4,t4,8007100 <__ledf2+0x44>
 80070f8:	00c7eeb3          	or	t4,a5,a2
 80070fc:	fe0e9ae3          	bnez	t4,80070f0 <__ledf2+0x34>
 8007100:	04081d63          	bnez	a6,800715a <__ledf2+0x9e>
 8007104:	00a8e533          	or	a0,a7,a0
 8007108:	00153513          	seqz	a0,a0
 800710c:	e319                	bnez	a4,8007112 <__ledf2+0x56>
 800710e:	8e5d                	or	a2,a2,a5
 8007110:	ce15                	beqz	a2,800714c <__ledf2+0x90>
 8007112:	e511                	bnez	a0,800711e <__ledf2+0x62>
 8007114:	00d58a63          	beq	a1,a3,8007128 <__ledf2+0x6c>
 8007118:	c985                	beqz	a1,8007148 <__ledf2+0x8c>
 800711a:	55fd                	li	a1,-1
 800711c:	a021                	j	8007124 <__ledf2+0x68>
 800711e:	55fd                	li	a1,-1
 8007120:	c291                	beqz	a3,8007124 <__ledf2+0x68>
 8007122:	85b6                	mv	a1,a3
 8007124:	852e                	mv	a0,a1
 8007126:	8082                	ret
 8007128:	ff0748e3          	blt	a4,a6,8007118 <__ledf2+0x5c>
 800712c:	00e85463          	bge	a6,a4,8007134 <__ledf2+0x78>
 8007130:	f9f5                	bnez	a1,8007124 <__ledf2+0x68>
 8007132:	b7e5                	j	800711a <__ledf2+0x5e>
 8007134:	ff17e2e3          	bltu	a5,a7,8007118 <__ledf2+0x5c>
 8007138:	00f89c63          	bne	a7,a5,8007150 <__ledf2+0x94>
 800713c:	fc6e6ee3          	bltu	t3,t1,8007118 <__ledf2+0x5c>
 8007140:	ffc368e3          	bltu	t1,t3,8007130 <__ledf2+0x74>
 8007144:	4581                	li	a1,0
 8007146:	bff9                	j	8007124 <__ledf2+0x68>
 8007148:	4585                	li	a1,1
 800714a:	bfe9                	j	8007124 <__ledf2+0x68>
 800714c:	fd65                	bnez	a0,8007144 <__ledf2+0x88>
 800714e:	b7e9                	j	8007118 <__ledf2+0x5c>
 8007150:	fef8e0e3          	bltu	a7,a5,8007130 <__ledf2+0x74>
 8007154:	bfc5                	j	8007144 <__ledf2+0x88>
 8007156:	fb0701e3          	beq	a4,a6,80070f8 <__ledf2+0x3c>
 800715a:	ff4d                	bnez	a4,8007114 <__ledf2+0x58>
 800715c:	4501                	li	a0,0
 800715e:	bf45                	j	800710e <__ledf2+0x52>

08007160 <__muldf3>:
 8007160:	7179                	addi	sp,sp,-48
 8007162:	ce4e                	sw	s3,28(sp)
 8007164:	0145d993          	srli	s3,a1,0x14
 8007168:	d422                	sw	s0,40(sp)
 800716a:	d226                	sw	s1,36(sp)
 800716c:	cc52                	sw	s4,24(sp)
 800716e:	ca56                	sw	s5,20(sp)
 8007170:	c85a                	sw	s6,16(sp)
 8007172:	00c59493          	slli	s1,a1,0xc
 8007176:	d606                	sw	ra,44(sp)
 8007178:	d04a                	sw	s2,32(sp)
 800717a:	c65e                	sw	s7,12(sp)
 800717c:	7ff9f993          	andi	s3,s3,2047
 8007180:	842a                	mv	s0,a0
 8007182:	8b32                	mv	s6,a2
 8007184:	8ab6                	mv	s5,a3
 8007186:	80b1                	srli	s1,s1,0xc
 8007188:	01f5da13          	srli	s4,a1,0x1f
 800718c:	08098163          	beqz	s3,800720e <__muldf3+0xae>
 8007190:	7ff00793          	li	a5,2047
 8007194:	0cf98963          	beq	s3,a5,8007266 <__muldf3+0x106>
 8007198:	01d55793          	srli	a5,a0,0x1d
 800719c:	048e                	slli	s1,s1,0x3
 800719e:	8cdd                	or	s1,s1,a5
 80071a0:	008007b7          	lui	a5,0x800
 80071a4:	8cdd                	or	s1,s1,a5
 80071a6:	00351913          	slli	s2,a0,0x3
 80071aa:	c0198993          	addi	s3,s3,-1023
 80071ae:	4b81                	li	s7,0
 80071b0:	014ad513          	srli	a0,s5,0x14
 80071b4:	00ca9413          	slli	s0,s5,0xc
 80071b8:	7ff57513          	andi	a0,a0,2047
 80071bc:	8031                	srli	s0,s0,0xc
 80071be:	01fada93          	srli	s5,s5,0x1f
 80071c2:	c561                	beqz	a0,800728a <__muldf3+0x12a>
 80071c4:	7ff00793          	li	a5,2047
 80071c8:	10f50d63          	beq	a0,a5,80072e2 <__muldf3+0x182>
 80071cc:	01db5793          	srli	a5,s6,0x1d
 80071d0:	040e                	slli	s0,s0,0x3
 80071d2:	8c5d                	or	s0,s0,a5
 80071d4:	008007b7          	lui	a5,0x800
 80071d8:	8c5d                	or	s0,s0,a5
 80071da:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__stack_size+0x7ec01>
 80071de:	003b1793          	slli	a5,s6,0x3
 80071e2:	4701                	li	a4,0
 80071e4:	002b9693          	slli	a3,s7,0x2
 80071e8:	8ed9                	or	a3,a3,a4
 80071ea:	954e                	add	a0,a0,s3
 80071ec:	16fd                	addi	a3,a3,-1
 80071ee:	45b9                	li	a1,14
 80071f0:	015a4633          	xor	a2,s4,s5
 80071f4:	00150813          	addi	a6,a0,1
 80071f8:	10d5e663          	bltu	a1,a3,8007304 <__muldf3+0x1a4>
 80071fc:	ffff9597          	auipc	a1,0xffff9
 8007200:	2b858593          	addi	a1,a1,696 # 80004b4 <_std_dev_req+0x124>
 8007204:	068a                	slli	a3,a3,0x2
 8007206:	96ae                	add	a3,a3,a1
 8007208:	4294                	lw	a3,0(a3)
 800720a:	96ae                	add	a3,a3,a1
 800720c:	8682                	jr	a3
 800720e:	00a4e933          	or	s2,s1,a0
 8007212:	06090363          	beqz	s2,8007278 <__muldf3+0x118>
 8007216:	c89d                	beqz	s1,800724c <__muldf3+0xec>
 8007218:	8526                	mv	a0,s1
 800721a:	00000097          	auipc	ra,0x0
 800721e:	676080e7          	jalr	1654(ra) # 8007890 <__clzsi2>
 8007222:	ff550713          	addi	a4,a0,-11
 8007226:	47f1                	li	a5,28
 8007228:	02e7c963          	blt	a5,a4,800725a <__muldf3+0xfa>
 800722c:	47f5                	li	a5,29
 800722e:	ff850913          	addi	s2,a0,-8
 8007232:	8f99                	sub	a5,a5,a4
 8007234:	012494b3          	sll	s1,s1,s2
 8007238:	00f457b3          	srl	a5,s0,a5
 800723c:	8cdd                	or	s1,s1,a5
 800723e:	01241933          	sll	s2,s0,s2
 8007242:	c0d00993          	li	s3,-1011
 8007246:	40a989b3          	sub	s3,s3,a0
 800724a:	b795                	j	80071ae <__muldf3+0x4e>
 800724c:	00000097          	auipc	ra,0x0
 8007250:	644080e7          	jalr	1604(ra) # 8007890 <__clzsi2>
 8007254:	02050513          	addi	a0,a0,32
 8007258:	b7e9                	j	8007222 <__muldf3+0xc2>
 800725a:	fd850493          	addi	s1,a0,-40
 800725e:	009414b3          	sll	s1,s0,s1
 8007262:	4901                	li	s2,0
 8007264:	bff9                	j	8007242 <__muldf3+0xe2>
 8007266:	00a4e933          	or	s2,s1,a0
 800726a:	00090b63          	beqz	s2,8007280 <__muldf3+0x120>
 800726e:	892a                	mv	s2,a0
 8007270:	7ff00993          	li	s3,2047
 8007274:	4b8d                	li	s7,3
 8007276:	bf2d                	j	80071b0 <__muldf3+0x50>
 8007278:	4481                	li	s1,0
 800727a:	4981                	li	s3,0
 800727c:	4b85                	li	s7,1
 800727e:	bf0d                	j	80071b0 <__muldf3+0x50>
 8007280:	4481                	li	s1,0
 8007282:	7ff00993          	li	s3,2047
 8007286:	4b89                	li	s7,2
 8007288:	b725                	j	80071b0 <__muldf3+0x50>
 800728a:	016467b3          	or	a5,s0,s6
 800728e:	c3b5                	beqz	a5,80072f2 <__muldf3+0x192>
 8007290:	c81d                	beqz	s0,80072c6 <__muldf3+0x166>
 8007292:	8522                	mv	a0,s0
 8007294:	00000097          	auipc	ra,0x0
 8007298:	5fc080e7          	jalr	1532(ra) # 8007890 <__clzsi2>
 800729c:	ff550693          	addi	a3,a0,-11
 80072a0:	47f1                	li	a5,28
 80072a2:	02d7ca63          	blt	a5,a3,80072d6 <__muldf3+0x176>
 80072a6:	4775                	li	a4,29
 80072a8:	ff850793          	addi	a5,a0,-8
 80072ac:	8f15                	sub	a4,a4,a3
 80072ae:	00f41433          	sll	s0,s0,a5
 80072b2:	00eb5733          	srl	a4,s6,a4
 80072b6:	8c59                	or	s0,s0,a4
 80072b8:	00fb17b3          	sll	a5,s6,a5
 80072bc:	c0d00713          	li	a4,-1011
 80072c0:	40a70533          	sub	a0,a4,a0
 80072c4:	bf39                	j	80071e2 <__muldf3+0x82>
 80072c6:	855a                	mv	a0,s6
 80072c8:	00000097          	auipc	ra,0x0
 80072cc:	5c8080e7          	jalr	1480(ra) # 8007890 <__clzsi2>
 80072d0:	02050513          	addi	a0,a0,32
 80072d4:	b7e1                	j	800729c <__muldf3+0x13c>
 80072d6:	fd850413          	addi	s0,a0,-40
 80072da:	008b1433          	sll	s0,s6,s0
 80072de:	4781                	li	a5,0
 80072e0:	bff1                	j	80072bc <__muldf3+0x15c>
 80072e2:	016467b3          	or	a5,s0,s6
 80072e6:	cb91                	beqz	a5,80072fa <__muldf3+0x19a>
 80072e8:	87da                	mv	a5,s6
 80072ea:	7ff00513          	li	a0,2047
 80072ee:	470d                	li	a4,3
 80072f0:	bdd5                	j	80071e4 <__muldf3+0x84>
 80072f2:	4401                	li	s0,0
 80072f4:	4501                	li	a0,0
 80072f6:	4705                	li	a4,1
 80072f8:	b5f5                	j	80071e4 <__muldf3+0x84>
 80072fa:	4401                	li	s0,0
 80072fc:	7ff00513          	li	a0,2047
 8007300:	4709                	li	a4,2
 8007302:	b5cd                	j	80071e4 <__muldf3+0x84>
 8007304:	6f41                	lui	t5,0x10
 8007306:	ffff0e93          	addi	t4,t5,-1 # ffff <__stack_size+0xefff>
 800730a:	01095713          	srli	a4,s2,0x10
 800730e:	0107d893          	srli	a7,a5,0x10
 8007312:	01d97933          	and	s2,s2,t4
 8007316:	01d7f7b3          	and	a5,a5,t4
 800731a:	032885b3          	mul	a1,a7,s2
 800731e:	032786b3          	mul	a3,a5,s2
 8007322:	02f70fb3          	mul	t6,a4,a5
 8007326:	01f58333          	add	t1,a1,t6
 800732a:	0106d593          	srli	a1,a3,0x10
 800732e:	959a                	add	a1,a1,t1
 8007330:	03170e33          	mul	t3,a4,a7
 8007334:	01f5f363          	bgeu	a1,t6,800733a <__muldf3+0x1da>
 8007338:	9e7a                	add	t3,t3,t5
 800733a:	0105d393          	srli	t2,a1,0x10
 800733e:	01d5f5b3          	and	a1,a1,t4
 8007342:	01d6f6b3          	and	a3,a3,t4
 8007346:	01045f13          	srli	t5,s0,0x10
 800734a:	01d472b3          	and	t0,s0,t4
 800734e:	05c2                	slli	a1,a1,0x10
 8007350:	95b6                	add	a1,a1,a3
 8007352:	02570eb3          	mul	t4,a4,t0
 8007356:	032286b3          	mul	a3,t0,s2
 800735a:	032f0933          	mul	s2,t5,s2
 800735e:	01d90333          	add	t1,s2,t4
 8007362:	0106d913          	srli	s2,a3,0x10
 8007366:	991a                	add	s2,s2,t1
 8007368:	03e70733          	mul	a4,a4,t5
 800736c:	01d97463          	bgeu	s2,t4,8007374 <__muldf3+0x214>
 8007370:	6341                	lui	t1,0x10
 8007372:	971a                	add	a4,a4,t1
 8007374:	01095e93          	srli	t4,s2,0x10
 8007378:	69c1                	lui	s3,0x10
 800737a:	9eba                	add	t4,t4,a4
 800737c:	fff98713          	addi	a4,s3,-1 # ffff <__stack_size+0xefff>
 8007380:	00e97933          	and	s2,s2,a4
 8007384:	8ef9                	and	a3,a3,a4
 8007386:	0104d413          	srli	s0,s1,0x10
 800738a:	0942                	slli	s2,s2,0x10
 800738c:	8cf9                	and	s1,s1,a4
 800738e:	9936                	add	s2,s2,a3
 8007390:	02978733          	mul	a4,a5,s1
 8007394:	93ca                	add	t2,t2,s2
 8007396:	02f40333          	mul	t1,s0,a5
 800739a:	029886b3          	mul	a3,a7,s1
 800739e:	028887b3          	mul	a5,a7,s0
 80073a2:	006688b3          	add	a7,a3,t1
 80073a6:	01075693          	srli	a3,a4,0x10
 80073aa:	96c6                	add	a3,a3,a7
 80073ac:	0066f363          	bgeu	a3,t1,80073b2 <__muldf3+0x252>
 80073b0:	97ce                	add	a5,a5,s3
 80073b2:	0106d893          	srli	a7,a3,0x10
 80073b6:	69c1                	lui	s3,0x10
 80073b8:	00f88fb3          	add	t6,a7,a5
 80073bc:	fff98793          	addi	a5,s3,-1 # ffff <__stack_size+0xefff>
 80073c0:	8efd                	and	a3,a3,a5
 80073c2:	8f7d                	and	a4,a4,a5
 80073c4:	029288b3          	mul	a7,t0,s1
 80073c8:	06c2                	slli	a3,a3,0x10
 80073ca:	96ba                	add	a3,a3,a4
 80073cc:	025407b3          	mul	a5,s0,t0
 80073d0:	029f04b3          	mul	s1,t5,s1
 80073d4:	028f0333          	mul	t1,t5,s0
 80073d8:	94be                	add	s1,s1,a5
 80073da:	0108d413          	srli	s0,a7,0x10
 80073de:	94a2                	add	s1,s1,s0
 80073e0:	00f4f363          	bgeu	s1,a5,80073e6 <__muldf3+0x286>
 80073e4:	934e                	add	t1,t1,s3
 80073e6:	67c1                	lui	a5,0x10
 80073e8:	17fd                	addi	a5,a5,-1
 80073ea:	00f4f733          	and	a4,s1,a5
 80073ee:	00f8f8b3          	and	a7,a7,a5
 80073f2:	0742                	slli	a4,a4,0x10
 80073f4:	9e1e                	add	t3,t3,t2
 80073f6:	9746                	add	a4,a4,a7
 80073f8:	012e3933          	sltu	s2,t3,s2
 80073fc:	9776                	add	a4,a4,t4
 80073fe:	01270433          	add	s0,a4,s2
 8007402:	9e36                	add	t3,t3,a3
 8007404:	00de36b3          	sltu	a3,t3,a3
 8007408:	01f408b3          	add	a7,s0,t6
 800740c:	00d88f33          	add	t5,a7,a3
 8007410:	01d73733          	sltu	a4,a4,t4
 8007414:	01243433          	sltu	s0,s0,s2
 8007418:	8c59                	or	s0,s0,a4
 800741a:	80c1                	srli	s1,s1,0x10
 800741c:	01f8b8b3          	sltu	a7,a7,t6
 8007420:	00df36b3          	sltu	a3,t5,a3
 8007424:	9426                	add	s0,s0,s1
 8007426:	00d8e6b3          	or	a3,a7,a3
 800742a:	9436                	add	s0,s0,a3
 800742c:	941a                	add	s0,s0,t1
 800742e:	017f5793          	srli	a5,t5,0x17
 8007432:	0426                	slli	s0,s0,0x9
 8007434:	8c5d                	or	s0,s0,a5
 8007436:	009e1793          	slli	a5,t3,0x9
 800743a:	8fcd                	or	a5,a5,a1
 800743c:	00f037b3          	snez	a5,a5
 8007440:	017e5e13          	srli	t3,t3,0x17
 8007444:	009f1713          	slli	a4,t5,0x9
 8007448:	01c7e7b3          	or	a5,a5,t3
 800744c:	8fd9                	or	a5,a5,a4
 800744e:	00741713          	slli	a4,s0,0x7
 8007452:	0a075863          	bgez	a4,8007502 <__muldf3+0x3a2>
 8007456:	0017d713          	srli	a4,a5,0x1
 800745a:	8b85                	andi	a5,a5,1
 800745c:	8fd9                	or	a5,a5,a4
 800745e:	01f41713          	slli	a4,s0,0x1f
 8007462:	8fd9                	or	a5,a5,a4
 8007464:	8005                	srli	s0,s0,0x1
 8007466:	3ff80693          	addi	a3,a6,1023
 800746a:	08d05e63          	blez	a3,8007506 <__muldf3+0x3a6>
 800746e:	0077f713          	andi	a4,a5,7
 8007472:	cf01                	beqz	a4,800748a <__muldf3+0x32a>
 8007474:	00f7f713          	andi	a4,a5,15
 8007478:	4591                	li	a1,4
 800747a:	00b70863          	beq	a4,a1,800748a <__muldf3+0x32a>
 800747e:	00478713          	addi	a4,a5,4 # 10004 <__stack_size+0xf004>
 8007482:	00f737b3          	sltu	a5,a4,a5
 8007486:	943e                	add	s0,s0,a5
 8007488:	87ba                	mv	a5,a4
 800748a:	00741713          	slli	a4,s0,0x7
 800748e:	00075863          	bgez	a4,800749e <__muldf3+0x33e>
 8007492:	ff000737          	lui	a4,0xff000
 8007496:	177d                	addi	a4,a4,-1
 8007498:	8c79                	and	s0,s0,a4
 800749a:	40080693          	addi	a3,a6,1024
 800749e:	7fe00713          	li	a4,2046
 80074a2:	0ed74c63          	blt	a4,a3,800759a <__muldf3+0x43a>
 80074a6:	0037d713          	srli	a4,a5,0x3
 80074aa:	01d41793          	slli	a5,s0,0x1d
 80074ae:	8fd9                	or	a5,a5,a4
 80074b0:	800d                	srli	s0,s0,0x3
 80074b2:	0432                	slli	s0,s0,0xc
 80074b4:	7ff6f713          	andi	a4,a3,2047
 80074b8:	0752                	slli	a4,a4,0x14
 80074ba:	8031                	srli	s0,s0,0xc
 80074bc:	8c59                	or	s0,s0,a4
 80074be:	067e                	slli	a2,a2,0x1f
 80074c0:	00c46733          	or	a4,s0,a2
 80074c4:	50b2                	lw	ra,44(sp)
 80074c6:	5422                	lw	s0,40(sp)
 80074c8:	5492                	lw	s1,36(sp)
 80074ca:	5902                	lw	s2,32(sp)
 80074cc:	49f2                	lw	s3,28(sp)
 80074ce:	4a62                	lw	s4,24(sp)
 80074d0:	4ad2                	lw	s5,20(sp)
 80074d2:	4b42                	lw	s6,16(sp)
 80074d4:	4bb2                	lw	s7,12(sp)
 80074d6:	853e                	mv	a0,a5
 80074d8:	85ba                	mv	a1,a4
 80074da:	6145                	addi	sp,sp,48
 80074dc:	8082                	ret
 80074de:	8652                	mv	a2,s4
 80074e0:	8426                	mv	s0,s1
 80074e2:	87ca                	mv	a5,s2
 80074e4:	875e                	mv	a4,s7
 80074e6:	4689                	li	a3,2
 80074e8:	0ad70963          	beq	a4,a3,800759a <__muldf3+0x43a>
 80074ec:	468d                	li	a3,3
 80074ee:	08d70f63          	beq	a4,a3,800758c <__muldf3+0x42c>
 80074f2:	4685                	li	a3,1
 80074f4:	f6d719e3          	bne	a4,a3,8007466 <__muldf3+0x306>
 80074f8:	4401                	li	s0,0
 80074fa:	4781                	li	a5,0
 80074fc:	a09d                	j	8007562 <__muldf3+0x402>
 80074fe:	8656                	mv	a2,s5
 8007500:	b7dd                	j	80074e6 <__muldf3+0x386>
 8007502:	882a                	mv	a6,a0
 8007504:	b78d                	j	8007466 <__muldf3+0x306>
 8007506:	4585                	li	a1,1
 8007508:	8d95                	sub	a1,a1,a3
 800750a:	03800713          	li	a4,56
 800750e:	feb745e3          	blt	a4,a1,80074f8 <__muldf3+0x398>
 8007512:	477d                	li	a4,31
 8007514:	04b74963          	blt	a4,a1,8007566 <__muldf3+0x406>
 8007518:	41e80813          	addi	a6,a6,1054
 800751c:	01041733          	sll	a4,s0,a6
 8007520:	00b7d6b3          	srl	a3,a5,a1
 8007524:	010797b3          	sll	a5,a5,a6
 8007528:	8f55                	or	a4,a4,a3
 800752a:	00f037b3          	snez	a5,a5
 800752e:	8fd9                	or	a5,a5,a4
 8007530:	00b45433          	srl	s0,s0,a1
 8007534:	0077f713          	andi	a4,a5,7
 8007538:	cf01                	beqz	a4,8007550 <__muldf3+0x3f0>
 800753a:	00f7f713          	andi	a4,a5,15
 800753e:	4691                	li	a3,4
 8007540:	00d70863          	beq	a4,a3,8007550 <__muldf3+0x3f0>
 8007544:	00478713          	addi	a4,a5,4
 8007548:	00f737b3          	sltu	a5,a4,a5
 800754c:	943e                	add	s0,s0,a5
 800754e:	87ba                	mv	a5,a4
 8007550:	00841713          	slli	a4,s0,0x8
 8007554:	04074863          	bltz	a4,80075a4 <__muldf3+0x444>
 8007558:	01d41713          	slli	a4,s0,0x1d
 800755c:	838d                	srli	a5,a5,0x3
 800755e:	8fd9                	or	a5,a5,a4
 8007560:	800d                	srli	s0,s0,0x3
 8007562:	4681                	li	a3,0
 8007564:	b7b9                	j	80074b2 <__muldf3+0x352>
 8007566:	5705                	li	a4,-31
 8007568:	8f15                	sub	a4,a4,a3
 800756a:	02000513          	li	a0,32
 800756e:	00e45733          	srl	a4,s0,a4
 8007572:	4681                	li	a3,0
 8007574:	00a58663          	beq	a1,a0,8007580 <__muldf3+0x420>
 8007578:	43e80813          	addi	a6,a6,1086
 800757c:	010416b3          	sll	a3,s0,a6
 8007580:	8fd5                	or	a5,a5,a3
 8007582:	00f037b3          	snez	a5,a5
 8007586:	8fd9                	or	a5,a5,a4
 8007588:	4401                	li	s0,0
 800758a:	b76d                	j	8007534 <__muldf3+0x3d4>
 800758c:	00080437          	lui	s0,0x80
 8007590:	4781                	li	a5,0
 8007592:	7ff00693          	li	a3,2047
 8007596:	4601                	li	a2,0
 8007598:	bf29                	j	80074b2 <__muldf3+0x352>
 800759a:	4401                	li	s0,0
 800759c:	4781                	li	a5,0
 800759e:	7ff00693          	li	a3,2047
 80075a2:	bf01                	j	80074b2 <__muldf3+0x352>
 80075a4:	4401                	li	s0,0
 80075a6:	4781                	li	a5,0
 80075a8:	4685                	li	a3,1
 80075aa:	b721                	j	80074b2 <__muldf3+0x352>

080075ac <__fixdfsi>:
 80075ac:	0145d713          	srli	a4,a1,0x14
 80075b0:	001006b7          	lui	a3,0x100
 80075b4:	fff68793          	addi	a5,a3,-1 # fffff <__stack_size+0xfefff>
 80075b8:	7ff77713          	andi	a4,a4,2047
 80075bc:	3fe00613          	li	a2,1022
 80075c0:	8fed                	and	a5,a5,a1
 80075c2:	81fd                	srli	a1,a1,0x1f
 80075c4:	04e65463          	bge	a2,a4,800760c <__fixdfsi+0x60>
 80075c8:	41d00613          	li	a2,1053
 80075cc:	00e65863          	bge	a2,a4,80075dc <__fixdfsi+0x30>
 80075d0:	80000537          	lui	a0,0x80000
 80075d4:	fff54513          	not	a0,a0
 80075d8:	952e                	add	a0,a0,a1
 80075da:	8082                	ret
 80075dc:	8fd5                	or	a5,a5,a3
 80075de:	43300693          	li	a3,1075
 80075e2:	8e99                	sub	a3,a3,a4
 80075e4:	467d                	li	a2,31
 80075e6:	00d64d63          	blt	a2,a3,8007600 <__fixdfsi+0x54>
 80075ea:	bed70713          	addi	a4,a4,-1043 # fefffbed <_sp+0xdeff7bed>
 80075ee:	00e797b3          	sll	a5,a5,a4
 80075f2:	00d55533          	srl	a0,a0,a3
 80075f6:	8d5d                	or	a0,a0,a5
 80075f8:	c999                	beqz	a1,800760e <__fixdfsi+0x62>
 80075fa:	40a00533          	neg	a0,a0
 80075fe:	8082                	ret
 8007600:	41300513          	li	a0,1043
 8007604:	8d19                	sub	a0,a0,a4
 8007606:	00a7d533          	srl	a0,a5,a0
 800760a:	b7fd                	j	80075f8 <__fixdfsi+0x4c>
 800760c:	4501                	li	a0,0
 800760e:	8082                	ret

08007610 <__floatsidf>:
 8007610:	1141                	addi	sp,sp,-16
 8007612:	c606                	sw	ra,12(sp)
 8007614:	c422                	sw	s0,8(sp)
 8007616:	c226                	sw	s1,4(sp)
 8007618:	c12d                	beqz	a0,800767a <__floatsidf+0x6a>
 800761a:	41f55793          	srai	a5,a0,0x1f
 800761e:	00a7c433          	xor	s0,a5,a0
 8007622:	8c1d                	sub	s0,s0,a5
 8007624:	01f55493          	srli	s1,a0,0x1f
 8007628:	8522                	mv	a0,s0
 800762a:	00000097          	auipc	ra,0x0
 800762e:	266080e7          	jalr	614(ra) # 8007890 <__clzsi2>
 8007632:	41e00713          	li	a4,1054
 8007636:	47a9                	li	a5,10
 8007638:	8f09                	sub	a4,a4,a0
 800763a:	02a7ca63          	blt	a5,a0,800766e <__floatsidf+0x5e>
 800763e:	47ad                	li	a5,11
 8007640:	8f89                	sub	a5,a5,a0
 8007642:	0555                	addi	a0,a0,21
 8007644:	00f457b3          	srl	a5,s0,a5
 8007648:	00a41433          	sll	s0,s0,a0
 800764c:	8526                	mv	a0,s1
 800764e:	07b2                	slli	a5,a5,0xc
 8007650:	7ff77713          	andi	a4,a4,2047
 8007654:	0752                	slli	a4,a4,0x14
 8007656:	83b1                	srli	a5,a5,0xc
 8007658:	057e                	slli	a0,a0,0x1f
 800765a:	8fd9                	or	a5,a5,a4
 800765c:	00a7e733          	or	a4,a5,a0
 8007660:	40b2                	lw	ra,12(sp)
 8007662:	8522                	mv	a0,s0
 8007664:	4422                	lw	s0,8(sp)
 8007666:	4492                	lw	s1,4(sp)
 8007668:	85ba                	mv	a1,a4
 800766a:	0141                	addi	sp,sp,16
 800766c:	8082                	ret
 800766e:	1555                	addi	a0,a0,-11
 8007670:	00a417b3          	sll	a5,s0,a0
 8007674:	8526                	mv	a0,s1
 8007676:	4401                	li	s0,0
 8007678:	bfd9                	j	800764e <__floatsidf+0x3e>
 800767a:	4701                	li	a4,0
 800767c:	4781                	li	a5,0
 800767e:	bfe5                	j	8007676 <__floatsidf+0x66>

08007680 <__floatunsidf>:
 8007680:	1141                	addi	sp,sp,-16
 8007682:	c422                	sw	s0,8(sp)
 8007684:	c606                	sw	ra,12(sp)
 8007686:	842a                	mv	s0,a0
 8007688:	c521                	beqz	a0,80076d0 <__floatunsidf+0x50>
 800768a:	00000097          	auipc	ra,0x0
 800768e:	206080e7          	jalr	518(ra) # 8007890 <__clzsi2>
 8007692:	41e00713          	li	a4,1054
 8007696:	47a9                	li	a5,10
 8007698:	8f09                	sub	a4,a4,a0
 800769a:	02a7c663          	blt	a5,a0,80076c6 <__floatunsidf+0x46>
 800769e:	47ad                	li	a5,11
 80076a0:	8f89                	sub	a5,a5,a0
 80076a2:	0555                	addi	a0,a0,21
 80076a4:	00f457b3          	srl	a5,s0,a5
 80076a8:	00a41433          	sll	s0,s0,a0
 80076ac:	8522                	mv	a0,s0
 80076ae:	40b2                	lw	ra,12(sp)
 80076b0:	4422                	lw	s0,8(sp)
 80076b2:	07b2                	slli	a5,a5,0xc
 80076b4:	7ff77713          	andi	a4,a4,2047
 80076b8:	0752                	slli	a4,a4,0x14
 80076ba:	83b1                	srli	a5,a5,0xc
 80076bc:	00e7e6b3          	or	a3,a5,a4
 80076c0:	85b6                	mv	a1,a3
 80076c2:	0141                	addi	sp,sp,16
 80076c4:	8082                	ret
 80076c6:	1555                	addi	a0,a0,-11
 80076c8:	00a417b3          	sll	a5,s0,a0
 80076cc:	4401                	li	s0,0
 80076ce:	bff9                	j	80076ac <__floatunsidf+0x2c>
 80076d0:	4781                	li	a5,0
 80076d2:	4701                	li	a4,0
 80076d4:	bfe1                	j	80076ac <__floatunsidf+0x2c>

080076d6 <__floatundidf>:
 80076d6:	1101                	addi	sp,sp,-32
 80076d8:	ce06                	sw	ra,28(sp)
 80076da:	cc22                	sw	s0,24(sp)
 80076dc:	ca26                	sw	s1,20(sp)
 80076de:	c84a                	sw	s2,16(sp)
 80076e0:	c64e                	sw	s3,12(sp)
 80076e2:	c452                	sw	s4,8(sp)
 80076e4:	00b567b3          	or	a5,a0,a1
 80076e8:	14078663          	beqz	a5,8007834 <__floatundidf+0x15e>
 80076ec:	842a                	mv	s0,a0
 80076ee:	892e                	mv	s2,a1
 80076f0:	84ae                	mv	s1,a1
 80076f2:	c5bd                	beqz	a1,8007760 <__floatundidf+0x8a>
 80076f4:	852e                	mv	a0,a1
 80076f6:	00000097          	auipc	ra,0x0
 80076fa:	19a080e7          	jalr	410(ra) # 8007890 <__clzsi2>
 80076fe:	89aa                	mv	s3,a0
 8007700:	43e00a13          	li	s4,1086
 8007704:	413a0a33          	sub	s4,s4,s3
 8007708:	43300793          	li	a5,1075
 800770c:	0747c763          	blt	a5,s4,800777a <__floatundidf+0xa4>
 8007710:	47ad                	li	a5,11
 8007712:	8522                	mv	a0,s0
 8007714:	0337d363          	bge	a5,s3,800773a <__floatundidf+0x64>
 8007718:	02a00793          	li	a5,42
 800771c:	0537c963          	blt	a5,s3,800776e <__floatundidf+0x98>
 8007720:	02b00593          	li	a1,43
 8007724:	ff598793          	addi	a5,s3,-11
 8007728:	413585b3          	sub	a1,a1,s3
 800772c:	00b455b3          	srl	a1,s0,a1
 8007730:	00f914b3          	sll	s1,s2,a5
 8007734:	8ccd                	or	s1,s1,a1
 8007736:	00f41533          	sll	a0,s0,a5
 800773a:	00c49593          	slli	a1,s1,0xc
 800773e:	40f2                	lw	ra,28(sp)
 8007740:	4462                	lw	s0,24(sp)
 8007742:	7ffa7a13          	andi	s4,s4,2047
 8007746:	0a52                	slli	s4,s4,0x14
 8007748:	81b1                	srli	a1,a1,0xc
 800774a:	0145e7b3          	or	a5,a1,s4
 800774e:	872a                	mv	a4,a0
 8007750:	44d2                	lw	s1,20(sp)
 8007752:	4942                	lw	s2,16(sp)
 8007754:	49b2                	lw	s3,12(sp)
 8007756:	4a22                	lw	s4,8(sp)
 8007758:	853a                	mv	a0,a4
 800775a:	85be                	mv	a1,a5
 800775c:	6105                	addi	sp,sp,32
 800775e:	8082                	ret
 8007760:	00000097          	auipc	ra,0x0
 8007764:	130080e7          	jalr	304(ra) # 8007890 <__clzsi2>
 8007768:	02050993          	addi	s3,a0,32 # 80000020 <_sp+0x5fff8020>
 800776c:	bf51                	j	8007700 <__floatundidf+0x2a>
 800776e:	fd598593          	addi	a1,s3,-43
 8007772:	00b414b3          	sll	s1,s0,a1
 8007776:	4501                	li	a0,0
 8007778:	b7c9                	j	800773a <__floatundidf+0x64>
 800777a:	43600793          	li	a5,1078
 800777e:	0347d963          	bge	a5,s4,80077b0 <__floatundidf+0xda>
 8007782:	03898613          	addi	a2,s3,56
 8007786:	8522                	mv	a0,s0
 8007788:	85ca                	mv	a1,s2
 800778a:	00000097          	auipc	ra,0x0
 800778e:	0dc080e7          	jalr	220(ra) # 8007866 <__ashldi3>
 8007792:	8dc9                	or	a1,a1,a0
 8007794:	4621                	li	a2,8
 8007796:	00b034b3          	snez	s1,a1
 800779a:	8522                	mv	a0,s0
 800779c:	85ca                	mv	a1,s2
 800779e:	41360633          	sub	a2,a2,s3
 80077a2:	00000097          	auipc	ra,0x0
 80077a6:	09a080e7          	jalr	154(ra) # 800783c <__lshrdi3>
 80077aa:	00a4e433          	or	s0,s1,a0
 80077ae:	892e                	mv	s2,a1
 80077b0:	47a1                	li	a5,8
 80077b2:	8522                	mv	a0,s0
 80077b4:	0337d463          	bge	a5,s3,80077dc <__floatundidf+0x106>
 80077b8:	02700793          	li	a5,39
 80077bc:	0737c663          	blt	a5,s3,8007828 <__floatundidf+0x152>
 80077c0:	02800593          	li	a1,40
 80077c4:	ff898793          	addi	a5,s3,-8
 80077c8:	413585b3          	sub	a1,a1,s3
 80077cc:	00f91933          	sll	s2,s2,a5
 80077d0:	00b455b3          	srl	a1,s0,a1
 80077d4:	0125e933          	or	s2,a1,s2
 80077d8:	00f41533          	sll	a0,s0,a5
 80077dc:	ff8007b7          	lui	a5,0xff800
 80077e0:	17fd                	addi	a5,a5,-1
 80077e2:	00f975b3          	and	a1,s2,a5
 80077e6:	00757793          	andi	a5,a0,7
 80077ea:	cf81                	beqz	a5,8007802 <__floatundidf+0x12c>
 80077ec:	00f57793          	andi	a5,a0,15
 80077f0:	4711                	li	a4,4
 80077f2:	00e78863          	beq	a5,a4,8007802 <__floatundidf+0x12c>
 80077f6:	00450793          	addi	a5,a0,4
 80077fa:	00a7b533          	sltu	a0,a5,a0
 80077fe:	95aa                	add	a1,a1,a0
 8007800:	853e                	mv	a0,a5
 8007802:	00859793          	slli	a5,a1,0x8
 8007806:	0007da63          	bgez	a5,800781a <__floatundidf+0x144>
 800780a:	ff8007b7          	lui	a5,0xff800
 800780e:	17fd                	addi	a5,a5,-1
 8007810:	43f00a13          	li	s4,1087
 8007814:	8dfd                	and	a1,a1,a5
 8007816:	413a0a33          	sub	s4,s4,s3
 800781a:	810d                	srli	a0,a0,0x3
 800781c:	01d59793          	slli	a5,a1,0x1d
 8007820:	8d5d                	or	a0,a0,a5
 8007822:	0035d493          	srli	s1,a1,0x3
 8007826:	bf11                	j	800773a <__floatundidf+0x64>
 8007828:	fd898913          	addi	s2,s3,-40
 800782c:	01241933          	sll	s2,s0,s2
 8007830:	4501                	li	a0,0
 8007832:	b76d                	j	80077dc <__floatundidf+0x106>
 8007834:	4481                	li	s1,0
 8007836:	4501                	li	a0,0
 8007838:	4a01                	li	s4,0
 800783a:	b701                	j	800773a <__floatundidf+0x64>

0800783c <__lshrdi3>:
 800783c:	ce01                	beqz	a2,8007854 <__lshrdi3+0x18>
 800783e:	02000793          	li	a5,32
 8007842:	8f91                	sub	a5,a5,a2
 8007844:	00f04963          	bgtz	a5,8007856 <__lshrdi3+0x1a>
 8007848:	fe060513          	addi	a0,a2,-32 # dffe0 <__stack_size+0xdefe0>
 800784c:	4701                	li	a4,0
 800784e:	00a5d533          	srl	a0,a1,a0
 8007852:	85ba                	mv	a1,a4
 8007854:	8082                	ret
 8007856:	00c5d733          	srl	a4,a1,a2
 800785a:	00c55533          	srl	a0,a0,a2
 800785e:	00f595b3          	sll	a1,a1,a5
 8007862:	8d4d                	or	a0,a0,a1
 8007864:	b7fd                	j	8007852 <__lshrdi3+0x16>

08007866 <__ashldi3>:
 8007866:	ce01                	beqz	a2,800787e <__ashldi3+0x18>
 8007868:	02000793          	li	a5,32
 800786c:	8f91                	sub	a5,a5,a2
 800786e:	00f04963          	bgtz	a5,8007880 <__ashldi3+0x1a>
 8007872:	fe060593          	addi	a1,a2,-32
 8007876:	4701                	li	a4,0
 8007878:	00b515b3          	sll	a1,a0,a1
 800787c:	853a                	mv	a0,a4
 800787e:	8082                	ret
 8007880:	00c51733          	sll	a4,a0,a2
 8007884:	00c595b3          	sll	a1,a1,a2
 8007888:	00f55533          	srl	a0,a0,a5
 800788c:	8dc9                	or	a1,a1,a0
 800788e:	b7fd                	j	800787c <__ashldi3+0x16>

08007890 <__clzsi2>:
 8007890:	67c1                	lui	a5,0x10
 8007892:	02f57663          	bgeu	a0,a5,80078be <__clzsi2+0x2e>
 8007896:	0ff00793          	li	a5,255
 800789a:	00a7b7b3          	sltu	a5,a5,a0
 800789e:	078e                	slli	a5,a5,0x3
 80078a0:	02000713          	li	a4,32
 80078a4:	8f1d                	sub	a4,a4,a5
 80078a6:	00f557b3          	srl	a5,a0,a5
 80078aa:	ffff9517          	auipc	a0,0xffff9
 80078ae:	c4650513          	addi	a0,a0,-954 # 80004f0 <__clz_tab>
 80078b2:	97aa                	add	a5,a5,a0
 80078b4:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xf000>
 80078b8:	40a70533          	sub	a0,a4,a0
 80078bc:	8082                	ret
 80078be:	01000737          	lui	a4,0x1000
 80078c2:	47c1                	li	a5,16
 80078c4:	fce56ee3          	bltu	a0,a4,80078a0 <__clzsi2+0x10>
 80078c8:	47e1                	li	a5,24
 80078ca:	bfd9                	j	80078a0 <__clzsi2+0x10>

080078cc <atexit>:
 80078cc:	85aa                	mv	a1,a0
 80078ce:	4681                	li	a3,0
 80078d0:	4601                	li	a2,0
 80078d2:	4501                	li	a0,0
 80078d4:	00000317          	auipc	t1,0x0
 80078d8:	17e30067          	jr	382(t1) # 8007a52 <__register_exitproc>

080078dc <exit>:
 80078dc:	1141                	addi	sp,sp,-16
 80078de:	c422                	sw	s0,8(sp)
 80078e0:	c606                	sw	ra,12(sp)
 80078e2:	00000797          	auipc	a5,0x0
 80078e6:	1fc78793          	addi	a5,a5,508 # 8007ade <__call_exitprocs>
 80078ea:	842a                	mv	s0,a0
 80078ec:	c791                	beqz	a5,80078f8 <exit+0x1c>
 80078ee:	4581                	li	a1,0
 80078f0:	00000097          	auipc	ra,0x0
 80078f4:	1ee080e7          	jalr	494(ra) # 8007ade <__call_exitprocs>
 80078f8:	00001797          	auipc	a5,0x1
 80078fc:	ccc78793          	addi	a5,a5,-820 # 80085c4 <_global_impure_ptr>
 8007900:	4388                	lw	a0,0(a5)
 8007902:	551c                	lw	a5,40(a0)
 8007904:	c391                	beqz	a5,8007908 <exit+0x2c>
 8007906:	9782                	jalr	a5
 8007908:	8522                	mv	a0,s0
 800790a:	ffffa097          	auipc	ra,0xffffa
 800790e:	38a080e7          	jalr	906(ra) # 8001c94 <_exit>

08007912 <__libc_fini_array>:
 8007912:	1141                	addi	sp,sp,-16
 8007914:	00001797          	auipc	a5,0x1
 8007918:	cb478793          	addi	a5,a5,-844 # 80085c8 <__fini_array_end>
 800791c:	c422                	sw	s0,8(sp)
 800791e:	00001417          	auipc	s0,0x1
 8007922:	caa40413          	addi	s0,s0,-854 # 80085c8 <__fini_array_end>
 8007926:	8c1d                	sub	s0,s0,a5
 8007928:	c226                	sw	s1,4(sp)
 800792a:	c606                	sw	ra,12(sp)
 800792c:	8409                	srai	s0,s0,0x2
 800792e:	84be                	mv	s1,a5
 8007930:	e411                	bnez	s0,800793c <__libc_fini_array+0x2a>
 8007932:	40b2                	lw	ra,12(sp)
 8007934:	4422                	lw	s0,8(sp)
 8007936:	4492                	lw	s1,4(sp)
 8007938:	0141                	addi	sp,sp,16
 800793a:	8082                	ret
 800793c:	147d                	addi	s0,s0,-1
 800793e:	00241793          	slli	a5,s0,0x2
 8007942:	97a6                	add	a5,a5,s1
 8007944:	439c                	lw	a5,0(a5)
 8007946:	9782                	jalr	a5
 8007948:	b7e5                	j	8007930 <__libc_fini_array+0x1e>

0800794a <__libc_init_array>:
 800794a:	1141                	addi	sp,sp,-16
 800794c:	00001797          	auipc	a5,0x1
 8007950:	c7c78793          	addi	a5,a5,-900 # 80085c8 <__fini_array_end>
 8007954:	c422                	sw	s0,8(sp)
 8007956:	00001417          	auipc	s0,0x1
 800795a:	c7240413          	addi	s0,s0,-910 # 80085c8 <__fini_array_end>
 800795e:	8c1d                	sub	s0,s0,a5
 8007960:	c226                	sw	s1,4(sp)
 8007962:	c04a                	sw	s2,0(sp)
 8007964:	c606                	sw	ra,12(sp)
 8007966:	8409                	srai	s0,s0,0x2
 8007968:	4481                	li	s1,0
 800796a:	893e                	mv	s2,a5
 800796c:	02849663          	bne	s1,s0,8007998 <__libc_init_array+0x4e>
 8007970:	00001797          	auipc	a5,0x1
 8007974:	c5878793          	addi	a5,a5,-936 # 80085c8 <__fini_array_end>
 8007978:	00001417          	auipc	s0,0x1
 800797c:	c5040413          	addi	s0,s0,-944 # 80085c8 <__fini_array_end>
 8007980:	8c1d                	sub	s0,s0,a5
 8007982:	8409                	srai	s0,s0,0x2
 8007984:	4481                	li	s1,0
 8007986:	893e                	mv	s2,a5
 8007988:	00849f63          	bne	s1,s0,80079a6 <__libc_init_array+0x5c>
 800798c:	40b2                	lw	ra,12(sp)
 800798e:	4422                	lw	s0,8(sp)
 8007990:	4492                	lw	s1,4(sp)
 8007992:	4902                	lw	s2,0(sp)
 8007994:	0141                	addi	sp,sp,16
 8007996:	8082                	ret
 8007998:	00249793          	slli	a5,s1,0x2
 800799c:	97ca                	add	a5,a5,s2
 800799e:	439c                	lw	a5,0(a5)
 80079a0:	0485                	addi	s1,s1,1
 80079a2:	9782                	jalr	a5
 80079a4:	b7e1                	j	800796c <__libc_init_array+0x22>
 80079a6:	00249793          	slli	a5,s1,0x2
 80079aa:	97ca                	add	a5,a5,s2
 80079ac:	439c                	lw	a5,0(a5)
 80079ae:	0485                	addi	s1,s1,1
 80079b0:	9782                	jalr	a5
 80079b2:	bfd9                	j	8007988 <__libc_init_array+0x3e>

080079b4 <memcpy>:
 80079b4:	832a                	mv	t1,a0
 80079b6:	ca09                	beqz	a2,80079c8 <memcpy+0x14>
 80079b8:	00058383          	lb	t2,0(a1)
 80079bc:	00730023          	sb	t2,0(t1)
 80079c0:	167d                	addi	a2,a2,-1
 80079c2:	0305                	addi	t1,t1,1
 80079c4:	0585                	addi	a1,a1,1
 80079c6:	fa6d                	bnez	a2,80079b8 <memcpy+0x4>
 80079c8:	8082                	ret

080079ca <memset>:
 80079ca:	832a                	mv	t1,a0
 80079cc:	c611                	beqz	a2,80079d8 <memset+0xe>
 80079ce:	00b30023          	sb	a1,0(t1)
 80079d2:	167d                	addi	a2,a2,-1
 80079d4:	0305                	addi	t1,t1,1
 80079d6:	fe65                	bnez	a2,80079ce <memset+0x4>
 80079d8:	8082                	ret

080079da <siprintf>:
 80079da:	7135                	addi	sp,sp,-160
 80079dc:	cb3e                	sw	a5,148(sp)
 80079de:	800007b7          	lui	a5,0x80000
 80079e2:	fff7c793          	not	a5,a5
 80079e6:	ce3e                	sw	a5,28(sp)
 80079e8:	c83e                	sw	a5,16(sp)
 80079ea:	77c1                	lui	a5,0xffff0
 80079ec:	20878793          	addi	a5,a5,520 # ffff0208 <_sp+0xdffe8208>
 80079f0:	c532                	sw	a2,136(sp)
 80079f2:	c736                	sw	a3,140(sp)
 80079f4:	c93a                	sw	a4,144(sp)
 80079f6:	cd42                	sw	a6,152(sp)
 80079f8:	cf46                	sw	a7,156(sp)
 80079fa:	ca3e                	sw	a5,20(sp)
 80079fc:	17ff9797          	auipc	a5,0x17ff9
 8007a00:	b0478793          	addi	a5,a5,-1276 # 20000500 <_impure_ptr>
 8007a04:	c42a                	sw	a0,8(sp)
 8007a06:	cc2a                	sw	a0,24(sp)
 8007a08:	4388                	lw	a0,0(a5)
 8007a0a:	0134                	addi	a3,sp,136
 8007a0c:	862e                	mv	a2,a1
 8007a0e:	002c                	addi	a1,sp,8
 8007a10:	de86                	sw	ra,124(sp)
 8007a12:	c236                	sw	a3,4(sp)
 8007a14:	00000097          	auipc	ra,0x0
 8007a18:	44e080e7          	jalr	1102(ra) # 8007e62 <_svfiprintf_r>
 8007a1c:	47a2                	lw	a5,8(sp)
 8007a1e:	00078023          	sb	zero,0(a5)
 8007a22:	50f6                	lw	ra,124(sp)
 8007a24:	610d                	addi	sp,sp,160
 8007a26:	8082                	ret

08007a28 <strcmp>:
 8007a28:	00054603          	lbu	a2,0(a0)
 8007a2c:	0005c683          	lbu	a3,0(a1)
 8007a30:	0505                	addi	a0,a0,1
 8007a32:	0585                	addi	a1,a1,1
 8007a34:	00d61363          	bne	a2,a3,8007a3a <strcmp+0x12>
 8007a38:	fa65                	bnez	a2,8007a28 <strcmp>
 8007a3a:	40d60533          	sub	a0,a2,a3
 8007a3e:	8082                	ret

08007a40 <strlen>:
 8007a40:	87aa                	mv	a5,a0
 8007a42:	0785                	addi	a5,a5,1
 8007a44:	fff7c703          	lbu	a4,-1(a5)
 8007a48:	ff6d                	bnez	a4,8007a42 <strlen+0x2>
 8007a4a:	40a78533          	sub	a0,a5,a0
 8007a4e:	157d                	addi	a0,a0,-1
 8007a50:	8082                	ret

08007a52 <__register_exitproc>:
 8007a52:	17ff9797          	auipc	a5,0x17ff9
 8007a56:	afe78793          	addi	a5,a5,-1282 # 20000550 <_global_atexit>
 8007a5a:	439c                	lw	a5,0(a5)
 8007a5c:	8e2a                	mv	t3,a0
 8007a5e:	e78d                	bnez	a5,8007a88 <__register_exitproc+0x36>
 8007a60:	17ff9717          	auipc	a4,0x17ff9
 8007a64:	30c70713          	addi	a4,a4,780 # 20000d6c <_global_atexit0>
 8007a68:	17ff9797          	auipc	a5,0x17ff9
 8007a6c:	aee7a423          	sw	a4,-1304(a5) # 20000550 <_global_atexit>
 8007a70:	f7ff8517          	auipc	a0,0xf7ff8
 8007a74:	59050513          	addi	a0,a0,1424 # 0 <__dbg_stack_size>
 8007a78:	87ba                	mv	a5,a4
 8007a7a:	c519                	beqz	a0,8007a88 <__register_exitproc+0x36>
 8007a7c:	411c                	lw	a5,0(a0)
 8007a7e:	17ff9517          	auipc	a0,0x17ff9
 8007a82:	36f52b23          	sw	a5,886(a0) # 20000df4 <_global_atexit0+0x88>
 8007a86:	87ba                	mv	a5,a4
 8007a88:	43d8                	lw	a4,4(a5)
 8007a8a:	487d                	li	a6,31
 8007a8c:	557d                	li	a0,-1
 8007a8e:	04e84763          	blt	a6,a4,8007adc <__register_exitproc+0x8a>
 8007a92:	020e0e63          	beqz	t3,8007ace <__register_exitproc+0x7c>
 8007a96:	0887a803          	lw	a6,136(a5)
 8007a9a:	04080163          	beqz	a6,8007adc <__register_exitproc+0x8a>
 8007a9e:	00271893          	slli	a7,a4,0x2
 8007aa2:	98c2                	add	a7,a7,a6
 8007aa4:	00c8a023          	sw	a2,0(a7)
 8007aa8:	10082303          	lw	t1,256(a6)
 8007aac:	4605                	li	a2,1
 8007aae:	00e61633          	sll	a2,a2,a4
 8007ab2:	00c36333          	or	t1,t1,a2
 8007ab6:	10682023          	sw	t1,256(a6)
 8007aba:	08d8a023          	sw	a3,128(a7)
 8007abe:	4689                	li	a3,2
 8007ac0:	00de1763          	bne	t3,a3,8007ace <__register_exitproc+0x7c>
 8007ac4:	10482683          	lw	a3,260(a6)
 8007ac8:	8e55                	or	a2,a2,a3
 8007aca:	10c82223          	sw	a2,260(a6)
 8007ace:	00170693          	addi	a3,a4,1
 8007ad2:	070a                	slli	a4,a4,0x2
 8007ad4:	c3d4                	sw	a3,4(a5)
 8007ad6:	97ba                	add	a5,a5,a4
 8007ad8:	c78c                	sw	a1,8(a5)
 8007ada:	4501                	li	a0,0
 8007adc:	8082                	ret

08007ade <__call_exitprocs>:
 8007ade:	7179                	addi	sp,sp,-48
 8007ae0:	cc52                	sw	s4,24(sp)
 8007ae2:	ca56                	sw	s5,20(sp)
 8007ae4:	c85a                	sw	s6,16(sp)
 8007ae6:	c65e                	sw	s7,12(sp)
 8007ae8:	d606                	sw	ra,44(sp)
 8007aea:	d422                	sw	s0,40(sp)
 8007aec:	d226                	sw	s1,36(sp)
 8007aee:	d04a                	sw	s2,32(sp)
 8007af0:	ce4e                	sw	s3,28(sp)
 8007af2:	c462                	sw	s8,8(sp)
 8007af4:	8b2a                	mv	s6,a0
 8007af6:	8a2e                	mv	s4,a1
 8007af8:	17ff9a97          	auipc	s5,0x17ff9
 8007afc:	a58a8a93          	addi	s5,s5,-1448 # 20000550 <_global_atexit>
 8007b00:	4b85                	li	s7,1
 8007b02:	000aa403          	lw	s0,0(s5)
 8007b06:	c811                	beqz	s0,8007b1a <__call_exitprocs+0x3c>
 8007b08:	4044                	lw	s1,4(s0)
 8007b0a:	08842983          	lw	s3,136(s0)
 8007b0e:	fff48913          	addi	s2,s1,-1 # 7ffff <__stack_size+0x7efff>
 8007b12:	048a                	slli	s1,s1,0x2
 8007b14:	94a2                	add	s1,s1,s0
 8007b16:	00095e63          	bgez	s2,8007b32 <__call_exitprocs+0x54>
 8007b1a:	50b2                	lw	ra,44(sp)
 8007b1c:	5422                	lw	s0,40(sp)
 8007b1e:	5492                	lw	s1,36(sp)
 8007b20:	5902                	lw	s2,32(sp)
 8007b22:	49f2                	lw	s3,28(sp)
 8007b24:	4a62                	lw	s4,24(sp)
 8007b26:	4ad2                	lw	s5,20(sp)
 8007b28:	4b42                	lw	s6,16(sp)
 8007b2a:	4bb2                	lw	s7,12(sp)
 8007b2c:	4c22                	lw	s8,8(sp)
 8007b2e:	6145                	addi	sp,sp,48
 8007b30:	8082                	ret
 8007b32:	000a0e63          	beqz	s4,8007b4e <__call_exitprocs+0x70>
 8007b36:	00099563          	bnez	s3,8007b40 <__call_exitprocs+0x62>
 8007b3a:	197d                	addi	s2,s2,-1
 8007b3c:	14f1                	addi	s1,s1,-4
 8007b3e:	bfe1                	j	8007b16 <__call_exitprocs+0x38>
 8007b40:	00291793          	slli	a5,s2,0x2
 8007b44:	97ce                	add	a5,a5,s3
 8007b46:	0807a783          	lw	a5,128(a5)
 8007b4a:	ff4798e3          	bne	a5,s4,8007b3a <__call_exitprocs+0x5c>
 8007b4e:	4058                	lw	a4,4(s0)
 8007b50:	40dc                	lw	a5,4(s1)
 8007b52:	177d                	addi	a4,a4,-1
 8007b54:	03271863          	bne	a4,s2,8007b84 <__call_exitprocs+0xa6>
 8007b58:	01242223          	sw	s2,4(s0)
 8007b5c:	dff9                	beqz	a5,8007b3a <__call_exitprocs+0x5c>
 8007b5e:	00442c03          	lw	s8,4(s0)
 8007b62:	00098863          	beqz	s3,8007b72 <__call_exitprocs+0x94>
 8007b66:	1009a683          	lw	a3,256(s3)
 8007b6a:	012b9733          	sll	a4,s7,s2
 8007b6e:	8ef9                	and	a3,a3,a4
 8007b70:	ee89                	bnez	a3,8007b8a <__call_exitprocs+0xac>
 8007b72:	9782                	jalr	a5
 8007b74:	4058                	lw	a4,4(s0)
 8007b76:	000aa783          	lw	a5,0(s5)
 8007b7a:	f98714e3          	bne	a4,s8,8007b02 <__call_exitprocs+0x24>
 8007b7e:	faf40ee3          	beq	s0,a5,8007b3a <__call_exitprocs+0x5c>
 8007b82:	b741                	j	8007b02 <__call_exitprocs+0x24>
 8007b84:	0004a223          	sw	zero,4(s1)
 8007b88:	bfd1                	j	8007b5c <__call_exitprocs+0x7e>
 8007b8a:	00291693          	slli	a3,s2,0x2
 8007b8e:	96ce                	add	a3,a3,s3
 8007b90:	428c                	lw	a1,0(a3)
 8007b92:	1049a683          	lw	a3,260(s3)
 8007b96:	8f75                	and	a4,a4,a3
 8007b98:	e701                	bnez	a4,8007ba0 <__call_exitprocs+0xc2>
 8007b9a:	855a                	mv	a0,s6
 8007b9c:	9782                	jalr	a5
 8007b9e:	bfd9                	j	8007b74 <__call_exitprocs+0x96>
 8007ba0:	852e                	mv	a0,a1
 8007ba2:	9782                	jalr	a5
 8007ba4:	bfc1                	j	8007b74 <__call_exitprocs+0x96>

08007ba6 <_free_r>:
 8007ba6:	c9dd                	beqz	a1,8007c5c <_free_r+0xb6>
 8007ba8:	ffc5a783          	lw	a5,-4(a1)
 8007bac:	1141                	addi	sp,sp,-16
 8007bae:	c422                	sw	s0,8(sp)
 8007bb0:	c606                	sw	ra,12(sp)
 8007bb2:	c226                	sw	s1,4(sp)
 8007bb4:	ffc58413          	addi	s0,a1,-4
 8007bb8:	0007d363          	bgez	a5,8007bbe <_free_r+0x18>
 8007bbc:	943e                	add	s0,s0,a5
 8007bbe:	84aa                	mv	s1,a0
 8007bc0:	00001097          	auipc	ra,0x1
 8007bc4:	96c080e7          	jalr	-1684(ra) # 800852c <__malloc_lock>
 8007bc8:	17ff9797          	auipc	a5,0x17ff9
 8007bcc:	98c78793          	addi	a5,a5,-1652 # 20000554 <__malloc_free_list>
 8007bd0:	439c                	lw	a5,0(a5)
 8007bd2:	e385                	bnez	a5,8007bf2 <_free_r+0x4c>
 8007bd4:	00042223          	sw	zero,4(s0)
 8007bd8:	17ff9797          	auipc	a5,0x17ff9
 8007bdc:	9687ae23          	sw	s0,-1668(a5) # 20000554 <__malloc_free_list>
 8007be0:	4422                	lw	s0,8(sp)
 8007be2:	40b2                	lw	ra,12(sp)
 8007be4:	8526                	mv	a0,s1
 8007be6:	4492                	lw	s1,4(sp)
 8007be8:	0141                	addi	sp,sp,16
 8007bea:	00001317          	auipc	t1,0x1
 8007bee:	94430067          	jr	-1724(t1) # 800852e <__malloc_unlock>
 8007bf2:	00f47e63          	bgeu	s0,a5,8007c0e <_free_r+0x68>
 8007bf6:	4014                	lw	a3,0(s0)
 8007bf8:	00d40733          	add	a4,s0,a3
 8007bfc:	00e79663          	bne	a5,a4,8007c08 <_free_r+0x62>
 8007c00:	4398                	lw	a4,0(a5)
 8007c02:	43dc                	lw	a5,4(a5)
 8007c04:	9736                	add	a4,a4,a3
 8007c06:	c018                	sw	a4,0(s0)
 8007c08:	c05c                	sw	a5,4(s0)
 8007c0a:	b7f9                	j	8007bd8 <_free_r+0x32>
 8007c0c:	87ba                	mv	a5,a4
 8007c0e:	43d8                	lw	a4,4(a5)
 8007c10:	c319                	beqz	a4,8007c16 <_free_r+0x70>
 8007c12:	fee47de3          	bgeu	s0,a4,8007c0c <_free_r+0x66>
 8007c16:	4394                	lw	a3,0(a5)
 8007c18:	00d78633          	add	a2,a5,a3
 8007c1c:	00861f63          	bne	a2,s0,8007c3a <_free_r+0x94>
 8007c20:	4010                	lw	a2,0(s0)
 8007c22:	96b2                	add	a3,a3,a2
 8007c24:	c394                	sw	a3,0(a5)
 8007c26:	00d78633          	add	a2,a5,a3
 8007c2a:	fac71be3          	bne	a4,a2,8007be0 <_free_r+0x3a>
 8007c2e:	4310                	lw	a2,0(a4)
 8007c30:	4358                	lw	a4,4(a4)
 8007c32:	96b2                	add	a3,a3,a2
 8007c34:	c394                	sw	a3,0(a5)
 8007c36:	c3d8                	sw	a4,4(a5)
 8007c38:	b765                	j	8007be0 <_free_r+0x3a>
 8007c3a:	00c47563          	bgeu	s0,a2,8007c44 <_free_r+0x9e>
 8007c3e:	47b1                	li	a5,12
 8007c40:	c09c                	sw	a5,0(s1)
 8007c42:	bf79                	j	8007be0 <_free_r+0x3a>
 8007c44:	4010                	lw	a2,0(s0)
 8007c46:	00c406b3          	add	a3,s0,a2
 8007c4a:	00d71663          	bne	a4,a3,8007c56 <_free_r+0xb0>
 8007c4e:	4314                	lw	a3,0(a4)
 8007c50:	4358                	lw	a4,4(a4)
 8007c52:	96b2                	add	a3,a3,a2
 8007c54:	c014                	sw	a3,0(s0)
 8007c56:	c058                	sw	a4,4(s0)
 8007c58:	c3c0                	sw	s0,4(a5)
 8007c5a:	b759                	j	8007be0 <_free_r+0x3a>
 8007c5c:	8082                	ret

08007c5e <_malloc_r>:
 8007c5e:	1101                	addi	sp,sp,-32
 8007c60:	ca26                	sw	s1,20(sp)
 8007c62:	00358493          	addi	s1,a1,3
 8007c66:	98f1                	andi	s1,s1,-4
 8007c68:	ce06                	sw	ra,28(sp)
 8007c6a:	cc22                	sw	s0,24(sp)
 8007c6c:	c84a                	sw	s2,16(sp)
 8007c6e:	c64e                	sw	s3,12(sp)
 8007c70:	04a1                	addi	s1,s1,8
 8007c72:	47b1                	li	a5,12
 8007c74:	06f4f363          	bgeu	s1,a5,8007cda <_malloc_r+0x7c>
 8007c78:	44b1                	li	s1,12
 8007c7a:	06b4e263          	bltu	s1,a1,8007cde <_malloc_r+0x80>
 8007c7e:	892a                	mv	s2,a0
 8007c80:	00001097          	auipc	ra,0x1
 8007c84:	8ac080e7          	jalr	-1876(ra) # 800852c <__malloc_lock>
 8007c88:	17ff9797          	auipc	a5,0x17ff9
 8007c8c:	8cc78793          	addi	a5,a5,-1844 # 20000554 <__malloc_free_list>
 8007c90:	4398                	lw	a4,0(a5)
 8007c92:	843a                	mv	s0,a4
 8007c94:	ec39                	bnez	s0,8007cf2 <_malloc_r+0x94>
 8007c96:	17ff9797          	auipc	a5,0x17ff9
 8007c9a:	8c278793          	addi	a5,a5,-1854 # 20000558 <__malloc_sbrk_start>
 8007c9e:	439c                	lw	a5,0(a5)
 8007ca0:	eb99                	bnez	a5,8007cb6 <_malloc_r+0x58>
 8007ca2:	4581                	li	a1,0
 8007ca4:	854a                	mv	a0,s2
 8007ca6:	00001097          	auipc	ra,0x1
 8007caa:	810080e7          	jalr	-2032(ra) # 80084b6 <_sbrk_r>
 8007cae:	17ff9797          	auipc	a5,0x17ff9
 8007cb2:	8aa7a523          	sw	a0,-1878(a5) # 20000558 <__malloc_sbrk_start>
 8007cb6:	85a6                	mv	a1,s1
 8007cb8:	854a                	mv	a0,s2
 8007cba:	00000097          	auipc	ra,0x0
 8007cbe:	7fc080e7          	jalr	2044(ra) # 80084b6 <_sbrk_r>
 8007cc2:	59fd                	li	s3,-1
 8007cc4:	07351f63          	bne	a0,s3,8007d42 <_malloc_r+0xe4>
 8007cc8:	47b1                	li	a5,12
 8007cca:	00f92023          	sw	a5,0(s2)
 8007cce:	854a                	mv	a0,s2
 8007cd0:	00001097          	auipc	ra,0x1
 8007cd4:	85e080e7          	jalr	-1954(ra) # 800852e <__malloc_unlock>
 8007cd8:	a029                	j	8007ce2 <_malloc_r+0x84>
 8007cda:	fa04d0e3          	bgez	s1,8007c7a <_malloc_r+0x1c>
 8007cde:	47b1                	li	a5,12
 8007ce0:	c11c                	sw	a5,0(a0)
 8007ce2:	4501                	li	a0,0
 8007ce4:	40f2                	lw	ra,28(sp)
 8007ce6:	4462                	lw	s0,24(sp)
 8007ce8:	44d2                	lw	s1,20(sp)
 8007cea:	4942                	lw	s2,16(sp)
 8007cec:	49b2                	lw	s3,12(sp)
 8007cee:	6105                	addi	sp,sp,32
 8007cf0:	8082                	ret
 8007cf2:	401c                	lw	a5,0(s0)
 8007cf4:	8f85                	sub	a5,a5,s1
 8007cf6:	0407c363          	bltz	a5,8007d3c <_malloc_r+0xde>
 8007cfa:	46ad                	li	a3,11
 8007cfc:	00f6f663          	bgeu	a3,a5,8007d08 <_malloc_r+0xaa>
 8007d00:	c01c                	sw	a5,0(s0)
 8007d02:	943e                	add	s0,s0,a5
 8007d04:	c004                	sw	s1,0(s0)
 8007d06:	a801                	j	8007d16 <_malloc_r+0xb8>
 8007d08:	405c                	lw	a5,4(s0)
 8007d0a:	02871763          	bne	a4,s0,8007d38 <_malloc_r+0xda>
 8007d0e:	17ff9717          	auipc	a4,0x17ff9
 8007d12:	84f72323          	sw	a5,-1978(a4) # 20000554 <__malloc_free_list>
 8007d16:	854a                	mv	a0,s2
 8007d18:	00001097          	auipc	ra,0x1
 8007d1c:	816080e7          	jalr	-2026(ra) # 800852e <__malloc_unlock>
 8007d20:	00b40513          	addi	a0,s0,11
 8007d24:	00440793          	addi	a5,s0,4
 8007d28:	9961                	andi	a0,a0,-8
 8007d2a:	40f50733          	sub	a4,a0,a5
 8007d2e:	db5d                	beqz	a4,8007ce4 <_malloc_r+0x86>
 8007d30:	943a                	add	s0,s0,a4
 8007d32:	8f89                	sub	a5,a5,a0
 8007d34:	c01c                	sw	a5,0(s0)
 8007d36:	b77d                	j	8007ce4 <_malloc_r+0x86>
 8007d38:	c35c                	sw	a5,4(a4)
 8007d3a:	bff1                	j	8007d16 <_malloc_r+0xb8>
 8007d3c:	8722                	mv	a4,s0
 8007d3e:	4040                	lw	s0,4(s0)
 8007d40:	bf91                	j	8007c94 <_malloc_r+0x36>
 8007d42:	00350413          	addi	s0,a0,3
 8007d46:	9871                	andi	s0,s0,-4
 8007d48:	fa850ee3          	beq	a0,s0,8007d04 <_malloc_r+0xa6>
 8007d4c:	40a405b3          	sub	a1,s0,a0
 8007d50:	854a                	mv	a0,s2
 8007d52:	00000097          	auipc	ra,0x0
 8007d56:	764080e7          	jalr	1892(ra) # 80084b6 <_sbrk_r>
 8007d5a:	fb3515e3          	bne	a0,s3,8007d04 <_malloc_r+0xa6>
 8007d5e:	b7ad                	j	8007cc8 <_malloc_r+0x6a>

08007d60 <__ssputs_r>:
 8007d60:	1101                	addi	sp,sp,-32
 8007d62:	c84a                	sw	s2,16(sp)
 8007d64:	0085a903          	lw	s2,8(a1)
 8007d68:	cc22                	sw	s0,24(sp)
 8007d6a:	c452                	sw	s4,8(sp)
 8007d6c:	c05a                	sw	s6,0(sp)
 8007d6e:	ce06                	sw	ra,28(sp)
 8007d70:	ca26                	sw	s1,20(sp)
 8007d72:	c64e                	sw	s3,12(sp)
 8007d74:	c256                	sw	s5,4(sp)
 8007d76:	842e                	mv	s0,a1
 8007d78:	8b32                	mv	s6,a2
 8007d7a:	8a36                	mv	s4,a3
 8007d7c:	0b26e263          	bltu	a3,s2,8007e20 <__ssputs_r+0xc0>
 8007d80:	00c5d783          	lhu	a5,12(a1)
 8007d84:	4807f713          	andi	a4,a5,1152
 8007d88:	cb51                	beqz	a4,8007e1c <__ssputs_r+0xbc>
 8007d8a:	4004                	lw	s1,0(s0)
 8007d8c:	498c                	lw	a1,16(a1)
 8007d8e:	4858                	lw	a4,20(s0)
 8007d90:	8aaa                	mv	s5,a0
 8007d92:	40b489b3          	sub	s3,s1,a1
 8007d96:	448d                	li	s1,3
 8007d98:	02e484b3          	mul	s1,s1,a4
 8007d9c:	4709                	li	a4,2
 8007d9e:	02e4c4b3          	div	s1,s1,a4
 8007da2:	00168713          	addi	a4,a3,1
 8007da6:	974e                	add	a4,a4,s3
 8007da8:	00e4f363          	bgeu	s1,a4,8007dae <__ssputs_r+0x4e>
 8007dac:	84ba                	mv	s1,a4
 8007dae:	4007f793          	andi	a5,a5,1024
 8007db2:	cbc9                	beqz	a5,8007e44 <__ssputs_r+0xe4>
 8007db4:	85a6                	mv	a1,s1
 8007db6:	8556                	mv	a0,s5
 8007db8:	00000097          	auipc	ra,0x0
 8007dbc:	ea6080e7          	jalr	-346(ra) # 8007c5e <_malloc_r>
 8007dc0:	892a                	mv	s2,a0
 8007dc2:	e50d                	bnez	a0,8007dec <__ssputs_r+0x8c>
 8007dc4:	47b1                	li	a5,12
 8007dc6:	00faa023          	sw	a5,0(s5)
 8007dca:	00c45783          	lhu	a5,12(s0)
 8007dce:	557d                	li	a0,-1
 8007dd0:	0407e793          	ori	a5,a5,64
 8007dd4:	00f41623          	sh	a5,12(s0)
 8007dd8:	40f2                	lw	ra,28(sp)
 8007dda:	4462                	lw	s0,24(sp)
 8007ddc:	44d2                	lw	s1,20(sp)
 8007dde:	4942                	lw	s2,16(sp)
 8007de0:	49b2                	lw	s3,12(sp)
 8007de2:	4a22                	lw	s4,8(sp)
 8007de4:	4a92                	lw	s5,4(sp)
 8007de6:	4b02                	lw	s6,0(sp)
 8007de8:	6105                	addi	sp,sp,32
 8007dea:	8082                	ret
 8007dec:	480c                	lw	a1,16(s0)
 8007dee:	864e                	mv	a2,s3
 8007df0:	00000097          	auipc	ra,0x0
 8007df4:	bc4080e7          	jalr	-1084(ra) # 80079b4 <memcpy>
 8007df8:	00c45783          	lhu	a5,12(s0)
 8007dfc:	b7f7f793          	andi	a5,a5,-1153
 8007e00:	0807e793          	ori	a5,a5,128
 8007e04:	00f41623          	sh	a5,12(s0)
 8007e08:	01242823          	sw	s2,16(s0)
 8007e0c:	c844                	sw	s1,20(s0)
 8007e0e:	994e                	add	s2,s2,s3
 8007e10:	413484b3          	sub	s1,s1,s3
 8007e14:	01242023          	sw	s2,0(s0)
 8007e18:	c404                	sw	s1,8(s0)
 8007e1a:	8952                	mv	s2,s4
 8007e1c:	012a7363          	bgeu	s4,s2,8007e22 <__ssputs_r+0xc2>
 8007e20:	8952                	mv	s2,s4
 8007e22:	4008                	lw	a0,0(s0)
 8007e24:	864a                	mv	a2,s2
 8007e26:	85da                	mv	a1,s6
 8007e28:	00000097          	auipc	ra,0x0
 8007e2c:	6de080e7          	jalr	1758(ra) # 8008506 <memmove>
 8007e30:	441c                	lw	a5,8(s0)
 8007e32:	4501                	li	a0,0
 8007e34:	412787b3          	sub	a5,a5,s2
 8007e38:	c41c                	sw	a5,8(s0)
 8007e3a:	401c                	lw	a5,0(s0)
 8007e3c:	993e                	add	s2,s2,a5
 8007e3e:	01242023          	sw	s2,0(s0)
 8007e42:	bf59                	j	8007dd8 <__ssputs_r+0x78>
 8007e44:	8626                	mv	a2,s1
 8007e46:	8556                	mv	a0,s5
 8007e48:	00000097          	auipc	ra,0x0
 8007e4c:	6e8080e7          	jalr	1768(ra) # 8008530 <_realloc_r>
 8007e50:	892a                	mv	s2,a0
 8007e52:	f95d                	bnez	a0,8007e08 <__ssputs_r+0xa8>
 8007e54:	480c                	lw	a1,16(s0)
 8007e56:	8556                	mv	a0,s5
 8007e58:	00000097          	auipc	ra,0x0
 8007e5c:	d4e080e7          	jalr	-690(ra) # 8007ba6 <_free_r>
 8007e60:	b795                	j	8007dc4 <__ssputs_r+0x64>

08007e62 <_svfiprintf_r>:
 8007e62:	00c5d783          	lhu	a5,12(a1)
 8007e66:	7171                	addi	sp,sp,-176
 8007e68:	d326                	sw	s1,164(sp)
 8007e6a:	d14a                	sw	s2,160(sp)
 8007e6c:	cf4e                	sw	s3,156(sp)
 8007e6e:	d706                	sw	ra,172(sp)
 8007e70:	d522                	sw	s0,168(sp)
 8007e72:	cd52                	sw	s4,152(sp)
 8007e74:	cb56                	sw	s5,148(sp)
 8007e76:	c95a                	sw	s6,144(sp)
 8007e78:	c75e                	sw	s7,140(sp)
 8007e7a:	c562                	sw	s8,136(sp)
 8007e7c:	c366                	sw	s9,132(sp)
 8007e7e:	0807f793          	andi	a5,a5,128
 8007e82:	89aa                	mv	s3,a0
 8007e84:	892e                	mv	s2,a1
 8007e86:	84b2                	mv	s1,a2
 8007e88:	c7a9                	beqz	a5,8007ed2 <_svfiprintf_r+0x70>
 8007e8a:	499c                	lw	a5,16(a1)
 8007e8c:	e3b9                	bnez	a5,8007ed2 <_svfiprintf_r+0x70>
 8007e8e:	04000593          	li	a1,64
 8007e92:	c636                	sw	a3,12(sp)
 8007e94:	00000097          	auipc	ra,0x0
 8007e98:	dca080e7          	jalr	-566(ra) # 8007c5e <_malloc_r>
 8007e9c:	00a92023          	sw	a0,0(s2)
 8007ea0:	00a92823          	sw	a0,16(s2)
 8007ea4:	46b2                	lw	a3,12(sp)
 8007ea6:	e115                	bnez	a0,8007eca <_svfiprintf_r+0x68>
 8007ea8:	47b1                	li	a5,12
 8007eaa:	00f9a023          	sw	a5,0(s3)
 8007eae:	557d                	li	a0,-1
 8007eb0:	50ba                	lw	ra,172(sp)
 8007eb2:	542a                	lw	s0,168(sp)
 8007eb4:	549a                	lw	s1,164(sp)
 8007eb6:	590a                	lw	s2,160(sp)
 8007eb8:	49fa                	lw	s3,156(sp)
 8007eba:	4a6a                	lw	s4,152(sp)
 8007ebc:	4ada                	lw	s5,148(sp)
 8007ebe:	4b4a                	lw	s6,144(sp)
 8007ec0:	4bba                	lw	s7,140(sp)
 8007ec2:	4c2a                	lw	s8,136(sp)
 8007ec4:	4c9a                	lw	s9,132(sp)
 8007ec6:	614d                	addi	sp,sp,176
 8007ec8:	8082                	ret
 8007eca:	04000793          	li	a5,64
 8007ece:	00f92a23          	sw	a5,20(s2)
 8007ed2:	02000793          	li	a5,32
 8007ed6:	02f10ca3          	sb	a5,57(sp)
 8007eda:	03000793          	li	a5,48
 8007ede:	da02                	sw	zero,52(sp)
 8007ee0:	02f10d23          	sb	a5,58(sp)
 8007ee4:	ce36                	sw	a3,28(sp)
 8007ee6:	02500b93          	li	s7,37
 8007eea:	ffff8a97          	auipc	s5,0xffff8
 8007eee:	766a8a93          	addi	s5,s5,1894 # 8000650 <__sf_fake_stdout+0x20>
 8007ef2:	4c05                	li	s8,1
 8007ef4:	4b29                	li	s6,10
 8007ef6:	8426                	mv	s0,s1
 8007ef8:	00044783          	lbu	a5,0(s0)
 8007efc:	c399                	beqz	a5,8007f02 <_svfiprintf_r+0xa0>
 8007efe:	0b779163          	bne	a5,s7,8007fa0 <_svfiprintf_r+0x13e>
 8007f02:	40940cb3          	sub	s9,s0,s1
 8007f06:	020c8063          	beqz	s9,8007f26 <_svfiprintf_r+0xc4>
 8007f0a:	86e6                	mv	a3,s9
 8007f0c:	8626                	mv	a2,s1
 8007f0e:	85ca                	mv	a1,s2
 8007f10:	854e                	mv	a0,s3
 8007f12:	00000097          	auipc	ra,0x0
 8007f16:	e4e080e7          	jalr	-434(ra) # 8007d60 <__ssputs_r>
 8007f1a:	57fd                	li	a5,-1
 8007f1c:	1af50a63          	beq	a0,a5,80080d0 <_svfiprintf_r+0x26e>
 8007f20:	56d2                	lw	a3,52(sp)
 8007f22:	96e6                	add	a3,a3,s9
 8007f24:	da36                	sw	a3,52(sp)
 8007f26:	00044783          	lbu	a5,0(s0)
 8007f2a:	1a078363          	beqz	a5,80080d0 <_svfiprintf_r+0x26e>
 8007f2e:	57fd                	li	a5,-1
 8007f30:	00140493          	addi	s1,s0,1
 8007f34:	d002                	sw	zero,32(sp)
 8007f36:	d602                	sw	zero,44(sp)
 8007f38:	d23e                	sw	a5,36(sp)
 8007f3a:	d402                	sw	zero,40(sp)
 8007f3c:	060101a3          	sb	zero,99(sp)
 8007f40:	dc82                	sw	zero,120(sp)
 8007f42:	0004c583          	lbu	a1,0(s1)
 8007f46:	4615                	li	a2,5
 8007f48:	8556                	mv	a0,s5
 8007f4a:	00000097          	auipc	ra,0x0
 8007f4e:	5a2080e7          	jalr	1442(ra) # 80084ec <memchr>
 8007f52:	00148413          	addi	s0,s1,1
 8007f56:	5782                	lw	a5,32(sp)
 8007f58:	e531                	bnez	a0,8007fa4 <_svfiprintf_r+0x142>
 8007f5a:	0107f713          	andi	a4,a5,16
 8007f5e:	c709                	beqz	a4,8007f68 <_svfiprintf_r+0x106>
 8007f60:	02000713          	li	a4,32
 8007f64:	06e101a3          	sb	a4,99(sp)
 8007f68:	0087f713          	andi	a4,a5,8
 8007f6c:	c709                	beqz	a4,8007f76 <_svfiprintf_r+0x114>
 8007f6e:	02b00713          	li	a4,43
 8007f72:	06e101a3          	sb	a4,99(sp)
 8007f76:	0004c683          	lbu	a3,0(s1)
 8007f7a:	02a00713          	li	a4,42
 8007f7e:	02e68b63          	beq	a3,a4,8007fb4 <_svfiprintf_r+0x152>
 8007f82:	57b2                	lw	a5,44(sp)
 8007f84:	8426                	mv	s0,s1
 8007f86:	4681                	li	a3,0
 8007f88:	4625                	li	a2,9
 8007f8a:	00044703          	lbu	a4,0(s0)
 8007f8e:	00140593          	addi	a1,s0,1
 8007f92:	fd070713          	addi	a4,a4,-48
 8007f96:	06e67463          	bgeu	a2,a4,8007ffe <_svfiprintf_r+0x19c>
 8007f9a:	c68d                	beqz	a3,8007fc4 <_svfiprintf_r+0x162>
 8007f9c:	d63e                	sw	a5,44(sp)
 8007f9e:	a01d                	j	8007fc4 <_svfiprintf_r+0x162>
 8007fa0:	0405                	addi	s0,s0,1
 8007fa2:	bf99                	j	8007ef8 <_svfiprintf_r+0x96>
 8007fa4:	41550533          	sub	a0,a0,s5
 8007fa8:	00ac1533          	sll	a0,s8,a0
 8007fac:	8fc9                	or	a5,a5,a0
 8007fae:	d03e                	sw	a5,32(sp)
 8007fb0:	84a2                	mv	s1,s0
 8007fb2:	bf41                	j	8007f42 <_svfiprintf_r+0xe0>
 8007fb4:	4772                	lw	a4,28(sp)
 8007fb6:	00470693          	addi	a3,a4,4
 8007fba:	4318                	lw	a4,0(a4)
 8007fbc:	ce36                	sw	a3,28(sp)
 8007fbe:	02074963          	bltz	a4,8007ff0 <_svfiprintf_r+0x18e>
 8007fc2:	d63a                	sw	a4,44(sp)
 8007fc4:	00044703          	lbu	a4,0(s0)
 8007fc8:	02e00793          	li	a5,46
 8007fcc:	04f71f63          	bne	a4,a5,800802a <_svfiprintf_r+0x1c8>
 8007fd0:	00144703          	lbu	a4,1(s0)
 8007fd4:	02a00793          	li	a5,42
 8007fd8:	02f71b63          	bne	a4,a5,800800e <_svfiprintf_r+0x1ac>
 8007fdc:	47f2                	lw	a5,28(sp)
 8007fde:	0409                	addi	s0,s0,2
 8007fe0:	00478713          	addi	a4,a5,4
 8007fe4:	439c                	lw	a5,0(a5)
 8007fe6:	ce3a                	sw	a4,28(sp)
 8007fe8:	0207c163          	bltz	a5,800800a <_svfiprintf_r+0x1a8>
 8007fec:	d23e                	sw	a5,36(sp)
 8007fee:	a835                	j	800802a <_svfiprintf_r+0x1c8>
 8007ff0:	40e00733          	neg	a4,a4
 8007ff4:	0027e793          	ori	a5,a5,2
 8007ff8:	d63a                	sw	a4,44(sp)
 8007ffa:	d03e                	sw	a5,32(sp)
 8007ffc:	b7e1                	j	8007fc4 <_svfiprintf_r+0x162>
 8007ffe:	036787b3          	mul	a5,a5,s6
 8008002:	4685                	li	a3,1
 8008004:	842e                	mv	s0,a1
 8008006:	97ba                	add	a5,a5,a4
 8008008:	b749                	j	8007f8a <_svfiprintf_r+0x128>
 800800a:	57fd                	li	a5,-1
 800800c:	b7c5                	j	8007fec <_svfiprintf_r+0x18a>
 800800e:	0405                	addi	s0,s0,1
 8008010:	d202                	sw	zero,36(sp)
 8008012:	4681                	li	a3,0
 8008014:	4781                	li	a5,0
 8008016:	4625                	li	a2,9
 8008018:	00044703          	lbu	a4,0(s0)
 800801c:	00140593          	addi	a1,s0,1
 8008020:	fd070713          	addi	a4,a4,-48
 8008024:	06e67c63          	bgeu	a2,a4,800809c <_svfiprintf_r+0x23a>
 8008028:	f2f1                	bnez	a3,8007fec <_svfiprintf_r+0x18a>
 800802a:	00044583          	lbu	a1,0(s0)
 800802e:	460d                	li	a2,3
 8008030:	ffff8517          	auipc	a0,0xffff8
 8008034:	62850513          	addi	a0,a0,1576 # 8000658 <__sf_fake_stdout+0x28>
 8008038:	00000097          	auipc	ra,0x0
 800803c:	4b4080e7          	jalr	1204(ra) # 80084ec <memchr>
 8008040:	cd11                	beqz	a0,800805c <_svfiprintf_r+0x1fa>
 8008042:	ffff8797          	auipc	a5,0xffff8
 8008046:	61678793          	addi	a5,a5,1558 # 8000658 <__sf_fake_stdout+0x28>
 800804a:	8d1d                	sub	a0,a0,a5
 800804c:	04000793          	li	a5,64
 8008050:	00a797b3          	sll	a5,a5,a0
 8008054:	5502                	lw	a0,32(sp)
 8008056:	0405                	addi	s0,s0,1
 8008058:	8d5d                	or	a0,a0,a5
 800805a:	d02a                	sw	a0,32(sp)
 800805c:	00044583          	lbu	a1,0(s0)
 8008060:	4619                	li	a2,6
 8008062:	ffff8517          	auipc	a0,0xffff8
 8008066:	5fa50513          	addi	a0,a0,1530 # 800065c <__sf_fake_stdout+0x2c>
 800806a:	00140493          	addi	s1,s0,1
 800806e:	02b10c23          	sb	a1,56(sp)
 8008072:	00000097          	auipc	ra,0x0
 8008076:	47a080e7          	jalr	1146(ra) # 80084ec <memchr>
 800807a:	c525                	beqz	a0,80080e2 <_svfiprintf_r+0x280>
 800807c:	f7ff8797          	auipc	a5,0xf7ff8
 8008080:	f8478793          	addi	a5,a5,-124 # 0 <__dbg_stack_size>
 8008084:	e795                	bnez	a5,80080b0 <_svfiprintf_r+0x24e>
 8008086:	5702                	lw	a4,32(sp)
 8008088:	47f2                	lw	a5,28(sp)
 800808a:	10077713          	andi	a4,a4,256
 800808e:	cf09                	beqz	a4,80080a8 <_svfiprintf_r+0x246>
 8008090:	0791                	addi	a5,a5,4
 8008092:	ce3e                	sw	a5,28(sp)
 8008094:	57d2                	lw	a5,52(sp)
 8008096:	97d2                	add	a5,a5,s4
 8008098:	da3e                	sw	a5,52(sp)
 800809a:	bdb1                	j	8007ef6 <_svfiprintf_r+0x94>
 800809c:	036787b3          	mul	a5,a5,s6
 80080a0:	4685                	li	a3,1
 80080a2:	842e                	mv	s0,a1
 80080a4:	97ba                	add	a5,a5,a4
 80080a6:	bf8d                	j	8008018 <_svfiprintf_r+0x1b6>
 80080a8:	079d                	addi	a5,a5,7
 80080aa:	9be1                	andi	a5,a5,-8
 80080ac:	07a1                	addi	a5,a5,8
 80080ae:	b7d5                	j	8008092 <_svfiprintf_r+0x230>
 80080b0:	0878                	addi	a4,sp,28
 80080b2:	00000697          	auipc	a3,0x0
 80080b6:	cae68693          	addi	a3,a3,-850 # 8007d60 <__ssputs_r>
 80080ba:	864a                	mv	a2,s2
 80080bc:	100c                	addi	a1,sp,32
 80080be:	854e                	mv	a0,s3
 80080c0:	00000097          	auipc	ra,0x0
 80080c4:	000000e7          	jalr	zero # 0 <__dbg_stack_size>
 80080c8:	57fd                	li	a5,-1
 80080ca:	8a2a                	mv	s4,a0
 80080cc:	fcf514e3          	bne	a0,a5,8008094 <_svfiprintf_r+0x232>
 80080d0:	00c95783          	lhu	a5,12(s2)
 80080d4:	557d                	li	a0,-1
 80080d6:	0407f793          	andi	a5,a5,64
 80080da:	dc079be3          	bnez	a5,8007eb0 <_svfiprintf_r+0x4e>
 80080de:	5552                	lw	a0,52(sp)
 80080e0:	bbc1                	j	8007eb0 <_svfiprintf_r+0x4e>
 80080e2:	0878                	addi	a4,sp,28
 80080e4:	00000697          	auipc	a3,0x0
 80080e8:	c7c68693          	addi	a3,a3,-900 # 8007d60 <__ssputs_r>
 80080ec:	864a                	mv	a2,s2
 80080ee:	100c                	addi	a1,sp,32
 80080f0:	854e                	mv	a0,s3
 80080f2:	00000097          	auipc	ra,0x0
 80080f6:	116080e7          	jalr	278(ra) # 8008208 <_printf_i>
 80080fa:	b7f9                	j	80080c8 <_svfiprintf_r+0x266>

080080fc <_printf_common>:
 80080fc:	7179                	addi	sp,sp,-48
 80080fe:	ca56                	sw	s5,20(sp)
 8008100:	499c                	lw	a5,16(a1)
 8008102:	8aba                	mv	s5,a4
 8008104:	4598                	lw	a4,8(a1)
 8008106:	d422                	sw	s0,40(sp)
 8008108:	d226                	sw	s1,36(sp)
 800810a:	ce4e                	sw	s3,28(sp)
 800810c:	cc52                	sw	s4,24(sp)
 800810e:	d606                	sw	ra,44(sp)
 8008110:	d04a                	sw	s2,32(sp)
 8008112:	c85a                	sw	s6,16(sp)
 8008114:	c65e                	sw	s7,12(sp)
 8008116:	89aa                	mv	s3,a0
 8008118:	842e                	mv	s0,a1
 800811a:	84b2                	mv	s1,a2
 800811c:	8a36                	mv	s4,a3
 800811e:	00e7d363          	bge	a5,a4,8008124 <_printf_common+0x28>
 8008122:	87ba                	mv	a5,a4
 8008124:	c09c                	sw	a5,0(s1)
 8008126:	04344703          	lbu	a4,67(s0)
 800812a:	c319                	beqz	a4,8008130 <_printf_common+0x34>
 800812c:	0785                	addi	a5,a5,1
 800812e:	c09c                	sw	a5,0(s1)
 8008130:	401c                	lw	a5,0(s0)
 8008132:	0207f793          	andi	a5,a5,32
 8008136:	c781                	beqz	a5,800813e <_printf_common+0x42>
 8008138:	409c                	lw	a5,0(s1)
 800813a:	0789                	addi	a5,a5,2
 800813c:	c09c                	sw	a5,0(s1)
 800813e:	00042903          	lw	s2,0(s0)
 8008142:	00697913          	andi	s2,s2,6
 8008146:	00091a63          	bnez	s2,800815a <_printf_common+0x5e>
 800814a:	01940b13          	addi	s6,s0,25
 800814e:	5bfd                	li	s7,-1
 8008150:	445c                	lw	a5,12(s0)
 8008152:	4098                	lw	a4,0(s1)
 8008154:	8f99                	sub	a5,a5,a4
 8008156:	04f94c63          	blt	s2,a5,80081ae <_printf_common+0xb2>
 800815a:	401c                	lw	a5,0(s0)
 800815c:	04344683          	lbu	a3,67(s0)
 8008160:	0207f793          	andi	a5,a5,32
 8008164:	00d036b3          	snez	a3,a3
 8008168:	eba5                	bnez	a5,80081d8 <_printf_common+0xdc>
 800816a:	04340613          	addi	a2,s0,67
 800816e:	85d2                	mv	a1,s4
 8008170:	854e                	mv	a0,s3
 8008172:	9a82                	jalr	s5
 8008174:	57fd                	li	a5,-1
 8008176:	04f50363          	beq	a0,a5,80081bc <_printf_common+0xc0>
 800817a:	401c                	lw	a5,0(s0)
 800817c:	4611                	li	a2,4
 800817e:	4098                	lw	a4,0(s1)
 8008180:	8b99                	andi	a5,a5,6
 8008182:	4454                	lw	a3,12(s0)
 8008184:	4481                	li	s1,0
 8008186:	00c79763          	bne	a5,a2,8008194 <_printf_common+0x98>
 800818a:	40e684b3          	sub	s1,a3,a4
 800818e:	0004d363          	bgez	s1,8008194 <_printf_common+0x98>
 8008192:	4481                	li	s1,0
 8008194:	441c                	lw	a5,8(s0)
 8008196:	4818                	lw	a4,16(s0)
 8008198:	00f75463          	bge	a4,a5,80081a0 <_printf_common+0xa4>
 800819c:	8f99                	sub	a5,a5,a4
 800819e:	94be                	add	s1,s1,a5
 80081a0:	4901                	li	s2,0
 80081a2:	0469                	addi	s0,s0,26
 80081a4:	5b7d                	li	s6,-1
 80081a6:	05249863          	bne	s1,s2,80081f6 <_printf_common+0xfa>
 80081aa:	4501                	li	a0,0
 80081ac:	a809                	j	80081be <_printf_common+0xc2>
 80081ae:	4685                	li	a3,1
 80081b0:	865a                	mv	a2,s6
 80081b2:	85d2                	mv	a1,s4
 80081b4:	854e                	mv	a0,s3
 80081b6:	9a82                	jalr	s5
 80081b8:	01751e63          	bne	a0,s7,80081d4 <_printf_common+0xd8>
 80081bc:	557d                	li	a0,-1
 80081be:	50b2                	lw	ra,44(sp)
 80081c0:	5422                	lw	s0,40(sp)
 80081c2:	5492                	lw	s1,36(sp)
 80081c4:	5902                	lw	s2,32(sp)
 80081c6:	49f2                	lw	s3,28(sp)
 80081c8:	4a62                	lw	s4,24(sp)
 80081ca:	4ad2                	lw	s5,20(sp)
 80081cc:	4b42                	lw	s6,16(sp)
 80081ce:	4bb2                	lw	s7,12(sp)
 80081d0:	6145                	addi	sp,sp,48
 80081d2:	8082                	ret
 80081d4:	0905                	addi	s2,s2,1
 80081d6:	bfad                	j	8008150 <_printf_common+0x54>
 80081d8:	00d40733          	add	a4,s0,a3
 80081dc:	03000613          	li	a2,48
 80081e0:	04c701a3          	sb	a2,67(a4)
 80081e4:	04544703          	lbu	a4,69(s0)
 80081e8:	00168793          	addi	a5,a3,1
 80081ec:	97a2                	add	a5,a5,s0
 80081ee:	0689                	addi	a3,a3,2
 80081f0:	04e781a3          	sb	a4,67(a5)
 80081f4:	bf9d                	j	800816a <_printf_common+0x6e>
 80081f6:	4685                	li	a3,1
 80081f8:	8622                	mv	a2,s0
 80081fa:	85d2                	mv	a1,s4
 80081fc:	854e                	mv	a0,s3
 80081fe:	9a82                	jalr	s5
 8008200:	fb650ee3          	beq	a0,s6,80081bc <_printf_common+0xc0>
 8008204:	0905                	addi	s2,s2,1
 8008206:	b745                	j	80081a6 <_printf_common+0xaa>

08008208 <_printf_i>:
 8008208:	7179                	addi	sp,sp,-48
 800820a:	d422                	sw	s0,40(sp)
 800820c:	d226                	sw	s1,36(sp)
 800820e:	d04a                	sw	s2,32(sp)
 8008210:	ce4e                	sw	s3,28(sp)
 8008212:	d606                	sw	ra,44(sp)
 8008214:	cc52                	sw	s4,24(sp)
 8008216:	ca56                	sw	s5,20(sp)
 8008218:	c85a                	sw	s6,16(sp)
 800821a:	89b6                	mv	s3,a3
 800821c:	0185c683          	lbu	a3,24(a1)
 8008220:	06e00793          	li	a5,110
 8008224:	8932                	mv	s2,a2
 8008226:	84aa                	mv	s1,a0
 8008228:	842e                	mv	s0,a1
 800822a:	04358613          	addi	a2,a1,67
 800822e:	1ef68363          	beq	a3,a5,8008414 <_printf_i+0x20c>
 8008232:	06d7e263          	bltu	a5,a3,8008296 <_printf_i+0x8e>
 8008236:	06300793          	li	a5,99
 800823a:	0af68263          	beq	a3,a5,80082de <_printf_i+0xd6>
 800823e:	00d7ed63          	bltu	a5,a3,8008258 <_printf_i+0x50>
 8008242:	1e068d63          	beqz	a3,800843c <_printf_i+0x234>
 8008246:	05800793          	li	a5,88
 800824a:	16f68963          	beq	a3,a5,80083bc <_printf_i+0x1b4>
 800824e:	04240a93          	addi	s5,s0,66
 8008252:	04d40123          	sb	a3,66(s0)
 8008256:	a869                	j	80082f0 <_printf_i+0xe8>
 8008258:	06400793          	li	a5,100
 800825c:	00f68663          	beq	a3,a5,8008268 <_printf_i+0x60>
 8008260:	06900793          	li	a5,105
 8008264:	fef695e3          	bne	a3,a5,800824e <_printf_i+0x46>
 8008268:	401c                	lw	a5,0(s0)
 800826a:	4308                	lw	a0,0(a4)
 800826c:	0807f693          	andi	a3,a5,128
 8008270:	00450593          	addi	a1,a0,4
 8008274:	c2c1                	beqz	a3,80082f4 <_printf_i+0xec>
 8008276:	411c                	lw	a5,0(a0)
 8008278:	c30c                	sw	a1,0(a4)
 800827a:	0007d863          	bgez	a5,800828a <_printf_i+0x82>
 800827e:	02d00713          	li	a4,45
 8008282:	40f007b3          	neg	a5,a5
 8008286:	04e401a3          	sb	a4,67(s0)
 800828a:	ffff8697          	auipc	a3,0xffff8
 800828e:	3da68693          	addi	a3,a3,986 # 8000664 <__sf_fake_stdout+0x34>
 8008292:	4729                	li	a4,10
 8008294:	a065                	j	800833c <_printf_i+0x134>
 8008296:	07300793          	li	a5,115
 800829a:	1af68563          	beq	a3,a5,8008444 <_printf_i+0x23c>
 800829e:	00d7ef63          	bltu	a5,a3,80082bc <_printf_i+0xb4>
 80082a2:	06f00793          	li	a5,111
 80082a6:	04f68f63          	beq	a3,a5,8008304 <_printf_i+0xfc>
 80082aa:	07000793          	li	a5,112
 80082ae:	faf690e3          	bne	a3,a5,800824e <_printf_i+0x46>
 80082b2:	419c                	lw	a5,0(a1)
 80082b4:	0207e793          	ori	a5,a5,32
 80082b8:	c19c                	sw	a5,0(a1)
 80082ba:	a809                	j	80082cc <_printf_i+0xc4>
 80082bc:	07500793          	li	a5,117
 80082c0:	04f68263          	beq	a3,a5,8008304 <_printf_i+0xfc>
 80082c4:	07800793          	li	a5,120
 80082c8:	f8f693e3          	bne	a3,a5,800824e <_printf_i+0x46>
 80082cc:	07800793          	li	a5,120
 80082d0:	04f402a3          	sb	a5,69(s0)
 80082d4:	ffff8697          	auipc	a3,0xffff8
 80082d8:	3a468693          	addi	a3,a3,932 # 8000678 <__sf_fake_stdout+0x48>
 80082dc:	a0f5                	j	80083c8 <_printf_i+0x1c0>
 80082de:	431c                	lw	a5,0(a4)
 80082e0:	04258a93          	addi	s5,a1,66
 80082e4:	00478693          	addi	a3,a5,4
 80082e8:	439c                	lw	a5,0(a5)
 80082ea:	c314                	sw	a3,0(a4)
 80082ec:	04f58123          	sb	a5,66(a1)
 80082f0:	4785                	li	a5,1
 80082f2:	aa9d                	j	8008468 <_printf_i+0x260>
 80082f4:	0407f693          	andi	a3,a5,64
 80082f8:	411c                	lw	a5,0(a0)
 80082fa:	c30c                	sw	a1,0(a4)
 80082fc:	debd                	beqz	a3,800827a <_printf_i+0x72>
 80082fe:	07c2                	slli	a5,a5,0x10
 8008300:	87c1                	srai	a5,a5,0x10
 8008302:	bfa5                	j	800827a <_printf_i+0x72>
 8008304:	400c                	lw	a1,0(s0)
 8008306:	431c                	lw	a5,0(a4)
 8008308:	0805f813          	andi	a6,a1,128
 800830c:	00478513          	addi	a0,a5,4
 8008310:	00080563          	beqz	a6,800831a <_printf_i+0x112>
 8008314:	c308                	sw	a0,0(a4)
 8008316:	439c                	lw	a5,0(a5)
 8008318:	a039                	j	8008326 <_printf_i+0x11e>
 800831a:	0405f593          	andi	a1,a1,64
 800831e:	c308                	sw	a0,0(a4)
 8008320:	d9fd                	beqz	a1,8008316 <_printf_i+0x10e>
 8008322:	0007d783          	lhu	a5,0(a5)
 8008326:	06f00713          	li	a4,111
 800832a:	0ce68d63          	beq	a3,a4,8008404 <_printf_i+0x1fc>
 800832e:	ffff8697          	auipc	a3,0xffff8
 8008332:	33668693          	addi	a3,a3,822 # 8000664 <__sf_fake_stdout+0x34>
 8008336:	4729                	li	a4,10
 8008338:	040401a3          	sb	zero,67(s0)
 800833c:	404c                	lw	a1,4(s0)
 800833e:	c40c                	sw	a1,8(s0)
 8008340:	0005c563          	bltz	a1,800834a <_printf_i+0x142>
 8008344:	4008                	lw	a0,0(s0)
 8008346:	996d                	andi	a0,a0,-5
 8008348:	c008                	sw	a0,0(s0)
 800834a:	e399                	bnez	a5,8008350 <_printf_i+0x148>
 800834c:	8ab2                	mv	s5,a2
 800834e:	cd91                	beqz	a1,800836a <_printf_i+0x162>
 8008350:	8ab2                	mv	s5,a2
 8008352:	02e7f5b3          	remu	a1,a5,a4
 8008356:	1afd                	addi	s5,s5,-1
 8008358:	95b6                	add	a1,a1,a3
 800835a:	0005c583          	lbu	a1,0(a1)
 800835e:	00ba8023          	sb	a1,0(s5)
 8008362:	02e7d5b3          	divu	a1,a5,a4
 8008366:	0ae7f563          	bgeu	a5,a4,8008410 <_printf_i+0x208>
 800836a:	47a1                	li	a5,8
 800836c:	00f71e63          	bne	a4,a5,8008388 <_printf_i+0x180>
 8008370:	401c                	lw	a5,0(s0)
 8008372:	8b85                	andi	a5,a5,1
 8008374:	cb91                	beqz	a5,8008388 <_printf_i+0x180>
 8008376:	4058                	lw	a4,4(s0)
 8008378:	481c                	lw	a5,16(s0)
 800837a:	00e7c763          	blt	a5,a4,8008388 <_printf_i+0x180>
 800837e:	03000793          	li	a5,48
 8008382:	fefa8fa3          	sb	a5,-1(s5)
 8008386:	1afd                	addi	s5,s5,-1
 8008388:	41560633          	sub	a2,a2,s5
 800838c:	c810                	sw	a2,16(s0)
 800838e:	874e                	mv	a4,s3
 8008390:	86ca                	mv	a3,s2
 8008392:	0070                	addi	a2,sp,12
 8008394:	85a2                	mv	a1,s0
 8008396:	8526                	mv	a0,s1
 8008398:	00000097          	auipc	ra,0x0
 800839c:	d64080e7          	jalr	-668(ra) # 80080fc <_printf_common>
 80083a0:	5a7d                	li	s4,-1
 80083a2:	0d451763          	bne	a0,s4,8008470 <_printf_i+0x268>
 80083a6:	557d                	li	a0,-1
 80083a8:	50b2                	lw	ra,44(sp)
 80083aa:	5422                	lw	s0,40(sp)
 80083ac:	5492                	lw	s1,36(sp)
 80083ae:	5902                	lw	s2,32(sp)
 80083b0:	49f2                	lw	s3,28(sp)
 80083b2:	4a62                	lw	s4,24(sp)
 80083b4:	4ad2                	lw	s5,20(sp)
 80083b6:	4b42                	lw	s6,16(sp)
 80083b8:	6145                	addi	sp,sp,48
 80083ba:	8082                	ret
 80083bc:	04d582a3          	sb	a3,69(a1)
 80083c0:	ffff8697          	auipc	a3,0xffff8
 80083c4:	2a468693          	addi	a3,a3,676 # 8000664 <__sf_fake_stdout+0x34>
 80083c8:	400c                	lw	a1,0(s0)
 80083ca:	4308                	lw	a0,0(a4)
 80083cc:	0805f813          	andi	a6,a1,128
 80083d0:	411c                	lw	a5,0(a0)
 80083d2:	0511                	addi	a0,a0,4
 80083d4:	02080063          	beqz	a6,80083f4 <_printf_i+0x1ec>
 80083d8:	c308                	sw	a0,0(a4)
 80083da:	0015f713          	andi	a4,a1,1
 80083de:	c701                	beqz	a4,80083e6 <_printf_i+0x1de>
 80083e0:	0205e593          	ori	a1,a1,32
 80083e4:	c00c                	sw	a1,0(s0)
 80083e6:	4741                	li	a4,16
 80083e8:	fba1                	bnez	a5,8008338 <_printf_i+0x130>
 80083ea:	400c                	lw	a1,0(s0)
 80083ec:	fdf5f593          	andi	a1,a1,-33
 80083f0:	c00c                	sw	a1,0(s0)
 80083f2:	b799                	j	8008338 <_printf_i+0x130>
 80083f4:	0405f813          	andi	a6,a1,64
 80083f8:	c308                	sw	a0,0(a4)
 80083fa:	fe0800e3          	beqz	a6,80083da <_printf_i+0x1d2>
 80083fe:	07c2                	slli	a5,a5,0x10
 8008400:	83c1                	srli	a5,a5,0x10
 8008402:	bfe1                	j	80083da <_printf_i+0x1d2>
 8008404:	ffff8697          	auipc	a3,0xffff8
 8008408:	26068693          	addi	a3,a3,608 # 8000664 <__sf_fake_stdout+0x34>
 800840c:	4721                	li	a4,8
 800840e:	b72d                	j	8008338 <_printf_i+0x130>
 8008410:	87ae                	mv	a5,a1
 8008412:	b781                	j	8008352 <_printf_i+0x14a>
 8008414:	4194                	lw	a3,0(a1)
 8008416:	431c                	lw	a5,0(a4)
 8008418:	49cc                	lw	a1,20(a1)
 800841a:	0806f813          	andi	a6,a3,128
 800841e:	00478513          	addi	a0,a5,4
 8008422:	00080663          	beqz	a6,800842e <_printf_i+0x226>
 8008426:	c308                	sw	a0,0(a4)
 8008428:	439c                	lw	a5,0(a5)
 800842a:	c38c                	sw	a1,0(a5)
 800842c:	a801                	j	800843c <_printf_i+0x234>
 800842e:	c308                	sw	a0,0(a4)
 8008430:	0406f693          	andi	a3,a3,64
 8008434:	439c                	lw	a5,0(a5)
 8008436:	daf5                	beqz	a3,800842a <_printf_i+0x222>
 8008438:	00b79023          	sh	a1,0(a5)
 800843c:	00042823          	sw	zero,16(s0)
 8008440:	8ab2                	mv	s5,a2
 8008442:	b7b1                	j	800838e <_printf_i+0x186>
 8008444:	431c                	lw	a5,0(a4)
 8008446:	41d0                	lw	a2,4(a1)
 8008448:	4581                	li	a1,0
 800844a:	00478693          	addi	a3,a5,4
 800844e:	c314                	sw	a3,0(a4)
 8008450:	0007aa83          	lw	s5,0(a5)
 8008454:	8556                	mv	a0,s5
 8008456:	00000097          	auipc	ra,0x0
 800845a:	096080e7          	jalr	150(ra) # 80084ec <memchr>
 800845e:	c501                	beqz	a0,8008466 <_printf_i+0x25e>
 8008460:	41550533          	sub	a0,a0,s5
 8008464:	c048                	sw	a0,4(s0)
 8008466:	405c                	lw	a5,4(s0)
 8008468:	c81c                	sw	a5,16(s0)
 800846a:	040401a3          	sb	zero,67(s0)
 800846e:	b705                	j	800838e <_printf_i+0x186>
 8008470:	4814                	lw	a3,16(s0)
 8008472:	8656                	mv	a2,s5
 8008474:	85ca                	mv	a1,s2
 8008476:	8526                	mv	a0,s1
 8008478:	9982                	jalr	s3
 800847a:	f34506e3          	beq	a0,s4,80083a6 <_printf_i+0x19e>
 800847e:	401c                	lw	a5,0(s0)
 8008480:	8b89                	andi	a5,a5,2
 8008482:	e78d                	bnez	a5,80084ac <_printf_i+0x2a4>
 8008484:	47b2                	lw	a5,12(sp)
 8008486:	4448                	lw	a0,12(s0)
 8008488:	f2f550e3          	bge	a0,a5,80083a8 <_printf_i+0x1a0>
 800848c:	853e                	mv	a0,a5
 800848e:	bf29                	j	80083a8 <_printf_i+0x1a0>
 8008490:	4685                	li	a3,1
 8008492:	8656                	mv	a2,s5
 8008494:	85ca                	mv	a1,s2
 8008496:	8526                	mv	a0,s1
 8008498:	9982                	jalr	s3
 800849a:	f16506e3          	beq	a0,s6,80083a6 <_printf_i+0x19e>
 800849e:	0a05                	addi	s4,s4,1
 80084a0:	445c                	lw	a5,12(s0)
 80084a2:	4732                	lw	a4,12(sp)
 80084a4:	8f99                	sub	a5,a5,a4
 80084a6:	fefa45e3          	blt	s4,a5,8008490 <_printf_i+0x288>
 80084aa:	bfe9                	j	8008484 <_printf_i+0x27c>
 80084ac:	4a01                	li	s4,0
 80084ae:	01940a93          	addi	s5,s0,25
 80084b2:	5b7d                	li	s6,-1
 80084b4:	b7f5                	j	80084a0 <_printf_i+0x298>

080084b6 <_sbrk_r>:
 80084b6:	1141                	addi	sp,sp,-16
 80084b8:	c422                	sw	s0,8(sp)
 80084ba:	842a                	mv	s0,a0
 80084bc:	852e                	mv	a0,a1
 80084be:	17ffd797          	auipc	a5,0x17ffd
 80084c2:	9807a323          	sw	zero,-1658(a5) # 20004e44 <errno>
 80084c6:	c606                	sw	ra,12(sp)
 80084c8:	ffffa097          	auipc	ra,0xffffa
 80084cc:	818080e7          	jalr	-2024(ra) # 8001ce0 <_sbrk>
 80084d0:	57fd                	li	a5,-1
 80084d2:	00f51963          	bne	a0,a5,80084e4 <_sbrk_r+0x2e>
 80084d6:	17ffd797          	auipc	a5,0x17ffd
 80084da:	96e78793          	addi	a5,a5,-1682 # 20004e44 <errno>
 80084de:	439c                	lw	a5,0(a5)
 80084e0:	c391                	beqz	a5,80084e4 <_sbrk_r+0x2e>
 80084e2:	c01c                	sw	a5,0(s0)
 80084e4:	40b2                	lw	ra,12(sp)
 80084e6:	4422                	lw	s0,8(sp)
 80084e8:	0141                	addi	sp,sp,16
 80084ea:	8082                	ret

080084ec <memchr>:
 80084ec:	0ff5f593          	andi	a1,a1,255
 80084f0:	962a                	add	a2,a2,a0
 80084f2:	00c51463          	bne	a0,a2,80084fa <memchr+0xe>
 80084f6:	4501                	li	a0,0
 80084f8:	8082                	ret
 80084fa:	00054783          	lbu	a5,0(a0)
 80084fe:	feb78de3          	beq	a5,a1,80084f8 <memchr+0xc>
 8008502:	0505                	addi	a0,a0,1
 8008504:	b7fd                	j	80084f2 <memchr+0x6>

08008506 <memmove>:
 8008506:	c215                	beqz	a2,800852a <memmove+0x24>
 8008508:	832a                	mv	t1,a0
 800850a:	4685                	li	a3,1
 800850c:	00b56763          	bltu	a0,a1,800851a <memmove+0x14>
 8008510:	56fd                	li	a3,-1
 8008512:	fff60713          	addi	a4,a2,-1
 8008516:	933a                	add	t1,t1,a4
 8008518:	95ba                	add	a1,a1,a4
 800851a:	00058383          	lb	t2,0(a1)
 800851e:	00730023          	sb	t2,0(t1)
 8008522:	167d                	addi	a2,a2,-1
 8008524:	9336                	add	t1,t1,a3
 8008526:	95b6                	add	a1,a1,a3
 8008528:	fa6d                	bnez	a2,800851a <memmove+0x14>
 800852a:	8082                	ret

0800852c <__malloc_lock>:
 800852c:	8082                	ret

0800852e <__malloc_unlock>:
 800852e:	8082                	ret

08008530 <_realloc_r>:
 8008530:	e591                	bnez	a1,800853c <_realloc_r+0xc>
 8008532:	85b2                	mv	a1,a2
 8008534:	fffff317          	auipc	t1,0xfffff
 8008538:	72a30067          	jr	1834(t1) # 8007c5e <_malloc_r>
 800853c:	1101                	addi	sp,sp,-32
 800853e:	cc22                	sw	s0,24(sp)
 8008540:	ce06                	sw	ra,28(sp)
 8008542:	ca26                	sw	s1,20(sp)
 8008544:	c84a                	sw	s2,16(sp)
 8008546:	c64e                	sw	s3,12(sp)
 8008548:	8432                	mv	s0,a2
 800854a:	ee11                	bnez	a2,8008566 <_realloc_r+0x36>
 800854c:	fffff097          	auipc	ra,0xfffff
 8008550:	65a080e7          	jalr	1626(ra) # 8007ba6 <_free_r>
 8008554:	4901                	li	s2,0
 8008556:	40f2                	lw	ra,28(sp)
 8008558:	4462                	lw	s0,24(sp)
 800855a:	854a                	mv	a0,s2
 800855c:	44d2                	lw	s1,20(sp)
 800855e:	4942                	lw	s2,16(sp)
 8008560:	49b2                	lw	s3,12(sp)
 8008562:	6105                	addi	sp,sp,32
 8008564:	8082                	ret
 8008566:	84ae                	mv	s1,a1
 8008568:	89aa                	mv	s3,a0
 800856a:	00000097          	auipc	ra,0x0
 800856e:	038080e7          	jalr	56(ra) # 80085a2 <_malloc_usable_size_r>
 8008572:	8926                	mv	s2,s1
 8008574:	fe8571e3          	bgeu	a0,s0,8008556 <_realloc_r+0x26>
 8008578:	85a2                	mv	a1,s0
 800857a:	854e                	mv	a0,s3
 800857c:	fffff097          	auipc	ra,0xfffff
 8008580:	6e2080e7          	jalr	1762(ra) # 8007c5e <_malloc_r>
 8008584:	892a                	mv	s2,a0
 8008586:	d961                	beqz	a0,8008556 <_realloc_r+0x26>
 8008588:	85a6                	mv	a1,s1
 800858a:	8622                	mv	a2,s0
 800858c:	fffff097          	auipc	ra,0xfffff
 8008590:	428080e7          	jalr	1064(ra) # 80079b4 <memcpy>
 8008594:	85a6                	mv	a1,s1
 8008596:	854e                	mv	a0,s3
 8008598:	fffff097          	auipc	ra,0xfffff
 800859c:	60e080e7          	jalr	1550(ra) # 8007ba6 <_free_r>
 80085a0:	bf5d                	j	8008556 <_realloc_r+0x26>

080085a2 <_malloc_usable_size_r>:
 80085a2:	ffc5a783          	lw	a5,-4(a1)
 80085a6:	ffc78513          	addi	a0,a5,-4
 80085aa:	0007d563          	bgez	a5,80085b4 <_malloc_usable_size_r+0x12>
 80085ae:	95aa                	add	a1,a1,a0
 80085b0:	419c                	lw	a5,0(a1)
 80085b2:	953e                	add	a0,a0,a5
 80085b4:	8082                	ret

build/gd32vf103.elf:     file format elf32-littleriscv
build/gd32vf103.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800015c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x000085c8 memsz 0x000085c8 flags r-x
    LOAD off    0x0000a000 vaddr 0x20000000 paddr 0x080085c8 align 2**12
         filesz 0x00000508 memsz 0x00000508 flags rw-
    LOAD off    0x0000a508 vaddr 0x20000508 paddr 0x20000508 align 2**12
         filesz 0x00000000 memsz 0x00004940 flags rw-
    LOAD off    0x0000b000 vaddr 0x20007000 paddr 0x20004e48 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000254  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ilalign      00000000  08000254  08000254  0000a508  2**0
                  CONTENTS
  2 .text         00008336  08000280  08000280  00001280  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sdata2.usbd_language_id_desc 00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sdata2.EP0_MAXLEN 00000004  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .sdata2.USB_SPEED 00000004  080085c0  080085c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .sdata2._global_impure_ptr 00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000000  080085c8  080085c8  0000a508  2**0
                  CONTENTS
  8 .dalign       00000000  20000000  20000000  0000a508  2**0
                  CONTENTS
  9 .data         00000508  20000000  080085c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004940  20000508  20000508  0000a508  2**3
                  ALLOC
 11 .stack        00001000  20007000  20004e48  0000b000  2**0
                  ALLOC
 12 .debug_info   0002eb9b  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000079af  00000000  00000000  000390a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000115a6  00000000  00000000  00040a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001740  00000000  00000000  00051ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001f50  00000000  00000000  00053738  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ca9  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007715  00000000  00000000  00078331  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000028  00000000  00000000  0007fa46  2**0
                  CONTENTS, READONLY
 20 .riscv.attributes 0000002b  00000000  00000000  0007fa6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003968  00000000  00000000  0007fa9c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .init	00000000 .init
08000254 l    d  .ilalign	00000000 .ilalign
08000280 l    d  .text	00000000 .text
080085b8 l    d  .sdata2.usbd_language_id_desc	00000000 .sdata2.usbd_language_id_desc
080085bc l    d  .sdata2.EP0_MAXLEN	00000000 .sdata2.EP0_MAXLEN
080085c0 l    d  .sdata2.USB_SPEED	00000000 .sdata2.USB_SPEED
080085c4 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
080085c8 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000508 l    d  .bss	00000000 .bss
20007000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/start.o
08000000 l       .init	00000000 vector_base
08000182 l       .init	00000000 _start0800
00000000 l    df *ABS*	00000000 gd32vf103_rcu.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 write_hex.c
00000000 l    df *ABS*	00000000 handlers.c
00000000 l    df *ABS*	00000000 ff.c
080020c6 l     F .text	0000001e ld_dword
080020e4 l     F .text	0000001c st_dword
08002100 l     F .text	0000001a mem_cmp
0800211a l     F .text	0000001c clst2sect
08002136 l     F .text	0000003e get_ldnumber
08002174 l     F .text	0000004e validate
080021c2 l     F .text	0000001a mem_cpy.part.0
080021dc l     F .text	00000026 ld_clust.isra.1
08002202 l     F .text	00000064 sync_window.part.3
08002266 l     F .text	0000004e move_window
080022b4 l     F .text	00000092 check_fs
08002346 l     F .text	00000342 find_volume
08002688 l     F .text	00000154 put_fat
080027dc l     F .text	000000f6 get_fat.isra.7
080028d2 l     F .text	00000128 create_chain
080029fa l     F .text	0000014a dir_next
08002b44 l     F .text	00000098 dir_sdi.constprop.9
20000510 l     O .bss	00000004 FatFs
20000514 l     O .bss	00000002 Fsid
00000000 l    df *ABS*	00000000 tf_card.c
0800359e l     F .text	00000062 xchg_spi
08003600 l     F .text	00000022 deselect
08003622 l     F .text	000000e4 wait_ready
08003706 l     F .text	00000042 _select
08003748 l     F .text	000000ec send_cmd
08003834 l     F .text	00000080 rcvr_datablock
080038b4 l     F .text	00000060 xmit_datablock.part.1
20000516 l     O .bss	00000001 CardType
200004f8 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 cdc_acm_core.c
080002e8 l     O .text	00000018 __compound_literal.0
08000300 l     O .text	0000003a __compound_literal.1
0800033c l     O .text	00000030 __compound_literal.2
00000000 l    df *ABS*	00000000 usbd_enum.c
08005568 l     F .text	00000004 _usb_std_reserved
0800556c l     F .text	0000000e _usb_dev_desc_get
0800557a l     F .text	0000000e _usb_config_desc_get
08005588 l     F .text	00000014 _usb_str_desc_get
0800559c l     F .text	000000fa _usb_std_getdescriptor
08005696 l     F .text	000000a8 _usb_std_setconfiguration
0800573e l     F .text	000000ba _usb_std_getstatus
080057f8 l     F .text	0000003c _usb_std_getconfiguration
08005834 l     F .text	0000002c _usb_std_getinterface
08005860 l     F .text	0000002a _usb_std_setinterface
0800588a l     F .text	00000064 _usb_std_setaddress
080058ee l     F .text	00000080 _usb_std_setfeature
0800596e l     F .text	00000098 _usb_std_clearfeature
08005a06 l     F .text	00000004 _usb_std_setdescriptor
08005a0a l     F .text	00000004 _usb_std_synchframe
08000390 l     O .text	00000034 _std_dev_req
20000530 l     O .bss	00000001 config.4766
20000534 l     O .bss	00000002 status.4696
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 gd32vf103_adc.c
00000000 l    df *ABS*	00000000 gd32vf103_dma.c
00000000 l    df *ABS*	00000000 gd32vf103_eclic.c
00000000 l    df *ABS*	00000000 gd32vf103_exti.c
00000000 l    df *ABS*	00000000 gd32vf103_gpio.c
00000000 l    df *ABS*	00000000 gd32vf103_i2c.c
00000000 l    df *ABS*	00000000 gd32vf103_spi.c
00000000 l    df *ABS*	00000000 gd32vf103_timer.c
00000000 l    df *ABS*	00000000 gd32vf103_usart.c
00000000 l    df *ABS*	00000000 system_gd32vf103.c
00000000 l    df *ABS*	00000000 sbrk.c
200004ec l     O .data	00000004 curbrk.1524
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eclicw.c
20000508 l     O .bss	00000004 pmtisr
2000050c l     O .bss	00000004 pu0tbeisr
00000000 l    df *ABS*	00000000 gd32v_tf_card_if.c
00000000 l    df *ABS*	00000000 tf_delay.c
00000000 l    df *ABS*	00000000 gd32v_mpu6500_if.c
00000000 l    df *ABS*	00000000 mpu6500_driver.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 drv_usb_core.c
00000000 l    df *ABS*	00000000 drv_usb_dev.c
080085bc l     O .sdata2.EP0_MAXLEN	00000004 EP0_MAXLEN
00000000 l    df *ABS*	00000000 drv_usbd_int.c
08004d80 l     F .text	000000fe usbd_int_epout
08004e7e l     F .text	000000bc usbd_int_epin
08004f3a l     F .text	000000c6 usbd_int_rxfifo
08005000 l     F .text	000000d2 usbd_int_reset
080050d2 l     F .text	00000068 usbd_int_enumfinish
0800513a l     F .text	000000e6 usbd_emptytxfifo_write
080085c0 l     O .sdata2.USB_SPEED	00000004 USB_SPEED
00000000 l    df *ABS*	00000000 gd32vf103_hw.c
00000000 l    df *ABS*	00000000 gd32vf103_usb_it.c
00000000 l    df *ABS*	00000000 usb_delay.c
00000000 l    df *ABS*	00000000 usb_serial_if.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_transc.c
00000000 l    df *ABS*	00000000 radioHead.c
00000000 l    df *ABS*	00000000 rn4871.c
00000000 l    df *ABS*	00000000 state.c
2000054c l     O .bss	00000004 current_state
00000000 l    df *ABS*	00000000 build/entry.o
08006b34 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
20000d6c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000488 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
080085c8 l       .sdata2._global_impure_ptr	00000000 __fini_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __fini_array_start
080085c8 l       .sdata2._global_impure_ptr	00000000 __init_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_end
080085c8 l       .sdata2._global_impure_ptr	00000000 __init_array_start
080085c8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_start
080085a2 g     F .text	00000014 _malloc_usable_size_r
080062a6 g     F .text	00000014 led_off_B1
08001a02 g     F .text	0000000a usart_transmit_config
08007866 g     F .text	0000002a .hidden __ashldi3
08004468 g     F .text	0000001a read_mpu
08000c54 g     F .text	00000034 adc_external_trigger_source_config
08004482 g     F .text	0000001a write_mpu
08005ea0 g     F .text	00000026 send_data_to_phone
20000ce8 g       .data	00000000 __global_pointer$
08005b26 g     F .text	00000030 usbd_ctl_status_recev
08004aa4 g     F .text	0000008c usb_transc_outxfer
080042fc g     F .text	0000002a i2c_master_init_400k
08001146 g     F .text	00000010 i2c_dma_enable
080062ce g     F .text	00000014 led_off_B0
0800852e g     F .text	00000002 __malloc_unlock
080064e0 g     F .text	00000030 append_int_to_string
08005a86 g     F .text	00000038 usbd_ctl_send
080062ba g     F .text	00000014 led_on_B0
08004212 g     F .text	000000ea i2c_master_write_register
08006580 g     F .text	00000054 init_mpu
08008506 g     F .text	00000026 memmove
08000b96 g     F .text	000000be adc_regular_channel_config
0800122e g     F .text	00000014 rcu_usb_clock_config
08000eb4 g     F .text	00000008 eclic_priority_group_set
08004768 g     F .text	0000003e clear_queues
08001de6 g     F .text	0000000e eclic_get_nlbits
08005238 g     F .text	00000056 USBFS_WKUP_IRQHandler
080019d4 g     F .text	00000012 usart_word_length_set
08005220 g     F .text	00000008 usb_udelay
08000dd8 g     F .text	00000026 dma_channel_enable
080048ae g     F .text	00000032 usb_rxfifo_read
20004e44 g     O .bss	00000004 errno
08001242 g     F .text	0000013a rcu_clock_freq_get
08005a26 g     F .text	0000002c usbd_class_request
00001000 g       *ABS*	00000000 __stack_size
0800157a g     F .text	0000023c timer_channel_output_config
20000478 g     O .data	0000000e handles
08001126 g     F .text	0000000a i2c_start_on_bus
08005228 g     F .text	00000010 USBFS_IRQHandler
08000b1a g     F .text	00000010 adc_enable
08006a44 g     F .text	0000000a set_state
08000e84 g     F .text	00000024 dma_interrupt_enable
08000380 g     O .text	00000010 usbd_strings
08001fe2 g     F .text	00000040 DMA0_Channel6_IRQHandler
08004be0 g     F .text	00000020 usb_iepintr_read
080079b4 g     F .text	00000016 memcpy
08004bd2 g     F .text	0000000e usb_iepintnum_read
08005374 g     F .text	000000ee set_usb_clock_96m_hxtal
08002022 g     F .text	00000052 eclic_mtip_handler
08001832 g     F .text	00000056 timer_channel_output_shadow_config
20000e14 g     O .bss	00000010 cb
080019f8 g     F .text	0000000a usart_enable
08007e62 g     F .text	0000029a _svfprintf_r
08007610 g     F .text	00000070 .hidden __floatsidf
080070bc g     F .text	000000a4 .hidden __ltdf2
08003914 g     F .text	0000027c disk_initialize
08005bea g     F .text	000000e6 usbd_out_transc
08000f9e g     F .text	00000004 gpio_bit_set
0800113e g     F .text	00000008 i2c_data_receive
08001556 g     F .text	0000000a timer_enable
200004e8 g     O .data	00000004 SystemCoreClock
08001a4e g     F .text	00000018 usart_interrupt_enable
080011d2 g     F .text	0000001c rcu_periph_reset_disable
0800137c g     F .text	00000036 spi_init
08001ed2  w    F .text	00000038 handle_trap
08003b90 g     F .text	00000014 disk_status
08006b04  w      .text	00000000 irq_entry
08004326 g     F .text	00000040 mpu6500_install
08000e7c g     F .text	00000008 dma_interrupt_flag_clear
20000e24 g     O .bss	00004014 w
08005522 g     F .text	0000003e usbd_ep_stall_clear
080084b6 g     F .text	00000036 _sbrk_r
08003d4e g     F .text	0000021e disk_ioctl
20000538 g     O .bss	00000004 emg
08001a94 g     F .text	0000001a usart_interrupt_flag_clear
080054e2 g     F .text	00000040 usbd_ep_stall
080085b8 g     O .sdata2.usbd_language_id_desc	00000004 usbd_language_id_desc
20000e10 g     O .bss	00000004 i2c_port
080019c4 g     F .text	00000010 usart_parity_config
20007000 g       .stack	00000000 _heap_end
08000a48 g     F .text	00000050 adc_deinit
0800682c g     F .text	00000172 lio_init_bt
08005abe g     F .text	00000038 usbd_ctl_recev
080085c4 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
08008530 g     F .text	00000072 _realloc_r
0800794a g     F .text	0000006a __libc_init_array
08007680 g     F .text	00000056 .hidden __floatunsidf
08001ce0 g     F .text	0000002e _sbrk
08001178 g     F .text	0000002a i2c_flag_clear
08000a98 g     F .text	00000020 adc_mode_config
08001a36 g     F .text	0000000c usart_dma_receive_config
08001a16 g     F .text	00000008 usart_data_receive
0800110a g     F .text	00000012 i2c_master_addressing
08001f0a g     F .text	0000002c _init
080054a2 g     F .text	00000040 usbd_ep_send
08007912 g     F .text	00000038 __libc_fini_array
08001eb0  w    F .text	00000022 handle_nmi
080013bc g     F .text	00000004 spi_i2s_data_transmit
20004e38 g     O .bss	00000001 rxCount
08005462 g     F .text	00000040 usbd_ep_recev
080075ac g     F .text	00000064 .hidden __fixdfsi
080014b0 g     F .text	00000018 timer_struct_para_init
080049ba g     F .text	000000ea usb_transc_inxfer
080062e2 g     F .text	000000fa timer_interrupt_config
080014c8 g     F .text	0000008e timer_init
0800189c g     F .text	00000012 timer_interrupt_flag_get
200004fc g     O .data	00000004 pDatabuffer
20000548 g     O .bss	00000004 write
08004bc0 g     F .text	00000012 usb_oepintr_read
080048e0 g     F .text	00000028 usb_txfifo_flush
0800783c g     F .text	0000002a .hidden __lshrdi3
080070bc g     F .text	000000a4 .hidden __ledf2
080017b6 g     F .text	00000056 timer_channel_output_mode_config
08004c00 g     F .text	00000026 usb_ctlep_startout
080047a6 g     F .text	000000ce delay_1ms
08001a0c g     F .text	0000000a usart_receive_config
08002074 g     F .text	00000052 USART0_IRQHandler
08001df4 g     F .text	00000058 eclic_set_irq_lvl_abs
08001dbc g     F .text	00000012 eclic_enable_interrupt
08000eae g     F .text	00000006 eclic_global_interrupt_disable
08004874 g     F .text	0000003a usb_txfifo_write
08005f1a g     F .text	00000202 TIMER1_IRQHandler
080005f0 g     O .text	00000020 __sf_fake_stderr
08004b6a g     F .text	00000046 usb_transc_clrstall
08001d0e g     F .text	0000007c write_hex
080066c4 g     F .text	0000011e init_radio
08007d60 g     F .text	00000102 __ssputs_r
20000544 g     O .bss	00000004 start_time
08007890 g     F .text	0000003c .hidden __clzsi2
08005b56 g     F .text	00000094 usbd_setup_transc
08000fa2 g     F .text	00000004 gpio_bit_reset
080084ec g     F .text	0000001a memchr
08007ba6 g     F .text	000000b8 _free_r
08000cc2 g     F .text	00000020 adc_software_trigger_enable
20000550 g     O .bss	00000004 _global_atexit
08007ade g     F .text	000000c8 __call_exitprocs
080018ae g     F .text	00000008 timer_interrupt_flag_clear
20008000 g       .stack	00000000 _sp
080019e6 g     F .text	00000012 usart_stop_bit_set
08003516 g     F .text	0000002c f_close
080045c2 g     F .text	00000020 init_q
0800015c g     F .init	00000000 _start
08001890 g     F .text	0000000c timer_interrupt_disable
080011a2 g     F .text	00000018 rcu_periph_clock_enable
08001a66 g     F .text	0000002e usart_interrupt_flag_get
080076d6 g     F .text	00000166 .hidden __floatundidf
0800036c g     O .text	00000012 device_descriptor
08001164 g     F .text	00000014 i2c_flag_get
0800449c g     F .text	00000126 mpu6500_init
0800024c g       .init	00000000 enable_mcycle_minstret
08007a52 g     F .text	0000008c __register_exitproc
08004c26 g     F .text	0000001a usb_clock_active
080013de g     F .text	000000d2 timer_deinit
08004908 g     F .text	00000014 usb_devaddr_set
08001d8a g     F .text	00000010 get_timer_value
08001888 g     F .text	00000008 timer_interrupt_enable
20000df8 g     O .bss	00000016 dataBuffer
08000e0c g     F .text	00000070 dma_interrupt_flag_get
080013b2 g     F .text	0000000a spi_enable
08006510 g     F .text	0000000e append_newLine
080013c8 g     F .text	0000000c spi_crc_polynomial_set
08004bb0 g     F .text	00000010 usb_oepintnum_read
08006b76 g     F .text	00000546 .hidden __divdf3
08001958 g     F .text	0000006c usart_baudrate_set
08001a42 g     F .text	0000000c usart_dma_transmit_config
08007160 g     F .text	0000044c .hidden __muldf3
20000528 g     O .bss	00000001 setupc_flag
08003564 g     F .text	0000003a get_fattime
08000b00 g     F .text	0000001a adc_data_alignment_config
08001fb8 g     F .text	0000002a config_clic_irqs
2000056c g     O .bss	00000400 rx_dma_buffer
0800852c g     F .text	00000002 __malloc_lock
080040d2 g     F .text	00000140 i2c_master_read_register
08001a2a g     F .text	0000000c usart_hardware_flow_cts_config
08001e4c g     F .text	00000052 eclic_set_irq_priority
08000610 g     O .text	00000020 __sf_fake_stdin
20000508 g       .bss	00000000 __bss_start
080079ca g     F .text	00000010 memset
080013c0 g     F .text	00000008 spi_i2s_data_receive
0800068c g     F .text	000003bc main
08005ef4 g     F .text	00000026 reboot_BT
08006a80  w      .text	00000000 trap_entry
08003366 g     F .text	000001b0 f_sync
08003542 g     F .text	00000022 set_fattime
08000246 g       .init	00000000 disable_mcycle_minstret
08004366 g     F .text	00000102 i2c_dma_master_read_register
080010f2 g     F .text	00000018 i2c_ack_config
08000d26 g     F .text	0000008c dma_init
08007c5e g     F .text	00000102 _malloc_r
200004f0 g     O .data	00000008 time
08002bdc g     F .text	0000005c f_mount
08001e9e g     F .text	00000012 eclic_mode_enable
20000540 g     O .bss	00000004 seconds
08004c40 g     F .text	00000140 usbd_isr
20000518 g     O .bss	00000008 tf_current_time
08001dce g     F .text	00000018 eclic_set_nlbits
08007a28 g     F .text	00000018 strcmp
08001aae g     F .text	0000011c SystemInit
0800464e g     F .text	0000000c queue_str_len
08001f36 g     F .text	00000002 _fini
00000000 g       *ABS*	00000000 __dbg_stack_size
2000052c g     O .bss	00000004 usbfs_prescaler
080079da g     F .text	0000004e sprintf
080004f0 g     O .text	00000100 .hidden __clz_tab
080018b6 g     F .text	000000a2 usart_deinit
080078cc g     F .text	00000010 atexit
08005a52 g     F .text	00000004 usbd_vendor_request
0800699e g     F .text	0000009c lio_send_bt
080080fc g     F .text	0000010c _printf_common
20000500 g     O .data	00000004 _impure_ptr
080011ba g     F .text	00000018 rcu_periph_reset_enable
0800491c g     F .text	0000009e usb_transc_active
20000000 g     O .data	00000043 configuration_descriptor
08007e62 g     F .text	0000029a _svfiprintf_r
20000000 g       .dalign	00000000 _data
20000044 g     O .data	00000434 USB_OTG_dev
08005ddc g     F .text	000000c4 write_handle_raw
0800113a g     F .text	00000004 i2c_data_transmit
0800528e g     F .text	00000072 usb_delay_1ms
08001156 g     F .text	0000000e i2c_dma_last_transfer_config
08006458 g     F .text	00000088 int_to_string
08000ebc g     F .text	00000034 eclic_irq_enable
080063dc g     F .text	0000007c formatTime
08001a1e g     F .text	0000000c usart_hardware_flow_rts_config
2000096c g     O .bss	00000400 tx_dma_buffer
080045e2 g     F .text	0000006c enqueue_string
080046fc g     F .text	0000006c empty_string_queue
08004004 g     F .text	000000ce mpu_delay
20000508 g       .bss	00000000 _edata
20004e48 g       .bss	00000000 _end
08005af6 g     F .text	00000030 usbd_ctl_status_send
0800315e g     F .text	00000208 f_write
08003f6c g     F .text	0000005a tf_start_timer
08003fc6 g     F .text	0000003e tf_timer_done
08000ea8 g     F .text	00000006 eclic_global_interrupt_enable
08004b30 g     F .text	0000003a usb_transc_stall
080085c8 g       .lalign	00000000 _data_lma
08000ef0 g     F .text	0000000a exti_interrupt_flag_clear
0800611c g     F .text	0000014c USART2_IRQHandler
08002c38 g     F .text	00000526 f_open
08000c88 g     F .text	0000003a adc_external_trigger_config
08003c46 g     F .text	00000108 disk_write
080078dc g     F .text	00000036 exit
08005a56 g     F .text	00000030 usbd_enum_error
08001560 g     F .text	0000001a timer_channel_output_struct_para_init
08001bca g     F .text	000000ca SystemCoreClockUpdate
080013d4 g     F .text	0000000a spi_i2s_flag_get
08001d9a g     F .text	00000022 eclic_init
0800180c g     F .text	00000026 timer_channel_output_pulse_value_config
08000630 g     O .text	00000020 __sf_fake_stdout
080079da g     F .text	0000004e siprintf
08000b4c g     F .text	0000004a adc_channel_length_config
08006a3a g     F .text	0000000a get_state
2000053c g     O .bss	00000002 milli
0800465a g     F .text	00000026 fuseStrings
08001c94 g     F .text	0000004c _exit
08000ce2 g     F .text	00000044 dma_deinit
0800111c g     F .text	0000000a i2c_enable
2000053e g     O .bss	00000002 minutes
080067e2 g     F .text	0000004a enter_command_mode
08006292 g     F .text	00000014 led_on_B1
08000db2 g     F .text	00000026 dma_circulation_disable
08001f38 g     F .text	00000080 dma_config
08007a40 g     F .text	00000012 strlen
08003ba4 g     F .text	000000a2 disk_read
08008208 g     F .text	000002ae _printf_i
20000520 g     O .bss	00000008 tf_delay_until
20000558 g     O .bss	00000004 __malloc_sbrk_start
08005560 g     F .text	00000008 usbd_addr_set
08005ec6 g     F .text	0000002e stagger_data_to_phone
08000ab8 g     F .text	00000048 adc_special_function_config
080011ee g     F .text	00000040 rcu_adc_clock_config
08006268 g     F .text	0000002a ledInit
08000efa g     F .text	000000a4 gpio_init
08000fb0 g     F .text	00000142 i2c_clock_config
08005300 g     F .text	00000074 usb_delay_1us
08001130 g     F .text	0000000a i2c_stop_on_bus
20000554 g     O .bss	00000004 __malloc_free_list
08000b2a g     F .text	00000022 adc_calibration_enable
20004e3c g     O .bss	00000008 rxbuffer
080065d4 g     F .text	000000f0 init_ADC_EMG
08000dfe g     F .text	0000000e dma_flag_clear
2000055c g     O .bss	00000010 last_Sample_buffer
08005cd0 g     F .text	0000010c usbd_in_transc
08004680 g     F .text	0000007c dequeue_string
0800651e g     F .text	00000062 millis
08000fa6 g     F .text	0000000a gpio_bit_write
08005a0e g     F .text	00000018 usbd_standard_request



Disassembly of section .init:

08000000 <vector_base>:
    .weak  CAN1_RX1_IRQHandler
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    j _start
 8000000:	aab1                	j	800015c <_start>
 8000002:	0001                	nop
	...
 800001c:	2022                	fld	ft0,8(sp)
 800001e:	0800                	addi	s0,sp,16
	...
 8000090:	1fe2                	slli	t6,t6,0x38
 8000092:	0800                	addi	s0,sp,16
	...
 80000bc:	5f1a                	lw	t5,164(sp)
 80000be:	0800                	addi	s0,sp,16
	...
 80000e0:	2074                	fld	fa3,192(s0)
 80000e2:	0800                	addi	s0,sp,16
 80000e4:	0000                	unimp
 80000e6:	0000                	unimp
 80000e8:	611c                	flw	fa5,0(a0)
 80000ea:	0800                	addi	s0,sp,16
	...
 80000f4:	5238                	lw	a4,96(a2)
 80000f6:	0800                	addi	s0,sp,16
	...
 8000158:	5228                	lw	a0,96(a2)
 800015a:	0800                	addi	s0,sp,16

0800015c <_start>:
	.globl _start
	.type _start,@function

_start:

	csrc CSR_MSTATUS, MSTATUS_MIE
 800015c:	30047073          	csrci	mstatus,8
	/* Jump to logical address first to ensure correct operation of RAM region  */
    la		a0,	_start
 8000160:	00000517          	auipc	a0,0x0
 8000164:	ffc50513          	addi	a0,a0,-4 # 800015c <_start>
    li		a1,	1
 8000168:	4585                	li	a1,1
	slli	a1,	a1, 29
 800016a:	05f6                	slli	a1,a1,0x1d
    bleu	a1, a0, _start0800
 800016c:	00b57b63          	bgeu	a0,a1,8000182 <_start0800>
    srli	a1,	a1, 2
 8000170:	8189                	srli	a1,a1,0x2
    bleu	a1, a0, _start0800
 8000172:	00b57863          	bgeu	a0,a1,8000182 <_start0800>
    la		a0,	_start0800
 8000176:	00000517          	auipc	a0,0x0
 800017a:	00c50513          	addi	a0,a0,12 # 8000182 <_start0800>
    add		a0, a0, a1
 800017e:	952e                	add	a0,a0,a1
	jr      a0
 8000180:	8502                	jr	a0

08000182 <_start0800>:

_start0800:

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 8000182:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
 8000186:	7d02a073          	csrs	0x7d0,t0

	/* Intial the mtvt*/
    la t0, vector_base
 800018a:	00000297          	auipc	t0,0x0
 800018e:	e7628293          	addi	t0,t0,-394 # 8000000 <vector_base>
    csrw CSR_MTVT, t0
 8000192:	30729073          	csrw	mtvt,t0

	/* Intial the mtvt2 and enable it*/
    la t0, irq_entry
 8000196:	00007297          	auipc	t0,0x7
 800019a:	96e28293          	addi	t0,t0,-1682 # 8006b04 <irq_entry>
    csrw CSR_MTVT2, t0
 800019e:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
 80001a2:	7ec0e073          	csrsi	0x7ec,1

    /* Intial the CSR MTVEC for the Trap ane NMI base addr*/
    la t0, trap_entry
 80001a6:	00007297          	auipc	t0,0x7
 80001aa:	8da28293          	addi	t0,t0,-1830 # 8006a80 <trap_entry>
    csrw CSR_MTVEC, t0
 80001ae:	30529073          	csrw	mtvec,t0
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80001b2:	18001197          	auipc	gp,0x18001
 80001b6:	b3618193          	addi	gp,gp,-1226 # 20000ce8 <__global_pointer$>
.option pop
	la sp, _sp
 80001ba:	18008117          	auipc	sp,0x18008
 80001be:	e4610113          	addi	sp,sp,-442 # 20008000 <_sp>

	/* Load data section */
	la a0, _data_lma
 80001c2:	00008517          	auipc	a0,0x8
 80001c6:	40650513          	addi	a0,a0,1030 # 80085c8 <__fini_array_end>
	la a1, _data
 80001ca:	18000597          	auipc	a1,0x18000
 80001ce:	e3658593          	addi	a1,a1,-458 # 20000000 <_data>
	la a2, _edata
 80001d2:	18000617          	auipc	a2,0x18000
 80001d6:	33660613          	addi	a2,a2,822 # 20000508 <__bss_start>
	bgeu a1, a2, 2f
 80001da:	00c5fa63          	bgeu	a1,a2,80001ee <_start0800+0x6c>
1:
	lw t0, (a0)
 80001de:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
 80001e2:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
 80001e6:	0511                	addi	a0,a0,4
	addi a1, a1, 4
 80001e8:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
 80001ea:	fec5eae3          	bltu	a1,a2,80001de <_start0800+0x5c>
2:
	/* Clear bss section */
	la a0, __bss_start
 80001ee:	18000517          	auipc	a0,0x18000
 80001f2:	31a50513          	addi	a0,a0,794 # 20000508 <__bss_start>
	la a1, _end
 80001f6:	18005597          	auipc	a1,0x18005
 80001fa:	c5258593          	addi	a1,a1,-942 # 20004e48 <_end>
	bgeu a0, a1, 2f
 80001fe:	00b57763          	bgeu	a0,a1,800020c <_start0800+0x8a>
1:
	sw zero, (a0)
 8000202:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
 8000206:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
 8000208:	feb56de3          	bltu	a0,a1,8000202 <_start0800+0x80>
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 800020c:	3202f073          	csrci	mucounteren,5
	/* Call global constructors */
	la a0, __libc_fini_array
 8000210:	00007517          	auipc	a0,0x7
 8000214:	70250513          	addi	a0,a0,1794 # 8007912 <__libc_fini_array>
	call atexit
 8000218:	00007097          	auipc	ra,0x7
 800021c:	6b4080e7          	jalr	1716(ra) # 80078cc <atexit>
	call __libc_init_array
 8000220:	00007097          	auipc	ra,0x7
 8000224:	72a080e7          	jalr	1834(ra) # 800794a <__libc_init_array>


	/* argc = argv = 0 */
	call _init
 8000228:	00002097          	auipc	ra,0x2
 800022c:	ce2080e7          	jalr	-798(ra) # 8001f0a <_init>
	li a0, 0
 8000230:	4501                	li	a0,0
	li a1, 0
 8000232:	4581                	li	a1,0
	call main
 8000234:	00000097          	auipc	ra,0x0
 8000238:	458080e7          	jalr	1112(ra) # 800068c <main>
	tail exit
 800023c:	00007317          	auipc	t1,0x7
 8000240:	6a030067          	jr	1696(t1) # 80078dc <exit>

1:
	j 1b
 8000244:	a001                	j	8000244 <_start0800+0xc2>

08000246 <disable_mcycle_minstret>:
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
        csrsi CSR_MCOUNTINHIBIT, 0x5
 8000246:	3202e073          	csrsi	mucounteren,5
	ret
 800024a:	8082                	ret

0800024c <enable_mcycle_minstret>:

	.global enable_mcycle_minstret
enable_mcycle_minstret:
        csrci CSR_MCOUNTINHIBIT, 0x5
 800024c:	3202f073          	csrci	mucounteren,5
	ret
 8000250:	8082                	ret
	...

Disassembly of section .text:

08000280 <__compound_literal.0-0x68>:
	...
 8000288:	0201                	addi	tp,tp,0
 800028a:	07060403          	lb	s0,112(a2)
 800028e:	0908                	addi	a0,sp,144
 8000290:	500a                	0x500a
 8000292:	6f72                	flw	ft10,28(sp)
 8000294:	6d617267          	0x6d617267
 8000298:	6820                	flw	fs0,80(s0)
 800029a:	7361                	lui	t1,0xffff8
 800029c:	6520                	flw	fs0,72(a0)
 800029e:	6978                	flw	fa4,84(a0)
 80002a0:	6574                	flw	fa3,76(a0)
 80002a2:	2064                	fld	fs1,192(s0)
 80002a4:	68746977          	0x68746977
 80002a8:	6320                	flw	fs0,64(a4)
 80002aa:	3a65646f          	jal	s0,8056650 <__fini_array_end+0x4e088>
 80002ae:	0000                	unimp
 80002b0:	7830                	flw	fa2,112(s0)
 80002b2:	0000                	unimp
 80002b4:	6d6e                	flw	fs10,216(sp)
 80002b6:	0a69                	addi	s4,s4,26
 80002b8:	0000                	unimp
 80002ba:	0000                	unimp
 80002bc:	7274                	flw	fa3,100(a2)
 80002be:	7061                	c.lui	zero,0xffff8
 80002c0:	000a                	c.slli	zero,0x2
 80002c2:	0000                	unimp
 80002c4:	4146                	lw	sp,80(sp)
 80002c6:	0054                	addi	a3,sp,4
 80002c8:	4146                	lw	sp,80(sp)
 80002ca:	3354                	fld	fa3,160(a4)
 80002cc:	0032                	c.slli	zero,0xc
 80002ce:	0000                	unimp
 80002d0:	2a22                	fld	fs4,8(sp)
 80002d2:	3b3a2c2b          	0x3b3a2c2b
 80002d6:	3d3c                	fld	fa5,120(a0)
 80002d8:	3f3e                	fld	ft10,488(sp)
 80002da:	7f7c5d5b          	0x7f7c5d5b
 80002de:	0000                	unimp
 80002e0:	0000                	unimp
 80002e2:	0000                	unimp
 80002e4:	4000                	lw	s0,0(s0)
 80002e6:	          	0x40af

080002e8 <__compound_literal.0>:
 80002e8:	00470316 00670069 00440061 00760065     ..G.i.g.a.D.e.v.
 80002f8:	00630069 00000065                       i.c.e...

08000300 <__compound_literal.1>:
 8000300:	00470338 00330044 00200032 00530055     8.G.D.3.2. .U.S.
 8000310:	00200042 00440043 00200043 00430041     B. .C.D.C. .A.C.
 8000320:	0020004d 006e0069 00460020 00200053     M. .i.n. .F.S. .
 8000330:	006f004d 00650064 00000000              M.o.d.e.....

0800033c <__compound_literal.2>:
 800033c:	0047032e 00330044 00580032 00580058     ..G.D.3.2.X.X.X.
 800034c:	0033002d 0030002e 0030002e 0037002d     -.3...0...0.-.7.
 800035c:	0038007a 00390078 00650079 00000072     z.8.x.9.y.e.r...

0800036c <device_descriptor>:
 800036c:	02000112 40000002 018a28e9 02010100     .......@.(......
 800037c:	00000103                                ....

08000380 <usbd_strings>:
 8000380:	080085b8 080002e8 08000300 0800033c     ............<...

08000390 <_std_dev_req>:
 8000390:	0800573e 0800596e 08005568 080058ee     >W..nY..hU...X..
 80003a0:	08005568 0800588a 0800559c 08005a06     hU...X...U...Z..
 80003b0:	080057f8 08005696 08005834 08005860     .W...V..4X..`X..
 80003c0:	08005a0a 00000000 72617473 00003074     .Z......start0..
 80003d0:	72617473 00003174 72617473 00003274     start1..start2..
 80003e0:	706f7473 00003070 706f7473 00003170     stopp0..stopp1..
 80003f0:	706f7473 00003270 33323130 37363534     stopp2..01234567
 8000400:	42413938 46454443 00000000 2c574853     89ABCDEF....SHW,
 8000410:	00000000 2e257325 252c7834 000a0d73     ....%s%.4x,%s...
 8000420:	0d312c52 00000000 74736574 00000000     R,1.....test....
 8000430:	48474952 432e4c54 00005653 656d6954     RIGHTL.CSV..Time
 8000440:	612d583b 593b6363 6363612d 612d5a3b     ;X-acc;Y-acc;Z-a
 8000450:	583b6363 6765642d 593b732f 6765642d     cc;X-deg/s;Y-deg
 8000460:	5a3b732f 6765642d 453b732f 000a474d     /s;Z-deg/s;EMG..
 8000470:	00000000 40af4000 00006c2c 00006b7c     .....@.@,l..|k..
 8000480:	00006b82 00006b7c 00006c1e 00006b7c     .k..|k...l..|k..
 8000490:	00006b82 00006c2c 00006c2c 00006c1e     .k..,l..,l...l..
 80004a0:	00006b82 00006b62 00006b62 00006b62     .k..bk..bk..bk..
 80004b0:	00006b86 00007032 00007032 0000704a     .k..2p..2p..Jp..
 80004c0:	0000702c 0000702c 000070d8 0000704a     ,p..,p...p..Jp..
 80004d0:	0000702c 000070d8 0000702c 0000704a     ,p...p..,p..Jp..
 80004e0:	0000702a 0000702a 0000702a 000070d8     *p..*p..*p...p..

080004f0 <__clz_tab>:
 80004f0:	02020100 03030303 04040404 04040404     ................
 8000500:	05050505 05050505 05050505 05050505     ................
 8000510:	06060606 06060606 06060606 06060606     ................
 8000520:	06060606 06060606 06060606 06060606     ................
 8000530:	07070707 07070707 07070707 07070707     ................
 8000540:	07070707 07070707 07070707 07070707     ................
 8000550:	07070707 07070707 07070707 07070707     ................
 8000560:	07070707 07070707 07070707 07070707     ................
 8000570:	08080808 08080808 08080808 08080808     ................
 8000580:	08080808 08080808 08080808 08080808     ................
 8000590:	08080808 08080808 08080808 08080808     ................
 80005a0:	08080808 08080808 08080808 08080808     ................
 80005b0:	08080808 08080808 08080808 08080808     ................
 80005c0:	08080808 08080808 08080808 08080808     ................
 80005d0:	08080808 08080808 08080808 08080808     ................
 80005e0:	08080808 08080808 08080808 08080808     ................

080005f0 <__sf_fake_stderr>:
	...

08000610 <__sf_fake_stdin>:
	...

08000630 <__sf_fake_stdout>:
	...
 8000650:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
 8000660:	00004746 33323130 37363534 42413938     FG..0123456789AB
 8000670:	46454443 00000000 33323130 37363534     CDEF....01234567
 8000680:	62613938 66656463 00000000              89abcdef....

0800068c <main>:
void reboot_BT(){
    lio_send_bt("R,1\r",4);//reboot bluetooth
    delay_1ms(50);
}

int main(void){
 800068c:	81010113          	addi	sp,sp,-2032
 8000690:	7e112623          	sw	ra,2028(sp)
 8000694:	7e812423          	sw	s0,2024(sp)
 8000698:	7e912223          	sw	s1,2020(sp)
 800069c:	7f212023          	sw	s2,2016(sp)
 80006a0:	7d312e23          	sw	s3,2012(sp)
 80006a4:	7d512a23          	sw	s5,2004(sp)
 80006a8:	7d612823          	sw	s6,2000(sp)
 80006ac:	7d712623          	sw	s7,1996(sp)
 80006b0:	7d812423          	sw	s8,1992(sp)
 80006b4:	7d912223          	sw	s9,1988(sp)
 80006b8:	7da12023          	sw	s10,1984(sp)
 80006bc:	7d412c23          	sw	s4,2008(sp)
 80006c0:	7bb12e23          	sw	s11,1980(sp)
 80006c4:	91010113          	addi	sp,sp,-1776
    init_q();
 80006c8:	00004097          	auipc	ra,0x4
 80006cc:	efa080e7          	jalr	-262(ra) # 80045c2 <init_q>
    init_ADC_EMG();
 80006d0:	00006097          	auipc	ra,0x6
 80006d4:	f04080e7          	jalr	-252(ra) # 80065d4 <init_ADC_EMG>
    //configure_usb_serial(); //måste vara före lio_init_bt
    lio_init_bt();
 80006d8:	00006097          	auipc	ra,0x6
 80006dc:	154080e7          	jalr	340(ra) # 800682c <lio_init_bt>
    ledInit();
 80006e0:	00006097          	auipc	ra,0x6
 80006e4:	b88080e7          	jalr	-1144(ra) # 8006268 <ledInit>
    usb_delay_1ms(1);
 80006e8:	4505                	li	a0,1
 80006ea:	00005097          	auipc	ra,0x5
 80006ee:	ba4080e7          	jalr	-1116(ra) # 800528e <usb_delay_1ms>

    /* Used for bytes written */
    UINT bw = 0;
    
    /* Sets a valid date for when writing to file */
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 80006f2:	4701                	li	a4,0
 80006f4:	4681                	li	a3,0
 80006f6:	4781                	li	a5,0
 80006f8:	4605                	li	a2,1
 80006fa:	4585                	li	a1,1
 80006fc:	7bc00513          	li	a0,1980
    UINT bw = 0;
 8000700:	c802                	sw	zero,16(sp)
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 8000702:	00003097          	auipc	ra,0x3
 8000706:	e40080e7          	jalr	-448(ra) # 8003542 <set_fattime>
    delay_1ms(100);
 800070a:	06400513          	li	a0,100
 800070e:	00004097          	auipc	ra,0x4
 8000712:	098080e7          	jalr	152(ra) # 80047a6 <delay_1ms>

    /* This function "mounts" the SD-card which makes the filesystem available */
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000716:	6485                	lui	s1,0x1
    UINT bw = 0;
 8000718:	747d                	lui	s0,0xfffff
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800071a:	ea048793          	addi	a5,s1,-352 # ea0 <__dbg_stack_size+0xea0>
 800071e:	978a                	add	a5,a5,sp
 8000720:	3d040513          	addi	a0,s0,976 # fffff3d0 <_sp+0xdfff73d0>
 8000724:	08000b37          	lui	s6,0x8000
 8000728:	4605                	li	a2,1
 800072a:	428b0593          	addi	a1,s6,1064 # 8000428 <_std_dev_req+0x98>
 800072e:	953e                	add	a0,a0,a5
 8000730:	00002097          	auipc	ra,0x2
 8000734:	4ac080e7          	jalr	1196(ra) # 8002bdc <f_mount>
    f_sync(&fil);
 8000738:	ea048793          	addi	a5,s1,-352
 800073c:	978a                	add	a5,a5,sp
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800073e:	c62a                	sw	a0,12(sp)
    f_sync(&fil);
 8000740:	1a840513          	addi	a0,s0,424
 8000744:	953e                	add	a0,a0,a5
 8000746:	00003097          	auipc	ra,0x3
 800074a:	c20080e7          	jalr	-992(ra) # 8003366 <f_sync>

    /* This function opens a file. In this case, we are creating a file which we want to write to */
    
    delay_1ms(400);
 800074e:	19000513          	li	a0,400
 8000752:	00004097          	auipc	ra,0x4
 8000756:	054080e7          	jalr	84(ra) # 80047a6 <delay_1ms>

    init_mpu();
 800075a:	00006097          	auipc	ra,0x6
 800075e:	e26080e7          	jalr	-474(ra) # 8006580 <init_mpu>

    rcu_periph_clock_enable(RCU_DMA0);
 8000762:	50000513          	li	a0,1280
 8000766:	00001097          	auipc	ra,0x1
 800076a:	a3c080e7          	jalr	-1476(ra) # 80011a2 <rcu_periph_clock_enable>

    delay_1ms(20);
 800076e:	4551                	li	a0,20
 8000770:	00004097          	auipc	ra,0x4
 8000774:	036080e7          	jalr	54(ra) # 80047a6 <delay_1ms>

    char write_to_sd[2560] = {'\0'};
 8000778:	6605                	lui	a2,0x1
 800077a:	a0060613          	addi	a2,a2,-1536 # a00 <__dbg_stack_size+0xa00>
 800077e:	4581                	li	a1,0
 8000780:	4a010513          	addi	a0,sp,1184
 8000784:	00007097          	auipc	ra,0x7
 8000788:	246080e7          	jalr	582(ra) # 80079ca <memset>
/*     while (!usb_serial_available()) {
        usb_delay_1ms(100);
    } */
    init_radio();
     
    write = 0;
 800078c:	20000937          	lui	s2,0x20000
    init_radio();
 8000790:	00006097          	auipc	ra,0x6
 8000794:	f34080e7          	jalr	-204(ra) # 80066c4 <init_radio>
    write = 0;
 8000798:	54092423          	sw	zero,1352(s2) # 20000548 <write>

    int blink = 0;
    int onOff = 0;
    reboot_BT();
 800079c:	00005097          	auipc	ra,0x5
 80007a0:	758080e7          	jalr	1880(ra) # 8005ef4 <reboot_BT>
    enter_command_mode();
 80007a4:	00006097          	auipc	ra,0x6
 80007a8:	03e080e7          	jalr	62(ra) # 80067e2 <enter_command_mode>
    send_data_to_phone(Handle_start_stop,0);
 80007ac:	4581                	li	a1,0
 80007ae:	07500513          	li	a0,117
 80007b2:	00005097          	auipc	ra,0x5
 80007b6:	6ee080e7          	jalr	1774(ra) # 8005ea0 <send_data_to_phone>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
                eclic_global_interrupt_disable();    
                fr = f_mount(&fs, "test", 1); // Mount storage device
                f_sync(&fil);
                
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007ba:	08000bb7          	lui	s7,0x8000
                eclic_global_interrupt_disable();
                //Skicka till telefon jag stoppar nu
                send_data_to_phone(Handle_start_stop,0);
                write_to_sd[0] = '\0';
                while(empty_string_queue(write_to_sd, 10)){
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007be:	ea048793          	addi	a5,s1,-352
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007c2:	3c8b8b93          	addi	s7,s7,968 # 80003c8 <_std_dev_req+0x38>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007c6:	17040a93          	addi	s5,s0,368
 80007ca:	978a                	add	a5,a5,sp
    int onOff = 0;
 80007cc:	4c01                	li	s8,0
    int blink = 0;
 80007ce:	4981                	li	s3,0
 80007d0:	54890913          	addi	s2,s2,1352
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007d4:	068b8c93          	addi	s9,s7,104
                milli = 0;
 80007d8:	20000d37          	lui	s10,0x20000
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007dc:	9abe                	add	s5,s5,a5
        switch (get_state()){
 80007de:	00006097          	auipc	ra,0x6
 80007e2:	25c080e7          	jalr	604(ra) # 8006a3a <get_state>
 80007e6:	4785                	li	a5,1
 80007e8:	0af50063          	beq	a0,a5,8000888 <main+0x1fc>
 80007ec:	4789                	li	a5,2
 80007ee:	1af50063          	beq	a0,a5,800098e <main+0x302>
 80007f2:	f575                	bnez	a0,80007de <main+0x152>
                break;

            case RUNNING:
                //RUNNING CONTROL
                blink++;
                if (blink == 1000000){
 80007f4:	000f47b7          	lui	a5,0xf4
                blink++;
 80007f8:	0985                	addi	s3,s3,1
                if (blink == 1000000){
 80007fa:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf3240>
 80007fe:	00f99a63          	bne	s3,a5,8000812 <main+0x186>
                    blink = 0;
                    if(onOff){
 8000802:	220c0c63          	beqz	s8,8000a3a <main+0x3ae>
                        led_on_B0();
 8000806:	00006097          	auipc	ra,0x6
 800080a:	ab4080e7          	jalr	-1356(ra) # 80062ba <led_on_B0>
                        onOff = 0;
 800080e:	4c01                	li	s8,0
                    blink = 0;
 8000810:	4981                	li	s3,0
                        led_off_B0();
                        onOff = 1;
                    }
                }
                //BREAK IF PROGRAM SHOULDNT WRITE
                if(!write){
 8000812:	00092783          	lw	a5,0(s2)
 8000816:	d7e1                	beqz	a5,80007de <main+0x152>
                    break;
                }
                
                if(queue_str_len() > 5){ //Behövs högre hastighet så kan vi öka denna 5:an
 8000818:	00004097          	auipc	ra,0x4
 800081c:	e36080e7          	jalr	-458(ra) # 800464e <queue_str_len>
 8000820:	4795                	li	a5,5
 8000822:	faa7dee3          	bge	a5,a0,80007de <main+0x152>
                    memset(write_to_sd, '\0', sizeof(write_to_sd));
 8000826:	6785                	lui	a5,0x1
 8000828:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 800082c:	978a                	add	a5,a5,sp
 800082e:	60040493          	addi	s1,s0,1536
 8000832:	94be                	add	s1,s1,a5
 8000834:	6605                	lui	a2,0x1
 8000836:	4581                	li	a1,0
 8000838:	a0060613          	addi	a2,a2,-1536 # a00 <__dbg_stack_size+0xa00>
 800083c:	8526                	mv	a0,s1
 800083e:	00007097          	auipc	ra,0x7
 8000842:	18c080e7          	jalr	396(ra) # 80079ca <memset>
                    if (dequeue_string(write_to_sd, 5)) { //Behövs högre hastighet så kan vi öka denna 5:an
 8000846:	4595                	li	a1,5
 8000848:	8526                	mv	a0,s1
 800084a:	00004097          	auipc	ra,0x4
 800084e:	e36080e7          	jalr	-458(ra) # 8004680 <dequeue_string>
 8000852:	d551                	beqz	a0,80007de <main+0x152>
                        f_write(&fil, write_to_sd, strlen(write_to_sd), &bw);
 8000854:	8526                	mv	a0,s1
 8000856:	00007097          	auipc	ra,0x7
 800085a:	1ea080e7          	jalr	490(ra) # 8007a40 <strlen>
 800085e:	6785                	lui	a5,0x1
 8000860:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 8000864:	978a                	add	a5,a5,sp
 8000866:	1a840a13          	addi	s4,s0,424
 800086a:	9a3e                	add	s4,s4,a5
 800086c:	862a                	mv	a2,a0
 800086e:	86d6                	mv	a3,s5
 8000870:	85a6                	mv	a1,s1
 8000872:	8552                	mv	a0,s4
 8000874:	00003097          	auipc	ra,0x3
 8000878:	8ea080e7          	jalr	-1814(ra) # 800315e <f_write>
                        f_sync(&fil);
 800087c:	8552                	mv	a0,s4
 800087e:	00003097          	auipc	ra,0x3
 8000882:	ae8080e7          	jalr	-1304(ra) # 8003366 <f_sync>
        switch (get_state()){
 8000886:	bfa1                	j	80007de <main+0x152>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 8000888:	4589                	li	a1,2
 800088a:	40000537          	lui	a0,0x40000
 800088e:	00001097          	auipc	ra,0x1
 8000892:	002080e7          	jalr	2(ra) # 8001890 <timer_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 8000896:	6a05                	lui	s4,0x1
                eclic_global_interrupt_disable();    
 8000898:	00000097          	auipc	ra,0x0
 800089c:	616080e7          	jalr	1558(ra) # 8000eae <eclic_global_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80008a0:	ea0a0793          	addi	a5,s4,-352 # ea0 <__dbg_stack_size+0xea0>
 80008a4:	978a                	add	a5,a5,sp
 80008a6:	3d040513          	addi	a0,s0,976
 80008aa:	4605                	li	a2,1
 80008ac:	428b0593          	addi	a1,s6,1064
 80008b0:	953e                	add	a0,a0,a5
 80008b2:	00002097          	auipc	ra,0x2
 80008b6:	32a080e7          	jalr	810(ra) # 8002bdc <f_mount>
                f_sync(&fil);
 80008ba:	ea0a0793          	addi	a5,s4,-352
 80008be:	978a                	add	a5,a5,sp
 80008c0:	1a840493          	addi	s1,s0,424
 80008c4:	94be                	add	s1,s1,a5
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80008c6:	c62a                	sw	a0,12(sp)
                f_sync(&fil);
 80008c8:	8526                	mv	a0,s1
 80008ca:	00003097          	auipc	ra,0x3
 80008ce:	a9c080e7          	jalr	-1380(ra) # 8003366 <f_sync>
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80008d2:	4629                	li	a2,10
 80008d4:	85e6                	mv	a1,s9
 80008d6:	8526                	mv	a0,s1
 80008d8:	00002097          	auipc	ra,0x2
 80008dc:	360080e7          	jalr	864(ra) # 8002c38 <f_open>
 80008e0:	c62a                	sw	a0,12(sp)
                clear_queues();
 80008e2:	00004097          	auipc	ra,0x4
 80008e6:	e86080e7          	jalr	-378(ra) # 8004768 <clear_queues>
                char header[] = "Time;X-acc;Y-acc;Z-acc;X-deg/s;Y-deg/s;Z-deg/s;EMG\n";
 80008ea:	03400613          	li	a2,52
 80008ee:	074b8593          	addi	a1,s7,116
 80008f2:	0848                	addi	a0,sp,20
 80008f4:	00007097          	auipc	ra,0x7
 80008f8:	0c0080e7          	jalr	192(ra) # 80079b4 <memcpy>
                enqueue_string(header);
 80008fc:	ea0a0793          	addi	a5,s4,-352
 8000900:	978a                	add	a5,a5,sp
 8000902:	17440513          	addi	a0,s0,372
 8000906:	953e                	add	a0,a0,a5
 8000908:	00004097          	auipc	ra,0x4
 800090c:	cda080e7          	jalr	-806(ra) # 80045e2 <enqueue_string>
                milli = 0;
 8000910:	53cd0793          	addi	a5,s10,1340 # 2000053c <milli>
 8000914:	00079023          	sh	zero,0(a5)
                seconds = 0;
 8000918:	200007b7          	lui	a5,0x20000
 800091c:	5407a023          	sw	zero,1344(a5) # 20000540 <seconds>
                minutes = 0;
 8000920:	200007b7          	lui	a5,0x20000
 8000924:	52079f23          	sh	zero,1342(a5) # 2000053e <minutes>
                while(millis() < start_time);
 8000928:	200004b7          	lui	s1,0x20000
 800092c:	00006097          	auipc	ra,0x6
 8000930:	bf2080e7          	jalr	-1038(ra) # 800651e <millis>
 8000934:	54448793          	addi	a5,s1,1348 # 20000544 <start_time>
 8000938:	439c                	lw	a5,0(a5)
 800093a:	fef549e3          	blt	a0,a5,800092c <main+0x2a0>
                i2c_dma_master_read_register(I2C0, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H);
 800093e:	40005537          	lui	a0,0x40005
 8000942:	03b00613          	li	a2,59
 8000946:	06900593          	li	a1,105
 800094a:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 800094e:	00004097          	auipc	ra,0x4
 8000952:	a18080e7          	jalr	-1512(ra) # 8004366 <i2c_dma_master_read_register>
                set_state(RUNNING);
 8000956:	4501                	li	a0,0
 8000958:	00006097          	auipc	ra,0x6
 800095c:	0ec080e7          	jalr	236(ra) # 8006a44 <set_state>
                write = 1;
 8000960:	4785                	li	a5,1
 8000962:	00f92023          	sw	a5,0(s2)
                timer_interrupt_config();
 8000966:	00006097          	auipc	ra,0x6
 800096a:	97c080e7          	jalr	-1668(ra) # 80062e2 <timer_interrupt_config>
                config_clic_irqs();
 800096e:	00001097          	auipc	ra,0x1
 8000972:	64a080e7          	jalr	1610(ra) # 8001fb8 <config_clic_irqs>
                send_data_to_phone(Handle_start_stop,1);
 8000976:	4585                	li	a1,1
 8000978:	07500513          	li	a0,117
 800097c:	00005097          	auipc	ra,0x5
 8000980:	524080e7          	jalr	1316(ra) # 8005ea0 <send_data_to_phone>
                eclic_global_interrupt_enable();  
 8000984:	00000097          	auipc	ra,0x0
 8000988:	524080e7          	jalr	1316(ra) # 8000ea8 <eclic_global_interrupt_enable>
                break;
 800098c:	bd89                	j	80007de <main+0x152>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 800098e:	4589                	li	a1,2
 8000990:	40000537          	lui	a0,0x40000
 8000994:	00001097          	auipc	ra,0x1
 8000998:	efc080e7          	jalr	-260(ra) # 8001890 <timer_interrupt_disable>
                eclic_global_interrupt_disable();
 800099c:	00000097          	auipc	ra,0x0
 80009a0:	512080e7          	jalr	1298(ra) # 8000eae <eclic_global_interrupt_disable>
                send_data_to_phone(Handle_start_stop,0);
 80009a4:	4581                	li	a1,0
 80009a6:	07500513          	li	a0,117
 80009aa:	00005097          	auipc	ra,0x5
 80009ae:	4f6080e7          	jalr	1270(ra) # 8005ea0 <send_data_to_phone>
                write_to_sd[0] = '\0';
 80009b2:	6705                	lui	a4,0x1
 80009b4:	ea070793          	addi	a5,a4,-352 # ea0 <__dbg_stack_size+0xea0>
 80009b8:	978a                	add	a5,a5,sp
                while(empty_string_queue(write_to_sd, 10)){
 80009ba:	ea070693          	addi	a3,a4,-352
                write_to_sd[0] = '\0';
 80009be:	97a2                	add	a5,a5,s0
                while(empty_string_queue(write_to_sd, 10)){
 80009c0:	968a                	add	a3,a3,sp
 80009c2:	60040493          	addi	s1,s0,1536
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80009c6:	1a840a13          	addi	s4,s0,424
                write_to_sd[0] = '\0';
 80009ca:	60078023          	sb	zero,1536(a5)
                while(empty_string_queue(write_to_sd, 10)){
 80009ce:	94b6                	add	s1,s1,a3
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80009d0:	9a36                	add	s4,s4,a3
                    write_to_sd[0] = '\0';
 80009d2:	8dbe                	mv	s11,a5
                while(empty_string_queue(write_to_sd, 10)){
 80009d4:	45a9                	li	a1,10
 80009d6:	8526                	mv	a0,s1
 80009d8:	00004097          	auipc	ra,0x4
 80009dc:	d24080e7          	jalr	-732(ra) # 80046fc <empty_string_queue>
 80009e0:	e905                	bnez	a0,8000a10 <main+0x384>
                f_close(&fil);
 80009e2:	6785                	lui	a5,0x1
 80009e4:	ea078793          	addi	a5,a5,-352 # ea0 <__dbg_stack_size+0xea0>
 80009e8:	978a                	add	a5,a5,sp
 80009ea:	1a840513          	addi	a0,s0,424
 80009ee:	953e                	add	a0,a0,a5
 80009f0:	00003097          	auipc	ra,0x3
 80009f4:	b26080e7          	jalr	-1242(ra) # 8003516 <f_close>
                set_state(RUNNING);
 80009f8:	4501                	li	a0,0
 80009fa:	00006097          	auipc	ra,0x6
 80009fe:	04a080e7          	jalr	74(ra) # 8006a44 <set_state>
                write = 0;
 8000a02:	00092023          	sw	zero,0(s2)
                eclic_global_interrupt_enable();
 8000a06:	00000097          	auipc	ra,0x0
 8000a0a:	4a2080e7          	jalr	1186(ra) # 8000ea8 <eclic_global_interrupt_enable>
                break;
 8000a0e:	bbc1                	j	80007de <main+0x152>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a10:	8526                	mv	a0,s1
 8000a12:	00007097          	auipc	ra,0x7
 8000a16:	02e080e7          	jalr	46(ra) # 8007a40 <strlen>
 8000a1a:	862a                	mv	a2,a0
 8000a1c:	86d6                	mv	a3,s5
 8000a1e:	85a6                	mv	a1,s1
 8000a20:	8552                	mv	a0,s4
 8000a22:	00002097          	auipc	ra,0x2
 8000a26:	73c080e7          	jalr	1852(ra) # 800315e <f_write>
                    f_sync(&fil);
 8000a2a:	8552                	mv	a0,s4
 8000a2c:	00003097          	auipc	ra,0x3
 8000a30:	93a080e7          	jalr	-1734(ra) # 8003366 <f_sync>
                    write_to_sd[0] = '\0';
 8000a34:	600d8023          	sb	zero,1536(s11)
 8000a38:	bf71                	j	80009d4 <main+0x348>
                        led_off_B0();
 8000a3a:	00006097          	auipc	ra,0x6
 8000a3e:	894080e7          	jalr	-1900(ra) # 80062ce <led_off_B0>
                    blink = 0;
 8000a42:	4981                	li	s3,0
                        onOff = 1;
 8000a44:	4c05                	li	s8,1
 8000a46:	b3f1                	j	8000812 <main+0x186>

08000a48 <adc_deinit>:
    \param[in]  adc_periph: ADCx, x=0,1
    \param[out] none
    \retval     none
*/
void adc_deinit(uint32_t adc_periph)
{
 8000a48:	1141                	addi	sp,sp,-16
    switch(adc_periph){
 8000a4a:	400127b7          	lui	a5,0x40012
{
 8000a4e:	c606                	sw	ra,12(sp)
    switch(adc_periph){
 8000a50:	40078793          	addi	a5,a5,1024 # 40012400 <_sp+0x2000a400>
 8000a54:	00f50b63          	beq	a0,a5,8000a6a <adc_deinit+0x22>
 8000a58:	400137b7          	lui	a5,0x40013
 8000a5c:	80078793          	addi	a5,a5,-2048 # 40012800 <_sp+0x2000a800>
 8000a60:	02f50363          	beq	a0,a5,8000a86 <adc_deinit+0x3e>
        rcu_periph_reset_disable(RCU_ADC1RST);
        break;
    default:
        break;
    }
}
 8000a64:	40b2                	lw	ra,12(sp)
 8000a66:	0141                	addi	sp,sp,16
 8000a68:	8082                	ret
        rcu_periph_reset_enable(RCU_ADC0RST);
 8000a6a:	30900513          	li	a0,777
 8000a6e:	00000097          	auipc	ra,0x0
 8000a72:	74c080e7          	jalr	1868(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC0RST);
 8000a76:	30900513          	li	a0,777
}
 8000a7a:	40b2                	lw	ra,12(sp)
 8000a7c:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000a7e:	00000317          	auipc	t1,0x0
 8000a82:	75430067          	jr	1876(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_ADC1RST);
 8000a86:	30a00513          	li	a0,778
 8000a8a:	00000097          	auipc	ra,0x0
 8000a8e:	730080e7          	jalr	1840(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000a92:	30a00513          	li	a0,778
 8000a96:	b7d5                	j	8000a7a <adc_deinit+0x32>

08000a98 <adc_mode_config>:
    \param[out] none
    \retval     none
*/
void adc_mode_config(uint32_t mode)
{
    ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
 8000a98:	400127b7          	lui	a5,0x40012
 8000a9c:	4047a703          	lw	a4,1028(a5) # 40012404 <_sp+0x2000a404>
 8000aa0:	fff106b7          	lui	a3,0xfff10
 8000aa4:	16fd                	addi	a3,a3,-1
 8000aa6:	8f75                	and	a4,a4,a3
 8000aa8:	40e7a223          	sw	a4,1028(a5)
    ADC_CTL0(ADC0) |= mode;
 8000aac:	4047a703          	lw	a4,1028(a5)
 8000ab0:	8d59                	or	a0,a0,a4
 8000ab2:	40a7a223          	sw	a0,1028(a5)
}
 8000ab6:	8082                	ret

08000ab8 <adc_special_function_config>:
    \param[out] none
    \retval     none
*/
void adc_special_function_config(uint32_t adc_periph, uint32_t function, ControlStatus newvalue)
{
    if(newvalue){
 8000ab8:	1005f793          	andi	a5,a1,256
 8000abc:	4005f713          	andi	a4,a1,1024
 8000ac0:	8989                	andi	a1,a1,2
 8000ac2:	c20d                	beqz	a2,8000ae4 <adc_special_function_config+0x2c>
        if(0U != (function & ADC_SCAN_MODE)){
 8000ac4:	c789                	beqz	a5,8000ace <adc_special_function_config+0x16>
            /* enable scan mode */
            ADC_CTL0(adc_periph) |= ADC_SCAN_MODE;
 8000ac6:	415c                	lw	a5,4(a0)
 8000ac8:	1007e793          	ori	a5,a5,256
 8000acc:	c15c                	sw	a5,4(a0)
        }
        if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
 8000ace:	c709                	beqz	a4,8000ad8 <adc_special_function_config+0x20>
            /* enable inserted channel group convert automatically */
            ADC_CTL0(adc_periph) |= ADC_INSERTED_CHANNEL_AUTO;
 8000ad0:	415c                	lw	a5,4(a0)
 8000ad2:	4007e793          	ori	a5,a5,1024
 8000ad6:	c15c                	sw	a5,4(a0)
        } 
        if(0U != (function & ADC_CONTINUOUS_MODE)){
 8000ad8:	c589                	beqz	a1,8000ae2 <adc_special_function_config+0x2a>
            /* enable continuous mode */
            ADC_CTL1(adc_periph) |= ADC_CONTINUOUS_MODE;
 8000ada:	451c                	lw	a5,8(a0)
 8000adc:	0027e793          	ori	a5,a5,2
            /* disable inserted channel group convert automatically */
            ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
        } 
        if(0U != (function & ADC_CONTINUOUS_MODE)){
            /* disable continuous mode */
            ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
 8000ae0:	c51c                	sw	a5,8(a0)
        }       
    }
}
 8000ae2:	8082                	ret
        if(0U != (function & ADC_SCAN_MODE)){
 8000ae4:	c789                	beqz	a5,8000aee <adc_special_function_config+0x36>
            ADC_CTL0(adc_periph) &= ~ADC_SCAN_MODE;
 8000ae6:	415c                	lw	a5,4(a0)
 8000ae8:	eff7f793          	andi	a5,a5,-257
 8000aec:	c15c                	sw	a5,4(a0)
        if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
 8000aee:	c709                	beqz	a4,8000af8 <adc_special_function_config+0x40>
            ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
 8000af0:	415c                	lw	a5,4(a0)
 8000af2:	bff7f793          	andi	a5,a5,-1025
 8000af6:	c15c                	sw	a5,4(a0)
        if(0U != (function & ADC_CONTINUOUS_MODE)){
 8000af8:	d5ed                	beqz	a1,8000ae2 <adc_special_function_config+0x2a>
            ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
 8000afa:	451c                	lw	a5,8(a0)
 8000afc:	9bf5                	andi	a5,a5,-3
 8000afe:	b7cd                	j	8000ae0 <adc_special_function_config+0x28>

08000b00 <adc_data_alignment_config>:
*/
void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
{
    if(ADC_DATAALIGN_RIGHT != data_alignment){
        /* MSB alignment */
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000b00:	451c                	lw	a5,8(a0)
    if(ADC_DATAALIGN_RIGHT != data_alignment){
 8000b02:	c599                	beqz	a1,8000b10 <adc_data_alignment_config+0x10>
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000b04:	6705                	lui	a4,0x1
 8000b06:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
 8000b0a:	8fd9                	or	a5,a5,a4
    }else{
        /* LSB alignment */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000b0c:	c51c                	sw	a5,8(a0)
    }
}
 8000b0e:	8082                	ret
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000b10:	777d                	lui	a4,0xfffff
 8000b12:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 8000b16:	8ff9                	and	a5,a5,a4
 8000b18:	bfd5                	j	8000b0c <adc_data_alignment_config+0xc>

08000b1a <adc_enable>:
    \param[out] none
    \retval     none
*/
void adc_enable(uint32_t adc_periph)
{
    if((uint32_t)RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
 8000b1a:	451c                	lw	a5,8(a0)
 8000b1c:	8b85                	andi	a5,a5,1
 8000b1e:	e789                	bnez	a5,8000b28 <adc_enable+0xe>
        /* enable ADC */
        ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
 8000b20:	451c                	lw	a5,8(a0)
 8000b22:	0017e793          	ori	a5,a5,1
 8000b26:	c51c                	sw	a5,8(a0)
    }       
}
 8000b28:	8082                	ret

08000b2a <adc_calibration_enable>:
    \retval     none
*/
void adc_calibration_enable(uint32_t adc_periph)
{
    /* reset the selected ADC1 calibration registers */
    ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
 8000b2a:	451c                	lw	a5,8(a0)
 8000b2c:	00850713          	addi	a4,a0,8 # 40000008 <_sp+0x1fff8008>
 8000b30:	0087e793          	ori	a5,a5,8
 8000b34:	c51c                	sw	a5,8(a0)
    /* check the RSTCLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
 8000b36:	431c                	lw	a5,0(a4)
 8000b38:	8ba1                	andi	a5,a5,8
 8000b3a:	fff5                	bnez	a5,8000b36 <adc_calibration_enable+0xc>
    }
    /* enable ADC calibration process */
    ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
 8000b3c:	451c                	lw	a5,8(a0)
 8000b3e:	0047e793          	ori	a5,a5,4
 8000b42:	c51c                	sw	a5,8(a0)
    /* check the CLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
 8000b44:	431c                	lw	a5,0(a4)
 8000b46:	8b91                	andi	a5,a5,4
 8000b48:	fff5                	bnez	a5,8000b44 <adc_calibration_enable+0x1a>
    }
}
 8000b4a:	8082                	ret

08000b4c <adc_channel_length_config>:
    \param[out] none
    \retval     none
*/
void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
{
    switch(adc_channel_group){
 8000b4c:	4785                	li	a5,1
 8000b4e:	00f58663          	beq	a1,a5,8000b5a <adc_channel_length_config+0xe>
 8000b52:	4789                	li	a5,2
 8000b54:	02f58263          	beq	a1,a5,8000b78 <adc_channel_length_config+0x2c>
 8000b58:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure the length of regular channel group */
        ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
 8000b5a:	555c                	lw	a5,44(a0)
 8000b5c:	ff100737          	lui	a4,0xff100
 8000b60:	177d                	addi	a4,a4,-1
 8000b62:	8ff9                	and	a5,a5,a4
 8000b64:	d55c                	sw	a5,44(a0)
        ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000b66:	555c                	lw	a5,44(a0)
 8000b68:	167d                	addi	a2,a2,-1
 8000b6a:	0652                	slli	a2,a2,0x14
 8000b6c:	00f00737          	lui	a4,0xf00
 8000b70:	8e79                	and	a2,a2,a4
 8000b72:	8e5d                	or	a2,a2,a5
 8000b74:	d550                	sw	a2,44(a0)
        break;
 8000b76:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure the length of inserted channel group */
        ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
 8000b78:	5d1c                	lw	a5,56(a0)
 8000b7a:	ffd00737          	lui	a4,0xffd00
 8000b7e:	177d                	addi	a4,a4,-1
 8000b80:	8ff9                	and	a5,a5,a4
 8000b82:	dd1c                	sw	a5,56(a0)
        ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000b84:	5d1c                	lw	a5,56(a0)
 8000b86:	167d                	addi	a2,a2,-1
 8000b88:	0652                	slli	a2,a2,0x14
 8000b8a:	00300737          	lui	a4,0x300
 8000b8e:	8e79                	and	a2,a2,a4
 8000b90:	8e5d                	or	a2,a2,a5
 8000b92:	dd10                	sw	a2,56(a0)
        break;
    default:
        break;
    }
}
 8000b94:	8082                	ret

08000b96 <adc_regular_channel_config>:
void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
{
    uint32_t rsq,sampt;
    
    /* ADC regular sequence config */
    if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
 8000b96:	4715                	li	a4,5
 8000b98:	04b76363          	bltu	a4,a1,8000bde <adc_regular_channel_config+0x48>
        /* the regular group sequence rank is smaller than six */
        rsq = ADC_RSQ2(adc_periph);
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000b9c:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ2(adc_periph);
 8000ba0:	03452803          	lw	a6,52(a0)
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000ba4:	47fd                	li	a5,31
 8000ba6:	00b797b3          	sll	a5,a5,a1
 8000baa:	fff7c793          	not	a5,a5
 8000bae:	0107f7b3          	and	a5,a5,a6
        /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
 8000bb2:	00b615b3          	sll	a1,a2,a1
 8000bb6:	8ddd                	or	a1,a1,a5
        ADC_RSQ2(adc_periph) = rsq;
 8000bb8:	d94c                	sw	a1,52(a0)
        ADC_RSQ0(adc_periph) = rsq;
    }else{
    }
    
    /* ADC sampling time config */
    if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
 8000bba:	47a5                	li	a5,9
 8000bbc:	06c7e963          	bltu	a5,a2,8000c2e <adc_regular_channel_config+0x98>
        /* the regular group sequence rank is smaller than ten */
        sampt = ADC_SAMPT1(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000bc0:	478d                	li	a5,3
 8000bc2:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT1(adc_periph);
 8000bc6:	490c                	lw	a1,16(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000bc8:	471d                	li	a4,7
 8000bca:	00c71733          	sll	a4,a4,a2
 8000bce:	fff74713          	not	a4,a4
 8000bd2:	8f6d                	and	a4,a4,a1
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
 8000bd4:	00c69633          	sll	a2,a3,a2
 8000bd8:	8e59                	or	a2,a2,a4
        ADC_SAMPT1(adc_periph) = sampt;
 8000bda:	c910                	sw	a2,16(a0)
 8000bdc:	8082                	ret
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
 8000bde:	47ad                	li	a5,11
 8000be0:	02b7e363          	bltu	a5,a1,8000c06 <adc_regular_channel_config+0x70>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000be4:	15e9                	addi	a1,a1,-6
 8000be6:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ1(adc_periph);
 8000bea:	03052803          	lw	a6,48(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000bee:	47fd                	li	a5,31
 8000bf0:	00b797b3          	sll	a5,a5,a1
 8000bf4:	fff7c793          	not	a5,a5
 8000bf8:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
 8000bfc:	00b615b3          	sll	a1,a2,a1
 8000c00:	8ddd                	or	a1,a1,a5
        ADC_RSQ1(adc_periph) = rsq;
 8000c02:	d90c                	sw	a1,48(a0)
 8000c04:	bf5d                	j	8000bba <adc_regular_channel_config+0x24>
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
 8000c06:	47bd                	li	a5,15
 8000c08:	fab7e9e3          	bltu	a5,a1,8000bba <adc_regular_channel_config+0x24>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000c0c:	15d1                	addi	a1,a1,-12
 8000c0e:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ0(adc_periph);
 8000c12:	02c52803          	lw	a6,44(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000c16:	47fd                	li	a5,31
 8000c18:	00b797b3          	sll	a5,a5,a1
 8000c1c:	fff7c793          	not	a5,a5
 8000c20:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
 8000c24:	00b615b3          	sll	a1,a2,a1
 8000c28:	8ddd                	or	a1,a1,a5
        ADC_RSQ0(adc_periph) = rsq;
 8000c2a:	d54c                	sw	a1,44(a0)
 8000c2c:	b779                	j	8000bba <adc_regular_channel_config+0x24>
    }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
 8000c2e:	47c5                	li	a5,17
 8000c30:	02c7e163          	bltu	a5,a2,8000c52 <adc_regular_channel_config+0xbc>
        /* the regular group sequence rank is smaller than eighteen */
        sampt = ADC_SAMPT0(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000c34:	478d                	li	a5,3
 8000c36:	1659                	addi	a2,a2,-10
 8000c38:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT0(adc_periph);
 8000c3c:	4558                	lw	a4,12(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000c3e:	479d                	li	a5,7
 8000c40:	00c797b3          	sll	a5,a5,a2
 8000c44:	fff7c793          	not	a5,a5
 8000c48:	8ff9                	and	a5,a5,a4
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
 8000c4a:	00c69633          	sll	a2,a3,a2
 8000c4e:	8fd1                	or	a5,a5,a2
        ADC_SAMPT0(adc_periph) = sampt;
 8000c50:	c55c                	sw	a5,12(a0)
    }else{
    }
}
 8000c52:	8082                	ret

08000c54 <adc_external_trigger_source_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
{   
    switch(adc_channel_group){
 8000c54:	4785                	li	a5,1
 8000c56:	00f58663          	beq	a1,a5,8000c62 <adc_external_trigger_source_config+0xe>
 8000c5a:	4789                	li	a5,2
 8000c5c:	00f58d63          	beq	a1,a5,8000c76 <adc_external_trigger_source_config+0x22>
 8000c60:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure ADC regular group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
 8000c62:	4514                	lw	a3,8(a0)
 8000c64:	fff205b7          	lui	a1,0xfff20
 8000c68:	15fd                	addi	a1,a1,-1
 8000c6a:	8eed                	and	a3,a3,a1
 8000c6c:	c514                	sw	a3,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000c6e:	4518                	lw	a4,8(a0)
 8000c70:	8f51                	or	a4,a4,a2
 8000c72:	c518                	sw	a4,8(a0)
        break;
 8000c74:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure ADC inserted group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
 8000c76:	4518                	lw	a4,8(a0)
 8000c78:	76e5                	lui	a3,0xffff9
 8000c7a:	16fd                	addi	a3,a3,-1
 8000c7c:	8f75                	and	a4,a4,a3
 8000c7e:	c518                	sw	a4,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000c80:	451c                	lw	a5,8(a0)
 8000c82:	8fd1                	or	a5,a5,a2
 8000c84:	c51c                	sw	a5,8(a0)
        break;
    default:
        break;
    }
}
 8000c86:	8082                	ret

08000c88 <adc_external_trigger_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
{
    if(newvalue){
 8000c88:	0015f793          	andi	a5,a1,1
 8000c8c:	8989                	andi	a1,a1,2
 8000c8e:	ce09                	beqz	a2,8000ca8 <adc_external_trigger_config+0x20>
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000c90:	c791                	beqz	a5,8000c9c <adc_external_trigger_config+0x14>
            /* enable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
 8000c92:	451c                	lw	a5,8(a0)
 8000c94:	00100737          	lui	a4,0x100
 8000c98:	8fd9                	or	a5,a5,a4
 8000c9a:	c51c                	sw	a5,8(a0)
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000c9c:	c589                	beqz	a1,8000ca6 <adc_external_trigger_config+0x1e>
            /* enable ADC inserted channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
 8000c9e:	451c                	lw	a5,8(a0)
 8000ca0:	6721                	lui	a4,0x8
 8000ca2:	8fd9                	or	a5,a5,a4
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000ca4:	c51c                	sw	a5,8(a0)
        }      
    }
}
 8000ca6:	8082                	ret
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000ca8:	c799                	beqz	a5,8000cb6 <adc_external_trigger_config+0x2e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
 8000caa:	451c                	lw	a5,8(a0)
 8000cac:	fff00737          	lui	a4,0xfff00
 8000cb0:	177d                	addi	a4,a4,-1
 8000cb2:	8ff9                	and	a5,a5,a4
 8000cb4:	c51c                	sw	a5,8(a0)
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000cb6:	d9e5                	beqz	a1,8000ca6 <adc_external_trigger_config+0x1e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000cb8:	451c                	lw	a5,8(a0)
 8000cba:	7761                	lui	a4,0xffff8
 8000cbc:	177d                	addi	a4,a4,-1
 8000cbe:	8ff9                	and	a5,a5,a4
 8000cc0:	b7d5                	j	8000ca4 <adc_external_trigger_config+0x1c>

08000cc2 <adc_software_trigger_enable>:
    \param[out] none
    \retval     none
*/
void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
{
    if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000cc2:	0015f793          	andi	a5,a1,1
 8000cc6:	c791                	beqz	a5,8000cd2 <adc_software_trigger_enable+0x10>
        /* enable ADC regular channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
 8000cc8:	451c                	lw	a5,8(a0)
 8000cca:	00400737          	lui	a4,0x400
 8000cce:	8fd9                	or	a5,a5,a4
 8000cd0:	c51c                	sw	a5,8(a0)
    }
    if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000cd2:	8989                	andi	a1,a1,2
 8000cd4:	c591                	beqz	a1,8000ce0 <adc_software_trigger_enable+0x1e>
        /* enable ADC inserted channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
 8000cd6:	451c                	lw	a5,8(a0)
 8000cd8:	00200737          	lui	a4,0x200
 8000cdc:	8fd9                	or	a5,a5,a4
 8000cde:	c51c                	sw	a5,8(a0)
    }
}
 8000ce0:	8082                	ret

08000ce2 <dma_deinit>:
*/
static ErrStatus dma_periph_and_channel_check(uint32_t dma_periph, dma_channel_enum channelx)
{
    ErrStatus val = SUCCESS;

    if(DMA1 == dma_periph){
 8000ce2:	400207b7          	lui	a5,0x40020
 8000ce6:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000cea:	00f51663          	bne	a0,a5,8000cf6 <dma_deinit+0x14>
        /* for DMA1, the channel is from DMA_CH0 to DMA_CH4 */
        if(channelx > DMA_CH4){
 8000cee:	4791                	li	a5,4
 8000cf0:	00b7f363          	bgeu	a5,a1,8000cf6 <dma_deinit+0x14>
		DMA_WRONG_HANDLE
 8000cf4:	a001                	j	8000cf4 <dma_deinit+0x12>
	DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
 8000cf6:	47d1                	li	a5,20
 8000cf8:	02f587b3          	mul	a5,a1,a5
 8000cfc:	97aa                	add	a5,a5,a0
 8000cfe:	4798                	lw	a4,8(a5)
 8000d00:	9b79                	andi	a4,a4,-2
 8000d02:	c798                	sw	a4,8(a5)
	DMA_CHCTL(dma_periph, channelx) = DMA_CHCTL_RESET_VALUE;
 8000d04:	0007a423          	sw	zero,8(a5)
	DMA_CHCNT(dma_periph, channelx) = DMA_CHCNT_RESET_VALUE;
 8000d08:	0007a623          	sw	zero,12(a5)
	DMA_CHPADDR(dma_periph, channelx) = DMA_CHPADDR_RESET_VALUE;
 8000d0c:	0007a823          	sw	zero,16(a5)
	DMA_CHMADDR(dma_periph, channelx) = DMA_CHMADDR_RESET_VALUE;
 8000d10:	0007aa23          	sw	zero,20(a5)
	DMA_INTC(dma_periph) |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, (uint32_t)channelx);
 8000d14:	4158                	lw	a4,4(a0)
 8000d16:	00259793          	slli	a5,a1,0x2
 8000d1a:	45bd                	li	a1,15
 8000d1c:	00f595b3          	sll	a1,a1,a5
 8000d20:	8dd9                	or	a1,a1,a4
 8000d22:	c14c                	sw	a1,4(a0)
}
 8000d24:	8082                	ret

08000d26 <dma_init>:
    if(DMA1 == dma_periph){
 8000d26:	400207b7          	lui	a5,0x40020
 8000d2a:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000d2e:	00f51663          	bne	a0,a5,8000d3a <dma_init+0x14>
        if(channelx > DMA_CH4){
 8000d32:	4791                	li	a5,4
 8000d34:	00b7f363          	bgeu	a5,a1,8000d3a <dma_init+0x14>
        DMA_WRONG_HANDLE
 8000d38:	a001                	j	8000d38 <dma_init+0x12>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000d3a:	47d1                	li	a5,20
 8000d3c:	02f585b3          	mul	a1,a1,a5
 8000d40:	421c                	lw	a5,0(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000d42:	7771                	lui	a4,0xffffc
 8000d44:	0ff70713          	addi	a4,a4,255 # ffffc0ff <_sp+0xdfff40ff>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000d48:	952e                	add	a0,a0,a1
 8000d4a:	c91c                	sw	a5,16(a0)
    DMA_CHMADDR(dma_periph, channelx) = init_struct->memory_addr;
 8000d4c:	461c                	lw	a5,8(a2)
 8000d4e:	c95c                	sw	a5,20(a0)
    DMA_CHCNT(dma_periph, channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 8000d50:	01065783          	lhu	a5,16(a2)
 8000d54:	c55c                	sw	a5,12(a0)
    ctl = DMA_CHCTL(dma_periph, channelx);
 8000d56:	451c                	lw	a5,8(a0)
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000d58:	4654                	lw	a3,12(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000d5a:	8f7d                	and	a4,a4,a5
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000d5c:	425c                	lw	a5,4(a2)
 8000d5e:	8fd5                	or	a5,a5,a3
 8000d60:	4a54                	lw	a3,20(a2)
 8000d62:	8fd5                	or	a5,a5,a3
 8000d64:	8fd9                	or	a5,a5,a4
    DMA_CHCTL(dma_periph, channelx) = ctl;
 8000d66:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc){
 8000d68:	01864703          	lbu	a4,24(a2)
 8000d6c:	4785                	li	a5,1
 8000d6e:	02f71663          	bne	a4,a5,8000d9a <dma_init+0x74>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
 8000d72:	451c                	lw	a5,8(a0)
 8000d74:	0407e793          	ori	a5,a5,64
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000d78:	c51c                	sw	a5,8(a0)
    if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc){
 8000d7a:	01964703          	lbu	a4,25(a2)
 8000d7e:	4785                	li	a5,1
 8000d80:	02f71163          	bne	a4,a5,8000da2 <dma_init+0x7c>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
 8000d84:	451c                	lw	a5,8(a0)
 8000d86:	0807e793          	ori	a5,a5,128
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000d8a:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction){
 8000d8c:	01a64783          	lbu	a5,26(a2)
 8000d90:	ef89                	bnez	a5,8000daa <dma_init+0x84>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
 8000d92:	451c                	lw	a5,8(a0)
 8000d94:	9bbd                	andi	a5,a5,-17
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000d96:	c51c                	sw	a5,8(a0)
}
 8000d98:	8082                	ret
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000d9a:	451c                	lw	a5,8(a0)
 8000d9c:	fbf7f793          	andi	a5,a5,-65
 8000da0:	bfe1                	j	8000d78 <dma_init+0x52>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000da2:	451c                	lw	a5,8(a0)
 8000da4:	f7f7f793          	andi	a5,a5,-129
 8000da8:	b7cd                	j	8000d8a <dma_init+0x64>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000daa:	451c                	lw	a5,8(a0)
 8000dac:	0107e793          	ori	a5,a5,16
 8000db0:	b7dd                	j	8000d96 <dma_init+0x70>

08000db2 <dma_circulation_disable>:
    if(DMA1 == dma_periph){
 8000db2:	400207b7          	lui	a5,0x40020
 8000db6:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000dba:	00f51663          	bne	a0,a5,8000dc6 <dma_circulation_disable+0x14>
        if(channelx > DMA_CH4){
 8000dbe:	4791                	li	a5,4
 8000dc0:	00b7f363          	bgeu	a5,a1,8000dc6 <dma_circulation_disable+0x14>
        DMA_WRONG_HANDLE
 8000dc4:	a001                	j	8000dc4 <dma_circulation_disable+0x12>
    DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CMEN;
 8000dc6:	47d1                	li	a5,20
 8000dc8:	02f585b3          	mul	a1,a1,a5
 8000dcc:	952e                	add	a0,a0,a1
 8000dce:	451c                	lw	a5,8(a0)
 8000dd0:	fdf7f793          	andi	a5,a5,-33
 8000dd4:	c51c                	sw	a5,8(a0)
}
 8000dd6:	8082                	ret

08000dd8 <dma_channel_enable>:
    if(DMA1 == dma_periph){
 8000dd8:	400207b7          	lui	a5,0x40020
 8000ddc:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000de0:	00f51663          	bne	a0,a5,8000dec <dma_channel_enable+0x14>
        if(channelx > DMA_CH4){
 8000de4:	4791                	li	a5,4
 8000de6:	00b7f363          	bgeu	a5,a1,8000dec <dma_channel_enable+0x14>
        DMA_WRONG_HANDLE
 8000dea:	a001                	j	8000dea <dma_channel_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CHEN;
 8000dec:	47d1                	li	a5,20
 8000dee:	02f585b3          	mul	a1,a1,a5
 8000df2:	952e                	add	a0,a0,a1
 8000df4:	451c                	lw	a5,8(a0)
 8000df6:	0017e793          	ori	a5,a5,1
 8000dfa:	c51c                	sw	a5,8(a0)
}
 8000dfc:	8082                	ret

08000dfe <dma_flag_clear>:
    DMA_INTC(dma_periph) |= DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000dfe:	415c                	lw	a5,4(a0)
 8000e00:	058a                	slli	a1,a1,0x2
 8000e02:	00b61633          	sll	a2,a2,a1
 8000e06:	8e5d                	or	a2,a2,a5
 8000e08:	c150                	sw	a2,4(a0)
}
 8000e0a:	8082                	ret

08000e0c <dma_interrupt_flag_get>:
	switch(flag){
 8000e0c:	4791                	li	a5,4
 8000e0e:	02f60a63          	beq	a2,a5,8000e42 <dma_interrupt_flag_get+0x36>
 8000e12:	47a1                	li	a5,8
 8000e14:	04f60563          	beq	a2,a5,8000e5e <dma_interrupt_flag_get+0x52>
 8000e18:	4789                	li	a5,2
 8000e1a:	06f61063          	bne	a2,a5,8000e7a <dma_interrupt_flag_get+0x6e>
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e1e:	411c                	lw	a5,0(a0)
 8000e20:	00259713          	slli	a4,a1,0x2
 8000e24:	00e61633          	sll	a2,a2,a4
 8000e28:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_FTFIE;
 8000e2a:	47d1                	li	a5,20
 8000e2c:	02f585b3          	mul	a1,a1,a5
 8000e30:	05a1                	addi	a1,a1,8
 8000e32:	95aa                	add	a1,a1,a0
 8000e34:	419c                	lw	a5,0(a1)
 8000e36:	8b89                	andi	a5,a5,2
	if(interrupt_flag && interrupt_enable){
 8000e38:	c219                	beqz	a2,8000e3e <dma_interrupt_flag_get+0x32>
 8000e3a:	00f03633          	snez	a2,a5
}
 8000e3e:	8532                	mv	a0,a2
 8000e40:	8082                	ret
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e42:	411c                	lw	a5,0(a0)
 8000e44:	00259713          	slli	a4,a1,0x2
 8000e48:	00e61633          	sll	a2,a2,a4
 8000e4c:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_HTFIE;
 8000e4e:	47d1                	li	a5,20
 8000e50:	02f585b3          	mul	a1,a1,a5
 8000e54:	05a1                	addi	a1,a1,8
 8000e56:	95aa                	add	a1,a1,a0
 8000e58:	419c                	lw	a5,0(a1)
 8000e5a:	8b91                	andi	a5,a5,4
			break;
 8000e5c:	bff1                	j	8000e38 <dma_interrupt_flag_get+0x2c>
			interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, (uint32_t)channelx);
 8000e5e:	411c                	lw	a5,0(a0)
 8000e60:	00259713          	slli	a4,a1,0x2
 8000e64:	00e61633          	sll	a2,a2,a4
 8000e68:	8e7d                	and	a2,a2,a5
			interrupt_enable = DMA_CHCTL(dma_periph, (uint32_t)channelx) & DMA_CHXCTL_ERRIE;
 8000e6a:	47d1                	li	a5,20
 8000e6c:	02f585b3          	mul	a1,a1,a5
 8000e70:	05a1                	addi	a1,a1,8
 8000e72:	95aa                	add	a1,a1,a0
 8000e74:	419c                	lw	a5,0(a1)
 8000e76:	8ba1                	andi	a5,a5,8
			break;
 8000e78:	b7c1                	j	8000e38 <dma_interrupt_flag_get+0x2c>
			DMA_WRONG_HANDLE
 8000e7a:	a001                	j	8000e7a <dma_interrupt_flag_get+0x6e>

08000e7c <dma_interrupt_flag_clear>:
 8000e7c:	00000317          	auipc	t1,0x0
 8000e80:	f8230067          	jr	-126(t1) # 8000dfe <dma_flag_clear>

08000e84 <dma_interrupt_enable>:
    if(DMA1 == dma_periph){
 8000e84:	40020737          	lui	a4,0x40020
 8000e88:	40070713          	addi	a4,a4,1024 # 40020400 <_sp+0x20018400>
 8000e8c:	00e51663          	bne	a0,a4,8000e98 <dma_interrupt_enable+0x14>
        if(channelx > DMA_CH4){
 8000e90:	4791                	li	a5,4
 8000e92:	00b7f363          	bgeu	a5,a1,8000e98 <dma_interrupt_enable+0x14>
        DMA_WRONG_HANDLE
 8000e96:	a001                	j	8000e96 <dma_interrupt_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= source;
 8000e98:	47d1                	li	a5,20
 8000e9a:	02f585b3          	mul	a1,a1,a5
 8000e9e:	952e                	add	a0,a0,a1
 8000ea0:	451c                	lw	a5,8(a0)
 8000ea2:	8fd1                	or	a5,a5,a2
 8000ea4:	c51c                	sw	a5,8(a0)
}
 8000ea6:	8082                	ret

08000ea8 <eclic_global_interrupt_enable>:
    \retval     none
*/
void eclic_global_interrupt_enable(void)
{
    /* set machine interrupt enable bit */
    set_csr(mstatus, MSTATUS_MIE);
 8000ea8:	300467f3          	csrrsi	a5,mstatus,8
}
 8000eac:	8082                	ret

08000eae <eclic_global_interrupt_disable>:
    \retval     none
*/
void eclic_global_interrupt_disable(void)
{
    /* clear machine interrupt enable bit */
    clear_csr(mstatus, MSTATUS_MIE);
 8000eae:	300477f3          	csrrci	a5,mstatus,8
}
 8000eb2:	8082                	ret

08000eb4 <eclic_priority_group_set>:
    \param[out] none
    \retval     none
*/
void eclic_priority_group_set(uint8_t prigroup)
{
    eclic_set_nlbits(prigroup);
 8000eb4:	00001317          	auipc	t1,0x1
 8000eb8:	f1a30067          	jr	-230(t1) # 8001dce <eclic_set_nlbits>

08000ebc <eclic_irq_enable>:
    \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
    \param[out] none
    \retval     none
*/
void eclic_irq_enable(uint32_t source, uint8_t level, uint8_t priority)
{
 8000ebc:	1101                	addi	sp,sp,-32
 8000ebe:	ce06                	sw	ra,28(sp)
 8000ec0:	cc22                	sw	s0,24(sp)
 8000ec2:	c432                	sw	a2,8(sp)
 8000ec4:	842a                	mv	s0,a0
 8000ec6:	c62e                	sw	a1,12(sp)
    eclic_enable_interrupt(source);
 8000ec8:	00001097          	auipc	ra,0x1
 8000ecc:	ef4080e7          	jalr	-268(ra) # 8001dbc <eclic_enable_interrupt>
    eclic_set_irq_lvl_abs(source, level);
 8000ed0:	45b2                	lw	a1,12(sp)
 8000ed2:	8522                	mv	a0,s0
 8000ed4:	00001097          	auipc	ra,0x1
 8000ed8:	f20080e7          	jalr	-224(ra) # 8001df4 <eclic_set_irq_lvl_abs>
    eclic_set_irq_priority(source, priority);
 8000edc:	4622                	lw	a2,8(sp)
 8000ede:	8522                	mv	a0,s0
}
 8000ee0:	4462                	lw	s0,24(sp)
 8000ee2:	40f2                	lw	ra,28(sp)
    eclic_set_irq_priority(source, priority);
 8000ee4:	85b2                	mv	a1,a2
}
 8000ee6:	6105                	addi	sp,sp,32
    eclic_set_irq_priority(source, priority);
 8000ee8:	00001317          	auipc	t1,0x1
 8000eec:	f6430067          	jr	-156(t1) # 8001e4c <eclic_set_irq_priority>

08000ef0 <exti_interrupt_flag_clear>:
 8000ef0:	400107b7          	lui	a5,0x40010
 8000ef4:	40a7aa23          	sw	a0,1044(a5) # 40010414 <_sp+0x20008414>
 8000ef8:	8082                	ret

08000efa <gpio_init>:

    /* GPIO mode configuration */
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));

    /* GPIO speed configuration */
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000efa:	0105f793          	andi	a5,a1,16
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));
 8000efe:	00f5f893          	andi	a7,a1,15
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000f02:	c399                	beqz	a5,8000f08 <gpio_init+0xe>
        /* output mode max speed:10MHz,2MHz,50MHz */
        temp_mode |= (uint32_t) speed;
 8000f04:	00c8e8b3          	or	a7,a7,a2
{
 8000f08:	4781                	li	a5,0
    }

    /* configure the eight low port pins with GPIO_CTL0 */
    for (i = 0U; i < 8U; i++) {
        if ((1U << i) & pin) {
 8000f0a:	4e05                	li	t3,1
            reg = GPIO_CTL0(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i);
 8000f0c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000f0e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000f12:	04800f93          	li	t6,72
    for (i = 0U; i < 8U; i++) {
 8000f16:	4321                	li	t1,8
        if ((1U << i) & pin) {
 8000f18:	00fe1633          	sll	a2,t3,a5
 8000f1c:	8e75                	and	a2,a2,a3
 8000f1e:	c21d                	beqz	a2,8000f44 <gpio_init+0x4a>
            reg = GPIO_CTL0(gpio_periph);
 8000f20:	00279713          	slli	a4,a5,0x2
 8000f24:	00052283          	lw	t0,0(a0)
            reg &= ~GPIO_MODE_MASK(i);
 8000f28:	00ee9833          	sll	a6,t4,a4
 8000f2c:	fff84813          	not	a6,a6
 8000f30:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i, temp_mode);
 8000f34:	00e89733          	sll	a4,a7,a4
 8000f38:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 8000f3c:	05e59963          	bne	a1,t5,8000f8e <gpio_init+0x94>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f40:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL0 register */
            GPIO_CTL0(gpio_periph) = reg;
 8000f42:	c118                	sw	a4,0(a0)
 8000f44:	0785                	addi	a5,a5,1
    for (i = 0U; i < 8U; i++) {
 8000f46:	fc6799e3          	bne	a5,t1,8000f18 <gpio_init+0x1e>
        }
    }
    /* configure the eight high port pins with GPIO_CTL1 */
    for (i = 8U; i < 16U; i++) {
        if ((1U << i) & pin) {
 8000f4a:	4e05                	li	t3,1
            reg = GPIO_CTL1(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f4c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000f4e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000f52:	04800f93          	li	t6,72
    for (i = 8U; i < 16U; i++) {
 8000f56:	4341                	li	t1,16
        if ((1U << i) & pin) {
 8000f58:	00fe1633          	sll	a2,t3,a5
 8000f5c:	8e75                	and	a2,a2,a3
 8000f5e:	c605                	beqz	a2,8000f86 <gpio_init+0x8c>
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f60:	00279713          	slli	a4,a5,0x2
 8000f64:	1701                	addi	a4,a4,-32
            reg = GPIO_CTL1(gpio_periph);
 8000f66:	00452283          	lw	t0,4(a0)
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8000f6a:	00ee9833          	sll	a6,t4,a4
 8000f6e:	fff84813          	not	a6,a6
 8000f72:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);
 8000f76:	00e89733          	sll	a4,a7,a4
 8000f7a:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 8000f7e:	01e59c63          	bne	a1,t5,8000f96 <gpio_init+0x9c>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f82:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL1 register */
            GPIO_CTL1(gpio_periph) = reg;
 8000f84:	c158                	sw	a4,4(a0)
 8000f86:	0785                	addi	a5,a5,1
    for (i = 8U; i < 16U; i++) {
 8000f88:	fc6798e3          	bne	a5,t1,8000f58 <gpio_init+0x5e>
        }
    }
}
 8000f8c:	8082                	ret
                if (GPIO_MODE_IPU == mode) {
 8000f8e:	fbf59ae3          	bne	a1,t6,8000f42 <gpio_init+0x48>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f92:	c910                	sw	a2,16(a0)
 8000f94:	b77d                	j	8000f42 <gpio_init+0x48>
                if (GPIO_MODE_IPU == mode) {
 8000f96:	fff597e3          	bne	a1,t6,8000f84 <gpio_init+0x8a>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8000f9a:	c910                	sw	a2,16(a0)
 8000f9c:	b7e5                	j	8000f84 <gpio_init+0x8a>

08000f9e <gpio_bit_set>:
    \param[out] none
    \retval     none
*/
void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8000f9e:	c90c                	sw	a1,16(a0)
}
 8000fa0:	8082                	ret

08000fa2 <gpio_bit_reset>:
    \param[out] none
    \retval     none
*/
void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BC(gpio_periph) = (uint32_t) pin;
 8000fa2:	c94c                	sw	a1,20(a0)
}
 8000fa4:	8082                	ret

08000fa6 <gpio_bit_write>:
    \param[out] none
    \retval     none
*/
void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
{
    if (RESET != bit_value) {
 8000fa6:	c219                	beqz	a2,8000fac <gpio_bit_write+0x6>
        GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8000fa8:	c90c                	sw	a1,16(a0)
 8000faa:	8082                	ret
    } else {
        GPIO_BC(gpio_periph) = (uint32_t) pin;
 8000fac:	c94c                	sw	a1,20(a0)
    }
}
 8000fae:	8082                	ret

08000fb0 <i2c_clock_config>:
     \arg        I2C_DTCY_2: T_low/T_high=2 
     \arg        I2C_DTCY_16_9: T_low/T_high=16/9
    \param[out] none
    \retval     none
 */
void i2c_clock_config(uint32_t i2c_periph, uint32_t clkspeed, uint32_t dutycyc){
 8000fb0:	1101                	addi	sp,sp,-32
 8000fb2:	cc22                	sw	s0,24(sp)
 8000fb4:	842a                	mv	s0,a0
    uint32_t pclk1, clkc, freq, risetime;
    uint32_t temp;
    
    pclk1 = rcu_clock_freq_get(CK_APB1);
 8000fb6:	4509                	li	a0,2
void i2c_clock_config(uint32_t i2c_periph, uint32_t clkspeed, uint32_t dutycyc){
 8000fb8:	ca26                	sw	s1,20(sp)
 8000fba:	c632                	sw	a2,12(sp)
 8000fbc:	ce06                	sw	ra,28(sp)
 8000fbe:	84ae                	mv	s1,a1
    pclk1 = rcu_clock_freq_get(CK_APB1);
 8000fc0:	00000097          	auipc	ra,0x0
 8000fc4:	282080e7          	jalr	642(ra) # 8001242 <rcu_clock_freq_get>
    /* I2C peripheral clock frequency */
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fc8:	000f47b7          	lui	a5,0xf4
    if (freq >= I2CCLK_MAX) {
 8000fcc:	033806b7          	lui	a3,0x3380
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fd0:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf3240>
    if (freq >= I2CCLK_MAX) {
 8000fd4:	97f68693          	addi	a3,a3,-1665 # 337f97f <__stack_size+0x337e97f>
    freq = (uint32_t) (pclk1 / 1000000U);
 8000fd8:	02f55733          	divu	a4,a0,a5
    if (freq >= I2CCLK_MAX) {
 8000fdc:	4632                	lw	a2,12(sp)
        freq = I2CCLK_MAX;
 8000fde:	03600793          	li	a5,54
    if (freq >= I2CCLK_MAX) {
 8000fe2:	00a6e363          	bltu	a3,a0,8000fe8 <i2c_clock_config+0x38>
 8000fe6:	87ba                	mv	a5,a4
    }
    temp = I2C_CTL1(i2c_periph);
 8000fe8:	4054                	lw	a3,4(s0)
    temp &= ~I2C_CTL1_I2CCLK;
 8000fea:	fc06f693          	andi	a3,a3,-64
    temp |= freq;
 8000fee:	8edd                	or	a3,a3,a5
    
    I2C_CTL1(i2c_periph) = temp;
 8000ff0:	c054                	sw	a3,4(s0)
    
    if (100000U >= clkspeed) {
 8000ff2:	66e1                	lui	a3,0x18
 8000ff4:	6a068693          	addi	a3,a3,1696 # 186a0 <__stack_size+0x176a0>
 8000ff8:	0496e163          	bltu	a3,s1,800103a <i2c_clock_config+0x8a>
        /* the maximum SCL rise time is 1000ns in standard mode */
        risetime = (uint32_t) ((pclk1 / 1000000U) + 1U);
 8000ffc:	00170793          	addi	a5,a4,1
        if (risetime >= I2CCLK_MAX) {
 8001000:	03500713          	li	a4,53
 8001004:	00f77663          	bgeu	a4,a5,8001010 <i2c_clock_config+0x60>
            I2C_RT(i2c_periph) = I2CCLK_MAX;
 8001008:	03600793          	li	a5,54
        } else if (risetime <= I2CCLK_MIN) {
            I2C_RT(i2c_periph) = I2CCLK_MIN;
        } else {
            I2C_RT(i2c_periph) = risetime;
 800100c:	d01c                	sw	a5,32(s0)
 800100e:	a029                	j	8001018 <i2c_clock_config+0x68>
        } else if (risetime <= I2CCLK_MIN) {
 8001010:	4709                	li	a4,2
 8001012:	fef76de3          	bltu	a4,a5,800100c <i2c_clock_config+0x5c>
            I2C_RT(i2c_periph) = I2CCLK_MIN;
 8001016:	d018                	sw	a4,32(s0)
        }
        clkc = (uint32_t) (pclk1 / (clkspeed * 2U)); 
 8001018:	0486                	slli	s1,s1,0x1
        if (clkc < 0x04U) {
            /* the CLKC in standard mode minmum value is 4 */
            clkc = 0x04U;
        }
        I2C_CKCFG(i2c_periph) |= (I2C_CKCFG_CLKC & clkc);
 800101a:	02955533          	divu	a0,a0,s1
 800101e:	4c5c                	lw	a5,28(s0)
 8001020:	4711                	li	a4,4
 8001022:	00e57363          	bgeu	a0,a4,8001028 <i2c_clock_config+0x78>
 8001026:	4511                	li	a0,4
 8001028:	0552                	slli	a0,a0,0x14
 800102a:	8151                	srli	a0,a0,0x14
 800102c:	8d5d                	or	a0,a0,a5
        if (0U == (clkc & I2C_CKCFG_CLKC)) {
            /* the CLKC in fast mode minmum value is 1 */
            clkc |= 0x0001U;  
        }
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
        I2C_CKCFG(i2c_periph) |= clkc;
 800102e:	cc48                	sw	a0,28(s0)
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
        I2C_CKCFG(i2c_periph) |= clkc;
        /* enable I2C fast mode plus */
        I2C_FMPCFG(i2c_periph) |= I2C_FMPCFG_FMPEN;
    }
}
 8001030:	40f2                	lw	ra,28(sp)
 8001032:	4462                	lw	s0,24(sp)
 8001034:	44d2                	lw	s1,20(sp)
 8001036:	6105                	addi	sp,sp,32
 8001038:	8082                	ret
    } else if (400000U >= clkspeed) {
 800103a:	00062737          	lui	a4,0x62
 800103e:	a8070713          	addi	a4,a4,-1408 # 61a80 <__stack_size+0x60a80>
 8001042:	04976c63          	bltu	a4,s1,800109a <i2c_clock_config+0xea>
        I2C_RT(i2c_periph) = (uint32_t) (((freq * (uint32_t) 300U)/(uint32_t)1000U)+(uint32_t)1U);
 8001046:	12c00713          	li	a4,300
 800104a:	02e787b3          	mul	a5,a5,a4
 800104e:	3e800713          	li	a4,1000
 8001052:	02e7d7b3          	divu	a5,a5,a4
 8001056:	0785                	addi	a5,a5,1
 8001058:	d01c                	sw	a5,32(s0)
        if (I2C_DTCY_2 == dutycyc){
 800105a:	e61d                	bnez	a2,8001088 <i2c_clock_config+0xd8>
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 800105c:	478d                	li	a5,3
 800105e:	02f484b3          	mul	s1,s1,a5
            I2C_CKCFG(i2c_periph) &= ~I2C_CKCFG_DTCY;
 8001062:	4c5c                	lw	a5,28(s0)
 8001064:	7771                	lui	a4,0xffffc
 8001066:	177d                	addi	a4,a4,-1
 8001068:	8ff9                	and	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 800106a:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 800106e:	cc5c                	sw	a5,28(s0)
        if (0U == (clkc & I2C_CKCFG_CLKC)) {
 8001070:	01451793          	slli	a5,a0,0x14
 8001074:	e399                	bnez	a5,800107a <i2c_clock_config+0xca>
            clkc |= 0x0001U;  
 8001076:	00156513          	ori	a0,a0,1
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
 800107a:	4c5c                	lw	a5,28(s0)
 800107c:	6721                	lui	a4,0x8
 800107e:	8fd9                	or	a5,a5,a4
 8001080:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= clkc;
 8001082:	4c44                	lw	s1,28(s0)
 8001084:	8d45                	or	a0,a0,s1
 8001086:	b765                	j	800102e <i2c_clock_config+0x7e>
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 8001088:	47e5                	li	a5,25
 800108a:	02f484b3          	mul	s1,s1,a5
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 800108e:	4c5c                	lw	a5,28(s0)
 8001090:	6711                	lui	a4,0x4
 8001092:	8fd9                	or	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 8001094:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 8001098:	bfd9                	j	800106e <i2c_clock_config+0xbe>
        I2C_RT (i2c_periph) = (uint32_t) (((freq * (uint32_t) 120U) / (uint32_t) 1000U)+(uint32_t) 1U);
 800109a:	07800713          	li	a4,120
 800109e:	02e787b3          	mul	a5,a5,a4
 80010a2:	3e800713          	li	a4,1000
 80010a6:	02e7d7b3          	divu	a5,a5,a4
 80010aa:	0785                	addi	a5,a5,1
 80010ac:	d01c                	sw	a5,32(s0)
        if (I2C_DTCY_2 == dutycyc) {
 80010ae:	ea0d                	bnez	a2,80010e0 <i2c_clock_config+0x130>
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 80010b0:	458d                	li	a1,3
 80010b2:	02b484b3          	mul	s1,s1,a1
            I2C_CKCFG(i2c_periph) &= ~I2C_CKCFG_DTCY;
 80010b6:	4c5c                	lw	a5,28(s0)
 80010b8:	7771                	lui	a4,0xffffc
 80010ba:	177d                	addi	a4,a4,-1
 80010bc:	8ff9                	and	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 3U));
 80010be:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010c2:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
 80010c4:	4c5c                	lw	a5,28(s0)
 80010c6:	6721                	lui	a4,0x8
 80010c8:	8fd9                	or	a5,a5,a4
 80010ca:	cc5c                	sw	a5,28(s0)
        I2C_CKCFG(i2c_periph) |= clkc;
 80010cc:	4c44                	lw	s1,28(s0)
 80010ce:	8d45                	or	a0,a0,s1
 80010d0:	cc48                	sw	a0,28(s0)
        I2C_FMPCFG(i2c_periph) |= I2C_FMPCFG_FMPEN;
 80010d2:	09042783          	lw	a5,144(s0)
 80010d6:	0017e793          	ori	a5,a5,1
 80010da:	08f42823          	sw	a5,144(s0)
}
 80010de:	bf89                	j	8001030 <i2c_clock_config+0x80>
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 80010e0:	45e5                	li	a1,25
 80010e2:	02b484b3          	mul	s1,s1,a1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010e6:	4c5c                	lw	a5,28(s0)
 80010e8:	6711                	lui	a4,0x4
 80010ea:	8fd9                	or	a5,a5,a4
            clkc = (uint32_t) (pclk1 / (clkspeed * 25U));
 80010ec:	02955533          	divu	a0,a0,s1
            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
 80010f0:	bfc9                	j	80010c2 <i2c_clock_config+0x112>

080010f2 <i2c_ack_config>:
    \param[out] none
    \retval     none
 */
void i2c_ack_config(uint32_t i2c_periph, uint32_t ack) 
{
    if (I2C_ACK_ENABLE == ack) {
 80010f2:	4785                	li	a5,1
 80010f4:	00f59763          	bne	a1,a5,8001102 <i2c_ack_config+0x10>
        I2C_CTL0(i2c_periph) |= I2C_CTL0_ACKEN;
 80010f8:	411c                	lw	a5,0(a0)
 80010fa:	4007e793          	ori	a5,a5,1024
    } else {
        I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_ACKEN);
 80010fe:	c11c                	sw	a5,0(a0)
    }
}
 8001100:	8082                	ret
        I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_ACKEN);
 8001102:	411c                	lw	a5,0(a0)
 8001104:	bff7f793          	andi	a5,a5,-1025
 8001108:	bfdd                	j	80010fe <i2c_ack_config+0xc>

0800110a <i2c_master_addressing>:
    \retval     none
 */
void i2c_master_addressing(uint32_t i2c_periph, uint32_t addr,uint32_t trandirection) 
{
    /* master is a transmitter or a receiver */
    if (I2C_TRANSMITTER == trandirection) {
 800110a:	5779                	li	a4,-2
        addr = addr & I2C_TRANSMITTER;
    } else {
        addr = addr | I2C_RECEIVER;
 800110c:	0015e793          	ori	a5,a1,1
    if (I2C_TRANSMITTER == trandirection) {
 8001110:	00e61463          	bne	a2,a4,8001118 <i2c_master_addressing+0xe>
        addr = addr & I2C_TRANSMITTER;
 8001114:	ffe5f793          	andi	a5,a1,-2
    }
    /* send slave address */
    I2C_DATA(i2c_periph) = addr;
 8001118:	c91c                	sw	a5,16(a0)
}
 800111a:	8082                	ret

0800111c <i2c_enable>:
    \param[out] none
    \retval     none
 */
void i2c_enable(uint32_t i2c_periph) 
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_I2CEN;
 800111c:	411c                	lw	a5,0(a0)
 800111e:	0017e793          	ori	a5,a5,1
 8001122:	c11c                	sw	a5,0(a0)
}
 8001124:	8082                	ret

08001126 <i2c_start_on_bus>:
    \param[out] none
    \retval     none
 */
void i2c_start_on_bus(uint32_t i2c_periph) 
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_START;
 8001126:	411c                	lw	a5,0(a0)
 8001128:	1007e793          	ori	a5,a5,256
 800112c:	c11c                	sw	a5,0(a0)
}
 800112e:	8082                	ret

08001130 <i2c_stop_on_bus>:
    \param[out] none
    \retval     none
 */
void i2c_stop_on_bus(uint32_t i2c_periph)
{
    I2C_CTL0(i2c_periph) |= I2C_CTL0_STOP;
 8001130:	411c                	lw	a5,0(a0)
 8001132:	2007e793          	ori	a5,a5,512
 8001136:	c11c                	sw	a5,0(a0)
}
 8001138:	8082                	ret

0800113a <i2c_data_transmit>:
    \param[out] none
    \retval     none
 */
void i2c_data_transmit(uint32_t i2c_periph, uint8_t data) 
{
    I2C_DATA(i2c_periph) = DATA_TRANS(data);
 800113a:	c90c                	sw	a1,16(a0)
}
 800113c:	8082                	ret

0800113e <i2c_data_receive>:
    \param[out] none
    \retval     data of received
 */
uint8_t i2c_data_receive(uint32_t i2c_periph) 
{
    return (uint8_t) DATA_RECV(I2C_DATA(i2c_periph));
 800113e:	4908                	lw	a0,16(a0)
}
 8001140:	0ff57513          	andi	a0,a0,255
 8001144:	8082                	ret

08001146 <i2c_dma_enable>:
void i2c_dma_enable(uint32_t i2c_periph, uint32_t dmastate) 
{
    /* configure I2C DMA function */
    uint32_t ctl = 0U;

    ctl = I2C_CTL1(i2c_periph);
 8001146:	415c                	lw	a5,4(a0)
    ctl &= ~(I2C_CTL1_DMAON);
 8001148:	777d                	lui	a4,0xfffff
 800114a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800114e:	8ff9                	and	a5,a5,a4
    ctl |= dmastate;
 8001150:	8ddd                	or	a1,a1,a5
    I2C_CTL1(i2c_periph) = ctl;
 8001152:	c14c                	sw	a1,4(a0)
}
 8001154:	8082                	ret

08001156 <i2c_dma_last_transfer_config>:
void i2c_dma_last_transfer_config(uint32_t i2c_periph, uint32_t dmalast) 
{
    /* configure DMA last transfer */
    uint32_t ctl = 0U;

    ctl = I2C_CTL1(i2c_periph);
 8001156:	415c                	lw	a5,4(a0)
    ctl &= ~(I2C_CTL1_DMALST);
 8001158:	777d                	lui	a4,0xfffff
 800115a:	177d                	addi	a4,a4,-1
 800115c:	8ff9                	and	a5,a5,a4
    ctl |= dmalast;
 800115e:	8ddd                	or	a1,a1,a5
    I2C_CTL1(i2c_periph) = ctl;
 8001160:	c14c                	sw	a1,4(a0)
}
 8001162:	8082                	ret

08001164 <i2c_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
 */
FlagStatus i2c_flag_get(uint32_t i2c_periph, i2c_flag_enum flag) 
{
    if (RESET != (I2C_REG_VAL(i2c_periph, flag) & BIT(I2C_BIT_POS(flag)))) {
 8001164:	0065d793          	srli	a5,a1,0x6
 8001168:	3ff7f793          	andi	a5,a5,1023
 800116c:	953e                	add	a0,a0,a5
 800116e:	4108                	lw	a0,0(a0)
 8001170:	00b55533          	srl	a0,a0,a1
        return SET;
    } else {
        return RESET;
    }
}
 8001174:	8905                	andi	a0,a0,1
 8001176:	8082                	ret

08001178 <i2c_flag_clear>:
    \param[out] none
    \retval     none
 */
void i2c_flag_clear(uint32_t i2c_periph, i2c_flag_enum flag) 
{
    if (I2C_FLAG_ADDSEND == flag) {
 8001178:	50100793          	li	a5,1281
 800117c:	00f59563          	bne	a1,a5,8001186 <i2c_flag_clear+0xe>
        /* read I2C_STAT0 and then read I2C_STAT1 to clear ADDSEND */
        I2C_STAT0(i2c_periph);
 8001180:	495c                	lw	a5,20(a0)
        I2C_STAT1(i2c_periph);
 8001182:	4d1c                	lw	a5,24(a0)
 8001184:	8082                	ret
    } else {
        I2C_REG_VAL(i2c_periph, flag) &= ~BIT(I2C_BIT_POS(flag));
 8001186:	0065d713          	srli	a4,a1,0x6
 800118a:	3ff77713          	andi	a4,a4,1023
 800118e:	953a                	add	a0,a0,a4
 8001190:	4118                	lw	a4,0(a0)
 8001192:	4785                	li	a5,1
 8001194:	00b797b3          	sll	a5,a5,a1
 8001198:	fff7c793          	not	a5,a5
 800119c:	8ff9                	and	a5,a5,a4
 800119e:	c11c                	sw	a5,0(a0)
    }
}
 80011a0:	8082                	ret

080011a2 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 80011a2:	400217b7          	lui	a5,0x40021
 80011a6:	00655713          	srli	a4,a0,0x6
 80011aa:	973e                	add	a4,a4,a5
 80011ac:	4314                	lw	a3,0(a4)
 80011ae:	4785                	li	a5,1
 80011b0:	00a797b3          	sll	a5,a5,a0
 80011b4:	8fd5                	or	a5,a5,a3
 80011b6:	c31c                	sw	a5,0(a4)
}
 80011b8:	8082                	ret

080011ba <rcu_periph_reset_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
 80011ba:	400217b7          	lui	a5,0x40021
 80011be:	00655713          	srli	a4,a0,0x6
 80011c2:	973e                	add	a4,a4,a5
 80011c4:	4314                	lw	a3,0(a4)
 80011c6:	4785                	li	a5,1
 80011c8:	00a797b3          	sll	a5,a5,a0
 80011cc:	8fd5                	or	a5,a5,a3
 80011ce:	c31c                	sw	a5,0(a4)
}
 80011d0:	8082                	ret

080011d2 <rcu_periph_reset_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
 80011d2:	400217b7          	lui	a5,0x40021
 80011d6:	00655713          	srli	a4,a0,0x6
 80011da:	973e                	add	a4,a4,a5
 80011dc:	4314                	lw	a3,0(a4)
 80011de:	4785                	li	a5,1
 80011e0:	00a797b3          	sll	a5,a5,a0
 80011e4:	fff7c793          	not	a5,a5
 80011e8:	8ff5                	and	a5,a5,a3
 80011ea:	c31c                	sw	a5,0(a4)
}
 80011ec:	8082                	ret

080011ee <rcu_adc_clock_config>:
void rcu_adc_clock_config(uint32_t adc_psc)
{
    uint32_t reg0;

    /* reset the ADCPSC bits */
    reg0 = RCU_CFG0;
 80011ee:	400217b7          	lui	a5,0x40021
 80011f2:	43dc                	lw	a5,4(a5)
    reg0 &= ~(RCU_CFG0_ADCPSC_2 | RCU_CFG0_ADCPSC);
 80011f4:	efff4737          	lui	a4,0xefff4
 80011f8:	177d                	addi	a4,a4,-1
 80011fa:	8ff9                	and	a5,a5,a4

    /* set the ADC prescaler factor */
    switch(adc_psc){
 80011fc:	4715                	li	a4,5
 80011fe:	00e50e63          	beq	a0,a4,800121a <rcu_adc_clock_config+0x2c>
 8001202:	00a76963          	bltu	a4,a0,8001214 <rcu_adc_clock_config+0x26>
 8001206:	470d                	li	a4,3
 8001208:	02a77063          	bgeu	a4,a0,8001228 <rcu_adc_clock_config+0x3a>
        default:
            break;
    }

    /* set the register */
    RCU_CFG0 = reg0;
 800120c:	40021737          	lui	a4,0x40021
 8001210:	c35c                	sw	a5,4(a4)
}
 8001212:	8082                	ret
    switch(adc_psc){
 8001214:	471d                	li	a4,7
 8001216:	fee51be3          	bne	a0,a4,800120c <rcu_adc_clock_config+0x1e>
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 800121a:	053a                	slli	a0,a0,0xe
 800121c:	7731                	lui	a4,0xfffec
 800121e:	8d79                	and	a0,a0,a4
 8001220:	8d5d                	or	a0,a0,a5
 8001222:	100007b7          	lui	a5,0x10000
 8001226:	a011                	j	800122a <rcu_adc_clock_config+0x3c>
            reg0 |= (adc_psc << 14);
 8001228:	053a                	slli	a0,a0,0xe
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 800122a:	8fc9                	or	a5,a5,a0
            break;
 800122c:	b7c5                	j	800120c <rcu_adc_clock_config+0x1e>

0800122e <rcu_usb_clock_config>:
*/
void rcu_usb_clock_config(uint32_t usb_psc)
{
    uint32_t reg;
    
    reg = RCU_CFG0;
 800122e:	400216b7          	lui	a3,0x40021
 8001232:	42dc                	lw	a5,4(a3)

    /* configure the USBFS prescaler factor */
    reg &= ~RCU_CFG0_USBFSPSC;
 8001234:	ff400737          	lui	a4,0xff400
 8001238:	177d                	addi	a4,a4,-1
 800123a:	8ff9                	and	a5,a5,a4
    RCU_CFG0 = (reg | usb_psc);
 800123c:	8d5d                	or	a0,a0,a5
 800123e:	c2c8                	sw	a0,4(a3)
}
 8001240:	8082                	ret

08001242 <rcu_clock_freq_get>:
      \arg        CK_APB2: APB2 clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8001242:	7179                	addi	sp,sp,-48
    uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
    uint32_t pllsel, predv0sel, pllmf,ck_src, idx, clk_exp;
    uint32_t predv0, predv1, pll1mf;

    /* exponent of AHB, APB1 and APB2 clock divider */
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001244:	080005b7          	lui	a1,0x8000
{
 8001248:	d422                	sw	s0,40(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800124a:	4641                	li	a2,16
{
 800124c:	842a                	mv	s0,a0
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800124e:	28058593          	addi	a1,a1,640 # 8000280 <enable_mcycle_minstret+0x34>
 8001252:	0808                	addi	a0,sp,16
{
 8001254:	d606                	sw	ra,44(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001256:	00006097          	auipc	ra,0x6
 800125a:	75e080e7          	jalr	1886(ra) # 80079b4 <memcpy>
    uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800125e:	040307b7          	lui	a5,0x4030
 8001262:	20178793          	addi	a5,a5,513 # 4030201 <__stack_size+0x402f201>
 8001266:	c002                	sw	zero,0(sp)
 8001268:	c23e                	sw	a5,4(sp)
    uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800126a:	c402                	sw	zero,8(sp)
 800126c:	c63e                	sw	a5,12(sp)

    sws = GET_BITS(RCU_CFG0, 2, 3);
 800126e:	40021737          	lui	a4,0x40021
 8001272:	435c                	lw	a5,4(a4)
    switch(sws){
 8001274:	4689                	li	a3,2
    sws = GET_BITS(RCU_CFG0, 2, 3);
 8001276:	8389                	srli	a5,a5,0x2
 8001278:	8b8d                	andi	a5,a5,3
    switch(sws){
 800127a:	0ed79763          	bne	a5,a3,8001368 <rcu_clock_freq_get+0x126>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* PLL clock source selection, HXTAL or IRC8M/2 */
        pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 800127e:	435c                	lw	a5,4(a4)

        if(RCU_PLLSRC_HXTAL == pllsel) {
 8001280:	00f79693          	slli	a3,a5,0xf
 8001284:	0606d663          	bgez	a3,80012f0 <rcu_clock_freq_get+0xae>
            /* PLL clock source is HXTAL */
            ck_src = HXTAL_VALUE;

            predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001288:	575c                	lw	a5,44(a4)
            /* source clock use PLL1 */
            if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 800128a:	00f79693          	slli	a3,a5,0xf
 800128e:	0406dc63          	bgez	a3,80012e6 <rcu_clock_freq_get+0xa4>
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001292:	575c                	lw	a5,44(a4)
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001294:	5758                	lw	a4,44(a4)
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001296:	8391                	srli	a5,a5,0x4
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001298:	8321                	srli	a4,a4,0x8
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800129a:	8bbd                	andi	a5,a5,15
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 800129c:	8b3d                	andi	a4,a4,15
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800129e:	00178693          	addi	a3,a5,1
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 80012a2:	0709                	addi	a4,a4,2
                if(17U == pll1mf){
 80012a4:	47c5                	li	a5,17
 80012a6:	00f71363          	bne	a4,a5,80012ac <rcu_clock_freq_get+0x6a>
                    pll1mf = 20U;
 80012aa:	4751                	li	a4,20
                }
                ck_src = (ck_src / predv1) * pll1mf;
 80012ac:	007a17b7          	lui	a5,0x7a1
 80012b0:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80012b4:	02d7d7b3          	divu	a5,a5,a3
 80012b8:	02e787b3          	mul	a5,a5,a4
            }
            predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 80012bc:	40021737          	lui	a4,0x40021
 80012c0:	5758                	lw	a4,44(a4)
 80012c2:	8b3d                	andi	a4,a4,15
 80012c4:	0705                	addi	a4,a4,1
            ck_src /= predv0;
 80012c6:	02e7d733          	divu	a4,a5,a4
            /* PLL clock source is IRC8M/2 */
            ck_src = IRC8M_VALUE/2U;
        }

        /* PLL multiplication factor */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012ca:	400216b7          	lui	a3,0x40021
 80012ce:	42dc                	lw	a5,4(a3)
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012d0:	42d4                	lw	a3,4(a3)
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012d2:	83c9                	srli	a5,a5,0x12
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012d4:	00269613          	slli	a2,a3,0x2
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80012d8:	8bbd                	andi	a5,a5,15
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80012da:	02065063          	bgez	a2,80012fa <rcu_clock_freq_get+0xb8>
            pllmf |= 0x10U;
 80012de:	0107e793          	ori	a5,a5,16
        }
        if(pllmf < 15U){
            pllmf += 2U;
        }else{
            pllmf += 1U;
 80012e2:	0785                	addi	a5,a5,1
        }

        cksys_freq = ck_src * pllmf;

        if(15U == pllmf){
 80012e4:	a00d                	j	8001306 <rcu_clock_freq_get+0xc4>
            ck_src = HXTAL_VALUE;
 80012e6:	007a17b7          	lui	a5,0x7a1
 80012ea:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80012ee:	b7f9                	j	80012bc <rcu_clock_freq_get+0x7a>
            ck_src = IRC8M_VALUE/2U;
 80012f0:	003d17b7          	lui	a5,0x3d1
 80012f4:	90078713          	addi	a4,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 80012f8:	bfc9                	j	80012ca <rcu_clock_freq_get+0x88>
        if(pllmf < 15U){
 80012fa:	46bd                	li	a3,15
 80012fc:	fed783e3          	beq	a5,a3,80012e2 <rcu_clock_freq_get+0xa0>
            pllmf += 2U;
 8001300:	0789                	addi	a5,a5,2
        if(15U == pllmf){
 8001302:	04d78d63          	beq	a5,a3,800135c <rcu_clock_freq_get+0x11a>
        cksys_freq = ck_src * pllmf;
 8001306:	02e787b3          	mul	a5,a5,a4
        cksys_freq = IRC8M_VALUE;
        break;
    }

    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 800130a:	400216b7          	lui	a3,0x40021
 800130e:	42d8                	lw	a4,4(a3)
    clk_exp = ahb_exp[idx];
 8001310:	1010                	addi	a2,sp,32
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8001312:	8311                	srli	a4,a4,0x4
 8001314:	8b3d                	andi	a4,a4,15
    clk_exp = ahb_exp[idx];
 8001316:	9732                	add	a4,a4,a2
 8001318:	ff074503          	lbu	a0,-16(a4) # 40020ff0 <_sp+0x20018ff0>
    ahb_freq = cksys_freq >> clk_exp;
    
    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 800131c:	42d8                	lw	a4,4(a3)
    ahb_freq = cksys_freq >> clk_exp;
 800131e:	00a7d533          	srl	a0,a5,a0
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8001322:	8321                	srli	a4,a4,0x8
 8001324:	8b1d                	andi	a4,a4,7
    clk_exp = apb1_exp[idx];
 8001326:	9732                	add	a4,a4,a2
 8001328:	fe074603          	lbu	a2,-32(a4)
    apb1_freq = ahb_freq >> clk_exp;
    
    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800132c:	42d8                	lw	a4,4(a3)
    clk_exp = apb2_exp[idx];
 800132e:	1014                	addi	a3,sp,32
    idx = GET_BITS(RCU_CFG0, 11, 13);
 8001330:	832d                	srli	a4,a4,0xb
 8001332:	8b1d                	andi	a4,a4,7
    clk_exp = apb2_exp[idx];
 8001334:	9736                	add	a4,a4,a3
    apb2_freq = ahb_freq >> clk_exp;
    
    /* return the clocks frequency */
    switch(clock){
 8001336:	4685                	li	a3,1
    clk_exp = apb2_exp[idx];
 8001338:	fe874703          	lbu	a4,-24(a4)
    switch(clock){
 800133c:	00d40c63          	beq	s0,a3,8001354 <rcu_clock_freq_get+0x112>
 8001340:	cc05                	beqz	s0,8001378 <rcu_clock_freq_get+0x136>
 8001342:	4789                	li	a5,2
 8001344:	02f40763          	beq	s0,a5,8001372 <rcu_clock_freq_get+0x130>
 8001348:	478d                	li	a5,3
    apb2_freq = ahb_freq >> clk_exp;
 800134a:	00e55533          	srl	a0,a0,a4
    switch(clock){
 800134e:	00f40363          	beq	s0,a5,8001354 <rcu_clock_freq_get+0x112>
    uint32_t sws, ck_freq = 0U;
 8001352:	4501                	li	a0,0
        break;
    default:
        break;
    }
    return ck_freq;
}
 8001354:	50b2                	lw	ra,44(sp)
 8001356:	5422                	lw	s0,40(sp)
 8001358:	6145                	addi	sp,sp,48
 800135a:	8082                	ret
            cksys_freq = ck_src * 6U + ck_src / 2U;
 800135c:	4799                	li	a5,6
 800135e:	02f707b3          	mul	a5,a4,a5
 8001362:	8305                	srli	a4,a4,0x1
 8001364:	97ba                	add	a5,a5,a4
 8001366:	b755                	j	800130a <rcu_clock_freq_get+0xc8>
        cksys_freq = IRC8M_VALUE;
 8001368:	007a17b7          	lui	a5,0x7a1
 800136c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001370:	bf69                	j	800130a <rcu_clock_freq_get+0xc8>
    apb1_freq = ahb_freq >> clk_exp;
 8001372:	00c55533          	srl	a0,a0,a2
        break;
 8001376:	bff9                	j	8001354 <rcu_clock_freq_get+0x112>
        ck_freq = cksys_freq;
 8001378:	853e                	mv	a0,a5
    return ck_freq;
 800137a:	bfe9                	j	8001354 <rcu_clock_freq_get+0x112>

0800137c <spi_init>:
    \retval     none
*/
void spi_init(uint32_t spi_periph, spi_parameter_struct* spi_struct)
{   
    uint32_t reg = 0U;
    reg = SPI_CTL0(spi_periph);
 800137c:	411c                	lw	a5,0(a0)
    reg &= SPI_INIT_MASK;
 800137e:	670d                	lui	a4,0x3
 8001380:	04070713          	addi	a4,a4,64 # 3040 <__stack_size+0x2040>
    /* select SPI LSB or MSB */
    reg |= spi_struct->endian;
    /* select SPI polarity and phase */
    reg |= spi_struct->clock_polarity_phase;
    /* select SPI prescale to adjust transmit speed */
    reg |= spi_struct->prescale;
 8001384:	41d4                	lw	a3,4(a1)
    reg &= SPI_INIT_MASK;
 8001386:	8f7d                	and	a4,a4,a5
    reg |= spi_struct->prescale;
 8001388:	419c                	lw	a5,0(a1)
 800138a:	8fd5                	or	a5,a5,a3
 800138c:	4594                	lw	a3,8(a1)
 800138e:	8fd5                	or	a5,a5,a3
 8001390:	45d4                	lw	a3,12(a1)
 8001392:	8fd5                	or	a5,a5,a3
 8001394:	4994                	lw	a3,16(a1)
 8001396:	8fd5                	or	a5,a5,a3
 8001398:	49d4                	lw	a3,20(a1)
 800139a:	8fd5                	or	a5,a5,a3
 800139c:	4d94                	lw	a3,24(a1)
 800139e:	8fd5                	or	a5,a5,a3
 80013a0:	8fd9                	or	a5,a5,a4

    /* write to SPI_CTL0 register */
    SPI_CTL0(spi_periph) = (uint32_t)reg;
 80013a2:	c11c                	sw	a5,0(a0)

    SPI_I2SCTL(spi_periph) &= (uint32_t)(~SPI_I2SCTL_I2SSEL);
 80013a4:	4d5c                	lw	a5,28(a0)
 80013a6:	777d                	lui	a4,0xfffff
 80013a8:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 80013ac:	8ff9                	and	a5,a5,a4
 80013ae:	cd5c                	sw	a5,28(a0)
}
 80013b0:	8082                	ret

080013b2 <spi_enable>:
    \param[out] none
    \retval     none
*/
void spi_enable(uint32_t spi_periph)
{
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_SPIEN;
 80013b2:	411c                	lw	a5,0(a0)
 80013b4:	0407e793          	ori	a5,a5,64
 80013b8:	c11c                	sw	a5,0(a0)
}
 80013ba:	8082                	ret

080013bc <spi_i2s_data_transmit>:
    \param[out] none
    \retval     none
*/
void spi_i2s_data_transmit(uint32_t spi_periph, uint16_t data)
{
    SPI_DATA(spi_periph) = (uint32_t)data;
 80013bc:	c54c                	sw	a1,12(a0)
}
 80013be:	8082                	ret

080013c0 <spi_i2s_data_receive>:
    \param[out] none
    \retval     16-bit data
*/
uint16_t spi_i2s_data_receive(uint32_t spi_periph)
{
    return ((uint16_t)SPI_DATA(spi_periph));
 80013c0:	4548                	lw	a0,12(a0)
}
 80013c2:	0542                	slli	a0,a0,0x10
 80013c4:	8141                	srli	a0,a0,0x10
 80013c6:	8082                	ret

080013c8 <spi_crc_polynomial_set>:
    \retval     none
*/
void spi_crc_polynomial_set(uint32_t spi_periph,uint16_t crc_poly)
{
    /* enable SPI CRC */
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_CRCEN;
 80013c8:	411c                	lw	a5,0(a0)
 80013ca:	6709                	lui	a4,0x2
 80013cc:	8fd9                	or	a5,a5,a4
 80013ce:	c11c                	sw	a5,0(a0)

    /* set SPI CRC polynomial */
    SPI_CRCPOLY(spi_periph) = (uint32_t)crc_poly;
 80013d0:	c90c                	sw	a1,16(a0)
}
 80013d2:	8082                	ret

080013d4 <spi_i2s_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus spi_i2s_flag_get(uint32_t spi_periph, uint32_t flag)
{
    if(RESET != (SPI_STAT(spi_periph) & flag)){
 80013d4:	4508                	lw	a0,8(a0)
 80013d6:	8d6d                	and	a0,a0,a1
        return SET;
    }else{
        return RESET;
    }
}
 80013d8:	00a03533          	snez	a0,a0
 80013dc:	8082                	ret

080013de <timer_deinit>:
    \param[in]  timer_periph: TIMERx(x=0..6)
    \param[out] none
    \retval     none
*/
void timer_deinit(uint32_t timer_periph)
{
 80013de:	1141                	addi	sp,sp,-16
    switch(timer_periph){
 80013e0:	400017b7          	lui	a5,0x40001
{
 80013e4:	c606                	sw	ra,12(sp)
    switch(timer_periph){
 80013e6:	c0078713          	addi	a4,a5,-1024 # 40000c00 <_sp+0x1fff8c00>
 80013ea:	08e50e63          	beq	a0,a4,8001486 <timer_deinit+0xa8>
 80013ee:	02a76763          	bltu	a4,a0,800141c <timer_deinit+0x3e>
 80013f2:	40000737          	lui	a4,0x40000
 80013f6:	40070693          	addi	a3,a4,1024 # 40000400 <_sp+0x1fff8400>
 80013fa:	06d50463          	beq	a0,a3,8001462 <timer_deinit+0x84>
 80013fe:	80078793          	addi	a5,a5,-2048
 8001402:	06f50963          	beq	a0,a5,8001474 <timer_deinit+0x96>
 8001406:	0ae51263          	bne	a0,a4,80014aa <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER0RST);
        rcu_periph_reset_disable(RCU_TIMER0RST);
        break;
    case TIMER1:
        /* reset TIMER1 */
        rcu_periph_reset_enable(RCU_TIMER1RST);
 800140a:	40000513          	li	a0,1024
 800140e:	00000097          	auipc	ra,0x0
 8001412:	dac080e7          	jalr	-596(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER1RST);
 8001416:	40000513          	li	a0,1024
 800141a:	a835                	j	8001456 <timer_deinit+0x78>
    switch(timer_periph){
 800141c:	40078713          	addi	a4,a5,1024
 8001420:	06e50c63          	beq	a0,a4,8001498 <timer_deinit+0xba>
 8001424:	40013737          	lui	a4,0x40013
 8001428:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_sp+0x2000ac00>
 800142c:	00e50d63          	beq	a0,a4,8001446 <timer_deinit+0x68>
 8001430:	06f51d63          	bne	a0,a5,80014aa <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER4RST);
        rcu_periph_reset_disable(RCU_TIMER4RST);
        break;
    case TIMER5:
        /* reset TIMER5 */
        rcu_periph_reset_enable(RCU_TIMER5RST);
 8001434:	40400513          	li	a0,1028
 8001438:	00000097          	auipc	ra,0x0
 800143c:	d82080e7          	jalr	-638(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER5RST);
 8001440:	40400513          	li	a0,1028
 8001444:	a809                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER0RST);
 8001446:	30b00513          	li	a0,779
 800144a:	00000097          	auipc	ra,0x0
 800144e:	d70080e7          	jalr	-656(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER0RST);
 8001452:	30b00513          	li	a0,779
        break;

    default:
        break;
    }
}
 8001456:	40b2                	lw	ra,12(sp)
 8001458:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_TIMER6RST);
 800145a:	00000317          	auipc	t1,0x0
 800145e:	d7830067          	jr	-648(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_TIMER2RST);
 8001462:	40100513          	li	a0,1025
 8001466:	00000097          	auipc	ra,0x0
 800146a:	d54080e7          	jalr	-684(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER2RST);
 800146e:	40100513          	li	a0,1025
 8001472:	b7d5                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER3RST);
 8001474:	40200513          	li	a0,1026
 8001478:	00000097          	auipc	ra,0x0
 800147c:	d42080e7          	jalr	-702(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER3RST);
 8001480:	40200513          	li	a0,1026
 8001484:	bfc9                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER4RST);
 8001486:	40300513          	li	a0,1027
 800148a:	00000097          	auipc	ra,0x0
 800148e:	d30080e7          	jalr	-720(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER4RST);
 8001492:	40300513          	li	a0,1027
 8001496:	b7c1                	j	8001456 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER6RST);
 8001498:	40500513          	li	a0,1029
 800149c:	00000097          	auipc	ra,0x0
 80014a0:	d1e080e7          	jalr	-738(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER6RST);
 80014a4:	40500513          	li	a0,1029
 80014a8:	b77d                	j	8001456 <timer_deinit+0x78>
}
 80014aa:	40b2                	lw	ra,12(sp)
 80014ac:	0141                	addi	sp,sp,16
 80014ae:	8082                	ret

080014b0 <timer_struct_para_init>:
{
    /* initialize the init parameter struct member with the default value */
    initpara->prescaler         = 0U;
    initpara->alignedmode       = TIMER_COUNTER_EDGE;
    initpara->counterdirection  = TIMER_COUNTER_UP;
    initpara->period            = 65535U;
 80014b0:	67c1                	lui	a5,0x10
 80014b2:	17fd                	addi	a5,a5,-1
    initpara->prescaler         = 0U;
 80014b4:	00052023          	sw	zero,0(a0)
    initpara->counterdirection  = TIMER_COUNTER_UP;
 80014b8:	00051223          	sh	zero,4(a0)
    initpara->period            = 65535U;
 80014bc:	c51c                	sw	a5,8(a0)
    initpara->clockdivision     = TIMER_CKDIV_DIV1;
 80014be:	00051623          	sh	zero,12(a0)
    initpara->repetitioncounter = 0U;
 80014c2:	00050723          	sb	zero,14(a0)
}
 80014c6:	8082                	ret

080014c8 <timer_init>:
    \retval     none
*/
void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
{
    /* configure the counter prescaler value */
    TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
 80014c8:	0005d783          	lhu	a5,0(a1)
 80014cc:	0045d703          	lhu	a4,4(a1)
 80014d0:	bff57693          	andi	a3,a0,-1025
 80014d4:	d51c                	sw	a5,40(a0)

    /* configure the counter direction and aligned mode */
    if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph)
 80014d6:	400137b7          	lui	a5,0x40013
 80014da:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80014de:	8b41                	andi	a4,a4,16
 80014e0:	00f50a63          	beq	a0,a5,80014f4 <timer_init+0x2c>
 80014e4:	77fd                	lui	a5,0xfffff
 80014e6:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_sp+0xdfff73ff>
 80014ea:	8fe9                	and	a5,a5,a0
 80014ec:	40000637          	lui	a2,0x40000
 80014f0:	06c79063          	bne	a5,a2,8001550 <timer_init+0x88>
        || (TIMER3 == timer_periph) || (TIMER4 == timer_periph) ){
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
 80014f4:	411c                	lw	a5,0(a0)
 80014f6:	f8f7f793          	andi	a5,a5,-113
 80014fa:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
 80014fc:	0025d783          	lhu	a5,2(a1)
 8001500:	4110                	lw	a2,0(a0)
 8001502:	0607f793          	andi	a5,a5,96
 8001506:	8fd1                	or	a5,a5,a2
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
    }else{
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 8001508:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK); 
 800150a:	411c                	lw	a5,0(a0)
 800150c:	8f5d                	or	a4,a4,a5
 800150e:	c118                	sw	a4,0(a0)
    }
    
    /* configure the autoreload value */
    TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
 8001510:	459c                	lw	a5,8(a1)
 8001512:	d55c                	sw	a5,44(a0)

    if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
 8001514:	400017b7          	lui	a5,0x40001
 8001518:	02f68763          	beq	a3,a5,8001546 <timer_init+0x7e>
        /* reset the CKDIV bit */
        TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
 800151c:	411c                	lw	a5,0(a0)
 800151e:	cff7f793          	andi	a5,a5,-769
 8001522:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
 8001524:	00c5d783          	lhu	a5,12(a1)
 8001528:	4118                	lw	a4,0(a0)
 800152a:	3007f793          	andi	a5,a5,768
 800152e:	8fd9                	or	a5,a5,a4
 8001530:	c11c                	sw	a5,0(a0)
    }

    if (TIMER0 == timer_periph) {
 8001532:	400137b7          	lui	a5,0x40013
 8001536:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800153a:	00e51663          	bne	a0,a4,8001546 <timer_init+0x7e>
        /* configure the repetition counter value */
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
 800153e:	00e5c703          	lbu	a4,14(a1)
 8001542:	c2e7a823          	sw	a4,-976(a5)
    }

    /* generate an update event */
    TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
 8001546:	495c                	lw	a5,20(a0)
 8001548:	0017e793          	ori	a5,a5,1
 800154c:	c95c                	sw	a5,20(a0)
}
 800154e:	8082                	ret
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 8001550:	411c                	lw	a5,0(a0)
 8001552:	9bbd                	andi	a5,a5,-17
 8001554:	bf55                	j	8001508 <timer_init+0x40>

08001556 <timer_enable>:
    \param[out] none
    \retval     none
*/
void timer_enable(uint32_t timer_periph)
{
    TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
 8001556:	411c                	lw	a5,0(a0)
 8001558:	0017e793          	ori	a5,a5,1
 800155c:	c11c                	sw	a5,0(a0)
}
 800155e:	8082                	ret

08001560 <timer_channel_output_struct_para_init>:
    \retval     none
*/
void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
{
    /* initialize the channel output parameter struct member with the default value */
    ocpara->outputstate  = TIMER_CCX_DISABLE;
 8001560:	00051023          	sh	zero,0(a0)
    ocpara->outputnstate = TIMER_CCXN_DISABLE;
 8001564:	00051123          	sh	zero,2(a0)
    ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8001568:	00051223          	sh	zero,4(a0)
    ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
 800156c:	00051323          	sh	zero,6(a0)
    ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8001570:	00051423          	sh	zero,8(a0)
    ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
 8001574:	00051523          	sh	zero,10(a0)
}
 8001578:	8082                	ret

0800157a <timer_channel_output_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
{
    switch(channel){
 800157a:	4785                	li	a5,1
 800157c:	08f58e63          	beq	a1,a5,8001618 <timer_channel_output_config+0x9e>
 8001580:	c981                	beqz	a1,8001590 <timer_channel_output_config+0x16>
 8001582:	4789                	li	a5,2
 8001584:	12f58963          	beq	a1,a5,80016b6 <timer_channel_output_config+0x13c>
 8001588:	478d                	li	a5,3
 800158a:	1cf58763          	beq	a1,a5,8001758 <timer_channel_output_config+0x1de>
 800158e:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        /* reset the CH0EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
 8001590:	511c                	lw	a5,32(a0)
 8001592:	9bf9                	andi	a5,a5,-2
 8001594:	d11c                	sw	a5,32(a0)
        /* set the CH0EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
 8001596:	5118                	lw	a4,32(a0)
 8001598:	00065783          	lhu	a5,0(a2) # 40000000 <_sp+0x1fff8000>
 800159c:	8fd9                	or	a5,a5,a4
 800159e:	d11c                	sw	a5,32(a0)
        /* reset the CH0P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
 80015a0:	511c                	lw	a5,32(a0)
 80015a2:	9bf5                	andi	a5,a5,-3
 80015a4:	d11c                	sw	a5,32(a0)
        /* set the CH0P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
 80015a6:	5118                	lw	a4,32(a0)
 80015a8:	00465783          	lhu	a5,4(a2)
 80015ac:	8fd9                	or	a5,a5,a4
 80015ae:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80015b0:	400137b7          	lui	a5,0x40013
 80015b4:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80015b8:	04e51c63          	bne	a0,a4,8001610 <timer_channel_output_config+0x96>
            /* reset the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
 80015bc:	5118                	lw	a4,32(a0)
 80015be:	9b6d                	andi	a4,a4,-5
 80015c0:	d118                	sw	a4,32(a0)
            /* set the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
 80015c2:	5114                	lw	a3,32(a0)
 80015c4:	00265703          	lhu	a4,2(a2)
 80015c8:	8f55                	or	a4,a4,a3
 80015ca:	d118                	sw	a4,32(a0)
            /* reset the CH0NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
 80015cc:	5118                	lw	a4,32(a0)
 80015ce:	9b5d                	andi	a4,a4,-9
 80015d0:	d118                	sw	a4,32(a0)
            /* set the CH0NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
 80015d2:	5114                	lw	a3,32(a0)
 80015d4:	00665703          	lhu	a4,6(a2)
 80015d8:	8f55                	or	a4,a4,a3
 80015da:	d118                	sw	a4,32(a0)
            /* reset the ISO0 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
 80015dc:	c047a703          	lw	a4,-1020(a5)
 80015e0:	eff77713          	andi	a4,a4,-257
 80015e4:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
 80015e8:	c047a683          	lw	a3,-1020(a5)
 80015ec:	00865703          	lhu	a4,8(a2)
 80015f0:	8f55                	or	a4,a4,a3
 80015f2:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO0N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
 80015f6:	c047a703          	lw	a4,-1020(a5)
 80015fa:	dff77713          	andi	a4,a4,-513
 80015fe:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
 8001602:	c047a683          	lw	a3,-1020(a5)
 8001606:	00a65703          	lhu	a4,10(a2)
 800160a:	8f55                	or	a4,a4,a3
 800160c:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
 8001610:	4d1c                	lw	a5,24(a0)
 8001612:	9bf1                	andi	a5,a5,-4
            /* reset the ISO1N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
            /* set the ISO1N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 8001614:	cd1c                	sw	a5,24(a0)
        break;
 8001616:	8082                	ret
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
 8001618:	511c                	lw	a5,32(a0)
 800161a:	9bbd                	andi	a5,a5,-17
 800161c:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
 800161e:	00065783          	lhu	a5,0(a2)
 8001622:	5118                	lw	a4,32(a0)
 8001624:	0792                	slli	a5,a5,0x4
 8001626:	8fd9                	or	a5,a5,a4
 8001628:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
 800162a:	511c                	lw	a5,32(a0)
 800162c:	fdf7f793          	andi	a5,a5,-33
 8001630:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 4U);
 8001632:	00465783          	lhu	a5,4(a2)
 8001636:	5118                	lw	a4,32(a0)
 8001638:	0792                	slli	a5,a5,0x4
 800163a:	8fd9                	or	a5,a5,a4
 800163c:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 800163e:	400137b7          	lui	a5,0x40013
 8001642:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001646:	06e51463          	bne	a0,a4,80016ae <timer_channel_output_config+0x134>
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
 800164a:	5118                	lw	a4,32(a0)
 800164c:	fbf77713          	andi	a4,a4,-65
 8001650:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 4U);
 8001652:	00265703          	lhu	a4,2(a2)
 8001656:	5114                	lw	a3,32(a0)
 8001658:	0712                	slli	a4,a4,0x4
 800165a:	8f55                	or	a4,a4,a3
 800165c:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
 800165e:	5118                	lw	a4,32(a0)
 8001660:	f7f77713          	andi	a4,a4,-129
 8001664:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 4U);
 8001666:	00665703          	lhu	a4,6(a2)
 800166a:	5114                	lw	a3,32(a0)
 800166c:	0712                	slli	a4,a4,0x4
 800166e:	8f55                	or	a4,a4,a3
 8001670:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
 8001672:	c047a703          	lw	a4,-1020(a5)
 8001676:	bff77713          	andi	a4,a4,-1025
 800167a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 2U);
 800167e:	00865703          	lhu	a4,8(a2)
 8001682:	c047a683          	lw	a3,-1020(a5)
 8001686:	070a                	slli	a4,a4,0x2
 8001688:	8f55                	or	a4,a4,a3
 800168a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
 800168e:	c047a703          	lw	a4,-1020(a5)
 8001692:	76fd                	lui	a3,0xfffff
 8001694:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001698:	8f75                	and	a4,a4,a3
 800169a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
 800169e:	00a65703          	lhu	a4,10(a2)
 80016a2:	c047a683          	lw	a3,-1020(a5)
 80016a6:	070a                	slli	a4,a4,0x2
 80016a8:	8f55                	or	a4,a4,a3
 80016aa:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 80016ae:	4d1c                	lw	a5,24(a0)
 80016b0:	cff7f793          	andi	a5,a5,-769
 80016b4:	b785                	j	8001614 <timer_channel_output_config+0x9a>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        /* reset the CH2EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
 80016b6:	511c                	lw	a5,32(a0)
 80016b8:	eff7f793          	andi	a5,a5,-257
 80016bc:	d11c                	sw	a5,32(a0)
        /* set the CH2EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
 80016be:	00065783          	lhu	a5,0(a2)
 80016c2:	5118                	lw	a4,32(a0)
 80016c4:	07a2                	slli	a5,a5,0x8
 80016c6:	8fd9                	or	a5,a5,a4
 80016c8:	d11c                	sw	a5,32(a0)
        /* reset the CH2P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
 80016ca:	511c                	lw	a5,32(a0)
 80016cc:	dff7f793          	andi	a5,a5,-513
 80016d0:	d11c                	sw	a5,32(a0)
        /* set the CH2P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 8U);
 80016d2:	00465783          	lhu	a5,4(a2)
 80016d6:	5118                	lw	a4,32(a0)
 80016d8:	07a2                	slli	a5,a5,0x8
 80016da:	8fd9                	or	a5,a5,a4
 80016dc:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80016de:	400137b7          	lui	a5,0x40013
 80016e2:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80016e6:	06e51563          	bne	a0,a4,8001750 <timer_channel_output_config+0x1d6>
            /* reset the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
 80016ea:	5118                	lw	a4,32(a0)
 80016ec:	bff77713          	andi	a4,a4,-1025
 80016f0:	d118                	sw	a4,32(a0)
            /* set the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 8U);
 80016f2:	00265703          	lhu	a4,2(a2)
 80016f6:	5114                	lw	a3,32(a0)
 80016f8:	0722                	slli	a4,a4,0x8
 80016fa:	8f55                	or	a4,a4,a3
 80016fc:	d118                	sw	a4,32(a0)
            /* reset the CH2NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
 80016fe:	5118                	lw	a4,32(a0)
 8001700:	76fd                	lui	a3,0xfffff
 8001702:	7ff68593          	addi	a1,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001706:	8f6d                	and	a4,a4,a1
 8001708:	d118                	sw	a4,32(a0)
            /* set the CH2NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 800170a:	00665703          	lhu	a4,6(a2)
 800170e:	510c                	lw	a1,32(a0)
            /* reset the ISO2 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001710:	16fd                	addi	a3,a3,-1
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 8001712:	0722                	slli	a4,a4,0x8
 8001714:	8f4d                	or	a4,a4,a1
 8001716:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001718:	c047a703          	lw	a4,-1020(a5)
 800171c:	8ef9                	and	a3,a3,a4
 800171e:	c0d7a223          	sw	a3,-1020(a5)
            /* set the ISO2 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 4U);
 8001722:	00865703          	lhu	a4,8(a2)
 8001726:	c047a683          	lw	a3,-1020(a5)
 800172a:	0712                	slli	a4,a4,0x4
 800172c:	8f55                	or	a4,a4,a3
 800172e:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO2N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
 8001732:	c047a703          	lw	a4,-1020(a5)
 8001736:	76f9                	lui	a3,0xffffe
 8001738:	16fd                	addi	a3,a3,-1
 800173a:	8f75                	and	a4,a4,a3
 800173c:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO2N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
 8001740:	00a65703          	lhu	a4,10(a2)
 8001744:	c047a683          	lw	a3,-1020(a5)
 8001748:	0712                	slli	a4,a4,0x4
 800174a:	8f55                	or	a4,a4,a3
 800174c:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
 8001750:	4d5c                	lw	a5,28(a0)
 8001752:	9bf1                	andi	a5,a5,-4
            /* reset the ISO3 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
            /* set the ISO3 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 8001754:	cd5c                	sw	a5,28(a0)
        break;
    default:
        break;
    }
}
 8001756:	8082                	ret
        TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
 8001758:	511c                	lw	a5,32(a0)
 800175a:	777d                	lui	a4,0xfffff
 800175c:	177d                	addi	a4,a4,-1
 800175e:	8ff9                	and	a5,a5,a4
 8001760:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
 8001762:	00065783          	lhu	a5,0(a2)
 8001766:	5118                	lw	a4,32(a0)
 8001768:	07b2                	slli	a5,a5,0xc
 800176a:	8fd9                	or	a5,a5,a4
 800176c:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
 800176e:	511c                	lw	a5,32(a0)
 8001770:	7779                	lui	a4,0xffffe
 8001772:	177d                	addi	a4,a4,-1
 8001774:	8ff9                	and	a5,a5,a4
 8001776:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 12U);
 8001778:	00465783          	lhu	a5,4(a2)
 800177c:	5118                	lw	a4,32(a0)
 800177e:	07b2                	slli	a5,a5,0xc
 8001780:	8fd9                	or	a5,a5,a4
 8001782:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 8001784:	400137b7          	lui	a5,0x40013
 8001788:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800178c:	02e51163          	bne	a0,a4,80017ae <timer_channel_output_config+0x234>
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
 8001790:	c047a703          	lw	a4,-1020(a5)
 8001794:	76f1                	lui	a3,0xffffc
 8001796:	16fd                	addi	a3,a3,-1
 8001798:	8f75                	and	a4,a4,a3
 800179a:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
 800179e:	00865703          	lhu	a4,8(a2)
 80017a2:	c047a683          	lw	a3,-1020(a5)
 80017a6:	071a                	slli	a4,a4,0x6
 80017a8:	8f55                	or	a4,a4,a3
 80017aa:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 80017ae:	4d5c                	lw	a5,28(a0)
 80017b0:	cff7f793          	andi	a5,a5,-769
 80017b4:	b745                	j	8001754 <timer_channel_output_config+0x1da>

080017b6 <timer_channel_output_mode_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
{
    switch(channel){
 80017b6:	4785                	li	a5,1
 80017b8:	02f58263          	beq	a1,a5,80017dc <timer_channel_output_mode_config+0x26>
 80017bc:	c981                	beqz	a1,80017cc <timer_channel_output_mode_config+0x16>
 80017be:	4789                	li	a5,2
 80017c0:	02f58663          	beq	a1,a5,80017ec <timer_channel_output_mode_config+0x36>
 80017c4:	478d                	li	a5,3
 80017c6:	02f58b63          	beq	a1,a5,80017fc <timer_channel_output_mode_config+0x46>
 80017ca:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
 80017cc:	4d1c                	lw	a5,24(a0)
 80017ce:	f8f7f793          	andi	a5,a5,-113
 80017d2:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
 80017d4:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017d6:	8e5d                	or	a2,a2,a5
 80017d8:	cd10                	sw	a2,24(a0)
        break;
 80017da:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
 80017dc:	4d1c                	lw	a5,24(a0)
 80017de:	7765                	lui	a4,0xffff9
 80017e0:	177d                	addi	a4,a4,-1
 80017e2:	8ff9                	and	a5,a5,a4
 80017e4:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017e6:	4d1c                	lw	a5,24(a0)
 80017e8:	0622                	slli	a2,a2,0x8
 80017ea:	b7f5                	j	80017d6 <timer_channel_output_mode_config+0x20>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
 80017ec:	4d5c                	lw	a5,28(a0)
 80017ee:	f8f7f793          	andi	a5,a5,-113
 80017f2:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
 80017f4:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80017f6:	8e5d                	or	a2,a2,a5
 80017f8:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 80017fa:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
 80017fc:	4d5c                	lw	a5,28(a0)
 80017fe:	7765                	lui	a4,0xffff9
 8001800:	177d                	addi	a4,a4,-1
 8001802:	8ff9                	and	a5,a5,a4
 8001804:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 8001806:	4d5c                	lw	a5,28(a0)
 8001808:	0622                	slli	a2,a2,0x8
 800180a:	b7f5                	j	80017f6 <timer_channel_output_mode_config+0x40>

0800180c <timer_channel_output_pulse_value_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint32_t pulse)
{
    switch(channel){
 800180c:	4785                	li	a5,1
 800180e:	00f58c63          	beq	a1,a5,8001826 <timer_channel_output_pulse_value_config+0x1a>
 8001812:	c981                	beqz	a1,8001822 <timer_channel_output_pulse_value_config+0x16>
 8001814:	4789                	li	a5,2
 8001816:	00f58a63          	beq	a1,a5,800182a <timer_channel_output_pulse_value_config+0x1e>
 800181a:	478d                	li	a5,3
 800181c:	00f58963          	beq	a1,a5,800182e <timer_channel_output_pulse_value_config+0x22>
 8001820:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
 8001822:	d950                	sw	a2,52(a0)
        break;
 8001824:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
 8001826:	dd10                	sw	a2,56(a0)
        break;
 8001828:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
 800182a:	dd50                	sw	a2,60(a0)
        break;
 800182c:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
         TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
 800182e:	c130                	sw	a2,64(a0)
        break;
    default:
        break;
    }
}
 8001830:	8082                	ret

08001832 <timer_channel_output_shadow_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
{
    switch(channel){
 8001832:	4785                	li	a5,1
 8001834:	02f58163          	beq	a1,a5,8001856 <timer_channel_output_shadow_config+0x24>
 8001838:	c981                	beqz	a1,8001848 <timer_channel_output_shadow_config+0x16>
 800183a:	4789                	li	a5,2
 800183c:	02f58663          	beq	a1,a5,8001868 <timer_channel_output_shadow_config+0x36>
 8001840:	478d                	li	a5,3
 8001842:	02f58a63          	beq	a1,a5,8001876 <timer_channel_output_shadow_config+0x44>
 8001846:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
 8001848:	4d1c                	lw	a5,24(a0)
 800184a:	9bdd                	andi	a5,a5,-9
 800184c:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
 800184e:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001850:	8e5d                	or	a2,a2,a5
 8001852:	cd10                	sw	a2,24(a0)
        break;
 8001854:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
 8001856:	4d1c                	lw	a5,24(a0)
 8001858:	777d                	lui	a4,0xfffff
 800185a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800185e:	8ff9                	and	a5,a5,a4
 8001860:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001862:	4d1c                	lw	a5,24(a0)
 8001864:	0622                	slli	a2,a2,0x8
 8001866:	b7ed                	j	8001850 <timer_channel_output_shadow_config+0x1e>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
 8001868:	4d5c                	lw	a5,28(a0)
 800186a:	9bdd                	andi	a5,a5,-9
 800186c:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
 800186e:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001870:	8e5d                	or	a2,a2,a5
 8001872:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8001874:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
 8001876:	4d5c                	lw	a5,28(a0)
 8001878:	777d                	lui	a4,0xfffff
 800187a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800187e:	8ff9                	and	a5,a5,a4
 8001880:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001882:	4d5c                	lw	a5,28(a0)
 8001884:	0622                	slli	a2,a2,0x8
 8001886:	b7ed                	j	8001870 <timer_channel_output_shadow_config+0x3e>

08001888 <timer_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
 8001888:	455c                	lw	a5,12(a0)
 800188a:	8ddd                	or	a1,a1,a5
 800188c:	c54c                	sw	a1,12(a0)
}
 800188e:	8082                	ret

08001890 <timer_interrupt_disable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_disable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)interrupt); 
 8001890:	455c                	lw	a5,12(a0)
 8001892:	fff5c593          	not	a1,a1
 8001896:	8dfd                	and	a1,a1,a5
 8001898:	c54c                	sw	a1,12(a0)
}
 800189a:	8082                	ret

0800189c <timer_interrupt_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus timer_interrupt_flag_get(uint32_t timer_periph, uint32_t interrupt)
{
    uint32_t val;
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 800189c:	455c                	lw	a5,12(a0)
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 800189e:	4908                	lw	a0,16(a0)
 80018a0:	8d6d                	and	a0,a0,a1
 80018a2:	c509                	beqz	a0,80018ac <timer_interrupt_flag_get+0x10>
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 80018a4:	00b7f533          	and	a0,a5,a1
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 80018a8:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET;
    }
}
 80018ac:	8082                	ret

080018ae <timer_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_flag_clear(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_INTF(timer_periph) = (~(uint32_t)interrupt);
 80018ae:	fff5c593          	not	a1,a1
 80018b2:	c90c                	sw	a1,16(a0)
}
 80018b4:	8082                	ret

080018b6 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 80018b6:	1141                	addi	sp,sp,-16
    switch(usart_periph){
 80018b8:	400057b7          	lui	a5,0x40005
{
 80018bc:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 80018be:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
 80018c2:	06e50963          	beq	a0,a4,8001934 <usart_deinit+0x7e>
 80018c6:	00a76f63          	bltu	a4,a0,80018e4 <usart_deinit+0x2e>
 80018ca:	40004737          	lui	a4,0x40004
 80018ce:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 80018d2:	02e50f63          	beq	a0,a4,8001910 <usart_deinit+0x5a>
 80018d6:	80078793          	addi	a5,a5,-2048
 80018da:	04f50463          	beq	a0,a5,8001922 <usart_deinit+0x6c>
        rcu_periph_reset_disable(RCU_UART4RST);
        break;
    default:
        break;
    }
}
 80018de:	40b2                	lw	ra,12(sp)
 80018e0:	0141                	addi	sp,sp,16
 80018e2:	8082                	ret
    switch(usart_periph){
 80018e4:	06f50163          	beq	a0,a5,8001946 <usart_deinit+0x90>
 80018e8:	400147b7          	lui	a5,0x40014
 80018ec:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
 80018f0:	fef517e3          	bne	a0,a5,80018de <usart_deinit+0x28>
        rcu_periph_reset_enable(RCU_USART0RST);
 80018f4:	30e00513          	li	a0,782
 80018f8:	00000097          	auipc	ra,0x0
 80018fc:	8c2080e7          	jalr	-1854(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 8001900:	30e00513          	li	a0,782
}
 8001904:	40b2                	lw	ra,12(sp)
 8001906:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_UART4RST);
 8001908:	00000317          	auipc	t1,0x0
 800190c:	8ca30067          	jr	-1846(t1) # 80011d2 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 8001910:	41100513          	li	a0,1041
 8001914:	00000097          	auipc	ra,0x0
 8001918:	8a6080e7          	jalr	-1882(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 800191c:	41100513          	li	a0,1041
 8001920:	b7d5                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_USART2RST);
 8001922:	41200513          	li	a0,1042
 8001926:	00000097          	auipc	ra,0x0
 800192a:	894080e7          	jalr	-1900(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART2RST);
 800192e:	41200513          	li	a0,1042
 8001932:	bfc9                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART3RST);
 8001934:	41300513          	li	a0,1043
 8001938:	00000097          	auipc	ra,0x0
 800193c:	882080e7          	jalr	-1918(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART3RST);
 8001940:	41300513          	li	a0,1043
 8001944:	b7c1                	j	8001904 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART4RST);
 8001946:	41400513          	li	a0,1044
 800194a:	00000097          	auipc	ra,0x0
 800194e:	870080e7          	jalr	-1936(ra) # 80011ba <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART4RST);
 8001952:	41400513          	li	a0,1044
 8001956:	b77d                	j	8001904 <usart_deinit+0x4e>

08001958 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/ 
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8001958:	1141                	addi	sp,sp,-16
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
    switch(usart_periph){
 800195a:	400057b7          	lui	a5,0x40005
{
 800195e:	c422                	sw	s0,8(sp)
 8001960:	c226                	sw	s1,4(sp)
 8001962:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 8001964:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
{
 8001968:	842a                	mv	s0,a0
 800196a:	84ae                	mv	s1,a1
    switch(usart_periph){
 800196c:	00e50f63          	beq	a0,a4,800198a <usart_baudrate_set+0x32>
 8001970:	00a76f63          	bltu	a4,a0,800198e <usart_baudrate_set+0x36>
 8001974:	40004737          	lui	a4,0x40004
 8001978:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 800197c:	00e50763          	beq	a0,a4,800198a <usart_baudrate_set+0x32>
 8001980:	80078793          	addi	a5,a5,-2048
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001984:	4501                	li	a0,0
    switch(usart_periph){
 8001986:	02f41263          	bne	s0,a5,80019aa <usart_baudrate_set+0x52>
         /* get USART0 clock */
         uclk=rcu_clock_freq_get(CK_APB2);
         break;
    case USART1:
         /* get USART1 clock */
         uclk=rcu_clock_freq_get(CK_APB1);
 800198a:	4509                	li	a0,2
 800198c:	a819                	j	80019a2 <usart_baudrate_set+0x4a>
    switch(usart_periph){
 800198e:	fef50ee3          	beq	a0,a5,800198a <usart_baudrate_set+0x32>
 8001992:	400147b7          	lui	a5,0x40014
 8001996:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 800199a:	4501                	li	a0,0
    switch(usart_periph){
 800199c:	00f41763          	bne	s0,a5,80019aa <usart_baudrate_set+0x52>
         uclk=rcu_clock_freq_get(CK_APB2);
 80019a0:	450d                	li	a0,3
         uclk=rcu_clock_freq_get(CK_APB1);
 80019a2:	00000097          	auipc	ra,0x0
 80019a6:	8a0080e7          	jalr	-1888(ra) # 8001242 <rcu_clock_freq_get>
         break;  
    default:
         break;
    }
    /* oversampling by 16, configure the value of USART_BAUD */
    udiv = (uclk+baudval/2U)/baudval;
 80019aa:	0014d793          	srli	a5,s1,0x1
 80019ae:	97aa                	add	a5,a5,a0
 80019b0:	0297d7b3          	divu	a5,a5,s1
    intdiv = udiv & (0x0000fff0U);
    fradiv = udiv & (0x0000000fU);
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
}
 80019b4:	40b2                	lw	ra,12(sp)
 80019b6:	4492                	lw	s1,4(sp)
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 80019b8:	07c2                	slli	a5,a5,0x10
 80019ba:	83c1                	srli	a5,a5,0x10
 80019bc:	c41c                	sw	a5,8(s0)
}
 80019be:	4422                	lw	s0,8(sp)
 80019c0:	0141                	addi	sp,sp,16
 80019c2:	8082                	ret

080019c4 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 80019c4:	455c                	lw	a5,12(a0)
 80019c6:	9ff7f793          	andi	a5,a5,-1537
 80019ca:	c55c                	sw	a5,12(a0)
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg ;
 80019cc:	455c                	lw	a5,12(a0)
 80019ce:	8ddd                	or	a1,a1,a5
 80019d0:	c54c                	sw	a1,12(a0)
}
 80019d2:	8082                	ret

080019d4 <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 80019d4:	455c                	lw	a5,12(a0)
 80019d6:	777d                	lui	a4,0xfffff
 80019d8:	177d                	addi	a4,a4,-1
 80019da:	8ff9                	and	a5,a5,a4
 80019dc:	c55c                	sw	a5,12(a0)
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 80019de:	455c                	lw	a5,12(a0)
 80019e0:	8ddd                	or	a1,a1,a5
 80019e2:	c54c                	sw	a1,12(a0)
}
 80019e4:	8082                	ret

080019e6 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB; 
 80019e6:	491c                	lw	a5,16(a0)
 80019e8:	7775                	lui	a4,0xffffd
 80019ea:	177d                	addi	a4,a4,-1
 80019ec:	8ff9                	and	a5,a5,a4
 80019ee:	c91c                	sw	a5,16(a0)
    /* configure USART stop bits */
    USART_CTL1(usart_periph) |= stblen;
 80019f0:	491c                	lw	a5,16(a0)
 80019f2:	8ddd                	or	a1,a1,a5
 80019f4:	c90c                	sw	a1,16(a0)
}
 80019f6:	8082                	ret

080019f8 <usart_enable>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph){
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 80019f8:	455c                	lw	a5,12(a0)
 80019fa:	6709                	lui	a4,0x2
 80019fc:	8fd9                	or	a5,a5,a4
 80019fe:	c55c                	sw	a5,12(a0)
}
 8001a00:	8082                	ret

08001a02 <usart_transmit_config>:
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 8001a02:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_TEN;
 8001a04:	9bdd                	andi	a5,a5,-9
    ctl |= txconfig;
 8001a06:	8ddd                	or	a1,a1,a5
    /* configure transfer mode */
    USART_CTL0(usart_periph) = ctl;
 8001a08:	c54c                	sw	a1,12(a0)
}
 8001a0a:	8082                	ret

08001a0c <usart_receive_config>:
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 8001a0c:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_REN;
 8001a0e:	9bed                	andi	a5,a5,-5
    ctl |= rxconfig;
 8001a10:	8ddd                	or	a1,a1,a5
    /* configure receiver mode */
    USART_CTL0(usart_periph) = ctl;
 8001a12:	c54c                	sw	a1,12(a0)
}
 8001a14:	8082                	ret

08001a16 <usart_data_receive>:
    \param[out] none
    \retval     data of received
*/
uint16_t usart_data_receive(uint32_t usart_periph)
{
    return (uint16_t)(GET_BITS(USART_DATA(usart_periph), 0U, 8U));
 8001a16:	4148                	lw	a0,4(a0)
}
 8001a18:	1ff57513          	andi	a0,a0,511
 8001a1c:	8082                	ret

08001a1e <usart_hardware_flow_rts_config>:
*/
void usart_hardware_flow_rts_config(uint32_t usart_periph, uint32_t rtsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a1e:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_RTSEN;
 8001a20:	eff7f793          	andi	a5,a5,-257
    ctl |= rtsconfig;
 8001a24:	8ddd                	or	a1,a1,a5
    /* configure RTS */
    USART_CTL2(usart_periph) = ctl;
 8001a26:	c94c                	sw	a1,20(a0)
}
 8001a28:	8082                	ret

08001a2a <usart_hardware_flow_cts_config>:
*/
void usart_hardware_flow_cts_config(uint32_t usart_periph, uint32_t ctsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a2a:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_CTSEN;
 8001a2c:	dff7f793          	andi	a5,a5,-513
    ctl |= ctsconfig;
 8001a30:	8ddd                	or	a1,a1,a5
    /* configure CTS */
    USART_CTL2(usart_periph) = ctl;
 8001a32:	c94c                	sw	a1,20(a0)
}
 8001a34:	8082                	ret

08001a36 <usart_dma_receive_config>:
*/
void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a36:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENR;
 8001a38:	fbf7f793          	andi	a5,a5,-65
    ctl |= dmacmd;
 8001a3c:	8ddd                	or	a1,a1,a5
    /* configure DMA reception */
    USART_CTL2(usart_periph) = ctl;
 8001a3e:	c94c                	sw	a1,20(a0)
}
 8001a40:	8082                	ret

08001a42 <usart_dma_transmit_config>:
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001a42:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENT;
 8001a44:	f7f7f793          	andi	a5,a5,-129
    ctl |= dmacmd;
 8001a48:	8ddd                	or	a1,a1,a5
    /* configure DMA transmission */
    USART_CTL2(usart_periph) = ctl;
 8001a4a:	c94c                	sw	a1,20(a0)
}
 8001a4c:	8082                	ret

08001a4e <usart_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_enable(uint32_t usart_periph, uint32_t interrupt)
{
    USART_REG_VAL(usart_periph, interrupt) |= BIT(USART_BIT_POS(interrupt));
 8001a4e:	0065d793          	srli	a5,a1,0x6
 8001a52:	3ff7f793          	andi	a5,a5,1023
 8001a56:	953e                	add	a0,a0,a5
 8001a58:	4118                	lw	a4,0(a0)
 8001a5a:	4785                	li	a5,1
 8001a5c:	00b797b3          	sll	a5,a5,a1
 8001a60:	8fd9                	or	a5,a5,a4
 8001a62:	c11c                	sw	a5,0(a0)
}
 8001a64:	8082                	ret

08001a66 <usart_interrupt_flag_get>:
*/
FlagStatus usart_interrupt_flag_get(uint32_t usart_periph, uint32_t int_flag)
{
    uint32_t intenable = 0U, flagstatus = 0U;
    /* get the interrupt enable bit status */
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8001a66:	0065d713          	srli	a4,a1,0x6
 8001a6a:	3ff77713          	andi	a4,a4,1023
 8001a6e:	972a                	add	a4,a4,a0
 8001a70:	4314                	lw	a3,0(a4)
    /* get the corresponding flag bit status */
    flagstatus = (USART_REG_VAL2(usart_periph, int_flag) & BIT(USART_BIT_POS2(int_flag)));
 8001a72:	0165d713          	srli	a4,a1,0x16
 8001a76:	972a                	add	a4,a4,a0
 8001a78:	4318                	lw	a4,0(a4)
 8001a7a:	0105d513          	srli	a0,a1,0x10
 8001a7e:	4785                	li	a5,1
 8001a80:	00a79533          	sll	a0,a5,a0
 8001a84:	8d79                	and	a0,a0,a4

    if(flagstatus && intenable){
 8001a86:	c511                	beqz	a0,8001a92 <usart_interrupt_flag_get+0x2c>
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8001a88:	00b79533          	sll	a0,a5,a1
 8001a8c:	8d75                	and	a0,a0,a3
    if(flagstatus && intenable){
 8001a8e:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET; 
    }
}
 8001a92:	8082                	ret

08001a94 <usart_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_flag_clear(uint32_t usart_periph, uint32_t int_flag)
{
    USART_REG_VAL2(usart_periph, int_flag) &= ~BIT(USART_BIT_POS2(int_flag));
 8001a94:	0165d713          	srli	a4,a1,0x16
 8001a98:	953a                	add	a0,a0,a4
 8001a9a:	4118                	lw	a4,0(a0)
 8001a9c:	81c1                	srli	a1,a1,0x10
 8001a9e:	4785                	li	a5,1
 8001aa0:	00b797b3          	sll	a5,a5,a1
 8001aa4:	fff7c793          	not	a5,a5
 8001aa8:	8ff9                	and	a5,a5,a4
 8001aaa:	c11c                	sw	a5,0(a0)
}
 8001aac:	8082                	ret

08001aae <SystemInit>:
*/
void SystemInit(void)
{
    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001aae:	400217b7          	lui	a5,0x40021
 8001ab2:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001ab4:	e0ff06b7          	lui	a3,0xe0ff0
 8001ab8:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001aba:	00176713          	ori	a4,a4,1
 8001abe:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001ac0:	43d8                	lw	a4,4(a5)
 8001ac2:	8f75                	and	a4,a4,a3
 8001ac4:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 8001ac6:	4398                	lw	a4,0(a5)
 8001ac8:	fef706b7          	lui	a3,0xfef70
 8001acc:	16fd                	addi	a3,a3,-1
 8001ace:	8f75                	and	a4,a4,a3
 8001ad0:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8001ad2:	4398                	lw	a4,0(a5)
 8001ad4:	fffc06b7          	lui	a3,0xfffc0
 8001ad8:	16fd                	addi	a3,a3,-1
 8001ada:	8f75                	and	a4,a4,a3
 8001adc:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8001ade:	43d8                	lw	a4,4(a5)
 8001ae0:	df0106b7          	lui	a3,0xdf010
 8001ae4:	16fd                	addi	a3,a3,-1
 8001ae6:	8f75                	and	a4,a4,a3
 8001ae8:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8001aea:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8001aee:	4398                	lw	a4,0(a5)
 8001af0:	eaf706b7          	lui	a3,0xeaf70
 8001af4:	16fd                	addi	a3,a3,-1
 8001af6:	8f75                	and	a4,a4,a3
 8001af8:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8001afa:	00ff0737          	lui	a4,0xff0
 8001afe:	c798                	sw	a4,8(a5)
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8001b00:	4394                	lw	a3,0(a5)
 8001b02:	6741                	lui	a4,0x10
 8001b04:	8ed9                	or	a3,a3,a4
 8001b06:	c394                	sw	a3,0(a5)
 8001b08:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8001b0c:	40021737          	lui	a4,0x40021
 8001b10:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8001b12:	00e69613          	slli	a2,a3,0xe
 8001b16:	00064463          	bltz	a2,8001b1e <SystemInit+0x70>
 8001b1a:	17fd                	addi	a5,a5,-1
 8001b1c:	fbf5                	bnez	a5,8001b10 <SystemInit+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8001b1e:	400217b7          	lui	a5,0x40021
 8001b22:	4398                	lw	a4,0(a5)
 8001b24:	00e71693          	slli	a3,a4,0xe
 8001b28:	0006c363          	bltz	a3,8001b2e <SystemInit+0x80>
        while(1){
        }
 8001b2c:	a001                	j	8001b2c <SystemInit+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8001b2e:	43d8                	lw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8001b30:	dfc406b7          	lui	a3,0xdfc40
 8001b34:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8001b36:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8001b38:	43d8                	lw	a4,4(a5)
 8001b3a:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8001b3c:	43d8                	lw	a4,4(a5)
 8001b3e:	40076713          	ori	a4,a4,1024
 8001b42:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8001b44:	43d8                	lw	a4,4(a5)
 8001b46:	8f75                	and	a4,a4,a3
 8001b48:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 8001b4a:	43d8                	lw	a4,4(a5)
 8001b4c:	202906b7          	lui	a3,0x20290
 8001b50:	8f55                	or	a4,a4,a3
 8001b52:	c3d8                	sw	a4,4(a5)
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8001b54:	57d8                	lw	a4,44(a5)
 8001b56:	76bd                	lui	a3,0xfffef
 8001b58:	8f75                	and	a4,a4,a3
 8001b5a:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 8001b5c:	57d8                	lw	a4,44(a5)
 8001b5e:	66c1                	lui	a3,0x10
 8001b60:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xef11>
 8001b64:	8f55                	or	a4,a4,a3
 8001b66:	d7d8                	sw	a4,44(a5)

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 8001b68:	4398                	lw	a4,0(a5)
 8001b6a:	040006b7          	lui	a3,0x4000
 8001b6e:	8f55                	or	a4,a4,a3
 8001b70:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 8001b72:	400217b7          	lui	a5,0x40021
 8001b76:	4398                	lw	a4,0(a5)
 8001b78:	00471693          	slli	a3,a4,0x4
 8001b7c:	fe06dde3          	bgez	a3,8001b76 <SystemInit+0xc8>
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 8001b80:	4398                	lw	a4,0(a5)
 8001b82:	100006b7          	lui	a3,0x10000
 8001b86:	8f55                	or	a4,a4,a3
 8001b88:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 8001b8a:	400217b7          	lui	a5,0x40021
 8001b8e:	4398                	lw	a4,0(a5)
 8001b90:	00271693          	slli	a3,a4,0x2
 8001b94:	fe06dde3          	bgez	a3,8001b8e <SystemInit+0xe0>
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8001b98:	4398                	lw	a4,0(a5)
 8001b9a:	010006b7          	lui	a3,0x1000
 8001b9e:	8f55                	or	a4,a4,a3
 8001ba0:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8001ba2:	400217b7          	lui	a5,0x40021
 8001ba6:	4398                	lw	a4,0(a5)
 8001ba8:	00671693          	slli	a3,a4,0x6
 8001bac:	fe06dde3          	bgez	a3,8001ba6 <SystemInit+0xf8>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8001bb0:	43d8                	lw	a4,4(a5)
 8001bb2:	9b71                	andi	a4,a4,-4
 8001bb4:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8001bb6:	43d8                	lw	a4,4(a5)
 8001bb8:	00276713          	ori	a4,a4,2
 8001bbc:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8001bbe:	40021737          	lui	a4,0x40021
 8001bc2:	435c                	lw	a5,4(a4)
 8001bc4:	8ba1                	andi	a5,a5,8
 8001bc6:	dff5                	beqz	a5,8001bc2 <SystemInit+0x114>
}
 8001bc8:	8082                	ret

08001bca <SystemCoreClockUpdate>:
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001bca:	40021737          	lui	a4,0x40021
 8001bce:	435c                	lw	a5,4(a4)
 8001bd0:	20000637          	lui	a2,0x20000
    switch (scss)
 8001bd4:	4685                	li	a3,1
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001bd6:	8389                	srli	a5,a5,0x2
 8001bd8:	8b8d                	andi	a5,a5,3
    switch (scss)
 8001bda:	4e860613          	addi	a2,a2,1256 # 200004e8 <SystemCoreClock>
 8001bde:	00d78663          	beq	a5,a3,8001bea <SystemCoreClockUpdate+0x20>
 8001be2:	c781                	beqz	a5,8001bea <SystemCoreClockUpdate+0x20>
 8001be4:	4689                	li	a3,2
 8001be6:	00d78863          	beq	a5,a3,8001bf6 <SystemCoreClockUpdate+0x2c>
            SystemCoreClock = IRC8M_VALUE;
 8001bea:	007a17b7          	lui	a5,0x7a1
 8001bee:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001bf2:	c21c                	sw	a5,0(a2)
}
 8001bf4:	8082                	ret
            pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 8001bf6:	435c                	lw	a5,4(a4)
            if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
 8001bf8:	00f79693          	slli	a3,a5,0xf
 8001bfc:	0606db63          	bgez	a3,8001c72 <SystemCoreClockUpdate+0xa8>
                predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001c00:	575c                	lw	a5,44(a4)
                if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001c02:	00f79693          	slli	a3,a5,0xf
 8001c06:	0606d163          	bgez	a3,8001c68 <SystemCoreClockUpdate+0x9e>
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c0a:	575c                	lw	a5,44(a4)
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c0c:	5758                	lw	a4,44(a4)
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c0e:	8391                	srli	a5,a5,0x4
 8001c10:	8bbd                	andi	a5,a5,15
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c12:	8321                	srli	a4,a4,0x8
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001c14:	00178693          	addi	a3,a5,1
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001c18:	00f77793          	andi	a5,a4,15
 8001c1c:	00278713          	addi	a4,a5,2
                    if(17U == pll1mf){
 8001c20:	47c5                	li	a5,17
 8001c22:	00f71363          	bne	a4,a5,8001c28 <SystemCoreClockUpdate+0x5e>
                        pll1mf = 20U;
 8001c26:	4751                	li	a4,20
                    ck_src = (ck_src / predv1) * pll1mf;
 8001c28:	007a17b7          	lui	a5,0x7a1
 8001c2c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001c30:	02d7d7b3          	divu	a5,a5,a3
 8001c34:	02e787b3          	mul	a5,a5,a4
                predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 8001c38:	40021737          	lui	a4,0x40021
 8001c3c:	5758                	lw	a4,44(a4)
 8001c3e:	8b3d                	andi	a4,a4,15
 8001c40:	0705                	addi	a4,a4,1
                ck_src /= predv0;
 8001c42:	02e7d7b3          	divu	a5,a5,a4
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c46:	400216b7          	lui	a3,0x40021
 8001c4a:	42d8                	lw	a4,4(a3)
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c4c:	42d4                	lw	a3,4(a3)
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c4e:	8349                	srli	a4,a4,0x12
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c50:	00269593          	slli	a1,a3,0x2
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001c54:	8b3d                	andi	a4,a4,15
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001c56:	0205d363          	bgez	a1,8001c7c <SystemCoreClockUpdate+0xb2>
                pllmf |= 0x10U;
 8001c5a:	01076713          	ori	a4,a4,16
                pllmf += 1U;
 8001c5e:	0705                	addi	a4,a4,1
            SystemCoreClock = ck_src * pllmf;
 8001c60:	02f70733          	mul	a4,a4,a5
 8001c64:	c218                	sw	a4,0(a2)
 8001c66:	8082                	ret
                ck_src = HXTAL_VALUE;
 8001c68:	007a17b7          	lui	a5,0x7a1
 8001c6c:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001c70:	b7e1                	j	8001c38 <SystemCoreClockUpdate+0x6e>
                ck_src = IRC8M_VALUE / 2U;
 8001c72:	003d17b7          	lui	a5,0x3d1
 8001c76:	90078793          	addi	a5,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 8001c7a:	b7f1                	j	8001c46 <SystemCoreClockUpdate+0x7c>
            if(pllmf >= 15U){
 8001c7c:	46bd                	li	a3,15
 8001c7e:	fed700e3          	beq	a4,a3,8001c5e <SystemCoreClockUpdate+0x94>
                pllmf += 2U;
 8001c82:	0709                	addi	a4,a4,2
            if(15U == pllmf){
 8001c84:	fcd71ee3          	bne	a4,a3,8001c60 <SystemCoreClockUpdate+0x96>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001c88:	4719                	li	a4,6
 8001c8a:	02e78733          	mul	a4,a5,a4
 8001c8e:	8385                	srli	a5,a5,0x1
 8001c90:	97ba                	add	a5,a5,a4
 8001c92:	b785                	j	8001bf2 <SystemCoreClockUpdate+0x28>

08001c94 <_exit>:

#include "stub.h"


void _exit(int code)
{
 8001c94:	7179                	addi	sp,sp,-48
  const char message[] = "\nProgram has exited with code:";
 8001c96:	080005b7          	lui	a1,0x8000
{
 8001c9a:	d422                	sw	s0,40(sp)
  const char message[] = "\nProgram has exited with code:";
 8001c9c:	467d                	li	a2,31
{
 8001c9e:	842a                	mv	s0,a0
  const char message[] = "\nProgram has exited with code:";
 8001ca0:	29058593          	addi	a1,a1,656 # 8000290 <enable_mcycle_minstret+0x44>
 8001ca4:	850a                	mv	a0,sp
{
 8001ca6:	d606                	sw	ra,44(sp)
  const char message[] = "\nProgram has exited with code:";
 8001ca8:	00006097          	auipc	ra,0x6
 8001cac:	d0c080e7          	jalr	-756(ra) # 80079b4 <memcpy>

  write(STDERR_FILENO, message, sizeof(message) - 1);
 8001cb0:	4679                	li	a2,30
 8001cb2:	858a                	mv	a1,sp
 8001cb4:	4509                	li	a0,2
 8001cb6:	17fff097          	auipc	ra,0x17fff
 8001cba:	892080e7          	jalr	-1902(ra) # 20000548 <write>
  write_hex(STDERR_FILENO, code);
 8001cbe:	85a2                	mv	a1,s0
 8001cc0:	4509                	li	a0,2
 8001cc2:	00000097          	auipc	ra,0x0
 8001cc6:	04c080e7          	jalr	76(ra) # 8001d0e <write_hex>
  write(STDERR_FILENO, "\n", 1);
 8001cca:	080005b7          	lui	a1,0x8000
 8001cce:	4605                	li	a2,1
 8001cd0:	2c058593          	addi	a1,a1,704 # 80002c0 <enable_mcycle_minstret+0x74>
 8001cd4:	4509                	li	a0,2
 8001cd6:	17fff097          	auipc	ra,0x17fff
 8001cda:	872080e7          	jalr	-1934(ra) # 20000548 <write>

  for (;;);
 8001cde:	a001                	j	8001cde <_exit+0x4a>

08001ce0 <_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
 8001ce0:	20000737          	lui	a4,0x20000
 8001ce4:	4ec70713          	addi	a4,a4,1260 # 200004ec <curbrk.1524>
 8001ce8:	431c                	lw	a5,0(a4)
 8001cea:	200056b7          	lui	a3,0x20005
 8001cee:	e4868693          	addi	a3,a3,-440 # 20004e48 <_end>
 8001cf2:	953e                	add	a0,a0,a5
 8001cf4:	00d56b63          	bltu	a0,a3,8001d0a <_sbrk+0x2a>
 8001cf8:	200076b7          	lui	a3,0x20007
 8001cfc:	00068693          	mv	a3,a3
 8001d00:	00a6e563          	bltu	a3,a0,8001d0a <_sbrk+0x2a>
    return NULL - 1;

  curbrk += incr;
 8001d04:	c308                	sw	a0,0(a4)
  return curbrk - incr;
 8001d06:	853e                	mv	a0,a5
 8001d08:	8082                	ret
    return NULL - 1;
 8001d0a:	57fd                	li	a5,-1
 8001d0c:	bfed                	j	8001d06 <_sbrk+0x26>

08001d0e <write_hex>:

#include <stdint.h>
#include <unistd.h>

void write_hex(int fd, unsigned long int hex)
{
 8001d0e:	7179                	addi	sp,sp,-48
 8001d10:	ce4e                	sw	s3,28(sp)
 8001d12:	89ae                	mv	s3,a1
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
 8001d14:	080005b7          	lui	a1,0x8000
 8001d18:	4609                	li	a2,2
 8001d1a:	2b058593          	addi	a1,a1,688 # 80002b0 <enable_mcycle_minstret+0x64>
{
 8001d1e:	d422                	sw	s0,40(sp)
 8001d20:	d226                	sw	s1,36(sp)
 8001d22:	d04a                	sw	s2,32(sp)
 8001d24:	cc52                	sw	s4,24(sp)
 8001d26:	ca56                	sw	s5,20(sp)
 8001d28:	d606                	sw	ra,44(sp)
 8001d2a:	892a                	mv	s2,a0
  write(fd , "0x", 2);
 8001d2c:	4471                	li	s0,28
 8001d2e:	17fff097          	auipc	ra,0x17fff
 8001d32:	81a080e7          	jalr	-2022(ra) # 20000548 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001d36:	4a3d                	li	s4,15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d38:	4aa5                	li	s5,9
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001d3a:	54f1                	li	s1,-4
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001d3c:	008a17b3          	sll	a5,s4,s0
 8001d40:	0137f7b3          	and	a5,a5,s3
 8001d44:	0087d7b3          	srl	a5,a5,s0
 8001d48:	0ff7f793          	andi	a5,a5,255
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d4c:	02faec63          	bltu	s5,a5,8001d84 <write_hex+0x76>
 8001d50:	03078793          	addi	a5,a5,48
 8001d54:	0ff7f793          	andi	a5,a5,255
    write(fd, &towrite, 1);
 8001d58:	4605                	li	a2,1
 8001d5a:	00f10593          	addi	a1,sp,15
 8001d5e:	854a                	mv	a0,s2
 8001d60:	1471                	addi	s0,s0,-4
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d62:	00f107a3          	sb	a5,15(sp)
    write(fd, &towrite, 1);
 8001d66:	17ffe097          	auipc	ra,0x17ffe
 8001d6a:	7e2080e7          	jalr	2018(ra) # 20000548 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001d6e:	fc9417e3          	bne	s0,s1,8001d3c <write_hex+0x2e>
  }
}
 8001d72:	50b2                	lw	ra,44(sp)
 8001d74:	5422                	lw	s0,40(sp)
 8001d76:	5492                	lw	s1,36(sp)
 8001d78:	5902                	lw	s2,32(sp)
 8001d7a:	49f2                	lw	s3,28(sp)
 8001d7c:	4a62                	lw	s4,24(sp)
 8001d7e:	4ad2                	lw	s5,20(sp)
 8001d80:	6145                	addi	sp,sp,48
 8001d82:	8082                	ret
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001d84:	03778793          	addi	a5,a5,55
 8001d88:	b7f1                	j	8001d54 <write_hex+0x46>

08001d8a <get_timer_value>:
}


uint32_t mtime_hi(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001d8a:	d10007b7          	lui	a5,0xd1000
 8001d8e:	43d8                	lw	a4,4(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME);
 8001d90:	4388                	lw	a0,0(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001d92:	43cc                	lw	a1,4(a5)
uint64_t get_timer_value(void)
{
  while (1) {
    uint32_t hi = mtime_hi();
    uint32_t lo = mtime_lo();
    if (hi == mtime_hi())
 8001d94:	fee59de3          	bne	a1,a4,8001d8e <get_timer_value+0x4>
      return ((uint64_t)hi << 32) | lo;
  }
}
 8001d98:	8082                	ret

08001d9a <eclic_init>:
{

  typedef volatile uint32_t vuint32_t;

  /* clear cfg register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 8001d9a:	d20007b7          	lui	a5,0xd2000
 8001d9e:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ff8000>

  /* clear minthresh register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 8001da2:	000785a3          	sb	zero,11(a5)

  /* clear all IP/IE/ATTR/CTRL bits for all interrupt sources */
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 8001da6:	0512                	slli	a0,a0,0x4
 8001da8:	d20017b7          	lui	a5,0xd2001
 8001dac:	953e                	add	a0,a0,a5

  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001dae:	00a7e363          	bltu	a5,a0,8001db4 <eclic_init+0x1a>
    *ptr = 0;
  }
}
 8001db2:	8082                	ret
    *ptr = 0;
 8001db4:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ff9000>
  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001db8:	07c1                	addi	a5,a5,16
 8001dba:	bfd5                	j	8001dae <eclic_init+0x14>

08001dbc <eclic_enable_interrupt>:

void eclic_enable_interrupt (uint32_t source) {
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8001dbc:	d20017b7          	lui	a5,0xd2001
 8001dc0:	0785                	addi	a5,a5,1
 8001dc2:	050a                	slli	a0,a0,0x2
 8001dc4:	953e                	add	a0,a0,a5
 8001dc6:	4785                	li	a5,1
 8001dc8:	00f50023          	sb	a5,0(a0)
}
 8001dcc:	8082                	ret

08001dce <eclic_set_nlbits>:
void eclic_set_cliccfg (uint8_t cliccfg){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
}

uint8_t eclic_get_cliccfg (void){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001dce:	d2000737          	lui	a4,0xd2000
 8001dd2:	00074783          	lbu	a5,0(a4) # d2000000 <_sp+0xb1ff8000>
}

/* sets nlbits */
void eclic_set_nlbits(uint8_t nlbits) {
  /* shift nlbits to correct position */
  uint8_t nlbits_shifted = nlbits << ECLIC_CFG_NLBITS_LSB;
 8001dd6:	0506                	slli	a0,a0,0x1

  /* read the current cliccfg */ 
  uint8_t old_cliccfg = eclic_get_cliccfg();
  uint8_t new_cliccfg = (old_cliccfg & (~ECLIC_CFG_NLBITS_MASK)) | (ECLIC_CFG_NLBITS_MASK & nlbits_shifted); 
 8001dd8:	8979                	andi	a0,a0,30
 8001dda:	0e17f793          	andi	a5,a5,225
 8001dde:	8d5d                	or	a0,a0,a5
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
 8001de0:	00a70023          	sb	a0,0(a4)

  eclic_set_cliccfg(new_cliccfg);
}
 8001de4:	8082                	ret

08001de6 <eclic_get_nlbits>:
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001de6:	d20007b7          	lui	a5,0xd2000
 8001dea:	0007c503          	lbu	a0,0(a5) # d2000000 <_sp+0xb1ff8000>

/* get nlbits */
uint8_t eclic_get_nlbits(void) {
  /* extract nlbits */
  uint8_t nlbits = eclic_get_cliccfg();
  nlbits = (nlbits & ECLIC_CFG_NLBITS_MASK) >> ECLIC_CFG_NLBITS_LSB;
 8001dee:	8105                	srli	a0,a0,0x1
  return nlbits;
}
 8001df0:	893d                	andi	a0,a0,15
 8001df2:	8082                	ret

08001df4 <eclic_set_irq_lvl_abs>:
  uint8_t lvl = intctrl << (8-nlbits);

  return lvl;
}

void eclic_set_irq_lvl_abs(uint32_t source, uint8_t lvl_abs) {
 8001df4:	1141                	addi	sp,sp,-16
 8001df6:	c422                	sw	s0,8(sp)
 8001df8:	c226                	sw	s1,4(sp)
 8001dfa:	c606                	sw	ra,12(sp)
 8001dfc:	842a                	mv	s0,a0
 8001dfe:	84ae                	mv	s1,a1
  /* extract nlbits */
  uint8_t nlbits = eclic_get_nlbits();
 8001e00:	00000097          	auipc	ra,0x0
 8001e04:	fe6080e7          	jalr	-26(ra) # 8001de6 <eclic_get_nlbits>
  if (nlbits > ECLICINTCTLBITS) {
    nlbits = ECLICINTCTLBITS;
  }

  /* shift lvl_abs into correct bit position */
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e08:	4791                	li	a5,4
 8001e0a:	4711                	li	a4,4
 8001e0c:	00a7e363          	bltu	a5,a0,8001e12 <eclic_set_irq_lvl_abs+0x1e>
 8001e10:	872a                	mv	a4,a0
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001e12:	d2001537          	lui	a0,0xd2001
 8001e16:	040a                	slli	s0,s0,0x2
 8001e18:	050d                	addi	a0,a0,3
 8001e1a:	9522                	add	a0,a0,s0
 8001e1c:	00054783          	lbu	a5,0(a0) # d2001000 <_sp+0xb1ff9000>
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e20:	0ff77693          	andi	a3,a4,255
 8001e24:	45a1                	li	a1,8
 
  /* write to clicintctrl */
  uint8_t current_intctrl = eclic_get_intctrl(source);
  /* shift intctrl left to mask off unused bits */
  current_intctrl = current_intctrl << nlbits;
 8001e26:	00e797b3          	sll	a5,a5,a4
  /* shift intctrl into correct bit position */
  current_intctrl = current_intctrl >> nlbits;
 8001e2a:	0ff7f793          	andi	a5,a5,255
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001e2e:	8d95                	sub	a1,a1,a3
 8001e30:	00b494b3          	sll	s1,s1,a1
  current_intctrl = current_intctrl >> nlbits;
 8001e34:	40e7d7b3          	sra	a5,a5,a4

  eclic_set_intctrl(source, (current_intctrl | lvl));
 8001e38:	8fc5                	or	a5,a5,s1
 8001e3a:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001e3e:	00f50023          	sb	a5,0(a0)
}
 8001e42:	40b2                	lw	ra,12(sp)
 8001e44:	4422                	lw	s0,8(sp)
 8001e46:	4492                	lw	s1,4(sp)
 8001e48:	0141                	addi	sp,sp,16
 8001e4a:	8082                	ret

08001e4c <eclic_set_irq_priority>:

  return lvl_abs;
}

/* sets an interrupt priority based encoding of nlbits and ECLICINTCTLBITS */
uint8_t eclic_set_irq_priority(uint32_t source, uint8_t priority) {
 8001e4c:	1101                	addi	sp,sp,-32
 8001e4e:	cc22                	sw	s0,24(sp)
 8001e50:	c62e                	sw	a1,12(sp)
 8001e52:	ce06                	sw	ra,28(sp)
 8001e54:	842a                	mv	s0,a0
    /* extract nlbits */
    uint8_t nlbits = eclic_get_nlbits();
 8001e56:	00000097          	auipc	ra,0x0
 8001e5a:	f90080e7          	jalr	-112(ra) # 8001de6 <eclic_get_nlbits>
    if (nlbits >= ECLICINTCTLBITS) {
 8001e5e:	478d                	li	a5,3
        nlbits = ECLICINTCTLBITS;
        return 0;
 8001e60:	4581                	li	a1,0
    if (nlbits >= ECLICINTCTLBITS) {
 8001e62:	02a7e963          	bltu	a5,a0,8001e94 <eclic_set_irq_priority+0x48>
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001e66:	d2001737          	lui	a4,0xd2001
 8001e6a:	040a                	slli	s0,s0,0x2
 8001e6c:	070d                	addi	a4,a4,3
 8001e6e:	9722                	add	a4,a4,s0
 8001e70:	00074783          	lbu	a5,0(a4) # d2001000 <_sp+0xb1ff9000>
    }

    /* shift priority into correct bit position */
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e74:	45b2                	lw	a1,12(sp)

    /* write to eclicintctrl */
    uint8_t current_intctrl = eclic_get_intctrl(source);
    /* shift intctrl right to mask off unused bits */
    current_intctrl = current_intctrl >> (8-nlbits);
 8001e76:	46a1                	li	a3,8
 8001e78:	40a68533          	sub	a0,a3,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e7c:	0592                	slli	a1,a1,0x4
    current_intctrl = current_intctrl >> (8-nlbits);
 8001e7e:	40a7d7b3          	sra	a5,a5,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001e82:	0ff5f593          	andi	a1,a1,255
    /* shift intctrl into correct bit position */
    current_intctrl = current_intctrl << (8-nlbits);
 8001e86:	00a797b3          	sll	a5,a5,a0

    eclic_set_intctrl(source, (current_intctrl | priority));
 8001e8a:	8fcd                	or	a5,a5,a1
 8001e8c:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001e90:	00f70023          	sb	a5,0(a4)

    return priority;
}
 8001e94:	40f2                	lw	ra,28(sp)
 8001e96:	4462                	lw	s0,24(sp)
 8001e98:	852e                	mv	a0,a1
 8001e9a:	6105                	addi	sp,sp,32
 8001e9c:	8082                	ret

08001e9e <eclic_mode_enable>:
  uint32_t mtvec_value = read_csr(CSR_MTVEC);
  mtvec_value = mtvec_value & 0xFFFFFFC0;
  mtvec_value = mtvec_value | 0x00000003;
  write_csr(CSR_MTVEC,mtvec_value);
#elif defined ( __GNUC__ )
  uint32_t mtvec_value = read_csr(mtvec);
 8001e9e:	305027f3          	csrr	a5,mtvec
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 8001ea2:	fc07f793          	andi	a5,a5,-64
  mtvec_value = mtvec_value | 0x00000003;
 8001ea6:	0037e793          	ori	a5,a5,3
  write_csr(mtvec,mtvec_value);
 8001eaa:	30579073          	csrw	mtvec,a5
#endif

}
 8001eae:	8082                	ret

08001eb0 <handle_nmi>:
#include "riscv_encoding.h"
#include "n200_func.h"

__attribute__((weak)) uintptr_t handle_nmi()
{
  write(1, "nmi\n", 5);
 8001eb0:	080005b7          	lui	a1,0x8000
{
 8001eb4:	1141                	addi	sp,sp,-16
  write(1, "nmi\n", 5);
 8001eb6:	4615                	li	a2,5
 8001eb8:	2b458593          	addi	a1,a1,692 # 80002b4 <enable_mcycle_minstret+0x68>
 8001ebc:	4505                	li	a0,1
{
 8001ebe:	c606                	sw	ra,12(sp)
  write(1, "nmi\n", 5);
 8001ec0:	17ffe097          	auipc	ra,0x17ffe
 8001ec4:	688080e7          	jalr	1672(ra) # 20000548 <write>
  _exit(1);
 8001ec8:	4505                	li	a0,1
 8001eca:	00000097          	auipc	ra,0x0
 8001ece:	dca080e7          	jalr	-566(ra) # 8001c94 <_exit>

08001ed2 <handle_trap>:
  return 0;
}


__attribute__((weak)) uintptr_t handle_trap(uintptr_t mcause, uintptr_t sp)
{
 8001ed2:	1141                	addi	sp,sp,-16
  if((mcause & 0xFFF) == 0xFFF) {
 8001ed4:	fff54793          	not	a5,a0
{
 8001ed8:	c422                	sw	s0,8(sp)
 8001eda:	c606                	sw	ra,12(sp)
  if((mcause & 0xFFF) == 0xFFF) {
 8001edc:	01479713          	slli	a4,a5,0x14
{
 8001ee0:	842a                	mv	s0,a0
  if((mcause & 0xFFF) == 0xFFF) {
 8001ee2:	e709                	bnez	a4,8001eec <handle_trap+0x1a>
      handle_nmi();
 8001ee4:	00000097          	auipc	ra,0x0
 8001ee8:	fcc080e7          	jalr	-52(ra) # 8001eb0 <handle_nmi>
  }
  write(1, "trap\n", 5);
 8001eec:	080005b7          	lui	a1,0x8000
 8001ef0:	4615                	li	a2,5
 8001ef2:	2bc58593          	addi	a1,a1,700 # 80002bc <enable_mcycle_minstret+0x70>
 8001ef6:	4505                	li	a0,1
 8001ef8:	17ffe097          	auipc	ra,0x17ffe
 8001efc:	650080e7          	jalr	1616(ra) # 20000548 <write>
  //printf("In trap handler, the mcause is %d\n", mcause);
  //printf("In trap handler, the mepc is 0x%x\n", read_csr(mepc));
  //printf("In trap handler, the mtval is 0x%x\n", read_csr(mbadaddr));
  _exit(mcause);
 8001f00:	8522                	mv	a0,s0
 8001f02:	00000097          	auipc	ra,0x0
 8001f06:	d92080e7          	jalr	-622(ra) # 8001c94 <_exit>

08001f0a <_init>:
#include "debugger.h"
#endif

extern uint32_t disable_mcycle_minstret();
void _init()
{
 8001f0a:	1141                	addi	sp,sp,-16
 8001f0c:	c606                	sw	ra,12(sp)
	SystemInit();
 8001f0e:	00000097          	auipc	ra,0x0
 8001f12:	ba0080e7          	jalr	-1120(ra) # 8001aae <SystemInit>

	//ECLIC init
	eclic_init(ECLIC_NUM_INTERRUPTS);
 8001f16:	05700513          	li	a0,87
 8001f1a:	00000097          	auipc	ra,0x0
 8001f1e:	e80080e7          	jalr	-384(ra) # 8001d9a <eclic_init>
	eclic_mode_enable();
 8001f22:	00000097          	auipc	ra,0x0
 8001f26:	f7c080e7          	jalr	-132(ra) # 8001e9e <eclic_mode_enable>
#ifdef USE_SOFTWARE_DEBUGGER
	dbg_init();
#endif
	

}
 8001f2a:	40b2                	lw	ra,12(sp)
 8001f2c:	0141                	addi	sp,sp,16
	disable_mcycle_minstret();
 8001f2e:	ffffe317          	auipc	t1,0xffffe
 8001f32:	31830067          	jr	792(t1) # 8000246 <disable_mcycle_minstret>

08001f36 <_fini>:

void _fini()
{
}
 8001f36:	8082                	ret

08001f38 <dma_config>:
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_1, TIMER_OC_SHADOW_DISABLE);

	timer_auto_reload_shadow_enable(TIMER1);
}

void dma_config(void){
 8001f38:	7179                	addi	sp,sp,-48
    /* DMA_channel configuration */
    /* initialize DMA mode */
    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH6);
 8001f3a:	4599                	li	a1,6
 8001f3c:	40020537          	lui	a0,0x40020
void dma_config(void){
 8001f40:	d606                	sw	ra,44(sp)
    dma_deinit(DMA0, DMA_CH6);
 8001f42:	fffff097          	auipc	ra,0xfffff
 8001f46:	da0080e7          	jalr	-608(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)&dataBuffer;
 8001f4a:	200017b7          	lui	a5,0x20001
 8001f4e:	df878793          	addi	a5,a5,-520 # 20000df8 <dataBuffer>
 8001f52:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = 14;  //fourteen memory adresses for all datapoints 0x3B-0x48
    dma_init_struct.periph_addr = (uint32_t)I2C0_DATA_ADDRESS; //DMA0 adress
 8001f54:	400057b7          	lui	a5,0x40005
 8001f58:	41078793          	addi	a5,a5,1040 # 40005410 <_sp+0x1fffd410>
 8001f5c:	c23e                	sw	a5,4(sp)
    dma_init_struct.number = 14;  //fourteen memory adresses for all datapoints 0x3B-0x48
 8001f5e:	47b9                	li	a5,14
 8001f60:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8001f62:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f64:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8001f66:	cc3e                	sw	a5,24(sp)
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f68:	4599                	li	a1,6
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8001f6a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f6e:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8001f72:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8001f76:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8001f78:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8001f7a:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH6, &dma_init_struct);
 8001f7e:	fffff097          	auipc	ra,0xfffff
 8001f82:	da8080e7          	jalr	-600(ra) # 8000d26 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH6);
 8001f86:	4599                	li	a1,6
 8001f88:	40020537          	lui	a0,0x40020
 8001f8c:	fffff097          	auipc	ra,0xfffff
 8001f90:	e26080e7          	jalr	-474(ra) # 8000db2 <dma_circulation_disable>

    dma_interrupt_enable(DMA0, DMA_CH6, DMA_FLAG_FTF);
 8001f94:	4609                	li	a2,2
 8001f96:	4599                	li	a1,6
 8001f98:	40020537          	lui	a0,0x40020
 8001f9c:	fffff097          	auipc	ra,0xfffff
 8001fa0:	ee8080e7          	jalr	-280(ra) # 8000e84 <dma_interrupt_enable>
    /* enable DMA channel5 */
    dma_channel_enable(DMA0, DMA_CH6);
 8001fa4:	4599                	li	a1,6
 8001fa6:	40020537          	lui	a0,0x40020
 8001faa:	fffff097          	auipc	ra,0xfffff
 8001fae:	e2e080e7          	jalr	-466(ra) # 8000dd8 <dma_channel_enable>
}
 8001fb2:	50b2                	lw	ra,44(sp)
 8001fb4:	6145                	addi	sp,sp,48
 8001fb6:	8082                	ret

08001fb8 <config_clic_irqs>:

void config_clic_irqs (void){
 8001fb8:	1141                	addi	sp,sp,-16
 8001fba:	c606                	sw	ra,12(sp)

    eclic_global_interrupt_enable();
 8001fbc:	fffff097          	auipc	ra,0xfffff
 8001fc0:	eec080e7          	jalr	-276(ra) # 8000ea8 <eclic_global_interrupt_enable>
    eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);
 8001fc4:	450d                	li	a0,3
 8001fc6:	fffff097          	auipc	ra,0xfffff
 8001fca:	eee080e7          	jalr	-274(ra) # 8000eb4 <eclic_priority_group_set>
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);

}
 8001fce:	40b2                	lw	ra,12(sp)
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);
 8001fd0:	4605                	li	a2,1
 8001fd2:	4585                	li	a1,1
 8001fd4:	02400513          	li	a0,36
}
 8001fd8:	0141                	addi	sp,sp,16
    eclic_irq_enable(DMA0_Channel6_IRQn, 1, 1);
 8001fda:	fffff317          	auipc	t1,0xfffff
 8001fde:	ee230067          	jr	-286(t1) # 8000ebc <eclic_irq_enable>

08001fe2 <DMA0_Channel6_IRQHandler>:

//uint8_t* pDataBuffer;

void DMA0_Channel6_IRQHandler(void){
    i2c_stop_on_bus(I2C0);
 8001fe2:	40005537          	lui	a0,0x40005
void DMA0_Channel6_IRQHandler(void){
 8001fe6:	1141                	addi	sp,sp,-16
    i2c_stop_on_bus(I2C0);
 8001fe8:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
void DMA0_Channel6_IRQHandler(void){
 8001fec:	c606                	sw	ra,12(sp)
    i2c_stop_on_bus(I2C0);
 8001fee:	fffff097          	auipc	ra,0xfffff
 8001ff2:	142080e7          	jalr	322(ra) # 8001130 <i2c_stop_on_bus>

	if(dma_interrupt_flag_get(DMA0, DMA_CH6, DMA_INT_FLAG_FTF)){ 
 8001ff6:	4609                	li	a2,2
 8001ff8:	4599                	li	a1,6
 8001ffa:	40020537          	lui	a0,0x40020
 8001ffe:	fffff097          	auipc	ra,0xfffff
 8002002:	e0e080e7          	jalr	-498(ra) # 8000e0c <dma_interrupt_flag_get>
 8002006:	c919                	beqz	a0,800201c <DMA0_Channel6_IRQHandler+0x3a>
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
    }

}
 8002008:	40b2                	lw	ra,12(sp)
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
 800200a:	4605                	li	a2,1
 800200c:	4599                	li	a1,6
 800200e:	40020537          	lui	a0,0x40020
}
 8002012:	0141                	addi	sp,sp,16
		dma_interrupt_flag_clear(DMA0, DMA_CH6, DMA_INT_FLAG_G);  
 8002014:	fffff317          	auipc	t1,0xfffff
 8002018:	e6830067          	jr	-408(t1) # 8000e7c <dma_interrupt_flag_clear>
}
 800201c:	40b2                	lw	ra,12(sp)
 800201e:	0141                	addi	sp,sp,16
 8002020:	8082                	ret

08002022 <eclic_mtip_handler>:
       case USART0_IRQn  : pu0tbeisr=pISR;
   }
}

__attribute__( ( interrupt ) )
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8002022:	7139                	addi	sp,sp,-64
 8002024:	cc3e                	sw	a5,24(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8002026:	200007b7          	lui	a5,0x20000
 800202a:	5087a783          	lw	a5,1288(a5) # 20000508 <__bss_start>
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 800202e:	de06                	sw	ra,60(sp)
 8002030:	dc16                	sw	t0,56(sp)
 8002032:	da1a                	sw	t1,52(sp)
 8002034:	d81e                	sw	t2,48(sp)
 8002036:	d62a                	sw	a0,44(sp)
 8002038:	d42e                	sw	a1,40(sp)
 800203a:	d232                	sw	a2,36(sp)
 800203c:	d036                	sw	a3,32(sp)
 800203e:	ce3a                	sw	a4,28(sp)
 8002040:	ca42                	sw	a6,20(sp)
 8002042:	c846                	sw	a7,16(sp)
 8002044:	c672                	sw	t3,12(sp)
 8002046:	c476                	sw	t4,8(sp)
 8002048:	c27a                	sw	t5,4(sp)
 800204a:	c07e                	sw	t6,0(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 800204c:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 800204e:	50f2                	lw	ra,60(sp)
 8002050:	52e2                	lw	t0,56(sp)
 8002052:	5352                	lw	t1,52(sp)
 8002054:	53c2                	lw	t2,48(sp)
 8002056:	5532                	lw	a0,44(sp)
 8002058:	55a2                	lw	a1,40(sp)
 800205a:	5612                	lw	a2,36(sp)
 800205c:	5682                	lw	a3,32(sp)
 800205e:	4772                	lw	a4,28(sp)
 8002060:	47e2                	lw	a5,24(sp)
 8002062:	4852                	lw	a6,20(sp)
 8002064:	48c2                	lw	a7,16(sp)
 8002066:	4e32                	lw	t3,12(sp)
 8002068:	4ea2                	lw	t4,8(sp)
 800206a:	4f12                	lw	t5,4(sp)
 800206c:	4f82                	lw	t6,0(sp)
 800206e:	6121                	addi	sp,sp,64
 8002070:	30200073          	mret

08002074 <USART0_IRQHandler>:

__attribute__( ( interrupt ) )                  // !!! ALL USART0 INT GOES HERE !!!
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8002074:	7139                	addi	sp,sp,-64
 8002076:	cc3e                	sw	a5,24(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8002078:	200007b7          	lui	a5,0x20000
 800207c:	50c7a783          	lw	a5,1292(a5) # 2000050c <pu0tbeisr>
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8002080:	de06                	sw	ra,60(sp)
 8002082:	dc16                	sw	t0,56(sp)
 8002084:	da1a                	sw	t1,52(sp)
 8002086:	d81e                	sw	t2,48(sp)
 8002088:	d62a                	sw	a0,44(sp)
 800208a:	d42e                	sw	a1,40(sp)
 800208c:	d232                	sw	a2,36(sp)
 800208e:	d036                	sw	a3,32(sp)
 8002090:	ce3a                	sw	a4,28(sp)
 8002092:	ca42                	sw	a6,20(sp)
 8002094:	c846                	sw	a7,16(sp)
 8002096:	c672                	sw	t3,12(sp)
 8002098:	c476                	sw	t4,8(sp)
 800209a:	c27a                	sw	t5,4(sp)
 800209c:	c07e                	sw	t6,0(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 800209e:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 80020a0:	50f2                	lw	ra,60(sp)
 80020a2:	52e2                	lw	t0,56(sp)
 80020a4:	5352                	lw	t1,52(sp)
 80020a6:	53c2                	lw	t2,48(sp)
 80020a8:	5532                	lw	a0,44(sp)
 80020aa:	55a2                	lw	a1,40(sp)
 80020ac:	5612                	lw	a2,36(sp)
 80020ae:	5682                	lw	a3,32(sp)
 80020b0:	4772                	lw	a4,28(sp)
 80020b2:	47e2                	lw	a5,24(sp)
 80020b4:	4852                	lw	a6,20(sp)
 80020b6:	48c2                	lw	a7,16(sp)
 80020b8:	4e32                	lw	t3,12(sp)
 80020ba:	4ea2                	lw	t4,8(sp)
 80020bc:	4f12                	lw	t5,4(sp)
 80020be:	4f82                	lw	t6,0(sp)
 80020c0:	6121                	addi	sp,sp,64
 80020c2:	30200073          	mret

080020c6 <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80020c6:	00354783          	lbu	a5,3(a0) # 40020003 <_sp+0x20018003>
 80020ca:	00254703          	lbu	a4,2(a0)
 80020ce:	07a2                	slli	a5,a5,0x8
 80020d0:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[1];
 80020d2:	00154703          	lbu	a4,1(a0)
 80020d6:	07a2                	slli	a5,a5,0x8
	rv = rv << 8 | ptr[0];
 80020d8:	00054503          	lbu	a0,0(a0)
	rv = rv << 8 | ptr[1];
 80020dc:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[0];
 80020de:	07a2                	slli	a5,a5,0x8
	return rv;
}
 80020e0:	8d5d                	or	a0,a0,a5
 80020e2:	8082                	ret

080020e4 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80020e4:	0085d793          	srli	a5,a1,0x8
 80020e8:	00b50023          	sb	a1,0(a0)
	*ptr++ = (BYTE)val; val >>= 8;
 80020ec:	00f500a3          	sb	a5,1(a0)
 80020f0:	0105d793          	srli	a5,a1,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 80020f4:	81e1                	srli	a1,a1,0x18
 80020f6:	00f50123          	sb	a5,2(a0)
	*ptr++ = (BYTE)val;
 80020fa:	00b501a3          	sb	a1,3(a0)
}
 80020fe:	8082                	ret

08002100 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002100:	87aa                	mv	a5,a0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;
 8002102:	962a                	add	a2,a2,a0

	do {
		r = *d++ - *s++;
 8002104:	0785                	addi	a5,a5,1
 8002106:	0585                	addi	a1,a1,1
 8002108:	fff7c503          	lbu	a0,-1(a5)
 800210c:	fff5c703          	lbu	a4,-1(a1)
 8002110:	8d19                	sub	a0,a0,a4
	} while (--cnt && r == 0);
 8002112:	00c78363          	beq	a5,a2,8002118 <mem_cmp+0x18>
 8002116:	d57d                	beqz	a0,8002104 <mem_cmp+0x4>

	return r;
}
 8002118:	8082                	ret

0800211a <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800211a:	4958                	lw	a4,20(a0)
	clst -= 2;		/* Cluster number is origin from 2 */
 800211c:	15f9                	addi	a1,a1,-2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800211e:	1779                	addi	a4,a4,-2
 8002120:	00e5f963          	bgeu	a1,a4,8002132 <clst2sect+0x18>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002124:	00a55783          	lhu	a5,10(a0)
 8002128:	5508                	lw	a0,40(a0)
 800212a:	02b787b3          	mul	a5,a5,a1
 800212e:	953e                	add	a0,a0,a5
 8002130:	8082                	ret
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002132:	4501                	li	a0,0
}
 8002134:	8082                	ret

08002136 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002136:	411c                	lw	a5,0(a0)
	if (!tp) return vol;	/* Invalid path name? */
 8002138:	c38d                	beqz	a5,800215a <get_ldnumber+0x24>
 800213a:	873e                	mv	a4,a5
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800213c:	02000593          	li	a1,32
 8002140:	03a00613          	li	a2,58
 8002144:	0705                	addi	a4,a4,1
 8002146:	fff74683          	lbu	a3,-1(a4)
 800214a:	02d5f263          	bgeu	a1,a3,800216e <get_ldnumber+0x38>
 800214e:	fec69be3          	bne	a3,a2,8002144 <get_ldnumber+0xe>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002152:	00278693          	addi	a3,a5,2
 8002156:	00d70463          	beq	a4,a3,800215e <get_ldnumber+0x28>
	if (!tp) return vol;	/* Invalid path name? */
 800215a:	57fd                	li	a5,-1
 800215c:	a811                	j	8002170 <get_ldnumber+0x3a>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800215e:	0007c603          	lbu	a2,0(a5)
 8002162:	03000693          	li	a3,48
	if (!tp) return vol;	/* Invalid path name? */
 8002166:	57fd                	li	a5,-1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002168:	00d61463          	bne	a2,a3,8002170 <get_ldnumber+0x3a>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 800216c:	c118                	sw	a4,0(a0)
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800216e:	4781                	li	a5,0
}
 8002170:	853e                	mv	a0,a5
 8002172:	8082                	ret

08002174 <validate>:
)
{
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002174:	ed01                	bnez	a0,800218c <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002176:	4781                	li	a5,0
	FRESULT res = FR_INVALID_OBJECT;
 8002178:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800217a:	c19c                	sw	a5,0(a1)
	return res;
}
 800217c:	8082                	ret
	FRESULT res = FR_INVALID_OBJECT;
 800217e:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002180:	4781                	li	a5,0
}
 8002182:	40f2                	lw	ra,28(sp)
 8002184:	4462                	lw	s0,24(sp)
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002186:	c19c                	sw	a5,0(a1)
}
 8002188:	6105                	addi	sp,sp,32
 800218a:	8082                	ret
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800218c:	411c                	lw	a5,0(a0)
{
 800218e:	1101                	addi	sp,sp,-32
 8002190:	cc22                	sw	s0,24(sp)
 8002192:	ce06                	sw	ra,28(sp)
 8002194:	842a                	mv	s0,a0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002196:	d7e5                	beqz	a5,800217e <validate+0xa>
 8002198:	0007c703          	lbu	a4,0(a5)
 800219c:	d36d                	beqz	a4,800217e <validate+0xa>
 800219e:	00455683          	lhu	a3,4(a0)
 80021a2:	0067d703          	lhu	a4,6(a5)
 80021a6:	fce69ce3          	bne	a3,a4,800217e <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80021aa:	0017c503          	lbu	a0,1(a5)
 80021ae:	c62e                	sw	a1,12(sp)
 80021b0:	00002097          	auipc	ra,0x2
 80021b4:	9e0080e7          	jalr	-1568(ra) # 8003b90 <disk_status>
 80021b8:	8905                	andi	a0,a0,1
 80021ba:	45b2                	lw	a1,12(sp)
 80021bc:	f169                	bnez	a0,800217e <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80021be:	401c                	lw	a5,0(s0)
 80021c0:	b7c9                	j	8002182 <validate+0xe>

080021c2 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 80021c2:	4781                	li	a5,0
			*d++ = *s++;
 80021c4:	00f58733          	add	a4,a1,a5
 80021c8:	00074683          	lbu	a3,0(a4)
 80021cc:	00f50733          	add	a4,a0,a5
 80021d0:	0785                	addi	a5,a5,1
 80021d2:	00d70023          	sb	a3,0(a4)
		} while (--cnt);
 80021d6:	fef617e3          	bne	a2,a5,80021c4 <mem_cpy.part.0+0x2>
}
 80021da:	8082                	ret

080021dc <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80021dc:	01b5c783          	lbu	a5,27(a1)
 80021e0:	01a5c703          	lbu	a4,26(a1)
 80021e4:	07a2                	slli	a5,a5,0x8
	cl = ld_word(dir + DIR_FstClusLO);
 80021e6:	8fd9                	or	a5,a5,a4
	if (fs->fs_type == FS_FAT32) {
 80021e8:	470d                	li	a4,3
 80021ea:	00e51a63          	bne	a0,a4,80021fe <ld_clust.isra.1+0x22>
	rv = rv << 8 | ptr[0];
 80021ee:	0155c703          	lbu	a4,21(a1)
 80021f2:	0145c683          	lbu	a3,20(a1)
 80021f6:	0722                	slli	a4,a4,0x8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80021f8:	8f55                	or	a4,a4,a3
 80021fa:	0742                	slli	a4,a4,0x10
 80021fc:	8fd9                	or	a5,a5,a4
}
 80021fe:	853e                	mv	a0,a5
 8002200:	8082                	ret

08002202 <sync_window.part.3>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002202:	1141                	addi	sp,sp,-16
 8002204:	c422                	sw	s0,8(sp)
 8002206:	c226                	sw	s1,4(sp)
 8002208:	c04a                	sw	s2,0(sp)
 800220a:	c606                	sw	ra,12(sp)
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800220c:	03050913          	addi	s2,a0,48
 8002210:	5550                	lw	a2,44(a0)
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002212:	842a                	mv	s0,a0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002214:	00154503          	lbu	a0,1(a0)
 8002218:	4685                	li	a3,1
 800221a:	85ca                	mv	a1,s2
 800221c:	00002097          	auipc	ra,0x2
 8002220:	a2a080e7          	jalr	-1494(ra) # 8003c46 <disk_write>
			res = FR_DISK_ERR;
 8002224:	4485                	li	s1,1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002226:	e90d                	bnez	a0,8002258 <sync_window.part.3+0x56>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002228:	5450                	lw	a2,44(s0)
 800222a:	501c                	lw	a5,32(s0)
 800222c:	4c18                	lw	a4,24(s0)
			fs->wflag = 0;	/* Clear window dirty flag */
 800222e:	000401a3          	sb	zero,3(s0)
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002232:	40f607b3          	sub	a5,a2,a5
 8002236:	84aa                	mv	s1,a0
 8002238:	02e7f063          	bgeu	a5,a4,8002258 <sync_window.part.3+0x56>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800223c:	00244683          	lbu	a3,2(s0)
 8002240:	4789                	li	a5,2
 8002242:	00f69b63          	bne	a3,a5,8002258 <sync_window.part.3+0x56>
 8002246:	00144503          	lbu	a0,1(s0)
 800224a:	4685                	li	a3,1
 800224c:	963a                	add	a2,a2,a4
 800224e:	85ca                	mv	a1,s2
 8002250:	00002097          	auipc	ra,0x2
 8002254:	9f6080e7          	jalr	-1546(ra) # 8003c46 <disk_write>
}
 8002258:	40b2                	lw	ra,12(sp)
 800225a:	4422                	lw	s0,8(sp)
 800225c:	8526                	mv	a0,s1
 800225e:	4902                	lw	s2,0(sp)
 8002260:	4492                	lw	s1,4(sp)
 8002262:	0141                	addi	sp,sp,16
 8002264:	8082                	ret

08002266 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002266:	555c                	lw	a5,44(a0)
 8002268:	04b78463          	beq	a5,a1,80022b0 <move_window+0x4a>
{
 800226c:	1141                	addi	sp,sp,-16
 800226e:	c422                	sw	s0,8(sp)
 8002270:	c226                	sw	s1,4(sp)
 8002272:	c606                	sw	ra,12(sp)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002274:	00354783          	lbu	a5,3(a0)
 8002278:	842a                	mv	s0,a0
 800227a:	84ae                	mv	s1,a1
 800227c:	e385                	bnez	a5,800229c <move_window+0x36>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800227e:	00144503          	lbu	a0,1(s0)
 8002282:	4685                	li	a3,1
 8002284:	8626                	mv	a2,s1
 8002286:	03040593          	addi	a1,s0,48
 800228a:	00002097          	auipc	ra,0x2
 800228e:	91a080e7          	jalr	-1766(ra) # 8003ba4 <disk_read>
 8002292:	c119                	beqz	a0,8002298 <move_window+0x32>
				res = FR_DISK_ERR;
 8002294:	4505                	li	a0,1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8002296:	54fd                	li	s1,-1
			fs->winsect = sector;
 8002298:	d444                	sw	s1,44(s0)
	return res;
 800229a:	a031                	j	80022a6 <move_window+0x40>
 800229c:	00000097          	auipc	ra,0x0
 80022a0:	f66080e7          	jalr	-154(ra) # 8002202 <sync_window.part.3>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80022a4:	dd69                	beqz	a0,800227e <move_window+0x18>
}
 80022a6:	40b2                	lw	ra,12(sp)
 80022a8:	4422                	lw	s0,8(sp)
 80022aa:	4492                	lw	s1,4(sp)
 80022ac:	0141                	addi	sp,sp,16
 80022ae:	8082                	ret
	FRESULT res = FR_OK;
 80022b0:	4501                	li	a0,0
}
 80022b2:	8082                	ret

080022b4 <check_fs>:
{
 80022b4:	1141                	addi	sp,sp,-16
 80022b6:	c422                	sw	s0,8(sp)
 80022b8:	c606                	sw	ra,12(sp)
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80022ba:	57fd                	li	a5,-1
 80022bc:	d55c                	sw	a5,44(a0)
 80022be:	000501a3          	sb	zero,3(a0)
{
 80022c2:	842a                	mv	s0,a0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80022c4:	00000097          	auipc	ra,0x0
 80022c8:	fa2080e7          	jalr	-94(ra) # 8002266 <move_window>
 80022cc:	4791                	li	a5,4
 80022ce:	e53d                	bnez	a0,800233c <check_fs+0x88>
	rv = rv << 8 | ptr[0];
 80022d0:	22f44703          	lbu	a4,559(s0)
 80022d4:	22e44783          	lbu	a5,558(s0)
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80022d8:	76ed                	lui	a3,0xffffb
	rv = rv << 8 | ptr[0];
 80022da:	0722                	slli	a4,a4,0x8
 80022dc:	8f5d                	or	a4,a4,a5
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80022de:	0742                	slli	a4,a4,0x10
 80022e0:	8741                	srai	a4,a4,0x10
 80022e2:	a5568693          	addi	a3,a3,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80022e6:	478d                	li	a5,3
 80022e8:	04d71a63          	bne	a4,a3,800233c <check_fs+0x88>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80022ec:	03044783          	lbu	a5,48(s0)
 80022f0:	0eb00713          	li	a4,235
 80022f4:	00e78963          	beq	a5,a4,8002306 <check_fs+0x52>
 80022f8:	07e1                	addi	a5,a5,24
 80022fa:	0ff7f713          	andi	a4,a5,255
 80022fe:	4685                	li	a3,1
	return 2;	/* Valid BS but not FAT */
 8002300:	4789                	li	a5,2
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002302:	02e6ed63          	bltu	a3,a4,800233c <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002306:	080005b7          	lui	a1,0x8000
 800230a:	460d                	li	a2,3
 800230c:	2c458593          	addi	a1,a1,708 # 80002c4 <enable_mcycle_minstret+0x78>
 8002310:	06640513          	addi	a0,s0,102
 8002314:	00000097          	auipc	ra,0x0
 8002318:	dec080e7          	jalr	-532(ra) # 8002100 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800231c:	4781                	li	a5,0
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800231e:	cd19                	beqz	a0,800233c <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002320:	080005b7          	lui	a1,0x8000
 8002324:	4615                	li	a2,5
 8002326:	2c858593          	addi	a1,a1,712 # 80002c8 <enable_mcycle_minstret+0x7c>
 800232a:	08240513          	addi	a0,s0,130
 800232e:	00000097          	auipc	ra,0x0
 8002332:	dd2080e7          	jalr	-558(ra) # 8002100 <mem_cmp>
 8002336:	00a037b3          	snez	a5,a0
 800233a:	0786                	slli	a5,a5,0x1
}
 800233c:	40b2                	lw	ra,12(sp)
 800233e:	4422                	lw	s0,8(sp)
 8002340:	853e                	mv	a0,a5
 8002342:	0141                	addi	sp,sp,16
 8002344:	8082                	ret

08002346 <find_volume>:
{
 8002346:	7139                	addi	sp,sp,-64
 8002348:	d84a                	sw	s2,48(sp)
 800234a:	de06                	sw	ra,60(sp)
 800234c:	dc22                	sw	s0,56(sp)
 800234e:	da26                	sw	s1,52(sp)
 8002350:	d64e                	sw	s3,44(sp)
 8002352:	d452                	sw	s4,40(sp)
 8002354:	d256                	sw	s5,36(sp)
 8002356:	d05a                	sw	s6,32(sp)
	*rfs = 0;
 8002358:	0005a023          	sw	zero,0(a1)
{
 800235c:	8932                	mv	s2,a2
	*rfs = 0;
 800235e:	c62e                	sw	a1,12(sp)
	vol = get_ldnumber(path);
 8002360:	00000097          	auipc	ra,0x0
 8002364:	dd6080e7          	jalr	-554(ra) # 8002136 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002368:	47ad                	li	a5,11
 800236a:	04054263          	bltz	a0,80023ae <find_volume+0x68>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800236e:	20000737          	lui	a4,0x20000
 8002372:	00251793          	slli	a5,a0,0x2
 8002376:	51070713          	addi	a4,a4,1296 # 20000510 <FatFs>
 800237a:	97ba                	add	a5,a5,a4
 800237c:	4380                	lw	s0,0(a5)
 800237e:	84aa                	mv	s1,a0
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002380:	47b1                	li	a5,12
 8002382:	c415                	beqz	s0,80023ae <find_volume+0x68>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002384:	45b2                	lw	a1,12(sp)
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002386:	0fe97913          	andi	s2,s2,254
	*rfs = fs;							/* Return pointer to the filesystem object */
 800238a:	c180                	sw	s0,0(a1)
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800238c:	00044783          	lbu	a5,0(s0)
 8002390:	cb95                	beqz	a5,80023c4 <find_volume+0x7e>
		stat = disk_status(fs->pdrv);
 8002392:	00144503          	lbu	a0,1(s0)
 8002396:	00001097          	auipc	ra,0x1
 800239a:	7fa080e7          	jalr	2042(ra) # 8003b90 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800239e:	00157793          	andi	a5,a0,1
 80023a2:	e38d                	bnez	a5,80023c4 <find_volume+0x7e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80023a4:	00090563          	beqz	s2,80023ae <find_volume+0x68>
 80023a8:	8911                	andi	a0,a0,4
 80023aa:	c111                	beqz	a0,80023ae <find_volume+0x68>
				return FR_WRITE_PROTECTED;
 80023ac:	47a9                	li	a5,10
}
 80023ae:	50f2                	lw	ra,60(sp)
 80023b0:	5462                	lw	s0,56(sp)
 80023b2:	54d2                	lw	s1,52(sp)
 80023b4:	5942                	lw	s2,48(sp)
 80023b6:	59b2                	lw	s3,44(sp)
 80023b8:	5a22                	lw	s4,40(sp)
 80023ba:	5a92                	lw	s5,36(sp)
 80023bc:	5b02                	lw	s6,32(sp)
 80023be:	853e                	mv	a0,a5
 80023c0:	6121                	addi	sp,sp,64
 80023c2:	8082                	ret
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80023c4:	0ff4f513          	andi	a0,s1,255
	fs->fs_type = 0;					/* Clear the filesystem object */
 80023c8:	00040023          	sb	zero,0(s0)
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80023cc:	00a400a3          	sb	a0,1(s0)
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80023d0:	00001097          	auipc	ra,0x1
 80023d4:	544080e7          	jalr	1348(ra) # 8003914 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80023d8:	00157713          	andi	a4,a0,1
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80023dc:	478d                	li	a5,3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80023de:	fb61                	bnez	a4,80023ae <find_volume+0x68>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80023e0:	00090463          	beqz	s2,80023e8 <find_volume+0xa2>
 80023e4:	8911                	andi	a0,a0,4
 80023e6:	f179                	bnez	a0,80023ac <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80023e8:	4581                	li	a1,0
 80023ea:	8522                	mv	a0,s0
 80023ec:	00000097          	auipc	ra,0x0
 80023f0:	ec8080e7          	jalr	-312(ra) # 80022b4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80023f4:	4789                	li	a5,2
 80023f6:	04f51f63          	bne	a0,a5,8002454 <find_volume+0x10e>
 80023fa:	0804                	addi	s1,sp,16
 80023fc:	1f640913          	addi	s2,s0,502
 8002400:	23640a13          	addi	s4,s0,566
 8002404:	89a6                	mv	s3,s1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002406:	ffc94783          	lbu	a5,-4(s2)
 800240a:	4501                	li	a0,0
 800240c:	c791                	beqz	a5,8002418 <find_volume+0xd2>
 800240e:	854a                	mv	a0,s2
 8002410:	00000097          	auipc	ra,0x0
 8002414:	cb6080e7          	jalr	-842(ra) # 80020c6 <ld_dword>
 8002418:	00a9a023          	sw	a0,0(s3)
 800241c:	0941                	addi	s2,s2,16
 800241e:	0991                	addi	s3,s3,4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002420:	ff2a13e3          	bne	s4,s2,8002406 <find_volume+0xc0>
 8002424:	01048913          	addi	s2,s1,16
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002428:	4985                	li	s3,1
			bsect = br[i];
 800242a:	0004aa03          	lw	s4,0(s1)
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800242e:	450d                	li	a0,3
 8002430:	000a0a63          	beqz	s4,8002444 <find_volume+0xfe>
 8002434:	85d2                	mv	a1,s4
 8002436:	8522                	mv	a0,s0
 8002438:	00000097          	auipc	ra,0x0
 800243c:	e7c080e7          	jalr	-388(ra) # 80022b4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002440:	02a9f363          	bgeu	s3,a0,8002466 <find_volume+0x120>
 8002444:	0491                	addi	s1,s1,4
 8002446:	fe9912e3          	bne	s2,s1,800242a <find_volume+0xe4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800244a:	4711                	li	a4,4
 800244c:	4785                	li	a5,1
 800244e:	00e51a63          	bne	a0,a4,8002462 <find_volume+0x11c>
 8002452:	bfb1                	j	80023ae <find_volume+0x68>
 8002454:	4711                	li	a4,4
 8002456:	4785                	li	a5,1
 8002458:	f4e50be3          	beq	a0,a4,80023ae <find_volume+0x68>
	bsect = 0;
 800245c:	4a01                	li	s4,0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800245e:	00a7f463          	bgeu	a5,a0,8002466 <find_volume+0x120>
 8002462:	47b5                	li	a5,13
 8002464:	b7a9                	j	80023ae <find_volume+0x68>
	rv = rv << 8 | ptr[0];
 8002466:	03c44783          	lbu	a5,60(s0)
 800246a:	03b44703          	lbu	a4,59(s0)
 800246e:	07a2                	slli	a5,a5,0x8
 8002470:	8fd9                	or	a5,a5,a4
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002472:	07c2                	slli	a5,a5,0x10
 8002474:	87c1                	srai	a5,a5,0x10
 8002476:	20000713          	li	a4,512
 800247a:	fee794e3          	bne	a5,a4,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 800247e:	04744983          	lbu	s3,71(s0)
 8002482:	04644783          	lbu	a5,70(s0)
 8002486:	09a2                	slli	s3,s3,0x8
 8002488:	00f9e9b3          	or	s3,s3,a5
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800248c:	00099963          	bnez	s3,800249e <find_volume+0x158>
 8002490:	05440513          	addi	a0,s0,84
 8002494:	00000097          	auipc	ra,0x0
 8002498:	c32080e7          	jalr	-974(ra) # 80020c6 <ld_dword>
 800249c:	89aa                	mv	s3,a0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800249e:	04044483          	lbu	s1,64(s0)
		fs->fsize = fasize;
 80024a2:	01342c23          	sw	s3,24(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80024a6:	4705                	li	a4,1
 80024a8:	fff48793          	addi	a5,s1,-1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80024ac:	00940123          	sb	s1,2(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80024b0:	0ff7f793          	andi	a5,a5,255
 80024b4:	faf767e3          	bltu	a4,a5,8002462 <find_volume+0x11c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80024b8:	03d44903          	lbu	s2,61(s0)
 80024bc:	01091793          	slli	a5,s2,0x10
 80024c0:	83c1                	srli	a5,a5,0x10
 80024c2:	00f41523          	sh	a5,10(s0)
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80024c6:	dfd1                	beqz	a5,8002462 <find_volume+0x11c>
 80024c8:	fff90793          	addi	a5,s2,-1
 80024cc:	0127f7b3          	and	a5,a5,s2
 80024d0:	fbc9                	bnez	a5,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80024d2:	04244783          	lbu	a5,66(s0)
 80024d6:	04144a83          	lbu	s5,65(s0)
 80024da:	07a2                	slli	a5,a5,0x8
 80024dc:	0157e7b3          	or	a5,a5,s5
 80024e0:	01079a93          	slli	s5,a5,0x10
 80024e4:	410ada93          	srai	s5,s5,0x10
 80024e8:	010a9b13          	slli	s6,s5,0x10
 80024ec:	010b5b13          	srli	s6,s6,0x10
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80024f0:	01641423          	sh	s6,8(s0)
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80024f4:	00fb7793          	andi	a5,s6,15
 80024f8:	f7ad                	bnez	a5,8002462 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80024fa:	04444503          	lbu	a0,68(s0)
 80024fe:	04344783          	lbu	a5,67(s0)
 8002502:	0522                	slli	a0,a0,0x8
 8002504:	8d5d                	or	a0,a0,a5
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002506:	e519                	bnez	a0,8002514 <find_volume+0x1ce>
 8002508:	05040513          	addi	a0,s0,80
 800250c:	00000097          	auipc	ra,0x0
 8002510:	bba080e7          	jalr	-1094(ra) # 80020c6 <ld_dword>
	rv = rv << 8 | ptr[0];
 8002514:	03f44783          	lbu	a5,63(s0)
 8002518:	03e44703          	lbu	a4,62(s0)
 800251c:	07a2                	slli	a5,a5,0x8
 800251e:	8fd9                	or	a5,a5,a4
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002520:	d3a9                	beqz	a5,8002462 <find_volume+0x11c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002522:	033486b3          	mul	a3,s1,s3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002526:	004b5713          	srli	a4,s6,0x4
 800252a:	973e                	add	a4,a4,a5
 800252c:	9736                	add	a4,a4,a3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800252e:	f2e56ae3          	bltu	a0,a4,8002462 <find_volume+0x11c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002532:	8d19                	sub	a0,a0,a4
 8002534:	032554b3          	divu	s1,a0,s2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002538:	f32565e3          	bltu	a0,s2,8002462 <find_volume+0x11c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800253c:	10000637          	lui	a2,0x10000
 8002540:	1655                	addi	a2,a2,-11
 8002542:	f29660e3          	bltu	a2,s1,8002462 <find_volume+0x11c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002546:	6641                	lui	a2,0x10
 8002548:	1655                	addi	a2,a2,-11
 800254a:	12967963          	bgeu	a2,s1,800267c <find_volume+0x336>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800254e:	490d                	li	s2,3
		fs->database = bsect + sysect;					/* Data start sector */
 8002550:	9752                	add	a4,a4,s4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002552:	0489                	addi	s1,s1,2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002554:	97d2                	add	a5,a5,s4
		fs->database = bsect + sysect;					/* Data start sector */
 8002556:	d418                	sw	a4,40(s0)
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002558:	c844                	sw	s1,20(s0)
		fs->volbase = bsect;							/* Volume start sector */
 800255a:	01442e23          	sw	s4,28(s0)
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800255e:	d01c                	sw	a5,32(s0)
		if (fmt == FS_FAT32) {
 8002560:	470d                	li	a4,3
 8002562:	0ee91e63          	bne	s2,a4,800265e <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 8002566:	05b44783          	lbu	a5,91(s0)
 800256a:	05a44703          	lbu	a4,90(s0)
 800256e:	07a2                	slli	a5,a5,0x8
 8002570:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002572:	00fae7b3          	or	a5,s5,a5
 8002576:	07c2                	slli	a5,a5,0x10
 8002578:	87c1                	srai	a5,a5,0x10
 800257a:	ee0794e3          	bnez	a5,8002462 <find_volume+0x11c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800257e:	05c40513          	addi	a0,s0,92
 8002582:	00000097          	auipc	ra,0x0
 8002586:	b44080e7          	jalr	-1212(ra) # 80020c6 <ld_dword>
 800258a:	d048                	sw	a0,36(s0)
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800258c:	048a                	slli	s1,s1,0x2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800258e:	1ff48493          	addi	s1,s1,511
 8002592:	80a5                	srli	s1,s1,0x9
 8002594:	ec99e7e3          	bltu	s3,s1,8002462 <find_volume+0x11c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002598:	57fd                	li	a5,-1
 800259a:	c81c                	sw	a5,16(s0)
 800259c:	c45c                	sw	a5,12(s0)
		fs->fsi_flag = 0x80;
 800259e:	f8000793          	li	a5,-128
 80025a2:	00f40223          	sb	a5,4(s0)
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80025a6:	478d                	li	a5,3
 80025a8:	08f91a63          	bne	s2,a5,800263c <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80025ac:	06144783          	lbu	a5,97(s0)
 80025b0:	06044703          	lbu	a4,96(s0)
 80025b4:	07a2                	slli	a5,a5,0x8
 80025b6:	8fd9                	or	a5,a5,a4
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80025b8:	07c2                	slli	a5,a5,0x10
 80025ba:	87c1                	srai	a5,a5,0x10
 80025bc:	4705                	li	a4,1
 80025be:	06e79f63          	bne	a5,a4,800263c <find_volume+0x2f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80025c2:	001a0593          	addi	a1,s4,1
 80025c6:	8522                	mv	a0,s0
 80025c8:	00000097          	auipc	ra,0x0
 80025cc:	c9e080e7          	jalr	-866(ra) # 8002266 <move_window>
 80025d0:	e535                	bnez	a0,800263c <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80025d2:	22f44783          	lbu	a5,559(s0)
 80025d6:	22e44703          	lbu	a4,558(s0)
			fs->fsi_flag = 0;
 80025da:	00040223          	sb	zero,4(s0)
	rv = rv << 8 | ptr[0];
 80025de:	07a2                	slli	a5,a5,0x8
 80025e0:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80025e2:	07c2                	slli	a5,a5,0x10
 80025e4:	776d                	lui	a4,0xffffb
 80025e6:	87c1                	srai	a5,a5,0x10
 80025e8:	a5570713          	addi	a4,a4,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80025ec:	04e79863          	bne	a5,a4,800263c <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80025f0:	03040513          	addi	a0,s0,48
 80025f4:	00000097          	auipc	ra,0x0
 80025f8:	ad2080e7          	jalr	-1326(ra) # 80020c6 <ld_dword>
 80025fc:	416157b7          	lui	a5,0x41615
 8002600:	25278793          	addi	a5,a5,594 # 41615252 <_sp+0x2160d252>
 8002604:	02f51c63          	bne	a0,a5,800263c <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002608:	21440513          	addi	a0,s0,532
 800260c:	00000097          	auipc	ra,0x0
 8002610:	aba080e7          	jalr	-1350(ra) # 80020c6 <ld_dword>
 8002614:	614177b7          	lui	a5,0x61417
 8002618:	27278793          	addi	a5,a5,626 # 61417272 <_sp+0x4140f272>
 800261c:	02f51063          	bne	a0,a5,800263c <find_volume+0x2f6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002620:	21840513          	addi	a0,s0,536
 8002624:	00000097          	auipc	ra,0x0
 8002628:	aa2080e7          	jalr	-1374(ra) # 80020c6 <ld_dword>
 800262c:	c808                	sw	a0,16(s0)
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800262e:	21c40513          	addi	a0,s0,540
 8002632:	00000097          	auipc	ra,0x0
 8002636:	a94080e7          	jalr	-1388(ra) # 80020c6 <ld_dword>
 800263a:	c448                	sw	a0,12(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 800263c:	20000737          	lui	a4,0x20000
 8002640:	51470713          	addi	a4,a4,1300 # 20000514 <Fsid>
 8002644:	00075783          	lhu	a5,0(a4)
	fs->fs_type = fmt;		/* FAT sub-type */
 8002648:	01240023          	sb	s2,0(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 800264c:	0785                	addi	a5,a5,1
 800264e:	07c2                	slli	a5,a5,0x10
 8002650:	83c1                	srli	a5,a5,0x10
 8002652:	00f71023          	sh	a5,0(a4)
 8002656:	00f41323          	sh	a5,6(s0)
	return FR_OK;
 800265a:	4781                	li	a5,0
 800265c:	bb89                	j	80023ae <find_volume+0x68>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800265e:	e00b02e3          	beqz	s6,8002462 <find_volume+0x11c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002662:	97b6                	add	a5,a5,a3
 8002664:	d05c                	sw	a5,36(s0)
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002666:	4789                	li	a5,2
 8002668:	00f91463          	bne	s2,a5,8002670 <find_volume+0x32a>
 800266c:	0486                	slli	s1,s1,0x1
 800266e:	b705                	j	800258e <find_volume+0x248>
 8002670:	02e48733          	mul	a4,s1,a4
 8002674:	8885                	andi	s1,s1,1
 8002676:	8305                	srli	a4,a4,0x1
 8002678:	94ba                	add	s1,s1,a4
 800267a:	bf11                	j	800258e <find_volume+0x248>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800267c:	6905                	lui	s2,0x1
 800267e:	1955                	addi	s2,s2,-11
 8002680:	00993933          	sltu	s2,s2,s1
 8002684:	0905                	addi	s2,s2,1
 8002686:	b5e9                	j	8002550 <find_volume+0x20a>

08002688 <put_fat>:
{
 8002688:	1101                	addi	sp,sp,-32
 800268a:	c64e                	sw	s3,12(sp)
 800268c:	c452                	sw	s4,8(sp)
 800268e:	ce06                	sw	ra,28(sp)
 8002690:	cc22                	sw	s0,24(sp)
 8002692:	ca26                	sw	s1,20(sp)
 8002694:	c84a                	sw	s2,16(sp)
 8002696:	c256                	sw	s5,4(sp)
 8002698:	c05a                	sw	s6,0(sp)
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800269a:	4a05                	li	s4,1
	FRESULT res = FR_INT_ERR;
 800269c:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800269e:	0aba7463          	bgeu	s4,a1,8002746 <put_fat+0xbe>
 80026a2:	495c                	lw	a5,20(a0)
 80026a4:	892a                	mv	s2,a0
	FRESULT res = FR_INT_ERR;
 80026a6:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80026a8:	08f5ff63          	bgeu	a1,a5,8002746 <put_fat+0xbe>
		switch (fs->fs_type) {
 80026ac:	00054783          	lbu	a5,0(a0)
 80026b0:	4709                	li	a4,2
 80026b2:	84b2                	mv	s1,a2
 80026b4:	842e                	mv	s0,a1
 80026b6:	0ae78a63          	beq	a5,a4,800276a <put_fat+0xe2>
 80026ba:	470d                	li	a4,3
 80026bc:	0ee78063          	beq	a5,a4,800279c <put_fat+0x114>
 80026c0:	09479363          	bne	a5,s4,8002746 <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80026c4:	0015da13          	srli	s4,a1,0x1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80026c8:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80026ca:	9a2e                	add	s4,s4,a1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80026cc:	009a5593          	srli	a1,s4,0x9
 80026d0:	95be                	add	a1,a1,a5
 80026d2:	00000097          	auipc	ra,0x0
 80026d6:	b94080e7          	jalr	-1132(ra) # 8002266 <move_window>
 80026da:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80026dc:	e52d                	bnez	a0,8002746 <put_fat+0xbe>
			p = fs->win + bc++ % SS(fs);
 80026de:	03090a93          	addi	s5,s2,48 # 1030 <__stack_size+0x30>
 80026e2:	001a0b13          	addi	s6,s4,1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80026e6:	8805                	andi	s0,s0,1
			p = fs->win + bc++ % SS(fs);
 80026e8:	1ffa7a13          	andi	s4,s4,511
 80026ec:	9a56                	add	s4,s4,s5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80026ee:	0ff4f793          	andi	a5,s1,255
 80026f2:	cc09                	beqz	s0,800270c <put_fat+0x84>
 80026f4:	000a4783          	lbu	a5,0(s4)
 80026f8:	6685                	lui	a3,0x1
 80026fa:	16c1                	addi	a3,a3,-16
 80026fc:	00f7f713          	andi	a4,a5,15
 8002700:	00449793          	slli	a5,s1,0x4
 8002704:	8ff5                	and	a5,a5,a3
 8002706:	8fd9                	or	a5,a5,a4
 8002708:	0ff7f793          	andi	a5,a5,255
 800270c:	00fa0023          	sb	a5,0(s4)
			fs->wflag = 1;
 8002710:	4785                	li	a5,1
 8002712:	00f901a3          	sb	a5,3(s2)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002716:	02092783          	lw	a5,32(s2)
 800271a:	009b5593          	srli	a1,s6,0x9
 800271e:	854a                	mv	a0,s2
 8002720:	95be                	add	a1,a1,a5
 8002722:	00000097          	auipc	ra,0x0
 8002726:	b44080e7          	jalr	-1212(ra) # 8002266 <move_window>
 800272a:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800272c:	ed09                	bnez	a0,8002746 <put_fat+0xbe>
			p = fs->win + bc % SS(fs);
 800272e:	1ffb7b13          	andi	s6,s6,511
 8002732:	9ada                	add	s5,s5,s6
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002734:	c405                	beqz	s0,800275c <put_fat+0xd4>
 8002736:	8091                	srli	s1,s1,0x4
 8002738:	0ff4f493          	andi	s1,s1,255
 800273c:	009a8023          	sb	s1,0(s5)
			fs->wflag = 1;
 8002740:	4785                	li	a5,1
 8002742:	00f901a3          	sb	a5,3(s2)
}
 8002746:	40f2                	lw	ra,28(sp)
 8002748:	4462                	lw	s0,24(sp)
 800274a:	854e                	mv	a0,s3
 800274c:	44d2                	lw	s1,20(sp)
 800274e:	4942                	lw	s2,16(sp)
 8002750:	49b2                	lw	s3,12(sp)
 8002752:	4a22                	lw	s4,8(sp)
 8002754:	4a92                	lw	s5,4(sp)
 8002756:	4b02                	lw	s6,0(sp)
 8002758:	6105                	addi	sp,sp,32
 800275a:	8082                	ret
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800275c:	000ac783          	lbu	a5,0(s5)
 8002760:	80a1                	srli	s1,s1,0x8
 8002762:	88bd                	andi	s1,s1,15
 8002764:	9bc1                	andi	a5,a5,-16
 8002766:	8cdd                	or	s1,s1,a5
 8002768:	bfd1                	j	800273c <put_fat+0xb4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800276a:	511c                	lw	a5,32(a0)
 800276c:	81a1                	srli	a1,a1,0x8
 800276e:	95be                	add	a1,a1,a5
 8002770:	00000097          	auipc	ra,0x0
 8002774:	af6080e7          	jalr	-1290(ra) # 8002266 <move_window>
 8002778:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800277a:	f571                	bnez	a0,8002746 <put_fat+0xbe>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800277c:	0406                	slli	s0,s0,0x1
 800277e:	03090793          	addi	a5,s2,48
 8002782:	1fe47413          	andi	s0,s0,510
 8002786:	943e                	add	s0,s0,a5
	*ptr++ = (BYTE)val; val >>= 8;
 8002788:	00940023          	sb	s1,0(s0)
 800278c:	04c2                	slli	s1,s1,0x10
 800278e:	80c1                	srli	s1,s1,0x10
 8002790:	80a1                	srli	s1,s1,0x8
	*ptr++ = (BYTE)val;
 8002792:	009400a3          	sb	s1,1(s0)
			fs->wflag = 1;
 8002796:	014901a3          	sb	s4,3(s2)
			break;
 800279a:	b775                	j	8002746 <put_fat+0xbe>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800279c:	511c                	lw	a5,32(a0)
 800279e:	819d                	srli	a1,a1,0x7
 80027a0:	95be                	add	a1,a1,a5
 80027a2:	00000097          	auipc	ra,0x0
 80027a6:	ac4080e7          	jalr	-1340(ra) # 8002266 <move_window>
 80027aa:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80027ac:	fd49                	bnez	a0,8002746 <put_fat+0xbe>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80027ae:	040a                	slli	s0,s0,0x2
 80027b0:	03090793          	addi	a5,s2,48
 80027b4:	1fc47413          	andi	s0,s0,508
 80027b8:	943e                	add	s0,s0,a5
 80027ba:	8522                	mv	a0,s0
 80027bc:	00000097          	auipc	ra,0x0
 80027c0:	90a080e7          	jalr	-1782(ra) # 80020c6 <ld_dword>
 80027c4:	0492                	slli	s1,s1,0x4
 80027c6:	f00005b7          	lui	a1,0xf0000
 80027ca:	8091                	srli	s1,s1,0x4
 80027cc:	8de9                	and	a1,a1,a0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80027ce:	8dc5                	or	a1,a1,s1
 80027d0:	8522                	mv	a0,s0
 80027d2:	00000097          	auipc	ra,0x0
 80027d6:	912080e7          	jalr	-1774(ra) # 80020e4 <st_dword>
 80027da:	bf75                	j	8002796 <put_fat+0x10e>

080027dc <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80027dc:	4785                	li	a5,1
 80027de:	0eb7f763          	bgeu	a5,a1,80028cc <get_fat.isra.7+0xf0>
 80027e2:	4958                	lw	a4,20(a0)
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80027e4:	1101                	addi	sp,sp,-32
 80027e6:	cc22                	sw	s0,24(sp)
 80027e8:	ce06                	sw	ra,28(sp)
 80027ea:	ca26                	sw	s1,20(sp)
 80027ec:	c84a                	sw	s2,16(sp)
 80027ee:	c64e                	sw	s3,12(sp)
 80027f0:	842a                	mv	s0,a0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80027f2:	02e5fa63          	bgeu	a1,a4,8002826 <get_fat.isra.7+0x4a>
		switch (fs->fs_type) {
 80027f6:	00054703          	lbu	a4,0(a0)
 80027fa:	4689                	li	a3,2
 80027fc:	84ae                	mv	s1,a1
 80027fe:	06d70c63          	beq	a4,a3,8002876 <get_fat.isra.7+0x9a>
 8002802:	468d                	li	a3,3
 8002804:	08d70e63          	beq	a4,a3,80028a0 <get_fat.isra.7+0xc4>
 8002808:	00f71f63          	bne	a4,a5,8002826 <get_fat.isra.7+0x4a>
			bc = (UINT)clst; bc += bc / 2;
 800280c:	0015d913          	srli	s2,a1,0x1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002810:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;
 8002812:	992e                	add	s2,s2,a1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002814:	00995593          	srli	a1,s2,0x9
 8002818:	95be                	add	a1,a1,a5
 800281a:	00000097          	auipc	ra,0x0
 800281e:	a4c080e7          	jalr	-1460(ra) # 8002266 <move_window>
 8002822:	c911                	beqz	a0,8002836 <get_fat.isra.7+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002824:	57fd                	li	a5,-1
}
 8002826:	40f2                	lw	ra,28(sp)
 8002828:	4462                	lw	s0,24(sp)
 800282a:	44d2                	lw	s1,20(sp)
 800282c:	4942                	lw	s2,16(sp)
 800282e:	49b2                	lw	s3,12(sp)
 8002830:	853e                	mv	a0,a5
 8002832:	6105                	addi	sp,sp,32
 8002834:	8082                	ret
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002836:	501c                	lw	a5,32(s0)
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002838:	00190993          	addi	s3,s2,1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800283c:	0099d593          	srli	a1,s3,0x9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002840:	1ff97913          	andi	s2,s2,511
 8002844:	9922                	add	s2,s2,s0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002846:	95be                	add	a1,a1,a5
 8002848:	8522                	mv	a0,s0
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800284a:	03094903          	lbu	s2,48(s2)
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800284e:	00000097          	auipc	ra,0x0
 8002852:	a18080e7          	jalr	-1512(ra) # 8002266 <move_window>
 8002856:	f579                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002858:	1ff9f993          	andi	s3,s3,511
 800285c:	944e                	add	s0,s0,s3
 800285e:	03044783          	lbu	a5,48(s0)
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002862:	8885                	andi	s1,s1,1
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002864:	07a2                	slli	a5,a5,0x8
 8002866:	0127e7b3          	or	a5,a5,s2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800286a:	c099                	beqz	s1,8002870 <get_fat.isra.7+0x94>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800286c:	8391                	srli	a5,a5,0x4
			break;
 800286e:	bf65                	j	8002826 <get_fat.isra.7+0x4a>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002870:	07d2                	slli	a5,a5,0x14
 8002872:	83d1                	srli	a5,a5,0x14
 8002874:	bf4d                	j	8002826 <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002876:	511c                	lw	a5,32(a0)
 8002878:	81a1                	srli	a1,a1,0x8
 800287a:	95be                	add	a1,a1,a5
 800287c:	00000097          	auipc	ra,0x0
 8002880:	9ea080e7          	jalr	-1558(ra) # 8002266 <move_window>
 8002884:	f145                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002886:	0486                	slli	s1,s1,0x1
 8002888:	03040413          	addi	s0,s0,48
 800288c:	1fe4f493          	andi	s1,s1,510
 8002890:	9426                	add	s0,s0,s1
	rv = rv << 8 | ptr[0];
 8002892:	00144783          	lbu	a5,1(s0)
 8002896:	00044703          	lbu	a4,0(s0)
 800289a:	07a2                	slli	a5,a5,0x8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800289c:	8fd9                	or	a5,a5,a4
			break;
 800289e:	b761                	j	8002826 <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80028a0:	511c                	lw	a5,32(a0)
 80028a2:	819d                	srli	a1,a1,0x7
 80028a4:	95be                	add	a1,a1,a5
 80028a6:	00000097          	auipc	ra,0x0
 80028aa:	9c0080e7          	jalr	-1600(ra) # 8002266 <move_window>
 80028ae:	f93d                	bnez	a0,8002824 <get_fat.isra.7+0x48>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80028b0:	00249513          	slli	a0,s1,0x2
 80028b4:	03040413          	addi	s0,s0,48
 80028b8:	1fc57513          	andi	a0,a0,508
 80028bc:	9522                	add	a0,a0,s0
 80028be:	00000097          	auipc	ra,0x0
 80028c2:	808080e7          	jalr	-2040(ra) # 80020c6 <ld_dword>
 80028c6:	00451793          	slli	a5,a0,0x4
 80028ca:	b74d                	j	800286c <get_fat.isra.7+0x90>
		val = 1;	/* Internal error */
 80028cc:	4785                	li	a5,1
}
 80028ce:	853e                	mv	a0,a5
 80028d0:	8082                	ret

080028d2 <create_chain>:
{
 80028d2:	1101                	addi	sp,sp,-32
 80028d4:	ca26                	sw	s1,20(sp)
 80028d6:	c64e                	sw	s3,12(sp)
 80028d8:	c452                	sw	s4,8(sp)
 80028da:	ce06                	sw	ra,28(sp)
 80028dc:	cc22                	sw	s0,24(sp)
 80028de:	c84a                	sw	s2,16(sp)
 80028e0:	c256                	sw	s5,4(sp)
 80028e2:	c05a                	sw	s6,0(sp)
 80028e4:	8a2a                	mv	s4,a0
 80028e6:	89ae                	mv	s3,a1
	FATFS *fs = obj->fs;
 80028e8:	4104                	lw	s1,0(a0)
	if (clst == 0) {	/* Create a new chain */
 80028ea:	e991                	bnez	a1,80028fe <create_chain+0x2c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80028ec:	00c4a903          	lw	s2,12(s1)
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80028f0:	00090563          	beqz	s2,80028fa <create_chain+0x28>
 80028f4:	48dc                	lw	a5,20(s1)
 80028f6:	04f96063          	bltu	s2,a5,8002936 <create_chain+0x64>
 80028fa:	4905                	li	s2,1
 80028fc:	a82d                	j	8002936 <create_chain+0x64>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80028fe:	8526                	mv	a0,s1
 8002900:	00000097          	auipc	ra,0x0
 8002904:	edc080e7          	jalr	-292(ra) # 80027dc <get_fat.isra.7>
		if (cs < 2) return 1;				/* Test for insanity */
 8002908:	4785                	li	a5,1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800290a:	842a                	mv	s0,a0
		if (cs < 2) return 1;				/* Test for insanity */
 800290c:	00a7ee63          	bltu	a5,a0,8002928 <create_chain+0x56>
 8002910:	4405                	li	s0,1
}
 8002912:	8522                	mv	a0,s0
 8002914:	40f2                	lw	ra,28(sp)
 8002916:	4462                	lw	s0,24(sp)
 8002918:	44d2                	lw	s1,20(sp)
 800291a:	4942                	lw	s2,16(sp)
 800291c:	49b2                	lw	s3,12(sp)
 800291e:	4a22                	lw	s4,8(sp)
 8002920:	4a92                	lw	s5,4(sp)
 8002922:	4b02                	lw	s6,0(sp)
 8002924:	6105                	addi	sp,sp,32
 8002926:	8082                	ret
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002928:	57fd                	li	a5,-1
 800292a:	0cf50363          	beq	a0,a5,80029f0 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800292e:	48dc                	lw	a5,20(s1)
 8002930:	894e                	mv	s2,s3
 8002932:	fef560e3          	bltu	a0,a5,8002912 <create_chain+0x40>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002936:	489c                	lw	a5,16(s1)
 8002938:	e399                	bnez	a5,800293e <create_chain+0x6c>
 800293a:	4401                	li	s0,0
 800293c:	bfd9                	j	8002912 <create_chain+0x40>
		if (scl == clst) {						/* Stretching an existing chain? */
 800293e:	03391d63          	bne	s2,s3,8002978 <create_chain+0xa6>
			if (ncl >= fs->n_fatent) ncl = 2;
 8002942:	48dc                	lw	a5,20(s1)
 8002944:	00190413          	addi	s0,s2,1
 8002948:	00f46363          	bltu	s0,a5,800294e <create_chain+0x7c>
 800294c:	4409                	li	s0,2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800294e:	000a2503          	lw	a0,0(s4)
 8002952:	85a2                	mv	a1,s0
 8002954:	00000097          	auipc	ra,0x0
 8002958:	e88080e7          	jalr	-376(ra) # 80027dc <get_fat.isra.7>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800295c:	4705                	li	a4,1
 800295e:	fae509e3          	beq	a0,a4,8002910 <create_chain+0x3e>
 8002962:	57fd                	li	a5,-1
 8002964:	08f50663          	beq	a0,a5,80029f0 <create_chain+0x11e>
			if (cs != 0) {						/* Not free? */
 8002968:	c129                	beqz	a0,80029aa <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800296a:	44dc                	lw	a5,12(s1)
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800296c:	00f77663          	bgeu	a4,a5,8002978 <create_chain+0xa6>
 8002970:	48d8                	lw	a4,20(s1)
 8002972:	00e7f363          	bgeu	a5,a4,8002978 <create_chain+0xa6>
 8002976:	893e                	mv	s2,a5
 8002978:	844a                	mv	s0,s2
					if (ncl > scl) return 0;	/* No free cluster found? */
 800297a:	4a85                	li	s5,1
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800297c:	5b7d                	li	s6,-1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800297e:	48dc                	lw	a5,20(s1)
				ncl++;							/* Next cluster */
 8002980:	0405                	addi	s0,s0,1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002982:	00f46563          	bltu	s0,a5,800298c <create_chain+0xba>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002986:	fb2afae3          	bgeu	s5,s2,800293a <create_chain+0x68>
					ncl = 2;
 800298a:	4409                	li	s0,2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800298c:	000a2503          	lw	a0,0(s4)
 8002990:	85a2                	mv	a1,s0
 8002992:	00000097          	auipc	ra,0x0
 8002996:	e4a080e7          	jalr	-438(ra) # 80027dc <get_fat.isra.7>
				if (cs == 0) break;				/* Found a free cluster? */
 800299a:	c909                	beqz	a0,80029ac <create_chain+0xda>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800299c:	f7550ae3          	beq	a0,s5,8002910 <create_chain+0x3e>
 80029a0:	05650863          	beq	a0,s6,80029f0 <create_chain+0x11e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80029a4:	fd241de3          	bne	s0,s2,800297e <create_chain+0xac>
 80029a8:	bf49                	j	800293a <create_chain+0x68>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80029aa:	d479                	beqz	s0,8002978 <create_chain+0xa6>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80029ac:	567d                	li	a2,-1
 80029ae:	85a2                	mv	a1,s0
 80029b0:	8526                	mv	a0,s1
 80029b2:	00000097          	auipc	ra,0x0
 80029b6:	cd6080e7          	jalr	-810(ra) # 8002688 <put_fat>
		if (res == FR_OK && clst != 0) {
 80029ba:	e905                	bnez	a0,80029ea <create_chain+0x118>
 80029bc:	00099f63          	bnez	s3,80029da <create_chain+0x108>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029c0:	48d8                	lw	a4,20(s1)
 80029c2:	489c                	lw	a5,16(s1)
		fs->last_clst = ncl;
 80029c4:	c4c0                	sw	s0,12(s1)
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029c6:	1779                	addi	a4,a4,-2
 80029c8:	02f77663          	bgeu	a4,a5,80029f4 <create_chain+0x122>
		fs->fsi_flag |= 1;
 80029cc:	0044c783          	lbu	a5,4(s1)
 80029d0:	0017e793          	ori	a5,a5,1
 80029d4:	00f48223          	sb	a5,4(s1)
 80029d8:	bf2d                	j	8002912 <create_chain+0x40>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80029da:	8622                	mv	a2,s0
 80029dc:	85ce                	mv	a1,s3
 80029de:	8526                	mv	a0,s1
 80029e0:	00000097          	auipc	ra,0x0
 80029e4:	ca8080e7          	jalr	-856(ra) # 8002688 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80029e8:	dd61                	beqz	a0,80029c0 <create_chain+0xee>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80029ea:	4785                	li	a5,1
 80029ec:	f2f512e3          	bne	a0,a5,8002910 <create_chain+0x3e>
 80029f0:	547d                	li	s0,-1
 80029f2:	b705                	j	8002912 <create_chain+0x40>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80029f4:	17fd                	addi	a5,a5,-1
 80029f6:	c89c                	sw	a5,16(s1)
 80029f8:	bfd1                	j	80029cc <create_chain+0xfa>

080029fa <dir_next>:
{
 80029fa:	7179                	addi	sp,sp,-48
 80029fc:	cc52                	sw	s4,24(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80029fe:	01052a03          	lw	s4,16(a0)
{
 8002a02:	d422                	sw	s0,40(sp)
 8002a04:	d606                	sw	ra,44(sp)
 8002a06:	d226                	sw	s1,36(sp)
 8002a08:	d04a                	sw	s2,32(sp)
 8002a0a:	ce4e                	sw	s3,28(sp)
 8002a0c:	ca56                	sw	s5,20(sp)
 8002a0e:	c85a                	sw	s6,16(sp)
 8002a10:	c65e                	sw	s7,12(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002a12:	020a0a13          	addi	s4,s4,32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002a16:	002007b7          	lui	a5,0x200
	FATFS *fs = dp->obj.fs;
 8002a1a:	4100                	lw	s0,0(a0)
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002a1c:	00fa6463          	bltu	s4,a5,8002a24 <dir_next+0x2a>
 8002a20:	00052c23          	sw	zero,24(a0)
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002a24:	4d18                	lw	a4,24(a0)
 8002a26:	4791                	li	a5,4
 8002a28:	c705                	beqz	a4,8002a50 <dir_next+0x56>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002a2a:	1ffa7b13          	andi	s6,s4,511
 8002a2e:	8aae                	mv	s5,a1
 8002a30:	84aa                	mv	s1,a0
 8002a32:	0c0b1d63          	bnez	s6,8002b0c <dir_next+0x112>
		if (dp->clust == 0) {	/* Static table */
 8002a36:	494c                	lw	a1,20(a0)
		dp->sect++;				/* Next sector */
 8002a38:	0705                	addi	a4,a4,1
 8002a3a:	cd18                	sw	a4,24(a0)
		if (dp->clust == 0) {	/* Static table */
 8002a3c:	e595                	bnez	a1,8002a68 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002a3e:	00845703          	lhu	a4,8(s0)
 8002a42:	005a5793          	srli	a5,s4,0x5
 8002a46:	0ce7e363          	bltu	a5,a4,8002b0c <dir_next+0x112>
				dp->sect = 0; return FR_NO_FILE;
 8002a4a:	0004ac23          	sw	zero,24(s1)
 8002a4e:	4791                	li	a5,4
}
 8002a50:	50b2                	lw	ra,44(sp)
 8002a52:	5422                	lw	s0,40(sp)
 8002a54:	5492                	lw	s1,36(sp)
 8002a56:	5902                	lw	s2,32(sp)
 8002a58:	49f2                	lw	s3,28(sp)
 8002a5a:	4a62                	lw	s4,24(sp)
 8002a5c:	4ad2                	lw	s5,20(sp)
 8002a5e:	4b42                	lw	s6,16(sp)
 8002a60:	4bb2                	lw	s7,12(sp)
 8002a62:	853e                	mv	a0,a5
 8002a64:	6145                	addi	sp,sp,48
 8002a66:	8082                	ret
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002a68:	00a45983          	lhu	s3,10(s0)
 8002a6c:	009a5793          	srli	a5,s4,0x9
 8002a70:	19fd                	addi	s3,s3,-1
 8002a72:	00f9f9b3          	and	s3,s3,a5
 8002a76:	08099b63          	bnez	s3,8002b0c <dir_next+0x112>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002a7a:	8522                	mv	a0,s0
 8002a7c:	00000097          	auipc	ra,0x0
 8002a80:	d60080e7          	jalr	-672(ra) # 80027dc <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002a84:	4b85                	li	s7,1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002a86:	892a                	mv	s2,a0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002a88:	00abe463          	bltu	s7,a0,8002a90 <dir_next+0x96>
 8002a8c:	4789                	li	a5,2
 8002a8e:	b7c9                	j	8002a50 <dir_next+0x56>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002a90:	57fd                	li	a5,-1
 8002a92:	00f51463          	bne	a0,a5,8002a9a <dir_next+0xa0>
 8002a96:	4785                	li	a5,1
 8002a98:	bf65                	j	8002a50 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002a9a:	485c                	lw	a5,20(s0)
 8002a9c:	04f56f63          	bltu	a0,a5,8002afa <dir_next+0x100>
					if (!stretch) {								/* If no stretch, report EOT */
 8002aa0:	fa0a85e3          	beqz	s5,8002a4a <dir_next+0x50>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002aa4:	48cc                	lw	a1,20(s1)
 8002aa6:	8526                	mv	a0,s1
 8002aa8:	00000097          	auipc	ra,0x0
 8002aac:	e2a080e7          	jalr	-470(ra) # 80028d2 <create_chain>
 8002ab0:	892a                	mv	s2,a0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ab2:	479d                	li	a5,7
 8002ab4:	dd51                	beqz	a0,8002a50 <dir_next+0x56>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002ab6:	fd750be3          	beq	a0,s7,8002a8c <dir_next+0x92>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002aba:	57fd                	li	a5,-1
 8002abc:	fcf50de3          	beq	a0,a5,8002a96 <dir_next+0x9c>
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002ac0:	00344783          	lbu	a5,3(s0)
 8002ac4:	efa1                	bnez	a5,8002b1c <dir_next+0x122>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002ac6:	85ca                	mv	a1,s2
 8002ac8:	8522                	mv	a0,s0
 8002aca:	fffff097          	auipc	ra,0xfffff
 8002ace:	650080e7          	jalr	1616(ra) # 800211a <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002ad2:	03040a93          	addi	s5,s0,48
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002ad6:	8baa                	mv	s7,a0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002ad8:	d448                	sw	a0,44(s0)
	BYTE *d = (BYTE*)dst;
 8002ada:	23040713          	addi	a4,s0,560
 8002ade:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 8002ae0:	0785                	addi	a5,a5,1
 8002ae2:	fe078fa3          	sb	zero,-1(a5) # 1fffff <__stack_size+0x1fefff>
	} while (--cnt);
 8002ae6:	fee79de3          	bne	a5,a4,8002ae0 <dir_next+0xe6>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002aea:	00a45783          	lhu	a5,10(s0)
 8002aee:	02f9ee63          	bltu	s3,a5,8002b2a <dir_next+0x130>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002af2:	00a45783          	lhu	a5,10(s0)
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002af6:	faf990e3          	bne	s3,a5,8002a96 <dir_next+0x9c>
				dp->clust = clst;		/* Initialize data for new cluster */
 8002afa:	0124aa23          	sw	s2,20(s1)
				dp->sect = clst2sect(fs, clst);
 8002afe:	85ca                	mv	a1,s2
 8002b00:	8522                	mv	a0,s0
 8002b02:	fffff097          	auipc	ra,0xfffff
 8002b06:	618080e7          	jalr	1560(ra) # 800211a <clst2sect>
 8002b0a:	cc88                	sw	a0,24(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002b0c:	03040413          	addi	s0,s0,48
 8002b10:	945a                	add	s0,s0,s6
	dp->dptr = ofs;						/* Current entry */
 8002b12:	0144a823          	sw	s4,16(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002b16:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 8002b18:	4781                	li	a5,0
 8002b1a:	bf1d                	j	8002a50 <dir_next+0x56>
 8002b1c:	8522                	mv	a0,s0
 8002b1e:	fffff097          	auipc	ra,0xfffff
 8002b22:	6e4080e7          	jalr	1764(ra) # 8002202 <sync_window.part.3>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002b26:	f925                	bnez	a0,8002a96 <dir_next+0x9c>
 8002b28:	bf79                	j	8002ac6 <dir_next+0xcc>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002b2a:	00144503          	lbu	a0,1(s0)
 8002b2e:	4685                	li	a3,1
 8002b30:	013b8633          	add	a2,s7,s3
 8002b34:	85d6                	mv	a1,s5
 8002b36:	00001097          	auipc	ra,0x1
 8002b3a:	110080e7          	jalr	272(ra) # 8003c46 <disk_write>
 8002b3e:	f955                	bnez	a0,8002af2 <dir_next+0xf8>
 8002b40:	0985                	addi	s3,s3,1
 8002b42:	b765                	j	8002aea <dir_next+0xf0>

08002b44 <dir_sdi.constprop.9>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b44:	1101                	addi	sp,sp,-32
 8002b46:	c84a                	sw	s2,16(sp)
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002b48:	00852903          	lw	s2,8(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b4c:	cc22                	sw	s0,24(sp)
 8002b4e:	ca26                	sw	s1,20(sp)
 8002b50:	ce06                	sw	ra,28(sp)
 8002b52:	c64e                	sw	s3,12(sp)
 8002b54:	c452                	sw	s4,8(sp)
	dp->dptr = ofs;				/* Set current offset */
 8002b56:	00052823          	sw	zero,16(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002b5a:	84aa                	mv	s1,a0
	FATFS *fs = dp->obj.fs;
 8002b5c:	4100                	lw	s0,0(a0)
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002b5e:	04091163          	bnez	s2,8002ba0 <dir_sdi.constprop.9+0x5c>
 8002b62:	00044703          	lbu	a4,0(s0)
 8002b66:	4789                	li	a5,2
 8002b68:	00e7f463          	bgeu	a5,a4,8002b70 <dir_sdi.constprop.9+0x2c>
		clst = fs->dirbase;
 8002b6c:	505c                	lw	a5,36(s0)
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002b6e:	eb85                	bnez	a5,8002b9e <dir_sdi.constprop.9+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002b70:	00845783          	lhu	a5,8(s0)
 8002b74:	eb91                	bnez	a5,8002b88 <dir_sdi.constprop.9+0x44>
 8002b76:	4509                	li	a0,2
}
 8002b78:	40f2                	lw	ra,28(sp)
 8002b7a:	4462                	lw	s0,24(sp)
 8002b7c:	44d2                	lw	s1,20(sp)
 8002b7e:	4942                	lw	s2,16(sp)
 8002b80:	49b2                	lw	s3,12(sp)
 8002b82:	4a22                	lw	s4,8(sp)
 8002b84:	6105                	addi	sp,sp,32
 8002b86:	8082                	ret
		dp->sect = fs->dirbase;
 8002b88:	505c                	lw	a5,36(s0)
 8002b8a:	cc9c                	sw	a5,24(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002b8c:	4c9c                	lw	a5,24(s1)
	dp->clust = clst;					/* Current cluster# */
 8002b8e:	0124aa23          	sw	s2,20(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002b92:	d3f5                	beqz	a5,8002b76 <dir_sdi.constprop.9+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002b94:	03040413          	addi	s0,s0,48
 8002b98:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 8002b9a:	4501                	li	a0,0
 8002b9c:	bff1                	j	8002b78 <dir_sdi.constprop.9+0x34>
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002b9e:	893e                	mv	s2,a5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002ba0:	00a45783          	lhu	a5,10(s0)
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ba4:	59fd                	li	s3,-1
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002ba6:	4a05                	li	s4,1
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ba8:	e385                	bnez	a5,8002bc8 <dir_sdi.constprop.9+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002baa:	4088                	lw	a0,0(s1)
 8002bac:	85ca                	mv	a1,s2
 8002bae:	00000097          	auipc	ra,0x0
 8002bb2:	c2e080e7          	jalr	-978(ra) # 80027dc <get_fat.isra.7>
 8002bb6:	892a                	mv	s2,a0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bb8:	03350063          	beq	a0,s3,8002bd8 <dir_sdi.constprop.9+0x94>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002bbc:	faaa7de3          	bgeu	s4,a0,8002b76 <dir_sdi.constprop.9+0x32>
 8002bc0:	485c                	lw	a5,20(s0)
 8002bc2:	fef564e3          	bltu	a0,a5,8002baa <dir_sdi.constprop.9+0x66>
 8002bc6:	bf45                	j	8002b76 <dir_sdi.constprop.9+0x32>
		dp->sect = clst2sect(fs, clst);
 8002bc8:	85ca                	mv	a1,s2
 8002bca:	8522                	mv	a0,s0
 8002bcc:	fffff097          	auipc	ra,0xfffff
 8002bd0:	54e080e7          	jalr	1358(ra) # 800211a <clst2sect>
 8002bd4:	cc88                	sw	a0,24(s1)
 8002bd6:	bf5d                	j	8002b8c <dir_sdi.constprop.9+0x48>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bd8:	4505                	li	a0,1
 8002bda:	bf79                	j	8002b78 <dir_sdi.constprop.9+0x34>

08002bdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002bdc:	7179                	addi	sp,sp,-48
 8002bde:	c62a                	sw	a0,12(sp)
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002be0:	0868                	addi	a0,sp,28
{
 8002be2:	d606                	sw	ra,44(sp)
 8002be4:	c42e                	sw	a1,8(sp)
 8002be6:	c232                	sw	a2,4(sp)
	const TCHAR *rp = path;
 8002be8:	ce2e                	sw	a1,28(sp)
	vol = get_ldnumber(&rp);
 8002bea:	fffff097          	auipc	ra,0xfffff
 8002bee:	54c080e7          	jalr	1356(ra) # 8002136 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002bf2:	04054163          	bltz	a0,8002c34 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002bf6:	200007b7          	lui	a5,0x20000
 8002bfa:	51078713          	addi	a4,a5,1296 # 20000510 <FatFs>
 8002bfe:	050a                	slli	a0,a0,0x2
 8002c00:	972a                	add	a4,a4,a0
 8002c02:	4318                	lw	a4,0(a4)

	if (cfs) {
 8002c04:	51078793          	addi	a5,a5,1296
 8002c08:	4612                	lw	a2,4(sp)
 8002c0a:	c319                	beqz	a4,8002c10 <f_mount+0x34>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002c0c:	00070023          	sb	zero,0(a4)
	}

	if (fs) {
 8002c10:	4732                	lw	a4,12(sp)
 8002c12:	c319                	beqz	a4,8002c18 <f_mount+0x3c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002c14:	00070023          	sb	zero,0(a4)
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002c18:	97aa                	add	a5,a5,a0
 8002c1a:	c398                	sw	a4,0(a5)

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002c1c:	4501                	li	a0,0
 8002c1e:	ca01                	beqz	a2,8002c2e <f_mount+0x52>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002c20:	4601                	li	a2,0
 8002c22:	006c                	addi	a1,sp,12
 8002c24:	0028                	addi	a0,sp,8
 8002c26:	fffff097          	auipc	ra,0xfffff
 8002c2a:	720080e7          	jalr	1824(ra) # 8002346 <find_volume>
	LEAVE_FF(fs, res);
}
 8002c2e:	50b2                	lw	ra,44(sp)
 8002c30:	6145                	addi	sp,sp,48
 8002c32:	8082                	ret
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c34:	452d                	li	a0,11
 8002c36:	bfe5                	j	8002c2e <f_mount+0x52>

08002c38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002c38:	7119                	addi	sp,sp,-128
 8002c3a:	d4d2                	sw	s4,104(sp)
 8002c3c:	de86                	sw	ra,124(sp)
 8002c3e:	dca2                	sw	s0,120(sp)
 8002c40:	daa6                	sw	s1,116(sp)
 8002c42:	d8ca                	sw	s2,112(sp)
 8002c44:	d6ce                	sw	s3,108(sp)
 8002c46:	d2d6                	sw	s5,100(sp)
 8002c48:	d0da                	sw	s6,96(sp)
 8002c4a:	cede                	sw	s7,92(sp)
 8002c4c:	cce2                	sw	s8,88(sp)
 8002c4e:	cae6                	sw	s9,84(sp)
 8002c50:	c8ea                	sw	s10,80(sp)
 8002c52:	c6ee                	sw	s11,76(sp)
 8002c54:	c62e                	sw	a1,12(sp)
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002c56:	4a25                	li	s4,9
 8002c58:	4a050a63          	beqz	a0,800310c <f_open+0x4d4>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002c5c:	03f67993          	andi	s3,a2,63
 8002c60:	8932                	mv	s2,a2
 8002c62:	84aa                	mv	s1,a0
	res = find_volume(&path, &fs, mode);
 8002c64:	864e                	mv	a2,s3
 8002c66:	080c                	addi	a1,sp,16
 8002c68:	0068                	addi	a0,sp,12
 8002c6a:	fffff097          	auipc	ra,0xfffff
 8002c6e:	6dc080e7          	jalr	1756(ra) # 8002346 <find_volume>
 8002c72:	8a2a                	mv	s4,a0
	if (res == FR_OK) {
 8002c74:	842a                	mv	s0,a0
 8002c76:	30051b63          	bnez	a0,8002f8c <f_open+0x354>
		dj.obj.fs = fs;
 8002c7a:	4ac2                	lw	s5,16(sp)
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002c7c:	4d32                	lw	s10,12(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c7e:	02f00693          	li	a3,47
		dj.obj.fs = fs;
 8002c82:	ca56                	sw	s5,20(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c84:	05c00713          	li	a4,92
 8002c88:	000d4783          	lbu	a5,0(s10)
 8002c8c:	0ed78d63          	beq	a5,a3,8002d86 <f_open+0x14e>
 8002c90:	0ee78b63          	beq	a5,a4,8002d86 <f_open+0x14e>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002c94:	ce02                	sw	zero,28(sp)
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002c96:	000d4703          	lbu	a4,0(s10)
 8002c9a:	47fd                	li	a5,31
 8002c9c:	0ee7f763          	bgeu	a5,a4,8002d8a <f_open+0x152>
 8002ca0:	01f10c13          	addi	s8,sp,31
		*d++ = (BYTE)val;
 8002ca4:	02000b13          	li	s6,32
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002ca8:	02f00b93          	li	s7,47
	if (c >= DbcTbl[0]) {
 8002cac:	08000cb7          	lui	s9,0x8000
	mem_set(sfn, ' ', 11);
 8002cb0:	085c                	addi	a5,sp,20
		*d++ = (BYTE)val;
 8002cb2:	03678023          	sb	s6,32(a5)
 8002cb6:	0785                	addi	a5,a5,1
	} while (--cnt);
 8002cb8:	fefc1de3          	bne	s8,a5,8002cb2 <f_open+0x7a>
	si = i = 0; ni = 8;
 8002cbc:	4701                	li	a4,0
 8002cbe:	4601                	li	a2,0
 8002cc0:	45a1                	li	a1,8
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002cc2:	05c00513          	li	a0,92
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002cc6:	02e00813          	li	a6,46
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002cca:	48ad                	li	a7,11
	if (c >= DbcTbl[0]) {
 8002ccc:	07d00313          	li	t1,125
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002cd0:	4e65                	li	t3,25
	if (c >= DbcTbl[4]) {
 8002cd2:	03f00e93          	li	t4,63
		if (c <= DbcTbl[5]) return 1;
 8002cd6:	07e00f13          	li	t5,126
		c = (BYTE)p[si++];				/* Get a byte */
 8002cda:	00cd07b3          	add	a5,s10,a2
 8002cde:	0007c783          	lbu	a5,0(a5)
 8002ce2:	00160693          	addi	a3,a2,1 # 10001 <__stack_size+0xf001>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002ce6:	02fb7063          	bgeu	s6,a5,8002d06 <f_open+0xce>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002cea:	01778463          	beq	a5,s7,8002cf2 <f_open+0xba>
 8002cee:	1aa79763          	bne	a5,a0,8002e9c <f_open+0x264>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002cf2:	05c00593          	li	a1,92
 8002cf6:	00dd0633          	add	a2,s10,a3
 8002cfa:	00064603          	lbu	a2,0(a2)
 8002cfe:	19760d63          	beq	a2,s7,8002e98 <f_open+0x260>
 8002d02:	18b60b63          	beq	a2,a1,8002e98 <f_open+0x260>
	*path = p + si;						/* Return pointer to the next segment */
 8002d06:	9d36                	add	s10,s10,a3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002d08:	18070e63          	beqz	a4,8002ea4 <f_open+0x26c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002d0c:	03414683          	lbu	a3,52(sp)
 8002d10:	0e500713          	li	a4,229
 8002d14:	00e69563          	bne	a3,a4,8002d1e <f_open+0xe6>
 8002d18:	4715                	li	a4,5
 8002d1a:	02e10a23          	sb	a4,52(sp)
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002d1e:	4711                	li	a4,4
 8002d20:	00fb7363          	bgeu	s6,a5,8002d26 <f_open+0xee>
 8002d24:	4701                	li	a4,0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002d26:	0848                	addi	a0,sp,20
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002d28:	02e10fa3          	sb	a4,63(sp)
	FATFS *fs = dp->obj.fs;
 8002d2c:	4dd2                	lw	s11,20(sp)
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002d2e:	00000097          	auipc	ra,0x0
 8002d32:	e16080e7          	jalr	-490(ra) # 8002b44 <dir_sdi.constprop.9>
 8002d36:	842a                	mv	s0,a0
	if (res != FR_OK) return res;
 8002d38:	1e051663          	bnez	a0,8002f24 <f_open+0x2ec>
		res = move_window(fs, dp->sect);
 8002d3c:	55b2                	lw	a1,44(sp)
 8002d3e:	856e                	mv	a0,s11
 8002d40:	fffff097          	auipc	ra,0xfffff
 8002d44:	526080e7          	jalr	1318(ra) # 8002266 <move_window>
 8002d48:	842a                	mv	s0,a0
		if (res != FR_OK) break;
 8002d4a:	1c051d63          	bnez	a0,8002f24 <f_open+0x2ec>
		c = dp->dir[DIR_Name];
 8002d4e:	5542                	lw	a0,48(sp)
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002d50:	00054783          	lbu	a5,0(a0)
 8002d54:	1c078763          	beqz	a5,8002f22 <f_open+0x2ea>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002d58:	00b54783          	lbu	a5,11(a0)
 8002d5c:	03f7f713          	andi	a4,a5,63
 8002d60:	00e10d23          	sb	a4,26(sp)
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002d64:	8ba1                	andi	a5,a5,8
 8002d66:	eb89                	bnez	a5,8002d78 <f_open+0x140>
 8002d68:	462d                	li	a2,11
 8002d6a:	184c                	addi	a1,sp,52
 8002d6c:	fffff097          	auipc	ra,0xfffff
 8002d70:	394080e7          	jalr	916(ra) # 8002100 <mem_cmp>
 8002d74:	1a050863          	beqz	a0,8002f24 <f_open+0x2ec>
		res = dir_next(dp, 0);	/* Next entry */
 8002d78:	4581                	li	a1,0
 8002d7a:	0848                	addi	a0,sp,20
 8002d7c:	00000097          	auipc	ra,0x0
 8002d80:	c7e080e7          	jalr	-898(ra) # 80029fa <dir_next>
 8002d84:	bf4d                	j	8002d36 <f_open+0xfe>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002d86:	0d05                	addi	s10,s10,1
 8002d88:	b701                	j	8002c88 <f_open+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002d8a:	f8000793          	li	a5,-128
		res = dir_sdi(dp, 0);
 8002d8e:	0848                	addi	a0,sp,20
		dp->fn[NSFLAG] = NS_NONAME;
 8002d90:	02f10fa3          	sb	a5,63(sp)
		res = dir_sdi(dp, 0);
 8002d94:	00000097          	auipc	ra,0x0
 8002d98:	db0080e7          	jalr	-592(ra) # 8002b44 <dir_sdi.constprop.9>
 8002d9c:	842a                	mv	s0,a0
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002d9e:	1c050263          	beqz	a0,8002f62 <f_open+0x32a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002da2:	01c97793          	andi	a5,s2,28
 8002da6:	28078563          	beqz	a5,8003030 <f_open+0x3f8>
			if (res != FR_OK) {					/* No file, create new */
 8002daa:	1e040563          	beqz	s0,8002f94 <f_open+0x35c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002dae:	4791                	li	a5,4
 8002db0:	1cf41e63          	bne	s0,a5,8002f8c <f_open+0x354>
	res = dir_sdi(dp, 0);
 8002db4:	0848                	addi	a0,sp,20
	FATFS *fs = dp->obj.fs;
 8002db6:	4952                	lw	s2,20(sp)
	res = dir_sdi(dp, 0);
 8002db8:	00000097          	auipc	ra,0x0
 8002dbc:	d8c080e7          	jalr	-628(ra) # 8002b44 <dir_sdi.constprop.9>
 8002dc0:	842a                	mv	s0,a0
	if (res == FR_OK) {
 8002dc2:	1c051163          	bnez	a0,8002f84 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002dc6:	0e500a93          	li	s5,229
			res = move_window(fs, dp->sect);
 8002dca:	55b2                	lw	a1,44(sp)
 8002dcc:	854a                	mv	a0,s2
 8002dce:	fffff097          	auipc	ra,0xfffff
 8002dd2:	498080e7          	jalr	1176(ra) # 8002266 <move_window>
 8002dd6:	842a                	mv	s0,a0
			if (res != FR_OK) break;
 8002dd8:	1a051663          	bnez	a0,8002f84 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002ddc:	57c2                	lw	a5,48(sp)
 8002dde:	0007c783          	lbu	a5,0(a5)
 8002de2:	19579663          	bne	a5,s5,8002f6e <f_open+0x336>
		res = move_window(fs, dp->sect);
 8002de6:	55b2                	lw	a1,44(sp)
 8002de8:	854a                	mv	a0,s2
 8002dea:	fffff097          	auipc	ra,0xfffff
 8002dee:	47c080e7          	jalr	1148(ra) # 8002266 <move_window>
 8002df2:	842a                	mv	s0,a0
		if (res == FR_OK) {
 8002df4:	18051c63          	bnez	a0,8002f8c <f_open+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002df8:	57c2                	lw	a5,48(sp)
	BYTE *d = (BYTE*)dst;
 8002dfa:	02078713          	addi	a4,a5,32
		*d++ = (BYTE)val;
 8002dfe:	0785                	addi	a5,a5,1
 8002e00:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002e04:	fef71de3          	bne	a4,a5,8002dfe <f_open+0x1c6>
	if (cnt != 0) {
 8002e08:	5542                	lw	a0,48(sp)
 8002e0a:	462d                	li	a2,11
 8002e0c:	184c                	addi	a1,sp,52
 8002e0e:	fffff097          	auipc	ra,0xfffff
 8002e12:	3b4080e7          	jalr	948(ra) # 80021c2 <mem_cpy.part.0>
			fs->wflag = 1;
 8002e16:	4785                	li	a5,1
 8002e18:	00f901a3          	sb	a5,3(s2)
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002e1c:	0089e993          	ori	s3,s3,8
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8002e20:	47c2                	lw	a5,16(sp)
 8002e22:	5442                	lw	s0,48(sp)
 8002e24:	0007c503          	lbu	a0,0(a5)
 8002e28:	85a2                	mv	a1,s0
 8002e2a:	fffff097          	auipc	ra,0xfffff
 8002e2e:	3b2080e7          	jalr	946(ra) # 80021dc <ld_clust.isra.1>
 8002e32:	892a                	mv	s2,a0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8002e34:	00000097          	auipc	ra,0x0
 8002e38:	730080e7          	jalr	1840(ra) # 8003564 <get_fattime>
 8002e3c:	85aa                	mv	a1,a0
 8002e3e:	00e40513          	addi	a0,s0,14
 8002e42:	fffff097          	auipc	ra,0xfffff
 8002e46:	2a2080e7          	jalr	674(ra) # 80020e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002e4a:	57c2                	lw	a5,48(sp)
 8002e4c:	02000713          	li	a4,32
	if (fs->fs_type == FS_FAT32) {
 8002e50:	468d                	li	a3,3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002e52:	00e785a3          	sb	a4,11(a5)
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002e56:	57c2                	lw	a5,48(sp)
 8002e58:	4742                	lw	a4,16(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e5a:	00078d23          	sb	zero,26(a5)
	*ptr++ = (BYTE)val;
 8002e5e:	00078da3          	sb	zero,27(a5)
	if (fs->fs_type == FS_FAT32) {
 8002e62:	00074603          	lbu	a2,0(a4)
 8002e66:	00d61663          	bne	a2,a3,8002e72 <f_open+0x23a>
	*ptr++ = (BYTE)val; val >>= 8;
 8002e6a:	00078a23          	sb	zero,20(a5)
	*ptr++ = (BYTE)val;
 8002e6e:	00078aa3          	sb	zero,21(a5)
					st_dword(dj.dir + DIR_FileSize, 0);
 8002e72:	57c2                	lw	a5,48(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e74:	00078e23          	sb	zero,28(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e78:	00078ea3          	sb	zero,29(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002e7c:	00078f23          	sb	zero,30(a5)
	*ptr++ = (BYTE)val;
 8002e80:	00078fa3          	sb	zero,31(a5)
					fs->wflag = 1;
 8002e84:	4785                	li	a5,1
 8002e86:	00f701a3          	sb	a5,3(a4)
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8002e8a:	1c090063          	beqz	s2,800304a <f_open+0x412>
	FATFS *fs = obj->fs;
 8002e8e:	4ad2                	lw	s5,20(sp)
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002e90:	1127ef63          	bltu	a5,s2,8002fae <f_open+0x376>
 8002e94:	4409                	li	s0,2
 8002e96:	a8dd                	j	8002f8c <f_open+0x354>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002e98:	0685                	addi	a3,a3,1
 8002e9a:	bdb1                	j	8002cf6 <f_open+0xbe>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002e9c:	2b078c63          	beq	a5,a6,8003154 <f_open+0x51c>
 8002ea0:	00b76463          	bltu	a4,a1,8002ea8 <f_open+0x270>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002ea4:	4419                	li	s0,6
 8002ea6:	bdf5                	j	8002da2 <f_open+0x16a>
	if (c >= DbcTbl[0]) {
 8002ea8:	07f78f93          	addi	t6,a5,127
 8002eac:	0fffff93          	andi	t6,t6,255
 8002eb0:	05f36763          	bltu	t1,t6,8002efe <f_open+0x2c6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002eb4:	96ea                	add	a3,a3,s10
 8002eb6:	0006cf83          	lbu	t6,0(a3) # 1000 <__stack_size>
 8002eba:	0609                	addi	a2,a2,2
	if (c >= DbcTbl[4]) {
 8002ebc:	fffef4e3          	bgeu	t4,t6,8002ea4 <f_open+0x26c>
		if (c <= DbcTbl[5]) return 1;
 8002ec0:	07fff693          	andi	a3,t6,127
 8002ec4:	fedf60e3          	bltu	t5,a3,8002ea4 <f_open+0x26c>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002ec8:	fff58693          	addi	a3,a1,-1 # efffffff <_sp+0xcfff7fff>
 8002ecc:	fcd77ce3          	bgeu	a4,a3,8002ea4 <f_open+0x26c>
			sfn[i++] = c;
 8002ed0:	0080                	addi	s0,sp,64
 8002ed2:	00170693          	addi	a3,a4,1
 8002ed6:	00e402b3          	add	t0,s0,a4
 8002eda:	fef28a23          	sb	a5,-12(t0)
			sfn[i++] = d;
 8002ede:	87b6                	mv	a5,a3
 8002ee0:	97a2                	add	a5,a5,s0
 8002ee2:	0709                	addi	a4,a4,2
 8002ee4:	fff78a23          	sb	t6,-12(a5)
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002ee8:	86b2                	mv	a3,a2
			i = 8; ni = 11;				/* Enter file extension field */
 8002eea:	8636                	mv	a2,a3
 8002eec:	b3fd                	j	8002cda <f_open+0xa2>
	while (*str && *str != chr) str++;
 8002eee:	0605                	addi	a2,a2,1
 8002ef0:	00064f83          	lbu	t6,0(a2)
 8002ef4:	000f8863          	beqz	t6,8002f04 <f_open+0x2cc>
 8002ef8:	fff79be3          	bne	a5,t6,8002eee <f_open+0x2b6>
 8002efc:	b765                	j	8002ea4 <f_open+0x26c>
	if (c >= DbcTbl[0]) {
 8002efe:	2d0c8613          	addi	a2,s9,720 # 80002d0 <enable_mcycle_minstret+0x84>
 8002f02:	b7fd                	j	8002ef0 <f_open+0x2b8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002f04:	f9f78613          	addi	a2,a5,-97
 8002f08:	0ff67613          	andi	a2,a2,255
 8002f0c:	00ce6563          	bltu	t3,a2,8002f16 <f_open+0x2de>
 8002f10:	1781                	addi	a5,a5,-32
 8002f12:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
 8002f16:	0090                	addi	a2,sp,64
 8002f18:	963a                	add	a2,a2,a4
 8002f1a:	fef60a23          	sb	a5,-12(a2)
 8002f1e:	0705                	addi	a4,a4,1
 8002f20:	b7e9                	j	8002eea <f_open+0x2b2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002f22:	4411                	li	s0,4
			ns = dp->fn[NSFLAG];
 8002f24:	03f14783          	lbu	a5,63(sp)
			if (res != FR_OK) {				/* Failed to find the object */
 8002f28:	c809                	beqz	s0,8002f3a <f_open+0x302>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002f2a:	4711                	li	a4,4
 8002f2c:	e6e41be3          	bne	s0,a4,8002da2 <f_open+0x16a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002f30:	8b91                	andi	a5,a5,4
 8002f32:	e60798e3          	bnez	a5,8002da2 <f_open+0x16a>
				res = FR_NO_PATH; break;
 8002f36:	4415                	li	s0,5
 8002f38:	b5ad                	j	8002da2 <f_open+0x16a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002f3a:	8b91                	andi	a5,a5,4
 8002f3c:	e39d                	bnez	a5,8002f62 <f_open+0x32a>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002f3e:	01a14783          	lbu	a5,26(sp)
 8002f42:	8bc1                	andi	a5,a5,16
 8002f44:	dbed                	beqz	a5,8002f36 <f_open+0x2fe>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002f46:	5792                	lw	a5,36(sp)
 8002f48:	000ac503          	lbu	a0,0(s5)
 8002f4c:	030a8593          	addi	a1,s5,48
 8002f50:	1ff7f793          	andi	a5,a5,511
 8002f54:	95be                	add	a1,a1,a5
 8002f56:	fffff097          	auipc	ra,0xfffff
 8002f5a:	286080e7          	jalr	646(ra) # 80021dc <ld_clust.isra.1>
 8002f5e:	ce2a                	sw	a0,28(sp)
 8002f60:	bb81                	j	8002cb0 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002f62:	03f10783          	lb	a5,63(sp)
		res = follow_path(&dj, path);	/* Follow the file path */
 8002f66:	4401                	li	s0,0
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002f68:	e207dde3          	bgez	a5,8002da2 <f_open+0x16a>
 8002f6c:	bf25                	j	8002ea4 <f_open+0x26c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002f6e:	e6078ce3          	beqz	a5,8002de6 <f_open+0x1ae>
			res = dir_next(dp, 1);
 8002f72:	4585                	li	a1,1
 8002f74:	0848                	addi	a0,sp,20
 8002f76:	00000097          	auipc	ra,0x0
 8002f7a:	a84080e7          	jalr	-1404(ra) # 80029fa <dir_next>
 8002f7e:	842a                	mv	s0,a0
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002f80:	e40505e3          	beqz	a0,8002dca <f_open+0x192>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002f84:	4791                	li	a5,4
 8002f86:	00f41363          	bne	s0,a5,8002f8c <f_open+0x354>
 8002f8a:	441d                	li	s0,7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002f8c:	0004a023          	sw	zero,0(s1)
 8002f90:	8a22                	mv	s4,s0
 8002f92:	aaad                	j	800310c <f_open+0x4d4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002f94:	01a14783          	lbu	a5,26(sp)
 8002f98:	8bc5                	andi	a5,a5,17
 8002f9a:	fbe5                	bnez	a5,8002f8a <f_open+0x352>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002f9c:	00497793          	andi	a5,s2,4
 8002fa0:	1a079663          	bnez	a5,800314c <f_open+0x514>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002fa4:	00897913          	andi	s2,s2,8
 8002fa8:	0a090163          	beqz	s2,800304a <f_open+0x412>
 8002fac:	bd95                	j	8002e20 <f_open+0x1e8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002fae:	014aa783          	lw	a5,20(s5)
 8002fb2:	eef971e3          	bgeu	s2,a5,8002e94 <f_open+0x25c>
						dw = fs->winsect;
 8002fb6:	02c72b83          	lw	s7,44(a4)
 8002fba:	844a                	mv	s0,s2
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002fbc:	4c05                	li	s8,1
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002fbe:	5cfd                	li	s9,-1
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002fc0:	4552                	lw	a0,20(sp)
 8002fc2:	85a2                	mv	a1,s0
 8002fc4:	00000097          	auipc	ra,0x0
 8002fc8:	818080e7          	jalr	-2024(ra) # 80027dc <get_fat.isra.7>
 8002fcc:	8b2a                	mv	s6,a0
		if (nxt == 0) break;				/* Empty cluster? */
 8002fce:	c521                	beqz	a0,8003016 <f_open+0x3de>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002fd0:	ed8502e3          	beq	a0,s8,8002e94 <f_open+0x25c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002fd4:	01951463          	bne	a0,s9,8002fdc <f_open+0x3a4>
 8002fd8:	4405                	li	s0,1
 8002fda:	bf4d                	j	8002f8c <f_open+0x354>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002fdc:	85a2                	mv	a1,s0
 8002fde:	4601                	li	a2,0
 8002fe0:	8556                	mv	a0,s5
 8002fe2:	fffff097          	auipc	ra,0xfffff
 8002fe6:	6a6080e7          	jalr	1702(ra) # 8002688 <put_fat>
 8002fea:	842a                	mv	s0,a0
			if (res != FR_OK) return res;
 8002fec:	f145                	bnez	a0,8002f8c <f_open+0x354>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002fee:	014aa703          	lw	a4,20(s5)
 8002ff2:	010aa783          	lw	a5,16(s5)
 8002ff6:	ffe70693          	addi	a3,a4,-2
 8002ffa:	00d7fb63          	bgeu	a5,a3,8003010 <f_open+0x3d8>
			fs->free_clst++;
 8002ffe:	0785                	addi	a5,a5,1
 8003000:	00faa823          	sw	a5,16(s5)
			fs->fsi_flag |= 1;
 8003004:	004ac783          	lbu	a5,4(s5)
 8003008:	0017e793          	ori	a5,a5,1
 800300c:	00fa8223          	sb	a5,4(s5)
		clst = nxt;					/* Next cluster */
 8003010:	845a                	mv	s0,s6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003012:	faeb67e3          	bltu	s6,a4,8002fc0 <f_open+0x388>
							res = move_window(fs, dw);
 8003016:	4542                	lw	a0,16(sp)
 8003018:	85de                	mv	a1,s7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800301a:	197d                	addi	s2,s2,-1
							res = move_window(fs, dw);
 800301c:	fffff097          	auipc	ra,0xfffff
 8003020:	24a080e7          	jalr	586(ra) # 8002266 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003024:	47c2                	lw	a5,16(sp)
							res = move_window(fs, dw);
 8003026:	842a                	mv	s0,a0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003028:	0127a623          	sw	s2,12(a5)
		if (res == FR_OK) {
 800302c:	cd19                	beqz	a0,800304a <f_open+0x412>
 800302e:	bfb9                	j	8002f8c <f_open+0x354>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003030:	fc31                	bnez	s0,8002f8c <f_open+0x354>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003032:	01a14783          	lbu	a5,26(sp)
 8003036:	0107f713          	andi	a4,a5,16
 800303a:	10071b63          	bnez	a4,8003150 <f_open+0x518>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800303e:	00297913          	andi	s2,s2,2
 8003042:	00090463          	beqz	s2,800304a <f_open+0x412>
 8003046:	8b85                	andi	a5,a5,1
 8003048:	f3a9                	bnez	a5,8002f8a <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800304a:	0089f793          	andi	a5,s3,8
 800304e:	c399                	beqz	a5,8003054 <f_open+0x41c>
 8003050:	0409e993          	ori	s3,s3,64
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003054:	4442                	lw	s0,16(sp)
			fp->dir_ptr = dj.dir;
 8003056:	5942                	lw	s2,48(sp)
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003058:	02848a93          	addi	s5,s1,40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800305c:	545c                	lw	a5,44(s0)
			fp->dir_ptr = dj.dir;
 800305e:	0324a223          	sw	s2,36(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003062:	85ca                	mv	a1,s2
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003064:	d09c                	sw	a5,32(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003066:	00044503          	lbu	a0,0(s0)
 800306a:	fffff097          	auipc	ra,0xfffff
 800306e:	172080e7          	jalr	370(ra) # 80021dc <ld_clust.isra.1>
 8003072:	c488                	sw	a0,8(s1)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003074:	01c90513          	addi	a0,s2,28
 8003078:	fffff097          	auipc	ra,0xfffff
 800307c:	04e080e7          	jalr	78(ra) # 80020c6 <ld_dword>
			fp->obj.id = fs->id;
 8003080:	00645783          	lhu	a5,6(s0)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003084:	c4c8                	sw	a0,12(s1)
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003086:	c080                	sw	s0,0(s1)
			fp->obj.id = fs->id;
 8003088:	00f49223          	sh	a5,4(s1)
			fp->flag = mode;		/* Set file access mode */
 800308c:	01348823          	sb	s3,16(s1)
			fp->err = 0;			/* Clear error flag */
 8003090:	000488a3          	sb	zero,17(s1)
			fp->sect = 0;			/* Invalidate current data sector */
 8003094:	0004ae23          	sw	zero,28(s1)
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003098:	0004aa23          	sw	zero,20(s1)
	BYTE *d = (BYTE*)dst;
 800309c:	22848713          	addi	a4,s1,552
 80030a0:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 80030a2:	0785                	addi	a5,a5,1
 80030a4:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 80030a8:	fee79de3          	bne	a5,a4,80030a2 <f_open+0x46a>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80030ac:	0209f993          	andi	s3,s3,32
 80030b0:	04098e63          	beqz	s3,800310c <f_open+0x4d4>
 80030b4:	00c4a903          	lw	s2,12(s1)
 80030b8:	04090a63          	beqz	s2,800310c <f_open+0x4d4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80030bc:	00a45403          	lhu	s0,10(s0)
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80030c0:	448c                	lw	a1,8(s1)
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80030c2:	0124aa23          	sw	s2,20(s1)
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80030c6:	0426                	slli	s0,s0,0x9
					if (clst <= 1) res = FR_INT_ERR;
 80030c8:	4985                	li	s3,1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80030ca:	5b7d                	li	s6,-1
 80030cc:	07246063          	bltu	s0,s2,800312c <f_open+0x4f4>
 80030d0:	4401                	li	s0,0
				fp->clust = clst;
 80030d2:	cc8c                	sw	a1,24(s1)
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80030d4:	ea041ce3          	bnez	s0,8002f8c <f_open+0x354>
 80030d8:	1ff97793          	andi	a5,s2,511
 80030dc:	cb85                	beqz	a5,800310c <f_open+0x4d4>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80030de:	4442                	lw	s0,16(sp)
 80030e0:	8522                	mv	a0,s0
 80030e2:	fffff097          	auipc	ra,0xfffff
 80030e6:	038080e7          	jalr	56(ra) # 800211a <clst2sect>
 80030ea:	da0505e3          	beqz	a0,8002e94 <f_open+0x25c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80030ee:	00995913          	srli	s2,s2,0x9
 80030f2:	00a90633          	add	a2,s2,a0
 80030f6:	ccd0                	sw	a2,28(s1)
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80030f8:	00144503          	lbu	a0,1(s0)
 80030fc:	4685                	li	a3,1
 80030fe:	85d6                	mv	a1,s5
 8003100:	00001097          	auipc	ra,0x1
 8003104:	aa4080e7          	jalr	-1372(ra) # 8003ba4 <disk_read>
 8003108:	ec0518e3          	bnez	a0,8002fd8 <f_open+0x3a0>

	LEAVE_FF(fs, res);
}
 800310c:	50f6                	lw	ra,124(sp)
 800310e:	5466                	lw	s0,120(sp)
 8003110:	8552                	mv	a0,s4
 8003112:	54d6                	lw	s1,116(sp)
 8003114:	5946                	lw	s2,112(sp)
 8003116:	59b6                	lw	s3,108(sp)
 8003118:	5a26                	lw	s4,104(sp)
 800311a:	5a96                	lw	s5,100(sp)
 800311c:	5b06                	lw	s6,96(sp)
 800311e:	4bf6                	lw	s7,92(sp)
 8003120:	4c66                	lw	s8,88(sp)
 8003122:	4cd6                	lw	s9,84(sp)
 8003124:	4d46                	lw	s10,80(sp)
 8003126:	4db6                	lw	s11,76(sp)
 8003128:	6109                	addi	sp,sp,128
 800312a:	8082                	ret
					clst = get_fat(&fp->obj, clst);
 800312c:	4088                	lw	a0,0(s1)
 800312e:	40890933          	sub	s2,s2,s0
 8003132:	fffff097          	auipc	ra,0xfffff
 8003136:	6aa080e7          	jalr	1706(ra) # 80027dc <get_fat.isra.7>
 800313a:	85aa                	mv	a1,a0
					if (clst <= 1) res = FR_INT_ERR;
 800313c:	00a9f663          	bgeu	s3,a0,8003148 <f_open+0x510>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003140:	f96516e3          	bne	a0,s6,80030cc <f_open+0x494>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003144:	4405                	li	s0,1
 8003146:	b771                	j	80030d2 <f_open+0x49a>
					if (clst <= 1) res = FR_INT_ERR;
 8003148:	4409                	li	s0,2
 800314a:	b761                	j	80030d2 <f_open+0x49a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800314c:	4421                	li	s0,8
 800314e:	bd3d                	j	8002f8c <f_open+0x354>
					res = FR_NO_FILE;
 8003150:	4411                	li	s0,4
 8003152:	bd2d                	j	8002f8c <f_open+0x354>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003154:	d51588e3          	beq	a1,a7,8002ea4 <f_open+0x26c>
			i = 8; ni = 11;				/* Enter file extension field */
 8003158:	4721                	li	a4,8
 800315a:	45ad                	li	a1,11
 800315c:	b379                	j	8002eea <f_open+0x2b2>

0800315e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800315e:	711d                	addi	sp,sp,-96
 8003160:	cca2                	sw	s0,88(sp)
 8003162:	c8ca                	sw	s2,80(sp)
 8003164:	c6ce                	sw	s3,76(sp)
 8003166:	c4d2                	sw	s4,72(sp)
 8003168:	c0da                	sw	s6,64(sp)
 800316a:	ce86                	sw	ra,92(sp)
 800316c:	caa6                	sw	s1,84(sp)
 800316e:	c2d6                	sw	s5,68(sp)
 8003170:	de5e                	sw	s7,60(sp)
 8003172:	dc62                	sw	s8,56(sp)
 8003174:	da66                	sw	s9,52(sp)
 8003176:	d86a                	sw	s10,48(sp)
 8003178:	d66e                	sw	s11,44(sp)
 800317a:	8a2e                	mv	s4,a1
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800317c:	0006a023          	sw	zero,0(a3)
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003180:	086c                	addi	a1,sp,28
{
 8003182:	842a                	mv	s0,a0
 8003184:	8932                	mv	s2,a2
 8003186:	8b36                	mv	s6,a3
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003188:	fffff097          	auipc	ra,0xfffff
 800318c:	fec080e7          	jalr	-20(ra) # 8002174 <validate>
 8003190:	89aa                	mv	s3,a0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003192:	e539                	bnez	a0,80031e0 <f_write+0x82>
 8003194:	01144983          	lbu	s3,17(s0)
 8003198:	04099463          	bnez	s3,80031e0 <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800319c:	01044783          	lbu	a5,16(s0)
 80031a0:	8b89                	andi	a5,a5,2
 80031a2:	1c078063          	beqz	a5,8003362 <f_write+0x204>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80031a6:	485c                	lw	a5,20(s0)
 80031a8:	01278733          	add	a4,a5,s2
 80031ac:	00f77463          	bgeu	a4,a5,80031b4 <f_write+0x56>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80031b0:	fff7c913          	not	s2,a5
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80031b4:	20000b93          	li	s7,512
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80031b8:	02840a93          	addi	s5,s0,40
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80031bc:	1ff00c13          	li	s8,511
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80031c0:	5cfd                	li	s9,-1
 80031c2:	a239                	j	80032d0 <f_write+0x172>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80031c4:	4c0c                	lw	a1,24(s0)
 80031c6:	8522                	mv	a0,s0
 80031c8:	fffff097          	auipc	ra,0xfffff
 80031cc:	70a080e7          	jalr	1802(ra) # 80028d2 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80031d0:	12051663          	bnez	a0,80032fc <f_write+0x19e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80031d4:	01044783          	lbu	a5,16(s0)
 80031d8:	0407e793          	ori	a5,a5,64
 80031dc:	00f40823          	sb	a5,16(s0)

	LEAVE_FF(fs, FR_OK);
}
 80031e0:	40f6                	lw	ra,92(sp)
 80031e2:	4466                	lw	s0,88(sp)
 80031e4:	854e                	mv	a0,s3
 80031e6:	44d6                	lw	s1,84(sp)
 80031e8:	4946                	lw	s2,80(sp)
 80031ea:	49b6                	lw	s3,76(sp)
 80031ec:	4a26                	lw	s4,72(sp)
 80031ee:	4a96                	lw	s5,68(sp)
 80031f0:	4b06                	lw	s6,64(sp)
 80031f2:	5bf2                	lw	s7,60(sp)
 80031f4:	5c62                	lw	s8,56(sp)
 80031f6:	5cd2                	lw	s9,52(sp)
 80031f8:	5d42                	lw	s10,48(sp)
 80031fa:	5db2                	lw	s11,44(sp)
 80031fc:	6125                	addi	sp,sp,96
 80031fe:	8082                	ret
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003200:	01951763          	bne	a0,s9,800320e <f_write+0xb0>
 8003204:	4785                	li	a5,1
 8003206:	00f408a3          	sb	a5,17(s0)
 800320a:	4985                	li	s3,1
 800320c:	bfd1                	j	80031e0 <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800320e:	441c                	lw	a5,8(s0)
				fp->clust = clst;			/* Update current cluster */
 8003210:	cc08                	sw	a0,24(s0)
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003212:	e391                	bnez	a5,8003216 <f_write+0xb8>
 8003214:	c408                	sw	a0,8(s0)
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003216:	01040783          	lb	a5,16(s0)
 800321a:	0207d363          	bgez	a5,8003240 <f_write+0xe2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800321e:	47f2                	lw	a5,28(sp)
 8003220:	4c50                	lw	a2,28(s0)
 8003222:	4685                	li	a3,1
 8003224:	0017c503          	lbu	a0,1(a5)
 8003228:	85d6                	mv	a1,s5
 800322a:	00001097          	auipc	ra,0x1
 800322e:	a1c080e7          	jalr	-1508(ra) # 8003c46 <disk_write>
 8003232:	f969                	bnez	a0,8003204 <f_write+0xa6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003234:	01044783          	lbu	a5,16(s0)
 8003238:	07f7f793          	andi	a5,a5,127
 800323c:	00f40823          	sb	a5,16(s0)
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003240:	47f2                	lw	a5,28(sp)
 8003242:	4c0c                	lw	a1,24(s0)
 8003244:	853e                	mv	a0,a5
 8003246:	c63e                	sw	a5,12(sp)
 8003248:	fffff097          	auipc	ra,0xfffff
 800324c:	ed2080e7          	jalr	-302(ra) # 800211a <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003250:	c94d                	beqz	a0,8003302 <f_write+0x1a4>
			sect += csect;
 8003252:	00ad8d33          	add	s10,s11,a0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003256:	47b2                	lw	a5,12(sp)
 8003258:	0b2c7a63          	bgeu	s8,s2,800330c <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800325c:	00a7d703          	lhu	a4,10(a5)
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003260:	00995493          	srli	s1,s2,0x9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003264:	009d86b3          	add	a3,s11,s1
 8003268:	00d77463          	bgeu	a4,a3,8003270 <f_write+0x112>
					cc = fs->csize - csect;
 800326c:	41b704b3          	sub	s1,a4,s11
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003270:	0017c503          	lbu	a0,1(a5)
 8003274:	86a6                	mv	a3,s1
 8003276:	866a                	mv	a2,s10
 8003278:	85d2                	mv	a1,s4
 800327a:	00001097          	auipc	ra,0x1
 800327e:	9cc080e7          	jalr	-1588(ra) # 8003c46 <disk_write>
 8003282:	f149                	bnez	a0,8003204 <f_write+0xa6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003284:	4c4c                	lw	a1,28(s0)
 8003286:	41a58d33          	sub	s10,a1,s10
 800328a:	029d7263          	bgeu	s10,s1,80032ae <f_write+0x150>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800328e:	0d26                	slli	s10,s10,0x9
 8003290:	20000613          	li	a2,512
 8003294:	01aa05b3          	add	a1,s4,s10
 8003298:	8556                	mv	a0,s5
 800329a:	fffff097          	auipc	ra,0xfffff
 800329e:	f28080e7          	jalr	-216(ra) # 80021c2 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80032a2:	01044783          	lbu	a5,16(s0)
 80032a6:	07f7f793          	andi	a5,a5,127
 80032aa:	00f40823          	sb	a5,16(s0)
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80032ae:	04a6                	slli	s1,s1,0x9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80032b0:	000b2783          	lw	a5,0(s6)
 80032b4:	40990933          	sub	s2,s2,s1
 80032b8:	9a26                	add	s4,s4,s1
 80032ba:	97a6                	add	a5,a5,s1
 80032bc:	00fb2023          	sw	a5,0(s6)
 80032c0:	485c                	lw	a5,20(s0)
 80032c2:	94be                	add	s1,s1,a5
 80032c4:	445c                	lw	a5,12(s0)
 80032c6:	c844                	sw	s1,20(s0)
 80032c8:	0097f363          	bgeu	a5,s1,80032ce <f_write+0x170>
 80032cc:	87a6                	mv	a5,s1
 80032ce:	c45c                	sw	a5,12(s0)
	for ( ;  btw;							/* Repeat until all data written */
 80032d0:	f00902e3          	beqz	s2,80031d4 <f_write+0x76>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80032d4:	485c                	lw	a5,20(s0)
 80032d6:	1ff7f713          	andi	a4,a5,511
 80032da:	ef29                	bnez	a4,8003334 <f_write+0x1d6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80032dc:	4772                	lw	a4,28(sp)
 80032de:	00a75d83          	lhu	s11,10(a4)
 80032e2:	0097d713          	srli	a4,a5,0x9
 80032e6:	1dfd                	addi	s11,s11,-1
 80032e8:	00edfdb3          	and	s11,s11,a4
			if (csect == 0) {				/* On the cluster boundary? */
 80032ec:	f20d95e3          	bnez	s11,8003216 <f_write+0xb8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80032f0:	ec079ae3          	bnez	a5,80031c4 <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80032f4:	4408                	lw	a0,8(s0)
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80032f6:	4581                	li	a1,0
					if (clst == 0) {		/* If no cluster is allocated, */
 80032f8:	ec0507e3          	beqz	a0,80031c6 <f_write+0x68>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80032fc:	4785                	li	a5,1
 80032fe:	f0f511e3          	bne	a0,a5,8003200 <f_write+0xa2>
 8003302:	4789                	li	a5,2
 8003304:	00f408a3          	sb	a5,17(s0)
 8003308:	4989                	li	s3,2
 800330a:	bdd9                	j	80031e0 <f_write+0x82>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800330c:	4c58                	lw	a4,28(s0)
 800330e:	03a70163          	beq	a4,s10,8003330 <f_write+0x1d2>
 8003312:	4454                	lw	a3,12(s0)
 8003314:	4858                	lw	a4,20(s0)
 8003316:	00d77d63          	bgeu	a4,a3,8003330 <f_write+0x1d2>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800331a:	0017c503          	lbu	a0,1(a5)
 800331e:	4685                	li	a3,1
 8003320:	866a                	mv	a2,s10
 8003322:	85d6                	mv	a1,s5
 8003324:	00001097          	auipc	ra,0x1
 8003328:	880080e7          	jalr	-1920(ra) # 8003ba4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800332c:	ec051ce3          	bnez	a0,8003204 <f_write+0xa6>
			fp->sect = sect;
 8003330:	01a42e23          	sw	s10,28(s0)
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003334:	4848                	lw	a0,20(s0)
 8003336:	84ca                	mv	s1,s2
 8003338:	1ff57513          	andi	a0,a0,511
 800333c:	40ab87b3          	sub	a5,s7,a0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003340:	0127f363          	bgeu	a5,s2,8003346 <f_write+0x1e8>
 8003344:	84be                	mv	s1,a5
	if (cnt != 0) {
 8003346:	8626                	mv	a2,s1
 8003348:	85d2                	mv	a1,s4
 800334a:	9556                	add	a0,a0,s5
 800334c:	fffff097          	auipc	ra,0xfffff
 8003350:	e76080e7          	jalr	-394(ra) # 80021c2 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8003354:	01044783          	lbu	a5,16(s0)
 8003358:	f807e793          	ori	a5,a5,-128
 800335c:	00f40823          	sb	a5,16(s0)
 8003360:	bf81                	j	80032b0 <f_write+0x152>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003362:	499d                	li	s3,7
 8003364:	bdb5                	j	80031e0 <f_write+0x82>

08003366 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003366:	1101                	addi	sp,sp,-32
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003368:	006c                	addi	a1,sp,12
{
 800336a:	ca26                	sw	s1,20(sp)
 800336c:	ce06                	sw	ra,28(sp)
 800336e:	cc22                	sw	s0,24(sp)
 8003370:	c84a                	sw	s2,16(sp)
 8003372:	84aa                	mv	s1,a0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003374:	fffff097          	auipc	ra,0xfffff
 8003378:	e00080e7          	jalr	-512(ra) # 8002174 <validate>
 800337c:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800337e:	18051563          	bnez	a0,8003508 <f_sync+0x1a2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003382:	0104c703          	lbu	a4,16(s1)
 8003386:	04077693          	andi	a3,a4,64
 800338a:	16068f63          	beqz	a3,8003508 <f_sync+0x1a2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800338e:	0762                	slli	a4,a4,0x18
 8003390:	8761                	srai	a4,a4,0x18
 8003392:	02075663          	bgez	a4,80033be <f_sync+0x58>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003396:	47b2                	lw	a5,12(sp)
 8003398:	4cd0                	lw	a2,28(s1)
 800339a:	4685                	li	a3,1
 800339c:	0017c503          	lbu	a0,1(a5)
 80033a0:	02848593          	addi	a1,s1,40
 80033a4:	00001097          	auipc	ra,0x1
 80033a8:	8a2080e7          	jalr	-1886(ra) # 8003c46 <disk_write>
 80033ac:	4785                	li	a5,1
 80033ae:	14051d63          	bnez	a0,8003508 <f_sync+0x1a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80033b2:	0104c783          	lbu	a5,16(s1)
 80033b6:	07f7f793          	andi	a5,a5,127
 80033ba:	00f48823          	sb	a5,16(s1)
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80033be:	00000097          	auipc	ra,0x0
 80033c2:	1a6080e7          	jalr	422(ra) # 8003564 <get_fattime>
 80033c6:	892a                	mv	s2,a0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80033c8:	508c                	lw	a1,32(s1)
 80033ca:	4532                	lw	a0,12(sp)
 80033cc:	fffff097          	auipc	ra,0xfffff
 80033d0:	e9a080e7          	jalr	-358(ra) # 8002266 <move_window>
 80033d4:	87aa                	mv	a5,a0
				if (res == FR_OK) {
 80033d6:	12051963          	bnez	a0,8003508 <f_sync+0x1a2>
					dir = fp->dir_ptr;
 80033da:	50c0                	lw	s0,36(s1)
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80033dc:	00b44783          	lbu	a5,11(s0)
 80033e0:	0207e793          	ori	a5,a5,32
 80033e4:	00f405a3          	sb	a5,11(s0)
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80033e8:	449c                	lw	a5,8(s1)
 80033ea:	4094                	lw	a3,0(s1)
	*ptr++ = (BYTE)val; val >>= 8;
 80033ec:	01079713          	slli	a4,a5,0x10
 80033f0:	8341                	srli	a4,a4,0x10
 80033f2:	8321                	srli	a4,a4,0x8
	*ptr++ = (BYTE)val;
 80033f4:	00e40da3          	sb	a4,27(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80033f8:	00f40d23          	sb	a5,26(s0)
	if (fs->fs_type == FS_FAT32) {
 80033fc:	0006c683          	lbu	a3,0(a3)
 8003400:	470d                	li	a4,3
 8003402:	00e69863          	bne	a3,a4,8003412 <f_sync+0xac>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003406:	83c1                	srli	a5,a5,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 8003408:	00f40a23          	sb	a5,20(s0)
 800340c:	83a1                	srli	a5,a5,0x8
	*ptr++ = (BYTE)val;
 800340e:	00f40aa3          	sb	a5,21(s0)
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003412:	44cc                	lw	a1,12(s1)
 8003414:	01c40513          	addi	a0,s0,28
 8003418:	fffff097          	auipc	ra,0xfffff
 800341c:	ccc080e7          	jalr	-820(ra) # 80020e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003420:	85ca                	mv	a1,s2
 8003422:	01640513          	addi	a0,s0,22
 8003426:	fffff097          	auipc	ra,0xfffff
 800342a:	cbe080e7          	jalr	-834(ra) # 80020e4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800342e:	00040923          	sb	zero,18(s0)
	*ptr++ = (BYTE)val;
 8003432:	000409a3          	sb	zero,19(s0)
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8003436:	4432                	lw	s0,12(sp)
 8003438:	4905                	li	s2,1
 800343a:	012401a3          	sb	s2,3(s0)
	if (fs->wflag) {	/* Is the disk access window dirty */
 800343e:	8522                	mv	a0,s0
 8003440:	fffff097          	auipc	ra,0xfffff
 8003444:	dc2080e7          	jalr	-574(ra) # 8002202 <sync_window.part.3>
 8003448:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800344a:	e94d                	bnez	a0,80034fc <f_sync+0x196>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800344c:	00044703          	lbu	a4,0(s0)
 8003450:	478d                	li	a5,3
 8003452:	08f71b63          	bne	a4,a5,80034e8 <f_sync+0x182>
 8003456:	00444783          	lbu	a5,4(s0)
 800345a:	09279763          	bne	a5,s2,80034e8 <f_sync+0x182>
			mem_set(fs->win, 0, sizeof fs->win);
 800345e:	03040913          	addi	s2,s0,48
	BYTE *d = (BYTE*)dst;
 8003462:	23040713          	addi	a4,s0,560
 8003466:	87ca                	mv	a5,s2
		*d++ = (BYTE)val;
 8003468:	0785                	addi	a5,a5,1
 800346a:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 800346e:	fee79de3          	bne	a5,a4,8003468 <f_sync+0x102>
	*ptr++ = (BYTE)val; val >>= 8;
 8003472:	05500793          	li	a5,85
 8003476:	22f40723          	sb	a5,558(s0)
	*ptr++ = (BYTE)val;
 800347a:	faa00793          	li	a5,-86
 800347e:	22f407a3          	sb	a5,559(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003482:	480c                	lw	a1,16(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003484:	05200793          	li	a5,82
	*ptr++ = (BYTE)val;
 8003488:	04100713          	li	a4,65
	*ptr++ = (BYTE)val; val >>= 8;
 800348c:	07200693          	li	a3,114
 8003490:	02f40823          	sb	a5,48(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003494:	02f408a3          	sb	a5,49(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003498:	06100793          	li	a5,97
 800349c:	02f40923          	sb	a5,50(s0)
	*ptr++ = (BYTE)val;
 80034a0:	02e409a3          	sb	a4,51(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034a4:	20d40a23          	sb	a3,532(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034a8:	20d40aa3          	sb	a3,533(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80034ac:	20e40b23          	sb	a4,534(s0)
	*ptr++ = (BYTE)val;
 80034b0:	20f40ba3          	sb	a5,535(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80034b4:	21840513          	addi	a0,s0,536
 80034b8:	fffff097          	auipc	ra,0xfffff
 80034bc:	c2c080e7          	jalr	-980(ra) # 80020e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80034c0:	444c                	lw	a1,12(s0)
 80034c2:	21c40513          	addi	a0,s0,540
 80034c6:	fffff097          	auipc	ra,0xfffff
 80034ca:	c1e080e7          	jalr	-994(ra) # 80020e4 <st_dword>
			fs->winsect = fs->volbase + 1;
 80034ce:	4c50                	lw	a2,28(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80034d0:	00144503          	lbu	a0,1(s0)
 80034d4:	4685                	li	a3,1
			fs->winsect = fs->volbase + 1;
 80034d6:	0605                	addi	a2,a2,1
 80034d8:	d450                	sw	a2,44(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80034da:	85ca                	mv	a1,s2
 80034dc:	00000097          	auipc	ra,0x0
 80034e0:	76a080e7          	jalr	1898(ra) # 8003c46 <disk_write>
			fs->fsi_flag = 0;
 80034e4:	00040223          	sb	zero,4(s0)
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80034e8:	00144503          	lbu	a0,1(s0)
 80034ec:	4601                	li	a2,0
 80034ee:	4581                	li	a1,0
 80034f0:	00001097          	auipc	ra,0x1
 80034f4:	85e080e7          	jalr	-1954(ra) # 8003d4e <disk_ioctl>
 80034f8:	00a037b3          	snez	a5,a0
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
 80034fc:	0104c703          	lbu	a4,16(s1)
 8003500:	fbf77713          	andi	a4,a4,-65
 8003504:	00e48823          	sb	a4,16(s1)
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003508:	40f2                	lw	ra,28(sp)
 800350a:	4462                	lw	s0,24(sp)
 800350c:	44d2                	lw	s1,20(sp)
 800350e:	4942                	lw	s2,16(sp)
 8003510:	853e                	mv	a0,a5
 8003512:	6105                	addi	sp,sp,32
 8003514:	8082                	ret

08003516 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003516:	1101                	addi	sp,sp,-32
 8003518:	cc22                	sw	s0,24(sp)
 800351a:	ce06                	sw	ra,28(sp)
 800351c:	842a                	mv	s0,a0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800351e:	00000097          	auipc	ra,0x0
 8003522:	e48080e7          	jalr	-440(ra) # 8003366 <f_sync>
	if (res == FR_OK)
 8003526:	e911                	bnez	a0,800353a <f_close+0x24>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003528:	006c                	addi	a1,sp,12
 800352a:	8522                	mv	a0,s0
 800352c:	fffff097          	auipc	ra,0xfffff
 8003530:	c48080e7          	jalr	-952(ra) # 8002174 <validate>
		if (res == FR_OK) {
 8003534:	e119                	bnez	a0,800353a <f_close+0x24>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003536:	00042023          	sw	zero,0(s0)
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800353a:	40f2                	lw	ra,28(sp)
 800353c:	4462                	lw	s0,24(sp)
 800353e:	6105                	addi	sp,sp,32
 8003540:	8082                	ret

08003542 <set_fattime>:
#include "tf_card.h"

fat_time_t time = {.year = 2020, .month = 3, .day = 6, .hour = 0, .minute = 0};

void set_fattime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second){
    time.year = year;
 8003542:	20000837          	lui	a6,0x20000
 8003546:	4f080813          	addi	a6,a6,1264 # 200004f0 <time>
 800354a:	00a81023          	sh	a0,0(a6)
    time.month = month;
 800354e:	00b80123          	sb	a1,2(a6)
    time.day = day;
 8003552:	00c801a3          	sb	a2,3(a6)
    time.hour = hour;
 8003556:	00d80223          	sb	a3,4(a6)
    time.minute = minute;
 800355a:	00e802a3          	sb	a4,5(a6)
    time.second = second;
 800355e:	00f80323          	sb	a5,6(a6)
}
 8003562:	8082                	ret

08003564 <get_fattime>:

DWORD get_fattime (void){
	return
		(((uint8_t)(time.year - 1980))  << 25) |
		(time.month	                    << 21) |
 8003564:	20000737          	lui	a4,0x20000
 8003568:	4f070713          	addi	a4,a4,1264 # 200004f0 <time>
 800356c:	00274783          	lbu	a5,2(a4)
		(time.day	                    << 16) |
 8003570:	00374503          	lbu	a0,3(a4)
		(time.month	                    << 21) |
 8003574:	07d6                	slli	a5,a5,0x15
		(time.day	                    << 16) |
 8003576:	0542                	slli	a0,a0,0x10
		(time.hour	                    << 11) |
		(time.minute	                <<  5) |
 8003578:	8fc9                	or	a5,a5,a0
		(time.second	                <<  0);
 800357a:	00674503          	lbu	a0,6(a4)
		(time.minute	                <<  5) |
 800357e:	8fc9                	or	a5,a5,a0
		(time.hour	                    << 11) |
 8003580:	00474503          	lbu	a0,4(a4)
 8003584:	052e                	slli	a0,a0,0xb
		(time.minute	                <<  5) |
 8003586:	8fc9                	or	a5,a5,a0
 8003588:	00574503          	lbu	a0,5(a4)
 800358c:	0516                	slli	a0,a0,0x5
 800358e:	8fc9                	or	a5,a5,a0
		(((uint8_t)(time.year - 1980))  << 25) |
 8003590:	00074503          	lbu	a0,0(a4)
 8003594:	04450513          	addi	a0,a0,68
 8003598:	0566                	slli	a0,a0,0x19
 800359a:	8d5d                	or	a0,a0,a5
 800359c:	8082                	ret

0800359e <xchg_spi>:

/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
){
 800359e:	1141                	addi	sp,sp,-16
 80035a0:	c422                	sw	s0,8(sp)
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80035a2:	40004437          	lui	s0,0x40004
){
 80035a6:	c226                	sw	s1,4(sp)
 80035a8:	c04a                	sw	s2,0(sp)
 80035aa:	c606                	sw	ra,12(sp)
 80035ac:	84aa                	mv	s1,a0
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80035ae:	80040913          	addi	s2,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80035b2:	4589                	li	a1,2
 80035b4:	854a                	mv	a0,s2
 80035b6:	ffffe097          	auipc	ra,0xffffe
 80035ba:	e1e080e7          	jalr	-482(ra) # 80013d4 <spi_i2s_flag_get>
 80035be:	d975                	beqz	a0,80035b2 <xchg_spi+0x14>
        spi_i2s_data_transmit(SPI1, dat);
 80035c0:	85a6                	mv	a1,s1
 80035c2:	80040513          	addi	a0,s0,-2048
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80035c6:	40004437          	lui	s0,0x40004
        spi_i2s_data_transmit(SPI1, dat);
 80035ca:	ffffe097          	auipc	ra,0xffffe
 80035ce:	df2080e7          	jalr	-526(ra) # 80013bc <spi_i2s_data_transmit>
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80035d2:	80040493          	addi	s1,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80035d6:	4585                	li	a1,1
 80035d8:	8526                	mv	a0,s1
 80035da:	ffffe097          	auipc	ra,0xffffe
 80035de:	dfa080e7          	jalr	-518(ra) # 80013d4 <spi_i2s_flag_get>
 80035e2:	d975                	beqz	a0,80035d6 <xchg_spi+0x38>
        return(spi_i2s_data_receive(SPI1));     /* Return received byte */
 80035e4:	80040513          	addi	a0,s0,-2048
 80035e8:	ffffe097          	auipc	ra,0xffffe
 80035ec:	dd8080e7          	jalr	-552(ra) # 80013c0 <spi_i2s_data_receive>
}
 80035f0:	40b2                	lw	ra,12(sp)
 80035f2:	4422                	lw	s0,8(sp)
 80035f4:	4492                	lw	s1,4(sp)
 80035f6:	4902                	lw	s2,0(sp)
 80035f8:	0ff57513          	andi	a0,a0,255
 80035fc:	0141                	addi	sp,sp,16
 80035fe:	8082                	ret

08003600 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void){
 8003600:	1141                	addi	sp,sp,-16
	CS_HIGH();		/* Set CS# high */
 8003602:	40011537          	lui	a0,0x40011
 8003606:	6591                	lui	a1,0x4
void deselect (void){
 8003608:	c606                	sw	ra,12(sp)
	CS_HIGH();		/* Set CS# high */
 800360a:	ffffe097          	auipc	ra,0xffffe
 800360e:	994080e7          	jalr	-1644(ra) # 8000f9e <gpio_bit_set>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
}
 8003612:	40b2                	lw	ra,12(sp)
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003614:	0ff00513          	li	a0,255
}
 8003618:	0141                	addi	sp,sp,16
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800361a:	00000317          	auipc	t1,0x0
 800361e:	f8430067          	jr	-124(t1) # 800359e <xchg_spi>

08003622 <wait_ready>:
){
 8003622:	7139                	addi	sp,sp,-64
 8003624:	da26                	sw	s1,52(sp)
 8003626:	d05a                	sw	s6,32(sp)
 8003628:	ce5e                	sw	s7,28(sp)
 800362a:	cc62                	sw	s8,24(sp)
 800362c:	ca66                	sw	s9,20(sp)
 800362e:	c86a                	sw	s10,16(sp)
 8003630:	de06                	sw	ra,60(sp)
 8003632:	dc22                	sw	s0,56(sp)
 8003634:	d84a                	sw	s2,48(sp)
 8003636:	d64e                	sw	s3,44(sp)
 8003638:	d452                	sw	s4,40(sp)
 800363a:	d256                	sw	s5,36(sp)
 800363c:	84aa                	mv	s1,a0
	start_mtime = get_timer_value();
 800363e:	ffffe097          	auipc	ra,0xffffe
 8003642:	74c080e7          	jalr	1868(ra) # 8001d8a <get_timer_value>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003646:	080007b7          	lui	a5,0x8000
 800364a:	2e07ab03          	lw	s6,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 800364e:	2e47ab83          	lw	s7,740(a5)
	start_mtime = get_timer_value();
 8003652:	8caa                	mv	s9,a0
 8003654:	8d2e                	mv	s10,a1
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003656:	20000c37          	lui	s8,0x20000
		delta_mtime = get_timer_value();
 800365a:	ffffe097          	auipc	ra,0xffffe
 800365e:	730080e7          	jalr	1840(ra) # 8001d8a <get_timer_value>
		delta_mtime -=  start_mtime;
 8003662:	41950933          	sub	s2,a0,s9
 8003666:	01253533          	sltu	a0,a0,s2
 800366a:	41a585b3          	sub	a1,a1,s10
 800366e:	8d89                	sub	a1,a1,a0
		d = xchg_spi(0xFF);
 8003670:	0ff00513          	li	a0,255
		delta_mtime -=  start_mtime;
 8003674:	c62e                	sw	a1,12(sp)
		d = xchg_spi(0xFF);
 8003676:	00000097          	auipc	ra,0x0
 800367a:	f28080e7          	jalr	-216(ra) # 800359e <xchg_spi>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800367e:	0ff00793          	li	a5,255
		d = xchg_spi(0xFF);
 8003682:	842a                	mv	s0,a0
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003684:	04f50f63          	beq	a0,a5,80036e2 <wait_ready+0xc0>
 8003688:	45b2                	lw	a1,12(sp)
 800368a:	854a                	mv	a0,s2
 800368c:	00004097          	auipc	ra,0x4
 8003690:	04a080e7          	jalr	74(ra) # 80076d6 <__floatundidf>
 8003694:	892a                	mv	s2,a0
 8003696:	4e8c2503          	lw	a0,1256(s8) # 200004e8 <SystemCoreClock>
 800369a:	89ae                	mv	s3,a1
 800369c:	00004097          	auipc	ra,0x4
 80036a0:	fe4080e7          	jalr	-28(ra) # 8007680 <__floatunsidf>
 80036a4:	865a                	mv	a2,s6
 80036a6:	86de                	mv	a3,s7
 80036a8:	00003097          	auipc	ra,0x3
 80036ac:	4ce080e7          	jalr	1230(ra) # 8006b76 <__divdf3>
 80036b0:	8a2a                	mv	s4,a0
 80036b2:	8526                	mv	a0,s1
 80036b4:	8aae                	mv	s5,a1
 80036b6:	00004097          	auipc	ra,0x4
 80036ba:	fca080e7          	jalr	-54(ra) # 8007680 <__floatunsidf>
 80036be:	862a                	mv	a2,a0
 80036c0:	86ae                	mv	a3,a1
 80036c2:	8552                	mv	a0,s4
 80036c4:	85d6                	mv	a1,s5
 80036c6:	00004097          	auipc	ra,0x4
 80036ca:	a9a080e7          	jalr	-1382(ra) # 8007160 <__muldf3>
 80036ce:	862a                	mv	a2,a0
 80036d0:	86ae                	mv	a3,a1
 80036d2:	854a                	mv	a0,s2
 80036d4:	85ce                	mv	a1,s3
 80036d6:	00004097          	auipc	ra,0x4
 80036da:	9e6080e7          	jalr	-1562(ra) # 80070bc <__ledf2>
 80036de:	f6054ee3          	bltz	a0,800365a <wait_ready+0x38>
	return (d == 0xFF) ? 1 : 0; 
 80036e2:	f0140513          	addi	a0,s0,-255
}
 80036e6:	50f2                	lw	ra,60(sp)
 80036e8:	5462                	lw	s0,56(sp)
 80036ea:	54d2                	lw	s1,52(sp)
 80036ec:	5942                	lw	s2,48(sp)
 80036ee:	59b2                	lw	s3,44(sp)
 80036f0:	5a22                	lw	s4,40(sp)
 80036f2:	5a92                	lw	s5,36(sp)
 80036f4:	5b02                	lw	s6,32(sp)
 80036f6:	4bf2                	lw	s7,28(sp)
 80036f8:	4c62                	lw	s8,24(sp)
 80036fa:	4cd2                	lw	s9,20(sp)
 80036fc:	4d42                	lw	s10,16(sp)
 80036fe:	00153513          	seqz	a0,a0
 8003702:	6121                	addi	sp,sp,64
 8003704:	8082                	ret

08003706 <_select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int _select (void)	/* 1:OK, 0:Timeout */
{
 8003706:	1101                	addi	sp,sp,-32
	CS_LOW();		/* Set CS# low */
 8003708:	6591                	lui	a1,0x4
 800370a:	40011537          	lui	a0,0x40011
{
 800370e:	ce06                	sw	ra,28(sp)
	CS_LOW();		/* Set CS# low */
 8003710:	ffffe097          	auipc	ra,0xffffe
 8003714:	892080e7          	jalr	-1902(ra) # 8000fa2 <gpio_bit_reset>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003718:	0ff00513          	li	a0,255
 800371c:	00000097          	auipc	ra,0x0
 8003720:	e82080e7          	jalr	-382(ra) # 800359e <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003724:	1f400513          	li	a0,500
 8003728:	00000097          	auipc	ra,0x0
 800372c:	efa080e7          	jalr	-262(ra) # 8003622 <wait_ready>
 8003730:	c62a                	sw	a0,12(sp)
 8003732:	e909                	bnez	a0,8003744 <_select+0x3e>

	deselect();
 8003734:	00000097          	auipc	ra,0x0
 8003738:	ecc080e7          	jalr	-308(ra) # 8003600 <deselect>
	return 0;	/* Timeout */
 800373c:	4532                	lw	a0,12(sp)
}
 800373e:	40f2                	lw	ra,28(sp)
 8003740:	6105                	addi	sp,sp,32
 8003742:	8082                	ret
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003744:	4505                	li	a0,1
 8003746:	bfe5                	j	800373e <_select+0x38>

08003748 <send_cmd>:

static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
){
 8003748:	1141                	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800374a:	01851793          	slli	a5,a0,0x18
){
 800374e:	c422                	sw	s0,8(sp)
 8003750:	c226                	sw	s1,4(sp)
 8003752:	c606                	sw	ra,12(sp)
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003754:	87e1                	srai	a5,a5,0x18
){
 8003756:	842a                	mv	s0,a0
 8003758:	84ae                	mv	s1,a1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800375a:	0007df63          	bgez	a5,8003778 <send_cmd+0x30>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 800375e:	4581                	li	a1,0
 8003760:	03700513          	li	a0,55
 8003764:	00000097          	auipc	ra,0x0
 8003768:	fe4080e7          	jalr	-28(ra) # 8003748 <send_cmd>
		if (res > 1) return res;
 800376c:	4705                	li	a4,1
		res = send_cmd(CMD55, 0);
 800376e:	87aa                	mv	a5,a0
		if (res > 1) return res;
 8003770:	0aa76c63          	bltu	a4,a0,8003828 <send_cmd+0xe0>
		cmd &= 0x7F;
 8003774:	07f47413          	andi	s0,s0,127
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003778:	47b1                	li	a5,12
 800377a:	08f41c63          	bne	s0,a5,8003812 <send_cmd+0xca>
		deselect();
		if (!_select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800377e:	04046513          	ori	a0,s0,64
 8003782:	00000097          	auipc	ra,0x0
 8003786:	e1c080e7          	jalr	-484(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800378a:	0184d513          	srli	a0,s1,0x18
 800378e:	00000097          	auipc	ra,0x0
 8003792:	e10080e7          	jalr	-496(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003796:	0104d513          	srli	a0,s1,0x10
 800379a:	0ff57513          	andi	a0,a0,255
 800379e:	00000097          	auipc	ra,0x0
 80037a2:	e00080e7          	jalr	-512(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80037a6:	0084d513          	srli	a0,s1,0x8
 80037aa:	0ff57513          	andi	a0,a0,255
 80037ae:	00000097          	auipc	ra,0x0
 80037b2:	df0080e7          	jalr	-528(ra) # 800359e <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80037b6:	0ff4f513          	andi	a0,s1,255
 80037ba:	00000097          	auipc	ra,0x0
 80037be:	de4080e7          	jalr	-540(ra) # 800359e <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80037c2:	09500513          	li	a0,149
 80037c6:	c419                	beqz	s0,80037d4 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037c8:	47a1                	li	a5,8
	n = 0x01;							/* Dummy CRC + Stop */
 80037ca:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037cc:	00f41463          	bne	s0,a5,80037d4 <send_cmd+0x8c>
 80037d0:	08700513          	li	a0,135
	xchg_spi(n);
 80037d4:	00000097          	auipc	ra,0x0
 80037d8:	dca080e7          	jalr	-566(ra) # 800359e <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80037dc:	47b1                	li	a5,12
 80037de:	00f41863          	bne	s0,a5,80037ee <send_cmd+0xa6>
 80037e2:	0ff00513          	li	a0,255
 80037e6:	00000097          	auipc	ra,0x0
 80037ea:	db8080e7          	jalr	-584(ra) # 800359e <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037ee:	4429                	li	s0,10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 80037f0:	0ff00513          	li	a0,255
 80037f4:	00000097          	auipc	ra,0x0
 80037f8:	daa080e7          	jalr	-598(ra) # 800359e <xchg_spi>
	} while ((res & 0x80) && --n);
 80037fc:	01851713          	slli	a4,a0,0x18
 8003800:	8761                	srai	a4,a4,0x18
		res = xchg_spi(0xFF);
 8003802:	87aa                	mv	a5,a0
	} while ((res & 0x80) && --n);
 8003804:	02075263          	bgez	a4,8003828 <send_cmd+0xe0>
 8003808:	147d                	addi	s0,s0,-1
 800380a:	0ff47413          	andi	s0,s0,255
 800380e:	f06d                	bnez	s0,80037f0 <send_cmd+0xa8>
 8003810:	a821                	j	8003828 <send_cmd+0xe0>
		deselect();
 8003812:	00000097          	auipc	ra,0x0
 8003816:	dee080e7          	jalr	-530(ra) # 8003600 <deselect>
		if (!_select()) return 0xFF;
 800381a:	00000097          	auipc	ra,0x0
 800381e:	eec080e7          	jalr	-276(ra) # 8003706 <_select>
 8003822:	0ff00793          	li	a5,255
 8003826:	fd21                	bnez	a0,800377e <send_cmd+0x36>

	return res;							/* Return received response */
}
 8003828:	40b2                	lw	ra,12(sp)
 800382a:	4422                	lw	s0,8(sp)
 800382c:	4492                	lw	s1,4(sp)
 800382e:	853e                	mv	a0,a5
 8003830:	0141                	addi	sp,sp,16
 8003832:	8082                	ret

08003834 <rcvr_datablock>:
){
 8003834:	1141                	addi	sp,sp,-16
 8003836:	c422                	sw	s0,8(sp)
 8003838:	842a                	mv	s0,a0
	tf_start_timer(200);
 800383a:	0c800513          	li	a0,200
){
 800383e:	c226                	sw	s1,4(sp)
 8003840:	c606                	sw	ra,12(sp)
 8003842:	84ae                	mv	s1,a1
	tf_start_timer(200);
 8003844:	00000097          	auipc	ra,0x0
 8003848:	728080e7          	jalr	1832(ra) # 8003f6c <tf_start_timer>
		token = xchg_spi(0xFF);
 800384c:	0ff00513          	li	a0,255
 8003850:	00000097          	auipc	ra,0x0
 8003854:	d4e080e7          	jalr	-690(ra) # 800359e <xchg_spi>
	} while ((token == 0xFF) && tf_timer_done());
 8003858:	0ff00793          	li	a5,255
 800385c:	00f51d63          	bne	a0,a5,8003876 <rcvr_datablock+0x42>
 8003860:	00000097          	auipc	ra,0x0
 8003864:	766080e7          	jalr	1894(ra) # 8003fc6 <tf_timer_done>
 8003868:	f175                	bnez	a0,800384c <rcvr_datablock+0x18>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800386a:	4501                	li	a0,0
}
 800386c:	40b2                	lw	ra,12(sp)
 800386e:	4422                	lw	s0,8(sp)
 8003870:	4492                	lw	s1,4(sp)
 8003872:	0141                	addi	sp,sp,16
 8003874:	8082                	ret
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003876:	0fe00793          	li	a5,254
 800387a:	fef518e3          	bne	a0,a5,800386a <rcvr_datablock+0x36>
 800387e:	0485                	addi	s1,s1,1
 8003880:	94a2                	add	s1,s1,s0
		*buff = xchg_spi(0xff);
 8003882:	0ff00513          	li	a0,255
 8003886:	00000097          	auipc	ra,0x0
 800388a:	d18080e7          	jalr	-744(ra) # 800359e <xchg_spi>
 800388e:	00a40023          	sb	a0,0(s0)
		buff++;
 8003892:	0405                	addi	s0,s0,1
	} while (btr--);
 8003894:	fe8497e3          	bne	s1,s0,8003882 <rcvr_datablock+0x4e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003898:	0ff00513          	li	a0,255
 800389c:	00000097          	auipc	ra,0x0
 80038a0:	d02080e7          	jalr	-766(ra) # 800359e <xchg_spi>
 80038a4:	0ff00513          	li	a0,255
 80038a8:	00000097          	auipc	ra,0x0
 80038ac:	cf6080e7          	jalr	-778(ra) # 800359e <xchg_spi>
 80038b0:	4505                	li	a0,1
 80038b2:	bf6d                	j	800386c <rcvr_datablock+0x38>

080038b4 <xmit_datablock.part.1>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 80038b4:	1141                	addi	sp,sp,-16
 80038b6:	c422                	sw	s0,8(sp)
 80038b8:	c226                	sw	s1,4(sp)
 80038ba:	c04a                	sw	s2,0(sp)
 80038bc:	c606                	sw	ra,12(sp)
 80038be:	892a                	mv	s2,a0
	for(UINT i=0; i<btx; i++) {
 80038c0:	4401                	li	s0,0
 80038c2:	20000493          	li	s1,512
		xchg_spi(*(buff+i));
 80038c6:	008907b3          	add	a5,s2,s0
 80038ca:	0007c503          	lbu	a0,0(a5)
	for(UINT i=0; i<btx; i++) {
 80038ce:	0405                	addi	s0,s0,1
		xchg_spi(*(buff+i));
 80038d0:	00000097          	auipc	ra,0x0
 80038d4:	cce080e7          	jalr	-818(ra) # 800359e <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80038d8:	fe9417e3          	bne	s0,s1,80038c6 <xmit_datablock.part.1+0x12>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80038dc:	0ff00513          	li	a0,255
 80038e0:	00000097          	auipc	ra,0x0
 80038e4:	cbe080e7          	jalr	-834(ra) # 800359e <xchg_spi>
 80038e8:	0ff00513          	li	a0,255
 80038ec:	00000097          	auipc	ra,0x0
 80038f0:	cb2080e7          	jalr	-846(ra) # 800359e <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80038f4:	0ff00513          	li	a0,255
 80038f8:	00000097          	auipc	ra,0x0
 80038fc:	ca6080e7          	jalr	-858(ra) # 800359e <xchg_spi>
}
 8003900:	40b2                	lw	ra,12(sp)
 8003902:	4422                	lw	s0,8(sp)
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003904:	897d                	andi	a0,a0,31
 8003906:	156d                	addi	a0,a0,-5
}
 8003908:	4492                	lw	s1,4(sp)
 800390a:	4902                	lw	s2,0(sp)
 800390c:	00153513          	seqz	a0,a0
 8003910:	0141                	addi	sp,sp,16
 8003912:	8082                	ret

08003914 <disk_initialize>:

DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003914:	26051c63          	bnez	a0,8003b8c <disk_initialize+0x278>
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 8003918:	7179                	addi	sp,sp,-48
    rcu_periph_clock_enable(RCU_GPIOB);
 800391a:	60300513          	li	a0,1539
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 800391e:	d606                	sw	ra,44(sp)
 8003920:	d422                	sw	s0,40(sp)
 8003922:	d226                	sw	s1,36(sp)
 8003924:	d04a                	sw	s2,32(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8003926:	ffffe097          	auipc	ra,0xffffe
 800392a:	87c080e7          	jalr	-1924(ra) # 80011a2 <rcu_periph_clock_enable>
	rcu_periph_clock_enable(RCU_GPIOC);
 800392e:	60400513          	li	a0,1540
 8003932:	ffffe097          	auipc	ra,0xffffe
 8003936:	870080e7          	jalr	-1936(ra) # 80011a2 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_SPI1);
 800393a:	70e00513          	li	a0,1806
 800393e:	ffffe097          	auipc	ra,0xffffe
 8003942:	864080e7          	jalr	-1948(ra) # 80011a2 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_13 | GPIO_PIN_15);
 8003946:	40011437          	lui	s0,0x40011
 800394a:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 800394e:	66a9                	lui	a3,0xa
 8003950:	460d                	li	a2,3
 8003952:	45e1                	li	a1,24
 8003954:	ffffd097          	auipc	ra,0xffffd
 8003958:	5a6080e7          	jalr	1446(ra) # 8000efa <gpio_init>
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 800395c:	c0040513          	addi	a0,s0,-1024
 8003960:	6691                	lui	a3,0x4
 8003962:	460d                	li	a2,3
 8003964:	4591                	li	a1,4
 8003966:	ffffd097          	auipc	ra,0xffffd
 800396a:	594080e7          	jalr	1428(ra) # 8000efa <gpio_init>
    gpio_init(GPIOC, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 800396e:	6691                	lui	a3,0x4
 8003970:	460d                	li	a2,3
 8003972:	45c1                	li	a1,16
 8003974:	40011537          	lui	a0,0x40011
 8003978:	ffffd097          	auipc	ra,0xffffd
 800397c:	582080e7          	jalr	1410(ra) # 8000efa <gpio_init>
    CS_HIGH();
 8003980:	6591                	lui	a1,0x4
 8003982:	40011537          	lui	a0,0x40011
 8003986:	ffffd097          	auipc	ra,0xffffd
 800398a:	618080e7          	jalr	1560(ra) # 8000f9e <gpio_bit_set>
    spi_init_struct.device_mode          = SPI_MASTER;
 800398e:	10400793          	li	a5,260
 8003992:	c23e                	sw	a5,4(sp)
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 8003994:	478d                	li	a5,3
    spi_init(SPI1, &spi_init_struct);
 8003996:	400044b7          	lui	s1,0x40004
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 800399a:	cc3e                	sw	a5,24(sp)
    spi_init_struct.nss                  = SPI_NSS_SOFT;
 800399c:	20000793          	li	a5,512
 80039a0:	c83e                	sw	a5,16(sp)
    spi_init(SPI1, &spi_init_struct);
 80039a2:	004c                	addi	a1,sp,4
    spi_init_struct.prescale             = SPI_PSC_64;
 80039a4:	02800793          	li	a5,40
    spi_init(SPI1, &spi_init_struct);
 80039a8:	80048513          	addi	a0,s1,-2048 # 40003800 <_sp+0x1fffb800>
    spi_init_struct.prescale             = SPI_PSC_64;
 80039ac:	ce3e                	sw	a5,28(sp)
    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;
 80039ae:	c402                	sw	zero,8(sp)
    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;
 80039b0:	c602                	sw	zero,12(sp)
    spi_init_struct.endian               = SPI_ENDIAN_MSB;
 80039b2:	ca02                	sw	zero,20(sp)
    spi_init(SPI1, &spi_init_struct);
 80039b4:	ffffe097          	auipc	ra,0xffffe
 80039b8:	9c8080e7          	jalr	-1592(ra) # 800137c <spi_init>
    spi_crc_polynomial_set(SPI1,7);
 80039bc:	459d                	li	a1,7
 80039be:	80048513          	addi	a0,s1,-2048
 80039c2:	ffffe097          	auipc	ra,0xffffe
 80039c6:	a06080e7          	jalr	-1530(ra) # 80013c8 <spi_crc_polynomial_set>
    spi_enable(SPI1);
 80039ca:	80048513          	addi	a0,s1,-2048
 80039ce:	ffffe097          	auipc	ra,0xffffe
 80039d2:	9e4080e7          	jalr	-1564(ra) # 80013b2 <spi_enable>
	init_spi();							/* Initialize SPI */
    delay_1ms(10);
 80039d6:	4529                	li	a0,10
 80039d8:	00001097          	auipc	ra,0x1
 80039dc:	dce080e7          	jalr	-562(ra) # 80047a6 <delay_1ms>
    //init_timer2();

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80039e0:	20000437          	lui	s0,0x20000
 80039e4:	4f840713          	addi	a4,s0,1272 # 200004f8 <Stat>
 80039e8:	00074783          	lbu	a5,0(a4)
 80039ec:	4f840413          	addi	s0,s0,1272
 80039f0:	8b89                	andi	a5,a5,2
 80039f2:	cb99                	beqz	a5,8003a08 <disk_initialize+0xf4>
 80039f4:	00074503          	lbu	a0,0(a4)
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
}
 80039f8:	50b2                	lw	ra,44(sp)
 80039fa:	5422                	lw	s0,40(sp)
 80039fc:	5492                	lw	s1,36(sp)
 80039fe:	5902                	lw	s2,32(sp)
	return Stat;
 8003a00:	0ff57513          	andi	a0,a0,255
}
 8003a04:	6145                	addi	sp,sp,48
 8003a06:	8082                	ret
	FCLK_SLOW();
 8003a08:	8004a783          	lw	a5,-2048(s1)
	CS_LOW();
 8003a0c:	6591                	lui	a1,0x4
 8003a0e:	40011537          	lui	a0,0x40011
	FCLK_SLOW();
 8003a12:	fc77f793          	andi	a5,a5,-57
 8003a16:	0287e793          	ori	a5,a5,40
 8003a1a:	80f4a023          	sw	a5,-2048(s1)
	CS_LOW();
 8003a1e:	ffffd097          	auipc	ra,0xffffd
 8003a22:	584080e7          	jalr	1412(ra) # 8000fa2 <gpio_bit_reset>
 8003a26:	44a9                	li	s1,10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003a28:	14fd                	addi	s1,s1,-1
 8003a2a:	0ff00513          	li	a0,255
 8003a2e:	0ff4f493          	andi	s1,s1,255
 8003a32:	00000097          	auipc	ra,0x0
 8003a36:	b6c080e7          	jalr	-1172(ra) # 800359e <xchg_spi>
 8003a3a:	f4fd                	bnez	s1,8003a28 <disk_initialize+0x114>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003a3c:	4581                	li	a1,0
 8003a3e:	4501                	li	a0,0
 8003a40:	00000097          	auipc	ra,0x0
 8003a44:	d08080e7          	jalr	-760(ra) # 8003748 <send_cmd>
 8003a48:	4785                	li	a5,1
 8003a4a:	892a                	mv	s2,a0
 8003a4c:	12f51e63          	bne	a0,a5,8003b88 <disk_initialize+0x274>
		tf_start_timer(1000);						/* Initialization timeout = 1 sec */
 8003a50:	3e800513          	li	a0,1000
 8003a54:	00000097          	auipc	ra,0x0
 8003a58:	518080e7          	jalr	1304(ra) # 8003f6c <tf_start_timer>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003a5c:	1aa00593          	li	a1,426
 8003a60:	4521                	li	a0,8
 8003a62:	00000097          	auipc	ra,0x0
 8003a66:	ce6080e7          	jalr	-794(ra) # 8003748 <send_cmd>
 8003a6a:	0d251963          	bne	a0,s2,8003b3c <disk_initialize+0x228>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003a6e:	4911                	li	s2,4
 8003a70:	0ff00513          	li	a0,255
 8003a74:	00000097          	auipc	ra,0x0
 8003a78:	b2a080e7          	jalr	-1238(ra) # 800359e <xchg_spi>
 8003a7c:	005c                	addi	a5,sp,4
 8003a7e:	97a6                	add	a5,a5,s1
 8003a80:	00a78023          	sb	a0,0(a5)
 8003a84:	0485                	addi	s1,s1,1
 8003a86:	ff2495e3          	bne	s1,s2,8003a70 <disk_initialize+0x15c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003a8a:	00614703          	lbu	a4,6(sp)
 8003a8e:	4785                	li	a5,1
 8003a90:	0ef71c63          	bne	a4,a5,8003b88 <disk_initialize+0x274>
 8003a94:	00714703          	lbu	a4,7(sp)
 8003a98:	0aa00793          	li	a5,170
 8003a9c:	0ef71663          	bne	a4,a5,8003b88 <disk_initialize+0x274>
				while (tf_timer_done() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003aa0:	00000097          	auipc	ra,0x0
 8003aa4:	526080e7          	jalr	1318(ra) # 8003fc6 <tf_timer_done>
 8003aa8:	c911                	beqz	a0,8003abc <disk_initialize+0x1a8>
 8003aaa:	400005b7          	lui	a1,0x40000
 8003aae:	0a900513          	li	a0,169
 8003ab2:	00000097          	auipc	ra,0x0
 8003ab6:	c96080e7          	jalr	-874(ra) # 8003748 <send_cmd>
 8003aba:	f17d                	bnez	a0,8003aa0 <disk_initialize+0x18c>
				if (tf_timer_done() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003abc:	00000097          	auipc	ra,0x0
 8003ac0:	50a080e7          	jalr	1290(ra) # 8003fc6 <tf_timer_done>
 8003ac4:	c171                	beqz	a0,8003b88 <disk_initialize+0x274>
 8003ac6:	4581                	li	a1,0
 8003ac8:	03a00513          	li	a0,58
 8003acc:	00000097          	auipc	ra,0x0
 8003ad0:	c7c080e7          	jalr	-900(ra) # 8003748 <send_cmd>
 8003ad4:	e955                	bnez	a0,8003b88 <disk_initialize+0x274>
 8003ad6:	4481                	li	s1,0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003ad8:	4911                	li	s2,4
 8003ada:	0ff00513          	li	a0,255
 8003ade:	00000097          	auipc	ra,0x0
 8003ae2:	ac0080e7          	jalr	-1344(ra) # 800359e <xchg_spi>
 8003ae6:	005c                	addi	a5,sp,4
 8003ae8:	97a6                	add	a5,a5,s1
 8003aea:	00a78023          	sb	a0,0(a5)
 8003aee:	0485                	addi	s1,s1,1
 8003af0:	ff2495e3          	bne	s1,s2,8003ada <disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003af4:	00414783          	lbu	a5,4(sp)
 8003af8:	44b1                	li	s1,12
 8003afa:	0407f793          	andi	a5,a5,64
 8003afe:	e391                	bnez	a5,8003b02 <disk_initialize+0x1ee>
 8003b00:	4491                	li	s1,4
	CardType = ty;	/* Card type */
 8003b02:	200007b7          	lui	a5,0x20000
 8003b06:	50978b23          	sb	s1,1302(a5) # 20000516 <CardType>
	deselect();
 8003b0a:	00000097          	auipc	ra,0x0
 8003b0e:	af6080e7          	jalr	-1290(ra) # 8003600 <deselect>
		Stat = STA_NOINIT;
 8003b12:	4785                	li	a5,1
	if (ty) {			/* OK */
 8003b14:	cc99                	beqz	s1,8003b32 <disk_initialize+0x21e>
		FCLK_FAST();			/* Set fast clock */
 8003b16:	40004737          	lui	a4,0x40004
 8003b1a:	80072783          	lw	a5,-2048(a4) # 40003800 <_sp+0x1fffb800>
 8003b1e:	fc77f793          	andi	a5,a5,-57
 8003b22:	0287e793          	ori	a5,a5,40
 8003b26:	80f72023          	sw	a5,-2048(a4)
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b2a:	00044783          	lbu	a5,0(s0)
 8003b2e:	0fe7f793          	andi	a5,a5,254
		Stat = STA_NOINIT;
 8003b32:	00f40023          	sb	a5,0(s0)
	return Stat;
 8003b36:	00044503          	lbu	a0,0(s0)
 8003b3a:	bd7d                	j	80039f8 <disk_initialize+0xe4>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b3c:	4581                	li	a1,0
 8003b3e:	0a900513          	li	a0,169
 8003b42:	00000097          	auipc	ra,0x0
 8003b46:	c06080e7          	jalr	-1018(ra) # 8003748 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003b4a:	4485                	li	s1,1
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b4c:	00a96563          	bltu	s2,a0,8003b56 <disk_initialize+0x242>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003b50:	4489                	li	s1,2
 8003b52:	0a900913          	li	s2,169
			while (tf_timer_done() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003b56:	00000097          	auipc	ra,0x0
 8003b5a:	470080e7          	jalr	1136(ra) # 8003fc6 <tf_timer_done>
 8003b5e:	c901                	beqz	a0,8003b6e <disk_initialize+0x25a>
 8003b60:	4581                	li	a1,0
 8003b62:	854a                	mv	a0,s2
 8003b64:	00000097          	auipc	ra,0x0
 8003b68:	be4080e7          	jalr	-1052(ra) # 8003748 <send_cmd>
 8003b6c:	f56d                	bnez	a0,8003b56 <disk_initialize+0x242>
			if (!tf_timer_done() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003b6e:	00000097          	auipc	ra,0x0
 8003b72:	458080e7          	jalr	1112(ra) # 8003fc6 <tf_timer_done>
 8003b76:	c909                	beqz	a0,8003b88 <disk_initialize+0x274>
 8003b78:	20000593          	li	a1,512
 8003b7c:	4541                	li	a0,16
 8003b7e:	00000097          	auipc	ra,0x0
 8003b82:	bca080e7          	jalr	-1078(ra) # 8003748 <send_cmd>
 8003b86:	dd35                	beqz	a0,8003b02 <disk_initialize+0x1ee>
				ty = 0;
 8003b88:	4481                	li	s1,0
 8003b8a:	bfa5                	j	8003b02 <disk_initialize+0x1ee>
	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003b8c:	4505                	li	a0,1
}
 8003b8e:	8082                	ret

08003b90 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
){
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003b90:	e901                	bnez	a0,8003ba0 <disk_status+0x10>

	return Stat;	/* Return disk status */
 8003b92:	200007b7          	lui	a5,0x20000
 8003b96:	4f87c503          	lbu	a0,1272(a5) # 200004f8 <Stat>
 8003b9a:	0ff57513          	andi	a0,a0,255
 8003b9e:	8082                	ret
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003ba0:	4505                	li	a0,1
}
 8003ba2:	8082                	ret

08003ba4 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ba4:	ed59                	bnez	a0,8003c42 <disk_read+0x9e>
){
 8003ba6:	1141                	addi	sp,sp,-16
 8003ba8:	c422                	sw	s0,8(sp)
 8003baa:	c606                	sw	ra,12(sp)
 8003bac:	c226                	sw	s1,4(sp)
 8003bae:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003bb0:	4511                	li	a0,4
 8003bb2:	cab1                	beqz	a3,8003c06 <disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003bb4:	200007b7          	lui	a5,0x20000
 8003bb8:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003bbc:	450d                	li	a0,3
 8003bbe:	8b85                	andi	a5,a5,1
 8003bc0:	e3b9                	bnez	a5,8003c06 <disk_read+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003bc2:	200007b7          	lui	a5,0x20000
 8003bc6:	5167c783          	lbu	a5,1302(a5) # 20000516 <CardType>
 8003bca:	84ae                	mv	s1,a1
 8003bcc:	85b2                	mv	a1,a2
 8003bce:	8ba1                	andi	a5,a5,8
 8003bd0:	e399                	bnez	a5,8003bd6 <disk_read+0x32>
 8003bd2:	00961593          	slli	a1,a2,0x9

	if (count == 1) {	/* Single sector read */
 8003bd6:	4785                	li	a5,1
 8003bd8:	02f41c63          	bne	s0,a5,8003c10 <disk_read+0x6c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003bdc:	4545                	li	a0,17
 8003bde:	00000097          	auipc	ra,0x0
 8003be2:	b6a080e7          	jalr	-1174(ra) # 8003748 <send_cmd>
 8003be6:	e911                	bnez	a0,8003bfa <disk_read+0x56>
			&& rcvr_datablock(buff, 512)) {
 8003be8:	20000593          	li	a1,512
 8003bec:	8526                	mv	a0,s1
 8003bee:	00000097          	auipc	ra,0x0
 8003bf2:	c46080e7          	jalr	-954(ra) # 8003834 <rcvr_datablock>
 8003bf6:	00153413          	seqz	s0,a0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
 8003bfa:	00000097          	auipc	ra,0x0
 8003bfe:	a06080e7          	jalr	-1530(ra) # 8003600 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003c02:	00803533          	snez	a0,s0
}
 8003c06:	40b2                	lw	ra,12(sp)
 8003c08:	4422                	lw	s0,8(sp)
 8003c0a:	4492                	lw	s1,4(sp)
 8003c0c:	0141                	addi	sp,sp,16
 8003c0e:	8082                	ret
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003c10:	4549                	li	a0,18
 8003c12:	00000097          	auipc	ra,0x0
 8003c16:	b36080e7          	jalr	-1226(ra) # 8003748 <send_cmd>
 8003c1a:	f165                	bnez	a0,8003bfa <disk_read+0x56>
				if (!rcvr_datablock(buff, 512)) break;
 8003c1c:	20000593          	li	a1,512
 8003c20:	8526                	mv	a0,s1
 8003c22:	00000097          	auipc	ra,0x0
 8003c26:	c12080e7          	jalr	-1006(ra) # 8003834 <rcvr_datablock>
 8003c2a:	c509                	beqz	a0,8003c34 <disk_read+0x90>
			} while (--count);
 8003c2c:	147d                	addi	s0,s0,-1
				buff += 512;
 8003c2e:	20048493          	addi	s1,s1,512
			} while (--count);
 8003c32:	f46d                	bnez	s0,8003c1c <disk_read+0x78>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003c34:	4581                	li	a1,0
 8003c36:	4531                	li	a0,12
 8003c38:	00000097          	auipc	ra,0x0
 8003c3c:	b10080e7          	jalr	-1264(ra) # 8003748 <send_cmd>
 8003c40:	bf6d                	j	8003bfa <disk_read+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c42:	4511                	li	a0,4
}
 8003c44:	8082                	ret

08003c46 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c46:	10051263          	bnez	a0,8003d4a <disk_write+0x104>
){
 8003c4a:	1101                	addi	sp,sp,-32
 8003c4c:	cc22                	sw	s0,24(sp)
 8003c4e:	ce06                	sw	ra,28(sp)
 8003c50:	ca26                	sw	s1,20(sp)
 8003c52:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c54:	4511                	li	a0,4
 8003c56:	caa9                	beqz	a3,8003ca8 <disk_write+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003c58:	200007b7          	lui	a5,0x20000
 8003c5c:	4f878793          	addi	a5,a5,1272 # 200004f8 <Stat>
 8003c60:	0007c703          	lbu	a4,0(a5)
 8003c64:	450d                	li	a0,3
 8003c66:	8b05                	andi	a4,a4,1
 8003c68:	e321                	bnez	a4,8003ca8 <disk_write+0x62>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003c6a:	0007c783          	lbu	a5,0(a5)
 8003c6e:	4509                	li	a0,2
 8003c70:	8b91                	andi	a5,a5,4
 8003c72:	eb9d                	bnez	a5,8003ca8 <disk_write+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003c74:	200007b7          	lui	a5,0x20000
 8003c78:	5167c783          	lbu	a5,1302(a5) # 20000516 <CardType>
 8003c7c:	84ae                	mv	s1,a1
 8003c7e:	0087f713          	andi	a4,a5,8
 8003c82:	e311                	bnez	a4,8003c86 <disk_write+0x40>
 8003c84:	0626                	slli	a2,a2,0x9

	if (count == 1) {	/* Single sector write */
 8003c86:	4705                	li	a4,1
 8003c88:	04e41a63          	bne	s0,a4,8003cdc <disk_write+0x96>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003c8c:	85b2                	mv	a1,a2
 8003c8e:	4561                	li	a0,24
 8003c90:	00000097          	auipc	ra,0x0
 8003c94:	ab8080e7          	jalr	-1352(ra) # 8003748 <send_cmd>
 8003c98:	cd09                	beqz	a0,8003cb2 <disk_write+0x6c>
){
 8003c9a:	4405                	li	s0,1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
 8003c9c:	00000097          	auipc	ra,0x0
 8003ca0:	964080e7          	jalr	-1692(ra) # 8003600 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ca4:	00803533          	snez	a0,s0
}
 8003ca8:	40f2                	lw	ra,28(sp)
 8003caa:	4462                	lw	s0,24(sp)
 8003cac:	44d2                	lw	s1,20(sp)
 8003cae:	6105                	addi	sp,sp,32
 8003cb0:	8082                	ret
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003cb2:	1f400513          	li	a0,500
 8003cb6:	00000097          	auipc	ra,0x0
 8003cba:	96c080e7          	jalr	-1684(ra) # 8003622 <wait_ready>
 8003cbe:	dd71                	beqz	a0,8003c9a <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003cc0:	0fe00513          	li	a0,254
 8003cc4:	00000097          	auipc	ra,0x0
 8003cc8:	8da080e7          	jalr	-1830(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ccc:	8526                	mv	a0,s1
 8003cce:	00000097          	auipc	ra,0x0
 8003cd2:	be6080e7          	jalr	-1050(ra) # 80038b4 <xmit_datablock.part.1>
			&& xmit_datablock(buff, 0xFE)) {
 8003cd6:	00153413          	seqz	s0,a0
 8003cda:	b7c9                	j	8003c9c <disk_write+0x56>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003cdc:	8b99                	andi	a5,a5,6
 8003cde:	cb91                	beqz	a5,8003cf2 <disk_write+0xac>
 8003ce0:	85a2                	mv	a1,s0
 8003ce2:	09700513          	li	a0,151
 8003ce6:	c632                	sw	a2,12(sp)
 8003ce8:	00000097          	auipc	ra,0x0
 8003cec:	a60080e7          	jalr	-1440(ra) # 8003748 <send_cmd>
 8003cf0:	4632                	lw	a2,12(sp)
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003cf2:	85b2                	mv	a1,a2
 8003cf4:	4565                	li	a0,25
 8003cf6:	00000097          	auipc	ra,0x0
 8003cfa:	a52080e7          	jalr	-1454(ra) # 8003748 <send_cmd>
 8003cfe:	fd59                	bnez	a0,8003c9c <disk_write+0x56>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003d00:	1f400513          	li	a0,500
 8003d04:	00000097          	auipc	ra,0x0
 8003d08:	91e080e7          	jalr	-1762(ra) # 8003622 <wait_ready>
 8003d0c:	c10d                	beqz	a0,8003d2e <disk_write+0xe8>
	xchg_spi(token);					/* Send token */
 8003d0e:	0fc00513          	li	a0,252
 8003d12:	00000097          	auipc	ra,0x0
 8003d16:	88c080e7          	jalr	-1908(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d1a:	8526                	mv	a0,s1
 8003d1c:	00000097          	auipc	ra,0x0
 8003d20:	b98080e7          	jalr	-1128(ra) # 80038b4 <xmit_datablock.part.1>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003d24:	c509                	beqz	a0,8003d2e <disk_write+0xe8>
			} while (--count);
 8003d26:	147d                	addi	s0,s0,-1
				buff += 512;
 8003d28:	20048493          	addi	s1,s1,512
			} while (--count);
 8003d2c:	f871                	bnez	s0,8003d00 <disk_write+0xba>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003d2e:	1f400513          	li	a0,500
 8003d32:	00000097          	auipc	ra,0x0
 8003d36:	8f0080e7          	jalr	-1808(ra) # 8003622 <wait_ready>
 8003d3a:	d125                	beqz	a0,8003c9a <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003d3c:	0fd00513          	li	a0,253
 8003d40:	00000097          	auipc	ra,0x0
 8003d44:	85e080e7          	jalr	-1954(ra) # 800359e <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d48:	bf91                	j	8003c9c <disk_write+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d4a:	4511                	li	a0,4
}
 8003d4c:	8082                	ret

08003d4e <disk_ioctl>:

DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
){
 8003d4e:	1101                	addi	sp,sp,-32
 8003d50:	ca26                	sw	s1,20(sp)
 8003d52:	ce06                	sw	ra,28(sp)
 8003d54:	cc22                	sw	s0,24(sp)
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003d56:	4491                	li	s1,4
 8003d58:	e90d                	bnez	a0,8003d8a <disk_ioctl+0x3c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003d5a:	200007b7          	lui	a5,0x20000
 8003d5e:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003d62:	448d                	li	s1,3
 8003d64:	8b85                	andi	a5,a5,1
 8003d66:	e395                	bnez	a5,8003d8a <disk_ioctl+0x3c>

	res = RES_ERROR;

	switch (cmd) {
 8003d68:	4785                	li	a5,1
 8003d6a:	8432                	mv	s0,a2
 8003d6c:	84ae                	mv	s1,a1
 8003d6e:	02f58b63          	beq	a1,a5,8003da4 <disk_ioctl+0x56>
 8003d72:	c195                	beqz	a1,8003d96 <disk_ioctl+0x48>
 8003d74:	478d                	li	a5,3
 8003d76:	0af58863          	beq	a1,a5,8003e26 <disk_ioctl+0xd8>
 8003d7a:	4791                	li	a5,4
 8003d7c:	16f58363          	beq	a1,a5,8003ee2 <disk_ioctl+0x194>
			res = RES_OK;	/* FatFs does not check result of this command */
		}
		break;

	default:
		res = RES_PARERR;
 8003d80:	4491                	li	s1,4
	}

	deselect();
 8003d82:	00000097          	auipc	ra,0x0
 8003d86:	87e080e7          	jalr	-1922(ra) # 8003600 <deselect>

	return res;
}
 8003d8a:	40f2                	lw	ra,28(sp)
 8003d8c:	4462                	lw	s0,24(sp)
 8003d8e:	8526                	mv	a0,s1
 8003d90:	44d2                	lw	s1,20(sp)
 8003d92:	6105                	addi	sp,sp,32
 8003d94:	8082                	ret
		if (_select()) res = RES_OK;
 8003d96:	00000097          	auipc	ra,0x0
 8003d9a:	970080e7          	jalr	-1680(ra) # 8003706 <_select>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d9e:	00153493          	seqz	s1,a0
 8003da2:	b7c5                	j	8003d82 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003da4:	4581                	li	a1,0
 8003da6:	4525                	li	a0,9
 8003da8:	00000097          	auipc	ra,0x0
 8003dac:	9a0080e7          	jalr	-1632(ra) # 8003748 <send_cmd>
 8003db0:	c119                	beqz	a0,8003db6 <disk_ioctl+0x68>
	res = RES_ERROR;
 8003db2:	4485                	li	s1,1
 8003db4:	b7f9                	j	8003d82 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003db6:	45c1                	li	a1,16
 8003db8:	850a                	mv	a0,sp
 8003dba:	00000097          	auipc	ra,0x0
 8003dbe:	a7a080e7          	jalr	-1414(ra) # 8003834 <rcvr_datablock>
 8003dc2:	d965                	beqz	a0,8003db2 <disk_ioctl+0x64>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003dc4:	00014603          	lbu	a2,0(sp)
 8003dc8:	00814783          	lbu	a5,8(sp)
 8003dcc:	00914683          	lbu	a3,9(sp)
 8003dd0:	8219                	srli	a2,a2,0x6
 8003dd2:	00714703          	lbu	a4,7(sp)
 8003dd6:	00961e63          	bne	a2,s1,8003df2 <disk_ioctl+0xa4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003dda:	07a2                	slli	a5,a5,0x8
 8003ddc:	97b6                	add	a5,a5,a3
 8003dde:	0742                	slli	a4,a4,0x10
 8003de0:	003f06b7          	lui	a3,0x3f0
 8003de4:	8f75                	and	a4,a4,a3
 8003de6:	0705                	addi	a4,a4,1
 8003de8:	97ba                	add	a5,a5,a4
				*(DWORD*)buff = csize << 10;
 8003dea:	07aa                	slli	a5,a5,0xa
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003dec:	c01c                	sw	a5,0(s0)
				res = RES_OK;
 8003dee:	4481                	li	s1,0
 8003df0:	bf49                	j	8003d82 <disk_ioctl+0x34>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003df2:	070a                	slli	a4,a4,0x2
 8003df4:	8399                	srli	a5,a5,0x6
 8003df6:	97ba                	add	a5,a5,a4
 8003df8:	00614703          	lbu	a4,6(sp)
 8003dfc:	6605                	lui	a2,0x1
 8003dfe:	c0060613          	addi	a2,a2,-1024 # c00 <__dbg_stack_size+0xc00>
 8003e02:	072a                	slli	a4,a4,0xa
 8003e04:	8f71                	and	a4,a4,a2
 8003e06:	97ba                	add	a5,a5,a4
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003e08:	00a14603          	lbu	a2,10(sp)
 8003e0c:	00514703          	lbu	a4,5(sp)
 8003e10:	0686                	slli	a3,a3,0x1
 8003e12:	821d                	srli	a2,a2,0x7
 8003e14:	8b3d                	andi	a4,a4,15
 8003e16:	9732                	add	a4,a4,a2
 8003e18:	8a99                	andi	a3,a3,6
				*(DWORD*)buff = csize << (n - 9);
 8003e1a:	9736                	add	a4,a4,a3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003e1c:	0785                	addi	a5,a5,1
				*(DWORD*)buff = csize << (n - 9);
 8003e1e:	1765                	addi	a4,a4,-7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003e20:	00e797b3          	sll	a5,a5,a4
 8003e24:	b7e1                	j	8003dec <disk_ioctl+0x9e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e26:	200004b7          	lui	s1,0x20000
 8003e2a:	51648493          	addi	s1,s1,1302 # 20000516 <CardType>
 8003e2e:	0004c783          	lbu	a5,0(s1)
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e32:	4581                	li	a1,0
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003e34:	8b91                	andi	a5,a5,4
 8003e36:	cbb1                	beqz	a5,8003e8a <disk_ioctl+0x13c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003e38:	08d00513          	li	a0,141
 8003e3c:	00000097          	auipc	ra,0x0
 8003e40:	90c080e7          	jalr	-1780(ra) # 8003748 <send_cmd>
 8003e44:	f53d                	bnez	a0,8003db2 <disk_ioctl+0x64>
				xchg_spi(0xFF);
 8003e46:	0ff00513          	li	a0,255
 8003e4a:	fffff097          	auipc	ra,0xfffff
 8003e4e:	754080e7          	jalr	1876(ra) # 800359e <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003e52:	45c1                	li	a1,16
 8003e54:	850a                	mv	a0,sp
 8003e56:	00000097          	auipc	ra,0x0
 8003e5a:	9de080e7          	jalr	-1570(ra) # 8003834 <rcvr_datablock>
 8003e5e:	d931                	beqz	a0,8003db2 <disk_ioctl+0x64>
 8003e60:	03000493          	li	s1,48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003e64:	14fd                	addi	s1,s1,-1
 8003e66:	0ff00513          	li	a0,255
 8003e6a:	0ff4f493          	andi	s1,s1,255
 8003e6e:	fffff097          	auipc	ra,0xfffff
 8003e72:	730080e7          	jalr	1840(ra) # 800359e <xchg_spi>
 8003e76:	f4fd                	bnez	s1,8003e64 <disk_ioctl+0x116>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003e78:	00a14783          	lbu	a5,10(sp)
 8003e7c:	0047d713          	srli	a4,a5,0x4
 8003e80:	47c1                	li	a5,16
 8003e82:	00e797b3          	sll	a5,a5,a4
 8003e86:	c01c                	sw	a5,0(s0)
					res = RES_OK;
 8003e88:	bded                	j	8003d82 <disk_ioctl+0x34>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003e8a:	4525                	li	a0,9
 8003e8c:	00000097          	auipc	ra,0x0
 8003e90:	8bc080e7          	jalr	-1860(ra) # 8003748 <send_cmd>
 8003e94:	fd19                	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003e96:	45c1                	li	a1,16
 8003e98:	850a                	mv	a0,sp
 8003e9a:	00000097          	auipc	ra,0x0
 8003e9e:	99a080e7          	jalr	-1638(ra) # 8003834 <rcvr_datablock>
 8003ea2:	d901                	beqz	a0,8003db2 <disk_ioctl+0x64>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ea4:	0004c703          	lbu	a4,0(s1)
 8003ea8:	00a14783          	lbu	a5,10(sp)
 8003eac:	00b14683          	lbu	a3,11(sp)
 8003eb0:	8b09                	andi	a4,a4,2
 8003eb2:	cf01                	beqz	a4,8003eca <disk_ioctl+0x17c>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003eb4:	00d14703          	lbu	a4,13(sp)
 8003eb8:	0786                	slli	a5,a5,0x1
 8003eba:	07e7f793          	andi	a5,a5,126
 8003ebe:	829d                	srli	a3,a3,0x7
 8003ec0:	97b6                	add	a5,a5,a3
 8003ec2:	8319                	srli	a4,a4,0x6
 8003ec4:	0785                	addi	a5,a5,1
 8003ec6:	177d                	addi	a4,a4,-1
 8003ec8:	bfa1                	j	8003e20 <disk_ioctl+0xd2>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003eca:	00369713          	slli	a4,a3,0x3
 8003ece:	8b61                	andi	a4,a4,24
 8003ed0:	8295                	srli	a3,a3,0x5
 8003ed2:	8789                	srai	a5,a5,0x2
 8003ed4:	9736                	add	a4,a4,a3
 8003ed6:	8bfd                	andi	a5,a5,31
 8003ed8:	0705                	addi	a4,a4,1
 8003eda:	0785                	addi	a5,a5,1
 8003edc:	02f707b3          	mul	a5,a4,a5
 8003ee0:	b731                	j	8003dec <disk_ioctl+0x9e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ee2:	200004b7          	lui	s1,0x20000
 8003ee6:	51648493          	addi	s1,s1,1302 # 20000516 <CardType>
 8003eea:	0004c783          	lbu	a5,0(s1)
 8003eee:	8b99                	andi	a5,a5,6
 8003ef0:	ec0781e3          	beqz	a5,8003db2 <disk_ioctl+0x64>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003ef4:	860a                	mv	a2,sp
 8003ef6:	45ad                	li	a1,11
 8003ef8:	00000097          	auipc	ra,0x0
 8003efc:	e56080e7          	jalr	-426(ra) # 8003d4e <disk_ioctl>
 8003f00:	ea0519e3          	bnez	a0,8003db2 <disk_ioctl+0x64>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003f04:	00014783          	lbu	a5,0(sp)
 8003f08:	00a14703          	lbu	a4,10(sp)
 8003f0c:	8399                	srli	a5,a5,0x6
 8003f0e:	04077713          	andi	a4,a4,64
 8003f12:	8fd9                	or	a5,a5,a4
 8003f14:	e8078fe3          	beqz	a5,8003db2 <disk_ioctl+0x64>
		if (!(CardType & CT_BLOCK)) {
 8003f18:	0004c783          	lbu	a5,0(s1)
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003f1c:	400c                	lw	a1,0(s0)
 8003f1e:	4040                	lw	s0,4(s0)
		if (!(CardType & CT_BLOCK)) {
 8003f20:	8ba1                	andi	a5,a5,8
 8003f22:	e399                	bnez	a5,8003f28 <disk_ioctl+0x1da>
			st *= 512; ed *= 512;
 8003f24:	05a6                	slli	a1,a1,0x9
 8003f26:	0426                	slli	s0,s0,0x9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003f28:	02000513          	li	a0,32
 8003f2c:	00000097          	auipc	ra,0x0
 8003f30:	81c080e7          	jalr	-2020(ra) # 8003748 <send_cmd>
 8003f34:	e6051fe3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f38:	85a2                	mv	a1,s0
 8003f3a:	02100513          	li	a0,33
 8003f3e:	00000097          	auipc	ra,0x0
 8003f42:	80a080e7          	jalr	-2038(ra) # 8003748 <send_cmd>
 8003f46:	e60516e3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f4a:	4581                	li	a1,0
 8003f4c:	02600513          	li	a0,38
 8003f50:	fffff097          	auipc	ra,0xfffff
 8003f54:	7f8080e7          	jalr	2040(ra) # 8003748 <send_cmd>
 8003f58:	e4051de3          	bnez	a0,8003db2 <disk_ioctl+0x64>
 8003f5c:	651d                	lui	a0,0x7
 8003f5e:	53050513          	addi	a0,a0,1328 # 7530 <__stack_size+0x6530>
 8003f62:	fffff097          	auipc	ra,0xfffff
 8003f66:	6c0080e7          	jalr	1728(ra) # 8003622 <wait_ready>
 8003f6a:	bd15                	j	8003d9e <disk_ioctl+0x50>

08003f6c <tf_start_timer>:


volatile uint64_t tf_current_time = 0;
volatile uint64_t tf_delay_until = 0;

void tf_start_timer(int32_t millis){
 8003f6c:	1141                	addi	sp,sp,-16
 8003f6e:	c422                	sw	s0,8(sp)
 8003f70:	c606                	sw	ra,12(sp)
 8003f72:	842a                	mv	s0,a0
    tf_current_time = get_timer_value();
 8003f74:	ffffe097          	auipc	ra,0xffffe
 8003f78:	e16080e7          	jalr	-490(ra) # 8001d8a <get_timer_value>
 8003f7c:	200007b7          	lui	a5,0x20000
 8003f80:	51878793          	addi	a5,a5,1304 # 20000518 <tf_current_time>
 8003f84:	c388                	sw	a0,0(a5)
 8003f86:	c3cc                	sw	a1,4(a5)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003f88:	0007a803          	lw	a6,0(a5)
 8003f8c:	0047a883          	lw	a7,4(a5)
 8003f90:	200007b7          	lui	a5,0x20000
 8003f94:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8003f98:	6785                	lui	a5,0x1
 8003f9a:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8003f9e:	02f55533          	divu	a0,a0,a5
 8003fa2:	200006b7          	lui	a3,0x20000
}
 8003fa6:	40b2                	lw	ra,12(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003fa8:	02850533          	mul	a0,a0,s0
}
 8003fac:	4422                	lw	s0,8(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003fae:	01050633          	add	a2,a0,a6
 8003fb2:	00a63533          	sltu	a0,a2,a0
 8003fb6:	52c6a023          	sw	a2,1312(a3) # 20000520 <tf_delay_until>
 8003fba:	011507b3          	add	a5,a0,a7
 8003fbe:	52f6a223          	sw	a5,1316(a3)
}
 8003fc2:	0141                	addi	sp,sp,16
 8003fc4:	8082                	ret

08003fc6 <tf_timer_done>:
uint32_t tf_timer_done(void){
 8003fc6:	1141                	addi	sp,sp,-16
 8003fc8:	c606                	sw	ra,12(sp)
    
    tf_current_time = get_timer_value();
 8003fca:	ffffe097          	auipc	ra,0xffffe
 8003fce:	dc0080e7          	jalr	-576(ra) # 8001d8a <get_timer_value>
 8003fd2:	200007b7          	lui	a5,0x20000
 8003fd6:	51878793          	addi	a5,a5,1304 # 20000518 <tf_current_time>
 8003fda:	c388                	sw	a0,0(a5)
 8003fdc:	c3cc                	sw	a1,4(a5)
    //if(tf_delay_start > tf_delay_until) return tf_delay_start > current_time && current_time > tf_delay_until ? 0 : 1; //On overflow
    if(tf_current_time > tf_delay_until) return 0;   //No overflow
 8003fde:	200006b7          	lui	a3,0x20000
 8003fe2:	4398                	lw	a4,0(a5)
 8003fe4:	43dc                	lw	a5,4(a5)
 8003fe6:	5206a603          	lw	a2,1312(a3) # 20000520 <tf_delay_until>
 8003fea:	5246a683          	lw	a3,1316(a3)
 8003fee:	00f6e763          	bltu	a3,a5,8003ffc <tf_timer_done+0x36>
 8003ff2:	4505                	li	a0,1
 8003ff4:	00d79563          	bne	a5,a3,8003ffe <tf_timer_done+0x38>
 8003ff8:	00e67363          	bgeu	a2,a4,8003ffe <tf_timer_done+0x38>
 8003ffc:	4501                	li	a0,0
    return 1;
 8003ffe:	40b2                	lw	ra,12(sp)
 8004000:	0141                	addi	sp,sp,16
 8004002:	8082                	ret

08004004 <mpu_delay>:
void i2c_master_init_400k(uint32_t port){
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
    i2c_enable(port);
}

void mpu_delay(int millis){
 8004004:	7179                	addi	sp,sp,-48
 8004006:	d04a                	sw	s2,32(sp)
 8004008:	ce4e                	sw	s3,28(sp)
 800400a:	c85a                	sw	s6,16(sp)
 800400c:	d606                	sw	ra,44(sp)
 800400e:	d422                	sw	s0,40(sp)
 8004010:	d226                	sw	s1,36(sp)
 8004012:	cc52                	sw	s4,24(sp)
 8004014:	ca56                	sw	s5,20(sp)
 8004016:	c65e                	sw	s7,12(sp)
 8004018:	c462                	sw	s8,8(sp)
 800401a:	c266                	sw	s9,4(sp)
 800401c:	8b2a                	mv	s6,a0
    uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 800401e:	ffffe097          	auipc	ra,0xffffe
 8004022:	d6c080e7          	jalr	-660(ra) # 8001d8a <get_timer_value>
 8004026:	89aa                	mv	s3,a0
 8004028:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 800402a:	ffffe097          	auipc	ra,0xffffe
 800402e:	d60080e7          	jalr	-672(ra) # 8001d8a <get_timer_value>
 8004032:	84aa                	mv	s1,a0
 8004034:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 8004036:	00a99463          	bne	s3,a0,800403e <mpu_delay+0x3a>
 800403a:	feb908e3          	beq	s2,a1,800402a <mpu_delay+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 * millis ));
 800403e:	080007b7          	lui	a5,0x8000
 8004042:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8004046:	2e47a983          	lw	s3,740(a5)
 800404a:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 800404e:	ffffe097          	auipc	ra,0xffffe
 8004052:	d3c080e7          	jalr	-708(ra) # 8001d8a <get_timer_value>
 8004056:	87aa                	mv	a5,a0
 8004058:	8d05                	sub	a0,a0,s1
 800405a:	00a7b7b3          	sltu	a5,a5,a0
 800405e:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 * millis ));
 8004060:	8d9d                	sub	a1,a1,a5
 8004062:	00003097          	auipc	ra,0x3
 8004066:	674080e7          	jalr	1652(ra) # 80076d6 <__floatundidf>
 800406a:	8a2a                	mv	s4,a0
 800406c:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8004070:	8aae                	mv	s5,a1
 8004072:	00003097          	auipc	ra,0x3
 8004076:	60e080e7          	jalr	1550(ra) # 8007680 <__floatunsidf>
 800407a:	864a                	mv	a2,s2
 800407c:	86ce                	mv	a3,s3
 800407e:	00003097          	auipc	ra,0x3
 8004082:	af8080e7          	jalr	-1288(ra) # 8006b76 <__divdf3>
 8004086:	8c2a                	mv	s8,a0
 8004088:	855a                	mv	a0,s6
 800408a:	8cae                	mv	s9,a1
 800408c:	00003097          	auipc	ra,0x3
 8004090:	584080e7          	jalr	1412(ra) # 8007610 <__floatsidf>
 8004094:	862a                	mv	a2,a0
 8004096:	86ae                	mv	a3,a1
 8004098:	8562                	mv	a0,s8
 800409a:	85e6                	mv	a1,s9
 800409c:	00003097          	auipc	ra,0x3
 80040a0:	0c4080e7          	jalr	196(ra) # 8007160 <__muldf3>
 80040a4:	862a                	mv	a2,a0
 80040a6:	86ae                	mv	a3,a1
 80040a8:	8552                	mv	a0,s4
 80040aa:	85d6                	mv	a1,s5
 80040ac:	00003097          	auipc	ra,0x3
 80040b0:	010080e7          	jalr	16(ra) # 80070bc <__ledf2>
 80040b4:	f8054de3          	bltz	a0,800404e <mpu_delay+0x4a>
}
 80040b8:	50b2                	lw	ra,44(sp)
 80040ba:	5422                	lw	s0,40(sp)
 80040bc:	5492                	lw	s1,36(sp)
 80040be:	5902                	lw	s2,32(sp)
 80040c0:	49f2                	lw	s3,28(sp)
 80040c2:	4a62                	lw	s4,24(sp)
 80040c4:	4ad2                	lw	s5,20(sp)
 80040c6:	4b42                	lw	s6,16(sp)
 80040c8:	4bb2                	lw	s7,12(sp)
 80040ca:	4c22                	lw	s8,8(sp)
 80040cc:	4c92                	lw	s9,4(sp)
 80040ce:	6145                	addi	sp,sp,48
 80040d0:	8082                	ret

080040d2 <i2c_master_read_register>:

void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040d2:	1101                	addi	sp,sp,-32
 80040d4:	cc22                	sw	s0,24(sp)
    int32_t port = *((uint32_t*)handle);
 80040d6:	4100                	lw	s0,0(a0)
void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040d8:	ca26                	sw	s1,20(sp)
 80040da:	c84a                	sw	s2,16(sp)
    /* send a NACK for the next data byte which will be received into the shift register */
	//i2c_ackpos_config(port, I2C_ACKPOS_NEXT);
    //while(i2c_flag_get(port, I2C_FLAG_I2CBSY));

    /* send a start condition to I2C bus */
    i2c_start_on_bus(port);
 80040dc:	8522                	mv	a0,s0
void i2c_master_read_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 80040de:	c64e                	sw	s3,12(sp)
 80040e0:	c452                	sw	s4,8(sp)
 80040e2:	ce06                	sw	ra,28(sp)
 80040e4:	84ae                	mv	s1,a1
 80040e6:	8a32                	mv	s4,a2
 80040e8:	8936                	mv	s2,a3
 80040ea:	89ba                	mv	s3,a4
    i2c_start_on_bus(port);
 80040ec:	ffffd097          	auipc	ra,0xffffd
 80040f0:	03a080e7          	jalr	58(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 80040f4:	50000593          	li	a1,1280
 80040f8:	8522                	mv	a0,s0
 80040fa:	ffffd097          	auipc	ra,0xffffd
 80040fe:	06a080e7          	jalr	106(ra) # 8001164 <i2c_flag_get>
 8004102:	d96d                	beqz	a0,80040f4 <i2c_master_read_register+0x22>

    /* send slave address to I2C bus */
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 8004104:	0486                	slli	s1,s1,0x1
 8004106:	5679                	li	a2,-2
 8004108:	85a6                	mv	a1,s1
 800410a:	8522                	mv	a0,s0
 800410c:	ffffd097          	auipc	ra,0xffffd
 8004110:	ffe080e7          	jalr	-2(ra) # 800110a <i2c_master_addressing>
    /* disable ACK before clearing ADDSEND bit */
    //i2c_ack_config(port, I2C_ACK_DISABLE);
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 8004114:	50100593          	li	a1,1281
 8004118:	8522                	mv	a0,s0
 800411a:	ffffd097          	auipc	ra,0xffffd
 800411e:	04a080e7          	jalr	74(ra) # 8001164 <i2c_flag_get>
 8004122:	d96d                	beqz	a0,8004114 <i2c_master_read_register+0x42>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004124:	50100593          	li	a1,1281
 8004128:	8522                	mv	a0,s0
 800412a:	ffffd097          	auipc	ra,0xffffd
 800412e:	04e080e7          	jalr	78(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 8004132:	50700593          	li	a1,1287
 8004136:	8522                	mv	a0,s0
 8004138:	ffffd097          	auipc	ra,0xffffd
 800413c:	02c080e7          	jalr	44(ra) # 8001164 <i2c_flag_get>
 8004140:	d96d                	beqz	a0,8004132 <i2c_master_read_register+0x60>


    i2c_data_transmit(port, reg);
 8004142:	85d2                	mv	a1,s4
 8004144:	8522                	mv	a0,s0
 8004146:	ffffd097          	auipc	ra,0xffffd
 800414a:	ff4080e7          	jalr	-12(ra) # 800113a <i2c_data_transmit>
    /* wait until the TBE bit is set */
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 800414e:	50700593          	li	a1,1287
 8004152:	8522                	mv	a0,s0
 8004154:	ffffd097          	auipc	ra,0xffffd
 8004158:	010080e7          	jalr	16(ra) # 8001164 <i2c_flag_get>
 800415c:	d96d                	beqz	a0,800414e <i2c_master_read_register+0x7c>

    i2c_start_on_bus(port);
 800415e:	8522                	mv	a0,s0
 8004160:	ffffd097          	auipc	ra,0xffffd
 8004164:	fc6080e7          	jalr	-58(ra) # 8001126 <i2c_start_on_bus>
    while( ! i2c_flag_get(port, I2C_FLAG_SBSEND) );
 8004168:	50000593          	li	a1,1280
 800416c:	8522                	mv	a0,s0
 800416e:	ffffd097          	auipc	ra,0xffffd
 8004172:	ff6080e7          	jalr	-10(ra) # 8001164 <i2c_flag_get>
 8004176:	d96d                	beqz	a0,8004168 <i2c_master_read_register+0x96>

    i2c_master_addressing(port, addr << 1, I2C_RECEIVER);
 8004178:	4605                	li	a2,1
 800417a:	85a6                	mv	a1,s1
 800417c:	8522                	mv	a0,s0
 800417e:	ffffd097          	auipc	ra,0xffffd
 8004182:	f8c080e7          	jalr	-116(ra) # 800110a <i2c_master_addressing>
    while( ! i2c_flag_get(port, I2C_FLAG_ADDSEND) );
 8004186:	50100593          	li	a1,1281
 800418a:	8522                	mv	a0,s0
 800418c:	ffffd097          	auipc	ra,0xffffd
 8004190:	fd8080e7          	jalr	-40(ra) # 8001164 <i2c_flag_get>
 8004194:	d96d                	beqz	a0,8004186 <i2c_master_read_register+0xb4>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004196:	50100593          	li	a1,1281
 800419a:	8522                	mv	a0,s0
 800419c:	ffffd097          	auipc	ra,0xffffd
 80041a0:	fdc080e7          	jalr	-36(ra) # 8001178 <i2c_flag_clear>

    i2c_ack_config(port, I2C_ACK_ENABLE);
 80041a4:	4585                	li	a1,1
 80041a6:	8522                	mv	a0,s0
 80041a8:	ffffd097          	auipc	ra,0xffffd
 80041ac:	f4a080e7          	jalr	-182(ra) # 80010f2 <i2c_ack_config>

    for(int i = 0; i < size; i++) {
 80041b0:	4481                	li	s1,0
        if(i == size - 1) {
 80041b2:	fff90a13          	addi	s4,s2,-1
    for(int i = 0; i < size; i++) {
 80041b6:	0324c363          	blt	s1,s2,80041dc <i2c_master_read_register+0x10a>
        }
        while(!i2c_flag_get(port, I2C_FLAG_RBNE));
        *data++ = i2c_data_receive(port);
    }

    i2c_stop_on_bus(port);
 80041ba:	8522                	mv	a0,s0
 80041bc:	ffffd097          	auipc	ra,0xffffd
 80041c0:	f74080e7          	jalr	-140(ra) # 8001130 <i2c_stop_on_bus>
    while( I2C_CTL0(port) & I2C_CTL0_STOP );
 80041c4:	401c                	lw	a5,0(s0)
 80041c6:	2007f793          	andi	a5,a5,512
 80041ca:	ffed                	bnez	a5,80041c4 <i2c_master_read_register+0xf2>
}
 80041cc:	40f2                	lw	ra,28(sp)
 80041ce:	4462                	lw	s0,24(sp)
 80041d0:	44d2                	lw	s1,20(sp)
 80041d2:	4942                	lw	s2,16(sp)
 80041d4:	49b2                	lw	s3,12(sp)
 80041d6:	4a22                	lw	s4,8(sp)
 80041d8:	6105                	addi	sp,sp,32
 80041da:	8082                	ret
        if(i == size - 1) {
 80041dc:	009a1863          	bne	s4,s1,80041ec <i2c_master_read_register+0x11a>
            i2c_ack_config(port, I2C_ACK_DISABLE);
 80041e0:	4581                	li	a1,0
 80041e2:	8522                	mv	a0,s0
 80041e4:	ffffd097          	auipc	ra,0xffffd
 80041e8:	f0e080e7          	jalr	-242(ra) # 80010f2 <i2c_ack_config>
        while(!i2c_flag_get(port, I2C_FLAG_RBNE));
 80041ec:	50600593          	li	a1,1286
 80041f0:	8522                	mv	a0,s0
 80041f2:	ffffd097          	auipc	ra,0xffffd
 80041f6:	f72080e7          	jalr	-142(ra) # 8001164 <i2c_flag_get>
 80041fa:	d96d                	beqz	a0,80041ec <i2c_master_read_register+0x11a>
        *data++ = i2c_data_receive(port);
 80041fc:	8522                	mv	a0,s0
 80041fe:	ffffd097          	auipc	ra,0xffffd
 8004202:	f40080e7          	jalr	-192(ra) # 800113e <i2c_data_receive>
 8004206:	009987b3          	add	a5,s3,s1
 800420a:	00a78023          	sb	a0,0(a5)
    for(int i = 0; i < size; i++) {
 800420e:	0485                	addi	s1,s1,1
 8004210:	b75d                	j	80041b6 <i2c_master_read_register+0xe4>

08004212 <i2c_master_write_register>:
    i2c_dma_last_transfer_config(port, I2C_DMALST_ON);
    dma_config();
    
}

void i2c_master_write_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 8004212:	1101                	addi	sp,sp,-32
 8004214:	cc22                	sw	s0,24(sp)
    int32_t port = *((uint32_t*)handle);
 8004216:	4100                	lw	s0,0(a0)
void i2c_master_write_register(void* handle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t *data){
 8004218:	ca26                	sw	s1,20(sp)
 800421a:	c84a                	sw	s2,16(sp)
 800421c:	c64e                	sw	s3,12(sp)
 800421e:	c452                	sw	s4,8(sp)
 8004220:	ce06                	sw	ra,28(sp)
 8004222:	8a2e                	mv	s4,a1
 8004224:	84b2                	mv	s1,a2
 8004226:	8936                	mv	s2,a3
 8004228:	89ba                	mv	s3,a4
    
    /* send a NACK for the next data byte which will be received into the shift register */
	//i2c_ackpos_config(port, I2C_ACKPOS_NEXT);
    while(i2c_flag_get(port, I2C_FLAG_I2CBSY));
 800422a:	60100593          	li	a1,1537
 800422e:	8522                	mv	a0,s0
 8004230:	ffffd097          	auipc	ra,0xffffd
 8004234:	f34080e7          	jalr	-204(ra) # 8001164 <i2c_flag_get>
 8004238:	f96d                	bnez	a0,800422a <i2c_master_write_register+0x18>

    /* send a start condition to I2C bus */
    i2c_start_on_bus(port);
 800423a:	8522                	mv	a0,s0
 800423c:	ffffd097          	auipc	ra,0xffffd
 8004240:	eea080e7          	jalr	-278(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 8004244:	50000593          	li	a1,1280
 8004248:	8522                	mv	a0,s0
 800424a:	ffffd097          	auipc	ra,0xffffd
 800424e:	f1a080e7          	jalr	-230(ra) # 8001164 <i2c_flag_get>
 8004252:	d96d                	beqz	a0,8004244 <i2c_master_write_register+0x32>

    /* send slave address to I2C bus */
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 8004254:	5679                	li	a2,-2
 8004256:	001a1593          	slli	a1,s4,0x1
 800425a:	8522                	mv	a0,s0
 800425c:	ffffd097          	auipc	ra,0xffffd
 8004260:	eae080e7          	jalr	-338(ra) # 800110a <i2c_master_addressing>
    /* disable ACK before clearing ADDSEND bit */
    //i2c_ack_config(port, I2C_ACK_DISABLE);
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 8004264:	50100593          	li	a1,1281
 8004268:	8522                	mv	a0,s0
 800426a:	ffffd097          	auipc	ra,0xffffd
 800426e:	efa080e7          	jalr	-262(ra) # 8001164 <i2c_flag_get>
 8004272:	d96d                	beqz	a0,8004264 <i2c_master_write_register+0x52>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004274:	50100593          	li	a1,1281
 8004278:	8522                	mv	a0,s0
 800427a:	ffffd097          	auipc	ra,0xffffd
 800427e:	efe080e7          	jalr	-258(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 8004282:	50700593          	li	a1,1287
 8004286:	8522                	mv	a0,s0
 8004288:	ffffd097          	auipc	ra,0xffffd
 800428c:	edc080e7          	jalr	-292(ra) # 8001164 <i2c_flag_get>
 8004290:	d96d                	beqz	a0,8004282 <i2c_master_write_register+0x70>

    i2c_data_transmit(port, reg);
 8004292:	85a6                	mv	a1,s1
 8004294:	8522                	mv	a0,s0
 8004296:	ffffd097          	auipc	ra,0xffffd
 800429a:	ea4080e7          	jalr	-348(ra) # 800113a <i2c_data_transmit>
        /* wait until the TBE bit is set */
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 800429e:	50700593          	li	a1,1287
 80042a2:	8522                	mv	a0,s0
 80042a4:	ffffd097          	auipc	ra,0xffffd
 80042a8:	ec0080e7          	jalr	-320(ra) # 8001164 <i2c_flag_get>
 80042ac:	d96d                	beqz	a0,800429e <i2c_master_write_register+0x8c>

    for(int i = 0; i < size; i++){
 80042ae:	4481                	li	s1,0
 80042b0:	0324c363          	blt	s1,s2,80042d6 <i2c_master_write_register+0xc4>
        i2c_data_transmit(port, *data++);
        /* wait until the TBE bit is set */
        while(!i2c_flag_get(port, I2C_FLAG_TBE));
    }

    i2c_stop_on_bus(port);
 80042b4:	8522                	mv	a0,s0
 80042b6:	ffffd097          	auipc	ra,0xffffd
 80042ba:	e7a080e7          	jalr	-390(ra) # 8001130 <i2c_stop_on_bus>
    while( I2C_CTL0(port) & I2C_CTL0_STOP );
 80042be:	401c                	lw	a5,0(s0)
 80042c0:	2007f793          	andi	a5,a5,512
 80042c4:	ffed                	bnez	a5,80042be <i2c_master_write_register+0xac>
 80042c6:	40f2                	lw	ra,28(sp)
 80042c8:	4462                	lw	s0,24(sp)
 80042ca:	44d2                	lw	s1,20(sp)
 80042cc:	4942                	lw	s2,16(sp)
 80042ce:	49b2                	lw	s3,12(sp)
 80042d0:	4a22                	lw	s4,8(sp)
 80042d2:	6105                	addi	sp,sp,32
 80042d4:	8082                	ret
        i2c_data_transmit(port, *data++);
 80042d6:	009987b3          	add	a5,s3,s1
 80042da:	0007c583          	lbu	a1,0(a5)
 80042de:	8522                	mv	a0,s0
 80042e0:	ffffd097          	auipc	ra,0xffffd
 80042e4:	e5a080e7          	jalr	-422(ra) # 800113a <i2c_data_transmit>
        while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80042e8:	50700593          	li	a1,1287
 80042ec:	8522                	mv	a0,s0
 80042ee:	ffffd097          	auipc	ra,0xffffd
 80042f2:	e76080e7          	jalr	-394(ra) # 8001164 <i2c_flag_get>
 80042f6:	d96d                	beqz	a0,80042e8 <i2c_master_write_register+0xd6>
    for(int i = 0; i < size; i++){
 80042f8:	0485                	addi	s1,s1,1
 80042fa:	bf5d                	j	80042b0 <i2c_master_write_register+0x9e>

080042fc <i2c_master_init_400k>:
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 80042fc:	000625b7          	lui	a1,0x62
void i2c_master_init_400k(uint32_t port){
 8004300:	1141                	addi	sp,sp,-16
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 8004302:	6611                	lui	a2,0x4
 8004304:	a8058593          	addi	a1,a1,-1408 # 61a80 <__stack_size+0x60a80>
void i2c_master_init_400k(uint32_t port){
 8004308:	c422                	sw	s0,8(sp)
 800430a:	c606                	sw	ra,12(sp)
 800430c:	842a                	mv	s0,a0
    i2c_clock_config(port, 400000, I2C_DTCY_16_9);
 800430e:	ffffd097          	auipc	ra,0xffffd
 8004312:	ca2080e7          	jalr	-862(ra) # 8000fb0 <i2c_clock_config>
    i2c_enable(port);
 8004316:	8522                	mv	a0,s0
}
 8004318:	4422                	lw	s0,8(sp)
 800431a:	40b2                	lw	ra,12(sp)
 800431c:	0141                	addi	sp,sp,16
    i2c_enable(port);
 800431e:	ffffd317          	auipc	t1,0xffffd
 8004322:	dfe30067          	jr	-514(t1) # 800111c <i2c_enable>

08004326 <mpu6500_install>:
void mpu6500_install(uint32_t port){
 8004326:	1141                	addi	sp,sp,-16
 8004328:	c422                	sw	s0,8(sp)
	i2c_port = port;
 800432a:	20001437          	lui	s0,0x20001
void mpu6500_install(uint32_t port){
 800432e:	c606                	sw	ra,12(sp)
	i2c_port = port;
 8004330:	e0a42823          	sw	a0,-496(s0) # 20000e10 <i2c_port>
    i2c_master_init_400k(i2c_port);
 8004334:	00000097          	auipc	ra,0x0
 8004338:	fc8080e7          	jalr	-56(ra) # 80042fc <i2c_master_init_400k>
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 800433c:	e1040693          	addi	a3,s0,-496
}
 8004340:	4422                	lw	s0,8(sp)
 8004342:	40b2                	lw	ra,12(sp)
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 8004344:	08004637          	lui	a2,0x8004
 8004348:	080045b7          	lui	a1,0x8004
 800434c:	08004537          	lui	a0,0x8004
 8004350:	00460613          	addi	a2,a2,4 # 8004004 <mpu_delay>
 8004354:	21258593          	addi	a1,a1,530 # 8004212 <i2c_master_write_register>
 8004358:	0d250513          	addi	a0,a0,210 # 80040d2 <i2c_master_read_register>
}
 800435c:	0141                	addi	sp,sp,16
	mpu6500_init(&i2c_master_read_register, &i2c_master_write_register, &mpu_delay, (void*)&i2c_port);
 800435e:	00000317          	auipc	t1,0x0
 8004362:	13e30067          	jr	318(t1) # 800449c <mpu6500_init>

08004366 <i2c_dma_master_read_register>:
void i2c_dma_master_read_register(uint32_t handle, uint8_t addr, uint8_t reg){
 8004366:	1141                	addi	sp,sp,-16
 8004368:	c422                	sw	s0,8(sp)
 800436a:	c226                	sw	s1,4(sp)
 800436c:	c04a                	sw	s2,0(sp)
 800436e:	c606                	sw	ra,12(sp)
 8004370:	842a                	mv	s0,a0
 8004372:	84ae                	mv	s1,a1
 8004374:	8932                	mv	s2,a2
    i2c_start_on_bus(port);
 8004376:	ffffd097          	auipc	ra,0xffffd
 800437a:	db0080e7          	jalr	-592(ra) # 8001126 <i2c_start_on_bus>
    while(!i2c_flag_get(port, I2C_FLAG_SBSEND));
 800437e:	50000593          	li	a1,1280
 8004382:	8522                	mv	a0,s0
 8004384:	ffffd097          	auipc	ra,0xffffd
 8004388:	de0080e7          	jalr	-544(ra) # 8001164 <i2c_flag_get>
 800438c:	d96d                	beqz	a0,800437e <i2c_dma_master_read_register+0x18>
    i2c_master_addressing(port, addr << 1, I2C_TRANSMITTER);
 800438e:	0486                	slli	s1,s1,0x1
 8004390:	5679                	li	a2,-2
 8004392:	85a6                	mv	a1,s1
 8004394:	8522                	mv	a0,s0
 8004396:	ffffd097          	auipc	ra,0xffffd
 800439a:	d74080e7          	jalr	-652(ra) # 800110a <i2c_master_addressing>
    while(!i2c_flag_get(port, I2C_FLAG_ADDSEND));
 800439e:	50100593          	li	a1,1281
 80043a2:	8522                	mv	a0,s0
 80043a4:	ffffd097          	auipc	ra,0xffffd
 80043a8:	dc0080e7          	jalr	-576(ra) # 8001164 <i2c_flag_get>
 80043ac:	d96d                	beqz	a0,800439e <i2c_dma_master_read_register+0x38>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 80043ae:	50100593          	li	a1,1281
 80043b2:	8522                	mv	a0,s0
 80043b4:	ffffd097          	auipc	ra,0xffffd
 80043b8:	dc4080e7          	jalr	-572(ra) # 8001178 <i2c_flag_clear>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80043bc:	50700593          	li	a1,1287
 80043c0:	8522                	mv	a0,s0
 80043c2:	ffffd097          	auipc	ra,0xffffd
 80043c6:	da2080e7          	jalr	-606(ra) # 8001164 <i2c_flag_get>
 80043ca:	d96d                	beqz	a0,80043bc <i2c_dma_master_read_register+0x56>
    i2c_data_transmit(port, reg);
 80043cc:	85ca                	mv	a1,s2
 80043ce:	8522                	mv	a0,s0
 80043d0:	ffffd097          	auipc	ra,0xffffd
 80043d4:	d6a080e7          	jalr	-662(ra) # 800113a <i2c_data_transmit>
    while(!i2c_flag_get(port, I2C_FLAG_TBE));
 80043d8:	50700593          	li	a1,1287
 80043dc:	8522                	mv	a0,s0
 80043de:	ffffd097          	auipc	ra,0xffffd
 80043e2:	d86080e7          	jalr	-634(ra) # 8001164 <i2c_flag_get>
 80043e6:	d96d                	beqz	a0,80043d8 <i2c_dma_master_read_register+0x72>
    i2c_start_on_bus(port);
 80043e8:	8522                	mv	a0,s0
 80043ea:	ffffd097          	auipc	ra,0xffffd
 80043ee:	d3c080e7          	jalr	-708(ra) # 8001126 <i2c_start_on_bus>
    while( ! i2c_flag_get(port, I2C_FLAG_SBSEND) );
 80043f2:	50000593          	li	a1,1280
 80043f6:	8522                	mv	a0,s0
 80043f8:	ffffd097          	auipc	ra,0xffffd
 80043fc:	d6c080e7          	jalr	-660(ra) # 8001164 <i2c_flag_get>
 8004400:	d96d                	beqz	a0,80043f2 <i2c_dma_master_read_register+0x8c>
    i2c_master_addressing(port, addr << 1, I2C_RECEIVER);
 8004402:	4605                	li	a2,1
 8004404:	85a6                	mv	a1,s1
 8004406:	8522                	mv	a0,s0
 8004408:	ffffd097          	auipc	ra,0xffffd
 800440c:	d02080e7          	jalr	-766(ra) # 800110a <i2c_master_addressing>
    while( ! i2c_flag_get(port, I2C_FLAG_ADDSEND) );
 8004410:	50100593          	li	a1,1281
 8004414:	8522                	mv	a0,s0
 8004416:	ffffd097          	auipc	ra,0xffffd
 800441a:	d4e080e7          	jalr	-690(ra) # 8001164 <i2c_flag_get>
 800441e:	d96d                	beqz	a0,8004410 <i2c_dma_master_read_register+0xaa>
    i2c_flag_clear(port, I2C_FLAG_ADDSEND);
 8004420:	8522                	mv	a0,s0
 8004422:	50100593          	li	a1,1281
 8004426:	ffffd097          	auipc	ra,0xffffd
 800442a:	d52080e7          	jalr	-686(ra) # 8001178 <i2c_flag_clear>
    i2c_ack_config(port, I2C_ACK_ENABLE);
 800442e:	8522                	mv	a0,s0
 8004430:	4585                	li	a1,1
 8004432:	ffffd097          	auipc	ra,0xffffd
 8004436:	cc0080e7          	jalr	-832(ra) # 80010f2 <i2c_ack_config>
    i2c_dma_enable(port, I2C_DMA_ON);
 800443a:	6585                	lui	a1,0x1
 800443c:	8522                	mv	a0,s0
 800443e:	80058593          	addi	a1,a1,-2048 # 800 <__dbg_stack_size+0x800>
 8004442:	ffffd097          	auipc	ra,0xffffd
 8004446:	d04080e7          	jalr	-764(ra) # 8001146 <i2c_dma_enable>
    i2c_dma_last_transfer_config(port, I2C_DMALST_ON);
 800444a:	8522                	mv	a0,s0
 800444c:	6585                	lui	a1,0x1
 800444e:	ffffd097          	auipc	ra,0xffffd
 8004452:	d08080e7          	jalr	-760(ra) # 8001156 <i2c_dma_last_transfer_config>
}
 8004456:	4422                	lw	s0,8(sp)
 8004458:	40b2                	lw	ra,12(sp)
 800445a:	4492                	lw	s1,4(sp)
 800445c:	4902                	lw	s2,0(sp)
 800445e:	0141                	addi	sp,sp,16
    dma_config();
 8004460:	ffffe317          	auipc	t1,0xffffe
 8004464:	ad830067          	jr	-1320(t1) # 8001f38 <dma_config>

08004468 <read_mpu>:
}mpu6500_comms_t;

mpu6500_comms_t cb;

void read_mpu(uint8_t reg, uint8_t size, uint8_t* data){
	cb.read(cb.pHandle, MPU6500_ADDR, reg, size, data);
 8004468:	200017b7          	lui	a5,0x20001
 800446c:	e1478793          	addi	a5,a5,-492 # 20000e14 <cb>
 8004470:	8732                	mv	a4,a2
 8004472:	0007a303          	lw	t1,0(a5)
 8004476:	862a                	mv	a2,a0
 8004478:	47c8                	lw	a0,12(a5)
 800447a:	86ae                	mv	a3,a1
 800447c:	06900593          	li	a1,105
 8004480:	8302                	jr	t1

08004482 <write_mpu>:
}

void write_mpu(uint8_t reg, uint8_t size, uint8_t* data){
	cb.write(cb.pHandle, MPU6500_ADDR, reg, size, data);
 8004482:	200017b7          	lui	a5,0x20001
 8004486:	e1478793          	addi	a5,a5,-492 # 20000e14 <cb>
 800448a:	8732                	mv	a4,a2
 800448c:	0047a303          	lw	t1,4(a5)
 8004490:	862a                	mv	a2,a0
 8004492:	47c8                	lw	a0,12(a5)
 8004494:	86ae                	mv	a3,a1
 8004496:	06900593          	li	a1,105
 800449a:	8302                	jr	t1

0800449c <mpu6500_init>:
}

int mpu6500_init(void (*read_cb)(void* pHandle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t* pData), 
				 void (*write_cb)(void* pHandle, uint8_t addr, uint8_t reg, uint8_t size, uint8_t* pData),
				 void (*delay_cb)(int millis),
				 void* pHandle){
 800449c:	1101                	addi	sp,sp,-32
 800449e:	cc22                	sw	s0,24(sp)
	uint8_t read_buffer[4];
	uint8_t write_buffer[4];
	cb.read = read_cb;
 80044a0:	20001437          	lui	s0,0x20001
 80044a4:	e1440793          	addi	a5,s0,-492 # 20000e14 <cb>
				 void* pHandle){
 80044a8:	ce06                	sw	ra,28(sp)
	cb.read = read_cb;
 80044aa:	c388                	sw	a0,0(a5)
	cb.write = write_cb;
 80044ac:	c3cc                	sw	a1,4(a5)
	cb.delay = delay_cb;
 80044ae:	c790                	sw	a2,8(a5)
	cb.pHandle = pHandle;



	read_mpu(MPU6500_WHO_AM_I, 1, read_buffer);
 80044b0:	07500513          	li	a0,117
 80044b4:	0030                	addi	a2,sp,8
 80044b6:	4585                	li	a1,1
	cb.pHandle = pHandle;
 80044b8:	c7d4                	sw	a3,12(a5)
	read_mpu(MPU6500_WHO_AM_I, 1, read_buffer);
 80044ba:	00000097          	auipc	ra,0x0
 80044be:	fae080e7          	jalr	-82(ra) # 8004468 <read_mpu>
	if(read_buffer[0] != MPU6500_WHO_AM_I_ID) return -1;
 80044c2:	00814703          	lbu	a4,8(sp)
 80044c6:	47c5                	li	a5,17
 80044c8:	557d                	li	a0,-1
 80044ca:	0cf71f63          	bne	a4,a5,80045a8 <mpu6500_init+0x10c>

	write_buffer[0] = MPU6500_DEVICE_RESET;
 80044ce:	f8000793          	li	a5,-128
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 80044d2:	06b00513          	li	a0,107
 80044d6:	0070                	addi	a2,sp,12
 80044d8:	4585                	li	a1,1
	write_buffer[0] = MPU6500_DEVICE_RESET;
 80044da:	00f10623          	sb	a5,12(sp)
 80044de:	e1440413          	addi	s0,s0,-492
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 80044e2:	00000097          	auipc	ra,0x0
 80044e6:	fa0080e7          	jalr	-96(ra) # 8004482 <write_mpu>

	cb.delay(100);
 80044ea:	441c                	lw	a5,8(s0)
 80044ec:	06400513          	li	a0,100
 80044f0:	9782                	jalr	a5

	while(read_buffer[0] & MPU6500_DEVICE_RESET) read_mpu(MPU6500_PWR_MGMT_1, 1, read_buffer);
 80044f2:	00810783          	lb	a5,8(sp)
 80044f6:	0a07cd63          	bltz	a5,80045b0 <mpu6500_init+0x114>

	cb.delay(100);
 80044fa:	441c                	lw	a5,8(s0)
 80044fc:	06400513          	li	a0,100
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);

	write_buffer[0] = 0x00;
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);

	write_buffer[0] = MPU6500_G_DLPF_92HZ;
 8004500:	4409                	li	s0,2
	cb.delay(100);
 8004502:	9782                	jalr	a5
	write_buffer[0] = MPU6500_TEMP_DIS | 0x01; //select PLL
 8004504:	47a5                	li	a5,9
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 8004506:	0070                	addi	a2,sp,12
 8004508:	4585                	li	a1,1
 800450a:	06b00513          	li	a0,107
	write_buffer[0] = MPU6500_TEMP_DIS | 0x01; //select PLL
 800450e:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_PWR_MGMT_1, 1, write_buffer);
 8004512:	00000097          	auipc	ra,0x0
 8004516:	f70080e7          	jalr	-144(ra) # 8004482 <write_mpu>
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);
 800451a:	0070                	addi	a2,sp,12
 800451c:	4585                	li	a1,1
 800451e:	4565                	li	a0,25
	write_buffer[0] = 0x00;
 8004520:	00010623          	sb	zero,12(sp)
	write_mpu(MPU6500_SMPLRT_DIV, 1, write_buffer);
 8004524:	00000097          	auipc	ra,0x0
 8004528:	f5e080e7          	jalr	-162(ra) # 8004482 <write_mpu>
	write_mpu(MPU6500_CONFIG, 1, write_buffer);
 800452c:	0070                	addi	a2,sp,12
 800452e:	4585                	li	a1,1
 8004530:	4569                	li	a0,26
	write_buffer[0] = MPU6500_G_DLPF_92HZ;
 8004532:	00810623          	sb	s0,12(sp)
	write_mpu(MPU6500_CONFIG, 1, write_buffer);
 8004536:	00000097          	auipc	ra,0x0
 800453a:	f4c080e7          	jalr	-180(ra) # 8004482 <write_mpu>

	write_buffer[0] = MPU6500_GYRO_FS_2000DPS;
 800453e:	47e1                	li	a5,24
	write_mpu(MPU6500_GYRO_CONFIG, 1, write_buffer);
 8004540:	0070                	addi	a2,sp,12
 8004542:	4585                	li	a1,1
 8004544:	456d                	li	a0,27
	write_buffer[0] = MPU6500_GYRO_FS_2000DPS;
 8004546:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_GYRO_CONFIG, 1, write_buffer);
 800454a:	00000097          	auipc	ra,0x0
 800454e:	f38080e7          	jalr	-200(ra) # 8004482 <write_mpu>

	write_buffer[0] = MPU6500_ACCEL_FS_8G;
 8004552:	47c1                	li	a5,16
	write_mpu(MPU6500_ACCEL_CONFIG, 1, write_buffer);
 8004554:	0070                	addi	a2,sp,12
 8004556:	4585                	li	a1,1
 8004558:	4571                	li	a0,28
	write_buffer[0] = MPU6500_ACCEL_FS_8G;
 800455a:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_ACCEL_CONFIG, 1, write_buffer);
 800455e:	00000097          	auipc	ra,0x0
 8004562:	f24080e7          	jalr	-220(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_A_DPLF_92HZ;
	write_mpu(MPU6500_ACCEL_CONFIG2, 1, write_buffer);
 8004566:	0070                	addi	a2,sp,12
 8004568:	4585                	li	a1,1
 800456a:	4575                	li	a0,29
	write_buffer[0] = MPU6500_A_DPLF_92HZ;
 800456c:	00810623          	sb	s0,12(sp)
	write_mpu(MPU6500_ACCEL_CONFIG2, 1, write_buffer);
 8004570:	00000097          	auipc	ra,0x0
 8004574:	f12080e7          	jalr	-238(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_LATCH_INT_EN | MPU6500_INT_ANYRD_2CLEAR | MPU6500_INT_BYPASS_EN;
 8004578:	03200793          	li	a5,50
	write_mpu(MPU6500_INT_PIN_CFG, 1, write_buffer);
 800457c:	0070                	addi	a2,sp,12
 800457e:	4585                	li	a1,1
 8004580:	03700513          	li	a0,55
	write_buffer[0] = MPU6500_LATCH_INT_EN | MPU6500_INT_ANYRD_2CLEAR | MPU6500_INT_BYPASS_EN;
 8004584:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_INT_PIN_CFG, 1, write_buffer);
 8004588:	00000097          	auipc	ra,0x0
 800458c:	efa080e7          	jalr	-262(ra) # 8004482 <write_mpu>
	
	write_buffer[0] = MPU6500_INT_RAW_RDY_EN;
 8004590:	4785                	li	a5,1
	write_mpu(MPU6500_INT_ENABLE, 1, write_buffer);
 8004592:	03800513          	li	a0,56
 8004596:	0070                	addi	a2,sp,12
 8004598:	4585                	li	a1,1
	write_buffer[0] = MPU6500_INT_RAW_RDY_EN;
 800459a:	00f10623          	sb	a5,12(sp)
	write_mpu(MPU6500_INT_ENABLE, 1, write_buffer);
 800459e:	00000097          	auipc	ra,0x0
 80045a2:	ee4080e7          	jalr	-284(ra) # 8004482 <write_mpu>

	return 1;
 80045a6:	4505                	li	a0,1

}
 80045a8:	40f2                	lw	ra,28(sp)
 80045aa:	4462                	lw	s0,24(sp)
 80045ac:	6105                	addi	sp,sp,32
 80045ae:	8082                	ret
	while(read_buffer[0] & MPU6500_DEVICE_RESET) read_mpu(MPU6500_PWR_MGMT_1, 1, read_buffer);
 80045b0:	0030                	addi	a2,sp,8
 80045b2:	4585                	li	a1,1
 80045b4:	06b00513          	li	a0,107
 80045b8:	00000097          	auipc	ra,0x0
 80045bc:	eb0080e7          	jalr	-336(ra) # 8004468 <read_mpu>
 80045c0:	bf0d                	j	80044f2 <mpu6500_init+0x56>

080045c2 <init_q>:
    //q.memorySize = Q_SIZE;
    //q.size       = SIZE_INIT;
    //q.head       = HEAD_INIT;
    //q.tail       = TAIL_INIT;

    w.memorySize  = STRING_QUEUE_SIZE;
 80045c2:	200057b7          	lui	a5,0x20005
 80045c6:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
 80045ca:	02000713          	li	a4,32
 80045ce:	c398                	sw	a4,0(a5)
    w.size        = SIZE_INIT;
 80045d0:	0007a223          	sw	zero,4(a5)
    w.head        = HEAD_INIT;
 80045d4:	0007a423          	sw	zero,8(a5)
    w.tail        = TAIL_INIT;
 80045d8:	0007a623          	sw	zero,12(a5)
    w.tail_string = TAIL_INIT;
 80045dc:	0007a823          	sw	zero,16(a5)
}
 80045e0:	8082                	ret

080045e2 <enqueue_string>:
//	return 1;
//}

int enqueue_string(char *string) {
    // Check if the queue is already full.
    if (w.size == w.memorySize) {
 80045e2:	200017b7          	lui	a5,0x20001
 80045e6:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 80045ea:	6691                	lui	a3,0x4
 80045ec:	9736                	add	a4,a4,a3
 80045ee:	00072883          	lw	a7,0(a4)
 80045f2:	4358                	lw	a4,4(a4)
 80045f4:	e2478593          	addi	a1,a5,-476
 80045f8:	200057b7          	lui	a5,0x20005
 80045fc:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
        w.buf[w.tail][w.tail_string] = *string;
        string++; // Move to the next character in 'string'.
        w.tail_string++; // Move to the next position in the current buffer.

        // If the current buffer is full (512 characters), wrap around to the next buffer.
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8004600:	1ff00e13          	li	t3,511
    if (w.size == w.memorySize) {
 8004604:	03171c63          	bne	a4,a7,800463c <enqueue_string+0x5a>
        return 0; // Return 0 to indicate that the queue is full.
 8004608:	4501                	li	a0,0
 800460a:	8082                	ret
        w.buf[w.tail][w.tail_string] = *string;
 800460c:	47d8                	lw	a4,12(a5)
 800460e:	4b94                	lw	a3,16(a5)
        string++; // Move to the next character in 'string'.
 8004610:	0505                	addi	a0,a0,1
        w.buf[w.tail][w.tail_string] = *string;
 8004612:	00971813          	slli	a6,a4,0x9
 8004616:	982e                	add	a6,a6,a1
 8004618:	00d80eb3          	add	t4,a6,a3
        w.tail_string++; // Move to the next position in the current buffer.
 800461c:	0685                	addi	a3,a3,1
        w.buf[w.tail][w.tail_string] = *string;
 800461e:	006e8023          	sb	t1,0(t4)
        w.tail_string++; // Move to the next position in the current buffer.
 8004622:	cb94                	sw	a3,16(a5)
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8004624:	01c69c63          	bne	a3,t3,800463c <enqueue_string+0x5a>
            w.buf[w.tail][w.tail_string] = '\0';
            w.tail_string = 0; // Reset the buffer position.
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8004628:	0705                	addi	a4,a4,1
 800462a:	03176733          	rem	a4,a4,a7
            w.size++; // Increment the size of the queue.
 800462e:	0605                	addi	a2,a2,1
            w.buf[w.tail][w.tail_string] = '\0';
 8004630:	1e080fa3          	sb	zero,511(a6)
            w.tail_string = 0; // Reset the buffer position.
 8004634:	0007a823          	sw	zero,16(a5)
            w.size++; // Increment the size of the queue.
 8004638:	c3d0                	sw	a2,4(a5)
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 800463a:	c7d8                	sw	a4,12(a5)
    while (*string != '\0' && w.size != w.memorySize) {
 800463c:	00054303          	lbu	t1,0(a0)
 8004640:	00030563          	beqz	t1,800464a <enqueue_string+0x68>
 8004644:	43d0                	lw	a2,4(a5)
 8004646:	fcc893e3          	bne	a7,a2,800460c <enqueue_string+0x2a>
        }
    }

    return 1; // Return 1 to indicate successful enqueuing.
 800464a:	4505                	li	a0,1
}
 800464c:	8082                	ret

0800464e <queue_str_len>:
    return str_len; // Return the length of the concatenated string.
}

int queue_str_len(void) {
    return w.size; // Return the size of the queue.
}
 800464e:	200057b7          	lui	a5,0x20005
 8004652:	e2478793          	addi	a5,a5,-476 # 20004e24 <w+0x4000>
 8004656:	43c8                	lw	a0,4(a5)
 8004658:	8082                	ret

0800465a <fuseStrings>:
}

int fuseStrings(char *str1, const char *str2) {
    char *start = str1;  // Save the starting position of str1
    // Find the end of the first string
    while (*str1 != '\0') {
 800465a:	87aa                	mv	a5,a0
 800465c:	0007c703          	lbu	a4,0(a5)
 8004660:	eb09                	bnez	a4,8004672 <fuseStrings+0x18>
        str1++;
    }
    // Copy characters from the second string to the end of the first string
    while (*str2 != '\0') {
 8004662:	0005c703          	lbu	a4,0(a1) # 1000 <__stack_size>
 8004666:	eb01                	bnez	a4,8004676 <fuseStrings+0x1c>
        *str1 = *str2;
        str1++;
        str2++;
    }
    // Add the null terminator to mark the end of the concatenated string
    *str1 = '\0';
 8004668:	00078023          	sb	zero,0(a5)
    // Calculate and return the length of the concatenated string
    return str1 - start;
}
 800466c:	40a78533          	sub	a0,a5,a0
 8004670:	8082                	ret
        str1++;
 8004672:	0785                	addi	a5,a5,1
 8004674:	b7e5                	j	800465c <fuseStrings+0x2>
        *str1 = *str2;
 8004676:	00e78023          	sb	a4,0(a5)
        str2++;
 800467a:	0585                	addi	a1,a1,1
        str1++;
 800467c:	0785                	addi	a5,a5,1
        str2++;
 800467e:	b7d5                	j	8004662 <fuseStrings+0x8>

08004680 <dequeue_string>:
    if (w.size == 0) {
 8004680:	200017b7          	lui	a5,0x20001
 8004684:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 8004688:	6691                	lui	a3,0x4
int dequeue_string(char *string, int num_of_blocks) {
 800468a:	1101                	addi	sp,sp,-32
    if (w.size == 0) {
 800468c:	9736                	add	a4,a4,a3
int dequeue_string(char *string, int num_of_blocks) {
 800468e:	ca26                	sw	s1,20(sp)
    if (w.size == 0) {
 8004690:	4344                	lw	s1,4(a4)
int dequeue_string(char *string, int num_of_blocks) {
 8004692:	ce06                	sw	ra,28(sp)
 8004694:	cc22                	sw	s0,24(sp)
 8004696:	c84a                	sw	s2,16(sp)
 8004698:	c64e                	sw	s3,12(sp)
 800469a:	c452                	sw	s4,8(sp)
 800469c:	c256                	sw	s5,4(sp)
    if (w.size == 0) {
 800469e:	cc99                	beqz	s1,80046bc <dequeue_string+0x3c>
    } else if (num_of_blocks > w.size) {
 80046a0:	04b4cc63          	blt	s1,a1,80046f8 <dequeue_string+0x78>
 80046a4:	20005437          	lui	s0,0x20005
 80046a8:	e2478993          	addi	s3,a5,-476
 80046ac:	e2440413          	addi	s0,s0,-476 # 20004e24 <w+0x4000>
 80046b0:	892e                	mv	s2,a1
 80046b2:	8aaa                	mv	s5,a0
    int blocks_dequeued = 0; // Track the number of blocks dequeued
 80046b4:	4a01                	li	s4,0
    int str_len = 0;
 80046b6:	4481                	li	s1,0
    while (blocks_dequeued < num_of_blocks) {
 80046b8:	012a4c63          	blt	s4,s2,80046d0 <dequeue_string+0x50>
}
 80046bc:	40f2                	lw	ra,28(sp)
 80046be:	4462                	lw	s0,24(sp)
 80046c0:	8526                	mv	a0,s1
 80046c2:	4942                	lw	s2,16(sp)
 80046c4:	44d2                	lw	s1,20(sp)
 80046c6:	49b2                	lw	s3,12(sp)
 80046c8:	4a22                	lw	s4,8(sp)
 80046ca:	4a92                	lw	s5,4(sp)
 80046cc:	6105                	addi	sp,sp,32
 80046ce:	8082                	ret
        str_len += fuseStrings(string, w.buf[w.head]);
 80046d0:	440c                	lw	a1,8(s0)
 80046d2:	8556                	mv	a0,s5
        blocks_dequeued++; // Increment the number of blocks dequeued.
 80046d4:	0a05                	addi	s4,s4,1
        str_len += fuseStrings(string, w.buf[w.head]);
 80046d6:	05a6                	slli	a1,a1,0x9
 80046d8:	95ce                	add	a1,a1,s3
 80046da:	00000097          	auipc	ra,0x0
 80046de:	f80080e7          	jalr	-128(ra) # 800465a <fuseStrings>
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 80046e2:	441c                	lw	a5,8(s0)
 80046e4:	4018                	lw	a4,0(s0)
        str_len += fuseStrings(string, w.buf[w.head]);
 80046e6:	94aa                	add	s1,s1,a0
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 80046e8:	0785                	addi	a5,a5,1
 80046ea:	02e7e7b3          	rem	a5,a5,a4
 80046ee:	c41c                	sw	a5,8(s0)
        w.size--; // Decrement the size of the queue.
 80046f0:	405c                	lw	a5,4(s0)
 80046f2:	17fd                	addi	a5,a5,-1
 80046f4:	c05c                	sw	a5,4(s0)
        blocks_dequeued++; // Increment the number of blocks dequeued.
 80046f6:	b7c9                	j	80046b8 <dequeue_string+0x38>
        return -1; // Return -1 to indicate that there are not enough blocks in the queue.
 80046f8:	54fd                	li	s1,-1
 80046fa:	b7c9                	j	80046bc <dequeue_string+0x3c>

080046fc <empty_string_queue>:
int empty_string_queue(char *dest, int max_block_size){
 80046fc:	1101                	addi	sp,sp,-32
 80046fe:	ca26                	sw	s1,20(sp)
 8004700:	c84a                	sw	s2,16(sp)
 8004702:	c64e                	sw	s3,12(sp)
 8004704:	892a                	mv	s2,a0
 8004706:	ce06                	sw	ra,28(sp)
 8004708:	cc22                	sw	s0,24(sp)
 800470a:	89ae                	mv	s3,a1
    for(int i = max_block_size; i > 0; i--){
 800470c:	84ae                	mv	s1,a1
    int str_len = 0;
 800470e:	4501                	li	a0,0
    for(int i = max_block_size; i > 0; i--){
 8004710:	04904263          	bgtz	s1,8004754 <empty_string_queue+0x58>
    int blocks_dequeued = 0;
 8004714:	4481                	li	s1,0
    if(w.size == 0 && blocks_dequeued < max_block_size){
 8004716:	200015b7          	lui	a1,0x20001
 800471a:	e2458593          	addi	a1,a1,-476 # 20000e24 <w>
 800471e:	6411                	lui	s0,0x4
 8004720:	942e                	add	s0,s0,a1
 8004722:	405c                	lw	a5,4(s0)
 8004724:	e38d                	bnez	a5,8004746 <empty_string_queue+0x4a>
 8004726:	0334d063          	bge	s1,s3,8004746 <empty_string_queue+0x4a>
        w.buf[w.head][w.tail_string] = '\0';
 800472a:	4418                	lw	a4,8(s0)
 800472c:	481c                	lw	a5,16(s0)
        str_len = fuseStrings(dest, w.buf[w.head]);
 800472e:	854a                	mv	a0,s2
        w.buf[w.head][w.tail_string] = '\0';
 8004730:	0726                	slli	a4,a4,0x9
 8004732:	95ba                	add	a1,a1,a4
 8004734:	97ae                	add	a5,a5,a1
 8004736:	00078023          	sb	zero,0(a5)
        str_len = fuseStrings(dest, w.buf[w.head]);
 800473a:	00000097          	auipc	ra,0x0
 800473e:	f20080e7          	jalr	-224(ra) # 800465a <fuseStrings>
        w.tail_string = 0;
 8004742:	00042823          	sw	zero,16(s0) # 4010 <__stack_size+0x3010>
}
 8004746:	40f2                	lw	ra,28(sp)
 8004748:	4462                	lw	s0,24(sp)
 800474a:	44d2                	lw	s1,20(sp)
 800474c:	4942                	lw	s2,16(sp)
 800474e:	49b2                	lw	s3,12(sp)
 8004750:	6105                	addi	sp,sp,32
 8004752:	8082                	ret
        str_len = dequeue_string(dest,i);
 8004754:	85a6                	mv	a1,s1
 8004756:	854a                	mv	a0,s2
 8004758:	00000097          	auipc	ra,0x0
 800475c:	f28080e7          	jalr	-216(ra) # 8004680 <dequeue_string>
        if(str_len > 0){
 8004760:	faa04be3          	bgtz	a0,8004716 <empty_string_queue+0x1a>
    for(int i = max_block_size; i > 0; i--){
 8004764:	14fd                	addi	s1,s1,-1
 8004766:	b76d                	j	8004710 <empty_string_queue+0x14>

08004768 <clear_queues>:
    //q.size = SIZE_INIT;
    //q.head = HEAD_INIT;
    //q.tail = TAIL_INIT;

    // Reset the string queue (w)
    w.size = SIZE_INIT;
 8004768:	200017b7          	lui	a5,0x20001
 800476c:	e2478713          	addi	a4,a5,-476 # 20000e24 <w>
 8004770:	6691                	lui	a3,0x4
 8004772:	9736                	add	a4,a4,a3
 8004774:	00072223          	sw	zero,4(a4)
    w.head = HEAD_INIT;
 8004778:	00072423          	sw	zero,8(a4)
    w.tail = TAIL_INIT;
 800477c:	00072623          	sw	zero,12(a4)
    w.tail_string = TAIL_INIT;
 8004780:	00072823          	sw	zero,16(a4)
    //    q.values[i].gyroZ = 0;
    //    q.values[i].emg = 0;
    //}

    // Clear values in the string queue
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8004784:	e2478793          	addi	a5,a5,-476
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8004788:	20000613          	li	a2,512
 800478c:	4681                	li	a3,0
            w.buf[i][j] = '\0';
 800478e:	00d785b3          	add	a1,a5,a3
 8004792:	00058023          	sb	zero,0(a1)
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8004796:	0685                	addi	a3,a3,1
 8004798:	fec69be3          	bne	a3,a2,800478e <clear_queues+0x26>
 800479c:	20078793          	addi	a5,a5,512
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 80047a0:	fef716e3          	bne	a4,a5,800478c <clear_queues+0x24>
        }
    }
}
 80047a4:	8082                	ret

080047a6 <delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void delay_1ms(uint32_t count)
{
 80047a6:	7179                	addi	sp,sp,-48
 80047a8:	d04a                	sw	s2,32(sp)
 80047aa:	ce4e                	sw	s3,28(sp)
 80047ac:	c85a                	sw	s6,16(sp)
 80047ae:	d606                	sw	ra,44(sp)
 80047b0:	d422                	sw	s0,40(sp)
 80047b2:	d226                	sw	s1,36(sp)
 80047b4:	cc52                	sw	s4,24(sp)
 80047b6:	ca56                	sw	s5,20(sp)
 80047b8:	c65e                	sw	s7,12(sp)
 80047ba:	c462                	sw	s8,8(sp)
 80047bc:	c266                	sw	s9,4(sp)
 80047be:	8b2a                	mv	s6,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 80047c0:	ffffd097          	auipc	ra,0xffffd
 80047c4:	5ca080e7          	jalr	1482(ra) # 8001d8a <get_timer_value>
 80047c8:	89aa                	mv	s3,a0
 80047ca:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 80047cc:	ffffd097          	auipc	ra,0xffffd
 80047d0:	5be080e7          	jalr	1470(ra) # 8001d8a <get_timer_value>
 80047d4:	84aa                	mv	s1,a0
 80047d6:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 80047d8:	00a99463          	bne	s3,a0,80047e0 <delay_1ms+0x3a>
 80047dc:	feb908e3          	beq	s2,a1,80047cc <delay_1ms+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 80047e0:	080007b7          	lui	a5,0x8000
 80047e4:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 80047e8:	2e47a983          	lw	s3,740(a5)
 80047ec:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 80047f0:	ffffd097          	auipc	ra,0xffffd
 80047f4:	59a080e7          	jalr	1434(ra) # 8001d8a <get_timer_value>
 80047f8:	87aa                	mv	a5,a0
 80047fa:	8d05                	sub	a0,a0,s1
 80047fc:	00a7b7b3          	sltu	a5,a5,a0
 8004800:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8004802:	8d9d                	sub	a1,a1,a5
 8004804:	00003097          	auipc	ra,0x3
 8004808:	ed2080e7          	jalr	-302(ra) # 80076d6 <__floatundidf>
 800480c:	8a2a                	mv	s4,a0
 800480e:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8004812:	8aae                	mv	s5,a1
 8004814:	00003097          	auipc	ra,0x3
 8004818:	e6c080e7          	jalr	-404(ra) # 8007680 <__floatunsidf>
 800481c:	864a                	mv	a2,s2
 800481e:	86ce                	mv	a3,s3
 8004820:	00002097          	auipc	ra,0x2
 8004824:	356080e7          	jalr	854(ra) # 8006b76 <__divdf3>
 8004828:	8c2a                	mv	s8,a0
 800482a:	855a                	mv	a0,s6
 800482c:	8cae                	mv	s9,a1
 800482e:	00003097          	auipc	ra,0x3
 8004832:	e52080e7          	jalr	-430(ra) # 8007680 <__floatunsidf>
 8004836:	862a                	mv	a2,a0
 8004838:	86ae                	mv	a3,a1
 800483a:	8562                	mv	a0,s8
 800483c:	85e6                	mv	a1,s9
 800483e:	00003097          	auipc	ra,0x3
 8004842:	922080e7          	jalr	-1758(ra) # 8007160 <__muldf3>
 8004846:	862a                	mv	a2,a0
 8004848:	86ae                	mv	a3,a1
 800484a:	8552                	mv	a0,s4
 800484c:	85d6                	mv	a1,s5
 800484e:	00003097          	auipc	ra,0x3
 8004852:	86e080e7          	jalr	-1938(ra) # 80070bc <__ledf2>
 8004856:	f8054de3          	bltz	a0,80047f0 <delay_1ms+0x4a>
}
 800485a:	50b2                	lw	ra,44(sp)
 800485c:	5422                	lw	s0,40(sp)
 800485e:	5492                	lw	s1,36(sp)
 8004860:	5902                	lw	s2,32(sp)
 8004862:	49f2                	lw	s3,28(sp)
 8004864:	4a62                	lw	s4,24(sp)
 8004866:	4ad2                	lw	s5,20(sp)
 8004868:	4b42                	lw	s6,16(sp)
 800486a:	4bb2                	lw	s7,12(sp)
 800486c:	4c22                	lw	s8,8(sp)
 800486e:	4c92                	lw	s9,4(sp)
 8004870:	6145                	addi	sp,sp,48
 8004872:	8082                	ret

08004874 <usb_txfifo_write>:
                             uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8004874:	0671                	addi	a2,a2,28
 8004876:	060a                	slli	a2,a2,0x2
 8004878:	962a                	add	a2,a2,a0
    uint32_t word_count = (byte_count + 3U) / 4U;
 800487a:	068d                	addi	a3,a3,3
 800487c:	8289                	srli	a3,a3,0x2
    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 800487e:	4650                	lw	a2,12(a2)

    while (word_count-- > 0) {
 8004880:	068a                	slli	a3,a3,0x2
 8004882:	96ae                	add	a3,a3,a1
 8004884:	00b69463          	bne	a3,a1,800488c <usb_txfifo_write+0x18>

        src_buf += 4U;
    }

    return USB_OK;
}
 8004888:	4501                	li	a0,0
 800488a:	8082                	ret
        word = src_buf[0] | (src_buf[1] << 8) | (src_buf[2] << 16) | (src_buf[3] << 24);
 800488c:	0015c703          	lbu	a4,1(a1)
 8004890:	0005c783          	lbu	a5,0(a1)
        src_buf += 4U;
 8004894:	0591                	addi	a1,a1,4
 8004896:	0722                	slli	a4,a4,0x8
 8004898:	8f5d                	or	a4,a4,a5
 800489a:	ffe5c783          	lbu	a5,-2(a1)
 800489e:	07c2                	slli	a5,a5,0x10
 80048a0:	8f5d                	or	a4,a4,a5
 80048a2:	fff5c783          	lbu	a5,-1(a1)
 80048a6:	07e2                	slli	a5,a5,0x18
 80048a8:	8fd9                	or	a5,a5,a4
        *fifo = word;
 80048aa:	c21c                	sw	a5,0(a2)
        src_buf += 4U;
 80048ac:	bfe1                	j	8004884 <usb_txfifo_write+0x10>

080048ae <usb_rxfifo_read>:
    \param[out] none
    \retval     void type pointer
*/
void *usb_rxfifo_read (usb_core_regs *usb_regs, uint8_t *dest_buf, uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
 80048ae:	060d                	addi	a2,a2,3
 80048b0:	8209                	srli	a2,a2,0x2
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[0];
 80048b2:	5d78                	lw	a4,124(a0)

    while (word_count-- > 0) {
 80048b4:	060a                	slli	a2,a2,0x2
 80048b6:	962e                	add	a2,a2,a1
 80048b8:	00c59463          	bne	a1,a2,80048c0 <usb_rxfifo_read+0x12>

        dest_buf += 4U;
    }

    return ((void *)dest_buf);
}
 80048bc:	852e                	mv	a0,a1
 80048be:	8082                	ret
        word = *fifo;
 80048c0:	431c                	lw	a5,0(a4)
        dest_buf += 4U;
 80048c2:	0591                	addi	a1,a1,4
        dest_buf[1] = (word >> 8) & 0xff;
 80048c4:	0087d693          	srli	a3,a5,0x8
        dest_buf[0] = word & 0xff;
 80048c8:	fef58e23          	sb	a5,-4(a1)
        dest_buf[1] = (word >> 8) & 0xff;
 80048cc:	fed58ea3          	sb	a3,-3(a1)
        dest_buf[2] = (word >> 16) & 0xff;
 80048d0:	0107d693          	srli	a3,a5,0x10
        dest_buf[3] = (word >> 24) & 0xff;
 80048d4:	83e1                	srli	a5,a5,0x18
        dest_buf[2] = (word >> 16) & 0xff;
 80048d6:	fed58f23          	sb	a3,-2(a1)
        dest_buf[3] = (word >> 24) & 0xff;
 80048da:	fef58fa3          	sb	a5,-1(a1)
        dest_buf += 4U;
 80048de:	bfe9                	j	80048b8 <usb_rxfifo_read+0xa>

080048e0 <usb_txfifo_flush>:
    \param[out] none
    \retval     operation status
*/
usb_status usb_txfifo_flush (usb_core_regs *usb_regs, uint8_t fifo_num)
{
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e0:	4118                	lw	a4,0(a0)
{
 80048e2:	1141                	addi	sp,sp,-16
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e4:	059a                	slli	a1,a1,0x6
{
 80048e6:	c606                	sw	ra,12(sp)
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 80048e8:	0205e593          	ori	a1,a1,32
 80048ec:	cb0c                	sw	a1,16(a4)

    /* wait for Tx FIFO flush bit is set */
    while (usb_regs->gr->GRSTCTL & GRSTCTL_TXFF);
 80048ee:	4b1c                	lw	a5,16(a4)
 80048f0:	0207f793          	andi	a5,a5,32
 80048f4:	ffed                	bnez	a5,80048ee <usb_txfifo_flush+0xe>

    /* wait for 3 PHY clocks*/
    usb_udelay(3);
 80048f6:	450d                	li	a0,3
 80048f8:	00001097          	auipc	ra,0x1
 80048fc:	928080e7          	jalr	-1752(ra) # 8005220 <usb_udelay>

    return USB_OK;
}
 8004900:	40b2                	lw	ra,12(sp)
 8004902:	4501                	li	a0,0
 8004904:	0141                	addi	sp,sp,16
 8004906:	8082                	ret

08004908 <usb_devaddr_set>:
    \param[out] none
    \retval     operation status
*/
void usb_devaddr_set (usb_core_driver *udev, uint8_t dev_addr)
{
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8004908:	455c                	lw	a5,12(a0)
    udev->regs.dr->DCFG |= dev_addr << 4;
 800490a:	0592                	slli	a1,a1,0x4
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 800490c:	4398                	lw	a4,0(a5)
 800490e:	80f77713          	andi	a4,a4,-2033
 8004912:	c398                	sw	a4,0(a5)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8004914:	4398                	lw	a4,0(a5)
 8004916:	8dd9                	or	a1,a1,a4
 8004918:	c38c                	sw	a1,0(a5)
}
 800491a:	8082                	ret

0800491c <usb_transc_active>:
    __IO uint32_t *reg_addr = NULL;

    __IO uint32_t epinten = 0U;

    /* get the endpoint number */
    uint8_t ep_num = transc->ep_addr.num;
 800491c:	4198                	lw	a4,0(a1)

    /* enable endpoint interrupt number */
    if (transc->ep_addr.dir) {
 800491e:	00058783          	lb	a5,0(a1)
{
 8004922:	1141                	addi	sp,sp,-16
    __IO uint32_t epinten = 0U;
 8004924:	c602                	sw	zero,12(sp)
    uint8_t ep_num = transc->ep_addr.num;
 8004926:	8b3d                	andi	a4,a4,15
    if (transc->ep_addr.dir) {
 8004928:	0607d963          	bgez	a5,800499a <usb_transc_active+0x7e>
        reg_addr = &udev->regs.er_in[ep_num]->DIEPCTL;
 800492c:	00271793          	slli	a5,a4,0x2
 8004930:	97aa                	add	a5,a5,a0
 8004932:	4bdc                	lw	a5,20(a5)

        epinten = 1 << ep_num;
 8004934:	4685                	li	a3,1
 8004936:	00e696b3          	sll	a3,a3,a4
    } else {
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;

        epinten = 1 << (16 + ep_num);
 800493a:	c636                	sw	a3,12(sp)
    }

    /* if the endpoint is not active, need change the endpoint control register */
    if (!(*reg_addr & DEPCTL_EPACT)) {
 800493c:	4394                	lw	a3,0(a5)
 800493e:	4550                	lw	a2,12(a0)
 8004940:	01069513          	slli	a0,a3,0x10
 8004944:	04054463          	bltz	a0,800498c <usb_transc_active+0x70>
        *reg_addr &= ~(DEPCTL_MPL | DEPCTL_EPTYPE | DIEPCTL_TXFNUM);
 8004948:	4394                	lw	a3,0(a5)
 800494a:	fc340537          	lui	a0,0xfc340
 800494e:	80050513          	addi	a0,a0,-2048 # fc33f800 <_sp+0xdc337800>
 8004952:	8ee9                	and	a3,a3,a0
 8004954:	c394                	sw	a3,0(a5)

        /* set endpoint maximum packet length */
        if (0U == ep_num) {
 8004956:	ef29                	bnez	a4,80049b0 <usb_transc_active+0x94>
            *reg_addr |= EP0_MAXLEN[udev->regs.dr->DSTAT & DSTAT_ES];
 8004958:	4614                	lw	a3,8(a2)
 800495a:	0007a803          	lw	a6,0(a5)
 800495e:	0066f513          	andi	a0,a3,6
 8004962:	080086b7          	lui	a3,0x8008
 8004966:	5bc68693          	addi	a3,a3,1468 # 80085bc <EP0_MAXLEN>
 800496a:	96aa                	add	a3,a3,a0
 800496c:	0006c683          	lbu	a3,0(a3)
 8004970:	0106e6b3          	or	a3,a3,a6
        } else {
            *reg_addr |= transc->max_len;
 8004974:	c394                	sw	a3,0(a5)
        }

        /* activate endpoint */
        *reg_addr |= (transc->ep_type << 18) | (ep_num << 22) | DEPCTL_SD0PID | DEPCTL_EPACT;
 8004976:	0015c683          	lbu	a3,1(a1)
 800497a:	4388                	lw	a0,0(a5)
 800497c:	075a                	slli	a4,a4,0x16
 800497e:	06ca                	slli	a3,a3,0x12
 8004980:	8f55                	or	a4,a4,a3
 8004982:	8f49                	or	a4,a4,a0
 8004984:	100086b7          	lui	a3,0x10008
 8004988:	8f55                	or	a4,a4,a3
 800498a:	c398                	sw	a4,0(a5)
    }
    else
#endif
    {
        /* enable the interrupts for this endpoint */
        udev->regs.dr->DAEPINTEN |= epinten;
 800498c:	4732                	lw	a4,12(sp)
 800498e:	4e5c                	lw	a5,28(a2)
    }

    return USB_OK;
}
 8004990:	4501                	li	a0,0
        udev->regs.dr->DAEPINTEN |= epinten;
 8004992:	8fd9                	or	a5,a5,a4
 8004994:	ce5c                	sw	a5,28(a2)
}
 8004996:	0141                	addi	sp,sp,16
 8004998:	8082                	ret
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 800499a:	00870793          	addi	a5,a4,8
 800499e:	078a                	slli	a5,a5,0x2
 80049a0:	97aa                	add	a5,a5,a0
        epinten = 1 << (16 + ep_num);
 80049a2:	01070613          	addi	a2,a4,16
 80049a6:	4685                	li	a3,1
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 80049a8:	47dc                	lw	a5,12(a5)
        epinten = 1 << (16 + ep_num);
 80049aa:	00c696b3          	sll	a3,a3,a2
 80049ae:	b771                	j	800493a <usb_transc_active+0x1e>
            *reg_addr |= transc->max_len;
 80049b0:	4388                	lw	a0,0(a5)
 80049b2:	0045d683          	lhu	a3,4(a1)
 80049b6:	8ec9                	or	a3,a3,a0
 80049b8:	bf75                	j	8004974 <usb_transc_active+0x58>

080049ba <usb_transc_inxfer>:
*/
usb_status usb_transc_inxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 80049ba:	4190                	lw	a2,0(a1)
{
 80049bc:	1101                	addi	sp,sp,-32

    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 80049be:	e00006b7          	lui	a3,0xe0000
    uint8_t ep_num = transc->ep_addr.num;
 80049c2:	8a3d                	andi	a2,a2,15
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 80049c4:	00261793          	slli	a5,a2,0x2
 80049c8:	97aa                	add	a5,a5,a0
 80049ca:	4bd8                	lw	a4,20(a5)
{
 80049cc:	ce06                	sw	ra,28(sp)
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 80049ce:	431c                	lw	a5,0(a4)
 80049d0:	c43e                	sw	a5,8(sp)
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;
 80049d2:	4b1c                	lw	a5,16(a4)
 80049d4:	c63e                	sw	a5,12(sp)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 80049d6:	47b2                	lw	a5,12(sp)
 80049d8:	8ff5                	and	a5,a5,a3
 80049da:	c63e                	sw	a5,12(sp)

    /* zero length packet or endpoint 0 */
    if (0U == transc->xfer_len) {
 80049dc:	45dc                	lw	a5,12(a1)
 80049de:	e7a5                	bnez	a5,8004a46 <usb_transc_inxfer+0x8c>
        /* set transfer packet count to 1 */
        eplen |= 1 << 19;
 80049e0:	47b2                	lw	a5,12(sp)
 80049e2:	000806b7          	lui	a3,0x80

        /* set endpoint transfer length */
        eplen |= transc->xfer_len;

        if (transc->ep_type == USB_EPTYPE_ISOC) {
            eplen |= DIEPLEN_MCNT;
 80049e6:	8fd5                	or	a5,a5,a3
 80049e8:	c63e                	sw	a5,12(sp)
        }
    }

    udev->regs.er_in[ep_num]->DIEPLEN = eplen;
 80049ea:	47b2                	lw	a5,12(sp)
 80049ec:	cb1c                	sw	a5,16(a4)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80049ee:	00454683          	lbu	a3,4(a0)
 80049f2:	4785                	li	a5,1
 80049f4:	00f69463          	bne	a3,a5,80049fc <usb_transc_inxfer+0x42>
        udev->regs.er_in[ep_num]->DIEPDMAADDR = transc->dma_addr;
 80049f8:	4d9c                	lw	a5,24(a1)
 80049fa:	cb5c                	sw	a5,20(a4)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 80049fc:	0015c803          	lbu	a6,1(a1)
 8004a00:	4785                	li	a5,1
 8004a02:	00f81c63          	bne	a6,a5,8004a1a <usb_transc_inxfer+0x60>
        if (((udev->regs.dr->DSTAT & DSTAT_FNRSOF) >> 8) & 0x1) {
 8004a06:	455c                	lw	a5,12(a0)
 8004a08:	479c                	lw	a5,8(a5)
 8004a0a:	1007f793          	andi	a5,a5,256
 8004a0e:	cfb5                	beqz	a5,8004a8a <usb_transc_inxfer+0xd0>
            epctl |= DEPCTL_SD1PID;
 8004a10:	47a2                	lw	a5,8(sp)
 8004a12:	200006b7          	lui	a3,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004a16:	8fd5                	or	a5,a5,a3
 8004a18:	c43e                	sw	a5,8(sp)
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_CNAK | DEPCTL_EPEN;
 8004a1a:	47a2                	lw	a5,8(sp)
 8004a1c:	840006b7          	lui	a3,0x84000
 8004a20:	8fd5                	or	a5,a5,a3
 8004a22:	c43e                	sw	a5,8(sp)

    udev->regs.er_in[ep_num]->DIEPCTL = epctl;
 8004a24:	47a2                	lw	a5,8(sp)
 8004a26:	45d4                	lw	a3,12(a1)
 8004a28:	c31c                	sw	a5,0(a4)

    if (transc->ep_type != USB_EPTYPE_ISOC) {
 8004a2a:	4785                	li	a5,1
 8004a2c:	06f80363          	beq	a6,a5,8004a92 <usb_transc_inxfer+0xd8>
        /* enable the Tx FIFO empty interrupt for this endpoint */
        if (transc->xfer_len > 0) {
 8004a30:	c699                	beqz	a3,8004a3e <usb_transc_inxfer+0x84>
            udev->regs.dr->DIEPFEINTEN |= 1 << ep_num;
 8004a32:	4558                	lw	a4,12(a0)
 8004a34:	00c79633          	sll	a2,a5,a2
 8004a38:	5b54                	lw	a3,52(a4)
 8004a3a:	8e55                	or	a2,a2,a3
 8004a3c:	db50                	sw	a2,52(a4)
    } else {
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
    }

    return status;
}
 8004a3e:	40f2                	lw	ra,28(sp)
 8004a40:	4501                	li	a0,0
 8004a42:	6105                	addi	sp,sp,32
 8004a44:	8082                	ret
        if (0U == ep_num) {
 8004a46:	0045d683          	lhu	a3,4(a1)
 8004a4a:	e61d                	bnez	a2,8004a78 <usb_transc_inxfer+0xbe>
            transc->xfer_len = USB_MIN(transc->xfer_len, transc->max_len);
 8004a4c:	00f6f363          	bgeu	a3,a5,8004a52 <usb_transc_inxfer+0x98>
 8004a50:	87b6                	mv	a5,a3
 8004a52:	c5dc                	sw	a5,12(a1)
            eplen |= 1 << 19;
 8004a54:	47b2                	lw	a5,12(sp)
 8004a56:	000806b7          	lui	a3,0x80
 8004a5a:	8fd5                	or	a5,a5,a3
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 8004a5c:	c63e                	sw	a5,12(sp)
        eplen |= transc->xfer_len;
 8004a5e:	47b2                	lw	a5,12(sp)
 8004a60:	45d4                	lw	a3,12(a1)
 8004a62:	8fd5                	or	a5,a5,a3
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004a64:	0015c683          	lbu	a3,1(a1)
        eplen |= transc->xfer_len;
 8004a68:	c63e                	sw	a5,12(sp)
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004a6a:	4785                	li	a5,1
 8004a6c:	f6f69fe3          	bne	a3,a5,80049ea <usb_transc_inxfer+0x30>
            eplen |= DIEPLEN_MCNT;
 8004a70:	47b2                	lw	a5,12(sp)
 8004a72:	600006b7          	lui	a3,0x60000
 8004a76:	bf85                	j	80049e6 <usb_transc_inxfer+0x2c>
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 8004a78:	17fd                	addi	a5,a5,-1
 8004a7a:	97b6                	add	a5,a5,a3
 8004a7c:	02d7d7b3          	divu	a5,a5,a3
 8004a80:	4832                	lw	a6,12(sp)
 8004a82:	07ce                	slli	a5,a5,0x13
 8004a84:	0107e7b3          	or	a5,a5,a6
 8004a88:	bfd1                	j	8004a5c <usb_transc_inxfer+0xa2>
            epctl |= DEPCTL_SD0PID;
 8004a8a:	47a2                	lw	a5,8(sp)
 8004a8c:	100006b7          	lui	a3,0x10000
 8004a90:	b759                	j	8004a16 <usb_transc_inxfer+0x5c>
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
 8004a92:	458c                	lw	a1,8(a1)
 8004a94:	06c2                	slli	a3,a3,0x10
 8004a96:	82c1                	srli	a3,a3,0x10
 8004a98:	0521                	addi	a0,a0,8
 8004a9a:	00000097          	auipc	ra,0x0
 8004a9e:	dda080e7          	jalr	-550(ra) # 8004874 <usb_txfifo_write>
 8004aa2:	bf71                	j	8004a3e <usb_transc_inxfer+0x84>

08004aa4 <usb_transc_outxfer>:
*/
usb_status usb_transc_outxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 8004aa4:	4198                	lw	a4,0(a1)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);

    /* zero length packet or endpoint 0 */
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004aa6:	45d4                	lw	a3,12(a1)
    uint8_t ep_num = transc->ep_addr.num;
 8004aa8:	8b3d                	andi	a4,a4,15
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 8004aaa:	00870793          	addi	a5,a4,8
 8004aae:	078a                	slli	a5,a5,0x2
 8004ab0:	97aa                	add	a5,a5,a0
 8004ab2:	00c7a883          	lw	a7,12(a5)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004ab6:	e00007b7          	lui	a5,0xe0000
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 8004aba:	0008a603          	lw	a2,0(a7)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004abe:	0108a803          	lw	a6,16(a7)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004ac2:	00f87833          	and	a6,a6,a5
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004ac6:	0045d783          	lhu	a5,4(a1)
 8004aca:	c291                	beqz	a3,8004ace <usb_transc_outxfer+0x2a>
 8004acc:	e339                	bnez	a4,8004b12 <usb_transc_outxfer+0x6e>
        /* set the transfer length to max packet size */
        eplen |= transc->max_len;
 8004ace:	00f86833          	or	a6,a6,a5

        /* set the transfer packet count to 1 */
        eplen |= 1U << 19;
 8004ad2:	000807b7          	lui	a5,0x80
         * xfersize = N * maxpacket
         */
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;

        eplen |= packet_count << 19;
        eplen |= packet_count * transc->max_len;
 8004ad6:	0107e7b3          	or	a5,a5,a6
    }

    udev->regs.er_out[ep_num]->DOEPLEN = eplen;
 8004ada:	00f8a823          	sw	a5,16(a7)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ade:	00454703          	lbu	a4,4(a0)
 8004ae2:	4785                	li	a5,1
 8004ae4:	00f71563          	bne	a4,a5,8004aee <usb_transc_outxfer+0x4a>
        udev->regs.er_out[ep_num]->DOEPDMAADDR = transc->dma_addr;
 8004ae8:	4d9c                	lw	a5,24(a1)
 8004aea:	00f8aa23          	sw	a5,20(a7)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004aee:	0015c703          	lbu	a4,1(a1)
 8004af2:	4785                	li	a5,1
 8004af4:	00f71863          	bne	a4,a5,8004b04 <usb_transc_outxfer+0x60>
        if (transc->frame_num) {
 8004af8:	0035c783          	lbu	a5,3(a1)
 8004afc:	c79d                	beqz	a5,8004b2a <usb_transc_outxfer+0x86>
            epctl |= DEPCTL_SD1PID;
 8004afe:	200007b7          	lui	a5,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004b02:	8e5d                	or	a2,a2,a5
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_EPEN | DEPCTL_CNAK;
 8004b04:	840007b7          	lui	a5,0x84000
 8004b08:	8e5d                	or	a2,a2,a5

    udev->regs.er_out[ep_num]->DOEPCTL = epctl;
 8004b0a:	00c8a023          	sw	a2,0(a7)

    return status;
}
 8004b0e:	4501                	li	a0,0
 8004b10:	8082                	ret
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;
 8004b12:	fff68713          	addi	a4,a3,-1 # fffffff <__fini_array_end+0x7ff7a37>
 8004b16:	973e                	add	a4,a4,a5
 8004b18:	02f75733          	divu	a4,a4,a5
        eplen |= packet_count << 19;
 8004b1c:	01371693          	slli	a3,a4,0x13
 8004b20:	0106e833          	or	a6,a3,a6
        eplen |= packet_count * transc->max_len;
 8004b24:	02f707b3          	mul	a5,a4,a5
 8004b28:	b77d                	j	8004ad6 <usb_transc_outxfer+0x32>
            epctl |= DEPCTL_SD0PID;
 8004b2a:	100007b7          	lui	a5,0x10000
 8004b2e:	bfd1                	j	8004b02 <usb_transc_outxfer+0x5e>

08004b30 <usb_transc_stall>:
*/
usb_status usb_transc_stall (usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004b30:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004b32:	00058703          	lb	a4,0(a1)
 8004b36:	8bbd                	andi	a5,a5,15
 8004b38:	02075463          	bgez	a4,8004b60 <usb_transc_stall+0x30>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 8004b3c:	078a                	slli	a5,a5,0x2
 8004b3e:	97aa                	add	a5,a5,a0
 8004b40:	4bdc                	lw	a5,20(a5)

        /* set the endpoint disable bit */
        if (*reg_addr & DEPCTL_EPEN) {
 8004b42:	4398                	lw	a4,0(a5)
 8004b44:	00075763          	bgez	a4,8004b52 <usb_transc_stall+0x22>
            *reg_addr |= DEPCTL_EPD;
 8004b48:	4398                	lw	a4,0(a5)
 8004b4a:	400006b7          	lui	a3,0x40000
 8004b4e:	8f55                	or	a4,a4,a3
 8004b50:	c398                	sw	a4,0(a5)
        /* set the endpoint stall bit */
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
    }

    /* set the endpoint stall bit */
    *reg_addr |= DEPCTL_STALL;
 8004b52:	4398                	lw	a4,0(a5)
 8004b54:	002006b7          	lui	a3,0x200

    return USB_OK;
}
 8004b58:	4501                	li	a0,0
    *reg_addr |= DEPCTL_STALL;
 8004b5a:	8f55                	or	a4,a4,a3
 8004b5c:	c398                	sw	a4,0(a5)
}
 8004b5e:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004b60:	07a1                	addi	a5,a5,8
 8004b62:	078a                	slli	a5,a5,0x2
 8004b64:	97aa                	add	a5,a5,a0
 8004b66:	47dc                	lw	a5,12(a5)
 8004b68:	b7ed                	j	8004b52 <usb_transc_stall+0x22>

08004b6a <usb_transc_clrstall>:
*/
usb_status usb_transc_clrstall(usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004b6a:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004b6c:	00058703          	lb	a4,0(a1)
 8004b70:	8bbd                	andi	a5,a5,15
 8004b72:	02075a63          	bgez	a4,8004ba6 <usb_transc_clrstall+0x3c>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 8004b76:	078a                	slli	a5,a5,0x2
 8004b78:	97aa                	add	a5,a5,a0
 8004b7a:	4bdc                	lw	a5,20(a5)
    } else {
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004b7c:	4398                	lw	a4,0(a5)
    }

    /* clear the endpoint stall bits */
    *reg_addr &= ~DEPCTL_STALL;
 8004b7e:	ffe006b7          	lui	a3,0xffe00
 8004b82:	16fd                	addi	a3,a3,-1
 8004b84:	8f75                	and	a4,a4,a3
 8004b86:	c398                	sw	a4,0(a5)

    /* reset data PID of the periodic endpoints */
    if ((transc->ep_type == USB_EPTYPE_INTR) || (transc->ep_type == USB_EPTYPE_BULK)) {
 8004b88:	0015c703          	lbu	a4,1(a1)
 8004b8c:	4685                	li	a3,1
 8004b8e:	1779                	addi	a4,a4,-2
 8004b90:	0ff77713          	andi	a4,a4,255
 8004b94:	00e6e763          	bltu	a3,a4,8004ba2 <usb_transc_clrstall+0x38>
        *reg_addr |= DEPCTL_SD0PID;
 8004b98:	4398                	lw	a4,0(a5)
 8004b9a:	100006b7          	lui	a3,0x10000
 8004b9e:	8f55                	or	a4,a4,a3
 8004ba0:	c398                	sw	a4,0(a5)
    }

    return USB_OK;
}
 8004ba2:	4501                	li	a0,0
 8004ba4:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004ba6:	07a1                	addi	a5,a5,8
 8004ba8:	078a                	slli	a5,a5,0x2
 8004baa:	97aa                	add	a5,a5,a0
 8004bac:	47dc                	lw	a5,12(a5)
 8004bae:	b7f9                	j	8004b7c <usb_transc_clrstall+0x12>

08004bb0 <usb_oepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004bb0:	455c                	lw	a5,12(a0)
 8004bb2:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004bb4:	4fdc                	lw	a5,28(a5)
 8004bb6:	8d7d                	and	a0,a0,a5

    return (value & DAEPINT_OEPITB) >> 16;
 8004bb8:	8141                	srli	a0,a0,0x10
}
 8004bba:	03f57513          	andi	a0,a0,63
 8004bbe:	8082                	ret

08004bc0 <usb_oepintr_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = udev->regs.er_out[ep_num]->DOEPINTF;
 8004bc0:	05a1                	addi	a1,a1,8
 8004bc2:	058a                	slli	a1,a1,0x2
 8004bc4:	95aa                	add	a1,a1,a0
 8004bc6:	45dc                	lw	a5,12(a1)
 8004bc8:	4798                	lw	a4,8(a5)

    value &= udev->regs.dr->DOEPINTEN;
 8004bca:	455c                	lw	a5,12(a0)
 8004bcc:	4bc8                	lw	a0,20(a5)

    return value;
}
 8004bce:	8d79                	and	a0,a0,a4
 8004bd0:	8082                	ret

08004bd2 <usb_iepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_iepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004bd2:	455c                	lw	a5,12(a0)
 8004bd4:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004bd6:	4fdc                	lw	a5,28(a5)
 8004bd8:	8d7d                	and	a0,a0,a5
    
    return value & DAEPINT_IEPITB;
}
 8004bda:	03f57513          	andi	a0,a0,63
 8004bde:	8082                	ret

08004be0 <usb_iepintr_read>:
*/
uint32_t usb_iepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = 0U, fifoemptymask = 0U, commonintmask = 0U;

    commonintmask = udev->regs.dr->DIEPINTEN;
 8004be0:	4558                	lw	a4,12(a0)
 8004be2:	4b14                	lw	a3,16(a4)
    fifoemptymask = udev->regs.dr->DIEPFEINTEN;
 8004be4:	5b5c                	lw	a5,52(a4)

    /* check FIFO empty interrupt enable bit */
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;

    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004be6:	00259713          	slli	a4,a1,0x2
 8004bea:	953a                	add	a0,a0,a4
 8004bec:	4958                	lw	a4,20(a0)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004bee:	00b7d7b3          	srl	a5,a5,a1
 8004bf2:	079e                	slli	a5,a5,0x7
    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004bf4:	4708                	lw	a0,8(a4)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004bf6:	0ff7f793          	andi	a5,a5,255
 8004bfa:	8fd5                	or	a5,a5,a3

    return value;
}
 8004bfc:	8d7d                	and	a0,a0,a5
 8004bfe:	8082                	ret

08004c00 <usb_ctlep_startout>:
    \retval     none
*/
void usb_ctlep_startout (usb_core_driver *udev)
{
    /* set OUT endpoint 0 receive length to 24 bytes, 1 packet and 3 setup packets */
    udev->regs.er_out[0]->DOEPLEN = DOEP0_TLEN(8U * 3U) | DOEP0_PCNT(1U) | DOEP0_STPCNT(3U);
 8004c00:	555c                	lw	a5,44(a0)
 8004c02:	60080737          	lui	a4,0x60080
 8004c06:	0761                	addi	a4,a4,24
 8004c08:	cb98                	sw	a4,16(a5)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004c0a:	00454683          	lbu	a3,4(a0)
 8004c0e:	4705                	li	a4,1
 8004c10:	00e69a63          	bne	a3,a4,8004c24 <usb_ctlep_startout+0x24>
        udev->regs.er_out[0]->DOEPDMAADDR = (uint32_t)&udev->dev.control.req;
 8004c14:	42450513          	addi	a0,a0,1060
 8004c18:	cbc8                	sw	a0,20(a5)

        /* endpoint enable */
        udev->regs.er_out[0]->DOEPCTL |= DEPCTL_EPACT | DEPCTL_EPEN;
 8004c1a:	4398                	lw	a4,0(a5)
 8004c1c:	800086b7          	lui	a3,0x80008
 8004c20:	8f55                	or	a4,a4,a3
 8004c22:	c398                	sw	a4,0(a5)
    }
}
 8004c24:	8082                	ret

08004c26 <usb_clock_active>:
    \param[out] none
    \retval     none
*/
void usb_clock_active (usb_core_driver *udev)
{
    if (udev->bp.low_power) {
 8004c26:	00754783          	lbu	a5,7(a0)
 8004c2a:	cb91                	beqz	a5,8004c3e <usb_clock_active+0x18>
        if (udev->regs.dr->DSTAT & DSTAT_SPST) {
 8004c2c:	455c                	lw	a5,12(a0)
 8004c2e:	479c                	lw	a5,8(a5)
 8004c30:	8b85                	andi	a5,a5,1
 8004c32:	c791                	beqz	a5,8004c3e <usb_clock_active+0x18>
            /* un-gate USB Core clock */
            *udev->regs.PWRCLKCTL &= ~(PWRCLKCTL_SHCLK | PWRCLKCTL_SUCLK);
 8004c34:	0c052703          	lw	a4,192(a0)
 8004c38:	431c                	lw	a5,0(a4)
 8004c3a:	9bf1                	andi	a5,a5,-4
 8004c3c:	c31c                	sw	a5,0(a4)
        }
    }
}
 8004c3e:	8082                	ret

08004c40 <usbd_isr>:
    \param[out] none
    \retval     none
*/
void usbd_isr (usb_core_driver *udev)
{
    if (HOST_MODE != (udev->regs.gr->GINTF & GINTF_COPM)) {
 8004c40:	451c                	lw	a5,8(a0)
 8004c42:	4bd8                	lw	a4,20(a5)
 8004c44:	8b05                	andi	a4,a4,1
 8004c46:	12071c63          	bnez	a4,8004d7e <usbd_isr+0x13e>
{
 8004c4a:	1141                	addi	sp,sp,-16
 8004c4c:	c226                	sw	s1,4(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 8004c4e:	4bc4                	lw	s1,20(a5)
 8004c50:	4f9c                	lw	a5,24(a5)
{
 8004c52:	c606                	sw	ra,12(sp)
 8004c54:	c422                	sw	s0,8(sp)
 8004c56:	c04a                	sw	s2,0(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 8004c58:	8cfd                	and	s1,s1,a5

        /* there are no interrupts, avoid spurious interrupt */
        if (!intr) {
 8004c5a:	10048c63          	beqz	s1,8004d72 <usbd_isr+0x132>
            return;
        }

        /* OUT endpoints interrupts */
        if (intr & GINTF_OEPIF) {
 8004c5e:	00c49793          	slli	a5,s1,0xc
 8004c62:	842a                	mv	s0,a0
 8004c64:	0007d663          	bgez	a5,8004c70 <usbd_isr+0x30>
            usbd_int_epout (udev);
 8004c68:	00000097          	auipc	ra,0x0
 8004c6c:	118080e7          	jalr	280(ra) # 8004d80 <usbd_int_epout>
        }

        /* IN endpoints interrupts */
        if (intr & GINTF_IEPIF) {
 8004c70:	00d49793          	slli	a5,s1,0xd
 8004c74:	0007d763          	bgez	a5,8004c82 <usbd_isr+0x42>
            usbd_int_epin (udev);
 8004c78:	8522                	mv	a0,s0
 8004c7a:	00000097          	auipc	ra,0x0
 8004c7e:	204080e7          	jalr	516(ra) # 8004e7e <usbd_int_epin>
        }

        /* suspend interrupt */
        if (intr & GINTF_SP) {
 8004c82:	6785                	lui	a5,0x1
 8004c84:	80078793          	addi	a5,a5,-2048 # 800 <__dbg_stack_size+0x800>
 8004c88:	00f4f733          	and	a4,s1,a5
 8004c8c:	c319                	beqz	a4,8004c92 <usbd_isr+0x52>
        /* enter DEEP_SLEEP mode with LDO in low power mode */
   //     pmu_to_deepsleepmode(PMU_LDO_LOWPOWER, WFI_CMD);
    //}

    /* clear interrupt */
    udev->regs.gr->GINTF = GINTF_SP;
 8004c8e:	4418                	lw	a4,8(s0)
 8004c90:	cb5c                	sw	a5,20(a4)
        if (intr & GINTF_WKUPIF) {
 8004c92:	0004dc63          	bgez	s1,8004caa <usbd_isr+0x6a>
            udev->dev.cur_status = udev->dev.backup_status;
 8004c96:	0c744783          	lbu	a5,199(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004c9a:	80000737          	lui	a4,0x80000
            udev->dev.cur_status = udev->dev.backup_status;
 8004c9e:	0ff7f793          	andi	a5,a5,255
 8004ca2:	0cf40323          	sb	a5,198(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004ca6:	441c                	lw	a5,8(s0)
 8004ca8:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_MFIF) {
 8004caa:	0024f793          	andi	a5,s1,2
 8004cae:	c781                	beqz	a5,8004cb6 <usbd_isr+0x76>
            udev->regs.gr->GINTF = GINTF_MFIF;
 8004cb0:	441c                	lw	a5,8(s0)
 8004cb2:	4709                	li	a4,2
 8004cb4:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_SOF) {
 8004cb6:	0084f793          	andi	a5,s1,8
 8004cba:	c7b1                	beqz	a5,8004d06 <usbd_isr+0xc6>
            if (udev->dev.class_core->SOF) {
 8004cbc:	43042783          	lw	a5,1072(s0)
 8004cc0:	4f9c                	lw	a5,24(a5)
 8004cc2:	c399                	beqz	a5,8004cc8 <usbd_isr+0x88>
                udev->dev.class_core->SOF(udev); 
 8004cc4:	8522                	mv	a0,s0
 8004cc6:	9782                	jalr	a5
            if (0U != setupc_flag) {
 8004cc8:	20000937          	lui	s2,0x20000
 8004ccc:	52890913          	addi	s2,s2,1320 # 20000528 <setupc_flag>
 8004cd0:	00094783          	lbu	a5,0(s2)
 8004cd4:	0ff7f793          	andi	a5,a5,255
 8004cd8:	c785                	beqz	a5,8004d00 <usbd_isr+0xc0>
                setupc_flag ++;
 8004cda:	00094783          	lbu	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004cde:	4709                	li	a4,2
                setupc_flag ++;
 8004ce0:	0785                	addi	a5,a5,1
 8004ce2:	0ff7f793          	andi	a5,a5,255
 8004ce6:	00f90023          	sb	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004cea:	00094783          	lbu	a5,0(s2)
 8004cee:	00f77963          	bgeu	a4,a5,8004d00 <usbd_isr+0xc0>
                    usbd_setup_transc (udev);
 8004cf2:	8522                	mv	a0,s0
 8004cf4:	00001097          	auipc	ra,0x1
 8004cf8:	e62080e7          	jalr	-414(ra) # 8005b56 <usbd_setup_transc>
                    setupc_flag = 0U;
 8004cfc:	00090023          	sb	zero,0(s2)
            udev->regs.gr->GINTF = GINTF_SOF;
 8004d00:	441c                	lw	a5,8(s0)
 8004d02:	4721                	li	a4,8
 8004d04:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_RXFNEIF) {
 8004d06:	0104f793          	andi	a5,s1,16
 8004d0a:	c791                	beqz	a5,8004d16 <usbd_isr+0xd6>
            usbd_int_rxfifo (udev);
 8004d0c:	8522                	mv	a0,s0
 8004d0e:	00000097          	auipc	ra,0x0
 8004d12:	22c080e7          	jalr	556(ra) # 8004f3a <usbd_int_rxfifo>
        if (intr & GINTF_RST) {
 8004d16:	01349793          	slli	a5,s1,0x13
 8004d1a:	0007d763          	bgez	a5,8004d28 <usbd_isr+0xe8>
            usbd_int_reset (udev);
 8004d1e:	8522                	mv	a0,s0
 8004d20:	00000097          	auipc	ra,0x0
 8004d24:	2e0080e7          	jalr	736(ra) # 8005000 <usbd_int_reset>
        if (intr & GINTF_ENUMFIF) {
 8004d28:	01249793          	slli	a5,s1,0x12
 8004d2c:	0007d763          	bgez	a5,8004d3a <usbd_isr+0xfa>
            usbd_int_enumfinish (udev);
 8004d30:	8522                	mv	a0,s0
 8004d32:	00000097          	auipc	ra,0x0
 8004d36:	3a0080e7          	jalr	928(ra) # 80050d2 <usbd_int_enumfinish>
        if (intr & GINTF_ISOINCIF) {
 8004d3a:	00b49793          	slli	a5,s1,0xb
 8004d3e:	0007dc63          	bgez	a5,8004d56 <usbd_isr+0x116>
            if (NULL != udev->dev.class_core->incomplete_isoc_in) {
 8004d42:	43042783          	lw	a5,1072(s0)
 8004d46:	4fdc                	lw	a5,28(a5)
 8004d48:	c399                	beqz	a5,8004d4e <usbd_isr+0x10e>
                udev->dev.class_core->incomplete_isoc_in(udev);
 8004d4a:	8522                	mv	a0,s0
 8004d4c:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOINCIF;
 8004d4e:	441c                	lw	a5,8(s0)
 8004d50:	00100737          	lui	a4,0x100
 8004d54:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_ISOONCIF) {
 8004d56:	00a49793          	slli	a5,s1,0xa
 8004d5a:	0007dc63          	bgez	a5,8004d72 <usbd_isr+0x132>
            if (NULL != udev->dev.class_core->incomplete_isoc_out) {
 8004d5e:	43042783          	lw	a5,1072(s0)
 8004d62:	539c                	lw	a5,32(a5)
 8004d64:	c399                	beqz	a5,8004d6a <usbd_isr+0x12a>
                udev->dev.class_core->incomplete_isoc_out(udev);
 8004d66:	8522                	mv	a0,s0
 8004d68:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOONCIF;
 8004d6a:	441c                	lw	a5,8(s0)
 8004d6c:	00200737          	lui	a4,0x200
 8004d70:	cbd8                	sw	a4,20(a5)
}
 8004d72:	40b2                	lw	ra,12(sp)
 8004d74:	4422                	lw	s0,8(sp)
 8004d76:	4492                	lw	s1,4(sp)
 8004d78:	4902                	lw	s2,0(sp)
 8004d7a:	0141                	addi	sp,sp,16
 8004d7c:	8082                	ret
 8004d7e:	8082                	ret

08004d80 <usbd_int_epout>:
{
 8004d80:	7139                	addi	sp,sp,-64
 8004d82:	dc22                	sw	s0,56(sp)
 8004d84:	da26                	sw	s1,52(sp)
 8004d86:	d84a                	sw	s2,48(sp)
 8004d88:	d64e                	sw	s3,44(sp)
 8004d8a:	d452                	sw	s4,40(sp)
 8004d8c:	d256                	sw	s5,36(sp)
 8004d8e:	d05a                	sw	s6,32(sp)
 8004d90:	ce5e                	sw	s7,28(sp)
 8004d92:	cc62                	sw	s8,24(sp)
 8004d94:	de06                	sw	ra,60(sp)
 8004d96:	ca66                	sw	s9,20(sp)
 8004d98:	842a                	mv	s0,a0
                                                                (eplen & DEPLEN_TLEN);
 8004d9a:	00080a37          	lui	s4,0x80
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004d9e:	00000097          	auipc	ra,0x0
 8004da2:	e12080e7          	jalr	-494(ra) # 8004bb0 <usb_oepintnum_read>
 8004da6:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 8004da8:	4481                	li	s1,0
                if ((0U == ep_num) && (0U != setupc_flag)) {
 8004daa:	20000ab7          	lui	s5,0x20000
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004dae:	4b21                	li	s6,8
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004db0:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004db2:	4b99                	li	s7,6
 8004db4:	4c61                	li	s8,24
                                                                (eplen & DEPLEN_TLEN);
 8004db6:	1a7d                	addi	s4,s4,-1
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004db8:	02091063          	bnez	s2,8004dd8 <usbd_int_epout+0x58>
}
 8004dbc:	50f2                	lw	ra,60(sp)
 8004dbe:	5462                	lw	s0,56(sp)
 8004dc0:	54d2                	lw	s1,52(sp)
 8004dc2:	5942                	lw	s2,48(sp)
 8004dc4:	59b2                	lw	s3,44(sp)
 8004dc6:	5a22                	lw	s4,40(sp)
 8004dc8:	5a92                	lw	s5,36(sp)
 8004dca:	5b02                	lw	s6,32(sp)
 8004dcc:	4bf2                	lw	s7,28(sp)
 8004dce:	4c62                	lw	s8,24(sp)
 8004dd0:	4cd2                	lw	s9,20(sp)
 8004dd2:	4505                	li	a0,1
 8004dd4:	6121                	addi	sp,sp,64
 8004dd6:	8082                	ret
        if (epintnum & 0x1) {
 8004dd8:	00197793          	andi	a5,s2,1
 8004ddc:	cfc9                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
            __IO uint32_t oepintr = usb_oepintr_read (udev, ep_num);
 8004dde:	0ff4fc93          	andi	s9,s1,255
 8004de2:	85e6                	mv	a1,s9
 8004de4:	8522                	mv	a0,s0
 8004de6:	00000097          	auipc	ra,0x0
 8004dea:	dda080e7          	jalr	-550(ra) # 8004bc0 <usb_oepintr_read>
 8004dee:	c42a                	sw	a0,8(sp)
            if (oepintr & DOEPINTF_TF) {
 8004df0:	47a2                	lw	a5,8(sp)
 8004df2:	8b85                	andi	a5,a5,1
 8004df4:	cfa1                	beqz	a5,8004e4c <usbd_int_epout+0xcc>
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004df6:	00249793          	slli	a5,s1,0x2
 8004dfa:	97a2                	add	a5,a5,s0
 8004dfc:	57d8                	lw	a4,44(a5)
 8004dfe:	01372423          	sw	s3,8(a4) # 200008 <__stack_size+0x1ff008>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004e02:	00444683          	lbu	a3,4(s0)
 8004e06:	01369f63          	bne	a3,s3,8004e24 <usbd_int_epout+0xa4>
                    __IO uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004e0a:	4b18                	lw	a4,16(a4)
 8004e0c:	c63a                	sw	a4,12(sp)
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004e0e:	03848733          	mul	a4,s1,s8
                                                                (eplen & DEPLEN_TLEN);
 8004e12:	46b2                	lw	a3,12(sp)
 8004e14:	0146f6b3          	and	a3,a3,s4
 8004e18:	97ba                	add	a5,a5,a4
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004e1a:	2707d703          	lhu	a4,624(a5)
 8004e1e:	8f15                	sub	a4,a4,a3
 8004e20:	26e7ae23          	sw	a4,636(a5)
                usbd_out_transc (udev, ep_num);
 8004e24:	85e6                	mv	a1,s9
 8004e26:	8522                	mv	a0,s0
 8004e28:	00001097          	auipc	ra,0x1
 8004e2c:	dc2080e7          	jalr	-574(ra) # 8005bea <usbd_out_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004e30:	00444783          	lbu	a5,4(s0)
 8004e34:	01379c63          	bne	a5,s3,8004e4c <usbd_int_epout+0xcc>
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004e38:	e891                	bnez	s1,8004e4c <usbd_int_epout+0xcc>
 8004e3a:	42c44783          	lbu	a5,1068(s0)
 8004e3e:	01779763          	bne	a5,s7,8004e4c <usbd_int_epout+0xcc>
                        usb_ctlep_startout (udev);
 8004e42:	8522                	mv	a0,s0
 8004e44:	00000097          	auipc	ra,0x0
 8004e48:	dbc080e7          	jalr	-580(ra) # 8004c00 <usb_ctlep_startout>
            if (oepintr & DOEPINTF_STPF) {
 8004e4c:	47a2                	lw	a5,8(sp)
 8004e4e:	8ba1                	andi	a5,a5,8
 8004e50:	c39d                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
                if ((0U == ep_num) && (0U != setupc_flag)) {
 8004e52:	e095                	bnez	s1,8004e76 <usbd_int_epout+0xf6>
 8004e54:	528a8c93          	addi	s9,s5,1320 # 20000528 <setupc_flag>
 8004e58:	000cc783          	lbu	a5,0(s9)
 8004e5c:	0ff7f793          	andi	a5,a5,255
 8004e60:	cb99                	beqz	a5,8004e76 <usbd_int_epout+0xf6>
                    usbd_setup_transc (udev);
 8004e62:	8522                	mv	a0,s0
 8004e64:	00001097          	auipc	ra,0x1
 8004e68:	cf2080e7          	jalr	-782(ra) # 8005b56 <usbd_setup_transc>
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004e6c:	545c                	lw	a5,44(s0)
                    setupc_flag = 0U;
 8004e6e:	000c8023          	sb	zero,0(s9)
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004e72:	0167a423          	sw	s6,8(a5)
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004e76:	00195913          	srli	s2,s2,0x1
 8004e7a:	0485                	addi	s1,s1,1
 8004e7c:	bf35                	j	8004db8 <usbd_int_epout+0x38>

08004e7e <usbd_int_epin>:
{
 8004e7e:	7179                	addi	sp,sp,-48
 8004e80:	d422                	sw	s0,40(sp)
 8004e82:	d226                	sw	s1,36(sp)
 8004e84:	d04a                	sw	s2,32(sp)
 8004e86:	ce4e                	sw	s3,28(sp)
 8004e88:	cc52                	sw	s4,24(sp)
 8004e8a:	ca56                	sw	s5,20(sp)
 8004e8c:	d606                	sw	ra,44(sp)
 8004e8e:	c85a                	sw	s6,16(sp)
 8004e90:	842a                	mv	s0,a0
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004e92:	00000097          	auipc	ra,0x0
 8004e96:	d40080e7          	jalr	-704(ra) # 8004bd2 <usb_iepintnum_read>
 8004e9a:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 8004e9c:	4481                	li	s1,0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004e9e:	08000a13          	li	s4,128
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004ea2:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004ea4:	4a95                	li	s5,5
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004ea6:	00091d63          	bnez	s2,8004ec0 <usbd_int_epin+0x42>
}
 8004eaa:	50b2                	lw	ra,44(sp)
 8004eac:	5422                	lw	s0,40(sp)
 8004eae:	5492                	lw	s1,36(sp)
 8004eb0:	5902                	lw	s2,32(sp)
 8004eb2:	49f2                	lw	s3,28(sp)
 8004eb4:	4a62                	lw	s4,24(sp)
 8004eb6:	4ad2                	lw	s5,20(sp)
 8004eb8:	4b42                	lw	s6,16(sp)
 8004eba:	4505                	li	a0,1
 8004ebc:	6145                	addi	sp,sp,48
 8004ebe:	8082                	ret
        if (epintnum & 0x1U) {
 8004ec0:	00197793          	andi	a5,s2,1
 8004ec4:	c7bd                	beqz	a5,8004f32 <usbd_int_epin+0xb4>
            __IO uint32_t iepintr = usb_iepintr_read (udev, ep_num);
 8004ec6:	0ff4fb13          	andi	s6,s1,255
 8004eca:	85da                	mv	a1,s6
 8004ecc:	8522                	mv	a0,s0
 8004ece:	00000097          	auipc	ra,0x0
 8004ed2:	d12080e7          	jalr	-750(ra) # 8004be0 <usb_iepintr_read>
 8004ed6:	c62a                	sw	a0,12(sp)
            if (iepintr & DIEPINTF_TF) {
 8004ed8:	47b2                	lw	a5,12(sp)
 8004eda:	8b85                	andi	a5,a5,1
 8004edc:	cb9d                	beqz	a5,8004f12 <usbd_int_epin+0x94>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004ede:	00249793          	slli	a5,s1,0x2
 8004ee2:	97a2                	add	a5,a5,s0
 8004ee4:	4bdc                	lw	a5,20(a5)
                usbd_in_transc (udev, ep_num);
 8004ee6:	85da                	mv	a1,s6
 8004ee8:	8522                	mv	a0,s0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004eea:	0137a423          	sw	s3,8(a5)
                usbd_in_transc (udev, ep_num);
 8004eee:	00001097          	auipc	ra,0x1
 8004ef2:	de2080e7          	jalr	-542(ra) # 8005cd0 <usbd_in_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ef6:	00444783          	lbu	a5,4(s0)
 8004efa:	01379c63          	bne	a5,s3,8004f12 <usbd_int_epin+0x94>
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004efe:	e891                	bnez	s1,8004f12 <usbd_int_epin+0x94>
 8004f00:	42c44783          	lbu	a5,1068(s0)
 8004f04:	01579763          	bne	a5,s5,8004f12 <usbd_int_epin+0x94>
                        usb_ctlep_startout (udev);
 8004f08:	8522                	mv	a0,s0
 8004f0a:	00000097          	auipc	ra,0x0
 8004f0e:	cf6080e7          	jalr	-778(ra) # 8004c00 <usb_ctlep_startout>
            if (iepintr & DIEPINTF_TXFE) {
 8004f12:	47b2                	lw	a5,12(sp)
 8004f14:	0807f793          	andi	a5,a5,128
 8004f18:	cf89                	beqz	a5,8004f32 <usbd_int_epin+0xb4>
                usbd_emptytxfifo_write (udev, ep_num);
 8004f1a:	85a6                	mv	a1,s1
 8004f1c:	8522                	mv	a0,s0
 8004f1e:	00000097          	auipc	ra,0x0
 8004f22:	21c080e7          	jalr	540(ra) # 800513a <usbd_emptytxfifo_write>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004f26:	00249793          	slli	a5,s1,0x2
 8004f2a:	97a2                	add	a5,a5,s0
 8004f2c:	4bdc                	lw	a5,20(a5)
 8004f2e:	0147a423          	sw	s4,8(a5)
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004f32:	00195913          	srli	s2,s2,0x1
 8004f36:	0485                	addi	s1,s1,1
 8004f38:	b7bd                	j	8004ea6 <usbd_int_epin+0x28>

08004f3a <usbd_int_rxfifo>:
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f3a:	451c                	lw	a5,8(a0)
{
 8004f3c:	1101                	addi	sp,sp,-32
    __IO uint32_t devrxstat = 0;
 8004f3e:	c602                	sw	zero,12(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f40:	4f98                	lw	a4,24(a5)
{
 8004f42:	cc22                	sw	s0,24(sp)
 8004f44:	ca26                	sw	s1,20(sp)
 8004f46:	c84a                	sw	s2,16(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f48:	9b3d                	andi	a4,a4,-17
{
 8004f4a:	ce06                	sw	ra,28(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 8004f4c:	cf98                	sw	a4,24(a5)
    devrxstat = udev->regs.gr->GRSTATP;
 8004f4e:	539c                	lw	a5,32(a5)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f50:	4689                	li	a3,2
{
 8004f52:	892a                	mv	s2,a0
    devrxstat = udev->regs.gr->GRSTATP;
 8004f54:	c63e                	sw	a5,12(sp)
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 8004f56:	4432                	lw	s0,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f58:	44b2                	lw	s1,12(sp)
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004f5a:	4732                	lw	a4,12(sp)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f5c:	47b2                	lw	a5,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f5e:	8091                	srli	s1,s1,0x4
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 8004f60:	883d                	andi	s0,s0,15
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f62:	83c5                	srli	a5,a5,0x11
 8004f64:	8bbd                	andi	a5,a5,15
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 8004f66:	7ff4f493          	andi	s1,s1,2047
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 8004f6a:	02d78263          	beq	a5,a3,8004f8e <usbd_int_rxfifo+0x54>
 8004f6e:	4699                	li	a3,6
 8004f70:	04d78763          	beq	a5,a3,8004fbe <usbd_int_rxfifo+0x84>
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f74:	00892703          	lw	a4,8(s2)
}
 8004f78:	40f2                	lw	ra,28(sp)
 8004f7a:	4462                	lw	s0,24(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f7c:	4f1c                	lw	a5,24(a4)
}
 8004f7e:	44d2                	lw	s1,20(sp)
 8004f80:	4942                	lw	s2,16(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 8004f82:	0107e793          	ori	a5,a5,16
 8004f86:	cf1c                	sw	a5,24(a4)
}
 8004f88:	4505                	li	a0,1
 8004f8a:	6105                	addi	sp,sp,32
 8004f8c:	8082                	ret
            if (bcount > 0) {
 8004f8e:	d0fd                	beqz	s1,8004f74 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, transc->xfer_buf, bcount);
 8004f90:	47f1                	li	a5,28
 8004f92:	02f40433          	mul	s0,s0,a5
 8004f96:	8626                	mv	a2,s1
 8004f98:	942a                	add	s0,s0,a0
 8004f9a:	27442583          	lw	a1,628(s0)
 8004f9e:	0521                	addi	a0,a0,8
 8004fa0:	00000097          	auipc	ra,0x0
 8004fa4:	90e080e7          	jalr	-1778(ra) # 80048ae <usb_rxfifo_read>
                transc->xfer_buf += bcount;
 8004fa8:	27442783          	lw	a5,628(s0)
 8004fac:	97a6                	add	a5,a5,s1
 8004fae:	26f42a23          	sw	a5,628(s0)
                transc->xfer_count += bcount;
 8004fb2:	27c42783          	lw	a5,636(s0)
 8004fb6:	94be                	add	s1,s1,a5
 8004fb8:	26942e23          	sw	s1,636(s0)
 8004fbc:	bf65                	j	8004f74 <usbd_int_rxfifo+0x3a>
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004fbe:	47f1                	li	a5,28
 8004fc0:	02f40433          	mul	s0,s0,a5
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004fc4:	833d                	srli	a4,a4,0xf
 8004fc6:	8b0d                	andi	a4,a4,3
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004fc8:	942a                	add	s0,s0,a0
 8004fca:	26c44783          	lbu	a5,620(s0)
 8004fce:	8bbd                	andi	a5,a5,15
 8004fd0:	8fd9                	or	a5,a5,a4
 8004fd2:	f3cd                	bnez	a5,8004f74 <usbd_int_rxfifo+0x3a>
 8004fd4:	47a1                	li	a5,8
 8004fd6:	f8f49fe3          	bne	s1,a5,8004f74 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, (uint8_t *)&udev->dev.control.req, bcount);
 8004fda:	42450593          	addi	a1,a0,1060
 8004fde:	4621                	li	a2,8
 8004fe0:	0521                	addi	a0,a0,8
 8004fe2:	00000097          	auipc	ra,0x0
 8004fe6:	8cc080e7          	jalr	-1844(ra) # 80048ae <usb_rxfifo_read>
                transc->xfer_count += bcount;
 8004fea:	27c42783          	lw	a5,636(s0)
                setupc_flag = 1;
 8004fee:	4705                	li	a4,1
                transc->xfer_count += bcount;
 8004ff0:	07a1                	addi	a5,a5,8
 8004ff2:	26f42e23          	sw	a5,636(s0)
                setupc_flag = 1;
 8004ff6:	200007b7          	lui	a5,0x20000
 8004ffa:	52e78423          	sb	a4,1320(a5) # 20000528 <setupc_flag>
 8004ffe:	bf9d                	j	8004f74 <usbd_int_rxfifo+0x3a>

08005000 <usbd_int_reset>:
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005000:	4558                	lw	a4,12(a0)
{
 8005002:	1141                	addi	sp,sp,-16
 8005004:	c422                	sw	s0,8(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005006:	435c                	lw	a5,4(a4)
{
 8005008:	c606                	sw	ra,12(sp)
 800500a:	c226                	sw	s1,4(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 800500c:	9bf9                	andi	a5,a5,-2
{
 800500e:	c04a                	sw	s2,0(sp)
 8005010:	842a                	mv	s0,a0
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8005012:	c35c                	sw	a5,4(a4)
    usb_txfifo_flush (&udev->regs, 0);
 8005014:	4581                	li	a1,0
 8005016:	0521                	addi	a0,a0,8
 8005018:	00000097          	auipc	ra,0x0
 800501c:	8c8080e7          	jalr	-1848(ra) # 80048e0 <usb_txfifo_flush>
    for (i = 0; i < udev->bp.num_ep; i++) {
 8005020:	00344603          	lbu	a2,3(s0)
 8005024:	01440793          	addi	a5,s0,20
 8005028:	4701                	li	a4,0
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800502a:	0ff00693          	li	a3,255
    for (i = 0; i < udev->bp.num_ep; i++) {
 800502e:	08c76b63          	bltu	a4,a2,80050c4 <usbd_int_reset+0xc4>
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8005032:	445c                	lw	a5,12(s0)
 8005034:	577d                	li	a4,-1
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8005036:	4485                	li	s1,1
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8005038:	cf98                	sw	a4,24(a5)
    udev->regs.dr->DAEPINTEN = 1U | (1U << 16);
 800503a:	6741                	lui	a4,0x10
 800503c:	0705                	addi	a4,a4,1
 800503e:	cfd8                	sw	a4,28(a5)
    udev->regs.dr->DOEPINTEN = DOEPINTEN_STPFEN | DOEPINTEN_TFEN;
 8005040:	4725                	li	a4,9
 8005042:	cbd8                	sw	a4,20(a5)
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8005044:	cb84                	sw	s1,16(a5)
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8005046:	4398                	lw	a4,0(a5)
    usb_ctlep_startout (udev);
 8005048:	8522                	mv	a0,s0
    udev->dev.transc_out[0] = (usb_transc) {
 800504a:	04000913          	li	s2,64
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 800504e:	80f77713          	andi	a4,a4,-2033
 8005052:	c398                	sw	a4,0(a5)
    udev->dev.dev_addr = 0U;
 8005054:	0c0402a3          	sb	zero,197(s0)
    usb_ctlep_startout (udev);
 8005058:	00000097          	auipc	ra,0x0
 800505c:	ba8080e7          	jalr	-1112(ra) # 8004c00 <usb_ctlep_startout>
    udev->regs.gr->GINTF = GINTF_RST;
 8005060:	441c                	lw	a5,8(s0)
 8005062:	6705                	lui	a4,0x1
    udev->dev.transc_out[0] = (usb_transc) {
 8005064:	4671                	li	a2,28
    udev->regs.gr->GINTF = GINTF_RST;
 8005066:	cbd8                	sw	a4,20(a5)
    udev->dev.transc_out[0] = (usb_transc) {
 8005068:	26c40793          	addi	a5,s0,620
 800506c:	853e                	mv	a0,a5
 800506e:	4581                	li	a1,0
 8005070:	00003097          	auipc	ra,0x3
 8005074:	95a080e7          	jalr	-1702(ra) # 80079ca <memset>
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 8005078:	85aa                	mv	a1,a0
    udev->dev.transc_out[0] = (usb_transc) {
 800507a:	27241823          	sh	s2,624(s0)
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 800507e:	8522                	mv	a0,s0
 8005080:	00000097          	auipc	ra,0x0
 8005084:	89c080e7          	jalr	-1892(ra) # 800491c <usb_transc_active>
    udev->dev.transc_in[0] = (usb_transc) {
 8005088:	0c840793          	addi	a5,s0,200
 800508c:	4671                	li	a2,28
 800508e:	4581                	li	a1,0
 8005090:	853e                	mv	a0,a5
 8005092:	00003097          	auipc	ra,0x3
 8005096:	938080e7          	jalr	-1736(ra) # 80079ca <memset>
 800509a:	f8000713          	li	a4,-128
 800509e:	0d241623          	sh	s2,204(s0)
 80050a2:	0ce40423          	sb	a4,200(s0)
    usb_transc_active (udev, &udev->dev.transc_in[0]);
 80050a6:	85aa                	mv	a1,a0
 80050a8:	8522                	mv	a0,s0
 80050aa:	00000097          	auipc	ra,0x0
 80050ae:	872080e7          	jalr	-1934(ra) # 800491c <usb_transc_active>
}
 80050b2:	40b2                	lw	ra,12(sp)
    udev->dev.cur_status = USBD_DEFAULT;
 80050b4:	0c940323          	sb	s1,198(s0)
}
 80050b8:	4422                	lw	s0,8(sp)
 80050ba:	4492                	lw	s1,4(sp)
 80050bc:	4902                	lw	s2,0(sp)
 80050be:	4505                	li	a0,1
 80050c0:	0141                	addi	sp,sp,16
 80050c2:	8082                	ret
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 80050c4:	438c                	lw	a1,0(a5)
    for (i = 0; i < udev->bp.num_ep; i++) {
 80050c6:	0705                	addi	a4,a4,1
 80050c8:	0791                	addi	a5,a5,4
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 80050ca:	c594                	sw	a3,8(a1)
        udev->regs.er_out[i]->DOEPINTF = 0xFFU;
 80050cc:	4bcc                	lw	a1,20(a5)
 80050ce:	c594                	sw	a3,8(a1)
 80050d0:	bfb9                	j	800502e <usbd_int_reset+0x2e>

080050d2 <usbd_int_enumfinish>:
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050d2:	455c                	lw	a5,12(a0)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 80050d4:	7671                	lui	a2,0xffffc
 80050d6:	3ff60613          	addi	a2,a2,1023 # ffffc3ff <_sp+0xdfff43ff>
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050da:	4798                	lw	a4,8(a5)
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 80050dc:	43d4                	lw	a3,4(a5)
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 80050de:	8305                	srli	a4,a4,0x1
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 80050e0:	eff6f693          	andi	a3,a3,-257
 80050e4:	c3d4                	sw	a3,4(a5)
    udev->regs.dr->DCTL |= DCTL_CGINAK;
 80050e6:	43d4                	lw	a3,4(a5)
 80050e8:	1006e693          	ori	a3,a3,256
 80050ec:	c3d4                	sw	a3,4(a5)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 80050ee:	451c                	lw	a5,8(a0)
 80050f0:	47d4                	lw	a3,12(a5)
 80050f2:	8ef1                	and	a3,a3,a2
 80050f4:	c7d4                	sw	a3,12(a5)
    if (USB_SPEED[enum_speed] == USB_SPEED_HIGH) {
 80050f6:	00377693          	andi	a3,a4,3
 80050fa:	08008737          	lui	a4,0x8008
 80050fe:	5c070713          	addi	a4,a4,1472 # 80085c0 <USB_SPEED>
 8005102:	9736                	add	a4,a4,a3
 8005104:	00074703          	lbu	a4,0(a4)
 8005108:	468d                	li	a3,3
 800510a:	00d71e63          	bne	a4,a3,8005126 <usbd_int_enumfinish+0x54>
        udev->bp.core_speed = USB_SPEED_HIGH;
 800510e:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x09 << 10;
 8005112:	47d8                	lw	a4,12(a5)
 8005114:	6689                	lui	a3,0x2
 8005116:	40068693          	addi	a3,a3,1024 # 2400 <__stack_size+0x1400>
 800511a:	8f55                	or	a4,a4,a3
 800511c:	c7d8                	sw	a4,12(a5)
    udev->regs.gr->GINTF = GINTF_ENUMFIF;
 800511e:	6709                	lui	a4,0x2
 8005120:	cbd8                	sw	a4,20(a5)
}
 8005122:	4505                	li	a0,1
 8005124:	8082                	ret
        udev->bp.core_speed = USB_SPEED_FULL;
 8005126:	4709                	li	a4,2
 8005128:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x05 << 10;
 800512c:	47d8                	lw	a4,12(a5)
 800512e:	6685                	lui	a3,0x1
 8005130:	40068693          	addi	a3,a3,1024 # 1400 <__stack_size+0x400>
 8005134:	8f55                	or	a4,a4,a3
 8005136:	c7d8                	sw	a4,12(a5)
 8005138:	b7dd                	j	800511e <usbd_int_enumfinish+0x4c>

0800513a <usbd_emptytxfifo_write>:
    uint32_t len = 0;
    uint32_t word_count = 0;

    transc = &udev->dev.transc_in[ep_num];

    len = transc->xfer_len - transc->xfer_count;
 800513a:	47f1                	li	a5,28
 800513c:	02f587b3          	mul	a5,a1,a5
{
 8005140:	7179                	addi	sp,sp,-48
 8005142:	ce4e                	sw	s3,28(sp)
 8005144:	d606                	sw	ra,44(sp)
 8005146:	d422                	sw	s0,40(sp)
 8005148:	d226                	sw	s1,36(sp)
 800514a:	d04a                	sw	s2,32(sp)
 800514c:	cc52                	sw	s4,24(sp)
 800514e:	ca56                	sw	s5,20(sp)
 8005150:	c85a                	sw	s6,16(sp)
    len = transc->xfer_len - transc->xfer_count;
 8005152:	97aa                	add	a5,a5,a0
 8005154:	0d47a703          	lw	a4,212(a5)
 8005158:	0d87a683          	lw	a3,216(a5)

    /* get the data length to write */
    if (len > transc->max_len) {
 800515c:	0cc7d783          	lhu	a5,204(a5)
{
 8005160:	c65e                	sw	s7,12(sp)
 8005162:	c462                	sw	s8,8(sp)
    len = transc->xfer_len - transc->xfer_count;
 8005164:	8f15                	sub	a4,a4,a3
{
 8005166:	89aa                	mv	s3,a0
        len = transc->max_len;
    }

    word_count = (len + 3) / 4;
 8005168:	00f77363          	bgeu	a4,a5,800516e <usbd_emptytxfifo_write+0x34>
 800516c:	87ba                	mv	a5,a4

    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
        (transc->xfer_count < transc->xfer_len)) {
 800516e:	4471                	li	s0,28
 8005170:	02858433          	mul	s0,a1,s0
        transc->xfer_buf += len;
        transc->xfer_count += len;

        if (transc->xfer_count == transc->xfer_len) {
            /* disable the device endpoint FIFO empty interrupt */
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005174:	4a85                	li	s5,1
    word_count = (len + 3) / 4;
 8005176:	078d                	addi	a5,a5,3
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005178:	00ba9ab3          	sll	s5,s5,a1
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 800517c:	00259b13          	slli	s6,a1,0x2
 8005180:	6bc1                	lui	s7,0x10
    word_count = (len + 3) / 4;
 8005182:	0027da13          	srli	s4,a5,0x2
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005186:	fffaca93          	not	s5,s5
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 800518a:	9b4e                	add	s6,s6,s3
 800518c:	1bfd                	addi	s7,s7,-1
        (transc->xfer_count < transc->xfer_len)) {
 800518e:	944e                	add	s0,s0,s3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8005190:	0ff5f913          	andi	s2,a1,255
 8005194:	00898c13          	addi	s8,s3,8
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 8005198:	014b2783          	lw	a5,20(s6)
 800519c:	4f98                	lw	a4,24(a5)
 800519e:	01777733          	and	a4,a4,s7
 80051a2:	00ea7863          	bgeu	s4,a4,80051b2 <usbd_emptytxfifo_write+0x78>
        (transc->xfer_count < transc->xfer_len)) {
 80051a6:	0d842703          	lw	a4,216(s0)
 80051aa:	0d442783          	lw	a5,212(s0)
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80051ae:	00f76f63          	bltu	a4,a5,80051cc <usbd_emptytxfifo_write+0x92>
        }
    }

    return 1;
}
 80051b2:	50b2                	lw	ra,44(sp)
 80051b4:	5422                	lw	s0,40(sp)
 80051b6:	5492                	lw	s1,36(sp)
 80051b8:	5902                	lw	s2,32(sp)
 80051ba:	49f2                	lw	s3,28(sp)
 80051bc:	4a62                	lw	s4,24(sp)
 80051be:	4ad2                	lw	s5,20(sp)
 80051c0:	4b42                	lw	s6,16(sp)
 80051c2:	4bb2                	lw	s7,12(sp)
 80051c4:	4c22                	lw	s8,8(sp)
 80051c6:	4505                	li	a0,1
 80051c8:	6145                	addi	sp,sp,48
 80051ca:	8082                	ret
        if (len > transc->max_len) {
 80051cc:	0cc45483          	lhu	s1,204(s0)
        len = transc->xfer_len - transc->xfer_count;
 80051d0:	8f99                	sub	a5,a5,a4
        if (len > transc->max_len) {
 80051d2:	0097f363          	bgeu	a5,s1,80051d8 <usbd_emptytxfifo_write+0x9e>
 80051d6:	84be                	mv	s1,a5
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051d8:	0d042583          	lw	a1,208(s0)
 80051dc:	01049693          	slli	a3,s1,0x10
        word_count = (len + 3) / 4;
 80051e0:	00348793          	addi	a5,s1,3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051e4:	82c1                	srli	a3,a3,0x10
 80051e6:	864a                	mv	a2,s2
 80051e8:	8562                	mv	a0,s8
        word_count = (len + 3) / 4;
 80051ea:	0027da13          	srli	s4,a5,0x2
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80051ee:	fffff097          	auipc	ra,0xfffff
 80051f2:	686080e7          	jalr	1670(ra) # 8004874 <usb_txfifo_write>
        transc->xfer_count += len;
 80051f6:	0d842783          	lw	a5,216(s0)
        transc->xfer_buf += len;
 80051fa:	0d042703          	lw	a4,208(s0)
 80051fe:	9726                	add	a4,a4,s1
        transc->xfer_count += len;
 8005200:	94be                	add	s1,s1,a5
        if (transc->xfer_count == transc->xfer_len) {
 8005202:	0d442783          	lw	a5,212(s0)
        transc->xfer_buf += len;
 8005206:	0ce42823          	sw	a4,208(s0)
        transc->xfer_count += len;
 800520a:	0c942c23          	sw	s1,216(s0)
        if (transc->xfer_count == transc->xfer_len) {
 800520e:	f8f495e3          	bne	s1,a5,8005198 <usbd_emptytxfifo_write+0x5e>
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8005212:	00c9a783          	lw	a5,12(s3)
 8005216:	5bd8                	lw	a4,52(a5)
 8005218:	01577733          	and	a4,a4,s5
 800521c:	dbd8                	sw	a4,52(a5)
 800521e:	bfad                	j	8005198 <usbd_emptytxfifo_write+0x5e>

08005220 <usb_udelay>:
    \retval     none
*/
static void hw_delay(uint32_t ntime, uint8_t unit)
{
    if(unit == TIM_USEC_DELAY){
        usb_delay_1us(ntime);
 8005220:	00000317          	auipc	t1,0x0
 8005224:	0e030067          	jr	224(t1) # 8005300 <usb_delay_1us>

08005228 <USBFS_IRQHandler>:
    \retval     none
*/
void USBFS_IRQHandler (void)
{ 
    //DEBUG_PIN_ON();
    usbd_isr (&USB_OTG_dev);
 8005228:	20000537          	lui	a0,0x20000
 800522c:	04450513          	addi	a0,a0,68 # 20000044 <USB_OTG_dev>
 8005230:	00000317          	auipc	t1,0x0
 8005234:	a1030067          	jr	-1520(t1) # 8004c40 <usbd_isr>

08005238 <USBFS_WKUP_IRQHandler>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void USBFS_WKUP_IRQHandler(void)
{
 8005238:	1141                	addi	sp,sp,-16
 800523a:	c422                	sw	s0,8(sp)
    //DEBUG_PIN_ON();
    if (USB_OTG_dev.bp.low_power) {
 800523c:	20000437          	lui	s0,0x20000
{
 8005240:	c606                	sw	ra,12(sp)
    if (USB_OTG_dev.bp.low_power) {
 8005242:	04440793          	addi	a5,s0,68 # 20000044 <USB_OTG_dev>
 8005246:	0077c783          	lbu	a5,7(a5)
 800524a:	cb8d                	beqz	a5,800527c <USBFS_WKUP_IRQHandler+0x44>
        //SystemInit();
        set_usb_clock_96m_hxtal();
 800524c:	00000097          	auipc	ra,0x0
 8005250:	128080e7          	jalr	296(ra) # 8005374 <set_usb_clock_96m_hxtal>
        rcu_usb_clock_config(usbfs_prescaler);
 8005254:	200007b7          	lui	a5,0x20000
 8005258:	52c7a503          	lw	a0,1324(a5) # 2000052c <usbfs_prescaler>
 800525c:	ffffc097          	auipc	ra,0xffffc
 8005260:	fd2080e7          	jalr	-46(ra) # 800122e <rcu_usb_clock_config>

        rcu_periph_clock_enable(RCU_USBFS);
 8005264:	50c00513          	li	a0,1292
 8005268:	ffffc097          	auipc	ra,0xffffc
 800526c:	f3a080e7          	jalr	-198(ra) # 80011a2 <rcu_periph_clock_enable>

        usb_clock_active(&USB_OTG_dev);
 8005270:	04440513          	addi	a0,s0,68
 8005274:	00000097          	auipc	ra,0x0
 8005278:	9b2080e7          	jalr	-1614(ra) # 8004c26 <usb_clock_active>
    }

    exti_interrupt_flag_clear(EXTI_18);
}
 800527c:	4422                	lw	s0,8(sp)
 800527e:	40b2                	lw	ra,12(sp)
    exti_interrupt_flag_clear(EXTI_18);
 8005280:	00040537          	lui	a0,0x40
}
 8005284:	0141                	addi	sp,sp,16
    exti_interrupt_flag_clear(EXTI_18);
 8005286:	ffffc317          	auipc	t1,0xffffc
 800528a:	c6a30067          	jr	-918(t1) # 8000ef0 <exti_interrupt_flag_clear>

0800528e <usb_delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void usb_delay_1ms(uint32_t count)
{
 800528e:	1101                	addi	sp,sp,-32
 8005290:	cc22                	sw	s0,24(sp)
 8005292:	c64e                	sw	s3,12(sp)
 8005294:	c452                	sw	s4,8(sp)
 8005296:	ce06                	sw	ra,28(sp)
 8005298:	ca26                	sw	s1,20(sp)
 800529a:	c84a                	sw	s2,16(sp)
 800529c:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 800529e:	ffffd097          	auipc	ra,0xffffd
 80052a2:	aec080e7          	jalr	-1300(ra) # 8001d8a <get_timer_value>
 80052a6:	8a2a                	mv	s4,a0
 80052a8:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 80052aa:	ffffd097          	auipc	ra,0xffffd
 80052ae:	ae0080e7          	jalr	-1312(ra) # 8001d8a <get_timer_value>
 80052b2:	84aa                	mv	s1,a0
 80052b4:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 80052b6:	00aa1463          	bne	s4,a0,80052be <usb_delay_1ms+0x30>
 80052ba:	feb408e3          	beq	s0,a1,80052aa <usb_delay_1ms+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052be:	6405                	lui	s0,0x1
 80052c0:	20000a37          	lui	s4,0x20000
 80052c4:	fa040413          	addi	s0,s0,-96 # fa0 <__dbg_stack_size+0xfa0>
	delta_mtime = get_timer_value() - start_mtime;
 80052c8:	ffffd097          	auipc	ra,0xffffd
 80052cc:	ac2080e7          	jalr	-1342(ra) # 8001d8a <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052d0:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 80052d4:	40950733          	sub	a4,a0,s1
 80052d8:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052dc:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 80052e0:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 80052e4:	033787b3          	mul	a5,a5,s3
 80052e8:	00a59463          	bne	a1,a0,80052f0 <usb_delay_1ms+0x62>
 80052ec:	fcf76ee3          	bltu	a4,a5,80052c8 <usb_delay_1ms+0x3a>
}
 80052f0:	40f2                	lw	ra,28(sp)
 80052f2:	4462                	lw	s0,24(sp)
 80052f4:	44d2                	lw	s1,20(sp)
 80052f6:	4942                	lw	s2,16(sp)
 80052f8:	49b2                	lw	s3,12(sp)
 80052fa:	4a22                	lw	s4,8(sp)
 80052fc:	6105                	addi	sp,sp,32
 80052fe:	8082                	ret

08005300 <usb_delay_1us>:

void usb_delay_1us(uint32_t count)
{
 8005300:	1101                	addi	sp,sp,-32
 8005302:	cc22                	sw	s0,24(sp)
 8005304:	c64e                	sw	s3,12(sp)
 8005306:	c452                	sw	s4,8(sp)
 8005308:	ce06                	sw	ra,28(sp)
 800530a:	ca26                	sw	s1,20(sp)
 800530c:	c84a                	sw	s2,16(sp)
 800530e:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8005310:	ffffd097          	auipc	ra,0xffffd
 8005314:	a7a080e7          	jalr	-1414(ra) # 8001d8a <get_timer_value>
 8005318:	8a2a                	mv	s4,a0
 800531a:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800531c:	ffffd097          	auipc	ra,0xffffd
 8005320:	a6e080e7          	jalr	-1426(ra) # 8001d8a <get_timer_value>
 8005324:	84aa                	mv	s1,a0
 8005326:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 8005328:	00aa1463          	bne	s4,a0,8005330 <usb_delay_1us+0x30>
 800532c:	feb408e3          	beq	s0,a1,800531c <usb_delay_1us+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005330:	003d1437          	lui	s0,0x3d1
 8005334:	20000a37          	lui	s4,0x20000
 8005338:	90040413          	addi	s0,s0,-1792 # 3d0900 <__stack_size+0x3cf900>
	delta_mtime = get_timer_value() - start_mtime;
 800533c:	ffffd097          	auipc	ra,0xffffd
 8005340:	a4e080e7          	jalr	-1458(ra) # 8001d8a <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005344:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 8005348:	40950733          	sub	a4,a0,s1
 800534c:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005350:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 8005354:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8005358:	033787b3          	mul	a5,a5,s3
 800535c:	00a59463          	bne	a1,a0,8005364 <usb_delay_1us+0x64>
 8005360:	fcf76ee3          	bltu	a4,a5,800533c <usb_delay_1us+0x3c>
 8005364:	40f2                	lw	ra,28(sp)
 8005366:	4462                	lw	s0,24(sp)
 8005368:	44d2                	lw	s1,20(sp)
 800536a:	4942                	lw	s2,16(sp)
 800536c:	49b2                	lw	s3,12(sp)
 800536e:	4a22                	lw	s4,8(sp)
 8005370:	6105                	addi	sp,sp,32
 8005372:	8082                	ret

08005374 <set_usb_clock_96m_hxtal>:

void set_usb_clock_96m_hxtal(void){

    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8005374:	400217b7          	lui	a5,0x40021
 8005378:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 800537a:	e0ff06b7          	lui	a3,0xe0ff0
 800537e:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8005380:	00176713          	ori	a4,a4,1
 8005384:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8005386:	43d8                	lw	a4,4(a5)
 8005388:	8f75                	and	a4,a4,a3
 800538a:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800538c:	4398                	lw	a4,0(a5)
 800538e:	fef706b7          	lui	a3,0xfef70
 8005392:	16fd                	addi	a3,a3,-1
 8005394:	8f75                	and	a4,a4,a3
 8005396:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8005398:	4398                	lw	a4,0(a5)
 800539a:	fffc06b7          	lui	a3,0xfffc0
 800539e:	16fd                	addi	a3,a3,-1
 80053a0:	8f75                	and	a4,a4,a3
 80053a2:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 80053a4:	43d8                	lw	a4,4(a5)
 80053a6:	df0106b7          	lui	a3,0xdf010
 80053aa:	16fd                	addi	a3,a3,-1
 80053ac:	8f75                	and	a4,a4,a3
 80053ae:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 80053b0:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 80053b4:	4398                	lw	a4,0(a5)
 80053b6:	eaf706b7          	lui	a3,0xeaf70
 80053ba:	16fd                	addi	a3,a3,-1
 80053bc:	8f75                	and	a4,a4,a3
 80053be:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 80053c0:	00ff0737          	lui	a4,0xff0
 80053c4:	c798                	sw	a4,8(a5)

    uint32_t timeout = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 80053c6:	4394                	lw	a3,0(a5)
 80053c8:	6741                	lui	a4,0x10
 80053ca:	8ed9                	or	a3,a3,a4
 80053cc:	c394                	sw	a3,0(a5)
 80053ce:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 80053d2:	40021737          	lui	a4,0x40021
 80053d6:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 80053d8:	00e69613          	slli	a2,a3,0xe
 80053dc:	00064463          	bltz	a2,80053e4 <set_usb_clock_96m_hxtal+0x70>
 80053e0:	17fd                	addi	a5,a5,-1
 80053e2:	fbf5                	bnez	a5,80053d6 <set_usb_clock_96m_hxtal+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 80053e4:	400217b7          	lui	a5,0x40021
 80053e8:	4398                	lw	a4,0(a5)
 80053ea:	00e71693          	slli	a3,a4,0xe
 80053ee:	0006c363          	bltz	a3,80053f4 <set_usb_clock_96m_hxtal+0x80>
        while(1){
        }
 80053f2:	a001                	j	80053f2 <set_usb_clock_96m_hxtal+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80053f4:	43d8                	lw	a4,4(a5)
        while((RCU_CTL & RCU_CTL_PLL1STB) == 0){
        }

    }else if(HXTAL_VALUE==8000000){
        /* CK_PLL = (CK_PREDIV0) * 24 = 96 MHz */
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80053f6:	dfc406b7          	lui	a3,0xdfc40
 80053fa:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80053fc:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 80053fe:	43d8                	lw	a4,4(a5)
 8005400:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8005402:	43d8                	lw	a4,4(a5)
 8005404:	40076713          	ori	a4,a4,1024
 8005408:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 800540a:	43d8                	lw	a4,4(a5)
 800540c:	8f75                	and	a4,a4,a3
 800540e:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL24);
 8005410:	43d8                	lw	a4,4(a5)
 8005412:	201d06b7          	lui	a3,0x201d0
 8005416:	8f55                	or	a4,a4,a3
 8005418:	c3d8                	sw	a4,4(a5)

		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 800541a:	57d8                	lw	a4,44(a5)
 800541c:	76bd                	lui	a3,0xfffef
 800541e:	8f75                	and	a4,a4,a3
 8005420:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8005422:	57d8                	lw	a4,44(a5)
    }

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8005424:	010006b7          	lui	a3,0x1000
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8005428:	00176713          	ori	a4,a4,1
 800542c:	d7d8                	sw	a4,44(a5)
    RCU_CTL |= RCU_CTL_PLLEN;
 800542e:	4398                	lw	a4,0(a5)
 8005430:	8f55                	or	a4,a4,a3
 8005432:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8005434:	400217b7          	lui	a5,0x40021
 8005438:	4398                	lw	a4,0(a5)
 800543a:	00671693          	slli	a3,a4,0x6
 800543e:	fe06dde3          	bgez	a3,8005438 <set_usb_clock_96m_hxtal+0xc4>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8005442:	43d8                	lw	a4,4(a5)
 8005444:	9b71                	andi	a4,a4,-4
 8005446:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8005448:	43d8                	lw	a4,4(a5)
 800544a:	00276713          	ori	a4,a4,2
 800544e:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8005450:	40021737          	lui	a4,0x40021
 8005454:	435c                	lw	a5,4(a4)
 8005456:	8ba1                	andi	a5,a5,8
 8005458:	dff5                	beqz	a5,8005454 <set_usb_clock_96m_hxtal+0xe0>
    }
    //SystemCoreClock = 96000000;
    SystemCoreClockUpdate();
 800545a:	ffffc317          	auipc	t1,0xffffc
 800545e:	77030067          	jr	1904(t1) # 8001bca <SystemCoreClockUpdate>

08005462 <usbd_ep_recev>:
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_recev (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005462:	07f5f793          	andi	a5,a1,127
 8005466:	45f1                	li	a1,28
 8005468:	02b787b3          	mul	a5,a5,a1
{
 800546c:	1141                	addi	sp,sp,-16
 800546e:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8005470:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005472:	26c78593          	addi	a1,a5,620 # 4002126c <_sp+0x2001926c>
    transc->xfer_buf = pbuf;
 8005476:	97aa                	add	a5,a5,a0
 8005478:	26c7aa23          	sw	a2,628(a5)
    transc->xfer_len = len;
 800547c:	26d7ac23          	sw	a3,632(a5)
    transc->xfer_count = 0;
 8005480:	2607ae23          	sw	zero,636(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8005484:	00454683          	lbu	a3,4(a0) # 40004 <__stack_size+0x3f004>
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8005488:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 800548a:	00e69463          	bne	a3,a4,8005492 <usbd_ep_recev+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 800548e:	28c7a223          	sw	a2,644(a5)
    }

    /* start the transfer */
    usb_transc_outxfer (udev, transc);
 8005492:	fffff097          	auipc	ra,0xfffff
 8005496:	612080e7          	jalr	1554(ra) # 8004aa4 <usb_transc_outxfer>

    return 0;
}
 800549a:	40b2                	lw	ra,12(sp)
 800549c:	4501                	li	a0,0
 800549e:	0141                	addi	sp,sp,16
 80054a0:	8082                	ret

080054a2 <usbd_ep_send>:
    \param[out] none
    \retval     none
*/
uint32_t  usbd_ep_send (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054a2:	07f5f793          	andi	a5,a1,127
 80054a6:	45f1                	li	a1,28
 80054a8:	02b787b3          	mul	a5,a5,a1
{
 80054ac:	1141                	addi	sp,sp,-16
 80054ae:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054b0:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054b2:	0c878593          	addi	a1,a5,200
    transc->xfer_buf = pbuf;
 80054b6:	97aa                	add	a5,a5,a0
 80054b8:	0cc7a823          	sw	a2,208(a5)
    transc->xfer_len = len;
 80054bc:	0cd7aa23          	sw	a3,212(a5)
    transc->xfer_count = 0;
 80054c0:	0c07ac23          	sw	zero,216(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054c4:	00454683          	lbu	a3,4(a0)
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054c8:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 80054ca:	00e69463          	bne	a3,a4,80054d2 <usbd_ep_send+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 80054ce:	0ec7a023          	sw	a2,224(a5)
    }

    /* start the transfer */
    usb_transc_inxfer (udev, transc);
 80054d2:	fffff097          	auipc	ra,0xfffff
 80054d6:	4e8080e7          	jalr	1256(ra) # 80049ba <usb_transc_inxfer>

    return 0;
}
 80054da:	40b2                	lw	ra,12(sp)
 80054dc:	4501                	li	a0,0
 80054de:	0141                	addi	sp,sp,16
 80054e0:	8082                	ret

080054e2 <usbd_ep_stall>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall (usb_core_driver *udev, uint8_t ep_addr)
{
 80054e2:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 80054e4:	01859793          	slli	a5,a1,0x18
{
 80054e8:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 80054ea:	87e1                	srai	a5,a5,0x18
 80054ec:	0207d563          	bgez	a5,8005516 <usbd_ep_stall+0x34>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 80054f0:	07f5f593          	andi	a1,a1,127
 80054f4:	47f1                	li	a5,28
 80054f6:	02f585b3          	mul	a1,a1,a5
 80054fa:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 80054fe:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 1;
 8005500:	4785                	li	a5,1
 8005502:	00f58123          	sb	a5,2(a1)

    usb_transc_stall (udev, transc);
 8005506:	fffff097          	auipc	ra,0xfffff
 800550a:	62a080e7          	jalr	1578(ra) # 8004b30 <usb_transc_stall>

    return (0);
}
 800550e:	40b2                	lw	ra,12(sp)
 8005510:	4501                	li	a0,0
 8005512:	0141                	addi	sp,sp,16
 8005514:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8005516:	47f1                	li	a5,28
 8005518:	02f585b3          	mul	a1,a1,a5
 800551c:	26c58593          	addi	a1,a1,620
 8005520:	bff9                	j	80054fe <usbd_ep_stall+0x1c>

08005522 <usbd_ep_stall_clear>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall_clear (usb_core_driver *udev, uint8_t ep_addr)
{
 8005522:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8005524:	01859793          	slli	a5,a1,0x18
{
 8005528:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 800552a:	87e1                	srai	a5,a5,0x18
 800552c:	0207d463          	bgez	a5,8005554 <usbd_ep_stall_clear+0x32>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8005530:	07f5f593          	andi	a1,a1,127
 8005534:	47f1                	li	a5,28
 8005536:	02f585b3          	mul	a1,a1,a5
 800553a:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 800553e:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 0;
 8005540:	00058123          	sb	zero,2(a1)

    usb_transc_clrstall (udev, transc);
 8005544:	fffff097          	auipc	ra,0xfffff
 8005548:	626080e7          	jalr	1574(ra) # 8004b6a <usb_transc_clrstall>

    return (0);
}
 800554c:	40b2                	lw	ra,12(sp)
 800554e:	4501                	li	a0,0
 8005550:	0141                	addi	sp,sp,16
 8005552:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8005554:	47f1                	li	a5,28
 8005556:	02f585b3          	mul	a1,a1,a5
 800555a:	26c58593          	addi	a1,a1,620
 800555e:	b7c5                	j	800553e <usbd_ep_stall_clear+0x1c>

08005560 <usbd_addr_set>:
    \param[out] none
    \retval     none
*/
void  usbd_addr_set (usb_core_driver *udev, uint8_t addr)
{
    usb_devaddr_set(udev, addr);
 8005560:	fffff317          	auipc	t1,0xfffff
 8005564:	3a830067          	jr	936(t1) # 8004908 <usb_devaddr_set>

08005568 <_usb_std_reserved>:
static usb_reqsta _usb_std_reserved (usb_core_driver *udev, usb_req *req)
{
    /* no operation... */

    return REQ_NOTSUPP;
}
 8005568:	4505                	li	a0,1
 800556a:	8082                	ret

0800556c <_usb_dev_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_dev_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.dev_desc[0];
 800556c:	41452503          	lw	a0,1044(a0)
 8005570:	00054783          	lbu	a5,0(a0)
 8005574:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.dev_desc;
}
 8005578:	8082                	ret

0800557a <_usb_config_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_config_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.config_desc[2];
 800557a:	41852503          	lw	a0,1048(a0)
 800557e:	00254783          	lbu	a5,2(a0)
 8005582:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.config_desc;
}
 8005586:	8082                	ret

08005588 <_usb_str_desc_get>:
    \param[out] len: pointer to string length
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_str_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    uint8_t *desc = udev->dev.desc.strings[index];
 8005588:	42052783          	lw	a5,1056(a0)
 800558c:	058a                	slli	a1,a1,0x2
 800558e:	97ae                	add	a5,a5,a1
 8005590:	4388                	lw	a0,0(a5)

    *len = desc[0];
 8005592:	00054783          	lbu	a5,0(a0)
 8005596:	00f61023          	sh	a5,0(a2)

    return desc;
}
 800559a:	8082                	ret

0800559c <_usb_std_getdescriptor>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getdescriptor (usb_core_driver *udev, usb_req *req)
{
 800559c:	1141                	addi	sp,sp,-16
 800559e:	c422                	sw	s0,8(sp)
 80055a0:	c226                	sw	s1,4(sp)
 80055a2:	c606                	sw	ra,12(sp)
 80055a4:	0005c783          	lbu	a5,0(a1)
 80055a8:	842a                	mv	s0,a0
 80055aa:	84ae                	mv	s1,a1
 80055ac:	8b8d                	andi	a5,a5,3
    uint8_t desc_index = 0;

    usb_transc *transc = &udev->dev.transc_in[0];

    /* get device standard descriptor */
    switch (req->bmRequestType & USB_RECPTYPE_MASK) {
 80055ae:	cf8d                	beqz	a5,80055e8 <_usb_std_getdescriptor+0x4c>
 80055b0:	4705                	li	a4,1
 80055b2:	0ce78563          	beq	a5,a4,800567c <_usb_std_getdescriptor+0xe0>

    default:
        break;
    }

    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 80055b6:	0dc42703          	lw	a4,220(s0)
        }

        return REQ_SUPP;
    }

    return REQ_NOTSUPP;
 80055ba:	4505                	li	a0,1
    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 80055bc:	c761                	beqz	a4,8005684 <_usb_std_getdescriptor+0xe8>
 80055be:	0074c783          	lbu	a5,7(s1)
 80055c2:	0064c683          	lbu	a3,6(s1)
 80055c6:	07a2                	slli	a5,a5,0x8
 80055c8:	8fd5                	or	a5,a5,a3
 80055ca:	cfcd                	beqz	a5,8005684 <_usb_std_getdescriptor+0xe8>
        if (transc->remain_len < req->wLength) {
 80055cc:	0cf77163          	bgeu	a4,a5,800568e <_usb_std_getdescriptor+0xf2>
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 80055d0:	0cc45783          	lhu	a5,204(s0)
        return REQ_SUPP;
 80055d4:	4501                	li	a0,0
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 80055d6:	0af76763          	bltu	a4,a5,8005684 <_usb_std_getdescriptor+0xe8>
 80055da:	02f77533          	remu	a0,a4,a5
 80055de:	e955                	bnez	a0,8005692 <_usb_std_getdescriptor+0xf6>
                udev->dev.control.ctl_zlp = 1;
 80055e0:	4785                	li	a5,1
 80055e2:	42f406a3          	sb	a5,1069(s0)
 80055e6:	a879                	j	8005684 <_usb_std_getdescriptor+0xe8>
        desc_type = BYTE_HIGH(req->wValue);
 80055e8:	0025c783          	lbu	a5,2(a1)
 80055ec:	0035c583          	lbu	a1,3(a1)
 80055f0:	4709                	li	a4,2
 80055f2:	05a2                	slli	a1,a1,0x8
 80055f4:	8ddd                	or	a1,a1,a5
 80055f6:	0085d793          	srli	a5,a1,0x8
        desc_index = BYTE_LOW(req->wValue);
 80055fa:	0ff5f593          	andi	a1,a1,255
        switch (desc_type) {
 80055fe:	04e78c63          	beq	a5,a4,8005656 <_usb_std_getdescriptor+0xba>
 8005602:	02f76b63          	bltu	a4,a5,8005638 <_usb_std_getdescriptor+0x9c>
 8005606:	4705                	li	a4,1
 8005608:	fae797e3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 800560c:	0dc50613          	addi	a2,a0,220
 8005610:	00000097          	auipc	ra,0x0
 8005614:	f5c080e7          	jalr	-164(ra) # 800556c <_usb_dev_desc_get>
 8005618:	0ca42823          	sw	a0,208(s0)
            if (64U == req->wLength) {
 800561c:	0074c783          	lbu	a5,7(s1)
 8005620:	0064c703          	lbu	a4,6(s1)
 8005624:	07a2                	slli	a5,a5,0x8
 8005626:	8fd9                	or	a5,a5,a4
 8005628:	04000713          	li	a4,64
 800562c:	f8e795e3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
                transc->remain_len = 8U;
 8005630:	47a1                	li	a5,8
 8005632:	0cf42e23          	sw	a5,220(s0)
 8005636:	b741                	j	80055b6 <_usb_std_getdescriptor+0x1a>
 8005638:	470d                	li	a4,3
 800563a:	02e78763          	beq	a5,a4,8005668 <_usb_std_getdescriptor+0xcc>
 800563e:	473d                	li	a4,15
 8005640:	f6e79be3          	bne	a5,a4,80055b6 <_usb_std_getdescriptor+0x1a>
    *len = udev->dev.desc.bos_desc[2];
 8005644:	41c52783          	lw	a5,1052(a0)
 8005648:	0027c703          	lbu	a4,2(a5)
            transc->xfer_buf = _usb_bos_desc_get(udev, desc_index, (uint16_t *)&(transc->remain_len));
 800564c:	0cf52823          	sw	a5,208(a0)
    *len = udev->dev.desc.bos_desc[2];
 8005650:	0ce51e23          	sh	a4,220(a0)
            break;
 8005654:	b78d                	j	80055b6 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8005656:	0dc50613          	addi	a2,a0,220
 800565a:	00000097          	auipc	ra,0x0
 800565e:	f20080e7          	jalr	-224(ra) # 800557a <_usb_config_desc_get>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8005662:	0ca42823          	sw	a0,208(s0)
 8005666:	bf81                	j	80055b6 <_usb_std_getdescriptor+0x1a>
            if (desc_index < STR_IDX_MAX) {
 8005668:	4795                	li	a5,5
 800566a:	f4b7e6e3          	bltu	a5,a1,80055b6 <_usb_std_getdescriptor+0x1a>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 800566e:	0dc50613          	addi	a2,a0,220
 8005672:	00000097          	auipc	ra,0x0
 8005676:	f16080e7          	jalr	-234(ra) # 8005588 <_usb_str_desc_get>
 800567a:	b7e5                	j	8005662 <_usb_std_getdescriptor+0xc6>
        return (usb_reqsta)(udev->dev.class_core->req_proc(udev, req));
 800567c:	43052783          	lw	a5,1072(a0)
 8005680:	47dc                	lw	a5,12(a5)
 8005682:	9782                	jalr	a5
}
 8005684:	40b2                	lw	ra,12(sp)
 8005686:	4422                	lw	s0,8(sp)
 8005688:	4492                	lw	s1,4(sp)
 800568a:	0141                	addi	sp,sp,16
 800568c:	8082                	ret
            transc->remain_len = req->wLength;
 800568e:	0cf42e23          	sw	a5,220(s0)
        return REQ_SUPP;
 8005692:	4501                	li	a0,0
 8005694:	bfc5                	j	8005684 <_usb_std_getdescriptor+0xe8>

08005696 <_usb_std_setconfiguration>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setconfiguration (usb_core_driver *udev, usb_req *req)
{
 8005696:	1141                	addi	sp,sp,-16
 8005698:	c04a                	sw	s2,0(sp)
 800569a:	c606                	sw	ra,12(sp)
 800569c:	c422                	sw	s0,8(sp)
 800569e:	c226                	sw	s1,4(sp)
    static uint8_t config;

    config = (uint8_t)(req->wValue);
 80056a0:	0025c783          	lbu	a5,2(a1)
 80056a4:	20000937          	lui	s2,0x20000
 80056a8:	53090913          	addi	s2,s2,1328 # 20000530 <config.4766>
 80056ac:	00f90023          	sb	a5,0(s2)

    if (config <= USBD_CFG_MAX_NUM) {
 80056b0:	4685                	li	a3,1
 80056b2:	00f6ed63          	bltu	a3,a5,80056cc <_usb_std_setconfiguration+0x36>
        switch (udev->dev.cur_status) {
 80056b6:	0c654703          	lbu	a4,198(a0)
 80056ba:	4489                	li	s1,2
 80056bc:	842a                	mv	s0,a0
 80056be:	0ff77713          	andi	a4,a4,255
 80056c2:	00970763          	beq	a4,s1,80056d0 <_usb_std_setconfiguration+0x3a>
 80056c6:	460d                	li	a2,3
 80056c8:	02c70963          	beq	a4,a2,80056fa <_usb_std_setconfiguration+0x64>
        default:
            break;
        }
    }

    return REQ_NOTSUPP;
 80056cc:	4485                	li	s1,1
 80056ce:	a839                	j	80056ec <_usb_std_setconfiguration+0x56>
            return REQ_SUPP;
 80056d0:	4481                	li	s1,0
            if (config){
 80056d2:	cf89                	beqz	a5,80056ec <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->init(udev, config);
 80056d4:	43052783          	lw	a5,1072(a0)
 80056d8:	4585                	li	a1,1
 80056da:	43dc                	lw	a5,4(a5)
 80056dc:	9782                	jalr	a5
                udev->dev.config = config;
 80056de:	00094783          	lbu	a5,0(s2)
 80056e2:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_CONFIGURED;
 80056e6:	478d                	li	a5,3
 80056e8:	0cf40323          	sb	a5,198(s0)
}
 80056ec:	40b2                	lw	ra,12(sp)
 80056ee:	4422                	lw	s0,8(sp)
 80056f0:	8526                	mv	a0,s1
 80056f2:	4902                	lw	s2,0(sp)
 80056f4:	4492                	lw	s1,4(sp)
 80056f6:	0141                	addi	sp,sp,16
 80056f8:	8082                	ret
            if (USB_DEFAULT_CONFIG == config) {
 80056fa:	ef91                	bnez	a5,8005716 <_usb_std_setconfiguration+0x80>
                udev->dev.class_core->deinit(udev, config);
 80056fc:	43052783          	lw	a5,1072(a0)
 8005700:	4581                	li	a1,0
 8005702:	479c                	lw	a5,8(a5)
 8005704:	9782                	jalr	a5
                udev->dev.config = config;
 8005706:	00094783          	lbu	a5,0(s2)
                udev->dev.cur_status = USBD_ADDRESSED;
 800570a:	0c940323          	sb	s1,198(s0)
            return REQ_SUPP;
 800570e:	4481                	li	s1,0
                udev->dev.config = config;
 8005710:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_ADDRESSED;
 8005714:	bfe1                	j	80056ec <_usb_std_setconfiguration+0x56>
            } else if (config != udev->dev.config) {
 8005716:	0c454783          	lbu	a5,196(a0)
            return REQ_SUPP;
 800571a:	4481                	li	s1,0
            } else if (config != udev->dev.config) {
 800571c:	fcd788e3          	beq	a5,a3,80056ec <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->deinit(udev, config);
 8005720:	43052783          	lw	a5,1072(a0)
 8005724:	4585                	li	a1,1
 8005726:	479c                	lw	a5,8(a5)
 8005728:	9782                	jalr	a5
                udev->dev.config = config;
 800572a:	00094583          	lbu	a1,0(s2)
                udev->dev.class_core->init(udev, config);
 800572e:	43042783          	lw	a5,1072(s0)
 8005732:	8522                	mv	a0,s0
                udev->dev.config = config;
 8005734:	0cb40223          	sb	a1,196(s0)
                udev->dev.class_core->init(udev, config);
 8005738:	43dc                	lw	a5,4(a5)
 800573a:	9782                	jalr	a5
 800573c:	bf45                	j	80056ec <_usb_std_setconfiguration+0x56>

0800573e <_usb_std_getstatus>:
    uint8_t recp = BYTE_LOW(req->wIndex);
 800573e:	0055c683          	lbu	a3,5(a1)
 8005742:	0045c703          	lbu	a4,4(a1)
 8005746:	0005c603          	lbu	a2,0(a1)
 800574a:	06a2                	slli	a3,a3,0x8
 800574c:	8ed9                	or	a3,a3,a4
 800574e:	8a0d                	andi	a2,a2,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8005750:	4585                	li	a1,1
{
 8005752:	87aa                	mv	a5,a0
    uint8_t recp = BYTE_LOW(req->wIndex);
 8005754:	0ff6f713          	andi	a4,a3,255
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8005758:	04b60363          	beq	a2,a1,800579e <_usb_std_getstatus+0x60>
 800575c:	c611                	beqz	a2,8005768 <_usb_std_getstatus+0x2a>
 800575e:	4589                	li	a1,2
 8005760:	06b60263          	beq	a2,a1,80057c4 <_usb_std_getstatus+0x86>
    return REQ_NOTSUPP;
 8005764:	4505                	li	a0,1
 8005766:	8082                	ret
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005768:	0c654703          	lbu	a4,198(a0)
 800576c:	4689                	li	a3,2
 800576e:	00e68863          	beq	a3,a4,800577e <_usb_std_getstatus+0x40>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005772:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005776:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005778:	4505                	li	a0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800577a:	04e69463          	bne	a3,a4,80057c2 <_usb_std_getstatus+0x84>
                if (udev->dev.pm.dev_remote_wakeup) {
 800577e:	4127c683          	lbu	a3,1042(a5)
                if (udev->dev.pm.power_mode) {
 8005782:	4107c703          	lbu	a4,1040(a5)
                if (udev->dev.pm.dev_remote_wakeup) {
 8005786:	c689                	beqz	a3,8005790 <_usb_std_getstatus+0x52>
                if (udev->dev.pm.power_mode) {
 8005788:	00e036b3          	snez	a3,a4
                    status[0] |= USB_STATUS_REMOTE_WAKEUP;
 800578c:	0026e693          	ori	a3,a3,2
 8005790:	20000737          	lui	a4,0x20000
 8005794:	53470713          	addi	a4,a4,1332 # 20000534 <status.4696>
 8005798:	00d70023          	sb	a3,0(a4)
 800579c:	a829                	j	80057b6 <_usb_std_getstatus+0x78>
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 800579e:	0c654683          	lbu	a3,198(a0)
 80057a2:	460d                	li	a2,3
    return REQ_NOTSUPP;
 80057a4:	4505                	li	a0,1
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 80057a6:	00d61e63          	bne	a2,a3,80057c2 <_usb_std_getstatus+0x84>
 80057aa:	00e56c63          	bltu	a0,a4,80057c2 <_usb_std_getstatus+0x84>
                transc->xfer_buf = status;
 80057ae:	20000737          	lui	a4,0x20000
 80057b2:	53470713          	addi	a4,a4,1332 # 20000534 <status.4696>
                transc->xfer_buf = status;
 80057b6:	0ce7a823          	sw	a4,208(a5)
                transc->remain_len = 2U;
 80057ba:	4709                	li	a4,2
 80057bc:	0ce7ae23          	sw	a4,220(a5)
                return REQ_SUPP;
 80057c0:	4501                	li	a0,0
}
 80057c2:	8082                	ret
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 80057c4:	0c654603          	lbu	a2,198(a0)
 80057c8:	458d                	li	a1,3
    return REQ_NOTSUPP;
 80057ca:	4505                	li	a0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 80057cc:	fec59be3          	bne	a1,a2,80057c2 <_usb_std_getstatus+0x84>
                if (0x80U == (recp & 0x80U)) {
 80057d0:	06e2                	slli	a3,a3,0x18
 80057d2:	86e1                	srai	a3,a3,0x18
 80057d4:	0006db63          	bgez	a3,80057ea <_usb_std_getstatus+0xac>
                    status[0] = udev->dev.transc_in[EP_ID(recp)].ep_stall;
 80057d8:	46f1                	li	a3,28
 80057da:	07f77713          	andi	a4,a4,127
 80057de:	02d70733          	mul	a4,a4,a3
 80057e2:	973e                	add	a4,a4,a5
 80057e4:	0ca74683          	lbu	a3,202(a4)
 80057e8:	b765                	j	8005790 <_usb_std_getstatus+0x52>
                    status[0] = udev->dev.transc_out[recp].ep_stall;
 80057ea:	46f1                	li	a3,28
 80057ec:	02d70733          	mul	a4,a4,a3
 80057f0:	973e                	add	a4,a4,a5
 80057f2:	26e74683          	lbu	a3,622(a4)
 80057f6:	bf69                	j	8005790 <_usb_std_getstatus+0x52>

080057f8 <_usb_std_getconfiguration>:
    switch (udev->dev.cur_status) {
 80057f8:	0c654703          	lbu	a4,198(a0)
 80057fc:	4689                	li	a3,2
{
 80057fe:	87aa                	mv	a5,a0
    switch (udev->dev.cur_status) {
 8005800:	0ff77713          	andi	a4,a4,255
 8005804:	00d70763          	beq	a4,a3,8005812 <_usb_std_getconfiguration+0x1a>
 8005808:	468d                	li	a3,3
 800580a:	02d70163          	beq	a4,a3,800582c <_usb_std_getconfiguration+0x34>
    return REQ_NOTSUPP;
 800580e:	4505                	li	a0,1
}
 8005810:	8082                	ret
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8005812:	0c454703          	lbu	a4,196(a0)
    return REQ_NOTSUPP;
 8005816:	4505                	li	a0,1
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8005818:	ff65                	bnez	a4,8005810 <_usb_std_getconfiguration+0x18>
            transc->xfer_buf = &(udev->dev.config);
 800581a:	0c478713          	addi	a4,a5,196
 800581e:	0ce7a823          	sw	a4,208(a5)
            transc->remain_len = 1U;
 8005822:	4705                	li	a4,1
 8005824:	0ce7ae23          	sw	a4,220(a5)
            return REQ_SUPP;
 8005828:	4501                	li	a0,0
 800582a:	8082                	ret
        if (udev->dev.config != USB_DEFAULT_CONFIG) {
 800582c:	0c454703          	lbu	a4,196(a0)
 8005830:	df79                	beqz	a4,800580e <_usb_std_getconfiguration+0x16>
 8005832:	b7e5                	j	800581a <_usb_std_getconfiguration+0x22>

08005834 <_usb_std_getinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8005834:	0c654783          	lbu	a5,198(a0)
 8005838:	470d                	li	a4,3
 800583a:	02f71163          	bne	a4,a5,800585c <_usb_std_getinterface+0x28>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800583e:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8005842:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005844:	00e7ea63          	bltu	a5,a4,8005858 <_usb_std_getinterface+0x24>
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8005848:	43052703          	lw	a4,1072(a0)
            transc->remain_len = 1U;
 800584c:	0cf52e23          	sw	a5,220(a0)
            return REQ_SUPP;
 8005850:	4781                	li	a5,0
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8005852:	0705                	addi	a4,a4,1
 8005854:	0ce52823          	sw	a4,208(a0)
}
 8005858:	853e                	mv	a0,a5
 800585a:	8082                	ret
    return REQ_NOTSUPP;
 800585c:	4785                	li	a5,1
 800585e:	bfed                	j	8005858 <_usb_std_getinterface+0x24>

08005860 <_usb_std_setinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8005860:	0c654783          	lbu	a5,198(a0)
 8005864:	470d                	li	a4,3
 8005866:	02f71063          	bne	a4,a5,8005886 <_usb_std_setinterface+0x26>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800586a:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 800586e:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005870:	00e7e963          	bltu	a5,a4,8005882 <_usb_std_setinterface+0x22>
            udev->dev.class_core->alter_set = req->wValue;
 8005874:	43052783          	lw	a5,1072(a0)
 8005878:	0025c703          	lbu	a4,2(a1)
 800587c:	00e780a3          	sb	a4,1(a5)
            return REQ_SUPP;
 8005880:	4781                	li	a5,0
}
 8005882:	853e                	mv	a0,a5
 8005884:	8082                	ret
    return REQ_NOTSUPP;
 8005886:	4785                	li	a5,1
 8005888:	bfed                	j	8005882 <_usb_std_setinterface+0x22>

0800588a <_usb_std_setaddress>:
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 800588a:	0055c703          	lbu	a4,5(a1)
 800588e:	0045c683          	lbu	a3,4(a1)
 8005892:	0722                	slli	a4,a4,0x8
 8005894:	8f55                	or	a4,a4,a3
 8005896:	cb01                	beqz	a4,80058a6 <_usb_std_setaddress+0x1c>
    return REQ_NOTSUPP;
 8005898:	4505                	li	a0,1
}
 800589a:	8082                	ret
    return REQ_NOTSUPP;
 800589c:	4505                	li	a0,1
}
 800589e:	40b2                	lw	ra,12(sp)
 80058a0:	4422                	lw	s0,8(sp)
 80058a2:	0141                	addi	sp,sp,16
 80058a4:	8082                	ret
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 80058a6:	0075c703          	lbu	a4,7(a1)
 80058aa:	0065c683          	lbu	a3,6(a1)
 80058ae:	0722                	slli	a4,a4,0x8
 80058b0:	8f55                	or	a4,a4,a3
 80058b2:	f37d                	bnez	a4,8005898 <_usb_std_setaddress+0xe>
{
 80058b4:	1141                	addi	sp,sp,-16
 80058b6:	c422                	sw	s0,8(sp)
 80058b8:	c606                	sw	ra,12(sp)
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ba:	0025c583          	lbu	a1,2(a1)
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 80058be:	0c654703          	lbu	a4,198(a0)
 80058c2:	468d                	li	a3,3
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058c4:	07f5f593          	andi	a1,a1,127
 80058c8:	0cb502a3          	sb	a1,197(a0)
 80058cc:	842a                	mv	s0,a0
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 80058ce:	fce687e3          	beq	a3,a4,800589c <_usb_std_setaddress+0x12>
            usbd_addr_set (udev, udev->dev.dev_addr);
 80058d2:	00000097          	auipc	ra,0x0
 80058d6:	c8e080e7          	jalr	-882(ra) # 8005560 <usbd_addr_set>
            if (udev->dev.dev_addr) {
 80058da:	0c544783          	lbu	a5,197(s0)
 80058de:	c791                	beqz	a5,80058ea <_usb_std_setaddress+0x60>
                udev->dev.cur_status = USBD_ADDRESSED;
 80058e0:	4789                	li	a5,2
                udev->dev.cur_status = USBD_DEFAULT;
 80058e2:	0cf40323          	sb	a5,198(s0)
            return REQ_SUPP;
 80058e6:	4501                	li	a0,0
 80058e8:	bf5d                	j	800589e <_usb_std_setaddress+0x14>
                udev->dev.cur_status = USBD_DEFAULT;
 80058ea:	4785                	li	a5,1
 80058ec:	bfdd                	j	80058e2 <_usb_std_setaddress+0x58>

080058ee <_usb_std_setfeature>:
{
 80058ee:	1141                	addi	sp,sp,-16
 80058f0:	c606                	sw	ra,12(sp)
 80058f2:	c422                	sw	s0,8(sp)
 80058f4:	0005c783          	lbu	a5,0(a1)
 80058f8:	872a                	mv	a4,a0
 80058fa:	8b8d                	andi	a5,a5,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 80058fc:	cf8d                	beqz	a5,8005936 <_usb_std_setfeature+0x48>
 80058fe:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8005900:	4405                	li	s0,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005902:	06d79163          	bne	a5,a3,8005964 <_usb_std_setfeature+0x76>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005906:	0c654783          	lbu	a5,198(a0)
 800590a:	470d                	li	a4,3
    return REQ_NOTSUPP;
 800590c:	4405                	li	s0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 800590e:	04f71b63          	bne	a4,a5,8005964 <_usb_std_setfeature+0x76>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005912:	0035c783          	lbu	a5,3(a1)
 8005916:	0025c703          	lbu	a4,2(a1)
                return REQ_SUPP;
 800591a:	4401                	li	s0,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 800591c:	07a2                	slli	a5,a5,0x8
 800591e:	8fd9                	or	a5,a5,a4
 8005920:	e3b1                	bnez	a5,8005964 <_usb_std_setfeature+0x76>
            ep = BYTE_LOW(req->wIndex);
 8005922:	0045c583          	lbu	a1,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005926:	07f5f793          	andi	a5,a1,127
 800592a:	cf8d                	beqz	a5,8005964 <_usb_std_setfeature+0x76>
                    usbd_ep_stall (udev, ep);
 800592c:	00000097          	auipc	ra,0x0
 8005930:	bb6080e7          	jalr	-1098(ra) # 80054e2 <usbd_ep_stall>
 8005934:	a805                	j	8005964 <_usb_std_setfeature+0x76>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005936:	0c654783          	lbu	a5,198(a0)
 800593a:	4689                	li	a3,2
 800593c:	00f68863          	beq	a3,a5,800594c <_usb_std_setfeature+0x5e>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005940:	0c654783          	lbu	a5,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005944:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005946:	4405                	li	s0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8005948:	00f69e63          	bne	a3,a5,8005964 <_usb_std_setfeature+0x76>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 800594c:	0035c783          	lbu	a5,3(a1)
 8005950:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8005954:	4401                	li	s0,0
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8005956:	07a2                	slli	a5,a5,0x8
 8005958:	8fd5                	or	a5,a5,a3
 800595a:	4685                	li	a3,1
 800595c:	00d79463          	bne	a5,a3,8005964 <_usb_std_setfeature+0x76>
                    udev->dev.pm.dev_remote_wakeup = 1U;
 8005960:	40f70923          	sb	a5,1042(a4)
}
 8005964:	8522                	mv	a0,s0
 8005966:	40b2                	lw	ra,12(sp)
 8005968:	4422                	lw	s0,8(sp)
 800596a:	0141                	addi	sp,sp,16
 800596c:	8082                	ret

0800596e <_usb_std_clearfeature>:
{
 800596e:	1141                	addi	sp,sp,-16
 8005970:	c226                	sw	s1,4(sp)
 8005972:	c606                	sw	ra,12(sp)
 8005974:	c422                	sw	s0,8(sp)
 8005976:	c04a                	sw	s2,0(sp)
 8005978:	0005c703          	lbu	a4,0(a1)
 800597c:	84aa                	mv	s1,a0
 800597e:	8b0d                	andi	a4,a4,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005980:	c729                	beqz	a4,80059ca <_usb_std_clearfeature+0x5c>
 8005982:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8005984:	4905                	li	s2,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8005986:	06d71963          	bne	a4,a3,80059f8 <_usb_std_clearfeature+0x8a>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 800598a:	0c654703          	lbu	a4,198(a0)
 800598e:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8005990:	4905                	li	s2,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005992:	06e69363          	bne	a3,a4,80059f8 <_usb_std_clearfeature+0x8a>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005996:	0035c703          	lbu	a4,3(a1)
 800599a:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 800599e:	4901                	li	s2,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 80059a0:	0722                	slli	a4,a4,0x8
 80059a2:	8f55                	or	a4,a4,a3
 80059a4:	eb31                	bnez	a4,80059f8 <_usb_std_clearfeature+0x8a>
            ep = BYTE_LOW(req->wIndex);
 80059a6:	0045c703          	lbu	a4,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 80059aa:	07f77693          	andi	a3,a4,127
 80059ae:	c6a9                	beqz	a3,80059f8 <_usb_std_clearfeature+0x8a>
 80059b0:	842e                	mv	s0,a1
                    usbd_ep_stall_clear (udev, ep);
 80059b2:	85ba                	mv	a1,a4
 80059b4:	00000097          	auipc	ra,0x0
 80059b8:	b6e080e7          	jalr	-1170(ra) # 8005522 <usbd_ep_stall_clear>
                    udev->dev.class_core->req_proc (udev, req);
 80059bc:	4304a783          	lw	a5,1072(s1)
 80059c0:	85a2                	mv	a1,s0
 80059c2:	8526                	mv	a0,s1
 80059c4:	47dc                	lw	a5,12(a5)
 80059c6:	9782                	jalr	a5
 80059c8:	a805                	j	80059f8 <_usb_std_clearfeature+0x8a>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059ca:	0c654703          	lbu	a4,198(a0)
 80059ce:	4689                	li	a3,2
 80059d0:	00e68863          	beq	a3,a4,80059e0 <_usb_std_clearfeature+0x72>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 80059d4:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059d8:	468d                	li	a3,3
    return REQ_NOTSUPP;
 80059da:	4905                	li	s2,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 80059dc:	00e69e63          	bne	a3,a4,80059f8 <_usb_std_clearfeature+0x8a>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 80059e0:	0035c703          	lbu	a4,3(a1)
 80059e4:	0025c683          	lbu	a3,2(a1)
    return REQ_NOTSUPP;
 80059e8:	4905                	li	s2,1
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 80059ea:	0722                	slli	a4,a4,0x8
 80059ec:	8f55                	or	a4,a4,a3
 80059ee:	01271563          	bne	a4,s2,80059f8 <_usb_std_clearfeature+0x8a>
                    udev->dev.pm.dev_remote_wakeup = 0U;
 80059f2:	40048923          	sb	zero,1042(s1)
                    return REQ_SUPP;
 80059f6:	4901                	li	s2,0
}
 80059f8:	40b2                	lw	ra,12(sp)
 80059fa:	4422                	lw	s0,8(sp)
 80059fc:	854a                	mv	a0,s2
 80059fe:	4492                	lw	s1,4(sp)
 8005a00:	4902                	lw	s2,0(sp)
 8005a02:	0141                	addi	sp,sp,16
 8005a04:	8082                	ret

08005a06 <_usb_std_setdescriptor>:
 8005a06:	4501                	li	a0,0
 8005a08:	8082                	ret

08005a0a <_usb_std_synchframe>:
 8005a0a:	4501                	li	a0,0
 8005a0c:	8082                	ret

08005a0e <usbd_standard_request>:
    return (*_std_dev_req[req->bRequest])(udev, req);
 8005a0e:	0015c783          	lbu	a5,1(a1)
 8005a12:	00279713          	slli	a4,a5,0x2
 8005a16:	080007b7          	lui	a5,0x8000
 8005a1a:	39078793          	addi	a5,a5,912 # 8000390 <_std_dev_req>
 8005a1e:	97ba                	add	a5,a5,a4
 8005a20:	0007a303          	lw	t1,0(a5)
 8005a24:	8302                	jr	t1

08005a26 <usbd_class_request>:
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005a26:	0c654683          	lbu	a3,198(a0)
 8005a2a:	460d                	li	a2,3
    return REQ_NOTSUPP;
 8005a2c:	4785                	li	a5,1
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005a2e:	02d61063          	bne	a2,a3,8005a4e <usbd_class_request+0x28>
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005a32:	0045c683          	lbu	a3,4(a1)
    return REQ_NOTSUPP;
 8005a36:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005a38:	00d7eb63          	bltu	a5,a3,8005a4e <usbd_class_request+0x28>
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 8005a3c:	43052783          	lw	a5,1072(a0)
{
 8005a40:	1141                	addi	sp,sp,-16
 8005a42:	c606                	sw	ra,12(sp)
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 8005a44:	47dc                	lw	a5,12(a5)
 8005a46:	9782                	jalr	a5
}
 8005a48:	40b2                	lw	ra,12(sp)
 8005a4a:	0141                	addi	sp,sp,16
 8005a4c:	8082                	ret
 8005a4e:	853e                	mv	a0,a5
 8005a50:	8082                	ret

08005a52 <usbd_vendor_request>:
}
 8005a52:	4501                	li	a0,0
 8005a54:	8082                	ret

08005a56 <usbd_enum_error>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     none
*/
void usbd_enum_error (usb_core_driver *udev, usb_req *req)
{
 8005a56:	1141                	addi	sp,sp,-16
    usbd_ep_stall (udev, 0x80);
 8005a58:	08000593          	li	a1,128
{
 8005a5c:	c606                	sw	ra,12(sp)
 8005a5e:	c422                	sw	s0,8(sp)
 8005a60:	842a                	mv	s0,a0
    usbd_ep_stall (udev, 0x80);
 8005a62:	00000097          	auipc	ra,0x0
 8005a66:	a80080e7          	jalr	-1408(ra) # 80054e2 <usbd_ep_stall>
    usbd_ep_stall (udev, 0x00);
 8005a6a:	8522                	mv	a0,s0
 8005a6c:	4581                	li	a1,0
 8005a6e:	00000097          	auipc	ra,0x0
 8005a72:	a74080e7          	jalr	-1420(ra) # 80054e2 <usbd_ep_stall>

    usb_ctlep_startout(udev);
 8005a76:	8522                	mv	a0,s0
}
 8005a78:	4422                	lw	s0,8(sp)
 8005a7a:	40b2                	lw	ra,12(sp)
 8005a7c:	0141                	addi	sp,sp,16
    usb_ctlep_startout(udev);
 8005a7e:	fffff317          	auipc	t1,0xfffff
 8005a82:	18230067          	jr	386(t1) # 8004c00 <usb_ctlep_startout>

08005a86 <usbd_ctl_send>:
*/
usbd_status usbd_ctl_send (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_in[0];

    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a86:	0dc55683          	lhu	a3,220(a0)
 8005a8a:	0d052603          	lw	a2,208(a0)
{
 8005a8e:	1141                	addi	sp,sp,-16
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a90:	4581                	li	a1,0
{
 8005a92:	c422                	sw	s0,8(sp)
 8005a94:	c606                	sw	ra,12(sp)
 8005a96:	842a                	mv	s0,a0
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 8005a98:	00000097          	auipc	ra,0x0
 8005a9c:	a0a080e7          	jalr	-1526(ra) # 80054a2 <usbd_ep_send>

    if (transc->remain_len > transc->max_len) {
 8005aa0:	0cc45703          	lhu	a4,204(s0)
 8005aa4:	0dc42683          	lw	a3,220(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_IN;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_IN;
 8005aa8:	4789                	li	a5,2
    if (transc->remain_len > transc->max_len) {
 8005aaa:	00d77363          	bgeu	a4,a3,8005ab0 <usbd_ctl_send+0x2a>
 8005aae:	4785                	li	a5,1
 8005ab0:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005ab4:	40b2                	lw	ra,12(sp)
 8005ab6:	4422                	lw	s0,8(sp)
 8005ab8:	4501                	li	a0,0
 8005aba:	0141                	addi	sp,sp,16
 8005abc:	8082                	ret

08005abe <usbd_ctl_recev>:
*/
usbd_status  usbd_ctl_recev (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_out[0];

    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005abe:	28055683          	lhu	a3,640(a0)
 8005ac2:	27452603          	lw	a2,628(a0)
{
 8005ac6:	1141                	addi	sp,sp,-16
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005ac8:	4581                	li	a1,0
{
 8005aca:	c422                	sw	s0,8(sp)
 8005acc:	c606                	sw	ra,12(sp)
 8005ace:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005ad0:	00000097          	auipc	ra,0x0
 8005ad4:	992080e7          	jalr	-1646(ra) # 8005462 <usbd_ep_recev>

    if (transc->remain_len > transc->max_len) {
 8005ad8:	27045703          	lhu	a4,624(s0)
 8005adc:	28042683          	lw	a3,640(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_OUT;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_OUT;
 8005ae0:	4791                	li	a5,4
    if (transc->remain_len > transc->max_len) {
 8005ae2:	00d77363          	bgeu	a4,a3,8005ae8 <usbd_ctl_recev+0x2a>
 8005ae6:	478d                	li	a5,3
 8005ae8:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005aec:	40b2                	lw	ra,12(sp)
 8005aee:	4422                	lw	s0,8(sp)
 8005af0:	4501                	li	a0,0
 8005af2:	0141                	addi	sp,sp,16
 8005af4:	8082                	ret

08005af6 <usbd_ctl_status_send>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status  usbd_ctl_status_send (usb_core_driver *udev)
{
 8005af6:	1141                	addi	sp,sp,-16
 8005af8:	c606                	sw	ra,12(sp)
 8005afa:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_IN;
 8005afc:	4795                	li	a5,5
 8005afe:	42f50623          	sb	a5,1068(a0)

    usbd_ep_send (udev, 0U, NULL, 0U);
 8005b02:	4681                	li	a3,0
 8005b04:	4601                	li	a2,0
 8005b06:	4581                	li	a1,0
{
 8005b08:	842a                	mv	s0,a0
    usbd_ep_send (udev, 0U, NULL, 0U);
 8005b0a:	00000097          	auipc	ra,0x0
 8005b0e:	998080e7          	jalr	-1640(ra) # 80054a2 <usbd_ep_send>

    usb_ctlep_startout(udev);
 8005b12:	8522                	mv	a0,s0
 8005b14:	fffff097          	auipc	ra,0xfffff
 8005b18:	0ec080e7          	jalr	236(ra) # 8004c00 <usb_ctlep_startout>

    return USBD_OK;
}
 8005b1c:	40b2                	lw	ra,12(sp)
 8005b1e:	4422                	lw	s0,8(sp)
 8005b20:	4501                	li	a0,0
 8005b22:	0141                	addi	sp,sp,16
 8005b24:	8082                	ret

08005b26 <usbd_ctl_status_recev>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status usbd_ctl_status_recev (usb_core_driver *udev)
{
 8005b26:	1141                	addi	sp,sp,-16
 8005b28:	c606                	sw	ra,12(sp)
 8005b2a:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_OUT;
 8005b2c:	4799                	li	a5,6
 8005b2e:	42f50623          	sb	a5,1068(a0)

    usbd_ep_recev (udev, 0, NULL, 0);
 8005b32:	4681                	li	a3,0
 8005b34:	4601                	li	a2,0
 8005b36:	4581                	li	a1,0
{
 8005b38:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0, NULL, 0);
 8005b3a:	00000097          	auipc	ra,0x0
 8005b3e:	928080e7          	jalr	-1752(ra) # 8005462 <usbd_ep_recev>

    usb_ctlep_startout(udev);
 8005b42:	8522                	mv	a0,s0
 8005b44:	fffff097          	auipc	ra,0xfffff
 8005b48:	0bc080e7          	jalr	188(ra) # 8004c00 <usb_ctlep_startout>

    return USBD_OK;
}
 8005b4c:	40b2                	lw	ra,12(sp)
 8005b4e:	4422                	lw	s0,8(sp)
 8005b50:	4501                	li	a0,0
 8005b52:	0141                	addi	sp,sp,16
 8005b54:	8082                	ret

08005b56 <usbd_setup_transc>:
*/
uint8_t usbd_setup_transc (usb_core_driver *udev)
{
    usb_reqsta reqstat = REQ_NOTSUPP;

    usb_req req = udev->dev.control.req;
 8005b56:	42452783          	lw	a5,1060(a0)
 8005b5a:	42852703          	lw	a4,1064(a0)
{
 8005b5e:	1101                	addi	sp,sp,-32
 8005b60:	cc22                	sw	s0,24(sp)
    usb_req req = udev->dev.control.req;
 8005b62:	c43e                	sw	a5,8(sp)
 8005b64:	c63a                	sw	a4,12(sp)
{
 8005b66:	ce06                	sw	ra,28(sp)
 8005b68:	0607f793          	andi	a5,a5,96

    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 8005b6c:	02000713          	li	a4,32
{
 8005b70:	842a                	mv	s0,a0
    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 8005b72:	02e78a63          	beq	a5,a4,8005ba6 <usbd_setup_transc+0x50>
 8005b76:	04000713          	li	a4,64
 8005b7a:	02e78c63          	beq	a5,a4,8005bb2 <usbd_setup_transc+0x5c>
 8005b7e:	efb9                	bnez	a5,8005bdc <usbd_setup_transc+0x86>
    /* standard device request */
    case USB_REQTYPE_STRD:
        reqstat = usbd_standard_request (udev, &req);
 8005b80:	002c                	addi	a1,sp,8
 8005b82:	00000097          	auipc	ra,0x0
 8005b86:	e8c080e7          	jalr	-372(ra) # 8005a0e <usbd_standard_request>

    default:
        break;
    }

    if (REQ_SUPP == reqstat) {
 8005b8a:	e929                	bnez	a0,8005bdc <usbd_setup_transc+0x86>
        if (req.wLength == 0) {
 8005b8c:	00e15783          	lhu	a5,14(sp)
 8005b90:	e79d                	bnez	a5,8005bbe <usbd_setup_transc+0x68>
            usbd_ctl_status_send (udev);
 8005b92:	8522                	mv	a0,s0
 8005b94:	00000097          	auipc	ra,0x0
 8005b98:	f62080e7          	jalr	-158(ra) # 8005af6 <usbd_ctl_status_send>
    } else {
        usbd_enum_error (udev, &req);
    }

    return USBD_OK;
}
 8005b9c:	40f2                	lw	ra,28(sp)
 8005b9e:	4462                	lw	s0,24(sp)
 8005ba0:	4501                	li	a0,0
 8005ba2:	6105                	addi	sp,sp,32
 8005ba4:	8082                	ret
        reqstat = usbd_class_request (udev, &req);
 8005ba6:	002c                	addi	a1,sp,8
 8005ba8:	00000097          	auipc	ra,0x0
 8005bac:	e7e080e7          	jalr	-386(ra) # 8005a26 <usbd_class_request>
        break;
 8005bb0:	bfe9                	j	8005b8a <usbd_setup_transc+0x34>
        reqstat = usbd_vendor_request (udev, &req);
 8005bb2:	002c                	addi	a1,sp,8
 8005bb4:	00000097          	auipc	ra,0x0
 8005bb8:	e9e080e7          	jalr	-354(ra) # 8005a52 <usbd_vendor_request>
        break;
 8005bbc:	b7f9                	j	8005b8a <usbd_setup_transc+0x34>
            if (req.bmRequestType & 0x80) {
 8005bbe:	00810783          	lb	a5,8(sp)
                usbd_ctl_send (udev);
 8005bc2:	8522                	mv	a0,s0
            if (req.bmRequestType & 0x80) {
 8005bc4:	0007d763          	bgez	a5,8005bd2 <usbd_setup_transc+0x7c>
                usbd_ctl_send (udev);
 8005bc8:	00000097          	auipc	ra,0x0
 8005bcc:	ebe080e7          	jalr	-322(ra) # 8005a86 <usbd_ctl_send>
 8005bd0:	b7f1                	j	8005b9c <usbd_setup_transc+0x46>
                usbd_ctl_recev (udev);
 8005bd2:	00000097          	auipc	ra,0x0
 8005bd6:	eec080e7          	jalr	-276(ra) # 8005abe <usbd_ctl_recev>
 8005bda:	b7c9                	j	8005b9c <usbd_setup_transc+0x46>
        usbd_enum_error (udev, &req);
 8005bdc:	002c                	addi	a1,sp,8
 8005bde:	8522                	mv	a0,s0
 8005be0:	00000097          	auipc	ra,0x0
 8005be4:	e76080e7          	jalr	-394(ra) # 8005a56 <usbd_enum_error>
 8005be8:	bf55                	j	8005b9c <usbd_setup_transc+0x46>

08005bea <usbd_out_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_out_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005bea:	7179                	addi	sp,sp,-48
 8005bec:	d606                	sw	ra,44(sp)
 8005bee:	d422                	sw	s0,40(sp)
 8005bf0:	1800                	addi	s0,sp,48
 8005bf2:	fca42e23          	sw	a0,-36(s0)
 8005bf6:	87ae                	mv	a5,a1
 8005bf8:	fcf40da3          	sb	a5,-37(s0)
    if (ep_num == 0) {
 8005bfc:	fdb44783          	lbu	a5,-37(s0)
 8005c00:	ebc1                	bnez	a5,8005c90 <usbd_out_transc+0xa6>
        usb_transc *transc = &udev->dev.transc_out[0];
 8005c02:	fdc42783          	lw	a5,-36(s0)
 8005c06:	26c78793          	addi	a5,a5,620
 8005c0a:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005c0e:	fdc42783          	lw	a5,-36(s0)
 8005c12:	42c7c783          	lbu	a5,1068(a5)
 8005c16:	470d                	li	a4,3
 8005c18:	00e78663          	beq	a5,a4,8005c24 <usbd_out_transc+0x3a>
 8005c1c:	4711                	li	a4,4
 8005c1e:	02e78663          	beq	a5,a4,8005c4a <usbd_out_transc+0x60>

            usbd_ctl_status_send (udev);
            break;

        default:
            break;
 8005c22:	a04d                	j	8005cc4 <usbd_out_transc+0xda>
            transc->remain_len -= transc->max_len;
 8005c24:	fec42783          	lw	a5,-20(s0)
 8005c28:	4bdc                	lw	a5,20(a5)
 8005c2a:	fec42703          	lw	a4,-20(s0)
 8005c2e:	00475703          	lhu	a4,4(a4)
 8005c32:	40e78733          	sub	a4,a5,a4
 8005c36:	fec42783          	lw	a5,-20(s0)
 8005c3a:	cbd8                	sw	a4,20(a5)
            usbd_ctl_recev (udev);
 8005c3c:	fdc42503          	lw	a0,-36(s0)
 8005c40:	00000097          	auipc	ra,0x0
 8005c44:	e7e080e7          	jalr	-386(ra) # 8005abe <usbd_ctl_recev>
            break;
 8005c48:	a8b5                	j	8005cc4 <usbd_out_transc+0xda>
            if (udev->dev.cur_status == USBD_CONFIGURED) {
 8005c4a:	fdc42783          	lw	a5,-36(s0)
 8005c4e:	0c67c783          	lbu	a5,198(a5)
 8005c52:	0ff7f713          	andi	a4,a5,255
 8005c56:	478d                	li	a5,3
 8005c58:	02f71163          	bne	a4,a5,8005c7a <usbd_out_transc+0x90>
                if (udev->dev.class_core->data_out != NULL) {
 8005c5c:	fdc42783          	lw	a5,-36(s0)
 8005c60:	4307a783          	lw	a5,1072(a5)
 8005c64:	4bdc                	lw	a5,20(a5)
 8005c66:	cb91                	beqz	a5,8005c7a <usbd_out_transc+0x90>
                    udev->dev.class_core->data_out (udev, 0U);
 8005c68:	fdc42783          	lw	a5,-36(s0)
 8005c6c:	4307a783          	lw	a5,1072(a5)
 8005c70:	4bdc                	lw	a5,20(a5)
 8005c72:	4581                	li	a1,0
 8005c74:	fdc42503          	lw	a0,-36(s0)
 8005c78:	9782                	jalr	a5
            transc->remain_len = 0U;
 8005c7a:	fec42783          	lw	a5,-20(s0)
 8005c7e:	0007aa23          	sw	zero,20(a5)
            usbd_ctl_status_send (udev);
 8005c82:	fdc42503          	lw	a0,-36(s0)
 8005c86:	00000097          	auipc	ra,0x0
 8005c8a:	e70080e7          	jalr	-400(ra) # 8005af6 <usbd_ctl_status_send>
            break;
 8005c8e:	a81d                	j	8005cc4 <usbd_out_transc+0xda>
        }
    } else if ((udev->dev.class_core->data_out != NULL) && (udev->dev.cur_status == USBD_CONFIGURED)) {
 8005c90:	fdc42783          	lw	a5,-36(s0)
 8005c94:	4307a783          	lw	a5,1072(a5)
 8005c98:	4bdc                	lw	a5,20(a5)
 8005c9a:	c78d                	beqz	a5,8005cc4 <usbd_out_transc+0xda>
 8005c9c:	fdc42783          	lw	a5,-36(s0)
 8005ca0:	0c67c783          	lbu	a5,198(a5)
 8005ca4:	0ff7f713          	andi	a4,a5,255
 8005ca8:	478d                	li	a5,3
 8005caa:	00f71d63          	bne	a4,a5,8005cc4 <usbd_out_transc+0xda>
        udev->dev.class_core->data_out (udev, ep_num);
 8005cae:	fdc42783          	lw	a5,-36(s0)
 8005cb2:	4307a783          	lw	a5,1072(a5)
 8005cb6:	4bd8                	lw	a4,20(a5)
 8005cb8:	fdb44783          	lbu	a5,-37(s0)
 8005cbc:	85be                	mv	a1,a5
 8005cbe:	fdc42503          	lw	a0,-36(s0)
 8005cc2:	9702                	jalr	a4
    }

    return USBD_OK;
 8005cc4:	4781                	li	a5,0
}
 8005cc6:	853e                	mv	a0,a5
 8005cc8:	50b2                	lw	ra,44(sp)
 8005cca:	5422                	lw	s0,40(sp)
 8005ccc:	6145                	addi	sp,sp,48
 8005cce:	8082                	ret

08005cd0 <usbd_in_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_in_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005cd0:	7179                	addi	sp,sp,-48
 8005cd2:	d606                	sw	ra,44(sp)
 8005cd4:	d422                	sw	s0,40(sp)
 8005cd6:	1800                	addi	s0,sp,48
 8005cd8:	fca42e23          	sw	a0,-36(s0)
 8005cdc:	87ae                	mv	a5,a1
 8005cde:	fcf40da3          	sb	a5,-37(s0)
    if (0U == ep_num) {
 8005ce2:	fdb44783          	lbu	a5,-37(s0)
 8005ce6:	ebdd                	bnez	a5,8005d9c <usbd_in_transc+0xcc>
        usb_transc *transc = &udev->dev.transc_in[0];
 8005ce8:	fdc42783          	lw	a5,-36(s0)
 8005cec:	0c878793          	addi	a5,a5,200
 8005cf0:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005cf4:	fdc42783          	lw	a5,-36(s0)
 8005cf8:	42c7c783          	lbu	a5,1068(a5)
 8005cfc:	4705                	li	a4,1
 8005cfe:	00e78663          	beq	a5,a4,8005d0a <usbd_in_transc+0x3a>
 8005d02:	4709                	li	a4,2
 8005d04:	02e78663          	beq	a5,a4,8005d30 <usbd_in_transc+0x60>
                usbd_ctl_status_recev (udev);
            }
            break;

        default:
            break;
 8005d08:	a0e1                	j	8005dd0 <usbd_in_transc+0x100>
            transc->remain_len -= transc->max_len;
 8005d0a:	fec42783          	lw	a5,-20(s0)
 8005d0e:	4bdc                	lw	a5,20(a5)
 8005d10:	fec42703          	lw	a4,-20(s0)
 8005d14:	00475703          	lhu	a4,4(a4)
 8005d18:	40e78733          	sub	a4,a5,a4
 8005d1c:	fec42783          	lw	a5,-20(s0)
 8005d20:	cbd8                	sw	a4,20(a5)
            usbd_ctl_send (udev);
 8005d22:	fdc42503          	lw	a0,-36(s0)
 8005d26:	00000097          	auipc	ra,0x0
 8005d2a:	d60080e7          	jalr	-672(ra) # 8005a86 <usbd_ctl_send>
            break;
 8005d2e:	a04d                	j	8005dd0 <usbd_in_transc+0x100>
            if (udev->dev.control.ctl_zlp) {
 8005d30:	fdc42783          	lw	a5,-36(s0)
 8005d34:	42d7c783          	lbu	a5,1069(a5)
 8005d38:	cf99                	beqz	a5,8005d56 <usbd_in_transc+0x86>
                usbd_ep_send (udev, 0U, NULL, 0U);
 8005d3a:	4681                	li	a3,0
 8005d3c:	4601                	li	a2,0
 8005d3e:	4581                	li	a1,0
 8005d40:	fdc42503          	lw	a0,-36(s0)
 8005d44:	fffff097          	auipc	ra,0xfffff
 8005d48:	75e080e7          	jalr	1886(ra) # 80054a2 <usbd_ep_send>
                udev->dev.control.ctl_zlp = 0U;
 8005d4c:	fdc42783          	lw	a5,-36(s0)
 8005d50:	420786a3          	sb	zero,1069(a5)
            break;
 8005d54:	a8b5                	j	8005dd0 <usbd_in_transc+0x100>
                if (udev->dev.cur_status == USBD_CONFIGURED) {
 8005d56:	fdc42783          	lw	a5,-36(s0)
 8005d5a:	0c67c783          	lbu	a5,198(a5)
 8005d5e:	0ff7f713          	andi	a4,a5,255
 8005d62:	478d                	li	a5,3
 8005d64:	02f71163          	bne	a4,a5,8005d86 <usbd_in_transc+0xb6>
                    if (udev->dev.class_core->data_in != NULL) {
 8005d68:	fdc42783          	lw	a5,-36(s0)
 8005d6c:	4307a783          	lw	a5,1072(a5)
 8005d70:	4b9c                	lw	a5,16(a5)
 8005d72:	cb91                	beqz	a5,8005d86 <usbd_in_transc+0xb6>
                        udev->dev.class_core->data_in (udev, 0U);
 8005d74:	fdc42783          	lw	a5,-36(s0)
 8005d78:	4307a783          	lw	a5,1072(a5)
 8005d7c:	4b9c                	lw	a5,16(a5)
 8005d7e:	4581                	li	a1,0
 8005d80:	fdc42503          	lw	a0,-36(s0)
 8005d84:	9782                	jalr	a5
                transc->remain_len = 0U;
 8005d86:	fec42783          	lw	a5,-20(s0)
 8005d8a:	0007aa23          	sw	zero,20(a5)
                usbd_ctl_status_recev (udev);
 8005d8e:	fdc42503          	lw	a0,-36(s0)
 8005d92:	00000097          	auipc	ra,0x0
 8005d96:	d94080e7          	jalr	-620(ra) # 8005b26 <usbd_ctl_status_recev>
            break;
 8005d9a:	a81d                	j	8005dd0 <usbd_in_transc+0x100>
        }
    } else {
        if ((udev->dev.cur_status == USBD_CONFIGURED) && (udev->dev.class_core->data_in != NULL)) {
 8005d9c:	fdc42783          	lw	a5,-36(s0)
 8005da0:	0c67c783          	lbu	a5,198(a5)
 8005da4:	0ff7f713          	andi	a4,a5,255
 8005da8:	478d                	li	a5,3
 8005daa:	02f71363          	bne	a4,a5,8005dd0 <usbd_in_transc+0x100>
 8005dae:	fdc42783          	lw	a5,-36(s0)
 8005db2:	4307a783          	lw	a5,1072(a5)
 8005db6:	4b9c                	lw	a5,16(a5)
 8005db8:	cf81                	beqz	a5,8005dd0 <usbd_in_transc+0x100>
            udev->dev.class_core->data_in (udev, ep_num);
 8005dba:	fdc42783          	lw	a5,-36(s0)
 8005dbe:	4307a783          	lw	a5,1072(a5)
 8005dc2:	4b98                	lw	a4,16(a5)
 8005dc4:	fdb44783          	lbu	a5,-37(s0)
 8005dc8:	85be                	mv	a1,a5
 8005dca:	fdc42503          	lw	a0,-36(s0)
 8005dce:	9702                	jalr	a4
        }
    }

    return USBD_OK;
 8005dd0:	4781                	li	a5,0
}
 8005dd2:	853e                	mv	a0,a5
 8005dd4:	50b2                	lw	ra,44(sp)
 8005dd6:	5422                	lw	s0,40(sp)
 8005dd8:	6145                	addi	sp,sp,48
 8005dda:	8082                	ret

08005ddc <write_handle_raw>:
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 8005ddc:	7151                	addi	sp,sp,-240
 8005dde:	d5a2                	sw	s0,232(sp)
 8005de0:	d1ca                	sw	s2,224(sp)
 8005de2:	c62a                	sw	a0,12(sp)
 8005de4:	892e                	mv	s2,a1
 8005de6:	8432                	mv	s0,a2
	uint8_t string_buffer[128] = {'\0'};
 8005de8:	4581                	li	a1,0
 8005dea:	08000613          	li	a2,128
 8005dee:	1088                	addi	a0,sp,96
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 8005df0:	d786                	sw	ra,236(sp)
 8005df2:	d3a6                	sw	s1,228(sp)
	uint8_t string_buffer[128] = {'\0'};
 8005df4:	00002097          	auipc	ra,0x2
 8005df8:	bd6080e7          	jalr	-1066(ra) # 80079ca <memset>
	uint8_t data_buffer[(20*2)+15] = {'\0'};
 8005dfc:	03700613          	li	a2,55
 8005e00:	4581                	li	a1,0
 8005e02:	1028                	addi	a0,sp,40
 8005e04:	00002097          	auipc	ra,0x2
 8005e08:	bc6080e7          	jalr	-1082(ra) # 80079ca <memset>
	const uint8_t lut_hex[] = "0123456789ABCDEF";
 8005e0c:	080004b7          	lui	s1,0x8000
 8005e10:	3c848593          	addi	a1,s1,968 # 80003c8 <_std_dev_req+0x38>
 8005e14:	4645                	li	a2,17
 8005e16:	03058593          	addi	a1,a1,48
 8005e1a:	0848                	addi	a0,sp,20
 8005e1c:	00002097          	auipc	ra,0x2
 8005e20:	b98080e7          	jalr	-1128(ra) # 80079b4 <memcpy>
	for(int i = 0; i < size; i++){
 8005e24:	46b2                	lw	a3,12(sp)
 8005e26:	1030                	addi	a2,sp,40
 8005e28:	4701                	li	a4,0
 8005e2a:	3c848593          	addi	a1,s1,968
 8005e2e:	04874463          	blt	a4,s0,8005e76 <write_handle_raw+0x9a>
	data_buffer[size*2] = '\0';
 8005e32:	119c                	addi	a5,sp,224
 8005e34:	0406                	slli	s0,s0,0x1
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e36:	08000637          	lui	a2,0x8000
	data_buffer[size*2] = '\0';
 8005e3a:	943e                	add	s0,s0,a5
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e3c:	1038                	addi	a4,sp,40
 8005e3e:	40c60613          	addi	a2,a2,1036 # 800040c <_std_dev_req+0x7c>
 8005e42:	04c58593          	addi	a1,a1,76
 8005e46:	1088                	addi	a0,sp,96
	data_buffer[size*2] = '\0';
 8005e48:	f4040423          	sb	zero,-184(s0)
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005e4c:	00002097          	auipc	ra,0x2
 8005e50:	b8e080e7          	jalr	-1138(ra) # 80079da <siprintf>
	lio_send_bt(string_buffer, strlen(string_buffer));
 8005e54:	1088                	addi	a0,sp,96
 8005e56:	00002097          	auipc	ra,0x2
 8005e5a:	bea080e7          	jalr	-1046(ra) # 8007a40 <strlen>
 8005e5e:	85aa                	mv	a1,a0
 8005e60:	1088                	addi	a0,sp,96
 8005e62:	00001097          	auipc	ra,0x1
 8005e66:	b3c080e7          	jalr	-1220(ra) # 800699e <lio_send_bt>
}
 8005e6a:	50be                	lw	ra,236(sp)
 8005e6c:	542e                	lw	s0,232(sp)
 8005e6e:	549e                	lw	s1,228(sp)
 8005e70:	590e                	lw	s2,224(sp)
 8005e72:	616d                	addi	sp,sp,240
 8005e74:	8082                	ret
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e76:	00e907b3          	add	a5,s2,a4
 8005e7a:	0007c783          	lbu	a5,0(a5)
 8005e7e:	1184                	addi	s1,sp,224
	for(int i = 0; i < size; i++){
 8005e80:	0705                	addi	a4,a4,1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e82:	0047d513          	srli	a0,a5,0x4
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e86:	8bbd                	andi	a5,a5,15
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e88:	9526                	add	a0,a0,s1
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e8a:	97a6                	add	a5,a5,s1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e8c:	f3454503          	lbu	a0,-204(a0)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e90:	f347c783          	lbu	a5,-204(a5)
 8005e94:	0609                	addi	a2,a2,2
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005e96:	fea60f23          	sb	a0,-2(a2)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005e9a:	fef60fa3          	sb	a5,-1(a2)
 8005e9e:	bf41                	j	8005e2e <write_handle_raw+0x52>

08005ea0 <send_data_to_phone>:
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 8005ea0:	00859793          	slli	a5,a1,0x8
 8005ea4:	05c2                	slli	a1,a1,0x10
 8005ea6:	81c1                	srli	a1,a1,0x10
 8005ea8:	81a1                	srli	a1,a1,0x8
void send_data_to_phone(uint16_t handle, int16_t value){
 8005eaa:	1101                	addi	sp,sp,-32
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 8005eac:	8ddd                	or	a1,a1,a5
 8005eae:	00b11623          	sh	a1,12(sp)
    write_handle_raw(handle,bytes,2);
 8005eb2:	4609                	li	a2,2
 8005eb4:	006c                	addi	a1,sp,12
void send_data_to_phone(uint16_t handle, int16_t value){
 8005eb6:	ce06                	sw	ra,28(sp)
    write_handle_raw(handle,bytes,2);
 8005eb8:	00000097          	auipc	ra,0x0
 8005ebc:	f24080e7          	jalr	-220(ra) # 8005ddc <write_handle_raw>
}
 8005ec0:	40f2                	lw	ra,28(sp)
 8005ec2:	6105                	addi	sp,sp,32
 8005ec4:	8082                	ret

08005ec6 <stagger_data_to_phone>:
    int index = (seconds - 1) % 7; // Adjust the size according to the number of handles
 8005ec6:	479d                	li	a5,7
 8005ec8:	157d                	addi	a0,a0,-1
 8005eca:	02f56533          	rem	a0,a0,a5
    value = last_Sample_buffer[index];
 8005ece:	20000737          	lui	a4,0x20000
    send_data_to_phone(handles[index], value);
 8005ed2:	200007b7          	lui	a5,0x20000
    value = last_Sample_buffer[index];
 8005ed6:	55c70713          	addi	a4,a4,1372 # 2000055c <last_Sample_buffer>
    send_data_to_phone(handles[index], value);
 8005eda:	47878793          	addi	a5,a5,1144 # 20000478 <handles>
    value = last_Sample_buffer[index];
 8005ede:	0506                	slli	a0,a0,0x1
 8005ee0:	972a                	add	a4,a4,a0
    send_data_to_phone(handles[index], value);
 8005ee2:	953e                	add	a0,a0,a5
 8005ee4:	00071583          	lh	a1,0(a4)
 8005ee8:	00055503          	lhu	a0,0(a0)
 8005eec:	00000317          	auipc	t1,0x0
 8005ef0:	fb430067          	jr	-76(t1) # 8005ea0 <send_data_to_phone>

08005ef4 <reboot_BT>:
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005ef4:	08000537          	lui	a0,0x8000
void reboot_BT(){
 8005ef8:	1141                	addi	sp,sp,-16
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005efa:	4591                	li	a1,4
 8005efc:	42050513          	addi	a0,a0,1056 # 8000420 <_std_dev_req+0x90>
void reboot_BT(){
 8005f00:	c606                	sw	ra,12(sp)
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005f02:	00001097          	auipc	ra,0x1
 8005f06:	a9c080e7          	jalr	-1380(ra) # 800699e <lio_send_bt>
}
 8005f0a:	40b2                	lw	ra,12(sp)
    delay_1ms(50);
 8005f0c:	03200513          	li	a0,50
}
 8005f10:	0141                	addi	sp,sp,16
    delay_1ms(50);
 8005f12:	fffff317          	auipc	t1,0xfffff
 8005f16:	89430067          	jr	-1900(t1) # 80047a6 <delay_1ms>

08005f1a <TIMER1_IRQHandler>:
                break;
        }
    }
}

void TIMER1_IRQHandler(void){
 8005f1a:	711d                	addi	sp,sp,-96
    char buf[64] = {'\0'};
 8005f1c:	04000613          	li	a2,64
 8005f20:	4581                	li	a1,0
 8005f22:	850a                	mv	a0,sp
void TIMER1_IRQHandler(void){
 8005f24:	ce86                	sw	ra,92(sp)
 8005f26:	cca2                	sw	s0,88(sp)
 8005f28:	caa6                	sw	s1,84(sp)
 8005f2a:	c8ca                	sw	s2,80(sp)
 8005f2c:	c6ce                	sw	s3,76(sp)
    char buf[64] = {'\0'};
 8005f2e:	00002097          	auipc	ra,0x2
 8005f32:	a9c080e7          	jalr	-1380(ra) # 80079ca <memset>
    int buf_size = 0;   
    dma_vector_t vector_write;
    /* Check which channel triggered the interrupt */
    if(SET == timer_interrupt_flag_get(TIMER1, TIMER_INT_CH0)){
 8005f36:	4589                	li	a1,2
 8005f38:	40000537          	lui	a0,0x40000
 8005f3c:	ffffc097          	auipc	ra,0xffffc
 8005f40:	960080e7          	jalr	-1696(ra) # 800189c <timer_interrupt_flag_get>
 8005f44:	4785                	li	a5,1
 8005f46:	1cf51463          	bne	a0,a5,800610e <TIMER1_IRQHandler+0x1f4>
        //led_on_B1();
        milli++;
 8005f4a:	200004b7          	lui	s1,0x20000
 8005f4e:	53c48713          	addi	a4,s1,1340 # 2000053c <milli>
 8005f52:	00075783          	lhu	a5,0(a4)
 8005f56:	20000437          	lui	s0,0x20000
 8005f5a:	53c48493          	addi	s1,s1,1340
 8005f5e:	0785                	addi	a5,a5,1
 8005f60:	07c2                	slli	a5,a5,0x10
 8005f62:	87c1                	srai	a5,a5,0x10
 8005f64:	00f71023          	sh	a5,0(a4)
        if(milli == 1000){
 8005f68:	00075783          	lhu	a5,0(a4)
 8005f6c:	3e800713          	li	a4,1000
 8005f70:	54040413          	addi	s0,s0,1344 # 20000540 <seconds>
 8005f74:	07c2                	slli	a5,a5,0x10
 8005f76:	87c1                	srai	a5,a5,0x10
 8005f78:	00e79763          	bne	a5,a4,8005f86 <TIMER1_IRQHandler+0x6c>
            milli = 0;
 8005f7c:	00049023          	sh	zero,0(s1)
            seconds++;
 8005f80:	401c                	lw	a5,0(s0)
 8005f82:	0785                	addi	a5,a5,1
 8005f84:	c01c                	sw	a5,0(s0)
            //skicka data till telefon
        }
        if(seconds==60){
 8005f86:	4018                	lw	a4,0(s0)
 8005f88:	200009b7          	lui	s3,0x20000
 8005f8c:	03c00793          	li	a5,60
 8005f90:	53e98993          	addi	s3,s3,1342 # 2000053e <minutes>
 8005f94:	00f71b63          	bne	a4,a5,8005faa <TIMER1_IRQHandler+0x90>
            seconds = 0;
 8005f98:	00042023          	sw	zero,0(s0)
            minutes++;
 8005f9c:	0009d783          	lhu	a5,0(s3)
 8005fa0:	0785                	addi	a5,a5,1
 8005fa2:	07c2                	slli	a5,a5,0x10
 8005fa4:	87c1                	srai	a5,a5,0x10
 8005fa6:	00f99023          	sh	a5,0(s3)
        }
        if(milli == 0){ //Right leg
 8005faa:	0004d783          	lhu	a5,0(s1)
 8005fae:	07c2                	slli	a5,a5,0x10
 8005fb0:	87c1                	srai	a5,a5,0x10
 8005fb2:	eb81                	bnez	a5,8005fc2 <TIMER1_IRQHandler+0xa8>
            stagger_data_to_phone(seconds);
 8005fb4:	4008                	lw	a0,0(s0)
 8005fb6:	0542                	slli	a0,a0,0x10
 8005fb8:	8541                	srai	a0,a0,0x10
 8005fba:	00000097          	auipc	ra,0x0
 8005fbe:	f0c080e7          	jalr	-244(ra) # 8005ec6 <stagger_data_to_phone>
        //if(milli == 400){ //Chest
        //    stagger_data_to_phone(seconds);
        //}
        
        
        emg = ADC_RDATA(ADC0);
 8005fc2:	40012937          	lui	s2,0x40012
 8005fc6:	44c92703          	lw	a4,1100(s2) # 4001244c <_sp+0x2000a44c>
 8005fca:	200007b7          	lui	a5,0x20000

        formatTime(buf,minutes,seconds,milli);
 8005fce:	850a                	mv	a0,sp
        emg = ADC_RDATA(ADC0);
 8005fd0:	52e7ac23          	sw	a4,1336(a5) # 20000538 <emg>
        formatTime(buf,minutes,seconds,milli);
 8005fd4:	0009d583          	lhu	a1,0(s3)
 8005fd8:	4010                	lw	a2,0(s0)
 8005fda:	0004d683          	lhu	a3,0(s1)
 8005fde:	05c2                	slli	a1,a1,0x10
 8005fe0:	85c1                	srai	a1,a1,0x10
 8005fe2:	06c2                	slli	a3,a3,0x10
 8005fe4:	86c1                	srai	a3,a3,0x10
 8005fe6:	00000097          	auipc	ra,0x0
 8005fea:	3f6080e7          	jalr	1014(ra) # 80063dc <formatTime>
        last_Sample_buffer[0] = (int16_t)((*(pDatabuffer + 0  ) << 8) | *(pDatabuffer + 1  ));
 8005fee:	200007b7          	lui	a5,0x20000
 8005ff2:	4fc7a783          	lw	a5,1276(a5) # 200004fc <pDatabuffer>
 8005ff6:	20000437          	lui	s0,0x20000
 8005ffa:	55c40413          	addi	s0,s0,1372 # 2000055c <last_Sample_buffer>
 8005ffe:	0007c583          	lbu	a1,0(a5)
 8006002:	0017c703          	lbu	a4,1(a5)
        last_Sample_buffer[3] = (int16_t)((*(pDatabuffer + 8  ) << 8) | *(pDatabuffer + 9  ));
        last_Sample_buffer[4] = (int16_t)((*(pDatabuffer + 10 ) << 8) | *(pDatabuffer + 11 ));
        last_Sample_buffer[5] = (int16_t)((*(pDatabuffer + 12 ) << 8) | *(pDatabuffer + 13 ));
        last_Sample_buffer[6] = ADC_RDATA(ADC0);

        append_int_to_string(buf, last_Sample_buffer[0]);
 8006006:	850a                	mv	a0,sp
        last_Sample_buffer[0] = (int16_t)((*(pDatabuffer + 0  ) << 8) | *(pDatabuffer + 1  ));
 8006008:	05a2                	slli	a1,a1,0x8
 800600a:	8dd9                	or	a1,a1,a4
 800600c:	05c2                	slli	a1,a1,0x10
 800600e:	85c1                	srai	a1,a1,0x10
 8006010:	00b41023          	sh	a1,0(s0)
        last_Sample_buffer[1] = (int16_t)((*(pDatabuffer + 2  ) << 8) | *(pDatabuffer + 3  ));
 8006014:	0027c703          	lbu	a4,2(a5)
 8006018:	0037c683          	lbu	a3,3(a5)
 800601c:	0722                	slli	a4,a4,0x8
 800601e:	8f55                	or	a4,a4,a3
 8006020:	00e41123          	sh	a4,2(s0)
        last_Sample_buffer[2] = (int16_t)((*(pDatabuffer + 4  ) << 8) | *(pDatabuffer + 5  ));
 8006024:	0047c703          	lbu	a4,4(a5)
 8006028:	0057c683          	lbu	a3,5(a5)
 800602c:	0722                	slli	a4,a4,0x8
 800602e:	8f55                	or	a4,a4,a3
 8006030:	00e41223          	sh	a4,4(s0)
        last_Sample_buffer[3] = (int16_t)((*(pDatabuffer + 8  ) << 8) | *(pDatabuffer + 9  ));
 8006034:	0087c703          	lbu	a4,8(a5)
 8006038:	0097c683          	lbu	a3,9(a5)
 800603c:	0722                	slli	a4,a4,0x8
 800603e:	8f55                	or	a4,a4,a3
 8006040:	00e41323          	sh	a4,6(s0)
        last_Sample_buffer[4] = (int16_t)((*(pDatabuffer + 10 ) << 8) | *(pDatabuffer + 11 ));
 8006044:	00a7c703          	lbu	a4,10(a5)
 8006048:	00b7c683          	lbu	a3,11(a5)
 800604c:	0722                	slli	a4,a4,0x8
 800604e:	8f55                	or	a4,a4,a3
 8006050:	00e41423          	sh	a4,8(s0)
        last_Sample_buffer[5] = (int16_t)((*(pDatabuffer + 12 ) << 8) | *(pDatabuffer + 13 ));
 8006054:	00c7c703          	lbu	a4,12(a5)
 8006058:	00d7c783          	lbu	a5,13(a5)
 800605c:	0722                	slli	a4,a4,0x8
 800605e:	8fd9                	or	a5,a5,a4
 8006060:	00f41523          	sh	a5,10(s0)
        last_Sample_buffer[6] = ADC_RDATA(ADC0);
 8006064:	44c92783          	lw	a5,1100(s2)
 8006068:	00f41623          	sh	a5,12(s0)
        append_int_to_string(buf, last_Sample_buffer[0]);
 800606c:	00000097          	auipc	ra,0x0
 8006070:	474080e7          	jalr	1140(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[1]);
 8006074:	00241583          	lh	a1,2(s0)
 8006078:	850a                	mv	a0,sp
 800607a:	00000097          	auipc	ra,0x0
 800607e:	466080e7          	jalr	1126(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[2]);
 8006082:	00441583          	lh	a1,4(s0)
 8006086:	850a                	mv	a0,sp
 8006088:	00000097          	auipc	ra,0x0
 800608c:	458080e7          	jalr	1112(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[3]);
 8006090:	00641583          	lh	a1,6(s0)
 8006094:	850a                	mv	a0,sp
 8006096:	00000097          	auipc	ra,0x0
 800609a:	44a080e7          	jalr	1098(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[4]);
 800609e:	00841583          	lh	a1,8(s0)
 80060a2:	850a                	mv	a0,sp
 80060a4:	00000097          	auipc	ra,0x0
 80060a8:	43c080e7          	jalr	1084(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[5]);
 80060ac:	00a41583          	lh	a1,10(s0)
 80060b0:	850a                	mv	a0,sp
 80060b2:	00000097          	auipc	ra,0x0
 80060b6:	42e080e7          	jalr	1070(ra) # 80064e0 <append_int_to_string>
        append_int_to_string(buf, last_Sample_buffer[6]);
 80060ba:	00c41583          	lh	a1,12(s0)
 80060be:	850a                	mv	a0,sp
 80060c0:	00000097          	auipc	ra,0x0
 80060c4:	420080e7          	jalr	1056(ra) # 80064e0 <append_int_to_string>

        append_newLine(buf, strlen(buf)); //Testa byt strlen till buf_size för bättre prestanda
 80060c8:	850a                	mv	a0,sp
 80060ca:	00002097          	auipc	ra,0x2
 80060ce:	976080e7          	jalr	-1674(ra) # 8007a40 <strlen>
 80060d2:	85aa                	mv	a1,a0
 80060d4:	850a                	mv	a0,sp
 80060d6:	00000097          	auipc	ra,0x0
 80060da:	43a080e7          	jalr	1082(ra) # 8006510 <append_newLine>
        enqueue_string(buf);
 80060de:	850a                	mv	a0,sp
 80060e0:	ffffe097          	auipc	ra,0xffffe
 80060e4:	502080e7          	jalr	1282(ra) # 80045e2 <enqueue_string>

        i2c_dma_master_read_register(I2C0, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H);
 80060e8:	40005537          	lui	a0,0x40005
 80060ec:	06900593          	li	a1,105
 80060f0:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 80060f4:	03b00613          	li	a2,59
 80060f8:	ffffe097          	auipc	ra,0xffffe
 80060fc:	26e080e7          	jalr	622(ra) # 8004366 <i2c_dma_master_read_register>
        timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 8006100:	4589                	li	a1,2
 8006102:	40000537          	lui	a0,0x40000
 8006106:	ffffb097          	auipc	ra,0xffffb
 800610a:	7a8080e7          	jalr	1960(ra) # 80018ae <timer_interrupt_flag_clear>
        //led_off_B1();
    }
}
 800610e:	40f6                	lw	ra,92(sp)
 8006110:	4466                	lw	s0,88(sp)
 8006112:	44d6                	lw	s1,84(sp)
 8006114:	4946                	lw	s2,80(sp)
 8006116:	49b6                	lw	s3,76(sp)
 8006118:	6125                	addi	sp,sp,96
 800611a:	8082                	ret

0800611c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800611c:	1101                	addi	sp,sp,-32
 800611e:	ca26                	sw	s1,20(sp)
 8006120:	c84a                	sw	s2,16(sp)
    if(RESET != usart_interrupt_flag_get(USART2, USART_INT_FLAG_RBNE)){
 8006122:	400054b7          	lui	s1,0x40005
 8006126:	00050937          	lui	s2,0x50
 800612a:	30590593          	addi	a1,s2,773 # 50305 <__stack_size+0x4f305>
 800612e:	80048513          	addi	a0,s1,-2048 # 40004800 <_sp+0x1fffc800>
void USART2_IRQHandler(void){
 8006132:	ce06                	sw	ra,28(sp)
 8006134:	cc22                	sw	s0,24(sp)
 8006136:	c64e                	sw	s3,12(sp)
    if(RESET != usart_interrupt_flag_get(USART2, USART_INT_FLAG_RBNE)){
 8006138:	ffffc097          	auipc	ra,0xffffc
 800613c:	92e080e7          	jalr	-1746(ra) # 8001a66 <usart_interrupt_flag_get>
 8006140:	10050d63          	beqz	a0,800625a <USART2_IRQHandler+0x13e>
        start_time = millis() + 1000;
 8006144:	00000097          	auipc	ra,0x0
 8006148:	3da080e7          	jalr	986(ra) # 800651e <millis>
 800614c:	200007b7          	lui	a5,0x20000
 8006150:	3e850513          	addi	a0,a0,1000 # 400003e8 <_sp+0x1fff83e8>
 8006154:	54a7a223          	sw	a0,1348(a5) # 20000544 <start_time>
        rxbuffer[rxCount++] = usart_data_receive(USART2);
 8006158:	80048513          	addi	a0,s1,-2048
 800615c:	ffffc097          	auipc	ra,0xffffc
 8006160:	8ba080e7          	jalr	-1862(ra) # 8001a16 <usart_data_receive>
 8006164:	20005737          	lui	a4,0x20005
 8006168:	e3874783          	lbu	a5,-456(a4) # 20004e38 <rxCount>
 800616c:	20005437          	lui	s0,0x20005
 8006170:	89ba                	mv	s3,a4
 8006172:	00178693          	addi	a3,a5,1
 8006176:	e2d70c23          	sb	a3,-456(a4)
 800617a:	e3c40693          	addi	a3,s0,-452 # 20004e3c <rxbuffer>
 800617e:	97b6                	add	a5,a5,a3
 8006180:	00a78023          	sb	a0,0(a5)
        if(rxbuffer[0] != 's'){
 8006184:	0006c683          	lbu	a3,0(a3) # 1000000 <__stack_size+0xfff000>
 8006188:	07300793          	li	a5,115
 800618c:	02f68463          	beq	a3,a5,80061b4 <USART2_IRQHandler+0x98>
            rxCount = 0;
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 8006190:	4581                	li	a1,0
 8006192:	4621                	li	a2,8
 8006194:	e3c40513          	addi	a0,s0,-452
            rxCount = 0;
 8006198:	e2070c23          	sb	zero,-456(a4)
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 800619c:	00002097          	auipc	ra,0x2
 80061a0:	82e080e7          	jalr	-2002(ra) # 80079ca <memset>
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 80061a4:	30590593          	addi	a1,s2,773
 80061a8:	80048513          	addi	a0,s1,-2048
 80061ac:	ffffc097          	auipc	ra,0xffffc
 80061b0:	8e8080e7          	jalr	-1816(ra) # 8001a94 <usart_interrupt_flag_clear>
        }
        if(rxCount == 6){
 80061b4:	e389c703          	lbu	a4,-456(s3)
 80061b8:	4799                	li	a5,6
 80061ba:	0af71063          	bne	a4,a5,800625a <USART2_IRQHandler+0x13e>
            if(!strcmp(rxbuffer, "start0")) {
 80061be:	080005b7          	lui	a1,0x8000
 80061c2:	3c858593          	addi	a1,a1,968 # 80003c8 <_std_dev_req+0x38>
 80061c6:	e3c40513          	addi	a0,s0,-452
 80061ca:	00002097          	auipc	ra,0x2
 80061ce:	85e080e7          	jalr	-1954(ra) # 8007a28 <strcmp>
 80061d2:	e939                	bnez	a0,8006228 <USART2_IRQHandler+0x10c>
                set_state(START);
 80061d4:	4505                	li	a0,1
 80061d6:	00001097          	auipc	ra,0x1
 80061da:	86e080e7          	jalr	-1938(ra) # 8006a44 <set_state>
                led_on_B1();
 80061de:	00000097          	auipc	ra,0x0
 80061e2:	0b4080e7          	jalr	180(ra) # 8006292 <led_on_B1>
                write = 1;
 80061e6:	200007b7          	lui	a5,0x20000
 80061ea:	4705                	li	a4,1
 80061ec:	54e7a423          	sw	a4,1352(a5) # 20000548 <write>
                set_state(STOP);
                led_off_B1();
                write = 0;
            }
            rxCount = 0;
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 80061f0:	4581                	li	a1,0
 80061f2:	e3c40513          	addi	a0,s0,-452
 80061f6:	4621                	li	a2,8
            rxCount = 0;
 80061f8:	e2098c23          	sb	zero,-456(s3)
            memset(rxbuffer, '\0', sizeof(rxbuffer));
 80061fc:	00001097          	auipc	ra,0x1
 8006200:	7ce080e7          	jalr	1998(ra) # 80079ca <memset>
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
        }
    }
}
 8006204:	4462                	lw	s0,24(sp)
 8006206:	40f2                	lw	ra,28(sp)
 8006208:	44d2                	lw	s1,20(sp)
 800620a:	4942                	lw	s2,16(sp)
 800620c:	49b2                	lw	s3,12(sp)
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 800620e:	000505b7          	lui	a1,0x50
 8006212:	40005537          	lui	a0,0x40005
 8006216:	30558593          	addi	a1,a1,773 # 50305 <__stack_size+0x4f305>
 800621a:	80050513          	addi	a0,a0,-2048 # 40004800 <_sp+0x1fffc800>
}
 800621e:	6105                	addi	sp,sp,32
            usart_interrupt_flag_clear(USART2, USART_INT_FLAG_RBNE);
 8006220:	ffffc317          	auipc	t1,0xffffc
 8006224:	87430067          	jr	-1932(t1) # 8001a94 <usart_interrupt_flag_clear>
            }else if(!strcmp(rxbuffer, "stopp0")){
 8006228:	080005b7          	lui	a1,0x8000
 800622c:	3e058593          	addi	a1,a1,992 # 80003e0 <_std_dev_req+0x50>
 8006230:	e3c40513          	addi	a0,s0,-452
 8006234:	00001097          	auipc	ra,0x1
 8006238:	7f4080e7          	jalr	2036(ra) # 8007a28 <strcmp>
 800623c:	f955                	bnez	a0,80061f0 <USART2_IRQHandler+0xd4>
                set_state(STOP);
 800623e:	4509                	li	a0,2
 8006240:	00001097          	auipc	ra,0x1
 8006244:	804080e7          	jalr	-2044(ra) # 8006a44 <set_state>
                led_off_B1();
 8006248:	00000097          	auipc	ra,0x0
 800624c:	05e080e7          	jalr	94(ra) # 80062a6 <led_off_B1>
                write = 0;
 8006250:	200007b7          	lui	a5,0x20000
 8006254:	5407a423          	sw	zero,1352(a5) # 20000548 <write>
 8006258:	bf61                	j	80061f0 <USART2_IRQHandler+0xd4>
}
 800625a:	40f2                	lw	ra,28(sp)
 800625c:	4462                	lw	s0,24(sp)
 800625e:	44d2                	lw	s1,20(sp)
 8006260:	4942                	lw	s2,16(sp)
 8006262:	49b2                	lw	s3,12(sp)
 8006264:	6105                	addi	sp,sp,32
 8006266:	8082                	ret

08006268 <ledInit>:

void ledInit (void){
 8006268:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 800626a:	60300513          	li	a0,1539
void ledInit (void){
 800626e:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8006270:	ffffb097          	auipc	ra,0xffffb
 8006274:	f32080e7          	jalr	-206(ra) # 80011a2 <rcu_periph_clock_enable>
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
}
 8006278:	40b2                	lw	ra,12(sp)
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
 800627a:	40011537          	lui	a0,0x40011
 800627e:	468d                	li	a3,3
 8006280:	460d                	li	a2,3
 8006282:	45c1                	li	a1,16
 8006284:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
}
 8006288:	0141                	addi	sp,sp,16
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);
 800628a:	ffffb317          	auipc	t1,0xffffb
 800628e:	c7030067          	jr	-912(t1) # 8000efa <gpio_init>

08006292 <led_on_B1>:

void led_on_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 1);
 8006292:	40011537          	lui	a0,0x40011
 8006296:	4605                	li	a2,1
 8006298:	4589                	li	a1,2
 800629a:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 800629e:	ffffb317          	auipc	t1,0xffffb
 80062a2:	d0830067          	jr	-760(t1) # 8000fa6 <gpio_bit_write>

080062a6 <led_off_B1>:
}
void led_off_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 0);
 80062a6:	40011537          	lui	a0,0x40011
 80062aa:	4601                	li	a2,0
 80062ac:	4589                	li	a1,2
 80062ae:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062b2:	ffffb317          	auipc	t1,0xffffb
 80062b6:	cf430067          	jr	-780(t1) # 8000fa6 <gpio_bit_write>

080062ba <led_on_B0>:
}

void led_on_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 1);
 80062ba:	40011537          	lui	a0,0x40011
 80062be:	4605                	li	a2,1
 80062c0:	4585                	li	a1,1
 80062c2:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062c6:	ffffb317          	auipc	t1,0xffffb
 80062ca:	ce030067          	jr	-800(t1) # 8000fa6 <gpio_bit_write>

080062ce <led_off_B0>:
}
void led_off_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 0);
 80062ce:	40011537          	lui	a0,0x40011
 80062d2:	4601                	li	a2,0
 80062d4:	4585                	li	a1,1
 80062d6:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80062da:	ffffb317          	auipc	t1,0xffffb
 80062de:	ccc30067          	jr	-820(t1) # 8000fa6 <gpio_bit_write>

080062e2 <timer_interrupt_config>:
}

void timer_interrupt_config(){
 80062e2:	7179                	addi	sp,sp,-48
    /* Configuration structs */ 
    timer_oc_parameter_struct timer_ocinitpara;
    timer_parameter_struct timer_initpara;

    /* Enable the TIMER1 interrupt request */
    eclic_irq_enable(TIMER1_IRQn,1,0);
 80062e4:	4601                	li	a2,0
 80062e6:	4585                	li	a1,1
 80062e8:	02f00513          	li	a0,47
void timer_interrupt_config(){
 80062ec:	d606                	sw	ra,44(sp)
 80062ee:	d422                	sw	s0,40(sp)
 80062f0:	d226                	sw	s1,36(sp)
    eclic_irq_enable(TIMER1_IRQn,1,0);
 80062f2:	ffffb097          	auipc	ra,0xffffb
 80062f6:	bca080e7          	jalr	-1078(ra) # 8000ebc <eclic_irq_enable>
    
    /* Enable the peripheral clock. */
    rcu_periph_clock_enable(RCU_TIMER1);
 80062fa:	70000513          	li	a0,1792
 80062fe:	ffffb097          	auipc	ra,0xffffb
 8006302:	ea4080e7          	jalr	-348(ra) # 80011a2 <rcu_periph_clock_enable>

    /* Reset the timer */
    timer_deinit(TIMER1);
 8006306:	40000537          	lui	a0,0x40000
 800630a:	ffffb097          	auipc	ra,0xffffb
 800630e:	0d4080e7          	jalr	212(ra) # 80013de <timer_deinit>

    /* initialize timer configuration struct */
    timer_struct_para_init(&timer_initpara);
 8006312:	0808                	addi	a0,sp,16
 8006314:	ffffb097          	auipc	ra,0xffffb
 8006318:	19c080e7          	jalr	412(ra) # 80014b0 <timer_struct_para_init>
    /* TIMER1 configuration */
    /* Frequency = core clock / ((1+prescaler)*period) = 108MHz / (2*54000) = 1KHz */
    timer_initpara.prescaler         = 1;
    timer_initpara.alignedmode       = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
    timer_initpara.period            = SystemCoreClock/2000;
 800631c:	20000437          	lui	s0,0x20000
 8006320:	4e842783          	lw	a5,1256(s0) # 200004e8 <SystemCoreClock>
 8006324:	7d000713          	li	a4,2000
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
    timer_init(TIMER1, &timer_initpara);
 8006328:	080c                	addi	a1,sp,16
    timer_initpara.period            = SystemCoreClock/2000;
 800632a:	02e7d7b3          	divu	a5,a5,a4
    timer_initpara.prescaler         = 1;
 800632e:	4485                	li	s1,1
    timer_init(TIMER1, &timer_initpara);
 8006330:	40000537          	lui	a0,0x40000
    timer_initpara.prescaler         = 1;
 8006334:	c826                	sw	s1,16(sp)
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
 8006336:	00011a23          	sh	zero,20(sp)
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
 800633a:	00011e23          	sh	zero,28(sp)
    timer_initpara.period            = SystemCoreClock/2000;
 800633e:	cc3e                	sw	a5,24(sp)
    timer_init(TIMER1, &timer_initpara);
 8006340:	ffffb097          	auipc	ra,0xffffb
 8006344:	188080e7          	jalr	392(ra) # 80014c8 <timer_init>

    /* initialize TIMER channel output parameter struct */
    timer_channel_output_struct_para_init(&timer_ocinitpara);
 8006348:	0048                	addi	a0,sp,4
 800634a:	ffffb097          	auipc	ra,0xffffb
 800634e:	216080e7          	jalr	534(ra) # 8001560 <timer_channel_output_struct_para_init>

    /* Set the channel configuration */
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 8006352:	0050                	addi	a2,sp,4
 8006354:	4581                	li	a1,0
 8006356:	40000537          	lui	a0,0x40000
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
 800635a:	00911223          	sh	s1,4(sp)
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
 800635e:	00011423          	sh	zero,8(sp)
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8006362:	00011623          	sh	zero,12(sp)
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 8006366:	ffffb097          	auipc	ra,0xffffb
 800636a:	214080e7          	jalr	532(ra) # 800157a <timer_channel_output_config>
    
    /* CH0 configuration in OC timing mode */
    timer_channel_output_pulse_value_config(TIMER1, TIMER_CH_0, SystemCoreClock/4000);
 800636e:	4e842603          	lw	a2,1256(s0)
 8006372:	6785                	lui	a5,0x1
 8006374:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8006378:	02f65633          	divu	a2,a2,a5
 800637c:	4581                	li	a1,0
 800637e:	40000537          	lui	a0,0x40000
 8006382:	ffffb097          	auipc	ra,0xffffb
 8006386:	48a080e7          	jalr	1162(ra) # 800180c <timer_channel_output_pulse_value_config>
    timer_channel_output_mode_config(TIMER1, TIMER_CH_0, TIMER_OC_MODE_TIMING);
 800638a:	4601                	li	a2,0
 800638c:	4581                	li	a1,0
 800638e:	40000537          	lui	a0,0x40000
 8006392:	ffffb097          	auipc	ra,0xffffb
 8006396:	424080e7          	jalr	1060(ra) # 80017b6 <timer_channel_output_mode_config>
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_0, TIMER_OC_SHADOW_DISABLE);
 800639a:	4601                	li	a2,0
 800639c:	4581                	li	a1,0
 800639e:	40000537          	lui	a0,0x40000
 80063a2:	ffffb097          	auipc	ra,0xffffb
 80063a6:	490080e7          	jalr	1168(ra) # 8001832 <timer_channel_output_shadow_config>

    /* Enable interrupt on the channel */
    timer_interrupt_enable(TIMER1, TIMER_INT_CH0);
 80063aa:	4589                	li	a1,2
 80063ac:	40000537          	lui	a0,0x40000
 80063b0:	ffffb097          	auipc	ra,0xffffb
 80063b4:	4d8080e7          	jalr	1240(ra) # 8001888 <timer_interrupt_enable>
    /* Make sure interrupt flag is clear */
    timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 80063b8:	4589                	li	a1,2
 80063ba:	40000537          	lui	a0,0x40000
 80063be:	ffffb097          	auipc	ra,0xffffb
 80063c2:	4f0080e7          	jalr	1264(ra) # 80018ae <timer_interrupt_flag_clear>

    /* Start the timer */
    timer_enable(TIMER1);
 80063c6:	40000537          	lui	a0,0x40000
 80063ca:	ffffb097          	auipc	ra,0xffffb
 80063ce:	18c080e7          	jalr	396(ra) # 8001556 <timer_enable>
}
 80063d2:	50b2                	lw	ra,44(sp)
 80063d4:	5422                	lw	s0,40(sp)
 80063d6:	5492                	lw	s1,36(sp)
 80063d8:	6145                	addi	sp,sp,48
 80063da:	8082                	ret

080063dc <formatTime>:

void formatTime(char *output, int minutes, int seconds, int milliseconds) {
    // Format minutes
    output[0] = (minutes / 10) + '0';
 80063dc:	47a9                	li	a5,10
 80063de:	02f5c733          	div	a4,a1,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
    output[8] = (milliseconds % 10) + '0';

    // Add a semicolon and null terminator
    output[9] = ';';
    output[10] = '\0';
 80063e2:	00050523          	sb	zero,10(a0) # 4000000a <_sp+0x1fff800a>
    output[0] = (minutes / 10) + '0';
 80063e6:	03070713          	addi	a4,a4,48
 80063ea:	00e50023          	sb	a4,0(a0)
    output[3] = (seconds / 10) + '0';
 80063ee:	02f64733          	div	a4,a2,a5
 80063f2:	03070713          	addi	a4,a4,48
 80063f6:	00e501a3          	sb	a4,3(a0)
    output[6] = ((milliseconds / 100) % 10) + '0';
 80063fa:	06400713          	li	a4,100
 80063fe:	02e6c733          	div	a4,a3,a4
 8006402:	02f76733          	rem	a4,a4,a5
 8006406:	03070713          	addi	a4,a4,48
 800640a:	00e50323          	sb	a4,6(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 800640e:	02f6c733          	div	a4,a3,a5
    output[1] = (minutes % 10) + '0';
 8006412:	02f5e5b3          	rem	a1,a1,a5
    output[4] = (seconds % 10) + '0';
 8006416:	02f66633          	rem	a2,a2,a5
    output[1] = (minutes % 10) + '0';
 800641a:	03058593          	addi	a1,a1,48
 800641e:	00b500a3          	sb	a1,1(a0)
    output[2] = '.';
 8006422:	02e00593          	li	a1,46
 8006426:	00b50123          	sb	a1,2(a0)
    output[5] = '.';
 800642a:	00b502a3          	sb	a1,5(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 800642e:	02f76733          	rem	a4,a4,a5
    output[4] = (seconds % 10) + '0';
 8006432:	03060613          	addi	a2,a2,48
 8006436:	00c50223          	sb	a2,4(a0)
    output[8] = (milliseconds % 10) + '0';
 800643a:	02f6e6b3          	rem	a3,a3,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
 800643e:	03070713          	addi	a4,a4,48
    output[9] = ';';
 8006442:	03b00793          	li	a5,59
    output[7] = ((milliseconds / 10) % 10) + '0';
 8006446:	00e503a3          	sb	a4,7(a0)
    output[9] = ';';
 800644a:	00f504a3          	sb	a5,9(a0)
    output[8] = (milliseconds % 10) + '0';
 800644e:	03068693          	addi	a3,a3,48
 8006452:	00d50423          	sb	a3,8(a0)
}
 8006456:	8082                	ret

08006458 <int_to_string>:

int int_to_string(char *string, int integer){
 8006458:	87aa                	mv	a5,a0
    int i = 0;
    int divider = 1000;
    if(integer < 0){
 800645a:	0605d363          	bgez	a1,80064c0 <int_to_string+0x68>
        string[i++] = '-';
 800645e:	02d00713          	li	a4,45
 8006462:	00e50023          	sb	a4,0(a0)
        integer = -integer;
 8006466:	40b005b3          	neg	a1,a1
        string[i++] = '-';
 800646a:	4705                	li	a4,1
    int divider = 1000;
 800646c:	3e800693          	li	a3,1000
        string[i++] = ';';
        string[i] = '\0';
        return i;
    }
    int og_num = integer;
    while (integer >= divider * 10) {
 8006470:	4529                	li	a0,10
 8006472:	02a68633          	mul	a2,a3,a0
 8006476:	06c5d363          	bge	a1,a2,80064dc <int_to_string+0x84>
 800647a:	852e                	mv	a0,a1
        divider *= 10; 
    }

    while(divider){
        char digit = (integer/divider)+ '0';
        if(digit != '0' || og_num > integer){
 800647c:	03000893          	li	a7,48
            string[i++] = digit; 
        }
        
        integer %= divider;
        divider /= 10;
 8006480:	4829                	li	a6,10
        char digit = (integer/divider)+ '0';
 8006482:	02d54633          	div	a2,a0,a3
 8006486:	03060613          	addi	a2,a2,48
 800648a:	0ff67613          	andi	a2,a2,255
        if(digit != '0' || og_num > integer){
 800648e:	01161463          	bne	a2,a7,8006496 <int_to_string+0x3e>
 8006492:	00b55763          	bge	a0,a1,80064a0 <int_to_string+0x48>
            string[i++] = digit; 
 8006496:	00e78333          	add	t1,a5,a4
 800649a:	00c30023          	sb	a2,0(t1)
 800649e:	0705                	addi	a4,a4,1
        integer %= divider;
 80064a0:	02d56533          	rem	a0,a0,a3
        divider /= 10;
 80064a4:	0306c6b3          	div	a3,a3,a6
    while(divider){
 80064a8:	fee9                	bnez	a3,8006482 <int_to_string+0x2a>
    }
    string[i++] = ';';
 80064aa:	00170513          	addi	a0,a4,1
 80064ae:	03b00693          	li	a3,59
 80064b2:	973e                	add	a4,a4,a5
 80064b4:	00d70023          	sb	a3,0(a4)
    string[i] = '\0';
 80064b8:	97aa                	add	a5,a5,a0
 80064ba:	00078023          	sb	zero,0(a5)
    return i;
}
 80064be:	8082                	ret
    int i = 0;
 80064c0:	4701                	li	a4,0
    }else if(integer == 0){
 80064c2:	f5cd                	bnez	a1,800646c <int_to_string+0x14>
        string[i++] = '0';
 80064c4:	03000713          	li	a4,48
 80064c8:	00e50023          	sb	a4,0(a0)
        string[i++] = ';';
 80064cc:	03b00713          	li	a4,59
 80064d0:	00e500a3          	sb	a4,1(a0)
        string[i] = '\0';
 80064d4:	00050123          	sb	zero,2(a0)
        return i;
 80064d8:	4509                	li	a0,2
 80064da:	8082                	ret
 80064dc:	86b2                	mv	a3,a2
 80064de:	bf51                	j	8006472 <int_to_string+0x1a>

080064e0 <append_int_to_string>:

int append_int_to_string(char *string, int integer){
 80064e0:	7179                	addi	sp,sp,-48
 80064e2:	d422                	sw	s0,40(sp)
 80064e4:	842a                	mv	s0,a0
    char temp[20] = {'\0'};
    int_to_string(temp, integer);
 80064e6:	0068                	addi	a0,sp,12
int append_int_to_string(char *string, int integer){
 80064e8:	d606                	sw	ra,44(sp)
    char temp[20] = {'\0'};
 80064ea:	c602                	sw	zero,12(sp)
 80064ec:	c802                	sw	zero,16(sp)
 80064ee:	ca02                	sw	zero,20(sp)
 80064f0:	cc02                	sw	zero,24(sp)
 80064f2:	ce02                	sw	zero,28(sp)
    int_to_string(temp, integer);
 80064f4:	00000097          	auipc	ra,0x0
 80064f8:	f64080e7          	jalr	-156(ra) # 8006458 <int_to_string>
    int len = fuseStrings(string, temp);
 80064fc:	006c                	addi	a1,sp,12
 80064fe:	8522                	mv	a0,s0
 8006500:	ffffe097          	auipc	ra,0xffffe
 8006504:	15a080e7          	jalr	346(ra) # 800465a <fuseStrings>
    return len;
}
 8006508:	50b2                	lw	ra,44(sp)
 800650a:	5422                	lw	s0,40(sp)
 800650c:	6145                	addi	sp,sp,48
 800650e:	8082                	ret

08006510 <append_newLine>:

void append_newLine(char *string, int length) {
    string[length-1] = '\n';
 8006510:	95aa                	add	a1,a1,a0
 8006512:	47a9                	li	a5,10
 8006514:	fef58fa3          	sb	a5,-1(a1)
    string[length] = '\0'; // Add a null terminator at the new end
 8006518:	00058023          	sb	zero,0(a1)
}
 800651c:	8082                	ret

0800651e <millis>:

int millis(void) {
 800651e:	1141                	addi	sp,sp,-16
 8006520:	c606                	sw	ra,12(sp)
 8006522:	c422                	sw	s0,8(sp)
 8006524:	c226                	sw	s1,4(sp)
    uint64_t mtime = get_timer_value();
 8006526:	ffffc097          	auipc	ra,0xffffc
 800652a:	864080e7          	jalr	-1948(ra) # 8001d8a <get_timer_value>
    return ((mtime * 4000.0) / SystemCoreClock); // Adjusted for seconds and milliseconds
 800652e:	00001097          	auipc	ra,0x1
 8006532:	1a8080e7          	jalr	424(ra) # 80076d6 <__floatundidf>
 8006536:	080007b7          	lui	a5,0x8000
 800653a:	4707a603          	lw	a2,1136(a5) # 8000470 <_std_dev_req+0xe0>
 800653e:	4747a683          	lw	a3,1140(a5)
 8006542:	00001097          	auipc	ra,0x1
 8006546:	c1e080e7          	jalr	-994(ra) # 8007160 <__muldf3>
 800654a:	200007b7          	lui	a5,0x20000
 800654e:	842a                	mv	s0,a0
 8006550:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8006554:	84ae                	mv	s1,a1
 8006556:	00001097          	auipc	ra,0x1
 800655a:	12a080e7          	jalr	298(ra) # 8007680 <__floatunsidf>
 800655e:	862a                	mv	a2,a0
 8006560:	86ae                	mv	a3,a1
 8006562:	8522                	mv	a0,s0
 8006564:	85a6                	mv	a1,s1
 8006566:	00000097          	auipc	ra,0x0
 800656a:	610080e7          	jalr	1552(ra) # 8006b76 <__divdf3>
 800656e:	00001097          	auipc	ra,0x1
 8006572:	03e080e7          	jalr	62(ra) # 80075ac <__fixdfsi>
}
 8006576:	40b2                	lw	ra,12(sp)
 8006578:	4422                	lw	s0,8(sp)
 800657a:	4492                	lw	s1,4(sp)
 800657c:	0141                	addi	sp,sp,16
 800657e:	8082                	ret

08006580 <init_mpu>:

void init_mpu(void){
 8006580:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 8006582:	60300513          	li	a0,1539
void init_mpu(void){
 8006586:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 8006588:	ffffb097          	auipc	ra,0xffffb
 800658c:	c1a080e7          	jalr	-998(ra) # 80011a2 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_I2C0);
 8006590:	71500513          	li	a0,1813
 8006594:	ffffb097          	auipc	ra,0xffffb
 8006598:	c0e080e7          	jalr	-1010(ra) # 80011a2 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7); //led?
 800659c:	40011537          	lui	a0,0x40011
 80065a0:	0c000693          	li	a3,192
 80065a4:	460d                	li	a2,3
 80065a6:	45f1                	li	a1,28
 80065a8:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 80065ac:	ffffb097          	auipc	ra,0xffffb
 80065b0:	94e080e7          	jalr	-1714(ra) # 8000efa <gpio_init>

    mpu6500_install(I2C0);
 80065b4:	40005537          	lui	a0,0x40005
 80065b8:	40050513          	addi	a0,a0,1024 # 40005400 <_sp+0x1fffd400>
 80065bc:	ffffe097          	auipc	ra,0xffffe
 80065c0:	d6a080e7          	jalr	-662(ra) # 8004326 <mpu6500_install>

    delay_1ms(100);   
}
 80065c4:	40b2                	lw	ra,12(sp)
    delay_1ms(100);   
 80065c6:	06400513          	li	a0,100
}
 80065ca:	0141                	addi	sp,sp,16
    delay_1ms(100);   
 80065cc:	ffffe317          	auipc	t1,0xffffe
 80065d0:	1da30067          	jr	474(t1) # 80047a6 <delay_1ms>

080065d4 <init_ADC_EMG>:

void init_ADC_EMG(){
 80065d4:	1141                	addi	sp,sp,-16
    /* enable GPIOA clock */
    rcu_periph_clock_enable(RCU_GPIOA);
 80065d6:	60200513          	li	a0,1538
void init_ADC_EMG(){
 80065da:	c606                	sw	ra,12(sp)
 80065dc:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_GPIOA);
 80065de:	ffffb097          	auipc	ra,0xffffb
 80065e2:	bc4080e7          	jalr	-1084(ra) # 80011a2 <rcu_periph_clock_enable>
    /* Initialize the GPIO that will be used for ADC. A0-A7 and B0-B1 are connected to an ADC-channel each. */
    gpio_init(ANALOG_PORT, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, ANALOG_PIN); //A3
 80065e6:	40011537          	lui	a0,0x40011
 80065ea:	46a1                	li	a3,8
 80065ec:	460d                	li	a2,3
 80065ee:	4581                	li	a1,0
 80065f0:	80050513          	addi	a0,a0,-2048 # 40010800 <_sp+0x20008800>
 80065f4:	ffffb097          	auipc	ra,0xffffb
 80065f8:	906080e7          	jalr	-1786(ra) # 8000efa <gpio_init>
    /* enable ADC clock */
    rcu_periph_clock_enable(RCU_ADC0);
 80065fc:	60900513          	li	a0,1545
 8006600:	ffffb097          	auipc	ra,0xffffb
 8006604:	ba2080e7          	jalr	-1118(ra) # 80011a2 <rcu_periph_clock_enable>

    /* Select the clock frequency that will be used for the ADC core. Refer to README for more info on what to select. */
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8006608:	450d                	li	a0,3

    /* Reset ADC0 configuration. GD32VF103 has two internal ADCs (ADC0, ADC1). */
    adc_deinit(ADC0);
 800660a:	40012437          	lui	s0,0x40012
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 800660e:	ffffb097          	auipc	ra,0xffffb
 8006612:	be0080e7          	jalr	-1056(ra) # 80011ee <rcu_adc_clock_config>
    adc_deinit(ADC0);
 8006616:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 800661a:	ffffa097          	auipc	ra,0xffffa
 800661e:	42e080e7          	jalr	1070(ra) # 8000a48 <adc_deinit>

    /* Set the ADCs to work independently. Refer to the manual for the different parallel modes available. */
    adc_mode_config(ADC_MODE_FREE);
 8006622:	4501                	li	a0,0
 8006624:	ffffa097          	auipc	ra,0xffffa
 8006628:	474080e7          	jalr	1140(ra) # 8000a98 <adc_mode_config>

    /* Set the conversion mode to continuous. Continious mode lets the ADC take measurements continiously without
       an external trigger. */
    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);
 800662c:	4605                	li	a2,1
 800662e:	40040513          	addi	a0,s0,1024
 8006632:	4589                	li	a1,2
 8006634:	ffffa097          	auipc	ra,0xffffa
 8006638:	484080e7          	jalr	1156(ra) # 8000ab8 <adc_special_function_config>

    /* Sets where padding is applied to the measurement. Data alignment right puts padding bits above MSB */
    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);
 800663c:	40040513          	addi	a0,s0,1024
 8006640:	4581                	li	a1,0
 8006642:	ffffa097          	auipc	ra,0xffffa
 8006646:	4be080e7          	jalr	1214(ra) # 8000b00 <adc_data_alignment_config>

    /* Selects how many channels to convert each time. This can be used to "queue" multiple channels. Here just one channel is selected. */
    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, 1);
 800664a:	40040513          	addi	a0,s0,1024
 800664e:	4605                	li	a2,1
 8006650:	4585                	li	a1,1
 8006652:	ffffa097          	auipc	ra,0xffffa
 8006656:	4fa080e7          	jalr	1274(ra) # 8000b4c <adc_channel_length_config>

    /* Set the channel as the first "queued" conversion each time the ADC is activated. */
    adc_regular_channel_config(ADC0, 0, ANALOG_CHANNEL, ADC_SAMPLETIME_28POINT5);
 800665a:	468d                	li	a3,3
 800665c:	40040513          	addi	a0,s0,1024
 8006660:	460d                	li	a2,3
 8006662:	4581                	li	a1,0
 8006664:	ffffa097          	auipc	ra,0xffffa
 8006668:	532080e7          	jalr	1330(ra) # 8000b96 <adc_regular_channel_config>

    /* Since we are using continious conversion we do not want to use an external trigger. */
    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_EXTTRIG_REGULAR_NONE);
 800666c:	40040513          	addi	a0,s0,1024
 8006670:	000e0637          	lui	a2,0xe0
 8006674:	4585                	li	a1,1
 8006676:	ffffa097          	auipc	ra,0xffffa
 800667a:	5de080e7          	jalr	1502(ra) # 8000c54 <adc_external_trigger_source_config>
    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);
 800667e:	4585                	li	a1,1
 8006680:	4605                	li	a2,1
 8006682:	40040513          	addi	a0,s0,1024
 8006686:	ffffa097          	auipc	ra,0xffffa
 800668a:	602080e7          	jalr	1538(ra) # 8000c88 <adc_external_trigger_config>

    /* Enable ADC.*/
    adc_enable(ADC0);
 800668e:	40040513          	addi	a0,s0,1024
 8006692:	ffffa097          	auipc	ra,0xffffa
 8006696:	488080e7          	jalr	1160(ra) # 8000b1a <adc_enable>

    /* Let ADC stabilize */
    delay_1ms(1);
 800669a:	4505                	li	a0,1
 800669c:	ffffe097          	auipc	ra,0xffffe
 80066a0:	10a080e7          	jalr	266(ra) # 80047a6 <delay_1ms>

    /* Calibrates the ADC against an internal source. */
    adc_calibration_enable(ADC0);
 80066a4:	40040513          	addi	a0,s0,1024
 80066a8:	ffffa097          	auipc	ra,0xffffa
 80066ac:	482080e7          	jalr	1154(ra) # 8000b2a <adc_calibration_enable>

    /* Start converting */
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066b0:	40040513          	addi	a0,s0,1024
 80066b4:	4422                	lw	s0,8(sp)
 80066b6:	40b2                	lw	ra,12(sp)
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066b8:	4585                	li	a1,1
 80066ba:	0141                	addi	sp,sp,16
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80066bc:	ffffa317          	auipc	t1,0xffffa
 80066c0:	60630067          	jr	1542(t1) # 8000cc2 <adc_software_trigger_enable>

080066c4 <init_radio>:


char rx_radio_buffer[1024] = {'\0'};
char tx_radio_buffer[1024] = {'\0'};

void init_radio(){
 80066c4:	1141                	addi	sp,sp,-16
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 80066c6:	50000513          	li	a0,1280
void init_radio(){
 80066ca:	c606                	sw	ra,12(sp)
 80066cc:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 80066ce:	ffffb097          	auipc	ra,0xffffb
 80066d2:	ad4080e7          	jalr	-1324(ra) # 80011a2 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOB);
 80066d6:	60300513          	li	a0,1539
 80066da:	ffffb097          	auipc	ra,0xffffb
 80066de:	ac8080e7          	jalr	-1336(ra) # 80011a2 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART2);
 80066e2:	71200513          	li	a0,1810
 80066e6:	ffffb097          	auipc	ra,0xffffb
 80066ea:	abc080e7          	jalr	-1348(ra) # 80011a2 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_10); //PP for no half duplex
 80066ee:	40011437          	lui	s0,0x40011
 80066f2:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 80066f6:	40000693          	li	a3,1024
 80066fa:	460d                	li	a2,3
 80066fc:	45e1                	li	a1,24
 80066fe:	ffffa097          	auipc	ra,0xffffa
 8006702:	7fc080e7          	jalr	2044(ra) # 8000efa <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
 8006706:	6685                	lui	a3,0x1
 8006708:	80068693          	addi	a3,a3,-2048 # 800 <__dbg_stack_size+0x800>
 800670c:	460d                	li	a2,3
 800670e:	4591                	li	a1,4
 8006710:	c0040513          	addi	a0,s0,-1024
 8006714:	ffffa097          	auipc	ra,0xffffa
 8006718:	7e6080e7          	jalr	2022(ra) # 8000efa <gpio_init>

    /* USART configure */
    usart_deinit(USART2);
 800671c:	40005437          	lui	s0,0x40005
 8006720:	80040513          	addi	a0,s0,-2048 # 40004800 <_sp+0x1fffc800>
 8006724:	ffffb097          	auipc	ra,0xffffb
 8006728:	192080e7          	jalr	402(ra) # 80018b6 <usart_deinit>
    usart_baudrate_set(USART2, 1200);
 800672c:	80040513          	addi	a0,s0,-2048
 8006730:	4b000593          	li	a1,1200
 8006734:	ffffb097          	auipc	ra,0xffffb
 8006738:	224080e7          	jalr	548(ra) # 8001958 <usart_baudrate_set>
    usart_word_length_set(USART2, USART_WL_8BIT);
 800673c:	80040513          	addi	a0,s0,-2048
 8006740:	4581                	li	a1,0
 8006742:	ffffb097          	auipc	ra,0xffffb
 8006746:	292080e7          	jalr	658(ra) # 80019d4 <usart_word_length_set>
    usart_stop_bit_set(USART2, USART_STB_1BIT);
 800674a:	80040513          	addi	a0,s0,-2048
 800674e:	4581                	li	a1,0
 8006750:	ffffb097          	auipc	ra,0xffffb
 8006754:	296080e7          	jalr	662(ra) # 80019e6 <usart_stop_bit_set>
    usart_parity_config(USART2, USART_PM_NONE);
 8006758:	80040513          	addi	a0,s0,-2048
 800675c:	4581                	li	a1,0
 800675e:	ffffb097          	auipc	ra,0xffffb
 8006762:	266080e7          	jalr	614(ra) # 80019c4 <usart_parity_config>
    usart_hardware_flow_rts_config(USART2, USART_RTS_DISABLE);
 8006766:	80040513          	addi	a0,s0,-2048
 800676a:	4581                	li	a1,0
 800676c:	ffffb097          	auipc	ra,0xffffb
 8006770:	2b2080e7          	jalr	690(ra) # 8001a1e <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART2, USART_CTS_DISABLE);
 8006774:	80040513          	addi	a0,s0,-2048
 8006778:	4581                	li	a1,0
 800677a:	ffffb097          	auipc	ra,0xffffb
 800677e:	2b0080e7          	jalr	688(ra) # 8001a2a <usart_hardware_flow_cts_config>
    usart_receive_config(USART2, USART_RECEIVE_ENABLE);
 8006782:	80040513          	addi	a0,s0,-2048
 8006786:	4591                	li	a1,4
 8006788:	ffffb097          	auipc	ra,0xffffb
 800678c:	284080e7          	jalr	644(ra) # 8001a0c <usart_receive_config>
    usart_transmit_config(USART2, USART_TRANSMIT_ENABLE);
 8006790:	45a1                	li	a1,8
 8006792:	80040513          	addi	a0,s0,-2048
 8006796:	ffffb097          	auipc	ra,0xffffb
 800679a:	26c080e7          	jalr	620(ra) # 8001a02 <usart_transmit_config>

    eclic_global_interrupt_enable();
 800679e:	ffffa097          	auipc	ra,0xffffa
 80067a2:	70a080e7          	jalr	1802(ra) # 8000ea8 <eclic_global_interrupt_enable>
    eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);
 80067a6:	450d                	li	a0,3
 80067a8:	ffffa097          	auipc	ra,0xffffa
 80067ac:	70c080e7          	jalr	1804(ra) # 8000eb4 <eclic_priority_group_set>
    eclic_irq_enable(USART2_IRQn, 1, 0);
 80067b0:	4601                	li	a2,0
 80067b2:	4585                	li	a1,1
 80067b4:	03a00513          	li	a0,58
 80067b8:	ffffa097          	auipc	ra,0xffffa
 80067bc:	704080e7          	jalr	1796(ra) # 8000ebc <eclic_irq_enable>

    usart_interrupt_enable(USART2, USART_INT_RBNE); 
 80067c0:	80040513          	addi	a0,s0,-2048
 80067c4:	30500593          	li	a1,773
 80067c8:	ffffb097          	auipc	ra,0xffffb
 80067cc:	286080e7          	jalr	646(ra) # 8001a4e <usart_interrupt_enable>

    usart_enable(USART2);
 80067d0:	80040513          	addi	a0,s0,-2048
//        /* configure DMA mode */
//    dma_circulation_disable(DMA0, DMA_CH2);
//        /* enable DMA channel4 */
//    dma_channel_enable(DMA0, DMA_CH2); 

}
 80067d4:	4422                	lw	s0,8(sp)
 80067d6:	40b2                	lw	ra,12(sp)
 80067d8:	0141                	addi	sp,sp,16
    usart_enable(USART2);
 80067da:	ffffb317          	auipc	t1,0xffffb
 80067de:	21e30067          	jr	542(t1) # 80019f8 <usart_enable>

080067e2 <enter_command_mode>:
        output[len - i - 1] = input[i + 1];
    }
    output[len] = '\0';
}

void enter_command_mode(void){
 80067e2:	1101                	addi	sp,sp,-32
    usb_delay_1ms(1000);
 80067e4:	3e800513          	li	a0,1000
void enter_command_mode(void){
 80067e8:	ce06                	sw	ra,28(sp)
    usb_delay_1ms(1000);
 80067ea:	fffff097          	auipc	ra,0xfffff
 80067ee:	aa4080e7          	jalr	-1372(ra) # 800528e <usb_delay_1ms>
    char command_mode[] = "$$$";
 80067f2:	002427b7          	lui	a5,0x242
 80067f6:	42478793          	addi	a5,a5,1060 # 242424 <__stack_size+0x241424>
    lio_send_bt(command_mode, 3);
 80067fa:	458d                	li	a1,3
 80067fc:	0068                	addi	a0,sp,12
    char command_mode[] = "$$$";
 80067fe:	c63e                	sw	a5,12(sp)
    lio_send_bt(command_mode, 3);
 8006800:	00000097          	auipc	ra,0x0
 8006804:	19e080e7          	jalr	414(ra) # 800699e <lio_send_bt>
    usb_delay_1ms(1000);
 8006808:	3e800513          	li	a0,1000
 800680c:	fffff097          	auipc	ra,0xfffff
 8006810:	a82080e7          	jalr	-1406(ra) # 800528e <usb_delay_1ms>
    command_mode[0] = '\r';
 8006814:	47b5                	li	a5,13
    lio_send_bt(command_mode, 1);
 8006816:	0068                	addi	a0,sp,12
 8006818:	4585                	li	a1,1
    command_mode[0] = '\r';
 800681a:	00f10623          	sb	a5,12(sp)
    lio_send_bt(command_mode, 1);
 800681e:	00000097          	auipc	ra,0x0
 8006822:	180080e7          	jalr	384(ra) # 800699e <lio_send_bt>
}
 8006826:	40f2                	lw	ra,28(sp)
 8006828:	6105                	addi	sp,sp,32
 800682a:	8082                	ret

0800682c <lio_init_bt>:

void lio_init_bt(){
 800682c:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 800682e:	50000513          	li	a0,1280
void lio_init_bt(){
 8006832:	d606                	sw	ra,44(sp)
 8006834:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8006836:	ffffb097          	auipc	ra,0xffffb
 800683a:	96c080e7          	jalr	-1684(ra) # 80011a2 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOA);
 800683e:	60200513          	li	a0,1538
 8006842:	ffffb097          	auipc	ra,0xffffb
 8006846:	960080e7          	jalr	-1696(ra) # 80011a2 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART0);
 800684a:	60e00513          	li	a0,1550
 800684e:	ffffb097          	auipc	ra,0xffffb
 8006852:	954080e7          	jalr	-1708(ra) # 80011a2 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);
 8006856:	40011437          	lui	s0,0x40011
 800685a:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 800685e:	20000693          	li	a3,512
 8006862:	460d                	li	a2,3
 8006864:	45e1                	li	a1,24
 8006866:	ffffa097          	auipc	ra,0xffffa
 800686a:	694080e7          	jalr	1684(ra) # 8000efa <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);
 800686e:	40000693          	li	a3,1024
 8006872:	460d                	li	a2,3
 8006874:	4591                	li	a1,4
 8006876:	80040513          	addi	a0,s0,-2048
 800687a:	ffffa097          	auipc	ra,0xffffa
 800687e:	680080e7          	jalr	1664(ra) # 8000efa <gpio_init>

    /* USART configure */
    usart_deinit(USART0);
 8006882:	40014437          	lui	s0,0x40014
 8006886:	80040513          	addi	a0,s0,-2048 # 40013800 <_sp+0x2000b800>
 800688a:	ffffb097          	auipc	ra,0xffffb
 800688e:	02c080e7          	jalr	44(ra) # 80018b6 <usart_deinit>
    usart_baudrate_set(USART0, 115200U);
 8006892:	65f1                	lui	a1,0x1c
 8006894:	80040513          	addi	a0,s0,-2048
 8006898:	20058593          	addi	a1,a1,512 # 1c200 <__stack_size+0x1b200>
 800689c:	ffffb097          	auipc	ra,0xffffb
 80068a0:	0bc080e7          	jalr	188(ra) # 8001958 <usart_baudrate_set>
    usart_word_length_set(USART0, USART_WL_8BIT);
 80068a4:	80040513          	addi	a0,s0,-2048
 80068a8:	4581                	li	a1,0
 80068aa:	ffffb097          	auipc	ra,0xffffb
 80068ae:	12a080e7          	jalr	298(ra) # 80019d4 <usart_word_length_set>
    usart_stop_bit_set(USART0, USART_STB_1BIT);
 80068b2:	80040513          	addi	a0,s0,-2048
 80068b6:	4581                	li	a1,0
 80068b8:	ffffb097          	auipc	ra,0xffffb
 80068bc:	12e080e7          	jalr	302(ra) # 80019e6 <usart_stop_bit_set>
    usart_parity_config(USART0, USART_PM_NONE);
 80068c0:	80040513          	addi	a0,s0,-2048
 80068c4:	4581                	li	a1,0
 80068c6:	ffffb097          	auipc	ra,0xffffb
 80068ca:	0fe080e7          	jalr	254(ra) # 80019c4 <usart_parity_config>
    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);
 80068ce:	80040513          	addi	a0,s0,-2048
 80068d2:	4581                	li	a1,0
 80068d4:	ffffb097          	auipc	ra,0xffffb
 80068d8:	14a080e7          	jalr	330(ra) # 8001a1e <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);
 80068dc:	80040513          	addi	a0,s0,-2048
 80068e0:	4581                	li	a1,0
 80068e2:	ffffb097          	auipc	ra,0xffffb
 80068e6:	148080e7          	jalr	328(ra) # 8001a2a <usart_hardware_flow_cts_config>
    usart_receive_config(USART0, USART_RECEIVE_ENABLE);
 80068ea:	80040513          	addi	a0,s0,-2048
 80068ee:	4591                	li	a1,4
 80068f0:	ffffb097          	auipc	ra,0xffffb
 80068f4:	11c080e7          	jalr	284(ra) # 8001a0c <usart_receive_config>
    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);
 80068f8:	45a1                	li	a1,8
 80068fa:	80040513          	addi	a0,s0,-2048
 80068fe:	ffffb097          	auipc	ra,0xffffb
 8006902:	104080e7          	jalr	260(ra) # 8001a02 <usart_transmit_config>
    usart_enable(USART0);
 8006906:	80040513          	addi	a0,s0,-2048
 800690a:	ffffb097          	auipc	ra,0xffffb
 800690e:	0ee080e7          	jalr	238(ra) # 80019f8 <usart_enable>

    usart_dma_transmit_config(USART0, USART_DENT_ENABLE);
 8006912:	80040513          	addi	a0,s0,-2048
 8006916:	08000593          	li	a1,128
 800691a:	ffffb097          	auipc	ra,0xffffb
 800691e:	128080e7          	jalr	296(ra) # 8001a42 <usart_dma_transmit_config>
    usart_dma_receive_config(USART0, USART_DENR_ENABLE);
 8006922:	80040513          	addi	a0,s0,-2048
 8006926:	04000593          	li	a1,64
 800692a:	ffffb097          	auipc	ra,0xffffb
 800692e:	10c080e7          	jalr	268(ra) # 8001a36 <usart_dma_receive_config>

   

    dma_deinit(DMA0, DMA_CH4);
 8006932:	4591                	li	a1,4
 8006934:	40020537          	lui	a0,0x40020
 8006938:	ffffa097          	auipc	ra,0xffffa
 800693c:	3aa080e7          	jalr	938(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 8006940:	200007b7          	lui	a5,0x20000
 8006944:	56c78793          	addi	a5,a5,1388 # 2000056c <rx_dma_buffer>
 8006948:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 800694a:	40000793          	li	a5,1024
 800694e:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006950:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006952:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006954:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006956:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800695a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800695e:	4591                	li	a1,4
 8006960:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006964:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006968:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 800696a:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 800696c:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 800696e:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006972:	ffffa097          	auipc	ra,0xffffa
 8006976:	3b4080e7          	jalr	948(ra) # 8000d26 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH4);
 800697a:	4591                	li	a1,4
 800697c:	40020537          	lui	a0,0x40020
 8006980:	ffffa097          	auipc	ra,0xffffa
 8006984:	432080e7          	jalr	1074(ra) # 8000db2 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH4);
 8006988:	4591                	li	a1,4
 800698a:	40020537          	lui	a0,0x40020
 800698e:	ffffa097          	auipc	ra,0xffffa
 8006992:	44a080e7          	jalr	1098(ra) # 8000dd8 <dma_channel_enable>
}
 8006996:	50b2                	lw	ra,44(sp)
 8006998:	5422                	lw	s0,40(sp)
 800699a:	6145                	addi	sp,sp,48
 800699c:	8082                	ret

0800699e <lio_send_bt>:
        return i;
    }
    return 0;
}

size_t lio_send_bt(char* message, uint32_t size){
 800699e:	7179                	addi	sp,sp,-48
 80069a0:	d422                	sw	s0,40(sp)
 80069a2:	20001437          	lui	s0,0x20001
 80069a6:	d226                	sw	s1,36(sp)
 80069a8:	d606                	sw	ra,44(sp)
 80069aa:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 80069ac:	4781                	li	a5,0
 80069ae:	96c40413          	addi	s0,s0,-1684 # 2000096c <tx_dma_buffer>
 80069b2:	40000713          	li	a4,1024
 80069b6:	00978463          	beq	a5,s1,80069be <lio_send_bt+0x20>
 80069ba:	06e79663          	bne	a5,a4,8006a26 <lio_send_bt+0x88>
        tx_dma_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH3);
 80069be:	458d                	li	a1,3
 80069c0:	40020537          	lui	a0,0x40020
 80069c4:	ffffa097          	auipc	ra,0xffffa
 80069c8:	31e080e7          	jalr	798(ra) # 8000ce2 <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 80069cc:	400147b7          	lui	a5,0x40014
 80069d0:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 80069d4:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 80069d6:	678d                	lui	a5,0x3
 80069d8:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 80069da:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069de:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 80069e0:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069e4:	458d                	li	a1,3
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 80069e6:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069e8:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 80069ec:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
 80069f0:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 80069f2:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 80069f4:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 80069f6:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80069f8:	ffffa097          	auipc	ra,0xffffa
 80069fc:	32e080e7          	jalr	814(ra) # 8000d26 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH3);
 8006a00:	458d                	li	a1,3
 8006a02:	40020537          	lui	a0,0x40020
 8006a06:	ffffa097          	auipc	ra,0xffffa
 8006a0a:	3ac080e7          	jalr	940(ra) # 8000db2 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH3);
 8006a0e:	40020537          	lui	a0,0x40020
 8006a12:	458d                	li	a1,3
 8006a14:	ffffa097          	auipc	ra,0xffffa
 8006a18:	3c4080e7          	jalr	964(ra) # 8000dd8 <dma_channel_enable>
}
 8006a1c:	50b2                	lw	ra,44(sp)
 8006a1e:	5422                	lw	s0,40(sp)
 8006a20:	5492                	lw	s1,36(sp)
 8006a22:	6145                	addi	sp,sp,48
 8006a24:	8082                	ret
        tx_dma_buffer[i] = message[i];
 8006a26:	00f506b3          	add	a3,a0,a5
 8006a2a:	0006c603          	lbu	a2,0(a3)
 8006a2e:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 8006a32:	0785                	addi	a5,a5,1
        tx_dma_buffer[i] = message[i];
 8006a34:	00c68023          	sb	a2,0(a3)
 8006a38:	bfbd                	j	80069b6 <lio_send_bt+0x18>

08006a3a <get_state>:

static int current_state = RUNNING;

int get_state(){
    return current_state;
};
 8006a3a:	200007b7          	lui	a5,0x20000
 8006a3e:	54c7a503          	lw	a0,1356(a5) # 2000054c <current_state>
 8006a42:	8082                	ret

08006a44 <set_state>:

void set_state(int state){
    current_state = state;
 8006a44:	200007b7          	lui	a5,0x20000
 8006a48:	54a7a623          	sw	a0,1356(a5) # 2000054c <current_state>
}
 8006a4c:	8082                	ret
	...

08006a80 <trap_entry>:
trap_entry:
  // Allocate the stack space
 // addi sp, sp, -19*REGBYTES

  // Save the caller saving registers (context)
  SAVE_CONTEXT
 8006a80:	715d                	addi	sp,sp,-80
 8006a82:	c006                	sw	ra,0(sp)
 8006a84:	c212                	sw	tp,4(sp)
 8006a86:	c416                	sw	t0,8(sp)
 8006a88:	c61a                	sw	t1,12(sp)
 8006a8a:	c81e                	sw	t2,16(sp)
 8006a8c:	ca2a                	sw	a0,20(sp)
 8006a8e:	cc2e                	sw	a1,24(sp)
 8006a90:	ce32                	sw	a2,28(sp)
 8006a92:	d036                	sw	a3,32(sp)
 8006a94:	d23a                	sw	a4,36(sp)
 8006a96:	d43e                	sw	a5,40(sp)
 8006a98:	d642                	sw	a6,44(sp)
 8006a9a:	d846                	sw	a7,48(sp)
 8006a9c:	da72                	sw	t3,52(sp)
 8006a9e:	dc76                	sw	t4,56(sp)
 8006aa0:	de7a                	sw	t5,60(sp)
 8006aa2:	c0fe                	sw	t6,64(sp)
  // Save the MEPC/Mstatus/Msubm reg
  SAVE_EPC_STATUS
 8006aa4:	341022f3          	csrr	t0,mepc
 8006aa8:	c096                	sw	t0,64(sp)
 8006aaa:	300022f3          	csrr	t0,mstatus
 8006aae:	c296                	sw	t0,68(sp)
 8006ab0:	7c4022f3          	csrr	t0,0x7c4
 8006ab4:	c496                	sw	t0,72(sp)

     // Set the function argument
  csrr a0, mcause
 8006ab6:	34202573          	csrr	a0,mcause
  mv a1, sp
 8006aba:	858a                	mv	a1,sp
     // Call the function
  call handle_trap
 8006abc:	ffffb097          	auipc	ra,0xffffb
 8006ac0:	416080e7          	jalr	1046(ra) # 8001ed2 <handle_trap>

  // Restore the MEPC/Mstatus/Msubm reg
  RESTORE_EPC_STATUS
 8006ac4:	4286                	lw	t0,64(sp)
 8006ac6:	34129073          	csrw	mepc,t0
 8006aca:	4296                	lw	t0,68(sp)
 8006acc:	30029073          	csrw	mstatus,t0
 8006ad0:	42a6                	lw	t0,72(sp)
 8006ad2:	7c429073          	csrw	0x7c4,t0
  // Restore the caller saving registers (context)
  RESTORE_CONTEXT
 8006ad6:	4082                	lw	ra,0(sp)
 8006ad8:	4212                	lw	tp,4(sp)
 8006ada:	42a2                	lw	t0,8(sp)
 8006adc:	4332                	lw	t1,12(sp)
 8006ade:	43c2                	lw	t2,16(sp)
 8006ae0:	4552                	lw	a0,20(sp)
 8006ae2:	45e2                	lw	a1,24(sp)
 8006ae4:	4672                	lw	a2,28(sp)
 8006ae6:	5682                	lw	a3,32(sp)
 8006ae8:	5712                	lw	a4,36(sp)
 8006aea:	57a2                	lw	a5,40(sp)
 8006aec:	5832                	lw	a6,44(sp)
 8006aee:	58c2                	lw	a7,48(sp)
 8006af0:	5e52                	lw	t3,52(sp)
 8006af2:	5ee2                	lw	t4,56(sp)
 8006af4:	5f72                	lw	t5,60(sp)
 8006af6:	4f86                	lw	t6,64(sp)
 8006af8:	6161                	addi	sp,sp,80

  // De-allocate the stack space
 // addi sp, sp, 19*REGBYTES
  // Return to regular code
  mret
 8006afa:	30200073          	mret
 8006afe:	0000                	unimp
 8006b00:	0000                	unimp
	...

08006b04 <irq_entry>:
  csrrw 
  sp, mscratch, 
  sp

  #endif
  SAVE_CONTEXT// Save 16 regs
 8006b04:	715d                	addi	sp,sp,-80
 8006b06:	c006                	sw	ra,0(sp)
 8006b08:	c212                	sw	tp,4(sp)
 8006b0a:	c416                	sw	t0,8(sp)
 8006b0c:	c61a                	sw	t1,12(sp)
 8006b0e:	c81e                	sw	t2,16(sp)
 8006b10:	ca2a                	sw	a0,20(sp)
 8006b12:	cc2e                	sw	a1,24(sp)
 8006b14:	ce32                	sw	a2,28(sp)
 8006b16:	d036                	sw	a3,32(sp)
 8006b18:	d23a                	sw	a4,36(sp)
 8006b1a:	d43e                	sw	a5,40(sp)
 8006b1c:	d642                	sw	a6,44(sp)
 8006b1e:	d846                	sw	a7,48(sp)
 8006b20:	da72                	sw	t3,52(sp)
 8006b22:	dc76                	sw	t4,56(sp)
 8006b24:	de7a                	sw	t5,60(sp)
 8006b26:	c0fe                	sw	t6,64(sp)

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 8006b28:	7ee8d073          	csrwi	0x7ee,17
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 8006b2c:	7ef95073          	csrwi	0x7ef,18
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 8006b30:	7eb9d073          	csrwi	0x7eb,19

08006b34 <service_loop>:
 
service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register 
  csrrw ra, CSR_JALMNXTI, ra 
 8006b34:	7ed090f3          	csrrw	ra,0x7ed,ra
  
  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts 
 8006b38:	30047073          	csrci	mstatus,8

  LOAD x5,  19*REGBYTES(sp)
 8006b3c:	42b6                	lw	t0,76(sp)
  csrw CSR_MSUBM, x5  
 8006b3e:	7c429073          	csrw	0x7c4,t0
  LOAD x5,  18*REGBYTES(sp)
 8006b42:	42a6                	lw	t0,72(sp)
  csrw CSR_MEPC, x5  
 8006b44:	34129073          	csrw	mepc,t0
  LOAD x5,  17*REGBYTES(sp)
 8006b48:	4296                	lw	t0,68(sp)
  csrw CSR_MCAUSE, x5  
 8006b4a:	34229073          	csrw	mcause,t0


  RESTORE_CONTEXT
 8006b4e:	4082                	lw	ra,0(sp)
 8006b50:	4212                	lw	tp,4(sp)
 8006b52:	42a2                	lw	t0,8(sp)
 8006b54:	4332                	lw	t1,12(sp)
 8006b56:	43c2                	lw	t2,16(sp)
 8006b58:	4552                	lw	a0,20(sp)
 8006b5a:	45e2                	lw	a1,24(sp)
 8006b5c:	4672                	lw	a2,28(sp)
 8006b5e:	5682                	lw	a3,32(sp)
 8006b60:	5712                	lw	a4,36(sp)
 8006b62:	57a2                	lw	a5,40(sp)
 8006b64:	5832                	lw	a6,44(sp)
 8006b66:	58c2                	lw	a7,48(sp)
 8006b68:	5e52                	lw	t3,52(sp)
 8006b6a:	5ee2                	lw	t4,56(sp)
 8006b6c:	5f72                	lw	t5,60(sp)
 8006b6e:	4f86                	lw	t6,64(sp)
 8006b70:	6161                	addi	sp,sp,80
  sp
  
  #endif
  
  // Return to regular code
  mret
 8006b72:	30200073          	mret

08006b76 <__divdf3>:
 8006b76:	7179                	addi	sp,sp,-48
 8006b78:	0145d813          	srli	a6,a1,0x14
 8006b7c:	d226                	sw	s1,36(sp)
 8006b7e:	ce4e                	sw	s3,28(sp)
 8006b80:	cc52                	sw	s4,24(sp)
 8006b82:	c85a                	sw	s6,16(sp)
 8006b84:	c65e                	sw	s7,12(sp)
 8006b86:	00c59493          	slli	s1,a1,0xc
 8006b8a:	d606                	sw	ra,44(sp)
 8006b8c:	d422                	sw	s0,40(sp)
 8006b8e:	d04a                	sw	s2,32(sp)
 8006b90:	ca56                	sw	s5,20(sp)
 8006b92:	7ff87813          	andi	a6,a6,2047
 8006b96:	8b2a                	mv	s6,a0
 8006b98:	8bb2                	mv	s7,a2
 8006b9a:	8a36                	mv	s4,a3
 8006b9c:	80b1                	srli	s1,s1,0xc
 8006b9e:	01f5d993          	srli	s3,a1,0x1f
 8006ba2:	08080463          	beqz	a6,8006c2a <__divdf3+0xb4>
 8006ba6:	7ff00793          	li	a5,2047
 8006baa:	0cf80e63          	beq	a6,a5,8006c86 <__divdf3+0x110>
 8006bae:	01d55a93          	srli	s5,a0,0x1d
 8006bb2:	048e                	slli	s1,s1,0x3
 8006bb4:	009ae4b3          	or	s1,s5,s1
 8006bb8:	00800ab7          	lui	s5,0x800
 8006bbc:	0154eab3          	or	s5,s1,s5
 8006bc0:	00351413          	slli	s0,a0,0x3
 8006bc4:	c0180913          	addi	s2,a6,-1023
 8006bc8:	4b01                	li	s6,0
 8006bca:	014a5513          	srli	a0,s4,0x14
 8006bce:	00ca1493          	slli	s1,s4,0xc
 8006bd2:	7ff57813          	andi	a6,a0,2047
 8006bd6:	80b1                	srli	s1,s1,0xc
 8006bd8:	01fa5a13          	srli	s4,s4,0x1f
 8006bdc:	0c080863          	beqz	a6,8006cac <__divdf3+0x136>
 8006be0:	7ff00793          	li	a5,2047
 8006be4:	12f80163          	beq	a6,a5,8006d06 <__divdf3+0x190>
 8006be8:	00349513          	slli	a0,s1,0x3
 8006bec:	01dbd793          	srli	a5,s7,0x1d
 8006bf0:	8d5d                	or	a0,a0,a5
 8006bf2:	008004b7          	lui	s1,0x800
 8006bf6:	8cc9                	or	s1,s1,a0
 8006bf8:	003b9f13          	slli	t5,s7,0x3
 8006bfc:	c0180513          	addi	a0,a6,-1023
 8006c00:	4781                	li	a5,0
 8006c02:	002b1713          	slli	a4,s6,0x2
 8006c06:	8f5d                	or	a4,a4,a5
 8006c08:	177d                	addi	a4,a4,-1
 8006c0a:	46b9                	li	a3,14
 8006c0c:	0149c633          	xor	a2,s3,s4
 8006c10:	40a90833          	sub	a6,s2,a0
 8006c14:	10e6eb63          	bltu	a3,a4,8006d2a <__divdf3+0x1b4>
 8006c18:	ffffa697          	auipc	a3,0xffffa
 8006c1c:	86068693          	addi	a3,a3,-1952 # 8000478 <_std_dev_req+0xe8>
 8006c20:	070a                	slli	a4,a4,0x2
 8006c22:	9736                	add	a4,a4,a3
 8006c24:	4318                	lw	a4,0(a4)
 8006c26:	9736                	add	a4,a4,a3
 8006c28:	8702                	jr	a4
 8006c2a:	00a4eab3          	or	s5,s1,a0
 8006c2e:	060a8663          	beqz	s5,8006c9a <__divdf3+0x124>
 8006c32:	cc8d                	beqz	s1,8006c6c <__divdf3+0xf6>
 8006c34:	8526                	mv	a0,s1
 8006c36:	00001097          	auipc	ra,0x1
 8006c3a:	c5a080e7          	jalr	-934(ra) # 8007890 <__clzsi2>
 8006c3e:	ff550793          	addi	a5,a0,-11 # 4001fff5 <_sp+0x20017ff5>
 8006c42:	4771                	li	a4,28
 8006c44:	02f74b63          	blt	a4,a5,8006c7a <__divdf3+0x104>
 8006c48:	4af5                	li	s5,29
 8006c4a:	ff850413          	addi	s0,a0,-8
 8006c4e:	40fa8ab3          	sub	s5,s5,a5
 8006c52:	008494b3          	sll	s1,s1,s0
 8006c56:	015b5ab3          	srl	s5,s6,s5
 8006c5a:	009aeab3          	or	s5,s5,s1
 8006c5e:	008b1433          	sll	s0,s6,s0
 8006c62:	c0d00813          	li	a6,-1011
 8006c66:	40a80933          	sub	s2,a6,a0
 8006c6a:	bfb9                	j	8006bc8 <__divdf3+0x52>
 8006c6c:	00001097          	auipc	ra,0x1
 8006c70:	c24080e7          	jalr	-988(ra) # 8007890 <__clzsi2>
 8006c74:	02050513          	addi	a0,a0,32
 8006c78:	b7d9                	j	8006c3e <__divdf3+0xc8>
 8006c7a:	fd850493          	addi	s1,a0,-40
 8006c7e:	009b1ab3          	sll	s5,s6,s1
 8006c82:	4401                	li	s0,0
 8006c84:	bff9                	j	8006c62 <__divdf3+0xec>
 8006c86:	00a4eab3          	or	s5,s1,a0
 8006c8a:	000a8c63          	beqz	s5,8006ca2 <__divdf3+0x12c>
 8006c8e:	842a                	mv	s0,a0
 8006c90:	8aa6                	mv	s5,s1
 8006c92:	7ff00913          	li	s2,2047
 8006c96:	4b0d                	li	s6,3
 8006c98:	bf0d                	j	8006bca <__divdf3+0x54>
 8006c9a:	4401                	li	s0,0
 8006c9c:	4901                	li	s2,0
 8006c9e:	4b05                	li	s6,1
 8006ca0:	b72d                	j	8006bca <__divdf3+0x54>
 8006ca2:	4401                	li	s0,0
 8006ca4:	7ff00913          	li	s2,2047
 8006ca8:	4b09                	li	s6,2
 8006caa:	b705                	j	8006bca <__divdf3+0x54>
 8006cac:	0174ef33          	or	t5,s1,s7
 8006cb0:	060f0463          	beqz	t5,8006d18 <__divdf3+0x1a2>
 8006cb4:	c89d                	beqz	s1,8006cea <__divdf3+0x174>
 8006cb6:	8526                	mv	a0,s1
 8006cb8:	00001097          	auipc	ra,0x1
 8006cbc:	bd8080e7          	jalr	-1064(ra) # 8007890 <__clzsi2>
 8006cc0:	ff550793          	addi	a5,a0,-11
 8006cc4:	4771                	li	a4,28
 8006cc6:	02f74a63          	blt	a4,a5,8006cfa <__divdf3+0x184>
 8006cca:	4775                	li	a4,29
 8006ccc:	ff850f13          	addi	t5,a0,-8
 8006cd0:	8f1d                	sub	a4,a4,a5
 8006cd2:	01e494b3          	sll	s1,s1,t5
 8006cd6:	00ebd733          	srl	a4,s7,a4
 8006cda:	8cd9                	or	s1,s1,a4
 8006cdc:	01eb9f33          	sll	t5,s7,t5
 8006ce0:	c0d00613          	li	a2,-1011
 8006ce4:	40a60533          	sub	a0,a2,a0
 8006ce8:	bf21                	j	8006c00 <__divdf3+0x8a>
 8006cea:	855e                	mv	a0,s7
 8006cec:	00001097          	auipc	ra,0x1
 8006cf0:	ba4080e7          	jalr	-1116(ra) # 8007890 <__clzsi2>
 8006cf4:	02050513          	addi	a0,a0,32
 8006cf8:	b7e1                	j	8006cc0 <__divdf3+0x14a>
 8006cfa:	fd850493          	addi	s1,a0,-40
 8006cfe:	009b94b3          	sll	s1,s7,s1
 8006d02:	4f01                	li	t5,0
 8006d04:	bff1                	j	8006ce0 <__divdf3+0x16a>
 8006d06:	0174ef33          	or	t5,s1,s7
 8006d0a:	000f0b63          	beqz	t5,8006d20 <__divdf3+0x1aa>
 8006d0e:	8f5e                	mv	t5,s7
 8006d10:	7ff00513          	li	a0,2047
 8006d14:	478d                	li	a5,3
 8006d16:	b5f5                	j	8006c02 <__divdf3+0x8c>
 8006d18:	4481                	li	s1,0
 8006d1a:	4501                	li	a0,0
 8006d1c:	4785                	li	a5,1
 8006d1e:	b5d5                	j	8006c02 <__divdf3+0x8c>
 8006d20:	4481                	li	s1,0
 8006d22:	7ff00513          	li	a0,2047
 8006d26:	4789                	li	a5,2
 8006d28:	bde9                	j	8006c02 <__divdf3+0x8c>
 8006d2a:	0154e663          	bltu	s1,s5,8006d36 <__divdf3+0x1c0>
 8006d2e:	2a9a9363          	bne	s5,s1,8006fd4 <__divdf3+0x45e>
 8006d32:	2be46163          	bltu	s0,t5,8006fd4 <__divdf3+0x45e>
 8006d36:	01fa9693          	slli	a3,s5,0x1f
 8006d3a:	00145713          	srli	a4,s0,0x1
 8006d3e:	01f41793          	slli	a5,s0,0x1f
 8006d42:	001ada93          	srli	s5,s5,0x1
 8006d46:	00e6e433          	or	s0,a3,a4
 8006d4a:	00849513          	slli	a0,s1,0x8
 8006d4e:	018f5493          	srli	s1,t5,0x18
 8006d52:	8d45                	or	a0,a0,s1
 8006d54:	01055e13          	srli	t3,a0,0x10
 8006d58:	03cad8b3          	divu	a7,s5,t3
 8006d5c:	01051313          	slli	t1,a0,0x10
 8006d60:	01035313          	srli	t1,t1,0x10
 8006d64:	01045713          	srli	a4,s0,0x10
 8006d68:	008f1593          	slli	a1,t5,0x8
 8006d6c:	03caf4b3          	remu	s1,s5,t3
 8006d70:	8fc6                	mv	t6,a7
 8006d72:	031306b3          	mul	a3,t1,a7
 8006d76:	01049a93          	slli	s5,s1,0x10
 8006d7a:	01576733          	or	a4,a4,s5
 8006d7e:	00d77c63          	bgeu	a4,a3,8006d96 <__divdf3+0x220>
 8006d82:	972a                	add	a4,a4,a0
 8006d84:	fff88f93          	addi	t6,a7,-1
 8006d88:	00a76763          	bltu	a4,a0,8006d96 <__divdf3+0x220>
 8006d8c:	00d77563          	bgeu	a4,a3,8006d96 <__divdf3+0x220>
 8006d90:	ffe88f93          	addi	t6,a7,-2
 8006d94:	972a                	add	a4,a4,a0
 8006d96:	8f15                	sub	a4,a4,a3
 8006d98:	03c75eb3          	divu	t4,a4,t3
 8006d9c:	0442                	slli	s0,s0,0x10
 8006d9e:	8041                	srli	s0,s0,0x10
 8006da0:	03c77733          	remu	a4,a4,t3
 8006da4:	86f6                	mv	a3,t4
 8006da6:	03d308b3          	mul	a7,t1,t4
 8006daa:	0742                	slli	a4,a4,0x10
 8006dac:	8f41                	or	a4,a4,s0
 8006dae:	01177c63          	bgeu	a4,a7,8006dc6 <__divdf3+0x250>
 8006db2:	972a                	add	a4,a4,a0
 8006db4:	fffe8693          	addi	a3,t4,-1
 8006db8:	00a76763          	bltu	a4,a0,8006dc6 <__divdf3+0x250>
 8006dbc:	01177563          	bgeu	a4,a7,8006dc6 <__divdf3+0x250>
 8006dc0:	ffee8693          	addi	a3,t4,-2
 8006dc4:	972a                	add	a4,a4,a0
 8006dc6:	0fc2                	slli	t6,t6,0x10
 8006dc8:	00dfefb3          	or	t6,t6,a3
 8006dcc:	66c1                	lui	a3,0x10
 8006dce:	41170433          	sub	s0,a4,a7
 8006dd2:	fff68893          	addi	a7,a3,-1 # ffff <__stack_size+0xefff>
 8006dd6:	010fdf13          	srli	t5,t6,0x10
 8006dda:	011ff733          	and	a4,t6,a7
 8006dde:	0105de93          	srli	t4,a1,0x10
 8006de2:	0115f8b3          	and	a7,a1,a7
 8006de6:	031703b3          	mul	t2,a4,a7
 8006dea:	031f04b3          	mul	s1,t5,a7
 8006dee:	02ee8733          	mul	a4,t4,a4
 8006df2:	03df02b3          	mul	t0,t5,t4
 8006df6:	00970f33          	add	t5,a4,s1
 8006dfa:	0103d713          	srli	a4,t2,0x10
 8006dfe:	977a                	add	a4,a4,t5
 8006e00:	00977363          	bgeu	a4,s1,8006e06 <__divdf3+0x290>
 8006e04:	92b6                	add	t0,t0,a3
 8006e06:	01075f13          	srli	t5,a4,0x10
 8006e0a:	9f16                	add	t5,t5,t0
 8006e0c:	62c1                	lui	t0,0x10
 8006e0e:	12fd                	addi	t0,t0,-1
 8006e10:	005776b3          	and	a3,a4,t0
 8006e14:	06c2                	slli	a3,a3,0x10
 8006e16:	0053f3b3          	and	t2,t2,t0
 8006e1a:	969e                	add	a3,a3,t2
 8006e1c:	01e46763          	bltu	s0,t5,8006e2a <__divdf3+0x2b4>
 8006e20:	84fe                	mv	s1,t6
 8006e22:	03e41e63          	bne	s0,t5,8006e5e <__divdf3+0x2e8>
 8006e26:	02d7fc63          	bgeu	a5,a3,8006e5e <__divdf3+0x2e8>
 8006e2a:	97ae                	add	a5,a5,a1
 8006e2c:	00b7b733          	sltu	a4,a5,a1
 8006e30:	972a                	add	a4,a4,a0
 8006e32:	943a                	add	s0,s0,a4
 8006e34:	ffff8493          	addi	s1,t6,-1
 8006e38:	00856663          	bltu	a0,s0,8006e44 <__divdf3+0x2ce>
 8006e3c:	02851163          	bne	a0,s0,8006e5e <__divdf3+0x2e8>
 8006e40:	00b7ef63          	bltu	a5,a1,8006e5e <__divdf3+0x2e8>
 8006e44:	01e46663          	bltu	s0,t5,8006e50 <__divdf3+0x2da>
 8006e48:	008f1b63          	bne	t5,s0,8006e5e <__divdf3+0x2e8>
 8006e4c:	00d7f963          	bgeu	a5,a3,8006e5e <__divdf3+0x2e8>
 8006e50:	97ae                	add	a5,a5,a1
 8006e52:	00b7b733          	sltu	a4,a5,a1
 8006e56:	972a                	add	a4,a4,a0
 8006e58:	ffef8493          	addi	s1,t6,-2
 8006e5c:	943a                	add	s0,s0,a4
 8006e5e:	40d786b3          	sub	a3,a5,a3
 8006e62:	41e40433          	sub	s0,s0,t5
 8006e66:	00d7b7b3          	sltu	a5,a5,a3
 8006e6a:	8c1d                	sub	s0,s0,a5
 8006e6c:	5f7d                	li	t5,-1
 8006e6e:	0e850563          	beq	a0,s0,8006f58 <__divdf3+0x3e2>
 8006e72:	03c45f33          	divu	t5,s0,t3
 8006e76:	0106d713          	srli	a4,a3,0x10
 8006e7a:	03c47433          	remu	s0,s0,t3
 8006e7e:	03e307b3          	mul	a5,t1,t5
 8006e82:	0442                	slli	s0,s0,0x10
 8006e84:	8c59                	or	s0,s0,a4
 8006e86:	877a                	mv	a4,t5
 8006e88:	00f47c63          	bgeu	s0,a5,8006ea0 <__divdf3+0x32a>
 8006e8c:	942a                	add	s0,s0,a0
 8006e8e:	ffff0713          	addi	a4,t5,-1
 8006e92:	00a46763          	bltu	s0,a0,8006ea0 <__divdf3+0x32a>
 8006e96:	00f47563          	bgeu	s0,a5,8006ea0 <__divdf3+0x32a>
 8006e9a:	ffef0713          	addi	a4,t5,-2
 8006e9e:	942a                	add	s0,s0,a0
 8006ea0:	8c1d                	sub	s0,s0,a5
 8006ea2:	03c45f33          	divu	t5,s0,t3
 8006ea6:	06c2                	slli	a3,a3,0x10
 8006ea8:	82c1                	srli	a3,a3,0x10
 8006eaa:	03c47433          	remu	s0,s0,t3
 8006eae:	87fa                	mv	a5,t5
 8006eb0:	03e30333          	mul	t1,t1,t5
 8006eb4:	0442                	slli	s0,s0,0x10
 8006eb6:	8c55                	or	s0,s0,a3
 8006eb8:	00647c63          	bgeu	s0,t1,8006ed0 <__divdf3+0x35a>
 8006ebc:	942a                	add	s0,s0,a0
 8006ebe:	ffff0793          	addi	a5,t5,-1
 8006ec2:	00a46763          	bltu	s0,a0,8006ed0 <__divdf3+0x35a>
 8006ec6:	00647563          	bgeu	s0,t1,8006ed0 <__divdf3+0x35a>
 8006eca:	ffef0793          	addi	a5,t5,-2
 8006ece:	942a                	add	s0,s0,a0
 8006ed0:	0742                	slli	a4,a4,0x10
 8006ed2:	8f5d                	or	a4,a4,a5
 8006ed4:	01071793          	slli	a5,a4,0x10
 8006ed8:	83c1                	srli	a5,a5,0x10
 8006eda:	40640433          	sub	s0,s0,t1
 8006ede:	01075313          	srli	t1,a4,0x10
 8006ee2:	03178e33          	mul	t3,a5,a7
 8006ee6:	031308b3          	mul	a7,t1,a7
 8006eea:	026e8333          	mul	t1,t4,t1
 8006eee:	02fe8eb3          	mul	t4,t4,a5
 8006ef2:	010e5793          	srli	a5,t3,0x10
 8006ef6:	9ec6                	add	t4,t4,a7
 8006ef8:	97f6                	add	a5,a5,t4
 8006efa:	0117f463          	bgeu	a5,a7,8006f02 <__divdf3+0x38c>
 8006efe:	66c1                	lui	a3,0x10
 8006f00:	9336                	add	t1,t1,a3
 8006f02:	0107d893          	srli	a7,a5,0x10
 8006f06:	989a                	add	a7,a7,t1
 8006f08:	6341                	lui	t1,0x10
 8006f0a:	137d                	addi	t1,t1,-1
 8006f0c:	0067f6b3          	and	a3,a5,t1
 8006f10:	06c2                	slli	a3,a3,0x10
 8006f12:	006e7e33          	and	t3,t3,t1
 8006f16:	96f2                	add	a3,a3,t3
 8006f18:	01146663          	bltu	s0,a7,8006f24 <__divdf3+0x3ae>
 8006f1c:	19141e63          	bne	s0,a7,80070b8 <__divdf3+0x542>
 8006f20:	8f3a                	mv	t5,a4
 8006f22:	ca9d                	beqz	a3,8006f58 <__divdf3+0x3e2>
 8006f24:	942a                	add	s0,s0,a0
 8006f26:	fff70f13          	addi	t5,a4,-1
 8006f2a:	02a46163          	bltu	s0,a0,8006f4c <__divdf3+0x3d6>
 8006f2e:	01146663          	bltu	s0,a7,8006f3a <__divdf3+0x3c4>
 8006f32:	19141263          	bne	s0,a7,80070b6 <__divdf3+0x540>
 8006f36:	00d5fd63          	bgeu	a1,a3,8006f50 <__divdf3+0x3da>
 8006f3a:	00159793          	slli	a5,a1,0x1
 8006f3e:	00b7b5b3          	sltu	a1,a5,a1
 8006f42:	952e                	add	a0,a0,a1
 8006f44:	ffe70f13          	addi	t5,a4,-2
 8006f48:	942a                	add	s0,s0,a0
 8006f4a:	85be                	mv	a1,a5
 8006f4c:	01141463          	bne	s0,a7,8006f54 <__divdf3+0x3de>
 8006f50:	00b68463          	beq	a3,a1,8006f58 <__divdf3+0x3e2>
 8006f54:	001f6f13          	ori	t5,t5,1
 8006f58:	3ff80713          	addi	a4,a6,1023
 8006f5c:	0ae05763          	blez	a4,800700a <__divdf3+0x494>
 8006f60:	007f7793          	andi	a5,t5,7
 8006f64:	cf81                	beqz	a5,8006f7c <__divdf3+0x406>
 8006f66:	00ff7793          	andi	a5,t5,15
 8006f6a:	4691                	li	a3,4
 8006f6c:	00d78863          	beq	a5,a3,8006f7c <__divdf3+0x406>
 8006f70:	004f0693          	addi	a3,t5,4
 8006f74:	01e6bf33          	sltu	t5,a3,t5
 8006f78:	94fa                	add	s1,s1,t5
 8006f7a:	8f36                	mv	t5,a3
 8006f7c:	00749793          	slli	a5,s1,0x7
 8006f80:	0007d863          	bgez	a5,8006f90 <__divdf3+0x41a>
 8006f84:	ff0007b7          	lui	a5,0xff000
 8006f88:	17fd                	addi	a5,a5,-1
 8006f8a:	8cfd                	and	s1,s1,a5
 8006f8c:	40080713          	addi	a4,a6,1024
 8006f90:	7fe00793          	li	a5,2046
 8006f94:	10e7c863          	blt	a5,a4,80070a4 <__divdf3+0x52e>
 8006f98:	003f5f13          	srli	t5,t5,0x3
 8006f9c:	01d49793          	slli	a5,s1,0x1d
 8006fa0:	01e7e7b3          	or	a5,a5,t5
 8006fa4:	0034d513          	srli	a0,s1,0x3
 8006fa8:	0532                	slli	a0,a0,0xc
 8006faa:	7ff77713          	andi	a4,a4,2047
 8006fae:	0752                	slli	a4,a4,0x14
 8006fb0:	50b2                	lw	ra,44(sp)
 8006fb2:	5422                	lw	s0,40(sp)
 8006fb4:	8131                	srli	a0,a0,0xc
 8006fb6:	8d59                	or	a0,a0,a4
 8006fb8:	067e                	slli	a2,a2,0x1f
 8006fba:	00c56733          	or	a4,a0,a2
 8006fbe:	5492                	lw	s1,36(sp)
 8006fc0:	5902                	lw	s2,32(sp)
 8006fc2:	49f2                	lw	s3,28(sp)
 8006fc4:	4a62                	lw	s4,24(sp)
 8006fc6:	4ad2                	lw	s5,20(sp)
 8006fc8:	4b42                	lw	s6,16(sp)
 8006fca:	4bb2                	lw	s7,12(sp)
 8006fcc:	853e                	mv	a0,a5
 8006fce:	85ba                	mv	a1,a4
 8006fd0:	6145                	addi	sp,sp,48
 8006fd2:	8082                	ret
 8006fd4:	187d                	addi	a6,a6,-1
 8006fd6:	4781                	li	a5,0
 8006fd8:	bb8d                	j	8006d4a <__divdf3+0x1d4>
 8006fda:	864e                	mv	a2,s3
 8006fdc:	84d6                	mv	s1,s5
 8006fde:	8f22                	mv	t5,s0
 8006fe0:	87da                	mv	a5,s6
 8006fe2:	4709                	li	a4,2
 8006fe4:	0ce78063          	beq	a5,a4,80070a4 <__divdf3+0x52e>
 8006fe8:	470d                	li	a4,3
 8006fea:	0ae78663          	beq	a5,a4,8007096 <__divdf3+0x520>
 8006fee:	4705                	li	a4,1
 8006ff0:	f6e794e3          	bne	a5,a4,8006f58 <__divdf3+0x3e2>
 8006ff4:	4501                	li	a0,0
 8006ff6:	4781                	li	a5,0
 8006ff8:	a885                	j	8007068 <__divdf3+0x4f2>
 8006ffa:	8652                	mv	a2,s4
 8006ffc:	b7dd                	j	8006fe2 <__divdf3+0x46c>
 8006ffe:	000804b7          	lui	s1,0x80
 8007002:	4f01                	li	t5,0
 8007004:	4601                	li	a2,0
 8007006:	478d                	li	a5,3
 8007008:	bfe9                	j	8006fe2 <__divdf3+0x46c>
 800700a:	4505                	li	a0,1
 800700c:	8d19                	sub	a0,a0,a4
 800700e:	03800793          	li	a5,56
 8007012:	fea7c1e3          	blt	a5,a0,8006ff4 <__divdf3+0x47e>
 8007016:	47fd                	li	a5,31
 8007018:	04a7ca63          	blt	a5,a0,800706c <__divdf3+0x4f6>
 800701c:	41e80813          	addi	a6,a6,1054
 8007020:	010497b3          	sll	a5,s1,a6
 8007024:	00af5733          	srl	a4,t5,a0
 8007028:	010f1833          	sll	a6,t5,a6
 800702c:	8fd9                	or	a5,a5,a4
 800702e:	01003833          	snez	a6,a6
 8007032:	0107e7b3          	or	a5,a5,a6
 8007036:	00a4d533          	srl	a0,s1,a0
 800703a:	0077f713          	andi	a4,a5,7
 800703e:	cf01                	beqz	a4,8007056 <__divdf3+0x4e0>
 8007040:	00f7f713          	andi	a4,a5,15
 8007044:	4691                	li	a3,4
 8007046:	00d70863          	beq	a4,a3,8007056 <__divdf3+0x4e0>
 800704a:	00478713          	addi	a4,a5,4 # ff000004 <_sp+0xdeff8004>
 800704e:	00f737b3          	sltu	a5,a4,a5
 8007052:	953e                	add	a0,a0,a5
 8007054:	87ba                	mv	a5,a4
 8007056:	00851713          	slli	a4,a0,0x8
 800705a:	04074a63          	bltz	a4,80070ae <__divdf3+0x538>
 800705e:	01d51713          	slli	a4,a0,0x1d
 8007062:	838d                	srli	a5,a5,0x3
 8007064:	8fd9                	or	a5,a5,a4
 8007066:	810d                	srli	a0,a0,0x3
 8007068:	4701                	li	a4,0
 800706a:	bf3d                	j	8006fa8 <__divdf3+0x432>
 800706c:	5785                	li	a5,-31
 800706e:	8f99                	sub	a5,a5,a4
 8007070:	02000693          	li	a3,32
 8007074:	00f4d7b3          	srl	a5,s1,a5
 8007078:	4701                	li	a4,0
 800707a:	00d50663          	beq	a0,a3,8007086 <__divdf3+0x510>
 800707e:	43e80813          	addi	a6,a6,1086
 8007082:	01049733          	sll	a4,s1,a6
 8007086:	01e76f33          	or	t5,a4,t5
 800708a:	01e03f33          	snez	t5,t5
 800708e:	01e7e7b3          	or	a5,a5,t5
 8007092:	4501                	li	a0,0
 8007094:	b75d                	j	800703a <__divdf3+0x4c4>
 8007096:	00080537          	lui	a0,0x80
 800709a:	4781                	li	a5,0
 800709c:	7ff00713          	li	a4,2047
 80070a0:	4601                	li	a2,0
 80070a2:	b719                	j	8006fa8 <__divdf3+0x432>
 80070a4:	4501                	li	a0,0
 80070a6:	4781                	li	a5,0
 80070a8:	7ff00713          	li	a4,2047
 80070ac:	bdf5                	j	8006fa8 <__divdf3+0x432>
 80070ae:	4501                	li	a0,0
 80070b0:	4781                	li	a5,0
 80070b2:	4705                	li	a4,1
 80070b4:	bdd5                	j	8006fa8 <__divdf3+0x432>
 80070b6:	877a                	mv	a4,t5
 80070b8:	8f3a                	mv	t5,a4
 80070ba:	bd69                	j	8006f54 <__divdf3+0x3de>

080070bc <__ledf2>:
 80070bc:	0145d813          	srli	a6,a1,0x14
 80070c0:	001007b7          	lui	a5,0x100
 80070c4:	17fd                	addi	a5,a5,-1
 80070c6:	0146d713          	srli	a4,a3,0x14
 80070ca:	7ff87813          	andi	a6,a6,2047
 80070ce:	7ff00e93          	li	t4,2047
 80070d2:	00b7f8b3          	and	a7,a5,a1
 80070d6:	832a                	mv	t1,a0
 80070d8:	8ff5                	and	a5,a5,a3
 80070da:	81fd                	srli	a1,a1,0x1f
 80070dc:	8e32                	mv	t3,a2
 80070de:	7ff77713          	andi	a4,a4,2047
 80070e2:	82fd                	srli	a3,a3,0x1f
 80070e4:	01d81863          	bne	a6,t4,80070f4 <__ledf2+0x38>
 80070e8:	00a8eeb3          	or	t4,a7,a0
 80070ec:	060e8563          	beqz	t4,8007156 <__ledf2+0x9a>
 80070f0:	4589                	li	a1,2
 80070f2:	a80d                	j	8007124 <__ledf2+0x68>
 80070f4:	01d71663          	bne	a4,t4,8007100 <__ledf2+0x44>
 80070f8:	00c7eeb3          	or	t4,a5,a2
 80070fc:	fe0e9ae3          	bnez	t4,80070f0 <__ledf2+0x34>
 8007100:	04081d63          	bnez	a6,800715a <__ledf2+0x9e>
 8007104:	00a8e533          	or	a0,a7,a0
 8007108:	00153513          	seqz	a0,a0
 800710c:	e319                	bnez	a4,8007112 <__ledf2+0x56>
 800710e:	8e5d                	or	a2,a2,a5
 8007110:	ce15                	beqz	a2,800714c <__ledf2+0x90>
 8007112:	e511                	bnez	a0,800711e <__ledf2+0x62>
 8007114:	00d58a63          	beq	a1,a3,8007128 <__ledf2+0x6c>
 8007118:	c985                	beqz	a1,8007148 <__ledf2+0x8c>
 800711a:	55fd                	li	a1,-1
 800711c:	a021                	j	8007124 <__ledf2+0x68>
 800711e:	55fd                	li	a1,-1
 8007120:	c291                	beqz	a3,8007124 <__ledf2+0x68>
 8007122:	85b6                	mv	a1,a3
 8007124:	852e                	mv	a0,a1
 8007126:	8082                	ret
 8007128:	ff0748e3          	blt	a4,a6,8007118 <__ledf2+0x5c>
 800712c:	00e85463          	bge	a6,a4,8007134 <__ledf2+0x78>
 8007130:	f9f5                	bnez	a1,8007124 <__ledf2+0x68>
 8007132:	b7e5                	j	800711a <__ledf2+0x5e>
 8007134:	ff17e2e3          	bltu	a5,a7,8007118 <__ledf2+0x5c>
 8007138:	00f89c63          	bne	a7,a5,8007150 <__ledf2+0x94>
 800713c:	fc6e6ee3          	bltu	t3,t1,8007118 <__ledf2+0x5c>
 8007140:	ffc368e3          	bltu	t1,t3,8007130 <__ledf2+0x74>
 8007144:	4581                	li	a1,0
 8007146:	bff9                	j	8007124 <__ledf2+0x68>
 8007148:	4585                	li	a1,1
 800714a:	bfe9                	j	8007124 <__ledf2+0x68>
 800714c:	fd65                	bnez	a0,8007144 <__ledf2+0x88>
 800714e:	b7e9                	j	8007118 <__ledf2+0x5c>
 8007150:	fef8e0e3          	bltu	a7,a5,8007130 <__ledf2+0x74>
 8007154:	bfc5                	j	8007144 <__ledf2+0x88>
 8007156:	fb0701e3          	beq	a4,a6,80070f8 <__ledf2+0x3c>
 800715a:	ff4d                	bnez	a4,8007114 <__ledf2+0x58>
 800715c:	4501                	li	a0,0
 800715e:	bf45                	j	800710e <__ledf2+0x52>

08007160 <__muldf3>:
 8007160:	7179                	addi	sp,sp,-48
 8007162:	ce4e                	sw	s3,28(sp)
 8007164:	0145d993          	srli	s3,a1,0x14
 8007168:	d422                	sw	s0,40(sp)
 800716a:	d226                	sw	s1,36(sp)
 800716c:	cc52                	sw	s4,24(sp)
 800716e:	ca56                	sw	s5,20(sp)
 8007170:	c85a                	sw	s6,16(sp)
 8007172:	00c59493          	slli	s1,a1,0xc
 8007176:	d606                	sw	ra,44(sp)
 8007178:	d04a                	sw	s2,32(sp)
 800717a:	c65e                	sw	s7,12(sp)
 800717c:	7ff9f993          	andi	s3,s3,2047
 8007180:	842a                	mv	s0,a0
 8007182:	8b32                	mv	s6,a2
 8007184:	8ab6                	mv	s5,a3
 8007186:	80b1                	srli	s1,s1,0xc
 8007188:	01f5da13          	srli	s4,a1,0x1f
 800718c:	08098163          	beqz	s3,800720e <__muldf3+0xae>
 8007190:	7ff00793          	li	a5,2047
 8007194:	0cf98963          	beq	s3,a5,8007266 <__muldf3+0x106>
 8007198:	01d55793          	srli	a5,a0,0x1d
 800719c:	048e                	slli	s1,s1,0x3
 800719e:	8cdd                	or	s1,s1,a5
 80071a0:	008007b7          	lui	a5,0x800
 80071a4:	8cdd                	or	s1,s1,a5
 80071a6:	00351913          	slli	s2,a0,0x3
 80071aa:	c0198993          	addi	s3,s3,-1023
 80071ae:	4b81                	li	s7,0
 80071b0:	014ad513          	srli	a0,s5,0x14
 80071b4:	00ca9413          	slli	s0,s5,0xc
 80071b8:	7ff57513          	andi	a0,a0,2047
 80071bc:	8031                	srli	s0,s0,0xc
 80071be:	01fada93          	srli	s5,s5,0x1f
 80071c2:	c561                	beqz	a0,800728a <__muldf3+0x12a>
 80071c4:	7ff00793          	li	a5,2047
 80071c8:	10f50d63          	beq	a0,a5,80072e2 <__muldf3+0x182>
 80071cc:	01db5793          	srli	a5,s6,0x1d
 80071d0:	040e                	slli	s0,s0,0x3
 80071d2:	8c5d                	or	s0,s0,a5
 80071d4:	008007b7          	lui	a5,0x800
 80071d8:	8c5d                	or	s0,s0,a5
 80071da:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__stack_size+0x7ec01>
 80071de:	003b1793          	slli	a5,s6,0x3
 80071e2:	4701                	li	a4,0
 80071e4:	002b9693          	slli	a3,s7,0x2
 80071e8:	8ed9                	or	a3,a3,a4
 80071ea:	954e                	add	a0,a0,s3
 80071ec:	16fd                	addi	a3,a3,-1
 80071ee:	45b9                	li	a1,14
 80071f0:	015a4633          	xor	a2,s4,s5
 80071f4:	00150813          	addi	a6,a0,1
 80071f8:	10d5e663          	bltu	a1,a3,8007304 <__muldf3+0x1a4>
 80071fc:	ffff9597          	auipc	a1,0xffff9
 8007200:	2b858593          	addi	a1,a1,696 # 80004b4 <_std_dev_req+0x124>
 8007204:	068a                	slli	a3,a3,0x2
 8007206:	96ae                	add	a3,a3,a1
 8007208:	4294                	lw	a3,0(a3)
 800720a:	96ae                	add	a3,a3,a1
 800720c:	8682                	jr	a3
 800720e:	00a4e933          	or	s2,s1,a0
 8007212:	06090363          	beqz	s2,8007278 <__muldf3+0x118>
 8007216:	c89d                	beqz	s1,800724c <__muldf3+0xec>
 8007218:	8526                	mv	a0,s1
 800721a:	00000097          	auipc	ra,0x0
 800721e:	676080e7          	jalr	1654(ra) # 8007890 <__clzsi2>
 8007222:	ff550713          	addi	a4,a0,-11
 8007226:	47f1                	li	a5,28
 8007228:	02e7c963          	blt	a5,a4,800725a <__muldf3+0xfa>
 800722c:	47f5                	li	a5,29
 800722e:	ff850913          	addi	s2,a0,-8
 8007232:	8f99                	sub	a5,a5,a4
 8007234:	012494b3          	sll	s1,s1,s2
 8007238:	00f457b3          	srl	a5,s0,a5
 800723c:	8cdd                	or	s1,s1,a5
 800723e:	01241933          	sll	s2,s0,s2
 8007242:	c0d00993          	li	s3,-1011
 8007246:	40a989b3          	sub	s3,s3,a0
 800724a:	b795                	j	80071ae <__muldf3+0x4e>
 800724c:	00000097          	auipc	ra,0x0
 8007250:	644080e7          	jalr	1604(ra) # 8007890 <__clzsi2>
 8007254:	02050513          	addi	a0,a0,32
 8007258:	b7e9                	j	8007222 <__muldf3+0xc2>
 800725a:	fd850493          	addi	s1,a0,-40
 800725e:	009414b3          	sll	s1,s0,s1
 8007262:	4901                	li	s2,0
 8007264:	bff9                	j	8007242 <__muldf3+0xe2>
 8007266:	00a4e933          	or	s2,s1,a0
 800726a:	00090b63          	beqz	s2,8007280 <__muldf3+0x120>
 800726e:	892a                	mv	s2,a0
 8007270:	7ff00993          	li	s3,2047
 8007274:	4b8d                	li	s7,3
 8007276:	bf2d                	j	80071b0 <__muldf3+0x50>
 8007278:	4481                	li	s1,0
 800727a:	4981                	li	s3,0
 800727c:	4b85                	li	s7,1
 800727e:	bf0d                	j	80071b0 <__muldf3+0x50>
 8007280:	4481                	li	s1,0
 8007282:	7ff00993          	li	s3,2047
 8007286:	4b89                	li	s7,2
 8007288:	b725                	j	80071b0 <__muldf3+0x50>
 800728a:	016467b3          	or	a5,s0,s6
 800728e:	c3b5                	beqz	a5,80072f2 <__muldf3+0x192>
 8007290:	c81d                	beqz	s0,80072c6 <__muldf3+0x166>
 8007292:	8522                	mv	a0,s0
 8007294:	00000097          	auipc	ra,0x0
 8007298:	5fc080e7          	jalr	1532(ra) # 8007890 <__clzsi2>
 800729c:	ff550693          	addi	a3,a0,-11
 80072a0:	47f1                	li	a5,28
 80072a2:	02d7ca63          	blt	a5,a3,80072d6 <__muldf3+0x176>
 80072a6:	4775                	li	a4,29
 80072a8:	ff850793          	addi	a5,a0,-8
 80072ac:	8f15                	sub	a4,a4,a3
 80072ae:	00f41433          	sll	s0,s0,a5
 80072b2:	00eb5733          	srl	a4,s6,a4
 80072b6:	8c59                	or	s0,s0,a4
 80072b8:	00fb17b3          	sll	a5,s6,a5
 80072bc:	c0d00713          	li	a4,-1011
 80072c0:	40a70533          	sub	a0,a4,a0
 80072c4:	bf39                	j	80071e2 <__muldf3+0x82>
 80072c6:	855a                	mv	a0,s6
 80072c8:	00000097          	auipc	ra,0x0
 80072cc:	5c8080e7          	jalr	1480(ra) # 8007890 <__clzsi2>
 80072d0:	02050513          	addi	a0,a0,32
 80072d4:	b7e1                	j	800729c <__muldf3+0x13c>
 80072d6:	fd850413          	addi	s0,a0,-40
 80072da:	008b1433          	sll	s0,s6,s0
 80072de:	4781                	li	a5,0
 80072e0:	bff1                	j	80072bc <__muldf3+0x15c>
 80072e2:	016467b3          	or	a5,s0,s6
 80072e6:	cb91                	beqz	a5,80072fa <__muldf3+0x19a>
 80072e8:	87da                	mv	a5,s6
 80072ea:	7ff00513          	li	a0,2047
 80072ee:	470d                	li	a4,3
 80072f0:	bdd5                	j	80071e4 <__muldf3+0x84>
 80072f2:	4401                	li	s0,0
 80072f4:	4501                	li	a0,0
 80072f6:	4705                	li	a4,1
 80072f8:	b5f5                	j	80071e4 <__muldf3+0x84>
 80072fa:	4401                	li	s0,0
 80072fc:	7ff00513          	li	a0,2047
 8007300:	4709                	li	a4,2
 8007302:	b5cd                	j	80071e4 <__muldf3+0x84>
 8007304:	6f41                	lui	t5,0x10
 8007306:	ffff0e93          	addi	t4,t5,-1 # ffff <__stack_size+0xefff>
 800730a:	01095713          	srli	a4,s2,0x10
 800730e:	0107d893          	srli	a7,a5,0x10
 8007312:	01d97933          	and	s2,s2,t4
 8007316:	01d7f7b3          	and	a5,a5,t4
 800731a:	032885b3          	mul	a1,a7,s2
 800731e:	032786b3          	mul	a3,a5,s2
 8007322:	02f70fb3          	mul	t6,a4,a5
 8007326:	01f58333          	add	t1,a1,t6
 800732a:	0106d593          	srli	a1,a3,0x10
 800732e:	959a                	add	a1,a1,t1
 8007330:	03170e33          	mul	t3,a4,a7
 8007334:	01f5f363          	bgeu	a1,t6,800733a <__muldf3+0x1da>
 8007338:	9e7a                	add	t3,t3,t5
 800733a:	0105d393          	srli	t2,a1,0x10
 800733e:	01d5f5b3          	and	a1,a1,t4
 8007342:	01d6f6b3          	and	a3,a3,t4
 8007346:	01045f13          	srli	t5,s0,0x10
 800734a:	01d472b3          	and	t0,s0,t4
 800734e:	05c2                	slli	a1,a1,0x10
 8007350:	95b6                	add	a1,a1,a3
 8007352:	02570eb3          	mul	t4,a4,t0
 8007356:	032286b3          	mul	a3,t0,s2
 800735a:	032f0933          	mul	s2,t5,s2
 800735e:	01d90333          	add	t1,s2,t4
 8007362:	0106d913          	srli	s2,a3,0x10
 8007366:	991a                	add	s2,s2,t1
 8007368:	03e70733          	mul	a4,a4,t5
 800736c:	01d97463          	bgeu	s2,t4,8007374 <__muldf3+0x214>
 8007370:	6341                	lui	t1,0x10
 8007372:	971a                	add	a4,a4,t1
 8007374:	01095e93          	srli	t4,s2,0x10
 8007378:	69c1                	lui	s3,0x10
 800737a:	9eba                	add	t4,t4,a4
 800737c:	fff98713          	addi	a4,s3,-1 # ffff <__stack_size+0xefff>
 8007380:	00e97933          	and	s2,s2,a4
 8007384:	8ef9                	and	a3,a3,a4
 8007386:	0104d413          	srli	s0,s1,0x10
 800738a:	0942                	slli	s2,s2,0x10
 800738c:	8cf9                	and	s1,s1,a4
 800738e:	9936                	add	s2,s2,a3
 8007390:	02978733          	mul	a4,a5,s1
 8007394:	93ca                	add	t2,t2,s2
 8007396:	02f40333          	mul	t1,s0,a5
 800739a:	029886b3          	mul	a3,a7,s1
 800739e:	028887b3          	mul	a5,a7,s0
 80073a2:	006688b3          	add	a7,a3,t1
 80073a6:	01075693          	srli	a3,a4,0x10
 80073aa:	96c6                	add	a3,a3,a7
 80073ac:	0066f363          	bgeu	a3,t1,80073b2 <__muldf3+0x252>
 80073b0:	97ce                	add	a5,a5,s3
 80073b2:	0106d893          	srli	a7,a3,0x10
 80073b6:	69c1                	lui	s3,0x10
 80073b8:	00f88fb3          	add	t6,a7,a5
 80073bc:	fff98793          	addi	a5,s3,-1 # ffff <__stack_size+0xefff>
 80073c0:	8efd                	and	a3,a3,a5
 80073c2:	8f7d                	and	a4,a4,a5
 80073c4:	029288b3          	mul	a7,t0,s1
 80073c8:	06c2                	slli	a3,a3,0x10
 80073ca:	96ba                	add	a3,a3,a4
 80073cc:	025407b3          	mul	a5,s0,t0
 80073d0:	029f04b3          	mul	s1,t5,s1
 80073d4:	028f0333          	mul	t1,t5,s0
 80073d8:	94be                	add	s1,s1,a5
 80073da:	0108d413          	srli	s0,a7,0x10
 80073de:	94a2                	add	s1,s1,s0
 80073e0:	00f4f363          	bgeu	s1,a5,80073e6 <__muldf3+0x286>
 80073e4:	934e                	add	t1,t1,s3
 80073e6:	67c1                	lui	a5,0x10
 80073e8:	17fd                	addi	a5,a5,-1
 80073ea:	00f4f733          	and	a4,s1,a5
 80073ee:	00f8f8b3          	and	a7,a7,a5
 80073f2:	0742                	slli	a4,a4,0x10
 80073f4:	9e1e                	add	t3,t3,t2
 80073f6:	9746                	add	a4,a4,a7
 80073f8:	012e3933          	sltu	s2,t3,s2
 80073fc:	9776                	add	a4,a4,t4
 80073fe:	01270433          	add	s0,a4,s2
 8007402:	9e36                	add	t3,t3,a3
 8007404:	00de36b3          	sltu	a3,t3,a3
 8007408:	01f408b3          	add	a7,s0,t6
 800740c:	00d88f33          	add	t5,a7,a3
 8007410:	01d73733          	sltu	a4,a4,t4
 8007414:	01243433          	sltu	s0,s0,s2
 8007418:	8c59                	or	s0,s0,a4
 800741a:	80c1                	srli	s1,s1,0x10
 800741c:	01f8b8b3          	sltu	a7,a7,t6
 8007420:	00df36b3          	sltu	a3,t5,a3
 8007424:	9426                	add	s0,s0,s1
 8007426:	00d8e6b3          	or	a3,a7,a3
 800742a:	9436                	add	s0,s0,a3
 800742c:	941a                	add	s0,s0,t1
 800742e:	017f5793          	srli	a5,t5,0x17
 8007432:	0426                	slli	s0,s0,0x9
 8007434:	8c5d                	or	s0,s0,a5
 8007436:	009e1793          	slli	a5,t3,0x9
 800743a:	8fcd                	or	a5,a5,a1
 800743c:	00f037b3          	snez	a5,a5
 8007440:	017e5e13          	srli	t3,t3,0x17
 8007444:	009f1713          	slli	a4,t5,0x9
 8007448:	01c7e7b3          	or	a5,a5,t3
 800744c:	8fd9                	or	a5,a5,a4
 800744e:	00741713          	slli	a4,s0,0x7
 8007452:	0a075863          	bgez	a4,8007502 <__muldf3+0x3a2>
 8007456:	0017d713          	srli	a4,a5,0x1
 800745a:	8b85                	andi	a5,a5,1
 800745c:	8fd9                	or	a5,a5,a4
 800745e:	01f41713          	slli	a4,s0,0x1f
 8007462:	8fd9                	or	a5,a5,a4
 8007464:	8005                	srli	s0,s0,0x1
 8007466:	3ff80693          	addi	a3,a6,1023
 800746a:	08d05e63          	blez	a3,8007506 <__muldf3+0x3a6>
 800746e:	0077f713          	andi	a4,a5,7
 8007472:	cf01                	beqz	a4,800748a <__muldf3+0x32a>
 8007474:	00f7f713          	andi	a4,a5,15
 8007478:	4591                	li	a1,4
 800747a:	00b70863          	beq	a4,a1,800748a <__muldf3+0x32a>
 800747e:	00478713          	addi	a4,a5,4 # 10004 <__stack_size+0xf004>
 8007482:	00f737b3          	sltu	a5,a4,a5
 8007486:	943e                	add	s0,s0,a5
 8007488:	87ba                	mv	a5,a4
 800748a:	00741713          	slli	a4,s0,0x7
 800748e:	00075863          	bgez	a4,800749e <__muldf3+0x33e>
 8007492:	ff000737          	lui	a4,0xff000
 8007496:	177d                	addi	a4,a4,-1
 8007498:	8c79                	and	s0,s0,a4
 800749a:	40080693          	addi	a3,a6,1024
 800749e:	7fe00713          	li	a4,2046
 80074a2:	0ed74c63          	blt	a4,a3,800759a <__muldf3+0x43a>
 80074a6:	0037d713          	srli	a4,a5,0x3
 80074aa:	01d41793          	slli	a5,s0,0x1d
 80074ae:	8fd9                	or	a5,a5,a4
 80074b0:	800d                	srli	s0,s0,0x3
 80074b2:	0432                	slli	s0,s0,0xc
 80074b4:	7ff6f713          	andi	a4,a3,2047
 80074b8:	0752                	slli	a4,a4,0x14
 80074ba:	8031                	srli	s0,s0,0xc
 80074bc:	8c59                	or	s0,s0,a4
 80074be:	067e                	slli	a2,a2,0x1f
 80074c0:	00c46733          	or	a4,s0,a2
 80074c4:	50b2                	lw	ra,44(sp)
 80074c6:	5422                	lw	s0,40(sp)
 80074c8:	5492                	lw	s1,36(sp)
 80074ca:	5902                	lw	s2,32(sp)
 80074cc:	49f2                	lw	s3,28(sp)
 80074ce:	4a62                	lw	s4,24(sp)
 80074d0:	4ad2                	lw	s5,20(sp)
 80074d2:	4b42                	lw	s6,16(sp)
 80074d4:	4bb2                	lw	s7,12(sp)
 80074d6:	853e                	mv	a0,a5
 80074d8:	85ba                	mv	a1,a4
 80074da:	6145                	addi	sp,sp,48
 80074dc:	8082                	ret
 80074de:	8652                	mv	a2,s4
 80074e0:	8426                	mv	s0,s1
 80074e2:	87ca                	mv	a5,s2
 80074e4:	875e                	mv	a4,s7
 80074e6:	4689                	li	a3,2
 80074e8:	0ad70963          	beq	a4,a3,800759a <__muldf3+0x43a>
 80074ec:	468d                	li	a3,3
 80074ee:	08d70f63          	beq	a4,a3,800758c <__muldf3+0x42c>
 80074f2:	4685                	li	a3,1
 80074f4:	f6d719e3          	bne	a4,a3,8007466 <__muldf3+0x306>
 80074f8:	4401                	li	s0,0
 80074fa:	4781                	li	a5,0
 80074fc:	a09d                	j	8007562 <__muldf3+0x402>
 80074fe:	8656                	mv	a2,s5
 8007500:	b7dd                	j	80074e6 <__muldf3+0x386>
 8007502:	882a                	mv	a6,a0
 8007504:	b78d                	j	8007466 <__muldf3+0x306>
 8007506:	4585                	li	a1,1
 8007508:	8d95                	sub	a1,a1,a3
 800750a:	03800713          	li	a4,56
 800750e:	feb745e3          	blt	a4,a1,80074f8 <__muldf3+0x398>
 8007512:	477d                	li	a4,31
 8007514:	04b74963          	blt	a4,a1,8007566 <__muldf3+0x406>
 8007518:	41e80813          	addi	a6,a6,1054
 800751c:	01041733          	sll	a4,s0,a6
 8007520:	00b7d6b3          	srl	a3,a5,a1
 8007524:	010797b3          	sll	a5,a5,a6
 8007528:	8f55                	or	a4,a4,a3
 800752a:	00f037b3          	snez	a5,a5
 800752e:	8fd9                	or	a5,a5,a4
 8007530:	00b45433          	srl	s0,s0,a1
 8007534:	0077f713          	andi	a4,a5,7
 8007538:	cf01                	beqz	a4,8007550 <__muldf3+0x3f0>
 800753a:	00f7f713          	andi	a4,a5,15
 800753e:	4691                	li	a3,4
 8007540:	00d70863          	beq	a4,a3,8007550 <__muldf3+0x3f0>
 8007544:	00478713          	addi	a4,a5,4
 8007548:	00f737b3          	sltu	a5,a4,a5
 800754c:	943e                	add	s0,s0,a5
 800754e:	87ba                	mv	a5,a4
 8007550:	00841713          	slli	a4,s0,0x8
 8007554:	04074863          	bltz	a4,80075a4 <__muldf3+0x444>
 8007558:	01d41713          	slli	a4,s0,0x1d
 800755c:	838d                	srli	a5,a5,0x3
 800755e:	8fd9                	or	a5,a5,a4
 8007560:	800d                	srli	s0,s0,0x3
 8007562:	4681                	li	a3,0
 8007564:	b7b9                	j	80074b2 <__muldf3+0x352>
 8007566:	5705                	li	a4,-31
 8007568:	8f15                	sub	a4,a4,a3
 800756a:	02000513          	li	a0,32
 800756e:	00e45733          	srl	a4,s0,a4
 8007572:	4681                	li	a3,0
 8007574:	00a58663          	beq	a1,a0,8007580 <__muldf3+0x420>
 8007578:	43e80813          	addi	a6,a6,1086
 800757c:	010416b3          	sll	a3,s0,a6
 8007580:	8fd5                	or	a5,a5,a3
 8007582:	00f037b3          	snez	a5,a5
 8007586:	8fd9                	or	a5,a5,a4
 8007588:	4401                	li	s0,0
 800758a:	b76d                	j	8007534 <__muldf3+0x3d4>
 800758c:	00080437          	lui	s0,0x80
 8007590:	4781                	li	a5,0
 8007592:	7ff00693          	li	a3,2047
 8007596:	4601                	li	a2,0
 8007598:	bf29                	j	80074b2 <__muldf3+0x352>
 800759a:	4401                	li	s0,0
 800759c:	4781                	li	a5,0
 800759e:	7ff00693          	li	a3,2047
 80075a2:	bf01                	j	80074b2 <__muldf3+0x352>
 80075a4:	4401                	li	s0,0
 80075a6:	4781                	li	a5,0
 80075a8:	4685                	li	a3,1
 80075aa:	b721                	j	80074b2 <__muldf3+0x352>

080075ac <__fixdfsi>:
 80075ac:	0145d713          	srli	a4,a1,0x14
 80075b0:	001006b7          	lui	a3,0x100
 80075b4:	fff68793          	addi	a5,a3,-1 # fffff <__stack_size+0xfefff>
 80075b8:	7ff77713          	andi	a4,a4,2047
 80075bc:	3fe00613          	li	a2,1022
 80075c0:	8fed                	and	a5,a5,a1
 80075c2:	81fd                	srli	a1,a1,0x1f
 80075c4:	04e65463          	bge	a2,a4,800760c <__fixdfsi+0x60>
 80075c8:	41d00613          	li	a2,1053
 80075cc:	00e65863          	bge	a2,a4,80075dc <__fixdfsi+0x30>
 80075d0:	80000537          	lui	a0,0x80000
 80075d4:	fff54513          	not	a0,a0
 80075d8:	952e                	add	a0,a0,a1
 80075da:	8082                	ret
 80075dc:	8fd5                	or	a5,a5,a3
 80075de:	43300693          	li	a3,1075
 80075e2:	8e99                	sub	a3,a3,a4
 80075e4:	467d                	li	a2,31
 80075e6:	00d64d63          	blt	a2,a3,8007600 <__fixdfsi+0x54>
 80075ea:	bed70713          	addi	a4,a4,-1043 # fefffbed <_sp+0xdeff7bed>
 80075ee:	00e797b3          	sll	a5,a5,a4
 80075f2:	00d55533          	srl	a0,a0,a3
 80075f6:	8d5d                	or	a0,a0,a5
 80075f8:	c999                	beqz	a1,800760e <__fixdfsi+0x62>
 80075fa:	40a00533          	neg	a0,a0
 80075fe:	8082                	ret
 8007600:	41300513          	li	a0,1043
 8007604:	8d19                	sub	a0,a0,a4
 8007606:	00a7d533          	srl	a0,a5,a0
 800760a:	b7fd                	j	80075f8 <__fixdfsi+0x4c>
 800760c:	4501                	li	a0,0
 800760e:	8082                	ret

08007610 <__floatsidf>:
 8007610:	1141                	addi	sp,sp,-16
 8007612:	c606                	sw	ra,12(sp)
 8007614:	c422                	sw	s0,8(sp)
 8007616:	c226                	sw	s1,4(sp)
 8007618:	c12d                	beqz	a0,800767a <__floatsidf+0x6a>
 800761a:	41f55793          	srai	a5,a0,0x1f
 800761e:	00a7c433          	xor	s0,a5,a0
 8007622:	8c1d                	sub	s0,s0,a5
 8007624:	01f55493          	srli	s1,a0,0x1f
 8007628:	8522                	mv	a0,s0
 800762a:	00000097          	auipc	ra,0x0
 800762e:	266080e7          	jalr	614(ra) # 8007890 <__clzsi2>
 8007632:	41e00713          	li	a4,1054
 8007636:	47a9                	li	a5,10
 8007638:	8f09                	sub	a4,a4,a0
 800763a:	02a7ca63          	blt	a5,a0,800766e <__floatsidf+0x5e>
 800763e:	47ad                	li	a5,11
 8007640:	8f89                	sub	a5,a5,a0
 8007642:	0555                	addi	a0,a0,21
 8007644:	00f457b3          	srl	a5,s0,a5
 8007648:	00a41433          	sll	s0,s0,a0
 800764c:	8526                	mv	a0,s1
 800764e:	07b2                	slli	a5,a5,0xc
 8007650:	7ff77713          	andi	a4,a4,2047
 8007654:	0752                	slli	a4,a4,0x14
 8007656:	83b1                	srli	a5,a5,0xc
 8007658:	057e                	slli	a0,a0,0x1f
 800765a:	8fd9                	or	a5,a5,a4
 800765c:	00a7e733          	or	a4,a5,a0
 8007660:	40b2                	lw	ra,12(sp)
 8007662:	8522                	mv	a0,s0
 8007664:	4422                	lw	s0,8(sp)
 8007666:	4492                	lw	s1,4(sp)
 8007668:	85ba                	mv	a1,a4
 800766a:	0141                	addi	sp,sp,16
 800766c:	8082                	ret
 800766e:	1555                	addi	a0,a0,-11
 8007670:	00a417b3          	sll	a5,s0,a0
 8007674:	8526                	mv	a0,s1
 8007676:	4401                	li	s0,0
 8007678:	bfd9                	j	800764e <__floatsidf+0x3e>
 800767a:	4701                	li	a4,0
 800767c:	4781                	li	a5,0
 800767e:	bfe5                	j	8007676 <__floatsidf+0x66>

08007680 <__floatunsidf>:
 8007680:	1141                	addi	sp,sp,-16
 8007682:	c422                	sw	s0,8(sp)
 8007684:	c606                	sw	ra,12(sp)
 8007686:	842a                	mv	s0,a0
 8007688:	c521                	beqz	a0,80076d0 <__floatunsidf+0x50>
 800768a:	00000097          	auipc	ra,0x0
 800768e:	206080e7          	jalr	518(ra) # 8007890 <__clzsi2>
 8007692:	41e00713          	li	a4,1054
 8007696:	47a9                	li	a5,10
 8007698:	8f09                	sub	a4,a4,a0
 800769a:	02a7c663          	blt	a5,a0,80076c6 <__floatunsidf+0x46>
 800769e:	47ad                	li	a5,11
 80076a0:	8f89                	sub	a5,a5,a0
 80076a2:	0555                	addi	a0,a0,21
 80076a4:	00f457b3          	srl	a5,s0,a5
 80076a8:	00a41433          	sll	s0,s0,a0
 80076ac:	8522                	mv	a0,s0
 80076ae:	40b2                	lw	ra,12(sp)
 80076b0:	4422                	lw	s0,8(sp)
 80076b2:	07b2                	slli	a5,a5,0xc
 80076b4:	7ff77713          	andi	a4,a4,2047
 80076b8:	0752                	slli	a4,a4,0x14
 80076ba:	83b1                	srli	a5,a5,0xc
 80076bc:	00e7e6b3          	or	a3,a5,a4
 80076c0:	85b6                	mv	a1,a3
 80076c2:	0141                	addi	sp,sp,16
 80076c4:	8082                	ret
 80076c6:	1555                	addi	a0,a0,-11
 80076c8:	00a417b3          	sll	a5,s0,a0
 80076cc:	4401                	li	s0,0
 80076ce:	bff9                	j	80076ac <__floatunsidf+0x2c>
 80076d0:	4781                	li	a5,0
 80076d2:	4701                	li	a4,0
 80076d4:	bfe1                	j	80076ac <__floatunsidf+0x2c>

080076d6 <__floatundidf>:
 80076d6:	1101                	addi	sp,sp,-32
 80076d8:	ce06                	sw	ra,28(sp)
 80076da:	cc22                	sw	s0,24(sp)
 80076dc:	ca26                	sw	s1,20(sp)
 80076de:	c84a                	sw	s2,16(sp)
 80076e0:	c64e                	sw	s3,12(sp)
 80076e2:	c452                	sw	s4,8(sp)
 80076e4:	00b567b3          	or	a5,a0,a1
 80076e8:	14078663          	beqz	a5,8007834 <__floatundidf+0x15e>
 80076ec:	842a                	mv	s0,a0
 80076ee:	892e                	mv	s2,a1
 80076f0:	84ae                	mv	s1,a1
 80076f2:	c5bd                	beqz	a1,8007760 <__floatundidf+0x8a>
 80076f4:	852e                	mv	a0,a1
 80076f6:	00000097          	auipc	ra,0x0
 80076fa:	19a080e7          	jalr	410(ra) # 8007890 <__clzsi2>
 80076fe:	89aa                	mv	s3,a0
 8007700:	43e00a13          	li	s4,1086
 8007704:	413a0a33          	sub	s4,s4,s3
 8007708:	43300793          	li	a5,1075
 800770c:	0747c763          	blt	a5,s4,800777a <__floatundidf+0xa4>
 8007710:	47ad                	li	a5,11
 8007712:	8522                	mv	a0,s0
 8007714:	0337d363          	bge	a5,s3,800773a <__floatundidf+0x64>
 8007718:	02a00793          	li	a5,42
 800771c:	0537c963          	blt	a5,s3,800776e <__floatundidf+0x98>
 8007720:	02b00593          	li	a1,43
 8007724:	ff598793          	addi	a5,s3,-11
 8007728:	413585b3          	sub	a1,a1,s3
 800772c:	00b455b3          	srl	a1,s0,a1
 8007730:	00f914b3          	sll	s1,s2,a5
 8007734:	8ccd                	or	s1,s1,a1
 8007736:	00f41533          	sll	a0,s0,a5
 800773a:	00c49593          	slli	a1,s1,0xc
 800773e:	40f2                	lw	ra,28(sp)
 8007740:	4462                	lw	s0,24(sp)
 8007742:	7ffa7a13          	andi	s4,s4,2047
 8007746:	0a52                	slli	s4,s4,0x14
 8007748:	81b1                	srli	a1,a1,0xc
 800774a:	0145e7b3          	or	a5,a1,s4
 800774e:	872a                	mv	a4,a0
 8007750:	44d2                	lw	s1,20(sp)
 8007752:	4942                	lw	s2,16(sp)
 8007754:	49b2                	lw	s3,12(sp)
 8007756:	4a22                	lw	s4,8(sp)
 8007758:	853a                	mv	a0,a4
 800775a:	85be                	mv	a1,a5
 800775c:	6105                	addi	sp,sp,32
 800775e:	8082                	ret
 8007760:	00000097          	auipc	ra,0x0
 8007764:	130080e7          	jalr	304(ra) # 8007890 <__clzsi2>
 8007768:	02050993          	addi	s3,a0,32 # 80000020 <_sp+0x5fff8020>
 800776c:	bf51                	j	8007700 <__floatundidf+0x2a>
 800776e:	fd598593          	addi	a1,s3,-43
 8007772:	00b414b3          	sll	s1,s0,a1
 8007776:	4501                	li	a0,0
 8007778:	b7c9                	j	800773a <__floatundidf+0x64>
 800777a:	43600793          	li	a5,1078
 800777e:	0347d963          	bge	a5,s4,80077b0 <__floatundidf+0xda>
 8007782:	03898613          	addi	a2,s3,56
 8007786:	8522                	mv	a0,s0
 8007788:	85ca                	mv	a1,s2
 800778a:	00000097          	auipc	ra,0x0
 800778e:	0dc080e7          	jalr	220(ra) # 8007866 <__ashldi3>
 8007792:	8dc9                	or	a1,a1,a0
 8007794:	4621                	li	a2,8
 8007796:	00b034b3          	snez	s1,a1
 800779a:	8522                	mv	a0,s0
 800779c:	85ca                	mv	a1,s2
 800779e:	41360633          	sub	a2,a2,s3
 80077a2:	00000097          	auipc	ra,0x0
 80077a6:	09a080e7          	jalr	154(ra) # 800783c <__lshrdi3>
 80077aa:	00a4e433          	or	s0,s1,a0
 80077ae:	892e                	mv	s2,a1
 80077b0:	47a1                	li	a5,8
 80077b2:	8522                	mv	a0,s0
 80077b4:	0337d463          	bge	a5,s3,80077dc <__floatundidf+0x106>
 80077b8:	02700793          	li	a5,39
 80077bc:	0737c663          	blt	a5,s3,8007828 <__floatundidf+0x152>
 80077c0:	02800593          	li	a1,40
 80077c4:	ff898793          	addi	a5,s3,-8
 80077c8:	413585b3          	sub	a1,a1,s3
 80077cc:	00f91933          	sll	s2,s2,a5
 80077d0:	00b455b3          	srl	a1,s0,a1
 80077d4:	0125e933          	or	s2,a1,s2
 80077d8:	00f41533          	sll	a0,s0,a5
 80077dc:	ff8007b7          	lui	a5,0xff800
 80077e0:	17fd                	addi	a5,a5,-1
 80077e2:	00f975b3          	and	a1,s2,a5
 80077e6:	00757793          	andi	a5,a0,7
 80077ea:	cf81                	beqz	a5,8007802 <__floatundidf+0x12c>
 80077ec:	00f57793          	andi	a5,a0,15
 80077f0:	4711                	li	a4,4
 80077f2:	00e78863          	beq	a5,a4,8007802 <__floatundidf+0x12c>
 80077f6:	00450793          	addi	a5,a0,4
 80077fa:	00a7b533          	sltu	a0,a5,a0
 80077fe:	95aa                	add	a1,a1,a0
 8007800:	853e                	mv	a0,a5
 8007802:	00859793          	slli	a5,a1,0x8
 8007806:	0007da63          	bgez	a5,800781a <__floatundidf+0x144>
 800780a:	ff8007b7          	lui	a5,0xff800
 800780e:	17fd                	addi	a5,a5,-1
 8007810:	43f00a13          	li	s4,1087
 8007814:	8dfd                	and	a1,a1,a5
 8007816:	413a0a33          	sub	s4,s4,s3
 800781a:	810d                	srli	a0,a0,0x3
 800781c:	01d59793          	slli	a5,a1,0x1d
 8007820:	8d5d                	or	a0,a0,a5
 8007822:	0035d493          	srli	s1,a1,0x3
 8007826:	bf11                	j	800773a <__floatundidf+0x64>
 8007828:	fd898913          	addi	s2,s3,-40
 800782c:	01241933          	sll	s2,s0,s2
 8007830:	4501                	li	a0,0
 8007832:	b76d                	j	80077dc <__floatundidf+0x106>
 8007834:	4481                	li	s1,0
 8007836:	4501                	li	a0,0
 8007838:	4a01                	li	s4,0
 800783a:	b701                	j	800773a <__floatundidf+0x64>

0800783c <__lshrdi3>:
 800783c:	ce01                	beqz	a2,8007854 <__lshrdi3+0x18>
 800783e:	02000793          	li	a5,32
 8007842:	8f91                	sub	a5,a5,a2
 8007844:	00f04963          	bgtz	a5,8007856 <__lshrdi3+0x1a>
 8007848:	fe060513          	addi	a0,a2,-32 # dffe0 <__stack_size+0xdefe0>
 800784c:	4701                	li	a4,0
 800784e:	00a5d533          	srl	a0,a1,a0
 8007852:	85ba                	mv	a1,a4
 8007854:	8082                	ret
 8007856:	00c5d733          	srl	a4,a1,a2
 800785a:	00c55533          	srl	a0,a0,a2
 800785e:	00f595b3          	sll	a1,a1,a5
 8007862:	8d4d                	or	a0,a0,a1
 8007864:	b7fd                	j	8007852 <__lshrdi3+0x16>

08007866 <__ashldi3>:
 8007866:	ce01                	beqz	a2,800787e <__ashldi3+0x18>
 8007868:	02000793          	li	a5,32
 800786c:	8f91                	sub	a5,a5,a2
 800786e:	00f04963          	bgtz	a5,8007880 <__ashldi3+0x1a>
 8007872:	fe060593          	addi	a1,a2,-32
 8007876:	4701                	li	a4,0
 8007878:	00b515b3          	sll	a1,a0,a1
 800787c:	853a                	mv	a0,a4
 800787e:	8082                	ret
 8007880:	00c51733          	sll	a4,a0,a2
 8007884:	00c595b3          	sll	a1,a1,a2
 8007888:	00f55533          	srl	a0,a0,a5
 800788c:	8dc9                	or	a1,a1,a0
 800788e:	b7fd                	j	800787c <__ashldi3+0x16>

08007890 <__clzsi2>:
 8007890:	67c1                	lui	a5,0x10
 8007892:	02f57663          	bgeu	a0,a5,80078be <__clzsi2+0x2e>
 8007896:	0ff00793          	li	a5,255
 800789a:	00a7b7b3          	sltu	a5,a5,a0
 800789e:	078e                	slli	a5,a5,0x3
 80078a0:	02000713          	li	a4,32
 80078a4:	8f1d                	sub	a4,a4,a5
 80078a6:	00f557b3          	srl	a5,a0,a5
 80078aa:	ffff9517          	auipc	a0,0xffff9
 80078ae:	c4650513          	addi	a0,a0,-954 # 80004f0 <__clz_tab>
 80078b2:	97aa                	add	a5,a5,a0
 80078b4:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xf000>
 80078b8:	40a70533          	sub	a0,a4,a0
 80078bc:	8082                	ret
 80078be:	01000737          	lui	a4,0x1000
 80078c2:	47c1                	li	a5,16
 80078c4:	fce56ee3          	bltu	a0,a4,80078a0 <__clzsi2+0x10>
 80078c8:	47e1                	li	a5,24
 80078ca:	bfd9                	j	80078a0 <__clzsi2+0x10>

080078cc <atexit>:
 80078cc:	85aa                	mv	a1,a0
 80078ce:	4681                	li	a3,0
 80078d0:	4601                	li	a2,0
 80078d2:	4501                	li	a0,0
 80078d4:	00000317          	auipc	t1,0x0
 80078d8:	17e30067          	jr	382(t1) # 8007a52 <__register_exitproc>

080078dc <exit>:
 80078dc:	1141                	addi	sp,sp,-16
 80078de:	c422                	sw	s0,8(sp)
 80078e0:	c606                	sw	ra,12(sp)
 80078e2:	00000797          	auipc	a5,0x0
 80078e6:	1fc78793          	addi	a5,a5,508 # 8007ade <__call_exitprocs>
 80078ea:	842a                	mv	s0,a0
 80078ec:	c791                	beqz	a5,80078f8 <exit+0x1c>
 80078ee:	4581                	li	a1,0
 80078f0:	00000097          	auipc	ra,0x0
 80078f4:	1ee080e7          	jalr	494(ra) # 8007ade <__call_exitprocs>
 80078f8:	00001797          	auipc	a5,0x1
 80078fc:	ccc78793          	addi	a5,a5,-820 # 80085c4 <_global_impure_ptr>
 8007900:	4388                	lw	a0,0(a5)
 8007902:	551c                	lw	a5,40(a0)
 8007904:	c391                	beqz	a5,8007908 <exit+0x2c>
 8007906:	9782                	jalr	a5
 8007908:	8522                	mv	a0,s0
 800790a:	ffffa097          	auipc	ra,0xffffa
 800790e:	38a080e7          	jalr	906(ra) # 8001c94 <_exit>

08007912 <__libc_fini_array>:
 8007912:	1141                	addi	sp,sp,-16
 8007914:	00001797          	auipc	a5,0x1
 8007918:	cb478793          	addi	a5,a5,-844 # 80085c8 <__fini_array_end>
 800791c:	c422                	sw	s0,8(sp)
 800791e:	00001417          	auipc	s0,0x1
 8007922:	caa40413          	addi	s0,s0,-854 # 80085c8 <__fini_array_end>
 8007926:	8c1d                	sub	s0,s0,a5
 8007928:	c226                	sw	s1,4(sp)
 800792a:	c606                	sw	ra,12(sp)
 800792c:	8409                	srai	s0,s0,0x2
 800792e:	84be                	mv	s1,a5
 8007930:	e411                	bnez	s0,800793c <__libc_fini_array+0x2a>
 8007932:	40b2                	lw	ra,12(sp)
 8007934:	4422                	lw	s0,8(sp)
 8007936:	4492                	lw	s1,4(sp)
 8007938:	0141                	addi	sp,sp,16
 800793a:	8082                	ret
 800793c:	147d                	addi	s0,s0,-1
 800793e:	00241793          	slli	a5,s0,0x2
 8007942:	97a6                	add	a5,a5,s1
 8007944:	439c                	lw	a5,0(a5)
 8007946:	9782                	jalr	a5
 8007948:	b7e5                	j	8007930 <__libc_fini_array+0x1e>

0800794a <__libc_init_array>:
 800794a:	1141                	addi	sp,sp,-16
 800794c:	00001797          	auipc	a5,0x1
 8007950:	c7c78793          	addi	a5,a5,-900 # 80085c8 <__fini_array_end>
 8007954:	c422                	sw	s0,8(sp)
 8007956:	00001417          	auipc	s0,0x1
 800795a:	c7240413          	addi	s0,s0,-910 # 80085c8 <__fini_array_end>
 800795e:	8c1d                	sub	s0,s0,a5
 8007960:	c226                	sw	s1,4(sp)
 8007962:	c04a                	sw	s2,0(sp)
 8007964:	c606                	sw	ra,12(sp)
 8007966:	8409                	srai	s0,s0,0x2
 8007968:	4481                	li	s1,0
 800796a:	893e                	mv	s2,a5
 800796c:	02849663          	bne	s1,s0,8007998 <__libc_init_array+0x4e>
 8007970:	00001797          	auipc	a5,0x1
 8007974:	c5878793          	addi	a5,a5,-936 # 80085c8 <__fini_array_end>
 8007978:	00001417          	auipc	s0,0x1
 800797c:	c5040413          	addi	s0,s0,-944 # 80085c8 <__fini_array_end>
 8007980:	8c1d                	sub	s0,s0,a5
 8007982:	8409                	srai	s0,s0,0x2
 8007984:	4481                	li	s1,0
 8007986:	893e                	mv	s2,a5
 8007988:	00849f63          	bne	s1,s0,80079a6 <__libc_init_array+0x5c>
 800798c:	40b2                	lw	ra,12(sp)
 800798e:	4422                	lw	s0,8(sp)
 8007990:	4492                	lw	s1,4(sp)
 8007992:	4902                	lw	s2,0(sp)
 8007994:	0141                	addi	sp,sp,16
 8007996:	8082                	ret
 8007998:	00249793          	slli	a5,s1,0x2
 800799c:	97ca                	add	a5,a5,s2
 800799e:	439c                	lw	a5,0(a5)
 80079a0:	0485                	addi	s1,s1,1
 80079a2:	9782                	jalr	a5
 80079a4:	b7e1                	j	800796c <__libc_init_array+0x22>
 80079a6:	00249793          	slli	a5,s1,0x2
 80079aa:	97ca                	add	a5,a5,s2
 80079ac:	439c                	lw	a5,0(a5)
 80079ae:	0485                	addi	s1,s1,1
 80079b0:	9782                	jalr	a5
 80079b2:	bfd9                	j	8007988 <__libc_init_array+0x3e>

080079b4 <memcpy>:
 80079b4:	832a                	mv	t1,a0
 80079b6:	ca09                	beqz	a2,80079c8 <memcpy+0x14>
 80079b8:	00058383          	lb	t2,0(a1)
 80079bc:	00730023          	sb	t2,0(t1)
 80079c0:	167d                	addi	a2,a2,-1
 80079c2:	0305                	addi	t1,t1,1
 80079c4:	0585                	addi	a1,a1,1
 80079c6:	fa6d                	bnez	a2,80079b8 <memcpy+0x4>
 80079c8:	8082                	ret

080079ca <memset>:
 80079ca:	832a                	mv	t1,a0
 80079cc:	c611                	beqz	a2,80079d8 <memset+0xe>
 80079ce:	00b30023          	sb	a1,0(t1)
 80079d2:	167d                	addi	a2,a2,-1
 80079d4:	0305                	addi	t1,t1,1
 80079d6:	fe65                	bnez	a2,80079ce <memset+0x4>
 80079d8:	8082                	ret

080079da <siprintf>:
 80079da:	7135                	addi	sp,sp,-160
 80079dc:	cb3e                	sw	a5,148(sp)
 80079de:	800007b7          	lui	a5,0x80000
 80079e2:	fff7c793          	not	a5,a5
 80079e6:	ce3e                	sw	a5,28(sp)
 80079e8:	c83e                	sw	a5,16(sp)
 80079ea:	77c1                	lui	a5,0xffff0
 80079ec:	20878793          	addi	a5,a5,520 # ffff0208 <_sp+0xdffe8208>
 80079f0:	c532                	sw	a2,136(sp)
 80079f2:	c736                	sw	a3,140(sp)
 80079f4:	c93a                	sw	a4,144(sp)
 80079f6:	cd42                	sw	a6,152(sp)
 80079f8:	cf46                	sw	a7,156(sp)
 80079fa:	ca3e                	sw	a5,20(sp)
 80079fc:	17ff9797          	auipc	a5,0x17ff9
 8007a00:	b0478793          	addi	a5,a5,-1276 # 20000500 <_impure_ptr>
 8007a04:	c42a                	sw	a0,8(sp)
 8007a06:	cc2a                	sw	a0,24(sp)
 8007a08:	4388                	lw	a0,0(a5)
 8007a0a:	0134                	addi	a3,sp,136
 8007a0c:	862e                	mv	a2,a1
 8007a0e:	002c                	addi	a1,sp,8
 8007a10:	de86                	sw	ra,124(sp)
 8007a12:	c236                	sw	a3,4(sp)
 8007a14:	00000097          	auipc	ra,0x0
 8007a18:	44e080e7          	jalr	1102(ra) # 8007e62 <_svfiprintf_r>
 8007a1c:	47a2                	lw	a5,8(sp)
 8007a1e:	00078023          	sb	zero,0(a5)
 8007a22:	50f6                	lw	ra,124(sp)
 8007a24:	610d                	addi	sp,sp,160
 8007a26:	8082                	ret

08007a28 <strcmp>:
 8007a28:	00054603          	lbu	a2,0(a0)
 8007a2c:	0005c683          	lbu	a3,0(a1)
 8007a30:	0505                	addi	a0,a0,1
 8007a32:	0585                	addi	a1,a1,1
 8007a34:	00d61363          	bne	a2,a3,8007a3a <strcmp+0x12>
 8007a38:	fa65                	bnez	a2,8007a28 <strcmp>
 8007a3a:	40d60533          	sub	a0,a2,a3
 8007a3e:	8082                	ret

08007a40 <strlen>:
 8007a40:	87aa                	mv	a5,a0
 8007a42:	0785                	addi	a5,a5,1
 8007a44:	fff7c703          	lbu	a4,-1(a5)
 8007a48:	ff6d                	bnez	a4,8007a42 <strlen+0x2>
 8007a4a:	40a78533          	sub	a0,a5,a0
 8007a4e:	157d                	addi	a0,a0,-1
 8007a50:	8082                	ret

08007a52 <__register_exitproc>:
 8007a52:	17ff9797          	auipc	a5,0x17ff9
 8007a56:	afe78793          	addi	a5,a5,-1282 # 20000550 <_global_atexit>
 8007a5a:	439c                	lw	a5,0(a5)
 8007a5c:	8e2a                	mv	t3,a0
 8007a5e:	e78d                	bnez	a5,8007a88 <__register_exitproc+0x36>
 8007a60:	17ff9717          	auipc	a4,0x17ff9
 8007a64:	30c70713          	addi	a4,a4,780 # 20000d6c <_global_atexit0>
 8007a68:	17ff9797          	auipc	a5,0x17ff9
 8007a6c:	aee7a423          	sw	a4,-1304(a5) # 20000550 <_global_atexit>
 8007a70:	f7ff8517          	auipc	a0,0xf7ff8
 8007a74:	59050513          	addi	a0,a0,1424 # 0 <__dbg_stack_size>
 8007a78:	87ba                	mv	a5,a4
 8007a7a:	c519                	beqz	a0,8007a88 <__register_exitproc+0x36>
 8007a7c:	411c                	lw	a5,0(a0)
 8007a7e:	17ff9517          	auipc	a0,0x17ff9
 8007a82:	36f52b23          	sw	a5,886(a0) # 20000df4 <_global_atexit0+0x88>
 8007a86:	87ba                	mv	a5,a4
 8007a88:	43d8                	lw	a4,4(a5)
 8007a8a:	487d                	li	a6,31
 8007a8c:	557d                	li	a0,-1
 8007a8e:	04e84763          	blt	a6,a4,8007adc <__register_exitproc+0x8a>
 8007a92:	020e0e63          	beqz	t3,8007ace <__register_exitproc+0x7c>
 8007a96:	0887a803          	lw	a6,136(a5)
 8007a9a:	04080163          	beqz	a6,8007adc <__register_exitproc+0x8a>
 8007a9e:	00271893          	slli	a7,a4,0x2
 8007aa2:	98c2                	add	a7,a7,a6
 8007aa4:	00c8a023          	sw	a2,0(a7)
 8007aa8:	10082303          	lw	t1,256(a6)
 8007aac:	4605                	li	a2,1
 8007aae:	00e61633          	sll	a2,a2,a4
 8007ab2:	00c36333          	or	t1,t1,a2
 8007ab6:	10682023          	sw	t1,256(a6)
 8007aba:	08d8a023          	sw	a3,128(a7)
 8007abe:	4689                	li	a3,2
 8007ac0:	00de1763          	bne	t3,a3,8007ace <__register_exitproc+0x7c>
 8007ac4:	10482683          	lw	a3,260(a6)
 8007ac8:	8e55                	or	a2,a2,a3
 8007aca:	10c82223          	sw	a2,260(a6)
 8007ace:	00170693          	addi	a3,a4,1
 8007ad2:	070a                	slli	a4,a4,0x2
 8007ad4:	c3d4                	sw	a3,4(a5)
 8007ad6:	97ba                	add	a5,a5,a4
 8007ad8:	c78c                	sw	a1,8(a5)
 8007ada:	4501                	li	a0,0
 8007adc:	8082                	ret

08007ade <__call_exitprocs>:
 8007ade:	7179                	addi	sp,sp,-48
 8007ae0:	cc52                	sw	s4,24(sp)
 8007ae2:	ca56                	sw	s5,20(sp)
 8007ae4:	c85a                	sw	s6,16(sp)
 8007ae6:	c65e                	sw	s7,12(sp)
 8007ae8:	d606                	sw	ra,44(sp)
 8007aea:	d422                	sw	s0,40(sp)
 8007aec:	d226                	sw	s1,36(sp)
 8007aee:	d04a                	sw	s2,32(sp)
 8007af0:	ce4e                	sw	s3,28(sp)
 8007af2:	c462                	sw	s8,8(sp)
 8007af4:	8b2a                	mv	s6,a0
 8007af6:	8a2e                	mv	s4,a1
 8007af8:	17ff9a97          	auipc	s5,0x17ff9
 8007afc:	a58a8a93          	addi	s5,s5,-1448 # 20000550 <_global_atexit>
 8007b00:	4b85                	li	s7,1
 8007b02:	000aa403          	lw	s0,0(s5)
 8007b06:	c811                	beqz	s0,8007b1a <__call_exitprocs+0x3c>
 8007b08:	4044                	lw	s1,4(s0)
 8007b0a:	08842983          	lw	s3,136(s0)
 8007b0e:	fff48913          	addi	s2,s1,-1 # 7ffff <__stack_size+0x7efff>
 8007b12:	048a                	slli	s1,s1,0x2
 8007b14:	94a2                	add	s1,s1,s0
 8007b16:	00095e63          	bgez	s2,8007b32 <__call_exitprocs+0x54>
 8007b1a:	50b2                	lw	ra,44(sp)
 8007b1c:	5422                	lw	s0,40(sp)
 8007b1e:	5492                	lw	s1,36(sp)
 8007b20:	5902                	lw	s2,32(sp)
 8007b22:	49f2                	lw	s3,28(sp)
 8007b24:	4a62                	lw	s4,24(sp)
 8007b26:	4ad2                	lw	s5,20(sp)
 8007b28:	4b42                	lw	s6,16(sp)
 8007b2a:	4bb2                	lw	s7,12(sp)
 8007b2c:	4c22                	lw	s8,8(sp)
 8007b2e:	6145                	addi	sp,sp,48
 8007b30:	8082                	ret
 8007b32:	000a0e63          	beqz	s4,8007b4e <__call_exitprocs+0x70>
 8007b36:	00099563          	bnez	s3,8007b40 <__call_exitprocs+0x62>
 8007b3a:	197d                	addi	s2,s2,-1
 8007b3c:	14f1                	addi	s1,s1,-4
 8007b3e:	bfe1                	j	8007b16 <__call_exitprocs+0x38>
 8007b40:	00291793          	slli	a5,s2,0x2
 8007b44:	97ce                	add	a5,a5,s3
 8007b46:	0807a783          	lw	a5,128(a5)
 8007b4a:	ff4798e3          	bne	a5,s4,8007b3a <__call_exitprocs+0x5c>
 8007b4e:	4058                	lw	a4,4(s0)
 8007b50:	40dc                	lw	a5,4(s1)
 8007b52:	177d                	addi	a4,a4,-1
 8007b54:	03271863          	bne	a4,s2,8007b84 <__call_exitprocs+0xa6>
 8007b58:	01242223          	sw	s2,4(s0)
 8007b5c:	dff9                	beqz	a5,8007b3a <__call_exitprocs+0x5c>
 8007b5e:	00442c03          	lw	s8,4(s0)
 8007b62:	00098863          	beqz	s3,8007b72 <__call_exitprocs+0x94>
 8007b66:	1009a683          	lw	a3,256(s3)
 8007b6a:	012b9733          	sll	a4,s7,s2
 8007b6e:	8ef9                	and	a3,a3,a4
 8007b70:	ee89                	bnez	a3,8007b8a <__call_exitprocs+0xac>
 8007b72:	9782                	jalr	a5
 8007b74:	4058                	lw	a4,4(s0)
 8007b76:	000aa783          	lw	a5,0(s5)
 8007b7a:	f98714e3          	bne	a4,s8,8007b02 <__call_exitprocs+0x24>
 8007b7e:	faf40ee3          	beq	s0,a5,8007b3a <__call_exitprocs+0x5c>
 8007b82:	b741                	j	8007b02 <__call_exitprocs+0x24>
 8007b84:	0004a223          	sw	zero,4(s1)
 8007b88:	bfd1                	j	8007b5c <__call_exitprocs+0x7e>
 8007b8a:	00291693          	slli	a3,s2,0x2
 8007b8e:	96ce                	add	a3,a3,s3
 8007b90:	428c                	lw	a1,0(a3)
 8007b92:	1049a683          	lw	a3,260(s3)
 8007b96:	8f75                	and	a4,a4,a3
 8007b98:	e701                	bnez	a4,8007ba0 <__call_exitprocs+0xc2>
 8007b9a:	855a                	mv	a0,s6
 8007b9c:	9782                	jalr	a5
 8007b9e:	bfd9                	j	8007b74 <__call_exitprocs+0x96>
 8007ba0:	852e                	mv	a0,a1
 8007ba2:	9782                	jalr	a5
 8007ba4:	bfc1                	j	8007b74 <__call_exitprocs+0x96>

08007ba6 <_free_r>:
 8007ba6:	c9dd                	beqz	a1,8007c5c <_free_r+0xb6>
 8007ba8:	ffc5a783          	lw	a5,-4(a1)
 8007bac:	1141                	addi	sp,sp,-16
 8007bae:	c422                	sw	s0,8(sp)
 8007bb0:	c606                	sw	ra,12(sp)
 8007bb2:	c226                	sw	s1,4(sp)
 8007bb4:	ffc58413          	addi	s0,a1,-4
 8007bb8:	0007d363          	bgez	a5,8007bbe <_free_r+0x18>
 8007bbc:	943e                	add	s0,s0,a5
 8007bbe:	84aa                	mv	s1,a0
 8007bc0:	00001097          	auipc	ra,0x1
 8007bc4:	96c080e7          	jalr	-1684(ra) # 800852c <__malloc_lock>
 8007bc8:	17ff9797          	auipc	a5,0x17ff9
 8007bcc:	98c78793          	addi	a5,a5,-1652 # 20000554 <__malloc_free_list>
 8007bd0:	439c                	lw	a5,0(a5)
 8007bd2:	e385                	bnez	a5,8007bf2 <_free_r+0x4c>
 8007bd4:	00042223          	sw	zero,4(s0)
 8007bd8:	17ff9797          	auipc	a5,0x17ff9
 8007bdc:	9687ae23          	sw	s0,-1668(a5) # 20000554 <__malloc_free_list>
 8007be0:	4422                	lw	s0,8(sp)
 8007be2:	40b2                	lw	ra,12(sp)
 8007be4:	8526                	mv	a0,s1
 8007be6:	4492                	lw	s1,4(sp)
 8007be8:	0141                	addi	sp,sp,16
 8007bea:	00001317          	auipc	t1,0x1
 8007bee:	94430067          	jr	-1724(t1) # 800852e <__malloc_unlock>
 8007bf2:	00f47e63          	bgeu	s0,a5,8007c0e <_free_r+0x68>
 8007bf6:	4014                	lw	a3,0(s0)
 8007bf8:	00d40733          	add	a4,s0,a3
 8007bfc:	00e79663          	bne	a5,a4,8007c08 <_free_r+0x62>
 8007c00:	4398                	lw	a4,0(a5)
 8007c02:	43dc                	lw	a5,4(a5)
 8007c04:	9736                	add	a4,a4,a3
 8007c06:	c018                	sw	a4,0(s0)
 8007c08:	c05c                	sw	a5,4(s0)
 8007c0a:	b7f9                	j	8007bd8 <_free_r+0x32>
 8007c0c:	87ba                	mv	a5,a4
 8007c0e:	43d8                	lw	a4,4(a5)
 8007c10:	c319                	beqz	a4,8007c16 <_free_r+0x70>
 8007c12:	fee47de3          	bgeu	s0,a4,8007c0c <_free_r+0x66>
 8007c16:	4394                	lw	a3,0(a5)
 8007c18:	00d78633          	add	a2,a5,a3
 8007c1c:	00861f63          	bne	a2,s0,8007c3a <_free_r+0x94>
 8007c20:	4010                	lw	a2,0(s0)
 8007c22:	96b2                	add	a3,a3,a2
 8007c24:	c394                	sw	a3,0(a5)
 8007c26:	00d78633          	add	a2,a5,a3
 8007c2a:	fac71be3          	bne	a4,a2,8007be0 <_free_r+0x3a>
 8007c2e:	4310                	lw	a2,0(a4)
 8007c30:	4358                	lw	a4,4(a4)
 8007c32:	96b2                	add	a3,a3,a2
 8007c34:	c394                	sw	a3,0(a5)
 8007c36:	c3d8                	sw	a4,4(a5)
 8007c38:	b765                	j	8007be0 <_free_r+0x3a>
 8007c3a:	00c47563          	bgeu	s0,a2,8007c44 <_free_r+0x9e>
 8007c3e:	47b1                	li	a5,12
 8007c40:	c09c                	sw	a5,0(s1)
 8007c42:	bf79                	j	8007be0 <_free_r+0x3a>
 8007c44:	4010                	lw	a2,0(s0)
 8007c46:	00c406b3          	add	a3,s0,a2
 8007c4a:	00d71663          	bne	a4,a3,8007c56 <_free_r+0xb0>
 8007c4e:	4314                	lw	a3,0(a4)
 8007c50:	4358                	lw	a4,4(a4)
 8007c52:	96b2                	add	a3,a3,a2
 8007c54:	c014                	sw	a3,0(s0)
 8007c56:	c058                	sw	a4,4(s0)
 8007c58:	c3c0                	sw	s0,4(a5)
 8007c5a:	b759                	j	8007be0 <_free_r+0x3a>
 8007c5c:	8082                	ret

08007c5e <_malloc_r>:
 8007c5e:	1101                	addi	sp,sp,-32
 8007c60:	ca26                	sw	s1,20(sp)
 8007c62:	00358493          	addi	s1,a1,3
 8007c66:	98f1                	andi	s1,s1,-4
 8007c68:	ce06                	sw	ra,28(sp)
 8007c6a:	cc22                	sw	s0,24(sp)
 8007c6c:	c84a                	sw	s2,16(sp)
 8007c6e:	c64e                	sw	s3,12(sp)
 8007c70:	04a1                	addi	s1,s1,8
 8007c72:	47b1                	li	a5,12
 8007c74:	06f4f363          	bgeu	s1,a5,8007cda <_malloc_r+0x7c>
 8007c78:	44b1                	li	s1,12
 8007c7a:	06b4e263          	bltu	s1,a1,8007cde <_malloc_r+0x80>
 8007c7e:	892a                	mv	s2,a0
 8007c80:	00001097          	auipc	ra,0x1
 8007c84:	8ac080e7          	jalr	-1876(ra) # 800852c <__malloc_lock>
 8007c88:	17ff9797          	auipc	a5,0x17ff9
 8007c8c:	8cc78793          	addi	a5,a5,-1844 # 20000554 <__malloc_free_list>
 8007c90:	4398                	lw	a4,0(a5)
 8007c92:	843a                	mv	s0,a4
 8007c94:	ec39                	bnez	s0,8007cf2 <_malloc_r+0x94>
 8007c96:	17ff9797          	auipc	a5,0x17ff9
 8007c9a:	8c278793          	addi	a5,a5,-1854 # 20000558 <__malloc_sbrk_start>
 8007c9e:	439c                	lw	a5,0(a5)
 8007ca0:	eb99                	bnez	a5,8007cb6 <_malloc_r+0x58>
 8007ca2:	4581                	li	a1,0
 8007ca4:	854a                	mv	a0,s2
 8007ca6:	00001097          	auipc	ra,0x1
 8007caa:	810080e7          	jalr	-2032(ra) # 80084b6 <_sbrk_r>
 8007cae:	17ff9797          	auipc	a5,0x17ff9
 8007cb2:	8aa7a523          	sw	a0,-1878(a5) # 20000558 <__malloc_sbrk_start>
 8007cb6:	85a6                	mv	a1,s1
 8007cb8:	854a                	mv	a0,s2
 8007cba:	00000097          	auipc	ra,0x0
 8007cbe:	7fc080e7          	jalr	2044(ra) # 80084b6 <_sbrk_r>
 8007cc2:	59fd                	li	s3,-1
 8007cc4:	07351f63          	bne	a0,s3,8007d42 <_malloc_r+0xe4>
 8007cc8:	47b1                	li	a5,12
 8007cca:	00f92023          	sw	a5,0(s2)
 8007cce:	854a                	mv	a0,s2
 8007cd0:	00001097          	auipc	ra,0x1
 8007cd4:	85e080e7          	jalr	-1954(ra) # 800852e <__malloc_unlock>
 8007cd8:	a029                	j	8007ce2 <_malloc_r+0x84>
 8007cda:	fa04d0e3          	bgez	s1,8007c7a <_malloc_r+0x1c>
 8007cde:	47b1                	li	a5,12
 8007ce0:	c11c                	sw	a5,0(a0)
 8007ce2:	4501                	li	a0,0
 8007ce4:	40f2                	lw	ra,28(sp)
 8007ce6:	4462                	lw	s0,24(sp)
 8007ce8:	44d2                	lw	s1,20(sp)
 8007cea:	4942                	lw	s2,16(sp)
 8007cec:	49b2                	lw	s3,12(sp)
 8007cee:	6105                	addi	sp,sp,32
 8007cf0:	8082                	ret
 8007cf2:	401c                	lw	a5,0(s0)
 8007cf4:	8f85                	sub	a5,a5,s1
 8007cf6:	0407c363          	bltz	a5,8007d3c <_malloc_r+0xde>
 8007cfa:	46ad                	li	a3,11
 8007cfc:	00f6f663          	bgeu	a3,a5,8007d08 <_malloc_r+0xaa>
 8007d00:	c01c                	sw	a5,0(s0)
 8007d02:	943e                	add	s0,s0,a5
 8007d04:	c004                	sw	s1,0(s0)
 8007d06:	a801                	j	8007d16 <_malloc_r+0xb8>
 8007d08:	405c                	lw	a5,4(s0)
 8007d0a:	02871763          	bne	a4,s0,8007d38 <_malloc_r+0xda>
 8007d0e:	17ff9717          	auipc	a4,0x17ff9
 8007d12:	84f72323          	sw	a5,-1978(a4) # 20000554 <__malloc_free_list>
 8007d16:	854a                	mv	a0,s2
 8007d18:	00001097          	auipc	ra,0x1
 8007d1c:	816080e7          	jalr	-2026(ra) # 800852e <__malloc_unlock>
 8007d20:	00b40513          	addi	a0,s0,11
 8007d24:	00440793          	addi	a5,s0,4
 8007d28:	9961                	andi	a0,a0,-8
 8007d2a:	40f50733          	sub	a4,a0,a5
 8007d2e:	db5d                	beqz	a4,8007ce4 <_malloc_r+0x86>
 8007d30:	943a                	add	s0,s0,a4
 8007d32:	8f89                	sub	a5,a5,a0
 8007d34:	c01c                	sw	a5,0(s0)
 8007d36:	b77d                	j	8007ce4 <_malloc_r+0x86>
 8007d38:	c35c                	sw	a5,4(a4)
 8007d3a:	bff1                	j	8007d16 <_malloc_r+0xb8>
 8007d3c:	8722                	mv	a4,s0
 8007d3e:	4040                	lw	s0,4(s0)
 8007d40:	bf91                	j	8007c94 <_malloc_r+0x36>
 8007d42:	00350413          	addi	s0,a0,3
 8007d46:	9871                	andi	s0,s0,-4
 8007d48:	fa850ee3          	beq	a0,s0,8007d04 <_malloc_r+0xa6>
 8007d4c:	40a405b3          	sub	a1,s0,a0
 8007d50:	854a                	mv	a0,s2
 8007d52:	00000097          	auipc	ra,0x0
 8007d56:	764080e7          	jalr	1892(ra) # 80084b6 <_sbrk_r>
 8007d5a:	fb3515e3          	bne	a0,s3,8007d04 <_malloc_r+0xa6>
 8007d5e:	b7ad                	j	8007cc8 <_malloc_r+0x6a>

08007d60 <__ssputs_r>:
 8007d60:	1101                	addi	sp,sp,-32
 8007d62:	c84a                	sw	s2,16(sp)
 8007d64:	0085a903          	lw	s2,8(a1)
 8007d68:	cc22                	sw	s0,24(sp)
 8007d6a:	c452                	sw	s4,8(sp)
 8007d6c:	c05a                	sw	s6,0(sp)
 8007d6e:	ce06                	sw	ra,28(sp)
 8007d70:	ca26                	sw	s1,20(sp)
 8007d72:	c64e                	sw	s3,12(sp)
 8007d74:	c256                	sw	s5,4(sp)
 8007d76:	842e                	mv	s0,a1
 8007d78:	8b32                	mv	s6,a2
 8007d7a:	8a36                	mv	s4,a3
 8007d7c:	0b26e263          	bltu	a3,s2,8007e20 <__ssputs_r+0xc0>
 8007d80:	00c5d783          	lhu	a5,12(a1)
 8007d84:	4807f713          	andi	a4,a5,1152
 8007d88:	cb51                	beqz	a4,8007e1c <__ssputs_r+0xbc>
 8007d8a:	4004                	lw	s1,0(s0)
 8007d8c:	498c                	lw	a1,16(a1)
 8007d8e:	4858                	lw	a4,20(s0)
 8007d90:	8aaa                	mv	s5,a0
 8007d92:	40b489b3          	sub	s3,s1,a1
 8007d96:	448d                	li	s1,3
 8007d98:	02e484b3          	mul	s1,s1,a4
 8007d9c:	4709                	li	a4,2
 8007d9e:	02e4c4b3          	div	s1,s1,a4
 8007da2:	00168713          	addi	a4,a3,1
 8007da6:	974e                	add	a4,a4,s3
 8007da8:	00e4f363          	bgeu	s1,a4,8007dae <__ssputs_r+0x4e>
 8007dac:	84ba                	mv	s1,a4
 8007dae:	4007f793          	andi	a5,a5,1024
 8007db2:	cbc9                	beqz	a5,8007e44 <__ssputs_r+0xe4>
 8007db4:	85a6                	mv	a1,s1
 8007db6:	8556                	mv	a0,s5
 8007db8:	00000097          	auipc	ra,0x0
 8007dbc:	ea6080e7          	jalr	-346(ra) # 8007c5e <_malloc_r>
 8007dc0:	892a                	mv	s2,a0
 8007dc2:	e50d                	bnez	a0,8007dec <__ssputs_r+0x8c>
 8007dc4:	47b1                	li	a5,12
 8007dc6:	00faa023          	sw	a5,0(s5)
 8007dca:	00c45783          	lhu	a5,12(s0)
 8007dce:	557d                	li	a0,-1
 8007dd0:	0407e793          	ori	a5,a5,64
 8007dd4:	00f41623          	sh	a5,12(s0)
 8007dd8:	40f2                	lw	ra,28(sp)
 8007dda:	4462                	lw	s0,24(sp)
 8007ddc:	44d2                	lw	s1,20(sp)
 8007dde:	4942                	lw	s2,16(sp)
 8007de0:	49b2                	lw	s3,12(sp)
 8007de2:	4a22                	lw	s4,8(sp)
 8007de4:	4a92                	lw	s5,4(sp)
 8007de6:	4b02                	lw	s6,0(sp)
 8007de8:	6105                	addi	sp,sp,32
 8007dea:	8082                	ret
 8007dec:	480c                	lw	a1,16(s0)
 8007dee:	864e                	mv	a2,s3
 8007df0:	00000097          	auipc	ra,0x0
 8007df4:	bc4080e7          	jalr	-1084(ra) # 80079b4 <memcpy>
 8007df8:	00c45783          	lhu	a5,12(s0)
 8007dfc:	b7f7f793          	andi	a5,a5,-1153
 8007e00:	0807e793          	ori	a5,a5,128
 8007e04:	00f41623          	sh	a5,12(s0)
 8007e08:	01242823          	sw	s2,16(s0)
 8007e0c:	c844                	sw	s1,20(s0)
 8007e0e:	994e                	add	s2,s2,s3
 8007e10:	413484b3          	sub	s1,s1,s3
 8007e14:	01242023          	sw	s2,0(s0)
 8007e18:	c404                	sw	s1,8(s0)
 8007e1a:	8952                	mv	s2,s4
 8007e1c:	012a7363          	bgeu	s4,s2,8007e22 <__ssputs_r+0xc2>
 8007e20:	8952                	mv	s2,s4
 8007e22:	4008                	lw	a0,0(s0)
 8007e24:	864a                	mv	a2,s2
 8007e26:	85da                	mv	a1,s6
 8007e28:	00000097          	auipc	ra,0x0
 8007e2c:	6de080e7          	jalr	1758(ra) # 8008506 <memmove>
 8007e30:	441c                	lw	a5,8(s0)
 8007e32:	4501                	li	a0,0
 8007e34:	412787b3          	sub	a5,a5,s2
 8007e38:	c41c                	sw	a5,8(s0)
 8007e3a:	401c                	lw	a5,0(s0)
 8007e3c:	993e                	add	s2,s2,a5
 8007e3e:	01242023          	sw	s2,0(s0)
 8007e42:	bf59                	j	8007dd8 <__ssputs_r+0x78>
 8007e44:	8626                	mv	a2,s1
 8007e46:	8556                	mv	a0,s5
 8007e48:	00000097          	auipc	ra,0x0
 8007e4c:	6e8080e7          	jalr	1768(ra) # 8008530 <_realloc_r>
 8007e50:	892a                	mv	s2,a0
 8007e52:	f95d                	bnez	a0,8007e08 <__ssputs_r+0xa8>
 8007e54:	480c                	lw	a1,16(s0)
 8007e56:	8556                	mv	a0,s5
 8007e58:	00000097          	auipc	ra,0x0
 8007e5c:	d4e080e7          	jalr	-690(ra) # 8007ba6 <_free_r>
 8007e60:	b795                	j	8007dc4 <__ssputs_r+0x64>

08007e62 <_svfiprintf_r>:
 8007e62:	00c5d783          	lhu	a5,12(a1)
 8007e66:	7171                	addi	sp,sp,-176
 8007e68:	d326                	sw	s1,164(sp)
 8007e6a:	d14a                	sw	s2,160(sp)
 8007e6c:	cf4e                	sw	s3,156(sp)
 8007e6e:	d706                	sw	ra,172(sp)
 8007e70:	d522                	sw	s0,168(sp)
 8007e72:	cd52                	sw	s4,152(sp)
 8007e74:	cb56                	sw	s5,148(sp)
 8007e76:	c95a                	sw	s6,144(sp)
 8007e78:	c75e                	sw	s7,140(sp)
 8007e7a:	c562                	sw	s8,136(sp)
 8007e7c:	c366                	sw	s9,132(sp)
 8007e7e:	0807f793          	andi	a5,a5,128
 8007e82:	89aa                	mv	s3,a0
 8007e84:	892e                	mv	s2,a1
 8007e86:	84b2                	mv	s1,a2
 8007e88:	c7a9                	beqz	a5,8007ed2 <_svfiprintf_r+0x70>
 8007e8a:	499c                	lw	a5,16(a1)
 8007e8c:	e3b9                	bnez	a5,8007ed2 <_svfiprintf_r+0x70>
 8007e8e:	04000593          	li	a1,64
 8007e92:	c636                	sw	a3,12(sp)
 8007e94:	00000097          	auipc	ra,0x0
 8007e98:	dca080e7          	jalr	-566(ra) # 8007c5e <_malloc_r>
 8007e9c:	00a92023          	sw	a0,0(s2)
 8007ea0:	00a92823          	sw	a0,16(s2)
 8007ea4:	46b2                	lw	a3,12(sp)
 8007ea6:	e115                	bnez	a0,8007eca <_svfiprintf_r+0x68>
 8007ea8:	47b1                	li	a5,12
 8007eaa:	00f9a023          	sw	a5,0(s3)
 8007eae:	557d                	li	a0,-1
 8007eb0:	50ba                	lw	ra,172(sp)
 8007eb2:	542a                	lw	s0,168(sp)
 8007eb4:	549a                	lw	s1,164(sp)
 8007eb6:	590a                	lw	s2,160(sp)
 8007eb8:	49fa                	lw	s3,156(sp)
 8007eba:	4a6a                	lw	s4,152(sp)
 8007ebc:	4ada                	lw	s5,148(sp)
 8007ebe:	4b4a                	lw	s6,144(sp)
 8007ec0:	4bba                	lw	s7,140(sp)
 8007ec2:	4c2a                	lw	s8,136(sp)
 8007ec4:	4c9a                	lw	s9,132(sp)
 8007ec6:	614d                	addi	sp,sp,176
 8007ec8:	8082                	ret
 8007eca:	04000793          	li	a5,64
 8007ece:	00f92a23          	sw	a5,20(s2)
 8007ed2:	02000793          	li	a5,32
 8007ed6:	02f10ca3          	sb	a5,57(sp)
 8007eda:	03000793          	li	a5,48
 8007ede:	da02                	sw	zero,52(sp)
 8007ee0:	02f10d23          	sb	a5,58(sp)
 8007ee4:	ce36                	sw	a3,28(sp)
 8007ee6:	02500b93          	li	s7,37
 8007eea:	ffff8a97          	auipc	s5,0xffff8
 8007eee:	766a8a93          	addi	s5,s5,1894 # 8000650 <__sf_fake_stdout+0x20>
 8007ef2:	4c05                	li	s8,1
 8007ef4:	4b29                	li	s6,10
 8007ef6:	8426                	mv	s0,s1
 8007ef8:	00044783          	lbu	a5,0(s0)
 8007efc:	c399                	beqz	a5,8007f02 <_svfiprintf_r+0xa0>
 8007efe:	0b779163          	bne	a5,s7,8007fa0 <_svfiprintf_r+0x13e>
 8007f02:	40940cb3          	sub	s9,s0,s1
 8007f06:	020c8063          	beqz	s9,8007f26 <_svfiprintf_r+0xc4>
 8007f0a:	86e6                	mv	a3,s9
 8007f0c:	8626                	mv	a2,s1
 8007f0e:	85ca                	mv	a1,s2
 8007f10:	854e                	mv	a0,s3
 8007f12:	00000097          	auipc	ra,0x0
 8007f16:	e4e080e7          	jalr	-434(ra) # 8007d60 <__ssputs_r>
 8007f1a:	57fd                	li	a5,-1
 8007f1c:	1af50a63          	beq	a0,a5,80080d0 <_svfiprintf_r+0x26e>
 8007f20:	56d2                	lw	a3,52(sp)
 8007f22:	96e6                	add	a3,a3,s9
 8007f24:	da36                	sw	a3,52(sp)
 8007f26:	00044783          	lbu	a5,0(s0)
 8007f2a:	1a078363          	beqz	a5,80080d0 <_svfiprintf_r+0x26e>
 8007f2e:	57fd                	li	a5,-1
 8007f30:	00140493          	addi	s1,s0,1
 8007f34:	d002                	sw	zero,32(sp)
 8007f36:	d602                	sw	zero,44(sp)
 8007f38:	d23e                	sw	a5,36(sp)
 8007f3a:	d402                	sw	zero,40(sp)
 8007f3c:	060101a3          	sb	zero,99(sp)
 8007f40:	dc82                	sw	zero,120(sp)
 8007f42:	0004c583          	lbu	a1,0(s1)
 8007f46:	4615                	li	a2,5
 8007f48:	8556                	mv	a0,s5
 8007f4a:	00000097          	auipc	ra,0x0
 8007f4e:	5a2080e7          	jalr	1442(ra) # 80084ec <memchr>
 8007f52:	00148413          	addi	s0,s1,1
 8007f56:	5782                	lw	a5,32(sp)
 8007f58:	e531                	bnez	a0,8007fa4 <_svfiprintf_r+0x142>
 8007f5a:	0107f713          	andi	a4,a5,16
 8007f5e:	c709                	beqz	a4,8007f68 <_svfiprintf_r+0x106>
 8007f60:	02000713          	li	a4,32
 8007f64:	06e101a3          	sb	a4,99(sp)
 8007f68:	0087f713          	andi	a4,a5,8
 8007f6c:	c709                	beqz	a4,8007f76 <_svfiprintf_r+0x114>
 8007f6e:	02b00713          	li	a4,43
 8007f72:	06e101a3          	sb	a4,99(sp)
 8007f76:	0004c683          	lbu	a3,0(s1)
 8007f7a:	02a00713          	li	a4,42
 8007f7e:	02e68b63          	beq	a3,a4,8007fb4 <_svfiprintf_r+0x152>
 8007f82:	57b2                	lw	a5,44(sp)
 8007f84:	8426                	mv	s0,s1
 8007f86:	4681                	li	a3,0
 8007f88:	4625                	li	a2,9
 8007f8a:	00044703          	lbu	a4,0(s0)
 8007f8e:	00140593          	addi	a1,s0,1
 8007f92:	fd070713          	addi	a4,a4,-48
 8007f96:	06e67463          	bgeu	a2,a4,8007ffe <_svfiprintf_r+0x19c>
 8007f9a:	c68d                	beqz	a3,8007fc4 <_svfiprintf_r+0x162>
 8007f9c:	d63e                	sw	a5,44(sp)
 8007f9e:	a01d                	j	8007fc4 <_svfiprintf_r+0x162>
 8007fa0:	0405                	addi	s0,s0,1
 8007fa2:	bf99                	j	8007ef8 <_svfiprintf_r+0x96>
 8007fa4:	41550533          	sub	a0,a0,s5
 8007fa8:	00ac1533          	sll	a0,s8,a0
 8007fac:	8fc9                	or	a5,a5,a0
 8007fae:	d03e                	sw	a5,32(sp)
 8007fb0:	84a2                	mv	s1,s0
 8007fb2:	bf41                	j	8007f42 <_svfiprintf_r+0xe0>
 8007fb4:	4772                	lw	a4,28(sp)
 8007fb6:	00470693          	addi	a3,a4,4
 8007fba:	4318                	lw	a4,0(a4)
 8007fbc:	ce36                	sw	a3,28(sp)
 8007fbe:	02074963          	bltz	a4,8007ff0 <_svfiprintf_r+0x18e>
 8007fc2:	d63a                	sw	a4,44(sp)
 8007fc4:	00044703          	lbu	a4,0(s0)
 8007fc8:	02e00793          	li	a5,46
 8007fcc:	04f71f63          	bne	a4,a5,800802a <_svfiprintf_r+0x1c8>
 8007fd0:	00144703          	lbu	a4,1(s0)
 8007fd4:	02a00793          	li	a5,42
 8007fd8:	02f71b63          	bne	a4,a5,800800e <_svfiprintf_r+0x1ac>
 8007fdc:	47f2                	lw	a5,28(sp)
 8007fde:	0409                	addi	s0,s0,2
 8007fe0:	00478713          	addi	a4,a5,4
 8007fe4:	439c                	lw	a5,0(a5)
 8007fe6:	ce3a                	sw	a4,28(sp)
 8007fe8:	0207c163          	bltz	a5,800800a <_svfiprintf_r+0x1a8>
 8007fec:	d23e                	sw	a5,36(sp)
 8007fee:	a835                	j	800802a <_svfiprintf_r+0x1c8>
 8007ff0:	40e00733          	neg	a4,a4
 8007ff4:	0027e793          	ori	a5,a5,2
 8007ff8:	d63a                	sw	a4,44(sp)
 8007ffa:	d03e                	sw	a5,32(sp)
 8007ffc:	b7e1                	j	8007fc4 <_svfiprintf_r+0x162>
 8007ffe:	036787b3          	mul	a5,a5,s6
 8008002:	4685                	li	a3,1
 8008004:	842e                	mv	s0,a1
 8008006:	97ba                	add	a5,a5,a4
 8008008:	b749                	j	8007f8a <_svfiprintf_r+0x128>
 800800a:	57fd                	li	a5,-1
 800800c:	b7c5                	j	8007fec <_svfiprintf_r+0x18a>
 800800e:	0405                	addi	s0,s0,1
 8008010:	d202                	sw	zero,36(sp)
 8008012:	4681                	li	a3,0
 8008014:	4781                	li	a5,0
 8008016:	4625                	li	a2,9
 8008018:	00044703          	lbu	a4,0(s0)
 800801c:	00140593          	addi	a1,s0,1
 8008020:	fd070713          	addi	a4,a4,-48
 8008024:	06e67c63          	bgeu	a2,a4,800809c <_svfiprintf_r+0x23a>
 8008028:	f2f1                	bnez	a3,8007fec <_svfiprintf_r+0x18a>
 800802a:	00044583          	lbu	a1,0(s0)
 800802e:	460d                	li	a2,3
 8008030:	ffff8517          	auipc	a0,0xffff8
 8008034:	62850513          	addi	a0,a0,1576 # 8000658 <__sf_fake_stdout+0x28>
 8008038:	00000097          	auipc	ra,0x0
 800803c:	4b4080e7          	jalr	1204(ra) # 80084ec <memchr>
 8008040:	cd11                	beqz	a0,800805c <_svfiprintf_r+0x1fa>
 8008042:	ffff8797          	auipc	a5,0xffff8
 8008046:	61678793          	addi	a5,a5,1558 # 8000658 <__sf_fake_stdout+0x28>
 800804a:	8d1d                	sub	a0,a0,a5
 800804c:	04000793          	li	a5,64
 8008050:	00a797b3          	sll	a5,a5,a0
 8008054:	5502                	lw	a0,32(sp)
 8008056:	0405                	addi	s0,s0,1
 8008058:	8d5d                	or	a0,a0,a5
 800805a:	d02a                	sw	a0,32(sp)
 800805c:	00044583          	lbu	a1,0(s0)
 8008060:	4619                	li	a2,6
 8008062:	ffff8517          	auipc	a0,0xffff8
 8008066:	5fa50513          	addi	a0,a0,1530 # 800065c <__sf_fake_stdout+0x2c>
 800806a:	00140493          	addi	s1,s0,1
 800806e:	02b10c23          	sb	a1,56(sp)
 8008072:	00000097          	auipc	ra,0x0
 8008076:	47a080e7          	jalr	1146(ra) # 80084ec <memchr>
 800807a:	c525                	beqz	a0,80080e2 <_svfiprintf_r+0x280>
 800807c:	f7ff8797          	auipc	a5,0xf7ff8
 8008080:	f8478793          	addi	a5,a5,-124 # 0 <__dbg_stack_size>
 8008084:	e795                	bnez	a5,80080b0 <_svfiprintf_r+0x24e>
 8008086:	5702                	lw	a4,32(sp)
 8008088:	47f2                	lw	a5,28(sp)
 800808a:	10077713          	andi	a4,a4,256
 800808e:	cf09                	beqz	a4,80080a8 <_svfiprintf_r+0x246>
 8008090:	0791                	addi	a5,a5,4
 8008092:	ce3e                	sw	a5,28(sp)
 8008094:	57d2                	lw	a5,52(sp)
 8008096:	97d2                	add	a5,a5,s4
 8008098:	da3e                	sw	a5,52(sp)
 800809a:	bdb1                	j	8007ef6 <_svfiprintf_r+0x94>
 800809c:	036787b3          	mul	a5,a5,s6
 80080a0:	4685                	li	a3,1
 80080a2:	842e                	mv	s0,a1
 80080a4:	97ba                	add	a5,a5,a4
 80080a6:	bf8d                	j	8008018 <_svfiprintf_r+0x1b6>
 80080a8:	079d                	addi	a5,a5,7
 80080aa:	9be1                	andi	a5,a5,-8
 80080ac:	07a1                	addi	a5,a5,8
 80080ae:	b7d5                	j	8008092 <_svfiprintf_r+0x230>
 80080b0:	0878                	addi	a4,sp,28
 80080b2:	00000697          	auipc	a3,0x0
 80080b6:	cae68693          	addi	a3,a3,-850 # 8007d60 <__ssputs_r>
 80080ba:	864a                	mv	a2,s2
 80080bc:	100c                	addi	a1,sp,32
 80080be:	854e                	mv	a0,s3
 80080c0:	00000097          	auipc	ra,0x0
 80080c4:	000000e7          	jalr	zero # 0 <__dbg_stack_size>
 80080c8:	57fd                	li	a5,-1
 80080ca:	8a2a                	mv	s4,a0
 80080cc:	fcf514e3          	bne	a0,a5,8008094 <_svfiprintf_r+0x232>
 80080d0:	00c95783          	lhu	a5,12(s2)
 80080d4:	557d                	li	a0,-1
 80080d6:	0407f793          	andi	a5,a5,64
 80080da:	dc079be3          	bnez	a5,8007eb0 <_svfiprintf_r+0x4e>
 80080de:	5552                	lw	a0,52(sp)
 80080e0:	bbc1                	j	8007eb0 <_svfiprintf_r+0x4e>
 80080e2:	0878                	addi	a4,sp,28
 80080e4:	00000697          	auipc	a3,0x0
 80080e8:	c7c68693          	addi	a3,a3,-900 # 8007d60 <__ssputs_r>
 80080ec:	864a                	mv	a2,s2
 80080ee:	100c                	addi	a1,sp,32
 80080f0:	854e                	mv	a0,s3
 80080f2:	00000097          	auipc	ra,0x0
 80080f6:	116080e7          	jalr	278(ra) # 8008208 <_printf_i>
 80080fa:	b7f9                	j	80080c8 <_svfiprintf_r+0x266>

080080fc <_printf_common>:
 80080fc:	7179                	addi	sp,sp,-48
 80080fe:	ca56                	sw	s5,20(sp)
 8008100:	499c                	lw	a5,16(a1)
 8008102:	8aba                	mv	s5,a4
 8008104:	4598                	lw	a4,8(a1)
 8008106:	d422                	sw	s0,40(sp)
 8008108:	d226                	sw	s1,36(sp)
 800810a:	ce4e                	sw	s3,28(sp)
 800810c:	cc52                	sw	s4,24(sp)
 800810e:	d606                	sw	ra,44(sp)
 8008110:	d04a                	sw	s2,32(sp)
 8008112:	c85a                	sw	s6,16(sp)
 8008114:	c65e                	sw	s7,12(sp)
 8008116:	89aa                	mv	s3,a0
 8008118:	842e                	mv	s0,a1
 800811a:	84b2                	mv	s1,a2
 800811c:	8a36                	mv	s4,a3
 800811e:	00e7d363          	bge	a5,a4,8008124 <_printf_common+0x28>
 8008122:	87ba                	mv	a5,a4
 8008124:	c09c                	sw	a5,0(s1)
 8008126:	04344703          	lbu	a4,67(s0)
 800812a:	c319                	beqz	a4,8008130 <_printf_common+0x34>
 800812c:	0785                	addi	a5,a5,1
 800812e:	c09c                	sw	a5,0(s1)
 8008130:	401c                	lw	a5,0(s0)
 8008132:	0207f793          	andi	a5,a5,32
 8008136:	c781                	beqz	a5,800813e <_printf_common+0x42>
 8008138:	409c                	lw	a5,0(s1)
 800813a:	0789                	addi	a5,a5,2
 800813c:	c09c                	sw	a5,0(s1)
 800813e:	00042903          	lw	s2,0(s0)
 8008142:	00697913          	andi	s2,s2,6
 8008146:	00091a63          	bnez	s2,800815a <_printf_common+0x5e>
 800814a:	01940b13          	addi	s6,s0,25
 800814e:	5bfd                	li	s7,-1
 8008150:	445c                	lw	a5,12(s0)
 8008152:	4098                	lw	a4,0(s1)
 8008154:	8f99                	sub	a5,a5,a4
 8008156:	04f94c63          	blt	s2,a5,80081ae <_printf_common+0xb2>
 800815a:	401c                	lw	a5,0(s0)
 800815c:	04344683          	lbu	a3,67(s0)
 8008160:	0207f793          	andi	a5,a5,32
 8008164:	00d036b3          	snez	a3,a3
 8008168:	eba5                	bnez	a5,80081d8 <_printf_common+0xdc>
 800816a:	04340613          	addi	a2,s0,67
 800816e:	85d2                	mv	a1,s4
 8008170:	854e                	mv	a0,s3
 8008172:	9a82                	jalr	s5
 8008174:	57fd                	li	a5,-1
 8008176:	04f50363          	beq	a0,a5,80081bc <_printf_common+0xc0>
 800817a:	401c                	lw	a5,0(s0)
 800817c:	4611                	li	a2,4
 800817e:	4098                	lw	a4,0(s1)
 8008180:	8b99                	andi	a5,a5,6
 8008182:	4454                	lw	a3,12(s0)
 8008184:	4481                	li	s1,0
 8008186:	00c79763          	bne	a5,a2,8008194 <_printf_common+0x98>
 800818a:	40e684b3          	sub	s1,a3,a4
 800818e:	0004d363          	bgez	s1,8008194 <_printf_common+0x98>
 8008192:	4481                	li	s1,0
 8008194:	441c                	lw	a5,8(s0)
 8008196:	4818                	lw	a4,16(s0)
 8008198:	00f75463          	bge	a4,a5,80081a0 <_printf_common+0xa4>
 800819c:	8f99                	sub	a5,a5,a4
 800819e:	94be                	add	s1,s1,a5
 80081a0:	4901                	li	s2,0
 80081a2:	0469                	addi	s0,s0,26
 80081a4:	5b7d                	li	s6,-1
 80081a6:	05249863          	bne	s1,s2,80081f6 <_printf_common+0xfa>
 80081aa:	4501                	li	a0,0
 80081ac:	a809                	j	80081be <_printf_common+0xc2>
 80081ae:	4685                	li	a3,1
 80081b0:	865a                	mv	a2,s6
 80081b2:	85d2                	mv	a1,s4
 80081b4:	854e                	mv	a0,s3
 80081b6:	9a82                	jalr	s5
 80081b8:	01751e63          	bne	a0,s7,80081d4 <_printf_common+0xd8>
 80081bc:	557d                	li	a0,-1
 80081be:	50b2                	lw	ra,44(sp)
 80081c0:	5422                	lw	s0,40(sp)
 80081c2:	5492                	lw	s1,36(sp)
 80081c4:	5902                	lw	s2,32(sp)
 80081c6:	49f2                	lw	s3,28(sp)
 80081c8:	4a62                	lw	s4,24(sp)
 80081ca:	4ad2                	lw	s5,20(sp)
 80081cc:	4b42                	lw	s6,16(sp)
 80081ce:	4bb2                	lw	s7,12(sp)
 80081d0:	6145                	addi	sp,sp,48
 80081d2:	8082                	ret
 80081d4:	0905                	addi	s2,s2,1
 80081d6:	bfad                	j	8008150 <_printf_common+0x54>
 80081d8:	00d40733          	add	a4,s0,a3
 80081dc:	03000613          	li	a2,48
 80081e0:	04c701a3          	sb	a2,67(a4)
 80081e4:	04544703          	lbu	a4,69(s0)
 80081e8:	00168793          	addi	a5,a3,1
 80081ec:	97a2                	add	a5,a5,s0
 80081ee:	0689                	addi	a3,a3,2
 80081f0:	04e781a3          	sb	a4,67(a5)
 80081f4:	bf9d                	j	800816a <_printf_common+0x6e>
 80081f6:	4685                	li	a3,1
 80081f8:	8622                	mv	a2,s0
 80081fa:	85d2                	mv	a1,s4
 80081fc:	854e                	mv	a0,s3
 80081fe:	9a82                	jalr	s5
 8008200:	fb650ee3          	beq	a0,s6,80081bc <_printf_common+0xc0>
 8008204:	0905                	addi	s2,s2,1
 8008206:	b745                	j	80081a6 <_printf_common+0xaa>

08008208 <_printf_i>:
 8008208:	7179                	addi	sp,sp,-48
 800820a:	d422                	sw	s0,40(sp)
 800820c:	d226                	sw	s1,36(sp)
 800820e:	d04a                	sw	s2,32(sp)
 8008210:	ce4e                	sw	s3,28(sp)
 8008212:	d606                	sw	ra,44(sp)
 8008214:	cc52                	sw	s4,24(sp)
 8008216:	ca56                	sw	s5,20(sp)
 8008218:	c85a                	sw	s6,16(sp)
 800821a:	89b6                	mv	s3,a3
 800821c:	0185c683          	lbu	a3,24(a1)
 8008220:	06e00793          	li	a5,110
 8008224:	8932                	mv	s2,a2
 8008226:	84aa                	mv	s1,a0
 8008228:	842e                	mv	s0,a1
 800822a:	04358613          	addi	a2,a1,67
 800822e:	1ef68363          	beq	a3,a5,8008414 <_printf_i+0x20c>
 8008232:	06d7e263          	bltu	a5,a3,8008296 <_printf_i+0x8e>
 8008236:	06300793          	li	a5,99
 800823a:	0af68263          	beq	a3,a5,80082de <_printf_i+0xd6>
 800823e:	00d7ed63          	bltu	a5,a3,8008258 <_printf_i+0x50>
 8008242:	1e068d63          	beqz	a3,800843c <_printf_i+0x234>
 8008246:	05800793          	li	a5,88
 800824a:	16f68963          	beq	a3,a5,80083bc <_printf_i+0x1b4>
 800824e:	04240a93          	addi	s5,s0,66
 8008252:	04d40123          	sb	a3,66(s0)
 8008256:	a869                	j	80082f0 <_printf_i+0xe8>
 8008258:	06400793          	li	a5,100
 800825c:	00f68663          	beq	a3,a5,8008268 <_printf_i+0x60>
 8008260:	06900793          	li	a5,105
 8008264:	fef695e3          	bne	a3,a5,800824e <_printf_i+0x46>
 8008268:	401c                	lw	a5,0(s0)
 800826a:	4308                	lw	a0,0(a4)
 800826c:	0807f693          	andi	a3,a5,128
 8008270:	00450593          	addi	a1,a0,4
 8008274:	c2c1                	beqz	a3,80082f4 <_printf_i+0xec>
 8008276:	411c                	lw	a5,0(a0)
 8008278:	c30c                	sw	a1,0(a4)
 800827a:	0007d863          	bgez	a5,800828a <_printf_i+0x82>
 800827e:	02d00713          	li	a4,45
 8008282:	40f007b3          	neg	a5,a5
 8008286:	04e401a3          	sb	a4,67(s0)
 800828a:	ffff8697          	auipc	a3,0xffff8
 800828e:	3da68693          	addi	a3,a3,986 # 8000664 <__sf_fake_stdout+0x34>
 8008292:	4729                	li	a4,10
 8008294:	a065                	j	800833c <_printf_i+0x134>
 8008296:	07300793          	li	a5,115
 800829a:	1af68563          	beq	a3,a5,8008444 <_printf_i+0x23c>
 800829e:	00d7ef63          	bltu	a5,a3,80082bc <_printf_i+0xb4>
 80082a2:	06f00793          	li	a5,111
 80082a6:	04f68f63          	beq	a3,a5,8008304 <_printf_i+0xfc>
 80082aa:	07000793          	li	a5,112
 80082ae:	faf690e3          	bne	a3,a5,800824e <_printf_i+0x46>
 80082b2:	419c                	lw	a5,0(a1)
 80082b4:	0207e793          	ori	a5,a5,32
 80082b8:	c19c                	sw	a5,0(a1)
 80082ba:	a809                	j	80082cc <_printf_i+0xc4>
 80082bc:	07500793          	li	a5,117
 80082c0:	04f68263          	beq	a3,a5,8008304 <_printf_i+0xfc>
 80082c4:	07800793          	li	a5,120
 80082c8:	f8f693e3          	bne	a3,a5,800824e <_printf_i+0x46>
 80082cc:	07800793          	li	a5,120
 80082d0:	04f402a3          	sb	a5,69(s0)
 80082d4:	ffff8697          	auipc	a3,0xffff8
 80082d8:	3a468693          	addi	a3,a3,932 # 8000678 <__sf_fake_stdout+0x48>
 80082dc:	a0f5                	j	80083c8 <_printf_i+0x1c0>
 80082de:	431c                	lw	a5,0(a4)
 80082e0:	04258a93          	addi	s5,a1,66
 80082e4:	00478693          	addi	a3,a5,4
 80082e8:	439c                	lw	a5,0(a5)
 80082ea:	c314                	sw	a3,0(a4)
 80082ec:	04f58123          	sb	a5,66(a1)
 80082f0:	4785                	li	a5,1
 80082f2:	aa9d                	j	8008468 <_printf_i+0x260>
 80082f4:	0407f693          	andi	a3,a5,64
 80082f8:	411c                	lw	a5,0(a0)
 80082fa:	c30c                	sw	a1,0(a4)
 80082fc:	debd                	beqz	a3,800827a <_printf_i+0x72>
 80082fe:	07c2                	slli	a5,a5,0x10
 8008300:	87c1                	srai	a5,a5,0x10
 8008302:	bfa5                	j	800827a <_printf_i+0x72>
 8008304:	400c                	lw	a1,0(s0)
 8008306:	431c                	lw	a5,0(a4)
 8008308:	0805f813          	andi	a6,a1,128
 800830c:	00478513          	addi	a0,a5,4
 8008310:	00080563          	beqz	a6,800831a <_printf_i+0x112>
 8008314:	c308                	sw	a0,0(a4)
 8008316:	439c                	lw	a5,0(a5)
 8008318:	a039                	j	8008326 <_printf_i+0x11e>
 800831a:	0405f593          	andi	a1,a1,64
 800831e:	c308                	sw	a0,0(a4)
 8008320:	d9fd                	beqz	a1,8008316 <_printf_i+0x10e>
 8008322:	0007d783          	lhu	a5,0(a5)
 8008326:	06f00713          	li	a4,111
 800832a:	0ce68d63          	beq	a3,a4,8008404 <_printf_i+0x1fc>
 800832e:	ffff8697          	auipc	a3,0xffff8
 8008332:	33668693          	addi	a3,a3,822 # 8000664 <__sf_fake_stdout+0x34>
 8008336:	4729                	li	a4,10
 8008338:	040401a3          	sb	zero,67(s0)
 800833c:	404c                	lw	a1,4(s0)
 800833e:	c40c                	sw	a1,8(s0)
 8008340:	0005c563          	bltz	a1,800834a <_printf_i+0x142>
 8008344:	4008                	lw	a0,0(s0)
 8008346:	996d                	andi	a0,a0,-5
 8008348:	c008                	sw	a0,0(s0)
 800834a:	e399                	bnez	a5,8008350 <_printf_i+0x148>
 800834c:	8ab2                	mv	s5,a2
 800834e:	cd91                	beqz	a1,800836a <_printf_i+0x162>
 8008350:	8ab2                	mv	s5,a2
 8008352:	02e7f5b3          	remu	a1,a5,a4
 8008356:	1afd                	addi	s5,s5,-1
 8008358:	95b6                	add	a1,a1,a3
 800835a:	0005c583          	lbu	a1,0(a1)
 800835e:	00ba8023          	sb	a1,0(s5)
 8008362:	02e7d5b3          	divu	a1,a5,a4
 8008366:	0ae7f563          	bgeu	a5,a4,8008410 <_printf_i+0x208>
 800836a:	47a1                	li	a5,8
 800836c:	00f71e63          	bne	a4,a5,8008388 <_printf_i+0x180>
 8008370:	401c                	lw	a5,0(s0)
 8008372:	8b85                	andi	a5,a5,1
 8008374:	cb91                	beqz	a5,8008388 <_printf_i+0x180>
 8008376:	4058                	lw	a4,4(s0)
 8008378:	481c                	lw	a5,16(s0)
 800837a:	00e7c763          	blt	a5,a4,8008388 <_printf_i+0x180>
 800837e:	03000793          	li	a5,48
 8008382:	fefa8fa3          	sb	a5,-1(s5)
 8008386:	1afd                	addi	s5,s5,-1
 8008388:	41560633          	sub	a2,a2,s5
 800838c:	c810                	sw	a2,16(s0)
 800838e:	874e                	mv	a4,s3
 8008390:	86ca                	mv	a3,s2
 8008392:	0070                	addi	a2,sp,12
 8008394:	85a2                	mv	a1,s0
 8008396:	8526                	mv	a0,s1
 8008398:	00000097          	auipc	ra,0x0
 800839c:	d64080e7          	jalr	-668(ra) # 80080fc <_printf_common>
 80083a0:	5a7d                	li	s4,-1
 80083a2:	0d451763          	bne	a0,s4,8008470 <_printf_i+0x268>
 80083a6:	557d                	li	a0,-1
 80083a8:	50b2                	lw	ra,44(sp)
 80083aa:	5422                	lw	s0,40(sp)
 80083ac:	5492                	lw	s1,36(sp)
 80083ae:	5902                	lw	s2,32(sp)
 80083b0:	49f2                	lw	s3,28(sp)
 80083b2:	4a62                	lw	s4,24(sp)
 80083b4:	4ad2                	lw	s5,20(sp)
 80083b6:	4b42                	lw	s6,16(sp)
 80083b8:	6145                	addi	sp,sp,48
 80083ba:	8082                	ret
 80083bc:	04d582a3          	sb	a3,69(a1)
 80083c0:	ffff8697          	auipc	a3,0xffff8
 80083c4:	2a468693          	addi	a3,a3,676 # 8000664 <__sf_fake_stdout+0x34>
 80083c8:	400c                	lw	a1,0(s0)
 80083ca:	4308                	lw	a0,0(a4)
 80083cc:	0805f813          	andi	a6,a1,128
 80083d0:	411c                	lw	a5,0(a0)
 80083d2:	0511                	addi	a0,a0,4
 80083d4:	02080063          	beqz	a6,80083f4 <_printf_i+0x1ec>
 80083d8:	c308                	sw	a0,0(a4)
 80083da:	0015f713          	andi	a4,a1,1
 80083de:	c701                	beqz	a4,80083e6 <_printf_i+0x1de>
 80083e0:	0205e593          	ori	a1,a1,32
 80083e4:	c00c                	sw	a1,0(s0)
 80083e6:	4741                	li	a4,16
 80083e8:	fba1                	bnez	a5,8008338 <_printf_i+0x130>
 80083ea:	400c                	lw	a1,0(s0)
 80083ec:	fdf5f593          	andi	a1,a1,-33
 80083f0:	c00c                	sw	a1,0(s0)
 80083f2:	b799                	j	8008338 <_printf_i+0x130>
 80083f4:	0405f813          	andi	a6,a1,64
 80083f8:	c308                	sw	a0,0(a4)
 80083fa:	fe0800e3          	beqz	a6,80083da <_printf_i+0x1d2>
 80083fe:	07c2                	slli	a5,a5,0x10
 8008400:	83c1                	srli	a5,a5,0x10
 8008402:	bfe1                	j	80083da <_printf_i+0x1d2>
 8008404:	ffff8697          	auipc	a3,0xffff8
 8008408:	26068693          	addi	a3,a3,608 # 8000664 <__sf_fake_stdout+0x34>
 800840c:	4721                	li	a4,8
 800840e:	b72d                	j	8008338 <_printf_i+0x130>
 8008410:	87ae                	mv	a5,a1
 8008412:	b781                	j	8008352 <_printf_i+0x14a>
 8008414:	4194                	lw	a3,0(a1)
 8008416:	431c                	lw	a5,0(a4)
 8008418:	49cc                	lw	a1,20(a1)
 800841a:	0806f813          	andi	a6,a3,128
 800841e:	00478513          	addi	a0,a5,4
 8008422:	00080663          	beqz	a6,800842e <_printf_i+0x226>
 8008426:	c308                	sw	a0,0(a4)
 8008428:	439c                	lw	a5,0(a5)
 800842a:	c38c                	sw	a1,0(a5)
 800842c:	a801                	j	800843c <_printf_i+0x234>
 800842e:	c308                	sw	a0,0(a4)
 8008430:	0406f693          	andi	a3,a3,64
 8008434:	439c                	lw	a5,0(a5)
 8008436:	daf5                	beqz	a3,800842a <_printf_i+0x222>
 8008438:	00b79023          	sh	a1,0(a5)
 800843c:	00042823          	sw	zero,16(s0)
 8008440:	8ab2                	mv	s5,a2
 8008442:	b7b1                	j	800838e <_printf_i+0x186>
 8008444:	431c                	lw	a5,0(a4)
 8008446:	41d0                	lw	a2,4(a1)
 8008448:	4581                	li	a1,0
 800844a:	00478693          	addi	a3,a5,4
 800844e:	c314                	sw	a3,0(a4)
 8008450:	0007aa83          	lw	s5,0(a5)
 8008454:	8556                	mv	a0,s5
 8008456:	00000097          	auipc	ra,0x0
 800845a:	096080e7          	jalr	150(ra) # 80084ec <memchr>
 800845e:	c501                	beqz	a0,8008466 <_printf_i+0x25e>
 8008460:	41550533          	sub	a0,a0,s5
 8008464:	c048                	sw	a0,4(s0)
 8008466:	405c                	lw	a5,4(s0)
 8008468:	c81c                	sw	a5,16(s0)
 800846a:	040401a3          	sb	zero,67(s0)
 800846e:	b705                	j	800838e <_printf_i+0x186>
 8008470:	4814                	lw	a3,16(s0)
 8008472:	8656                	mv	a2,s5
 8008474:	85ca                	mv	a1,s2
 8008476:	8526                	mv	a0,s1
 8008478:	9982                	jalr	s3
 800847a:	f34506e3          	beq	a0,s4,80083a6 <_printf_i+0x19e>
 800847e:	401c                	lw	a5,0(s0)
 8008480:	8b89                	andi	a5,a5,2
 8008482:	e78d                	bnez	a5,80084ac <_printf_i+0x2a4>
 8008484:	47b2                	lw	a5,12(sp)
 8008486:	4448                	lw	a0,12(s0)
 8008488:	f2f550e3          	bge	a0,a5,80083a8 <_printf_i+0x1a0>
 800848c:	853e                	mv	a0,a5
 800848e:	bf29                	j	80083a8 <_printf_i+0x1a0>
 8008490:	4685                	li	a3,1
 8008492:	8656                	mv	a2,s5
 8008494:	85ca                	mv	a1,s2
 8008496:	8526                	mv	a0,s1
 8008498:	9982                	jalr	s3
 800849a:	f16506e3          	beq	a0,s6,80083a6 <_printf_i+0x19e>
 800849e:	0a05                	addi	s4,s4,1
 80084a0:	445c                	lw	a5,12(s0)
 80084a2:	4732                	lw	a4,12(sp)
 80084a4:	8f99                	sub	a5,a5,a4
 80084a6:	fefa45e3          	blt	s4,a5,8008490 <_printf_i+0x288>
 80084aa:	bfe9                	j	8008484 <_printf_i+0x27c>
 80084ac:	4a01                	li	s4,0
 80084ae:	01940a93          	addi	s5,s0,25
 80084b2:	5b7d                	li	s6,-1
 80084b4:	b7f5                	j	80084a0 <_printf_i+0x298>

080084b6 <_sbrk_r>:
 80084b6:	1141                	addi	sp,sp,-16
 80084b8:	c422                	sw	s0,8(sp)
 80084ba:	842a                	mv	s0,a0
 80084bc:	852e                	mv	a0,a1
 80084be:	17ffd797          	auipc	a5,0x17ffd
 80084c2:	9807a323          	sw	zero,-1658(a5) # 20004e44 <errno>
 80084c6:	c606                	sw	ra,12(sp)
 80084c8:	ffffa097          	auipc	ra,0xffffa
 80084cc:	818080e7          	jalr	-2024(ra) # 8001ce0 <_sbrk>
 80084d0:	57fd                	li	a5,-1
 80084d2:	00f51963          	bne	a0,a5,80084e4 <_sbrk_r+0x2e>
 80084d6:	17ffd797          	auipc	a5,0x17ffd
 80084da:	96e78793          	addi	a5,a5,-1682 # 20004e44 <errno>
 80084de:	439c                	lw	a5,0(a5)
 80084e0:	c391                	beqz	a5,80084e4 <_sbrk_r+0x2e>
 80084e2:	c01c                	sw	a5,0(s0)
 80084e4:	40b2                	lw	ra,12(sp)
 80084e6:	4422                	lw	s0,8(sp)
 80084e8:	0141                	addi	sp,sp,16
 80084ea:	8082                	ret

080084ec <memchr>:
 80084ec:	0ff5f593          	andi	a1,a1,255
 80084f0:	962a                	add	a2,a2,a0
 80084f2:	00c51463          	bne	a0,a2,80084fa <memchr+0xe>
 80084f6:	4501                	li	a0,0
 80084f8:	8082                	ret
 80084fa:	00054783          	lbu	a5,0(a0)
 80084fe:	feb78de3          	beq	a5,a1,80084f8 <memchr+0xc>
 8008502:	0505                	addi	a0,a0,1
 8008504:	b7fd                	j	80084f2 <memchr+0x6>

08008506 <memmove>:
 8008506:	c215                	beqz	a2,800852a <memmove+0x24>
 8008508:	832a                	mv	t1,a0
 800850a:	4685                	li	a3,1
 800850c:	00b56763          	bltu	a0,a1,800851a <memmove+0x14>
 8008510:	56fd                	li	a3,-1
 8008512:	fff60713          	addi	a4,a2,-1
 8008516:	933a                	add	t1,t1,a4
 8008518:	95ba                	add	a1,a1,a4
 800851a:	00058383          	lb	t2,0(a1)
 800851e:	00730023          	sb	t2,0(t1)
 8008522:	167d                	addi	a2,a2,-1
 8008524:	9336                	add	t1,t1,a3
 8008526:	95b6                	add	a1,a1,a3
 8008528:	fa6d                	bnez	a2,800851a <memmove+0x14>
 800852a:	8082                	ret

0800852c <__malloc_lock>:
 800852c:	8082                	ret

0800852e <__malloc_unlock>:
 800852e:	8082                	ret

08008530 <_realloc_r>:
 8008530:	e591                	bnez	a1,800853c <_realloc_r+0xc>
 8008532:	85b2                	mv	a1,a2
 8008534:	fffff317          	auipc	t1,0xfffff
 8008538:	72a30067          	jr	1834(t1) # 8007c5e <_malloc_r>
 800853c:	1101                	addi	sp,sp,-32
 800853e:	cc22                	sw	s0,24(sp)
 8008540:	ce06                	sw	ra,28(sp)
 8008542:	ca26                	sw	s1,20(sp)
 8008544:	c84a                	sw	s2,16(sp)
 8008546:	c64e                	sw	s3,12(sp)
 8008548:	8432                	mv	s0,a2
 800854a:	ee11                	bnez	a2,8008566 <_realloc_r+0x36>
 800854c:	fffff097          	auipc	ra,0xfffff
 8008550:	65a080e7          	jalr	1626(ra) # 8007ba6 <_free_r>
 8008554:	4901                	li	s2,0
 8008556:	40f2                	lw	ra,28(sp)
 8008558:	4462                	lw	s0,24(sp)
 800855a:	854a                	mv	a0,s2
 800855c:	44d2                	lw	s1,20(sp)
 800855e:	4942                	lw	s2,16(sp)
 8008560:	49b2                	lw	s3,12(sp)
 8008562:	6105                	addi	sp,sp,32
 8008564:	8082                	ret
 8008566:	84ae                	mv	s1,a1
 8008568:	89aa                	mv	s3,a0
 800856a:	00000097          	auipc	ra,0x0
 800856e:	038080e7          	jalr	56(ra) # 80085a2 <_malloc_usable_size_r>
 8008572:	8926                	mv	s2,s1
 8008574:	fe8571e3          	bgeu	a0,s0,8008556 <_realloc_r+0x26>
 8008578:	85a2                	mv	a1,s0
 800857a:	854e                	mv	a0,s3
 800857c:	fffff097          	auipc	ra,0xfffff
 8008580:	6e2080e7          	jalr	1762(ra) # 8007c5e <_malloc_r>
 8008584:	892a                	mv	s2,a0
 8008586:	d961                	beqz	a0,8008556 <_realloc_r+0x26>
 8008588:	85a6                	mv	a1,s1
 800858a:	8622                	mv	a2,s0
 800858c:	fffff097          	auipc	ra,0xfffff
 8008590:	428080e7          	jalr	1064(ra) # 80079b4 <memcpy>
 8008594:	85a6                	mv	a1,s1
 8008596:	854e                	mv	a0,s3
 8008598:	fffff097          	auipc	ra,0xfffff
 800859c:	60e080e7          	jalr	1550(ra) # 8007ba6 <_free_r>
 80085a0:	bf5d                	j	8008556 <_realloc_r+0x26>

080085a2 <_malloc_usable_size_r>:
 80085a2:	ffc5a783          	lw	a5,-4(a1)
 80085a6:	ffc78513          	addi	a0,a5,-4
 80085aa:	0007d563          	bgez	a5,80085b4 <_malloc_usable_size_r+0x12>
 80085ae:	95aa                	add	a1,a1,a0
 80085b0:	419c                	lw	a5,0(a1)
 80085b2:	953e                	add	a0,a0,a5
 80085b4:	8082                	ret
