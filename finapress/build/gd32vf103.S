
build/gd32vf103.elf:     file format elf32-littleriscv
build/gd32vf103.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800015c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00007dd8 memsz 0x00007dd8 flags r-x
    LOAD off    0x00009000 vaddr 0x20000000 paddr 0x08007dd8 align 2**12
         filesz 0x00000500 memsz 0x00000500 flags rw-
    LOAD off    0x00009500 vaddr 0x20000500 paddr 0x20000500 align 2**12
         filesz 0x00000000 memsz 0x00005108 flags rw-
    LOAD off    0x0000a000 vaddr 0x20007000 paddr 0x20005608 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000254  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ilalign      00000000  08000254  08000254  00009500  2**0
                  CONTENTS
  2 .text         00007b46  08000280  08000280  00001280  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sdata2.usbd_language_id_desc 00000004  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sdata2.EP0_MAXLEN 00000004  08007dcc  08007dcc  00008dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .sdata2.USB_SPEED 00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .sdata2._global_impure_ptr 00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000000  08007dd8  08007dd8  00009500  2**0
                  CONTENTS
  8 .dalign       00000000  20000000  20000000  00009500  2**0
                  CONTENTS
  9 .data         00000500  20000000  08007dd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005108  20000500  20000500  00009500  2**3
                  ALLOC
 11 .stack        00001000  20007000  20005608  0000a000  2**0
                  ALLOC
 12 .debug_info   0002ce98  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007212  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000101b7  00000000  00000000  0003d5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001578  00000000  00000000  0004d768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d60  00000000  00000000  0004ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002095e  00000000  00000000  00050a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006dc0  00000000  00000000  0007139e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000028  00000000  00000000  0007815e  2**0
                  CONTENTS, READONLY
 20 .riscv.attributes 0000002b  00000000  00000000  00078186  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003448  00000000  00000000  000781b4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .init	00000000 .init
08000254 l    d  .ilalign	00000000 .ilalign
08000280 l    d  .text	00000000 .text
08007dc8 l    d  .sdata2.usbd_language_id_desc	00000000 .sdata2.usbd_language_id_desc
08007dcc l    d  .sdata2.EP0_MAXLEN	00000000 .sdata2.EP0_MAXLEN
08007dd0 l    d  .sdata2.USB_SPEED	00000000 .sdata2.USB_SPEED
08007dd4 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
08007dd8 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000500 l    d  .bss	00000000 .bss
20007000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/start.o
08000000 l       .init	00000000 vector_base
08000182 l       .init	00000000 _start0800
00000000 l    df *ABS*	00000000 gd32vf103_rcu.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 write_hex.c
00000000 l    df *ABS*	00000000 handlers.c
00000000 l    df *ABS*	00000000 ff.c
08001eca l     F .text	0000001e ld_dword
08001ee8 l     F .text	0000001c st_dword
08001f04 l     F .text	0000001a mem_cmp
08001f1e l     F .text	0000001c clst2sect
08001f3a l     F .text	0000003e get_ldnumber
08001f78 l     F .text	0000004e validate
08001fc6 l     F .text	0000001a mem_cpy.part.0
08001fe0 l     F .text	00000026 ld_clust.isra.1
08002006 l     F .text	00000064 sync_window.part.3
0800206a l     F .text	0000004e move_window
080020b8 l     F .text	00000092 check_fs
0800214a l     F .text	00000342 find_volume
0800248c l     F .text	00000154 put_fat
080025e0 l     F .text	000000f6 get_fat.isra.7
080026d6 l     F .text	00000128 create_chain
080027fe l     F .text	0000014a dir_next
08002948 l     F .text	00000098 dir_sdi.constprop.9
20000508 l     O .bss	00000004 FatFs
2000050c l     O .bss	00000002 Fsid
00000000 l    df *ABS*	00000000 tf_card.c
080033a2 l     F .text	00000062 xchg_spi
08003404 l     F .text	00000022 deselect
08003426 l     F .text	000000e4 wait_ready
0800350a l     F .text	00000042 _select
0800354c l     F .text	000000ec send_cmd
08003638 l     F .text	00000080 rcvr_datablock
080036b8 l     F .text	00000060 xmit_datablock.part.1
2000050e l     O .bss	00000001 CardType
200004f8 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 cdc_acm_core.c
080002e8 l     O .text	00000018 __compound_literal.0
08000300 l     O .text	0000003a __compound_literal.1
0800033c l     O .text	00000030 __compound_literal.2
00000000 l    df *ABS*	00000000 usbd_enum.c
08004bca l     F .text	00000004 _usb_std_reserved
08004bce l     F .text	0000000e _usb_dev_desc_get
08004bdc l     F .text	0000000e _usb_config_desc_get
08004bea l     F .text	00000014 _usb_str_desc_get
08004bfe l     F .text	000000fa _usb_std_getdescriptor
08004cf8 l     F .text	000000a8 _usb_std_setconfiguration
08004da0 l     F .text	000000ba _usb_std_getstatus
08004e5a l     F .text	0000003c _usb_std_getconfiguration
08004e96 l     F .text	0000002c _usb_std_getinterface
08004ec2 l     F .text	0000002a _usb_std_setinterface
08004eec l     F .text	00000064 _usb_std_setaddress
08004f50 l     F .text	00000080 _usb_std_setfeature
08004fd0 l     F .text	00000098 _usb_std_clearfeature
08005068 l     F .text	00000004 _usb_std_setdescriptor
0800506c l     F .text	00000004 _usb_std_synchframe
08000390 l     O .text	00000034 _std_dev_req
20000528 l     O .bss	00000001 config.4766
2000052c l     O .bss	00000002 status.4696
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 gd32vf103_adc.c
00000000 l    df *ABS*	00000000 gd32vf103_dma.c
00000000 l    df *ABS*	00000000 gd32vf103_eclic.c
00000000 l    df *ABS*	00000000 gd32vf103_exti.c
00000000 l    df *ABS*	00000000 gd32vf103_gpio.c
00000000 l    df *ABS*	00000000 gd32vf103_spi.c
00000000 l    df *ABS*	00000000 gd32vf103_timer.c
00000000 l    df *ABS*	00000000 gd32vf103_usart.c
00000000 l    df *ABS*	00000000 system_gd32vf103.c
00000000 l    df *ABS*	00000000 sbrk.c
200004ec l     O .data	00000004 curbrk.1524
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eclicw.c
20000500 l     O .bss	00000004 pmtisr
20000504 l     O .bss	00000004 pu0tbeisr
00000000 l    df *ABS*	00000000 gd32v_tf_card_if.c
00000000 l    df *ABS*	00000000 tf_delay.c
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 drv_usb_core.c
00000000 l    df *ABS*	00000000 drv_usb_dev.c
08007dcc l     O .sdata2.EP0_MAXLEN	00000004 EP0_MAXLEN
00000000 l    df *ABS*	00000000 drv_usbd_int.c
080043e2 l     F .text	000000fe usbd_int_epout
080044e0 l     F .text	000000bc usbd_int_epin
0800459c l     F .text	000000c6 usbd_int_rxfifo
08004662 l     F .text	000000d2 usbd_int_reset
08004734 l     F .text	00000068 usbd_int_enumfinish
0800479c l     F .text	000000e6 usbd_emptytxfifo_write
08007dd0 l     O .sdata2.USB_SPEED	00000004 USB_SPEED
00000000 l    df *ABS*	00000000 gd32vf103_hw.c
00000000 l    df *ABS*	00000000 gd32vf103_usb_it.c
00000000 l    df *ABS*	00000000 usb_delay.c
00000000 l    df *ABS*	00000000 usb_serial_if.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_transc.c
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 radioHead.c
00000000 l    df *ABS*	00000000 rn4871.c
00000000 l    df *ABS*	00000000 state.c
20000544 l     O .bss	00000004 current_state
00000000 l    df *ABS*	00000000 build/entry.o
080063b4 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
20001554 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000488 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
08007dd8 l       .sdata2._global_impure_ptr	00000000 __fini_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __fini_array_start
08007dd8 l       .sdata2._global_impure_ptr	00000000 __init_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __init_array_start
08007dd8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_start
08007db2 g     F .text	00000014 _malloc_usable_size_r
08005910 g     F .text	00000014 led_off_B1
080018f0 g     F .text	0000000a usart_transmit_config
08007076 g     F .text	0000002a .hidden __ashldi3
20000478 g     O .data	00000010 finapressHandles
08000daa g     F .text	00000034 adc_external_trigger_source_config
080056a6 g     F .text	00000026 send_data_to_phone
20000ce8 g       .data	00000000 __global_pointer$
08005188 g     F .text	00000030 usbd_ctl_status_recev
08004106 g     F .text	0000008c usb_transc_outxfer
08005938 g     F .text	00000014 led_off_B0
08007d3e g     F .text	00000002 __malloc_unlock
08005b4a g     F .text	00000030 append_int_to_string
080050e8 g     F .text	00000038 usbd_ctl_send
08005924 g     F .text	00000014 led_on_B0
08007d16 g     F .text	00000026 memmove
08000cec g     F .text	000000be adc_regular_channel_config
0800111c g     F .text	00000014 rcu_usb_clock_config
08005d90 g     F .text	0000003e clear_queues
08001c54 g     F .text	0000000e eclic_get_nlbits
0800489a g     F .text	00000056 USBFS_WKUP_IRQHandler
080018c2 g     F .text	00000012 usart_word_length_set
08004882 g     F .text	00000008 usb_udelay
08000f6a g     F .text	00000026 dma_channel_enable
20000554 g     O .bss	00000400 rx_radio_buffer
08003f10 g     F .text	00000032 usb_rxfifo_read
20005604 g     O .bss	00000004 errno
08001130 g     F .text	0000013a rcu_clock_freq_get
08005088 g     F .text	0000002c usbd_class_request
00001000 g       *ABS*	00000000 __stack_size
08001468 g     F .text	0000023c timer_channel_output_config
0800488a g     F .text	00000010 USBFS_IRQHandler
08006198 g     F .text	000000b6 lio_read_bt
08000c20 g     F .text	00000010 adc_enable
080062f4 g     F .text	0000000a set_state
08000380 g     O .text	00000010 usbd_strings
08004242 g     F .text	00000020 usb_iepintr_read
080071c4 g     F .text	00000016 memcpy
08004234 g     F .text	0000000e usb_iepintnum_read
080049d6 g     F .text	000000ee set_usb_clock_96m_hxtal
08001e26 g     F .text	00000052 eclic_mtip_handler
08001720 g     F .text	00000056 timer_channel_output_shadow_config
080018e6 g     F .text	0000000a usart_enable
08007672 g     F .text	0000029a _svfprintf_r
0800693c g     F .text	000000a4 .hidden __ltdf2
08003718 g     F .text	0000027c disk_initialize
0800524c g     F .text	000000e6 usbd_out_transc
0800107e g     F .text	00000004 gpio_bit_set
08001444 g     F .text	0000000a timer_enable
200004e8 g     O .data	00000004 SystemCoreClock
080010c0 g     F .text	0000001c rcu_periph_reset_disable
0800126a g     F .text	00000036 spi_init
08001d40  w    F .text	00000038 handle_trap
08003994 g     F .text	00000014 disk_status
08006384  w      .text	00000000 irq_entry
200015f0 g     O .bss	00004014 w
08004b84 g     F .text	0000003e usbd_ep_stall_clear
08007cc6 g     F .text	00000036 _sbrk_r
08000e42 g     F .text	0000000c adc_flag_clear
08003b52 g     F .text	0000021e disk_ioctl
08004b44 g     F .text	00000040 usbd_ep_stall
08007dc8 g     O .sdata2.usbd_language_id_desc	00000004 usbd_language_id_desc
080018b2 g     F .text	00000010 usart_parity_config
20007000 g       .stack	00000000 _heap_end
08000b96 g     F .text	00000050 adc_deinit
08006026 g     F .text	00000172 lio_init_bt
08005120 g     F .text	00000038 usbd_ctl_recev
08007dd4 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
08007d40 g     F .text	00000072 _realloc_r
0800715a g     F .text	0000006a __libc_init_array
08006e90 g     F .text	00000056 .hidden __floatunsidf
08001b66 g     F .text	0000002e _sbrk
08000be6 g     F .text	00000020 adc_mode_config
0800191c g     F .text	0000000c usart_dma_receive_config
08001d78 g     F .text	0000002c _init
08004b04 g     F .text	00000040 usbd_ep_send
0800543e g     F .text	000001a4 init_ADC_A0_A7
08007122 g     F .text	00000038 __libc_fini_array
08001d1e  w    F .text	00000022 handle_nmi
080012aa g     F .text	00000004 spi_i2s_data_transmit
08004ac4 g     F .text	00000040 usbd_ep_recev
08006e2c g     F .text	00000064 .hidden __fixdfsi
0800139e g     F .text	00000018 timer_struct_para_init
08000e38 g     F .text	0000000a adc_flag_get
0800401c g     F .text	000000ea usb_transc_inxfer
0800594c g     F .text	000000fa timer_interrupt_config
080013b6 g     F .text	0000008e timer_init
0800178a g     F .text	00000012 timer_interrupt_flag_get
20000540 g     O .bss	00000004 write
08004222 g     F .text	00000012 usb_oepintr_read
08003f42 g     F .text	00000028 usb_txfifo_flush
0800704c g     F .text	0000002a .hidden __lshrdi3
0800693c g     F .text	000000a4 .hidden __ledf2
080016a4 g     F .text	00000056 timer_channel_output_mode_config
08004262 g     F .text	00000026 usb_ctlep_startout
08003e08 g     F .text	000000ce delay_1ms
080018fa g     F .text	0000000a usart_receive_config
08001e78 g     F .text	00000052 USART0_IRQHandler
08001c62 g     F .text	00000058 eclic_set_irq_lvl_abs
08001c42 g     F .text	00000012 eclic_enable_interrupt
08000f96 g     F .text	00000006 eclic_global_interrupt_disable
08003ed6 g     F .text	0000003a usb_txfifo_write
08005720 g     F .text	000001b2 TIMER1_IRQHandler
08000618 g     O .text	00000020 __sf_fake_stderr
080041cc g     F .text	00000046 usb_transc_clrstall
08001b94 g     F .text	0000007c write_hex
08005dce g     F .text	00000172 init_radio
08007570 g     F .text	00000102 __ssputs_r
200015e0 g     O .bss	00000010 sample_buffer
2000053c g     O .bss	00000004 start_time
080070a0 g     F .text	0000003c .hidden __clzsi2
080051b8 g     F .text	00000094 usbd_setup_transc
08001082 g     F .text	00000004 gpio_bit_reset
08007cfc g     F .text	0000001a memchr
080073b6 g     F .text	000000b8 _free_r
08000e18 g     F .text	00000020 adc_software_trigger_enable
20000548 g     O .bss	00000004 _global_atexit
080072ee g     F .text	000000c8 __call_exitprocs
0800179c g     F .text	00000008 timer_interrupt_flag_clear
20008000 g       .stack	00000000 _sp
080018d4 g     F .text	00000012 usart_stop_bit_set
0800331a g     F .text	0000002c f_close
08005bea g     F .text	00000020 init_q
0800015c g     F .init	00000000 _start
0800177e g     F .text	0000000c timer_interrupt_disable
08001090 g     F .text	00000018 rcu_periph_clock_enable
08006ee6 g     F .text	00000166 .hidden __floatundidf
0800036c g     O .text	00000012 device_descriptor
0800024c g       .init	00000000 enable_mcycle_minstret
08007262 g     F .text	0000008c __register_exitproc
08004288 g     F .text	0000001a usb_clock_active
080012cc g     F .text	000000d2 timer_deinit
08003f6a g     F .text	00000014 usb_devaddr_set
08001c10 g     F .text	00000010 get_timer_value
08001776 g     F .text	00000008 timer_interrupt_enable
080012a0 g     F .text	0000000a spi_enable
08005b7a g     F .text	0000000e append_newLine
080012b6 g     F .text	0000000c spi_crc_polynomial_set
08004212 g     F .text	00000010 usb_oepintnum_read
08005f40 g     F .text	0000009c send_radio
080063f6 g     F .text	00000546 .hidden __divdf3
08001846 g     F .text	0000006c usart_baudrate_set
08001928 g     F .text	0000000c usart_dma_transmit_config
080069e0 g     F .text	0000044c .hidden __muldf3
20000520 g     O .bss	00000001 setupc_flag
08000f1e g     F .text	00000026 dma_circulation_enable
08003368 g     F .text	0000003a get_fattime
08000c06 g     F .text	0000001a adc_data_alignment_config
20000d54 g     O .bss	00000400 rx_dma_buffer
08007d3c g     F .text	00000002 __malloc_lock
08001910 g     F .text	0000000c usart_hardware_flow_cts_config
08001cba g     F .text	00000052 eclic_set_irq_priority
08000638 g     O .text	00000020 __sf_fake_stdin
20000500 g       .bss	00000000 __bss_start
080071da g     F .text	00000010 memset
080012ae g     F .text	00000008 spi_i2s_data_receive
080006b4 g     F .text	000004e2 main
080056fa g     F .text	00000026 reboot_BT
08006300  w      .text	00000000 trap_entry
0800316a g     F .text	000001b0 f_sync
08003346 g     F .text	00000022 set_fattime
08000246 g       .init	00000000 disable_mcycle_minstret
08000e92 g     F .text	0000008c dma_init
0800746e g     F .text	00000102 _malloc_r
200004f0 g     O .data	00000008 time
080029e0 g     F .text	0000005c f_mount
08001d0c g     F .text	00000012 eclic_mode_enable
20000538 g     O .bss	00000004 seconds
080042a2 g     F .text	00000140 usbd_isr
20000510 g     O .bss	00000008 tf_current_time
08007238 g     F .text	00000018 strcmp
08001934 g     F .text	0000011c SystemInit
08005c76 g     F .text	0000000c queue_str_len
08001da4 g     F .text	00000002 _fini
00000000 g       *ABS*	00000000 __dbg_stack_size
20000524 g     O .bss	00000004 usbfs_prescaler
080071ea g     F .text	0000004e sprintf
08000518 g     O .text	00000100 .hidden __clz_tab
080017a4 g     F .text	000000a2 usart_deinit
080070dc g     F .text	00000010 atexit
080050b4 g     F .text	00000004 usbd_vendor_request
0800624e g     F .text	0000009c lio_send_bt
0800790c g     F .text	0000010c _printf_common
200004fc g     O .data	00000004 _impure_ptr
080010a8 g     F .text	00000018 rcu_periph_reset_enable
08003f7e g     F .text	0000009e usb_transc_active
20000000 g     O .data	00000043 configuration_descriptor
08007672 g     F .text	0000029a _svfiprintf_r
20000000 g       .dalign	00000000 _data
20000044 g     O .data	00000434 USB_OTG_dev
080055e2 g     F .text	000000c4 write_handle_raw
080048f0 g     F .text	00000072 usb_delay_1ms
20000530 g     O .bss	00000004 millisec
08000c5c g     F .text	00000046 adc_discontinuous_mode_config
08005ac2 g     F .text	00000088 int_to_string
08000f9c g     F .text	00000034 eclic_irq_enable
08005a46 g     F .text	0000007c formatTime
08001904 g     F .text	0000000c usart_hardware_flow_rts_config
20001154 g     O .bss	00000400 tx_dma_buffer
08005c0a g     F .text	0000006c enqueue_string
08005d24 g     F .text	0000006c empty_string_queue
20000500 g       .bss	00000000 _edata
20005608 g       .bss	00000000 _end
08005158 g     F .text	00000030 usbd_ctl_status_send
08002f62 g     F .text	00000208 f_write
08003d70 g     F .text	0000005a tf_start_timer
08003dca g     F .text	0000003e tf_timer_done
08000f90 g     F .text	00000006 eclic_global_interrupt_enable
08004192 g     F .text	0000003a usb_transc_stall
08007dd8 g       .lalign	00000000 _data_lma
08000fd0 g     F .text	0000000a exti_interrupt_flag_clear
08002a3c g     F .text	00000526 f_open
08000dde g     F .text	0000003a adc_external_trigger_config
08003a4a g     F .text	00000108 disk_write
08000c52 g     F .text	0000000a adc_dma_mode_enable
080070ec g     F .text	00000036 exit
080050b8 g     F .text	00000030 usbd_enum_error
0800144e g     F .text	0000001a timer_channel_output_struct_para_init
08001a50 g     F .text	000000ca SystemCoreClockUpdate
080012c2 g     F .text	0000000a spi_i2s_flag_get
08001c20 g     F .text	00000022 eclic_init
080016fa g     F .text	00000026 timer_channel_output_pulse_value_config
08000658 g     O .text	00000020 __sf_fake_stdout
080071ea g     F .text	0000004e siprintf
08000ca2 g     F .text	0000004a adc_channel_length_config
080062ea g     F .text	0000000a get_state
08005c82 g     F .text	00000026 fuseStrings
08001b1a g     F .text	0000004c _exit
08000e4e g     F .text	00000044 dma_deinit
20000534 g     O .bss	00000004 minutes
08005fdc g     F .text	0000004a enter_command_mode
080058fc g     F .text	00000014 led_on_B1
08000f44 g     F .text	00000026 dma_circulation_disable
08001da6 g     F .text	00000080 dma_config
08007250 g     F .text	00000012 strlen
080039a8 g     F .text	000000a2 disk_read
08007a18 g     F .text	000002ae _printf_i
20000518 g     O .bss	00000008 tf_delay_until
20000550 g     O .bss	00000004 __malloc_sbrk_start
08004bc2 g     F .text	00000008 usbd_addr_set
080056cc g     F .text	0000002e stagger_data_to_phone
080010dc g     F .text	00000040 rcu_adc_clock_config
080058d2 g     F .text	0000002a ledInit
08000fda g     F .text	000000a4 gpio_init
08004962 g     F .text	00000074 usb_delay_1us
2000054c g     O .bss	00000004 __malloc_free_list
08000c30 g     F .text	00000022 adc_calibration_enable
08005332 g     F .text	0000010c usbd_in_transc
08005ca8 g     F .text	0000007c dequeue_string
08005b88 g     F .text	00000062 millis
08001086 g     F .text	0000000a gpio_bit_write
20000954 g     O .bss	00000400 tx_radio_buffer
08005070 g     F .text	00000018 usbd_standard_request



Disassembly of section .init:

08000000 <vector_base>:
    .weak  CAN1_RX1_IRQHandler
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    j _start
 8000000:	aab1                	j	800015c <_start>
 8000002:	0001                	nop
	...
 800001c:	1e26                	slli	t3,t3,0x29
 800001e:	0800                	addi	s0,sp,16
	...
 80000bc:	5720                	lw	s0,104(a4)
 80000be:	0800                	addi	s0,sp,16
	...
 80000e0:	1e78                	addi	a4,sp,828
 80000e2:	0800                	addi	s0,sp,16
	...
 80000f4:	489a                	lw	a7,132(sp)
 80000f6:	0800                	addi	s0,sp,16
	...
 8000158:	488a                	lw	a7,128(sp)
 800015a:	0800                	addi	s0,sp,16

0800015c <_start>:
	.globl _start
	.type _start,@function

_start:

	csrc CSR_MSTATUS, MSTATUS_MIE
 800015c:	30047073          	csrci	mstatus,8
	/* Jump to logical address first to ensure correct operation of RAM region  */
    la		a0,	_start
 8000160:	00000517          	auipc	a0,0x0
 8000164:	ffc50513          	addi	a0,a0,-4 # 800015c <_start>
    li		a1,	1
 8000168:	4585                	li	a1,1
	slli	a1,	a1, 29
 800016a:	05f6                	slli	a1,a1,0x1d
    bleu	a1, a0, _start0800
 800016c:	00b57b63          	bgeu	a0,a1,8000182 <_start0800>
    srli	a1,	a1, 2
 8000170:	8189                	srli	a1,a1,0x2
    bleu	a1, a0, _start0800
 8000172:	00b57863          	bgeu	a0,a1,8000182 <_start0800>
    la		a0,	_start0800
 8000176:	00000517          	auipc	a0,0x0
 800017a:	00c50513          	addi	a0,a0,12 # 8000182 <_start0800>
    add		a0, a0, a1
 800017e:	952e                	add	a0,a0,a1
	jr      a0
 8000180:	8502                	jr	a0

08000182 <_start0800>:

_start0800:

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 8000182:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
 8000186:	7d02a073          	csrs	0x7d0,t0

	/* Intial the mtvt*/
    la t0, vector_base
 800018a:	00000297          	auipc	t0,0x0
 800018e:	e7628293          	addi	t0,t0,-394 # 8000000 <vector_base>
    csrw CSR_MTVT, t0
 8000192:	30729073          	csrw	mtvt,t0

	/* Intial the mtvt2 and enable it*/
    la t0, irq_entry
 8000196:	00006297          	auipc	t0,0x6
 800019a:	1ee28293          	addi	t0,t0,494 # 8006384 <irq_entry>
    csrw CSR_MTVT2, t0
 800019e:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
 80001a2:	7ec0e073          	csrsi	0x7ec,1

    /* Intial the CSR MTVEC for the Trap ane NMI base addr*/
    la t0, trap_entry
 80001a6:	00006297          	auipc	t0,0x6
 80001aa:	15a28293          	addi	t0,t0,346 # 8006300 <trap_entry>
    csrw CSR_MTVEC, t0
 80001ae:	30529073          	csrw	mtvec,t0
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80001b2:	18001197          	auipc	gp,0x18001
 80001b6:	b3618193          	addi	gp,gp,-1226 # 20000ce8 <__global_pointer$>
.option pop
	la sp, _sp
 80001ba:	18008117          	auipc	sp,0x18008
 80001be:	e4610113          	addi	sp,sp,-442 # 20008000 <_sp>

	/* Load data section */
	la a0, _data_lma
 80001c2:	00008517          	auipc	a0,0x8
 80001c6:	c1650513          	addi	a0,a0,-1002 # 8007dd8 <__fini_array_end>
	la a1, _data
 80001ca:	18000597          	auipc	a1,0x18000
 80001ce:	e3658593          	addi	a1,a1,-458 # 20000000 <_data>
	la a2, _edata
 80001d2:	18000617          	auipc	a2,0x18000
 80001d6:	32e60613          	addi	a2,a2,814 # 20000500 <__bss_start>
	bgeu a1, a2, 2f
 80001da:	00c5fa63          	bgeu	a1,a2,80001ee <_start0800+0x6c>
1:
	lw t0, (a0)
 80001de:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
 80001e2:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
 80001e6:	0511                	addi	a0,a0,4
	addi a1, a1, 4
 80001e8:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
 80001ea:	fec5eae3          	bltu	a1,a2,80001de <_start0800+0x5c>
2:
	/* Clear bss section */
	la a0, __bss_start
 80001ee:	18000517          	auipc	a0,0x18000
 80001f2:	31250513          	addi	a0,a0,786 # 20000500 <__bss_start>
	la a1, _end
 80001f6:	18005597          	auipc	a1,0x18005
 80001fa:	41258593          	addi	a1,a1,1042 # 20005608 <_end>
	bgeu a0, a1, 2f
 80001fe:	00b57763          	bgeu	a0,a1,800020c <_start0800+0x8a>
1:
	sw zero, (a0)
 8000202:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
 8000206:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
 8000208:	feb56de3          	bltu	a0,a1,8000202 <_start0800+0x80>
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 800020c:	3202f073          	csrci	mucounteren,5
	/* Call global constructors */
	la a0, __libc_fini_array
 8000210:	00007517          	auipc	a0,0x7
 8000214:	f1250513          	addi	a0,a0,-238 # 8007122 <__libc_fini_array>
	call atexit
 8000218:	00007097          	auipc	ra,0x7
 800021c:	ec4080e7          	jalr	-316(ra) # 80070dc <atexit>
	call __libc_init_array
 8000220:	00007097          	auipc	ra,0x7
 8000224:	f3a080e7          	jalr	-198(ra) # 800715a <__libc_init_array>


	/* argc = argv = 0 */
	call _init
 8000228:	00002097          	auipc	ra,0x2
 800022c:	b50080e7          	jalr	-1200(ra) # 8001d78 <_init>
	li a0, 0
 8000230:	4501                	li	a0,0
	li a1, 0
 8000232:	4581                	li	a1,0
	call main
 8000234:	00000097          	auipc	ra,0x0
 8000238:	480080e7          	jalr	1152(ra) # 80006b4 <main>
	tail exit
 800023c:	00007317          	auipc	t1,0x7
 8000240:	eb030067          	jr	-336(t1) # 80070ec <exit>

1:
	j 1b
 8000244:	a001                	j	8000244 <_start0800+0xc2>

08000246 <disable_mcycle_minstret>:
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
        csrsi CSR_MCOUNTINHIBIT, 0x5
 8000246:	3202e073          	csrsi	mucounteren,5
	ret
 800024a:	8082                	ret

0800024c <enable_mcycle_minstret>:

	.global enable_mcycle_minstret
enable_mcycle_minstret:
        csrci CSR_MCOUNTINHIBIT, 0x5
 800024c:	3202f073          	csrci	mucounteren,5
	ret
 8000250:	8082                	ret
	...

Disassembly of section .text:

08000280 <__compound_literal.0-0x68>:
	...
 8000288:	0201                	addi	tp,tp,0
 800028a:	07060403          	lb	s0,112(a2)
 800028e:	0908                	addi	a0,sp,144
 8000290:	500a                	0x500a
 8000292:	6f72                	flw	ft10,28(sp)
 8000294:	6d617267          	0x6d617267
 8000298:	6820                	flw	fs0,80(s0)
 800029a:	7361                	lui	t1,0xffff8
 800029c:	6520                	flw	fs0,72(a0)
 800029e:	6978                	flw	fa4,84(a0)
 80002a0:	6574                	flw	fa3,76(a0)
 80002a2:	2064                	fld	fs1,192(s0)
 80002a4:	68746977          	0x68746977
 80002a8:	6320                	flw	fs0,64(a4)
 80002aa:	3a65646f          	jal	s0,8056650 <__fini_array_end+0x4e878>
 80002ae:	0000                	unimp
 80002b0:	7830                	flw	fa2,112(s0)
 80002b2:	0000                	unimp
 80002b4:	6d6e                	flw	fs10,216(sp)
 80002b6:	0a69                	addi	s4,s4,26
 80002b8:	0000                	unimp
 80002ba:	0000                	unimp
 80002bc:	7274                	flw	fa3,100(a2)
 80002be:	7061                	c.lui	zero,0xffff8
 80002c0:	000a                	c.slli	zero,0x2
 80002c2:	0000                	unimp
 80002c4:	4146                	lw	sp,80(sp)
 80002c6:	0054                	addi	a3,sp,4
 80002c8:	4146                	lw	sp,80(sp)
 80002ca:	3354                	fld	fa3,160(a4)
 80002cc:	0032                	c.slli	zero,0xc
 80002ce:	0000                	unimp
 80002d0:	2a22                	fld	fs4,8(sp)
 80002d2:	3b3a2c2b          	0x3b3a2c2b
 80002d6:	3d3c                	fld	fa5,120(a0)
 80002d8:	3f3e                	fld	ft10,488(sp)
 80002da:	7f7c5d5b          	0x7f7c5d5b
 80002de:	0000                	unimp
 80002e0:	0000                	unimp
 80002e2:	0000                	unimp
 80002e4:	4000                	lw	s0,0(s0)
 80002e6:	          	0x40af

080002e8 <__compound_literal.0>:
 80002e8:	00470316 00670069 00440061 00760065     ..G.i.g.a.D.e.v.
 80002f8:	00630069 00000065                       i.c.e...

08000300 <__compound_literal.1>:
 8000300:	00470338 00330044 00200032 00530055     8.G.D.3.2. .U.S.
 8000310:	00200042 00440043 00200043 00430041     B. .C.D.C. .A.C.
 8000320:	0020004d 006e0069 00460020 00200053     M. .i.n. .F.S. .
 8000330:	006f004d 00650064 00000000              M.o.d.e.....

0800033c <__compound_literal.2>:
 800033c:	0047032e 00330044 00580032 00580058     ..G.D.3.2.X.X.X.
 800034c:	0033002d 0030002e 0030002e 0037002d     -.3...0...0.-.7.
 800035c:	0038007a 00390078 00650079 00000072     z.8.x.9.y.e.r...

0800036c <device_descriptor>:
 800036c:	02000112 40000002 018a28e9 02010100     .......@.(......
 800037c:	00000103                                ....

08000380 <usbd_strings>:
 8000380:	08007dc8 080002e8 08000300 0800033c     .}..........<...

08000390 <_std_dev_req>:
 8000390:	08004da0 08004fd0 08004bca 08004f50     .M...O...K..PO..
 80003a0:	08004bca 08004eec 08004bfe 08005068     .K...N...K..hP..
 80003b0:	08004e5a 08004cf8 08004e96 08004ec2     ZN...L...N...N..
 80003c0:	0800506c 00000000 72617473 00003074     lP......start0..
 80003d0:	72617473 00003174 72617473 00003274     start1..start2..
 80003e0:	706f7473 00003070 706f7473 00003170     stopp0..stopp1..
 80003f0:	706f7473 00003270 33323130 37363534     stopp2..01234567
 8000400:	42413938 46454443 00000000 2c574853     89ABCDEF....SHW,
 8000410:	00000000 2e257325 252c7834 000a0d73     ....%s%.4x,%s...
 8000420:	0d312c52 00000000 74736574 00000000     R,1.....test....
 8000430:	414e4946 53432e50 00000056 656d6954     FINAP.CSV...Time
 8000440:	3b30413b 413b3141 33413b32 3b34413b     ;A0;A1;A2;A3;A4;
 8000450:	413b3541 37413b36 0000000a 2c565725     A5;A6;A7....%WV,
 8000460:	32373030 2531302c 00000000 74706d65     0072,01%....empt
 8000470:	00000079 2c565725 32373030 2530302c     y...%WV,0072,00%
 8000480:	00000000 2c565725 32373030 2532302c     ....%WV,0072,02%
	...
 800049c:	40af4000 00006484 000063d4 000063da     .@.@.d...c...c..
 80004ac:	000063d4 00006476 000063d4 000063da     .c..vd...c...c..
 80004bc:	00006484 00006484 00006476 000063da     .d...d..vd...c..
 80004cc:	000063ba 000063ba 000063ba 000063de     .c...c...c...c..
 80004dc:	0000688a 0000688a 000068a2 00006884     .h...h...h...h..
 80004ec:	00006884 00006930 000068a2 00006884     .h..0i...h...h..
 80004fc:	00006930 00006884 000068a2 00006882     0i...h...h...h..
 800050c:	00006882 00006882 00006930              .h...h..0i..

08000518 <__clz_tab>:
 8000518:	02020100 03030303 04040404 04040404     ................
 8000528:	05050505 05050505 05050505 05050505     ................
 8000538:	06060606 06060606 06060606 06060606     ................
 8000548:	06060606 06060606 06060606 06060606     ................
 8000558:	07070707 07070707 07070707 07070707     ................
 8000568:	07070707 07070707 07070707 07070707     ................
 8000578:	07070707 07070707 07070707 07070707     ................
 8000588:	07070707 07070707 07070707 07070707     ................
 8000598:	08080808 08080808 08080808 08080808     ................
 80005a8:	08080808 08080808 08080808 08080808     ................
 80005b8:	08080808 08080808 08080808 08080808     ................
 80005c8:	08080808 08080808 08080808 08080808     ................
 80005d8:	08080808 08080808 08080808 08080808     ................
 80005e8:	08080808 08080808 08080808 08080808     ................
 80005f8:	08080808 08080808 08080808 08080808     ................
 8000608:	08080808 08080808 08080808 08080808     ................

08000618 <__sf_fake_stderr>:
	...

08000638 <__sf_fake_stdin>:
	...

08000658 <__sf_fake_stdout>:
	...
 8000678:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
 8000688:	00004746 33323130 37363534 42413938     FG..0123456789AB
 8000698:	46454443 00000000 33323130 37363534     CDEF....01234567
 80006a8:	62613938 66656463 00000000              89abcdef....

080006b4 <main>:
            
        }
    }
}

int main(void){
 80006b4:	737d                	lui	t1,0xfffff
 80006b6:	aa010113          	addi	sp,sp,-1376
 80006ba:	54112e23          	sw	ra,1372(sp)
 80006be:	54812c23          	sw	s0,1368(sp)
 80006c2:	54912a23          	sw	s1,1364(sp)
 80006c6:	55212823          	sw	s2,1360(sp)
 80006ca:	55312623          	sw	s3,1356(sp)
 80006ce:	55412423          	sw	s4,1352(sp)
 80006d2:	55512223          	sw	s5,1348(sp)
 80006d6:	55612023          	sw	s6,1344(sp)
 80006da:	53712e23          	sw	s7,1340(sp)
 80006de:	53812c23          	sw	s8,1336(sp)
 80006e2:	53912a23          	sw	s9,1332(sp)
 80006e6:	53a12823          	sw	s10,1328(sp)
 80006ea:	53b12623          	sw	s11,1324(sp)
 80006ee:	911a                	add	sp,sp,t1
    init_q();
 80006f0:	00005097          	auipc	ra,0x5
 80006f4:	4fa080e7          	jalr	1274(ra) # 8005bea <init_q>

    /* Used for bytes written */
    UINT bw = 0;
    
    /* Sets a valid date for when writing to file */
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 80006f8:	4701                	li	a4,0
 80006fa:	4681                	li	a3,0
 80006fc:	4781                	li	a5,0
 80006fe:	4605                	li	a2,1
 8000700:	4585                	li	a1,1
 8000702:	7bc00513          	li	a0,1980
    UINT bw = 0;
 8000706:	c202                	sw	zero,4(sp)
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 8000708:	00003097          	auipc	ra,0x3
 800070c:	c3e080e7          	jalr	-962(ra) # 8003346 <set_fattime>
    delay_1ms(100);
 8000710:	06400513          	li	a0,100
 8000714:	00003097          	auipc	ra,0x3
 8000718:	6f4080e7          	jalr	1780(ra) # 8003e08 <delay_1ms>

    /* This function "mounts" the SD-card which makes the filesystem available */
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800071c:	6905                	lui	s2,0x1
    UINT bw = 0;
 800071e:	747d                	lui	s0,0xfffff
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000720:	52090793          	addi	a5,s2,1312 # 1520 <__stack_size+0x520>
 8000724:	978a                	add	a5,a5,sp
 8000726:	dd040513          	addi	a0,s0,-560 # ffffedd0 <_sp+0xdfff6dd0>
 800072a:	08000b37          	lui	s6,0x8000
 800072e:	4605                	li	a2,1
 8000730:	428b0593          	addi	a1,s6,1064 # 8000428 <_std_dev_req+0x98>
 8000734:	953e                	add	a0,a0,a5
 8000736:	00002097          	auipc	ra,0x2
 800073a:	2aa080e7          	jalr	682(ra) # 80029e0 <f_mount>
    f_sync(&fil);
 800073e:	52090793          	addi	a5,s2,1312
 8000742:	978a                	add	a5,a5,sp
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000744:	c02a                	sw	a0,0(sp)
    f_sync(&fil);
 8000746:	ba840513          	addi	a0,s0,-1112
 800074a:	953e                	add	a0,a0,a5
 800074c:	00003097          	auipc	ra,0x3
 8000750:	a1e080e7          	jalr	-1506(ra) # 800316a <f_sync>

    /* This function opens a file. In this case, we are creating a file which we want to write to */
    /* Filename should be at most 8 chars long and the extension should be at most 3 */
    
    delay_1ms(400);
 8000754:	19000513          	li	a0,400
 8000758:	00003097          	auipc	ra,0x3
 800075c:	6b0080e7          	jalr	1712(ra) # 8003e08 <delay_1ms>

    int ind_ble = 0;
    char read_buf[80] = {'\0'};
 8000760:	05000613          	li	a2,80
 8000764:	4581                	li	a1,0
 8000766:	1028                	addi	a0,sp,40
 8000768:	00007097          	auipc	ra,0x7
 800076c:	a72080e7          	jalr	-1422(ra) # 80071da <memset>
    char read_buf_ble[80] = {'\0'};
 8000770:	05000613          	li	a2,80
 8000774:	4581                	li	a1,0
 8000776:	18a8                	addi	a0,sp,120
 8000778:	00007097          	auipc	ra,0x7
 800077c:	a62080e7          	jalr	-1438(ra) # 80071da <memset>
    //configure_usb_serial(); //måste vara före lio_init_bt
    lio_init_bt();
 8000780:	00006097          	auipc	ra,0x6
 8000784:	8a6080e7          	jalr	-1882(ra) # 8006026 <lio_init_bt>
    init_radio();
 8000788:	00005097          	auipc	ra,0x5
 800078c:	646080e7          	jalr	1606(ra) # 8005dce <init_radio>
    dma_config();
 8000790:	00001097          	auipc	ra,0x1
 8000794:	616080e7          	jalr	1558(ra) # 8001da6 <dma_config>
    init_ADC_A0_A7();
 8000798:	00005097          	auipc	ra,0x5
 800079c:	ca6080e7          	jalr	-858(ra) # 800543e <init_ADC_A0_A7>
    ledInit();
 80007a0:	00005097          	auipc	ra,0x5
 80007a4:	132080e7          	jalr	306(ra) # 80058d2 <ledInit>
    usb_delay_1ms(1);
 80007a8:	4505                	li	a0,1
 80007aa:	00004097          	auipc	ra,0x4
 80007ae:	146080e7          	jalr	326(ra) # 80048f0 <usb_delay_1ms>

    char write_to_sd[4096] = {'\0'};
 80007b2:	6605                	lui	a2,0x1
 80007b4:	4581                	li	a1,0
 80007b6:	52010513          	addi	a0,sp,1312
 80007ba:	00007097          	auipc	ra,0x7
 80007be:	a20080e7          	jalr	-1504(ra) # 80071da <memset>
    char buf[BUFFER_SIZE] = {'\0'};
    int buf_size = 0;
    char usb_data_buffer[4096] = {'\0'};
    int dequeued_str_len = 0;

    write = 0;
 80007c2:	200004b7          	lui	s1,0x20000
 80007c6:	5404a023          	sw	zero,1344(s1) # 20000540 <write>
    /* while(!usb_serial_available()){
        delay_1ms(100);
    } */

    int file_Nr = 0;
    reboot_BT();
 80007ca:	00005097          	auipc	ra,0x5
 80007ce:	f30080e7          	jalr	-208(ra) # 80056fa <reboot_BT>
    enter_command_mode();
 80007d2:	00006097          	auipc	ra,0x6
 80007d6:	80a080e7          	jalr	-2038(ra) # 8005fdc <enter_command_mode>
    send_data_to_phone(finapressHandle_start_stop,0x00);
 80007da:	4581                	li	a1,0
 80007dc:	07500513          	li	a0,117
 80007e0:	00005097          	auipc	ra,0x5
 80007e4:	ec6080e7          	jalr	-314(ra) # 80056a6 <send_data_to_phone>
        switch (get_state()){
            case START:
                eclic_global_interrupt_disable();    
                fr = f_mount(&fs, "test", 1); // Mount storage device
                f_sync(&fil);
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007e8:	080009b7          	lui	s3,0x8000
                eclic_global_interrupt_disable();
                //Skicka till telefon jag stoppar nu
                
                write_to_sd[0] = '\0';
                while(empty_string_queue(write_to_sd, 8)){
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007ec:	52090793          	addi	a5,s2,1312
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007f0:	3c898993          	addi	s3,s3,968 # 80003c8 <_std_dev_req+0x38>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007f4:	ae440a93          	addi	s5,s0,-1308
 80007f8:	978a                	add	a5,a5,sp
    int onOff = 0;
 80007fa:	4b81                	li	s7,0
    int blink = 0;
 80007fc:	4a01                	li	s4,0
 80007fe:	54048493          	addi	s1,s1,1344
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 8000802:	06898c13          	addi	s8,s3,104
                millisec = 0;
 8000806:	20000cb7          	lui	s9,0x20000
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 800080a:	9abe                	add	s5,s5,a5
        switch (get_state()){
 800080c:	00006097          	auipc	ra,0x6
 8000810:	ade080e7          	jalr	-1314(ra) # 80062ea <get_state>
 8000814:	4785                	li	a5,1
 8000816:	892a                	mv	s2,a0
 8000818:	18f50063          	beq	a0,a5,8000998 <main+0x2e4>
 800081c:	4789                	li	a5,2
 800081e:	24f50063          	beq	a0,a5,8000a5e <main+0x3aa>
 8000822:	f56d                	bnez	a0,800080c <main+0x158>
                set_state(RUNNING);
                break;

            case RUNNING:
                //RUNNING CONTROL
                lio_read_bt(read_buf, 20);
 8000824:	6d85                	lui	s11,0x1
 8000826:	520d8793          	addi	a5,s11,1312 # 1520 <__stack_size+0x520>
 800082a:	978a                	add	a5,a5,sp
 800082c:	b0840913          	addi	s2,s0,-1272
 8000830:	993e                	add	s2,s2,a5
 8000832:	45d1                	li	a1,20
 8000834:	854a                	mv	a0,s2
 8000836:	00006097          	auipc	ra,0x6
 800083a:	962080e7          	jalr	-1694(ra) # 8006198 <lio_read_bt>
                ind_ble = fuseStrings(read_buf_ble, read_buf);
 800083e:	520d8793          	addi	a5,s11,1312
 8000842:	978a                	add	a5,a5,sp
 8000844:	b5840d13          	addi	s10,s0,-1192
 8000848:	9d3e                	add	s10,s10,a5
 800084a:	85ca                	mv	a1,s2
 800084c:	856a                	mv	a0,s10
 800084e:	00005097          	auipc	ra,0x5
 8000852:	434080e7          	jalr	1076(ra) # 8005c82 <fuseStrings>
                memset(read_buf, '\0', sizeof(read_buf));
 8000856:	05000613          	li	a2,80
 800085a:	4581                	li	a1,0
 800085c:	854a                	mv	a0,s2
 800085e:	00007097          	auipc	ra,0x7
 8000862:	97c080e7          	jalr	-1668(ra) # 80071da <memset>
                blink++;
                if (blink == 100000){
 8000866:	67e1                	lui	a5,0x18
                blink++;
 8000868:	0a05                	addi	s4,s4,1
                if (blink == 100000){
 800086a:	6a078793          	addi	a5,a5,1696 # 186a0 <__stack_size+0x176a0>
 800086e:	02fa1263          	bne	s4,a5,8000892 <main+0x1de>
                    /* if(read_handle(finapressHandle_start_stop,read_buf_ble,1000)){
                        led_on_b2();
                    }else{
                        led_off_b2();
                    } */
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000872:	05000613          	li	a2,80
 8000876:	4581                	li	a1,0
 8000878:	856a                	mv	a0,s10
 800087a:	00007097          	auipc	ra,0x7
 800087e:	960080e7          	jalr	-1696(ra) # 80071da <memset>
                    if(onOff){
 8000882:	260b8663          	beqz	s7,8000aee <main+0x43a>
                        led_on_B0();
 8000886:	00005097          	auipc	ra,0x5
 800088a:	09e080e7          	jalr	158(ra) # 8005924 <led_on_B0>
                        
                        onOff = 0;
 800088e:	4b81                	li	s7,0
                    blink = 0;
 8000890:	4a01                	li	s4,0
                        led_off_B0();
                        onOff = 1;
                    }
                }
                //printf("%s\r\n", read_buf_ble);
                if(!strcmp(read_buf_ble, BLUETOOTH_START_MESSAGE)){
 8000892:	6785                	lui	a5,0x1
 8000894:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 8000898:	b5840913          	addi	s2,s0,-1192
 800089c:	978a                	add	a5,a5,sp
 800089e:	993e                	add	s2,s2,a5
 80008a0:	09498593          	addi	a1,s3,148
 80008a4:	854a                	mv	a0,s2
 80008a6:	00007097          	auipc	ra,0x7
 80008aa:	992080e7          	jalr	-1646(ra) # 8007238 <strcmp>
 80008ae:	24051763          	bnez	a0,8000afc <main+0x448>
                    send_radio("empty",5);
 80008b2:	08000537          	lui	a0,0x8000
 80008b6:	4595                	li	a1,5
 80008b8:	46c50513          	addi	a0,a0,1132 # 800046c <_std_dev_req+0xdc>
 80008bc:	00005097          	auipc	ra,0x5
 80008c0:	684080e7          	jalr	1668(ra) # 8005f40 <send_radio>
                    delay_1ms(50);
 80008c4:	03200513          	li	a0,50
 80008c8:	00003097          	auipc	ra,0x3
 80008cc:	540080e7          	jalr	1344(ra) # 8003e08 <delay_1ms>
                    send_radio("start0", 6);
 80008d0:	08000537          	lui	a0,0x8000
 80008d4:	4599                	li	a1,6
 80008d6:	3c850513          	addi	a0,a0,968 # 80003c8 <_std_dev_req+0x38>
 80008da:	00005097          	auipc	ra,0x5
 80008de:	666080e7          	jalr	1638(ra) # 8005f40 <send_radio>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 80008e2:	05000613          	li	a2,80
 80008e6:	4581                	li	a1,0
 80008e8:	854a                	mv	a0,s2
 80008ea:	00007097          	auipc	ra,0x7
 80008ee:	8f0080e7          	jalr	-1808(ra) # 80071da <memset>
                    start_time = millis() + 1051;
 80008f2:	00005097          	auipc	ra,0x5
 80008f6:	296080e7          	jalr	662(ra) # 8005b88 <millis>
 80008fa:	200007b7          	lui	a5,0x20000
 80008fe:	41b50513          	addi	a0,a0,1051
 8000902:	52a7ae23          	sw	a0,1340(a5) # 2000053c <start_time>
                    led_on_B1();
 8000906:	00005097          	auipc	ra,0x5
 800090a:	ff6080e7          	jalr	-10(ra) # 80058fc <led_on_B1>
                    set_state(START);
 800090e:	4505                	li	a0,1
 8000910:	00006097          	auipc	ra,0x6
 8000914:	9e4080e7          	jalr	-1564(ra) # 80062f4 <set_state>
                    write = 1;
 8000918:	4785                	li	a5,1
                    send_data_to_phone(finapressHandle_start_stop,0x01);
 800091a:	4585                	li	a1,1
 800091c:	07500513          	li	a0,117
                    write = 1;
 8000920:	c09c                	sw	a5,0(s1)
                    send_data_to_phone(finapressHandle_start_stop,0x01);
 8000922:	00005097          	auipc	ra,0x5
 8000926:	d84080e7          	jalr	-636(ra) # 80056a6 <send_data_to_phone>
                    led_on_B1();
 800092a:	00005097          	auipc	ra,0x5
 800092e:	fd2080e7          	jalr	-46(ra) # 80058fc <led_on_B1>
                }else if(!strcmp(read_buf_ble, RUNNING_MSG)){
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
                }//Vi kan koll vilket kommand vi får när vi connectar för att ta bort det. Just nu så memsettar vi aldrig read_buf_ble så den kommer alltid ligga kvar där i buffern, vilket gör att disconnectar telefonen och sen connectar så kan vi ej starta mätningen

                //BREAK IF PROGRAM SHOULDNT WRITE
                if(!write){
 8000932:	409c                	lw	a5,0(s1)
 8000934:	ec078ce3          	beqz	a5,800080c <main+0x158>
                    break;
                }

                //WRITE TO FILE
                if (queue_str_len() > 8){
 8000938:	00005097          	auipc	ra,0x5
 800093c:	33e080e7          	jalr	830(ra) # 8005c76 <queue_str_len>
 8000940:	47a1                	li	a5,8
 8000942:	eca7d5e3          	bge	a5,a0,800080c <main+0x158>
                    write_to_sd[0] = '\0';
                    buf_size = dequeue_string(write_to_sd, 8);
 8000946:	45a1                	li	a1,8
 8000948:	52010513          	addi	a0,sp,1312
                    write_to_sd[0] = '\0';
 800094c:	52010023          	sb	zero,1312(sp)
                    buf_size = dequeue_string(write_to_sd, 8);
 8000950:	00005097          	auipc	ra,0x5
 8000954:	358080e7          	jalr	856(ra) # 8005ca8 <dequeue_string>
                    if(buf_size > 0){
 8000958:	eaa05ae3          	blez	a0,800080c <main+0x158>
                        //led_on();
                        f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 800095c:	52010513          	addi	a0,sp,1312
 8000960:	00007097          	auipc	ra,0x7
 8000964:	8f0080e7          	jalr	-1808(ra) # 8007250 <strlen>
 8000968:	6785                	lui	a5,0x1
 800096a:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 800096e:	978a                	add	a5,a5,sp
 8000970:	ba840913          	addi	s2,s0,-1112
 8000974:	993e                	add	s2,s2,a5
 8000976:	862a                	mv	a2,a0
 8000978:	86d6                	mv	a3,s5
 800097a:	52010593          	addi	a1,sp,1312
 800097e:	854a                	mv	a0,s2
 8000980:	00002097          	auipc	ra,0x2
 8000984:	5e2080e7          	jalr	1506(ra) # 8002f62 <f_write>
                        f_sync(&fil);
 8000988:	854a                	mv	a0,s2
 800098a:	00002097          	auipc	ra,0x2
 800098e:	7e0080e7          	jalr	2016(ra) # 800316a <f_sync>
                        write_to_sd[0] = '\0';
 8000992:	52010023          	sb	zero,1312(sp)
        switch (get_state()){
 8000996:	bd9d                	j	800080c <main+0x158>
                eclic_global_interrupt_disable();    
 8000998:	00000097          	auipc	ra,0x0
 800099c:	5fe080e7          	jalr	1534(ra) # 8000f96 <eclic_global_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80009a0:	6d85                	lui	s11,0x1
 80009a2:	520d8793          	addi	a5,s11,1312 # 1520 <__stack_size+0x520>
 80009a6:	978a                	add	a5,a5,sp
 80009a8:	dd040513          	addi	a0,s0,-560
 80009ac:	4605                	li	a2,1
 80009ae:	428b0593          	addi	a1,s6,1064
 80009b2:	953e                	add	a0,a0,a5
 80009b4:	00002097          	auipc	ra,0x2
 80009b8:	02c080e7          	jalr	44(ra) # 80029e0 <f_mount>
                f_sync(&fil);
 80009bc:	520d8793          	addi	a5,s11,1312
 80009c0:	978a                	add	a5,a5,sp
 80009c2:	ba840d13          	addi	s10,s0,-1112
 80009c6:	9d3e                	add	s10,s10,a5
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80009c8:	c02a                	sw	a0,0(sp)
                f_sync(&fil);
 80009ca:	856a                	mv	a0,s10
 80009cc:	00002097          	auipc	ra,0x2
 80009d0:	79e080e7          	jalr	1950(ra) # 800316a <f_sync>
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80009d4:	4629                	li	a2,10
 80009d6:	85e2                	mv	a1,s8
 80009d8:	856a                	mv	a0,s10
 80009da:	00002097          	auipc	ra,0x2
 80009de:	062080e7          	jalr	98(ra) # 8002a3c <f_open>
 80009e2:	c02a                	sw	a0,0(sp)
                clear_queues();
 80009e4:	00005097          	auipc	ra,0x5
 80009e8:	3ac080e7          	jalr	940(ra) # 8005d90 <clear_queues>
                char header[] = "Time;A0;A1;A2;A3;A4;A5;A6;A7\n";
 80009ec:	4679                	li	a2,30
 80009ee:	07498593          	addi	a1,s3,116
 80009f2:	0028                	addi	a0,sp,8
 80009f4:	00006097          	auipc	ra,0x6
 80009f8:	7d0080e7          	jalr	2000(ra) # 80071c4 <memcpy>
                enqueue_string(header);
 80009fc:	520d8793          	addi	a5,s11,1312
 8000a00:	978a                	add	a5,a5,sp
 8000a02:	ae840513          	addi	a0,s0,-1304
 8000a06:	953e                	add	a0,a0,a5
 8000a08:	00005097          	auipc	ra,0x5
 8000a0c:	202080e7          	jalr	514(ra) # 8005c0a <enqueue_string>
                millisec = 0;
 8000a10:	530c8793          	addi	a5,s9,1328 # 20000530 <millisec>
 8000a14:	0007a023          	sw	zero,0(a5)
                seconds = 0;
 8000a18:	200007b7          	lui	a5,0x20000
 8000a1c:	5207ac23          	sw	zero,1336(a5) # 20000538 <seconds>
                set_state(RUNNING);
 8000a20:	4501                	li	a0,0
                minutes = 0;
 8000a22:	200007b7          	lui	a5,0x20000
 8000a26:	5207aa23          	sw	zero,1332(a5) # 20000534 <minutes>
                set_state(RUNNING);
 8000a2a:	00006097          	auipc	ra,0x6
 8000a2e:	8ca080e7          	jalr	-1846(ra) # 80062f4 <set_state>
                write = 1;
 8000a32:	0124a023          	sw	s2,0(s1)
                while(millis() < start_time);
 8000a36:	20000937          	lui	s2,0x20000
 8000a3a:	00005097          	auipc	ra,0x5
 8000a3e:	14e080e7          	jalr	334(ra) # 8005b88 <millis>
 8000a42:	53c90793          	addi	a5,s2,1340 # 2000053c <start_time>
 8000a46:	439c                	lw	a5,0(a5)
 8000a48:	fef549e3          	blt	a0,a5,8000a3a <main+0x386>
                timer_interrupt_config();
 8000a4c:	00005097          	auipc	ra,0x5
 8000a50:	f00080e7          	jalr	-256(ra) # 800594c <timer_interrupt_config>
                eclic_global_interrupt_enable();  
 8000a54:	00000097          	auipc	ra,0x0
 8000a58:	53c080e7          	jalr	1340(ra) # 8000f90 <eclic_global_interrupt_enable>
                break;
 8000a5c:	bb45                	j	800080c <main+0x158>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 8000a5e:	4589                	li	a1,2
 8000a60:	40000537          	lui	a0,0x40000
 8000a64:	00001097          	auipc	ra,0x1
 8000a68:	d1a080e7          	jalr	-742(ra) # 800177e <timer_interrupt_disable>
                eclic_global_interrupt_disable();
 8000a6c:	00000097          	auipc	ra,0x0
 8000a70:	52a080e7          	jalr	1322(ra) # 8000f96 <eclic_global_interrupt_disable>
                write_to_sd[0] = '\0';
 8000a74:	6705                	lui	a4,0x1
 8000a76:	52070793          	addi	a5,a4,1312 # 1520 <__stack_size+0x520>
 8000a7a:	978a                	add	a5,a5,sp
 8000a7c:	00878933          	add	s2,a5,s0
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a80:	52070793          	addi	a5,a4,1312
 8000a84:	ba840d13          	addi	s10,s0,-1112
 8000a88:	978a                	add	a5,a5,sp
                write_to_sd[0] = '\0';
 8000a8a:	00090023          	sb	zero,0(s2)
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a8e:	9d3e                	add	s10,s10,a5
                while(empty_string_queue(write_to_sd, 8)){
 8000a90:	45a1                	li	a1,8
 8000a92:	854a                	mv	a0,s2
 8000a94:	00005097          	auipc	ra,0x5
 8000a98:	290080e7          	jalr	656(ra) # 8005d24 <empty_string_queue>
 8000a9c:	e505                	bnez	a0,8000ac4 <main+0x410>
                f_close(&fil);
 8000a9e:	6785                	lui	a5,0x1
 8000aa0:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 8000aa4:	978a                	add	a5,a5,sp
 8000aa6:	ba840513          	addi	a0,s0,-1112
 8000aaa:	953e                	add	a0,a0,a5
 8000aac:	00003097          	auipc	ra,0x3
 8000ab0:	86e080e7          	jalr	-1938(ra) # 800331a <f_close>
                set_state(RUNNING);
 8000ab4:	4501                	li	a0,0
                write = 0;
 8000ab6:	0004a023          	sw	zero,0(s1)
                set_state(RUNNING);
 8000aba:	00006097          	auipc	ra,0x6
 8000abe:	83a080e7          	jalr	-1990(ra) # 80062f4 <set_state>
                break;
 8000ac2:	b3a9                	j	800080c <main+0x158>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000ac4:	854a                	mv	a0,s2
 8000ac6:	00006097          	auipc	ra,0x6
 8000aca:	78a080e7          	jalr	1930(ra) # 8007250 <strlen>
 8000ace:	862a                	mv	a2,a0
 8000ad0:	86d6                	mv	a3,s5
 8000ad2:	85ca                	mv	a1,s2
 8000ad4:	856a                	mv	a0,s10
 8000ad6:	00002097          	auipc	ra,0x2
 8000ada:	48c080e7          	jalr	1164(ra) # 8002f62 <f_write>
                    f_sync(&fil);
 8000ade:	856a                	mv	a0,s10
 8000ae0:	00002097          	auipc	ra,0x2
 8000ae4:	68a080e7          	jalr	1674(ra) # 800316a <f_sync>
                    write_to_sd[0] = '\0';
 8000ae8:	00090023          	sb	zero,0(s2)
 8000aec:	b755                	j	8000a90 <main+0x3dc>
                        led_off_B0();
 8000aee:	00005097          	auipc	ra,0x5
 8000af2:	e4a080e7          	jalr	-438(ra) # 8005938 <led_off_B0>
                    blink = 0;
 8000af6:	4a01                	li	s4,0
                        onOff = 1;
 8000af8:	4b85                	li	s7,1
 8000afa:	bb61                	j	8000892 <main+0x1de>
                }else if(!strcmp(read_buf_ble, BLUETOOTH_STOP_MESSAGE)){
 8000afc:	0ac98593          	addi	a1,s3,172
 8000b00:	854a                	mv	a0,s2
 8000b02:	00006097          	auipc	ra,0x6
 8000b06:	736080e7          	jalr	1846(ra) # 8007238 <strcmp>
 8000b0a:	e525                	bnez	a0,8000b72 <main+0x4be>
                    send_radio("empty",5);
 8000b0c:	08000537          	lui	a0,0x8000
 8000b10:	4595                	li	a1,5
 8000b12:	46c50513          	addi	a0,a0,1132 # 800046c <_std_dev_req+0xdc>
 8000b16:	00005097          	auipc	ra,0x5
 8000b1a:	42a080e7          	jalr	1066(ra) # 8005f40 <send_radio>
                    delay_1ms(50);
 8000b1e:	03200513          	li	a0,50
 8000b22:	00003097          	auipc	ra,0x3
 8000b26:	2e6080e7          	jalr	742(ra) # 8003e08 <delay_1ms>
                    send_radio("stopp0", 6);
 8000b2a:	08000537          	lui	a0,0x8000
 8000b2e:	4599                	li	a1,6
 8000b30:	3e050513          	addi	a0,a0,992 # 80003e0 <_std_dev_req+0x50>
 8000b34:	00005097          	auipc	ra,0x5
 8000b38:	40c080e7          	jalr	1036(ra) # 8005f40 <send_radio>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000b3c:	05000613          	li	a2,80
 8000b40:	4581                	li	a1,0
 8000b42:	854a                	mv	a0,s2
 8000b44:	00006097          	auipc	ra,0x6
 8000b48:	696080e7          	jalr	1686(ra) # 80071da <memset>
                    set_state(STOP);
 8000b4c:	4509                	li	a0,2
 8000b4e:	00005097          	auipc	ra,0x5
 8000b52:	7a6080e7          	jalr	1958(ra) # 80062f4 <set_state>
                    send_data_to_phone(finapressHandle_start_stop,0x00);
 8000b56:	4581                	li	a1,0
 8000b58:	07500513          	li	a0,117
 8000b5c:	00005097          	auipc	ra,0x5
 8000b60:	b4a080e7          	jalr	-1206(ra) # 80056a6 <send_data_to_phone>
                    write = 0;
 8000b64:	0004a023          	sw	zero,0(s1)
                    led_off_B1();
 8000b68:	00005097          	auipc	ra,0x5
 8000b6c:	da8080e7          	jalr	-600(ra) # 8005910 <led_off_B1>
 8000b70:	b3c9                	j	8000932 <main+0x27e>
                }else if(!strcmp(read_buf_ble, RUNNING_MSG)){
 8000b72:	0bc98593          	addi	a1,s3,188
 8000b76:	854a                	mv	a0,s2
 8000b78:	00006097          	auipc	ra,0x6
 8000b7c:	6c0080e7          	jalr	1728(ra) # 8007238 <strcmp>
 8000b80:	da0519e3          	bnez	a0,8000932 <main+0x27e>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000b84:	05000613          	li	a2,80
 8000b88:	4581                	li	a1,0
 8000b8a:	854a                	mv	a0,s2
 8000b8c:	00006097          	auipc	ra,0x6
 8000b90:	64e080e7          	jalr	1614(ra) # 80071da <memset>
 8000b94:	bb79                	j	8000932 <main+0x27e>

08000b96 <adc_deinit>:
    \param[in]  adc_periph: ADCx, x=0,1
    \param[out] none
    \retval     none
*/
void adc_deinit(uint32_t adc_periph)
{
 8000b96:	1141                	addi	sp,sp,-16
    switch(adc_periph){
 8000b98:	400127b7          	lui	a5,0x40012
{
 8000b9c:	c606                	sw	ra,12(sp)
    switch(adc_periph){
 8000b9e:	40078793          	addi	a5,a5,1024 # 40012400 <_sp+0x2000a400>
 8000ba2:	00f50b63          	beq	a0,a5,8000bb8 <adc_deinit+0x22>
 8000ba6:	400137b7          	lui	a5,0x40013
 8000baa:	80078793          	addi	a5,a5,-2048 # 40012800 <_sp+0x2000a800>
 8000bae:	02f50363          	beq	a0,a5,8000bd4 <adc_deinit+0x3e>
        rcu_periph_reset_disable(RCU_ADC1RST);
        break;
    default:
        break;
    }
}
 8000bb2:	40b2                	lw	ra,12(sp)
 8000bb4:	0141                	addi	sp,sp,16
 8000bb6:	8082                	ret
        rcu_periph_reset_enable(RCU_ADC0RST);
 8000bb8:	30900513          	li	a0,777
 8000bbc:	00000097          	auipc	ra,0x0
 8000bc0:	4ec080e7          	jalr	1260(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC0RST);
 8000bc4:	30900513          	li	a0,777
}
 8000bc8:	40b2                	lw	ra,12(sp)
 8000bca:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000bcc:	00000317          	auipc	t1,0x0
 8000bd0:	4f430067          	jr	1268(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_ADC1RST);
 8000bd4:	30a00513          	li	a0,778
 8000bd8:	00000097          	auipc	ra,0x0
 8000bdc:	4d0080e7          	jalr	1232(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000be0:	30a00513          	li	a0,778
 8000be4:	b7d5                	j	8000bc8 <adc_deinit+0x32>

08000be6 <adc_mode_config>:
    \param[out] none
    \retval     none
*/
void adc_mode_config(uint32_t mode)
{
    ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
 8000be6:	400127b7          	lui	a5,0x40012
 8000bea:	4047a703          	lw	a4,1028(a5) # 40012404 <_sp+0x2000a404>
 8000bee:	fff106b7          	lui	a3,0xfff10
 8000bf2:	16fd                	addi	a3,a3,-1
 8000bf4:	8f75                	and	a4,a4,a3
 8000bf6:	40e7a223          	sw	a4,1028(a5)
    ADC_CTL0(ADC0) |= mode;
 8000bfa:	4047a703          	lw	a4,1028(a5)
 8000bfe:	8d59                	or	a0,a0,a4
 8000c00:	40a7a223          	sw	a0,1028(a5)
}
 8000c04:	8082                	ret

08000c06 <adc_data_alignment_config>:
*/
void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
{
    if(ADC_DATAALIGN_RIGHT != data_alignment){
        /* MSB alignment */
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000c06:	451c                	lw	a5,8(a0)
    if(ADC_DATAALIGN_RIGHT != data_alignment){
 8000c08:	c599                	beqz	a1,8000c16 <adc_data_alignment_config+0x10>
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000c0a:	6705                	lui	a4,0x1
 8000c0c:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
 8000c10:	8fd9                	or	a5,a5,a4
    }else{
        /* LSB alignment */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000c12:	c51c                	sw	a5,8(a0)
    }
}
 8000c14:	8082                	ret
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000c16:	777d                	lui	a4,0xfffff
 8000c18:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 8000c1c:	8ff9                	and	a5,a5,a4
 8000c1e:	bfd5                	j	8000c12 <adc_data_alignment_config+0xc>

08000c20 <adc_enable>:
    \param[out] none
    \retval     none
*/
void adc_enable(uint32_t adc_periph)
{
    if((uint32_t)RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
 8000c20:	451c                	lw	a5,8(a0)
 8000c22:	8b85                	andi	a5,a5,1
 8000c24:	e789                	bnez	a5,8000c2e <adc_enable+0xe>
        /* enable ADC */
        ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
 8000c26:	451c                	lw	a5,8(a0)
 8000c28:	0017e793          	ori	a5,a5,1
 8000c2c:	c51c                	sw	a5,8(a0)
    }       
}
 8000c2e:	8082                	ret

08000c30 <adc_calibration_enable>:
    \retval     none
*/
void adc_calibration_enable(uint32_t adc_periph)
{
    /* reset the selected ADC1 calibration registers */
    ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
 8000c30:	451c                	lw	a5,8(a0)
 8000c32:	00850713          	addi	a4,a0,8
 8000c36:	0087e793          	ori	a5,a5,8
 8000c3a:	c51c                	sw	a5,8(a0)
    /* check the RSTCLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
 8000c3c:	431c                	lw	a5,0(a4)
 8000c3e:	8ba1                	andi	a5,a5,8
 8000c40:	fff5                	bnez	a5,8000c3c <adc_calibration_enable+0xc>
    }
    /* enable ADC calibration process */
    ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
 8000c42:	451c                	lw	a5,8(a0)
 8000c44:	0047e793          	ori	a5,a5,4
 8000c48:	c51c                	sw	a5,8(a0)
    /* check the CLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
 8000c4a:	431c                	lw	a5,0(a4)
 8000c4c:	8b91                	andi	a5,a5,4
 8000c4e:	fff5                	bnez	a5,8000c4a <adc_calibration_enable+0x1a>
    }
}
 8000c50:	8082                	ret

08000c52 <adc_dma_mode_enable>:
    \retval     none
*/
void adc_dma_mode_enable(uint32_t adc_periph)
{
    /* enable DMA request */
    ADC_CTL1(adc_periph) |= (uint32_t)(ADC_CTL1_DMA);
 8000c52:	451c                	lw	a5,8(a0)
 8000c54:	1007e793          	ori	a5,a5,256
 8000c58:	c51c                	sw	a5,8(a0)
}
 8000c5a:	8082                	ret

08000c5c <adc_discontinuous_mode_config>:
    \retval     none
*/
void adc_discontinuous_mode_config(uint32_t adc_periph, uint8_t adc_channel_group, uint8_t length)
{
    /* disable discontinuous mode of regular & inserted channel */
    ADC_CTL0(adc_periph) &= ~((uint32_t)(ADC_CTL0_DISRC | ADC_CTL0_DISIC));
 8000c5c:	415c                	lw	a5,4(a0)
 8000c5e:	7779                	lui	a4,0xffffe
 8000c60:	7ff70713          	addi	a4,a4,2047 # ffffe7ff <_sp+0xdfff67ff>
 8000c64:	8ff9                	and	a5,a5,a4
 8000c66:	c15c                	sw	a5,4(a0)
    switch(adc_channel_group){
 8000c68:	4785                	li	a5,1
 8000c6a:	00f58663          	beq	a1,a5,8000c76 <adc_discontinuous_mode_config+0x1a>
 8000c6e:	4789                	li	a5,2
 8000c70:	02f58663          	beq	a1,a5,8000c9c <adc_discontinuous_mode_config+0x40>
 8000c74:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* config the number of conversions in discontinuous mode */
        ADC_CTL0(adc_periph) &= ~((uint32_t)ADC_CTL0_DISNUM);
 8000c76:	415c                	lw	a5,4(a0)
 8000c78:	7749                	lui	a4,0xffff2
 8000c7a:	177d                	addi	a4,a4,-1
 8000c7c:	8ff9                	and	a5,a5,a4
 8000c7e:	c15c                	sw	a5,4(a0)
        ADC_CTL0(adc_periph) |= CTL0_DISNUM(((uint32_t)length - ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000c80:	415c                	lw	a5,4(a0)
 8000c82:	167d                	addi	a2,a2,-1
 8000c84:	6739                	lui	a4,0xe
 8000c86:	0636                	slli	a2,a2,0xd
 8000c88:	8e79                	and	a2,a2,a4
 8000c8a:	8e5d                	or	a2,a2,a5
 8000c8c:	c150                	sw	a2,4(a0)
        /* enable regular channel group discontinuous mode */
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISRC;
 8000c8e:	415c                	lw	a5,4(a0)
 8000c90:	6705                	lui	a4,0x1
 8000c92:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
        break;
    case ADC_INSERTED_CHANNEL:
        /* enable inserted channel group discontinuous mode */
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
 8000c96:	8fd9                	or	a5,a5,a4
 8000c98:	c15c                	sw	a5,4(a0)
    case ADC_CHANNEL_DISCON_DISABLE:
        /* disable discontinuous mode of regular & inserted channel */
    default:
        break;
    }
}
 8000c9a:	8082                	ret
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
 8000c9c:	415c                	lw	a5,4(a0)
 8000c9e:	6705                	lui	a4,0x1
 8000ca0:	bfdd                	j	8000c96 <adc_discontinuous_mode_config+0x3a>

08000ca2 <adc_channel_length_config>:
    \param[out] none
    \retval     none
*/
void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
{
    switch(adc_channel_group){
 8000ca2:	4785                	li	a5,1
 8000ca4:	00f58663          	beq	a1,a5,8000cb0 <adc_channel_length_config+0xe>
 8000ca8:	4789                	li	a5,2
 8000caa:	02f58263          	beq	a1,a5,8000cce <adc_channel_length_config+0x2c>
 8000cae:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure the length of regular channel group */
        ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
 8000cb0:	555c                	lw	a5,44(a0)
 8000cb2:	ff100737          	lui	a4,0xff100
 8000cb6:	177d                	addi	a4,a4,-1
 8000cb8:	8ff9                	and	a5,a5,a4
 8000cba:	d55c                	sw	a5,44(a0)
        ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000cbc:	555c                	lw	a5,44(a0)
 8000cbe:	167d                	addi	a2,a2,-1
 8000cc0:	0652                	slli	a2,a2,0x14
 8000cc2:	00f00737          	lui	a4,0xf00
 8000cc6:	8e79                	and	a2,a2,a4
 8000cc8:	8e5d                	or	a2,a2,a5
 8000cca:	d550                	sw	a2,44(a0)
        break;
 8000ccc:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure the length of inserted channel group */
        ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
 8000cce:	5d1c                	lw	a5,56(a0)
 8000cd0:	ffd00737          	lui	a4,0xffd00
 8000cd4:	177d                	addi	a4,a4,-1
 8000cd6:	8ff9                	and	a5,a5,a4
 8000cd8:	dd1c                	sw	a5,56(a0)
        ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000cda:	5d1c                	lw	a5,56(a0)
 8000cdc:	167d                	addi	a2,a2,-1
 8000cde:	0652                	slli	a2,a2,0x14
 8000ce0:	00300737          	lui	a4,0x300
 8000ce4:	8e79                	and	a2,a2,a4
 8000ce6:	8e5d                	or	a2,a2,a5
 8000ce8:	dd10                	sw	a2,56(a0)
        break;
    default:
        break;
    }
}
 8000cea:	8082                	ret

08000cec <adc_regular_channel_config>:
void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
{
    uint32_t rsq,sampt;
    
    /* ADC regular sequence config */
    if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
 8000cec:	4715                	li	a4,5
 8000cee:	04b76363          	bltu	a4,a1,8000d34 <adc_regular_channel_config+0x48>
        /* the regular group sequence rank is smaller than six */
        rsq = ADC_RSQ2(adc_periph);
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000cf2:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ2(adc_periph);
 8000cf6:	03452803          	lw	a6,52(a0)
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000cfa:	47fd                	li	a5,31
 8000cfc:	00b797b3          	sll	a5,a5,a1
 8000d00:	fff7c793          	not	a5,a5
 8000d04:	0107f7b3          	and	a5,a5,a6
        /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
 8000d08:	00b615b3          	sll	a1,a2,a1
 8000d0c:	8ddd                	or	a1,a1,a5
        ADC_RSQ2(adc_periph) = rsq;
 8000d0e:	d94c                	sw	a1,52(a0)
        ADC_RSQ0(adc_periph) = rsq;
    }else{
    }
    
    /* ADC sampling time config */
    if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
 8000d10:	47a5                	li	a5,9
 8000d12:	06c7e963          	bltu	a5,a2,8000d84 <adc_regular_channel_config+0x98>
        /* the regular group sequence rank is smaller than ten */
        sampt = ADC_SAMPT1(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000d16:	478d                	li	a5,3
 8000d18:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT1(adc_periph);
 8000d1c:	490c                	lw	a1,16(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000d1e:	471d                	li	a4,7
 8000d20:	00c71733          	sll	a4,a4,a2
 8000d24:	fff74713          	not	a4,a4
 8000d28:	8f6d                	and	a4,a4,a1
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
 8000d2a:	00c69633          	sll	a2,a3,a2
 8000d2e:	8e59                	or	a2,a2,a4
        ADC_SAMPT1(adc_periph) = sampt;
 8000d30:	c910                	sw	a2,16(a0)
 8000d32:	8082                	ret
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
 8000d34:	47ad                	li	a5,11
 8000d36:	02b7e363          	bltu	a5,a1,8000d5c <adc_regular_channel_config+0x70>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000d3a:	15e9                	addi	a1,a1,-6
 8000d3c:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ1(adc_periph);
 8000d40:	03052803          	lw	a6,48(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000d44:	47fd                	li	a5,31
 8000d46:	00b797b3          	sll	a5,a5,a1
 8000d4a:	fff7c793          	not	a5,a5
 8000d4e:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
 8000d52:	00b615b3          	sll	a1,a2,a1
 8000d56:	8ddd                	or	a1,a1,a5
        ADC_RSQ1(adc_periph) = rsq;
 8000d58:	d90c                	sw	a1,48(a0)
 8000d5a:	bf5d                	j	8000d10 <adc_regular_channel_config+0x24>
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
 8000d5c:	47bd                	li	a5,15
 8000d5e:	fab7e9e3          	bltu	a5,a1,8000d10 <adc_regular_channel_config+0x24>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000d62:	15d1                	addi	a1,a1,-12
 8000d64:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ0(adc_periph);
 8000d68:	02c52803          	lw	a6,44(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000d6c:	47fd                	li	a5,31
 8000d6e:	00b797b3          	sll	a5,a5,a1
 8000d72:	fff7c793          	not	a5,a5
 8000d76:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
 8000d7a:	00b615b3          	sll	a1,a2,a1
 8000d7e:	8ddd                	or	a1,a1,a5
        ADC_RSQ0(adc_periph) = rsq;
 8000d80:	d54c                	sw	a1,44(a0)
 8000d82:	b779                	j	8000d10 <adc_regular_channel_config+0x24>
    }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
 8000d84:	47c5                	li	a5,17
 8000d86:	02c7e163          	bltu	a5,a2,8000da8 <adc_regular_channel_config+0xbc>
        /* the regular group sequence rank is smaller than eighteen */
        sampt = ADC_SAMPT0(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000d8a:	478d                	li	a5,3
 8000d8c:	1659                	addi	a2,a2,-10
 8000d8e:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT0(adc_periph);
 8000d92:	4558                	lw	a4,12(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000d94:	479d                	li	a5,7
 8000d96:	00c797b3          	sll	a5,a5,a2
 8000d9a:	fff7c793          	not	a5,a5
 8000d9e:	8ff9                	and	a5,a5,a4
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
 8000da0:	00c69633          	sll	a2,a3,a2
 8000da4:	8fd1                	or	a5,a5,a2
        ADC_SAMPT0(adc_periph) = sampt;
 8000da6:	c55c                	sw	a5,12(a0)
    }else{
    }
}
 8000da8:	8082                	ret

08000daa <adc_external_trigger_source_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
{   
    switch(adc_channel_group){
 8000daa:	4785                	li	a5,1
 8000dac:	00f58663          	beq	a1,a5,8000db8 <adc_external_trigger_source_config+0xe>
 8000db0:	4789                	li	a5,2
 8000db2:	00f58d63          	beq	a1,a5,8000dcc <adc_external_trigger_source_config+0x22>
 8000db6:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure ADC regular group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
 8000db8:	4514                	lw	a3,8(a0)
 8000dba:	fff205b7          	lui	a1,0xfff20
 8000dbe:	15fd                	addi	a1,a1,-1
 8000dc0:	8eed                	and	a3,a3,a1
 8000dc2:	c514                	sw	a3,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000dc4:	4518                	lw	a4,8(a0)
 8000dc6:	8f51                	or	a4,a4,a2
 8000dc8:	c518                	sw	a4,8(a0)
        break;
 8000dca:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure ADC inserted group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
 8000dcc:	4518                	lw	a4,8(a0)
 8000dce:	76e5                	lui	a3,0xffff9
 8000dd0:	16fd                	addi	a3,a3,-1
 8000dd2:	8f75                	and	a4,a4,a3
 8000dd4:	c518                	sw	a4,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000dd6:	451c                	lw	a5,8(a0)
 8000dd8:	8fd1                	or	a5,a5,a2
 8000dda:	c51c                	sw	a5,8(a0)
        break;
    default:
        break;
    }
}
 8000ddc:	8082                	ret

08000dde <adc_external_trigger_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
{
    if(newvalue){
 8000dde:	0015f793          	andi	a5,a1,1
 8000de2:	8989                	andi	a1,a1,2
 8000de4:	ce09                	beqz	a2,8000dfe <adc_external_trigger_config+0x20>
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000de6:	c791                	beqz	a5,8000df2 <adc_external_trigger_config+0x14>
            /* enable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
 8000de8:	451c                	lw	a5,8(a0)
 8000dea:	00100737          	lui	a4,0x100
 8000dee:	8fd9                	or	a5,a5,a4
 8000df0:	c51c                	sw	a5,8(a0)
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000df2:	c589                	beqz	a1,8000dfc <adc_external_trigger_config+0x1e>
            /* enable ADC inserted channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
 8000df4:	451c                	lw	a5,8(a0)
 8000df6:	6721                	lui	a4,0x8
 8000df8:	8fd9                	or	a5,a5,a4
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000dfa:	c51c                	sw	a5,8(a0)
        }      
    }
}
 8000dfc:	8082                	ret
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000dfe:	c799                	beqz	a5,8000e0c <adc_external_trigger_config+0x2e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
 8000e00:	451c                	lw	a5,8(a0)
 8000e02:	fff00737          	lui	a4,0xfff00
 8000e06:	177d                	addi	a4,a4,-1
 8000e08:	8ff9                	and	a5,a5,a4
 8000e0a:	c51c                	sw	a5,8(a0)
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000e0c:	d9e5                	beqz	a1,8000dfc <adc_external_trigger_config+0x1e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000e0e:	451c                	lw	a5,8(a0)
 8000e10:	7761                	lui	a4,0xffff8
 8000e12:	177d                	addi	a4,a4,-1
 8000e14:	8ff9                	and	a5,a5,a4
 8000e16:	b7d5                	j	8000dfa <adc_external_trigger_config+0x1c>

08000e18 <adc_software_trigger_enable>:
    \param[out] none
    \retval     none
*/
void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
{
    if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000e18:	0015f793          	andi	a5,a1,1
 8000e1c:	c791                	beqz	a5,8000e28 <adc_software_trigger_enable+0x10>
        /* enable ADC regular channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
 8000e1e:	451c                	lw	a5,8(a0)
 8000e20:	00400737          	lui	a4,0x400
 8000e24:	8fd9                	or	a5,a5,a4
 8000e26:	c51c                	sw	a5,8(a0)
    }
    if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000e28:	8989                	andi	a1,a1,2
 8000e2a:	c591                	beqz	a1,8000e36 <adc_software_trigger_enable+0x1e>
        /* enable ADC inserted channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
 8000e2c:	451c                	lw	a5,8(a0)
 8000e2e:	00200737          	lui	a4,0x200
 8000e32:	8fd9                	or	a5,a5,a4
 8000e34:	c51c                	sw	a5,8(a0)
    }
}
 8000e36:	8082                	ret

08000e38 <adc_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus adc_flag_get(uint32_t adc_periph, uint32_t adc_flag)
{
    FlagStatus reval = RESET;
    if(ADC_STAT(adc_periph) & adc_flag){
 8000e38:	4108                	lw	a0,0(a0)
 8000e3a:	8d6d                	and	a0,a0,a1
        reval = SET;
    }
    return reval;
}
 8000e3c:	00a03533          	snez	a0,a0
 8000e40:	8082                	ret

08000e42 <adc_flag_clear>:
    \param[out] none
    \retval     none
*/
void adc_flag_clear(uint32_t adc_periph, uint32_t adc_flag)
{
    ADC_STAT(adc_periph) &= ~((uint32_t)adc_flag);
 8000e42:	411c                	lw	a5,0(a0)
 8000e44:	fff5c593          	not	a1,a1
 8000e48:	8dfd                	and	a1,a1,a5
 8000e4a:	c10c                	sw	a1,0(a0)
}
 8000e4c:	8082                	ret

08000e4e <dma_deinit>:
*/
static ErrStatus dma_periph_and_channel_check(uint32_t dma_periph, dma_channel_enum channelx)
{
    ErrStatus val = SUCCESS;

    if(DMA1 == dma_periph){
 8000e4e:	400207b7          	lui	a5,0x40020
 8000e52:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000e56:	00f51663          	bne	a0,a5,8000e62 <dma_deinit+0x14>
        /* for DMA1, the channel is from DMA_CH0 to DMA_CH4 */
        if(channelx > DMA_CH4){
 8000e5a:	4791                	li	a5,4
 8000e5c:	00b7f363          	bgeu	a5,a1,8000e62 <dma_deinit+0x14>
		DMA_WRONG_HANDLE
 8000e60:	a001                	j	8000e60 <dma_deinit+0x12>
	DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
 8000e62:	47d1                	li	a5,20
 8000e64:	02f587b3          	mul	a5,a1,a5
 8000e68:	97aa                	add	a5,a5,a0
 8000e6a:	4798                	lw	a4,8(a5)
 8000e6c:	9b79                	andi	a4,a4,-2
 8000e6e:	c798                	sw	a4,8(a5)
	DMA_CHCTL(dma_periph, channelx) = DMA_CHCTL_RESET_VALUE;
 8000e70:	0007a423          	sw	zero,8(a5)
	DMA_CHCNT(dma_periph, channelx) = DMA_CHCNT_RESET_VALUE;
 8000e74:	0007a623          	sw	zero,12(a5)
	DMA_CHPADDR(dma_periph, channelx) = DMA_CHPADDR_RESET_VALUE;
 8000e78:	0007a823          	sw	zero,16(a5)
	DMA_CHMADDR(dma_periph, channelx) = DMA_CHMADDR_RESET_VALUE;
 8000e7c:	0007aa23          	sw	zero,20(a5)
	DMA_INTC(dma_periph) |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, (uint32_t)channelx);
 8000e80:	4158                	lw	a4,4(a0)
 8000e82:	00259793          	slli	a5,a1,0x2
 8000e86:	45bd                	li	a1,15
 8000e88:	00f595b3          	sll	a1,a1,a5
 8000e8c:	8dd9                	or	a1,a1,a4
 8000e8e:	c14c                	sw	a1,4(a0)
}
 8000e90:	8082                	ret

08000e92 <dma_init>:
    if(DMA1 == dma_periph){
 8000e92:	400207b7          	lui	a5,0x40020
 8000e96:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000e9a:	00f51663          	bne	a0,a5,8000ea6 <dma_init+0x14>
        if(channelx > DMA_CH4){
 8000e9e:	4791                	li	a5,4
 8000ea0:	00b7f363          	bgeu	a5,a1,8000ea6 <dma_init+0x14>
        DMA_WRONG_HANDLE
 8000ea4:	a001                	j	8000ea4 <dma_init+0x12>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000ea6:	47d1                	li	a5,20
 8000ea8:	02f585b3          	mul	a1,a1,a5
 8000eac:	421c                	lw	a5,0(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000eae:	7771                	lui	a4,0xffffc
 8000eb0:	0ff70713          	addi	a4,a4,255 # ffffc0ff <_sp+0xdfff40ff>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000eb4:	952e                	add	a0,a0,a1
 8000eb6:	c91c                	sw	a5,16(a0)
    DMA_CHMADDR(dma_periph, channelx) = init_struct->memory_addr;
 8000eb8:	461c                	lw	a5,8(a2)
 8000eba:	c95c                	sw	a5,20(a0)
    DMA_CHCNT(dma_periph, channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 8000ebc:	01065783          	lhu	a5,16(a2) # 1010 <__stack_size+0x10>
 8000ec0:	c55c                	sw	a5,12(a0)
    ctl = DMA_CHCTL(dma_periph, channelx);
 8000ec2:	451c                	lw	a5,8(a0)
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000ec4:	4654                	lw	a3,12(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000ec6:	8f7d                	and	a4,a4,a5
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000ec8:	425c                	lw	a5,4(a2)
 8000eca:	8fd5                	or	a5,a5,a3
 8000ecc:	4a54                	lw	a3,20(a2)
 8000ece:	8fd5                	or	a5,a5,a3
 8000ed0:	8fd9                	or	a5,a5,a4
    DMA_CHCTL(dma_periph, channelx) = ctl;
 8000ed2:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc){
 8000ed4:	01864703          	lbu	a4,24(a2)
 8000ed8:	4785                	li	a5,1
 8000eda:	02f71663          	bne	a4,a5,8000f06 <dma_init+0x74>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
 8000ede:	451c                	lw	a5,8(a0)
 8000ee0:	0407e793          	ori	a5,a5,64
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000ee4:	c51c                	sw	a5,8(a0)
    if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc){
 8000ee6:	01964703          	lbu	a4,25(a2)
 8000eea:	4785                	li	a5,1
 8000eec:	02f71163          	bne	a4,a5,8000f0e <dma_init+0x7c>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
 8000ef0:	451c                	lw	a5,8(a0)
 8000ef2:	0807e793          	ori	a5,a5,128
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000ef6:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction){
 8000ef8:	01a64783          	lbu	a5,26(a2)
 8000efc:	ef89                	bnez	a5,8000f16 <dma_init+0x84>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
 8000efe:	451c                	lw	a5,8(a0)
 8000f00:	9bbd                	andi	a5,a5,-17
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000f02:	c51c                	sw	a5,8(a0)
}
 8000f04:	8082                	ret
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000f06:	451c                	lw	a5,8(a0)
 8000f08:	fbf7f793          	andi	a5,a5,-65
 8000f0c:	bfe1                	j	8000ee4 <dma_init+0x52>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000f0e:	451c                	lw	a5,8(a0)
 8000f10:	f7f7f793          	andi	a5,a5,-129
 8000f14:	b7cd                	j	8000ef6 <dma_init+0x64>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000f16:	451c                	lw	a5,8(a0)
 8000f18:	0107e793          	ori	a5,a5,16
 8000f1c:	b7dd                	j	8000f02 <dma_init+0x70>

08000f1e <dma_circulation_enable>:
    if(DMA1 == dma_periph){
 8000f1e:	400207b7          	lui	a5,0x40020
 8000f22:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f26:	00f51663          	bne	a0,a5,8000f32 <dma_circulation_enable+0x14>
        if(channelx > DMA_CH4){
 8000f2a:	4791                	li	a5,4
 8000f2c:	00b7f363          	bgeu	a5,a1,8000f32 <dma_circulation_enable+0x14>
        DMA_WRONG_HANDLE
 8000f30:	a001                	j	8000f30 <dma_circulation_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CMEN;
 8000f32:	47d1                	li	a5,20
 8000f34:	02f585b3          	mul	a1,a1,a5
 8000f38:	952e                	add	a0,a0,a1
 8000f3a:	451c                	lw	a5,8(a0)
 8000f3c:	0207e793          	ori	a5,a5,32
 8000f40:	c51c                	sw	a5,8(a0)
}
 8000f42:	8082                	ret

08000f44 <dma_circulation_disable>:
    if(DMA1 == dma_periph){
 8000f44:	400207b7          	lui	a5,0x40020
 8000f48:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f4c:	00f51663          	bne	a0,a5,8000f58 <dma_circulation_disable+0x14>
        if(channelx > DMA_CH4){
 8000f50:	4791                	li	a5,4
 8000f52:	00b7f363          	bgeu	a5,a1,8000f58 <dma_circulation_disable+0x14>
        DMA_WRONG_HANDLE
 8000f56:	a001                	j	8000f56 <dma_circulation_disable+0x12>
    DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CMEN;
 8000f58:	47d1                	li	a5,20
 8000f5a:	02f585b3          	mul	a1,a1,a5
 8000f5e:	952e                	add	a0,a0,a1
 8000f60:	451c                	lw	a5,8(a0)
 8000f62:	fdf7f793          	andi	a5,a5,-33
 8000f66:	c51c                	sw	a5,8(a0)
}
 8000f68:	8082                	ret

08000f6a <dma_channel_enable>:
    if(DMA1 == dma_periph){
 8000f6a:	400207b7          	lui	a5,0x40020
 8000f6e:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f72:	00f51663          	bne	a0,a5,8000f7e <dma_channel_enable+0x14>
        if(channelx > DMA_CH4){
 8000f76:	4791                	li	a5,4
 8000f78:	00b7f363          	bgeu	a5,a1,8000f7e <dma_channel_enable+0x14>
        DMA_WRONG_HANDLE
 8000f7c:	a001                	j	8000f7c <dma_channel_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CHEN;
 8000f7e:	47d1                	li	a5,20
 8000f80:	02f585b3          	mul	a1,a1,a5
 8000f84:	952e                	add	a0,a0,a1
 8000f86:	451c                	lw	a5,8(a0)
 8000f88:	0017e793          	ori	a5,a5,1
 8000f8c:	c51c                	sw	a5,8(a0)
}
 8000f8e:	8082                	ret

08000f90 <eclic_global_interrupt_enable>:
    \retval     none
*/
void eclic_global_interrupt_enable(void)
{
    /* set machine interrupt enable bit */
    set_csr(mstatus, MSTATUS_MIE);
 8000f90:	300467f3          	csrrsi	a5,mstatus,8
}
 8000f94:	8082                	ret

08000f96 <eclic_global_interrupt_disable>:
    \retval     none
*/
void eclic_global_interrupt_disable(void)
{
    /* clear machine interrupt enable bit */
    clear_csr(mstatus, MSTATUS_MIE);
 8000f96:	300477f3          	csrrci	a5,mstatus,8
}
 8000f9a:	8082                	ret

08000f9c <eclic_irq_enable>:
    \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
    \param[out] none
    \retval     none
*/
void eclic_irq_enable(uint32_t source, uint8_t level, uint8_t priority)
{
 8000f9c:	1101                	addi	sp,sp,-32
 8000f9e:	ce06                	sw	ra,28(sp)
 8000fa0:	cc22                	sw	s0,24(sp)
 8000fa2:	c432                	sw	a2,8(sp)
 8000fa4:	842a                	mv	s0,a0
 8000fa6:	c62e                	sw	a1,12(sp)
    eclic_enable_interrupt(source);
 8000fa8:	00001097          	auipc	ra,0x1
 8000fac:	c9a080e7          	jalr	-870(ra) # 8001c42 <eclic_enable_interrupt>
    eclic_set_irq_lvl_abs(source, level);
 8000fb0:	45b2                	lw	a1,12(sp)
 8000fb2:	8522                	mv	a0,s0
 8000fb4:	00001097          	auipc	ra,0x1
 8000fb8:	cae080e7          	jalr	-850(ra) # 8001c62 <eclic_set_irq_lvl_abs>
    eclic_set_irq_priority(source, priority);
 8000fbc:	4622                	lw	a2,8(sp)
 8000fbe:	8522                	mv	a0,s0
}
 8000fc0:	4462                	lw	s0,24(sp)
 8000fc2:	40f2                	lw	ra,28(sp)
    eclic_set_irq_priority(source, priority);
 8000fc4:	85b2                	mv	a1,a2
}
 8000fc6:	6105                	addi	sp,sp,32
    eclic_set_irq_priority(source, priority);
 8000fc8:	00001317          	auipc	t1,0x1
 8000fcc:	cf230067          	jr	-782(t1) # 8001cba <eclic_set_irq_priority>

08000fd0 <exti_interrupt_flag_clear>:
 8000fd0:	400107b7          	lui	a5,0x40010
 8000fd4:	40a7aa23          	sw	a0,1044(a5) # 40010414 <_sp+0x20008414>
 8000fd8:	8082                	ret

08000fda <gpio_init>:

    /* GPIO mode configuration */
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));

    /* GPIO speed configuration */
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000fda:	0105f793          	andi	a5,a1,16
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));
 8000fde:	00f5f893          	andi	a7,a1,15
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000fe2:	c399                	beqz	a5,8000fe8 <gpio_init+0xe>
        /* output mode max speed:10MHz,2MHz,50MHz */
        temp_mode |= (uint32_t) speed;
 8000fe4:	00c8e8b3          	or	a7,a7,a2
{
 8000fe8:	4781                	li	a5,0
    }

    /* configure the eight low port pins with GPIO_CTL0 */
    for (i = 0U; i < 8U; i++) {
        if ((1U << i) & pin) {
 8000fea:	4e05                	li	t3,1
            reg = GPIO_CTL0(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i);
 8000fec:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000fee:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000ff2:	04800f93          	li	t6,72
    for (i = 0U; i < 8U; i++) {
 8000ff6:	4321                	li	t1,8
        if ((1U << i) & pin) {
 8000ff8:	00fe1633          	sll	a2,t3,a5
 8000ffc:	8e75                	and	a2,a2,a3
 8000ffe:	c21d                	beqz	a2,8001024 <gpio_init+0x4a>
            reg = GPIO_CTL0(gpio_periph);
 8001000:	00279713          	slli	a4,a5,0x2
 8001004:	00052283          	lw	t0,0(a0)
            reg &= ~GPIO_MODE_MASK(i);
 8001008:	00ee9833          	sll	a6,t4,a4
 800100c:	fff84813          	not	a6,a6
 8001010:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i, temp_mode);
 8001014:	00e89733          	sll	a4,a7,a4
 8001018:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 800101c:	05e59963          	bne	a1,t5,800106e <gpio_init+0x94>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001020:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL0 register */
            GPIO_CTL0(gpio_periph) = reg;
 8001022:	c118                	sw	a4,0(a0)
 8001024:	0785                	addi	a5,a5,1
    for (i = 0U; i < 8U; i++) {
 8001026:	fc6799e3          	bne	a5,t1,8000ff8 <gpio_init+0x1e>
        }
    }
    /* configure the eight high port pins with GPIO_CTL1 */
    for (i = 8U; i < 16U; i++) {
        if ((1U << i) & pin) {
 800102a:	4e05                	li	t3,1
            reg = GPIO_CTL1(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i - 8U);
 800102c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 800102e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8001032:	04800f93          	li	t6,72
    for (i = 8U; i < 16U; i++) {
 8001036:	4341                	li	t1,16
        if ((1U << i) & pin) {
 8001038:	00fe1633          	sll	a2,t3,a5
 800103c:	8e75                	and	a2,a2,a3
 800103e:	c605                	beqz	a2,8001066 <gpio_init+0x8c>
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8001040:	00279713          	slli	a4,a5,0x2
 8001044:	1701                	addi	a4,a4,-32
            reg = GPIO_CTL1(gpio_periph);
 8001046:	00452283          	lw	t0,4(a0)
            reg &= ~GPIO_MODE_MASK(i - 8U);
 800104a:	00ee9833          	sll	a6,t4,a4
 800104e:	fff84813          	not	a6,a6
 8001052:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);
 8001056:	00e89733          	sll	a4,a7,a4
 800105a:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 800105e:	01e59c63          	bne	a1,t5,8001076 <gpio_init+0x9c>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001062:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL1 register */
            GPIO_CTL1(gpio_periph) = reg;
 8001064:	c158                	sw	a4,4(a0)
 8001066:	0785                	addi	a5,a5,1
    for (i = 8U; i < 16U; i++) {
 8001068:	fc6798e3          	bne	a5,t1,8001038 <gpio_init+0x5e>
        }
    }
}
 800106c:	8082                	ret
                if (GPIO_MODE_IPU == mode) {
 800106e:	fbf59ae3          	bne	a1,t6,8001022 <gpio_init+0x48>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001072:	c910                	sw	a2,16(a0)
 8001074:	b77d                	j	8001022 <gpio_init+0x48>
                if (GPIO_MODE_IPU == mode) {
 8001076:	fff597e3          	bne	a1,t6,8001064 <gpio_init+0x8a>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 800107a:	c910                	sw	a2,16(a0)
 800107c:	b7e5                	j	8001064 <gpio_init+0x8a>

0800107e <gpio_bit_set>:
    \param[out] none
    \retval     none
*/
void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BOP(gpio_periph) = (uint32_t) pin;
 800107e:	c90c                	sw	a1,16(a0)
}
 8001080:	8082                	ret

08001082 <gpio_bit_reset>:
    \param[out] none
    \retval     none
*/
void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BC(gpio_periph) = (uint32_t) pin;
 8001082:	c94c                	sw	a1,20(a0)
}
 8001084:	8082                	ret

08001086 <gpio_bit_write>:
    \param[out] none
    \retval     none
*/
void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
{
    if (RESET != bit_value) {
 8001086:	c219                	beqz	a2,800108c <gpio_bit_write+0x6>
        GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8001088:	c90c                	sw	a1,16(a0)
 800108a:	8082                	ret
    } else {
        GPIO_BC(gpio_periph) = (uint32_t) pin;
 800108c:	c94c                	sw	a1,20(a0)
    }
}
 800108e:	8082                	ret

08001090 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8001090:	400217b7          	lui	a5,0x40021
 8001094:	00655713          	srli	a4,a0,0x6
 8001098:	973e                	add	a4,a4,a5
 800109a:	4314                	lw	a3,0(a4)
 800109c:	4785                	li	a5,1
 800109e:	00a797b3          	sll	a5,a5,a0
 80010a2:	8fd5                	or	a5,a5,a3
 80010a4:	c31c                	sw	a5,0(a4)
}
 80010a6:	8082                	ret

080010a8 <rcu_periph_reset_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
 80010a8:	400217b7          	lui	a5,0x40021
 80010ac:	00655713          	srli	a4,a0,0x6
 80010b0:	973e                	add	a4,a4,a5
 80010b2:	4314                	lw	a3,0(a4)
 80010b4:	4785                	li	a5,1
 80010b6:	00a797b3          	sll	a5,a5,a0
 80010ba:	8fd5                	or	a5,a5,a3
 80010bc:	c31c                	sw	a5,0(a4)
}
 80010be:	8082                	ret

080010c0 <rcu_periph_reset_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
 80010c0:	400217b7          	lui	a5,0x40021
 80010c4:	00655713          	srli	a4,a0,0x6
 80010c8:	973e                	add	a4,a4,a5
 80010ca:	4314                	lw	a3,0(a4)
 80010cc:	4785                	li	a5,1
 80010ce:	00a797b3          	sll	a5,a5,a0
 80010d2:	fff7c793          	not	a5,a5
 80010d6:	8ff5                	and	a5,a5,a3
 80010d8:	c31c                	sw	a5,0(a4)
}
 80010da:	8082                	ret

080010dc <rcu_adc_clock_config>:
void rcu_adc_clock_config(uint32_t adc_psc)
{
    uint32_t reg0;

    /* reset the ADCPSC bits */
    reg0 = RCU_CFG0;
 80010dc:	400217b7          	lui	a5,0x40021
 80010e0:	43dc                	lw	a5,4(a5)
    reg0 &= ~(RCU_CFG0_ADCPSC_2 | RCU_CFG0_ADCPSC);
 80010e2:	efff4737          	lui	a4,0xefff4
 80010e6:	177d                	addi	a4,a4,-1
 80010e8:	8ff9                	and	a5,a5,a4

    /* set the ADC prescaler factor */
    switch(adc_psc){
 80010ea:	4715                	li	a4,5
 80010ec:	00e50e63          	beq	a0,a4,8001108 <rcu_adc_clock_config+0x2c>
 80010f0:	00a76963          	bltu	a4,a0,8001102 <rcu_adc_clock_config+0x26>
 80010f4:	470d                	li	a4,3
 80010f6:	02a77063          	bgeu	a4,a0,8001116 <rcu_adc_clock_config+0x3a>
        default:
            break;
    }

    /* set the register */
    RCU_CFG0 = reg0;
 80010fa:	40021737          	lui	a4,0x40021
 80010fe:	c35c                	sw	a5,4(a4)
}
 8001100:	8082                	ret
    switch(adc_psc){
 8001102:	471d                	li	a4,7
 8001104:	fee51be3          	bne	a0,a4,80010fa <rcu_adc_clock_config+0x1e>
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 8001108:	053a                	slli	a0,a0,0xe
 800110a:	7731                	lui	a4,0xfffec
 800110c:	8d79                	and	a0,a0,a4
 800110e:	8d5d                	or	a0,a0,a5
 8001110:	100007b7          	lui	a5,0x10000
 8001114:	a011                	j	8001118 <rcu_adc_clock_config+0x3c>
            reg0 |= (adc_psc << 14);
 8001116:	053a                	slli	a0,a0,0xe
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 8001118:	8fc9                	or	a5,a5,a0
            break;
 800111a:	b7c5                	j	80010fa <rcu_adc_clock_config+0x1e>

0800111c <rcu_usb_clock_config>:
*/
void rcu_usb_clock_config(uint32_t usb_psc)
{
    uint32_t reg;
    
    reg = RCU_CFG0;
 800111c:	400216b7          	lui	a3,0x40021
 8001120:	42dc                	lw	a5,4(a3)

    /* configure the USBFS prescaler factor */
    reg &= ~RCU_CFG0_USBFSPSC;
 8001122:	ff400737          	lui	a4,0xff400
 8001126:	177d                	addi	a4,a4,-1
 8001128:	8ff9                	and	a5,a5,a4
    RCU_CFG0 = (reg | usb_psc);
 800112a:	8d5d                	or	a0,a0,a5
 800112c:	c2c8                	sw	a0,4(a3)
}
 800112e:	8082                	ret

08001130 <rcu_clock_freq_get>:
      \arg        CK_APB2: APB2 clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8001130:	7179                	addi	sp,sp,-48
    uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
    uint32_t pllsel, predv0sel, pllmf,ck_src, idx, clk_exp;
    uint32_t predv0, predv1, pll1mf;

    /* exponent of AHB, APB1 and APB2 clock divider */
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001132:	080005b7          	lui	a1,0x8000
{
 8001136:	d422                	sw	s0,40(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001138:	4641                	li	a2,16
{
 800113a:	842a                	mv	s0,a0
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800113c:	28058593          	addi	a1,a1,640 # 8000280 <enable_mcycle_minstret+0x34>
 8001140:	0808                	addi	a0,sp,16
{
 8001142:	d606                	sw	ra,44(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001144:	00006097          	auipc	ra,0x6
 8001148:	080080e7          	jalr	128(ra) # 80071c4 <memcpy>
    uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800114c:	040307b7          	lui	a5,0x4030
 8001150:	20178793          	addi	a5,a5,513 # 4030201 <__stack_size+0x402f201>
 8001154:	c002                	sw	zero,0(sp)
 8001156:	c23e                	sw	a5,4(sp)
    uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8001158:	c402                	sw	zero,8(sp)
 800115a:	c63e                	sw	a5,12(sp)

    sws = GET_BITS(RCU_CFG0, 2, 3);
 800115c:	40021737          	lui	a4,0x40021
 8001160:	435c                	lw	a5,4(a4)
    switch(sws){
 8001162:	4689                	li	a3,2
    sws = GET_BITS(RCU_CFG0, 2, 3);
 8001164:	8389                	srli	a5,a5,0x2
 8001166:	8b8d                	andi	a5,a5,3
    switch(sws){
 8001168:	0ed79763          	bne	a5,a3,8001256 <rcu_clock_freq_get+0x126>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* PLL clock source selection, HXTAL or IRC8M/2 */
        pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 800116c:	435c                	lw	a5,4(a4)

        if(RCU_PLLSRC_HXTAL == pllsel) {
 800116e:	00f79693          	slli	a3,a5,0xf
 8001172:	0606d663          	bgez	a3,80011de <rcu_clock_freq_get+0xae>
            /* PLL clock source is HXTAL */
            ck_src = HXTAL_VALUE;

            predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001176:	575c                	lw	a5,44(a4)
            /* source clock use PLL1 */
            if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001178:	00f79693          	slli	a3,a5,0xf
 800117c:	0406dc63          	bgez	a3,80011d4 <rcu_clock_freq_get+0xa4>
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001180:	575c                	lw	a5,44(a4)
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001182:	5758                	lw	a4,44(a4)
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001184:	8391                	srli	a5,a5,0x4
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001186:	8321                	srli	a4,a4,0x8
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001188:	8bbd                	andi	a5,a5,15
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 800118a:	8b3d                	andi	a4,a4,15
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800118c:	00178693          	addi	a3,a5,1
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001190:	0709                	addi	a4,a4,2
                if(17U == pll1mf){
 8001192:	47c5                	li	a5,17
 8001194:	00f71363          	bne	a4,a5,800119a <rcu_clock_freq_get+0x6a>
                    pll1mf = 20U;
 8001198:	4751                	li	a4,20
                }
                ck_src = (ck_src / predv1) * pll1mf;
 800119a:	007a17b7          	lui	a5,0x7a1
 800119e:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80011a2:	02d7d7b3          	divu	a5,a5,a3
 80011a6:	02e787b3          	mul	a5,a5,a4
            }
            predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 80011aa:	40021737          	lui	a4,0x40021
 80011ae:	5758                	lw	a4,44(a4)
 80011b0:	8b3d                	andi	a4,a4,15
 80011b2:	0705                	addi	a4,a4,1
            ck_src /= predv0;
 80011b4:	02e7d733          	divu	a4,a5,a4
            /* PLL clock source is IRC8M/2 */
            ck_src = IRC8M_VALUE/2U;
        }

        /* PLL multiplication factor */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011b8:	400216b7          	lui	a3,0x40021
 80011bc:	42dc                	lw	a5,4(a3)
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011be:	42d4                	lw	a3,4(a3)
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011c0:	83c9                	srli	a5,a5,0x12
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011c2:	00269613          	slli	a2,a3,0x2
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011c6:	8bbd                	andi	a5,a5,15
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011c8:	02065063          	bgez	a2,80011e8 <rcu_clock_freq_get+0xb8>
            pllmf |= 0x10U;
 80011cc:	0107e793          	ori	a5,a5,16
        }
        if(pllmf < 15U){
            pllmf += 2U;
        }else{
            pllmf += 1U;
 80011d0:	0785                	addi	a5,a5,1
        }

        cksys_freq = ck_src * pllmf;

        if(15U == pllmf){
 80011d2:	a00d                	j	80011f4 <rcu_clock_freq_get+0xc4>
            ck_src = HXTAL_VALUE;
 80011d4:	007a17b7          	lui	a5,0x7a1
 80011d8:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80011dc:	b7f9                	j	80011aa <rcu_clock_freq_get+0x7a>
            ck_src = IRC8M_VALUE/2U;
 80011de:	003d17b7          	lui	a5,0x3d1
 80011e2:	90078713          	addi	a4,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 80011e6:	bfc9                	j	80011b8 <rcu_clock_freq_get+0x88>
        if(pllmf < 15U){
 80011e8:	46bd                	li	a3,15
 80011ea:	fed783e3          	beq	a5,a3,80011d0 <rcu_clock_freq_get+0xa0>
            pllmf += 2U;
 80011ee:	0789                	addi	a5,a5,2
        if(15U == pllmf){
 80011f0:	04d78d63          	beq	a5,a3,800124a <rcu_clock_freq_get+0x11a>
        cksys_freq = ck_src * pllmf;
 80011f4:	02e787b3          	mul	a5,a5,a4
        cksys_freq = IRC8M_VALUE;
        break;
    }

    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 80011f8:	400216b7          	lui	a3,0x40021
 80011fc:	42d8                	lw	a4,4(a3)
    clk_exp = ahb_exp[idx];
 80011fe:	1010                	addi	a2,sp,32
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8001200:	8311                	srli	a4,a4,0x4
 8001202:	8b3d                	andi	a4,a4,15
    clk_exp = ahb_exp[idx];
 8001204:	9732                	add	a4,a4,a2
 8001206:	ff074503          	lbu	a0,-16(a4) # 40020ff0 <_sp+0x20018ff0>
    ahb_freq = cksys_freq >> clk_exp;
    
    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 800120a:	42d8                	lw	a4,4(a3)
    ahb_freq = cksys_freq >> clk_exp;
 800120c:	00a7d533          	srl	a0,a5,a0
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8001210:	8321                	srli	a4,a4,0x8
 8001212:	8b1d                	andi	a4,a4,7
    clk_exp = apb1_exp[idx];
 8001214:	9732                	add	a4,a4,a2
 8001216:	fe074603          	lbu	a2,-32(a4)
    apb1_freq = ahb_freq >> clk_exp;
    
    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800121a:	42d8                	lw	a4,4(a3)
    clk_exp = apb2_exp[idx];
 800121c:	1014                	addi	a3,sp,32
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800121e:	832d                	srli	a4,a4,0xb
 8001220:	8b1d                	andi	a4,a4,7
    clk_exp = apb2_exp[idx];
 8001222:	9736                	add	a4,a4,a3
    apb2_freq = ahb_freq >> clk_exp;
    
    /* return the clocks frequency */
    switch(clock){
 8001224:	4685                	li	a3,1
    clk_exp = apb2_exp[idx];
 8001226:	fe874703          	lbu	a4,-24(a4)
    switch(clock){
 800122a:	00d40c63          	beq	s0,a3,8001242 <rcu_clock_freq_get+0x112>
 800122e:	cc05                	beqz	s0,8001266 <rcu_clock_freq_get+0x136>
 8001230:	4789                	li	a5,2
 8001232:	02f40763          	beq	s0,a5,8001260 <rcu_clock_freq_get+0x130>
 8001236:	478d                	li	a5,3
    apb2_freq = ahb_freq >> clk_exp;
 8001238:	00e55533          	srl	a0,a0,a4
    switch(clock){
 800123c:	00f40363          	beq	s0,a5,8001242 <rcu_clock_freq_get+0x112>
    uint32_t sws, ck_freq = 0U;
 8001240:	4501                	li	a0,0
        break;
    default:
        break;
    }
    return ck_freq;
}
 8001242:	50b2                	lw	ra,44(sp)
 8001244:	5422                	lw	s0,40(sp)
 8001246:	6145                	addi	sp,sp,48
 8001248:	8082                	ret
            cksys_freq = ck_src * 6U + ck_src / 2U;
 800124a:	4799                	li	a5,6
 800124c:	02f707b3          	mul	a5,a4,a5
 8001250:	8305                	srli	a4,a4,0x1
 8001252:	97ba                	add	a5,a5,a4
 8001254:	b755                	j	80011f8 <rcu_clock_freq_get+0xc8>
        cksys_freq = IRC8M_VALUE;
 8001256:	007a17b7          	lui	a5,0x7a1
 800125a:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 800125e:	bf69                	j	80011f8 <rcu_clock_freq_get+0xc8>
    apb1_freq = ahb_freq >> clk_exp;
 8001260:	00c55533          	srl	a0,a0,a2
        break;
 8001264:	bff9                	j	8001242 <rcu_clock_freq_get+0x112>
        ck_freq = cksys_freq;
 8001266:	853e                	mv	a0,a5
    return ck_freq;
 8001268:	bfe9                	j	8001242 <rcu_clock_freq_get+0x112>

0800126a <spi_init>:
    \retval     none
*/
void spi_init(uint32_t spi_periph, spi_parameter_struct* spi_struct)
{   
    uint32_t reg = 0U;
    reg = SPI_CTL0(spi_periph);
 800126a:	411c                	lw	a5,0(a0)
    reg &= SPI_INIT_MASK;
 800126c:	670d                	lui	a4,0x3
 800126e:	04070713          	addi	a4,a4,64 # 3040 <__stack_size+0x2040>
    /* select SPI LSB or MSB */
    reg |= spi_struct->endian;
    /* select SPI polarity and phase */
    reg |= spi_struct->clock_polarity_phase;
    /* select SPI prescale to adjust transmit speed */
    reg |= spi_struct->prescale;
 8001272:	41d4                	lw	a3,4(a1)
    reg &= SPI_INIT_MASK;
 8001274:	8f7d                	and	a4,a4,a5
    reg |= spi_struct->prescale;
 8001276:	419c                	lw	a5,0(a1)
 8001278:	8fd5                	or	a5,a5,a3
 800127a:	4594                	lw	a3,8(a1)
 800127c:	8fd5                	or	a5,a5,a3
 800127e:	45d4                	lw	a3,12(a1)
 8001280:	8fd5                	or	a5,a5,a3
 8001282:	4994                	lw	a3,16(a1)
 8001284:	8fd5                	or	a5,a5,a3
 8001286:	49d4                	lw	a3,20(a1)
 8001288:	8fd5                	or	a5,a5,a3
 800128a:	4d94                	lw	a3,24(a1)
 800128c:	8fd5                	or	a5,a5,a3
 800128e:	8fd9                	or	a5,a5,a4

    /* write to SPI_CTL0 register */
    SPI_CTL0(spi_periph) = (uint32_t)reg;
 8001290:	c11c                	sw	a5,0(a0)

    SPI_I2SCTL(spi_periph) &= (uint32_t)(~SPI_I2SCTL_I2SSEL);
 8001292:	4d5c                	lw	a5,28(a0)
 8001294:	777d                	lui	a4,0xfffff
 8001296:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800129a:	8ff9                	and	a5,a5,a4
 800129c:	cd5c                	sw	a5,28(a0)
}
 800129e:	8082                	ret

080012a0 <spi_enable>:
    \param[out] none
    \retval     none
*/
void spi_enable(uint32_t spi_periph)
{
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_SPIEN;
 80012a0:	411c                	lw	a5,0(a0)
 80012a2:	0407e793          	ori	a5,a5,64
 80012a6:	c11c                	sw	a5,0(a0)
}
 80012a8:	8082                	ret

080012aa <spi_i2s_data_transmit>:
    \param[out] none
    \retval     none
*/
void spi_i2s_data_transmit(uint32_t spi_periph, uint16_t data)
{
    SPI_DATA(spi_periph) = (uint32_t)data;
 80012aa:	c54c                	sw	a1,12(a0)
}
 80012ac:	8082                	ret

080012ae <spi_i2s_data_receive>:
    \param[out] none
    \retval     16-bit data
*/
uint16_t spi_i2s_data_receive(uint32_t spi_periph)
{
    return ((uint16_t)SPI_DATA(spi_periph));
 80012ae:	4548                	lw	a0,12(a0)
}
 80012b0:	0542                	slli	a0,a0,0x10
 80012b2:	8141                	srli	a0,a0,0x10
 80012b4:	8082                	ret

080012b6 <spi_crc_polynomial_set>:
    \retval     none
*/
void spi_crc_polynomial_set(uint32_t spi_periph,uint16_t crc_poly)
{
    /* enable SPI CRC */
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_CRCEN;
 80012b6:	411c                	lw	a5,0(a0)
 80012b8:	6709                	lui	a4,0x2
 80012ba:	8fd9                	or	a5,a5,a4
 80012bc:	c11c                	sw	a5,0(a0)

    /* set SPI CRC polynomial */
    SPI_CRCPOLY(spi_periph) = (uint32_t)crc_poly;
 80012be:	c90c                	sw	a1,16(a0)
}
 80012c0:	8082                	ret

080012c2 <spi_i2s_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus spi_i2s_flag_get(uint32_t spi_periph, uint32_t flag)
{
    if(RESET != (SPI_STAT(spi_periph) & flag)){
 80012c2:	4508                	lw	a0,8(a0)
 80012c4:	8d6d                	and	a0,a0,a1
        return SET;
    }else{
        return RESET;
    }
}
 80012c6:	00a03533          	snez	a0,a0
 80012ca:	8082                	ret

080012cc <timer_deinit>:
    \param[in]  timer_periph: TIMERx(x=0..6)
    \param[out] none
    \retval     none
*/
void timer_deinit(uint32_t timer_periph)
{
 80012cc:	1141                	addi	sp,sp,-16
    switch(timer_periph){
 80012ce:	400017b7          	lui	a5,0x40001
{
 80012d2:	c606                	sw	ra,12(sp)
    switch(timer_periph){
 80012d4:	c0078713          	addi	a4,a5,-1024 # 40000c00 <_sp+0x1fff8c00>
 80012d8:	08e50e63          	beq	a0,a4,8001374 <timer_deinit+0xa8>
 80012dc:	02a76763          	bltu	a4,a0,800130a <timer_deinit+0x3e>
 80012e0:	40000737          	lui	a4,0x40000
 80012e4:	40070693          	addi	a3,a4,1024 # 40000400 <_sp+0x1fff8400>
 80012e8:	06d50463          	beq	a0,a3,8001350 <timer_deinit+0x84>
 80012ec:	80078793          	addi	a5,a5,-2048
 80012f0:	06f50963          	beq	a0,a5,8001362 <timer_deinit+0x96>
 80012f4:	0ae51263          	bne	a0,a4,8001398 <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER0RST);
        rcu_periph_reset_disable(RCU_TIMER0RST);
        break;
    case TIMER1:
        /* reset TIMER1 */
        rcu_periph_reset_enable(RCU_TIMER1RST);
 80012f8:	40000513          	li	a0,1024
 80012fc:	00000097          	auipc	ra,0x0
 8001300:	dac080e7          	jalr	-596(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER1RST);
 8001304:	40000513          	li	a0,1024
 8001308:	a835                	j	8001344 <timer_deinit+0x78>
    switch(timer_periph){
 800130a:	40078713          	addi	a4,a5,1024
 800130e:	06e50c63          	beq	a0,a4,8001386 <timer_deinit+0xba>
 8001312:	40013737          	lui	a4,0x40013
 8001316:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_sp+0x2000ac00>
 800131a:	00e50d63          	beq	a0,a4,8001334 <timer_deinit+0x68>
 800131e:	06f51d63          	bne	a0,a5,8001398 <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER4RST);
        rcu_periph_reset_disable(RCU_TIMER4RST);
        break;
    case TIMER5:
        /* reset TIMER5 */
        rcu_periph_reset_enable(RCU_TIMER5RST);
 8001322:	40400513          	li	a0,1028
 8001326:	00000097          	auipc	ra,0x0
 800132a:	d82080e7          	jalr	-638(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER5RST);
 800132e:	40400513          	li	a0,1028
 8001332:	a809                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER0RST);
 8001334:	30b00513          	li	a0,779
 8001338:	00000097          	auipc	ra,0x0
 800133c:	d70080e7          	jalr	-656(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER0RST);
 8001340:	30b00513          	li	a0,779
        break;

    default:
        break;
    }
}
 8001344:	40b2                	lw	ra,12(sp)
 8001346:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_TIMER6RST);
 8001348:	00000317          	auipc	t1,0x0
 800134c:	d7830067          	jr	-648(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_TIMER2RST);
 8001350:	40100513          	li	a0,1025
 8001354:	00000097          	auipc	ra,0x0
 8001358:	d54080e7          	jalr	-684(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER2RST);
 800135c:	40100513          	li	a0,1025
 8001360:	b7d5                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER3RST);
 8001362:	40200513          	li	a0,1026
 8001366:	00000097          	auipc	ra,0x0
 800136a:	d42080e7          	jalr	-702(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER3RST);
 800136e:	40200513          	li	a0,1026
 8001372:	bfc9                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER4RST);
 8001374:	40300513          	li	a0,1027
 8001378:	00000097          	auipc	ra,0x0
 800137c:	d30080e7          	jalr	-720(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER4RST);
 8001380:	40300513          	li	a0,1027
 8001384:	b7c1                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER6RST);
 8001386:	40500513          	li	a0,1029
 800138a:	00000097          	auipc	ra,0x0
 800138e:	d1e080e7          	jalr	-738(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER6RST);
 8001392:	40500513          	li	a0,1029
 8001396:	b77d                	j	8001344 <timer_deinit+0x78>
}
 8001398:	40b2                	lw	ra,12(sp)
 800139a:	0141                	addi	sp,sp,16
 800139c:	8082                	ret

0800139e <timer_struct_para_init>:
{
    /* initialize the init parameter struct member with the default value */
    initpara->prescaler         = 0U;
    initpara->alignedmode       = TIMER_COUNTER_EDGE;
    initpara->counterdirection  = TIMER_COUNTER_UP;
    initpara->period            = 65535U;
 800139e:	67c1                	lui	a5,0x10
 80013a0:	17fd                	addi	a5,a5,-1
    initpara->prescaler         = 0U;
 80013a2:	00052023          	sw	zero,0(a0)
    initpara->counterdirection  = TIMER_COUNTER_UP;
 80013a6:	00051223          	sh	zero,4(a0)
    initpara->period            = 65535U;
 80013aa:	c51c                	sw	a5,8(a0)
    initpara->clockdivision     = TIMER_CKDIV_DIV1;
 80013ac:	00051623          	sh	zero,12(a0)
    initpara->repetitioncounter = 0U;
 80013b0:	00050723          	sb	zero,14(a0)
}
 80013b4:	8082                	ret

080013b6 <timer_init>:
    \retval     none
*/
void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
{
    /* configure the counter prescaler value */
    TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
 80013b6:	0005d783          	lhu	a5,0(a1)
 80013ba:	0045d703          	lhu	a4,4(a1)
 80013be:	bff57693          	andi	a3,a0,-1025
 80013c2:	d51c                	sw	a5,40(a0)

    /* configure the counter direction and aligned mode */
    if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph)
 80013c4:	400137b7          	lui	a5,0x40013
 80013c8:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80013cc:	8b41                	andi	a4,a4,16
 80013ce:	00f50a63          	beq	a0,a5,80013e2 <timer_init+0x2c>
 80013d2:	77fd                	lui	a5,0xfffff
 80013d4:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_sp+0xdfff73ff>
 80013d8:	8fe9                	and	a5,a5,a0
 80013da:	40000637          	lui	a2,0x40000
 80013de:	06c79063          	bne	a5,a2,800143e <timer_init+0x88>
        || (TIMER3 == timer_periph) || (TIMER4 == timer_periph) ){
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
 80013e2:	411c                	lw	a5,0(a0)
 80013e4:	f8f7f793          	andi	a5,a5,-113
 80013e8:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
 80013ea:	0025d783          	lhu	a5,2(a1)
 80013ee:	4110                	lw	a2,0(a0)
 80013f0:	0607f793          	andi	a5,a5,96
 80013f4:	8fd1                	or	a5,a5,a2
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
    }else{
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 80013f6:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK); 
 80013f8:	411c                	lw	a5,0(a0)
 80013fa:	8f5d                	or	a4,a4,a5
 80013fc:	c118                	sw	a4,0(a0)
    }
    
    /* configure the autoreload value */
    TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
 80013fe:	459c                	lw	a5,8(a1)
 8001400:	d55c                	sw	a5,44(a0)

    if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
 8001402:	400017b7          	lui	a5,0x40001
 8001406:	02f68763          	beq	a3,a5,8001434 <timer_init+0x7e>
        /* reset the CKDIV bit */
        TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
 800140a:	411c                	lw	a5,0(a0)
 800140c:	cff7f793          	andi	a5,a5,-769
 8001410:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
 8001412:	00c5d783          	lhu	a5,12(a1)
 8001416:	4118                	lw	a4,0(a0)
 8001418:	3007f793          	andi	a5,a5,768
 800141c:	8fd9                	or	a5,a5,a4
 800141e:	c11c                	sw	a5,0(a0)
    }

    if (TIMER0 == timer_periph) {
 8001420:	400137b7          	lui	a5,0x40013
 8001424:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001428:	00e51663          	bne	a0,a4,8001434 <timer_init+0x7e>
        /* configure the repetition counter value */
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
 800142c:	00e5c703          	lbu	a4,14(a1)
 8001430:	c2e7a823          	sw	a4,-976(a5)
    }

    /* generate an update event */
    TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
 8001434:	495c                	lw	a5,20(a0)
 8001436:	0017e793          	ori	a5,a5,1
 800143a:	c95c                	sw	a5,20(a0)
}
 800143c:	8082                	ret
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 800143e:	411c                	lw	a5,0(a0)
 8001440:	9bbd                	andi	a5,a5,-17
 8001442:	bf55                	j	80013f6 <timer_init+0x40>

08001444 <timer_enable>:
    \param[out] none
    \retval     none
*/
void timer_enable(uint32_t timer_periph)
{
    TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
 8001444:	411c                	lw	a5,0(a0)
 8001446:	0017e793          	ori	a5,a5,1
 800144a:	c11c                	sw	a5,0(a0)
}
 800144c:	8082                	ret

0800144e <timer_channel_output_struct_para_init>:
    \retval     none
*/
void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
{
    /* initialize the channel output parameter struct member with the default value */
    ocpara->outputstate  = TIMER_CCX_DISABLE;
 800144e:	00051023          	sh	zero,0(a0)
    ocpara->outputnstate = TIMER_CCXN_DISABLE;
 8001452:	00051123          	sh	zero,2(a0)
    ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8001456:	00051223          	sh	zero,4(a0)
    ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
 800145a:	00051323          	sh	zero,6(a0)
    ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 800145e:	00051423          	sh	zero,8(a0)
    ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
 8001462:	00051523          	sh	zero,10(a0)
}
 8001466:	8082                	ret

08001468 <timer_channel_output_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
{
    switch(channel){
 8001468:	4785                	li	a5,1
 800146a:	08f58e63          	beq	a1,a5,8001506 <timer_channel_output_config+0x9e>
 800146e:	c981                	beqz	a1,800147e <timer_channel_output_config+0x16>
 8001470:	4789                	li	a5,2
 8001472:	12f58963          	beq	a1,a5,80015a4 <timer_channel_output_config+0x13c>
 8001476:	478d                	li	a5,3
 8001478:	1cf58763          	beq	a1,a5,8001646 <timer_channel_output_config+0x1de>
 800147c:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        /* reset the CH0EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
 800147e:	511c                	lw	a5,32(a0)
 8001480:	9bf9                	andi	a5,a5,-2
 8001482:	d11c                	sw	a5,32(a0)
        /* set the CH0EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
 8001484:	5118                	lw	a4,32(a0)
 8001486:	00065783          	lhu	a5,0(a2) # 40000000 <_sp+0x1fff8000>
 800148a:	8fd9                	or	a5,a5,a4
 800148c:	d11c                	sw	a5,32(a0)
        /* reset the CH0P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
 800148e:	511c                	lw	a5,32(a0)
 8001490:	9bf5                	andi	a5,a5,-3
 8001492:	d11c                	sw	a5,32(a0)
        /* set the CH0P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
 8001494:	5118                	lw	a4,32(a0)
 8001496:	00465783          	lhu	a5,4(a2)
 800149a:	8fd9                	or	a5,a5,a4
 800149c:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 800149e:	400137b7          	lui	a5,0x40013
 80014a2:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80014a6:	04e51c63          	bne	a0,a4,80014fe <timer_channel_output_config+0x96>
            /* reset the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
 80014aa:	5118                	lw	a4,32(a0)
 80014ac:	9b6d                	andi	a4,a4,-5
 80014ae:	d118                	sw	a4,32(a0)
            /* set the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
 80014b0:	5114                	lw	a3,32(a0)
 80014b2:	00265703          	lhu	a4,2(a2)
 80014b6:	8f55                	or	a4,a4,a3
 80014b8:	d118                	sw	a4,32(a0)
            /* reset the CH0NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
 80014ba:	5118                	lw	a4,32(a0)
 80014bc:	9b5d                	andi	a4,a4,-9
 80014be:	d118                	sw	a4,32(a0)
            /* set the CH0NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
 80014c0:	5114                	lw	a3,32(a0)
 80014c2:	00665703          	lhu	a4,6(a2)
 80014c6:	8f55                	or	a4,a4,a3
 80014c8:	d118                	sw	a4,32(a0)
            /* reset the ISO0 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
 80014ca:	c047a703          	lw	a4,-1020(a5)
 80014ce:	eff77713          	andi	a4,a4,-257
 80014d2:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
 80014d6:	c047a683          	lw	a3,-1020(a5)
 80014da:	00865703          	lhu	a4,8(a2)
 80014de:	8f55                	or	a4,a4,a3
 80014e0:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO0N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
 80014e4:	c047a703          	lw	a4,-1020(a5)
 80014e8:	dff77713          	andi	a4,a4,-513
 80014ec:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
 80014f0:	c047a683          	lw	a3,-1020(a5)
 80014f4:	00a65703          	lhu	a4,10(a2)
 80014f8:	8f55                	or	a4,a4,a3
 80014fa:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
 80014fe:	4d1c                	lw	a5,24(a0)
 8001500:	9bf1                	andi	a5,a5,-4
            /* reset the ISO1N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
            /* set the ISO1N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 8001502:	cd1c                	sw	a5,24(a0)
        break;
 8001504:	8082                	ret
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
 8001506:	511c                	lw	a5,32(a0)
 8001508:	9bbd                	andi	a5,a5,-17
 800150a:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
 800150c:	00065783          	lhu	a5,0(a2)
 8001510:	5118                	lw	a4,32(a0)
 8001512:	0792                	slli	a5,a5,0x4
 8001514:	8fd9                	or	a5,a5,a4
 8001516:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
 8001518:	511c                	lw	a5,32(a0)
 800151a:	fdf7f793          	andi	a5,a5,-33
 800151e:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 4U);
 8001520:	00465783          	lhu	a5,4(a2)
 8001524:	5118                	lw	a4,32(a0)
 8001526:	0792                	slli	a5,a5,0x4
 8001528:	8fd9                	or	a5,a5,a4
 800152a:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 800152c:	400137b7          	lui	a5,0x40013
 8001530:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001534:	06e51463          	bne	a0,a4,800159c <timer_channel_output_config+0x134>
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
 8001538:	5118                	lw	a4,32(a0)
 800153a:	fbf77713          	andi	a4,a4,-65
 800153e:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 4U);
 8001540:	00265703          	lhu	a4,2(a2)
 8001544:	5114                	lw	a3,32(a0)
 8001546:	0712                	slli	a4,a4,0x4
 8001548:	8f55                	or	a4,a4,a3
 800154a:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
 800154c:	5118                	lw	a4,32(a0)
 800154e:	f7f77713          	andi	a4,a4,-129
 8001552:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 4U);
 8001554:	00665703          	lhu	a4,6(a2)
 8001558:	5114                	lw	a3,32(a0)
 800155a:	0712                	slli	a4,a4,0x4
 800155c:	8f55                	or	a4,a4,a3
 800155e:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
 8001560:	c047a703          	lw	a4,-1020(a5)
 8001564:	bff77713          	andi	a4,a4,-1025
 8001568:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 2U);
 800156c:	00865703          	lhu	a4,8(a2)
 8001570:	c047a683          	lw	a3,-1020(a5)
 8001574:	070a                	slli	a4,a4,0x2
 8001576:	8f55                	or	a4,a4,a3
 8001578:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
 800157c:	c047a703          	lw	a4,-1020(a5)
 8001580:	76fd                	lui	a3,0xfffff
 8001582:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001586:	8f75                	and	a4,a4,a3
 8001588:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
 800158c:	00a65703          	lhu	a4,10(a2)
 8001590:	c047a683          	lw	a3,-1020(a5)
 8001594:	070a                	slli	a4,a4,0x2
 8001596:	8f55                	or	a4,a4,a3
 8001598:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 800159c:	4d1c                	lw	a5,24(a0)
 800159e:	cff7f793          	andi	a5,a5,-769
 80015a2:	b785                	j	8001502 <timer_channel_output_config+0x9a>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        /* reset the CH2EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
 80015a4:	511c                	lw	a5,32(a0)
 80015a6:	eff7f793          	andi	a5,a5,-257
 80015aa:	d11c                	sw	a5,32(a0)
        /* set the CH2EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
 80015ac:	00065783          	lhu	a5,0(a2)
 80015b0:	5118                	lw	a4,32(a0)
 80015b2:	07a2                	slli	a5,a5,0x8
 80015b4:	8fd9                	or	a5,a5,a4
 80015b6:	d11c                	sw	a5,32(a0)
        /* reset the CH2P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
 80015b8:	511c                	lw	a5,32(a0)
 80015ba:	dff7f793          	andi	a5,a5,-513
 80015be:	d11c                	sw	a5,32(a0)
        /* set the CH2P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 8U);
 80015c0:	00465783          	lhu	a5,4(a2)
 80015c4:	5118                	lw	a4,32(a0)
 80015c6:	07a2                	slli	a5,a5,0x8
 80015c8:	8fd9                	or	a5,a5,a4
 80015ca:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80015cc:	400137b7          	lui	a5,0x40013
 80015d0:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80015d4:	06e51563          	bne	a0,a4,800163e <timer_channel_output_config+0x1d6>
            /* reset the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
 80015d8:	5118                	lw	a4,32(a0)
 80015da:	bff77713          	andi	a4,a4,-1025
 80015de:	d118                	sw	a4,32(a0)
            /* set the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 8U);
 80015e0:	00265703          	lhu	a4,2(a2)
 80015e4:	5114                	lw	a3,32(a0)
 80015e6:	0722                	slli	a4,a4,0x8
 80015e8:	8f55                	or	a4,a4,a3
 80015ea:	d118                	sw	a4,32(a0)
            /* reset the CH2NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
 80015ec:	5118                	lw	a4,32(a0)
 80015ee:	76fd                	lui	a3,0xfffff
 80015f0:	7ff68593          	addi	a1,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 80015f4:	8f6d                	and	a4,a4,a1
 80015f6:	d118                	sw	a4,32(a0)
            /* set the CH2NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 80015f8:	00665703          	lhu	a4,6(a2)
 80015fc:	510c                	lw	a1,32(a0)
            /* reset the ISO2 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 80015fe:	16fd                	addi	a3,a3,-1
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 8001600:	0722                	slli	a4,a4,0x8
 8001602:	8f4d                	or	a4,a4,a1
 8001604:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001606:	c047a703          	lw	a4,-1020(a5)
 800160a:	8ef9                	and	a3,a3,a4
 800160c:	c0d7a223          	sw	a3,-1020(a5)
            /* set the ISO2 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 4U);
 8001610:	00865703          	lhu	a4,8(a2)
 8001614:	c047a683          	lw	a3,-1020(a5)
 8001618:	0712                	slli	a4,a4,0x4
 800161a:	8f55                	or	a4,a4,a3
 800161c:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO2N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
 8001620:	c047a703          	lw	a4,-1020(a5)
 8001624:	76f9                	lui	a3,0xffffe
 8001626:	16fd                	addi	a3,a3,-1
 8001628:	8f75                	and	a4,a4,a3
 800162a:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO2N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
 800162e:	00a65703          	lhu	a4,10(a2)
 8001632:	c047a683          	lw	a3,-1020(a5)
 8001636:	0712                	slli	a4,a4,0x4
 8001638:	8f55                	or	a4,a4,a3
 800163a:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
 800163e:	4d5c                	lw	a5,28(a0)
 8001640:	9bf1                	andi	a5,a5,-4
            /* reset the ISO3 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
            /* set the ISO3 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 8001642:	cd5c                	sw	a5,28(a0)
        break;
    default:
        break;
    }
}
 8001644:	8082                	ret
        TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
 8001646:	511c                	lw	a5,32(a0)
 8001648:	777d                	lui	a4,0xfffff
 800164a:	177d                	addi	a4,a4,-1
 800164c:	8ff9                	and	a5,a5,a4
 800164e:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
 8001650:	00065783          	lhu	a5,0(a2)
 8001654:	5118                	lw	a4,32(a0)
 8001656:	07b2                	slli	a5,a5,0xc
 8001658:	8fd9                	or	a5,a5,a4
 800165a:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
 800165c:	511c                	lw	a5,32(a0)
 800165e:	7779                	lui	a4,0xffffe
 8001660:	177d                	addi	a4,a4,-1
 8001662:	8ff9                	and	a5,a5,a4
 8001664:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 12U);
 8001666:	00465783          	lhu	a5,4(a2)
 800166a:	5118                	lw	a4,32(a0)
 800166c:	07b2                	slli	a5,a5,0xc
 800166e:	8fd9                	or	a5,a5,a4
 8001670:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 8001672:	400137b7          	lui	a5,0x40013
 8001676:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800167a:	02e51163          	bne	a0,a4,800169c <timer_channel_output_config+0x234>
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
 800167e:	c047a703          	lw	a4,-1020(a5)
 8001682:	76f1                	lui	a3,0xffffc
 8001684:	16fd                	addi	a3,a3,-1
 8001686:	8f75                	and	a4,a4,a3
 8001688:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
 800168c:	00865703          	lhu	a4,8(a2)
 8001690:	c047a683          	lw	a3,-1020(a5)
 8001694:	071a                	slli	a4,a4,0x6
 8001696:	8f55                	or	a4,a4,a3
 8001698:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 800169c:	4d5c                	lw	a5,28(a0)
 800169e:	cff7f793          	andi	a5,a5,-769
 80016a2:	b745                	j	8001642 <timer_channel_output_config+0x1da>

080016a4 <timer_channel_output_mode_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
{
    switch(channel){
 80016a4:	4785                	li	a5,1
 80016a6:	02f58263          	beq	a1,a5,80016ca <timer_channel_output_mode_config+0x26>
 80016aa:	c981                	beqz	a1,80016ba <timer_channel_output_mode_config+0x16>
 80016ac:	4789                	li	a5,2
 80016ae:	02f58663          	beq	a1,a5,80016da <timer_channel_output_mode_config+0x36>
 80016b2:	478d                	li	a5,3
 80016b4:	02f58b63          	beq	a1,a5,80016ea <timer_channel_output_mode_config+0x46>
 80016b8:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
 80016ba:	4d1c                	lw	a5,24(a0)
 80016bc:	f8f7f793          	andi	a5,a5,-113
 80016c0:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
 80016c2:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016c4:	8e5d                	or	a2,a2,a5
 80016c6:	cd10                	sw	a2,24(a0)
        break;
 80016c8:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
 80016ca:	4d1c                	lw	a5,24(a0)
 80016cc:	7765                	lui	a4,0xffff9
 80016ce:	177d                	addi	a4,a4,-1
 80016d0:	8ff9                	and	a5,a5,a4
 80016d2:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016d4:	4d1c                	lw	a5,24(a0)
 80016d6:	0622                	slli	a2,a2,0x8
 80016d8:	b7f5                	j	80016c4 <timer_channel_output_mode_config+0x20>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
 80016da:	4d5c                	lw	a5,28(a0)
 80016dc:	f8f7f793          	andi	a5,a5,-113
 80016e0:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
 80016e2:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016e4:	8e5d                	or	a2,a2,a5
 80016e6:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 80016e8:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
 80016ea:	4d5c                	lw	a5,28(a0)
 80016ec:	7765                	lui	a4,0xffff9
 80016ee:	177d                	addi	a4,a4,-1
 80016f0:	8ff9                	and	a5,a5,a4
 80016f2:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016f4:	4d5c                	lw	a5,28(a0)
 80016f6:	0622                	slli	a2,a2,0x8
 80016f8:	b7f5                	j	80016e4 <timer_channel_output_mode_config+0x40>

080016fa <timer_channel_output_pulse_value_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint32_t pulse)
{
    switch(channel){
 80016fa:	4785                	li	a5,1
 80016fc:	00f58c63          	beq	a1,a5,8001714 <timer_channel_output_pulse_value_config+0x1a>
 8001700:	c981                	beqz	a1,8001710 <timer_channel_output_pulse_value_config+0x16>
 8001702:	4789                	li	a5,2
 8001704:	00f58a63          	beq	a1,a5,8001718 <timer_channel_output_pulse_value_config+0x1e>
 8001708:	478d                	li	a5,3
 800170a:	00f58963          	beq	a1,a5,800171c <timer_channel_output_pulse_value_config+0x22>
 800170e:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
 8001710:	d950                	sw	a2,52(a0)
        break;
 8001712:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
 8001714:	dd10                	sw	a2,56(a0)
        break;
 8001716:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
 8001718:	dd50                	sw	a2,60(a0)
        break;
 800171a:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
         TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
 800171c:	c130                	sw	a2,64(a0)
        break;
    default:
        break;
    }
}
 800171e:	8082                	ret

08001720 <timer_channel_output_shadow_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
{
    switch(channel){
 8001720:	4785                	li	a5,1
 8001722:	02f58163          	beq	a1,a5,8001744 <timer_channel_output_shadow_config+0x24>
 8001726:	c981                	beqz	a1,8001736 <timer_channel_output_shadow_config+0x16>
 8001728:	4789                	li	a5,2
 800172a:	02f58663          	beq	a1,a5,8001756 <timer_channel_output_shadow_config+0x36>
 800172e:	478d                	li	a5,3
 8001730:	02f58a63          	beq	a1,a5,8001764 <timer_channel_output_shadow_config+0x44>
 8001734:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
 8001736:	4d1c                	lw	a5,24(a0)
 8001738:	9bdd                	andi	a5,a5,-9
 800173a:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
 800173c:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 800173e:	8e5d                	or	a2,a2,a5
 8001740:	cd10                	sw	a2,24(a0)
        break;
 8001742:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
 8001744:	4d1c                	lw	a5,24(a0)
 8001746:	777d                	lui	a4,0xfffff
 8001748:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800174c:	8ff9                	and	a5,a5,a4
 800174e:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001750:	4d1c                	lw	a5,24(a0)
 8001752:	0622                	slli	a2,a2,0x8
 8001754:	b7ed                	j	800173e <timer_channel_output_shadow_config+0x1e>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
 8001756:	4d5c                	lw	a5,28(a0)
 8001758:	9bdd                	andi	a5,a5,-9
 800175a:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
 800175c:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 800175e:	8e5d                	or	a2,a2,a5
 8001760:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8001762:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
 8001764:	4d5c                	lw	a5,28(a0)
 8001766:	777d                	lui	a4,0xfffff
 8001768:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800176c:	8ff9                	and	a5,a5,a4
 800176e:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001770:	4d5c                	lw	a5,28(a0)
 8001772:	0622                	slli	a2,a2,0x8
 8001774:	b7ed                	j	800175e <timer_channel_output_shadow_config+0x3e>

08001776 <timer_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
 8001776:	455c                	lw	a5,12(a0)
 8001778:	8ddd                	or	a1,a1,a5
 800177a:	c54c                	sw	a1,12(a0)
}
 800177c:	8082                	ret

0800177e <timer_interrupt_disable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_disable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)interrupt); 
 800177e:	455c                	lw	a5,12(a0)
 8001780:	fff5c593          	not	a1,a1
 8001784:	8dfd                	and	a1,a1,a5
 8001786:	c54c                	sw	a1,12(a0)
}
 8001788:	8082                	ret

0800178a <timer_interrupt_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus timer_interrupt_flag_get(uint32_t timer_periph, uint32_t interrupt)
{
    uint32_t val;
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 800178a:	455c                	lw	a5,12(a0)
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 800178c:	4908                	lw	a0,16(a0)
 800178e:	8d6d                	and	a0,a0,a1
 8001790:	c509                	beqz	a0,800179a <timer_interrupt_flag_get+0x10>
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 8001792:	00b7f533          	and	a0,a5,a1
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 8001796:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET;
    }
}
 800179a:	8082                	ret

0800179c <timer_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_flag_clear(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_INTF(timer_periph) = (~(uint32_t)interrupt);
 800179c:	fff5c593          	not	a1,a1
 80017a0:	c90c                	sw	a1,16(a0)
}
 80017a2:	8082                	ret

080017a4 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 80017a4:	1141                	addi	sp,sp,-16
    switch(usart_periph){
 80017a6:	400057b7          	lui	a5,0x40005
{
 80017aa:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 80017ac:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
 80017b0:	06e50963          	beq	a0,a4,8001822 <usart_deinit+0x7e>
 80017b4:	00a76f63          	bltu	a4,a0,80017d2 <usart_deinit+0x2e>
 80017b8:	40004737          	lui	a4,0x40004
 80017bc:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 80017c0:	02e50f63          	beq	a0,a4,80017fe <usart_deinit+0x5a>
 80017c4:	80078793          	addi	a5,a5,-2048
 80017c8:	04f50463          	beq	a0,a5,8001810 <usart_deinit+0x6c>
        rcu_periph_reset_disable(RCU_UART4RST);
        break;
    default:
        break;
    }
}
 80017cc:	40b2                	lw	ra,12(sp)
 80017ce:	0141                	addi	sp,sp,16
 80017d0:	8082                	ret
    switch(usart_periph){
 80017d2:	06f50163          	beq	a0,a5,8001834 <usart_deinit+0x90>
 80017d6:	400147b7          	lui	a5,0x40014
 80017da:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
 80017de:	fef517e3          	bne	a0,a5,80017cc <usart_deinit+0x28>
        rcu_periph_reset_enable(RCU_USART0RST);
 80017e2:	30e00513          	li	a0,782
 80017e6:	00000097          	auipc	ra,0x0
 80017ea:	8c2080e7          	jalr	-1854(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 80017ee:	30e00513          	li	a0,782
}
 80017f2:	40b2                	lw	ra,12(sp)
 80017f4:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_UART4RST);
 80017f6:	00000317          	auipc	t1,0x0
 80017fa:	8ca30067          	jr	-1846(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 80017fe:	41100513          	li	a0,1041
 8001802:	00000097          	auipc	ra,0x0
 8001806:	8a6080e7          	jalr	-1882(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 800180a:	41100513          	li	a0,1041
 800180e:	b7d5                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_USART2RST);
 8001810:	41200513          	li	a0,1042
 8001814:	00000097          	auipc	ra,0x0
 8001818:	894080e7          	jalr	-1900(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART2RST);
 800181c:	41200513          	li	a0,1042
 8001820:	bfc9                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART3RST);
 8001822:	41300513          	li	a0,1043
 8001826:	00000097          	auipc	ra,0x0
 800182a:	882080e7          	jalr	-1918(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART3RST);
 800182e:	41300513          	li	a0,1043
 8001832:	b7c1                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART4RST);
 8001834:	41400513          	li	a0,1044
 8001838:	00000097          	auipc	ra,0x0
 800183c:	870080e7          	jalr	-1936(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART4RST);
 8001840:	41400513          	li	a0,1044
 8001844:	b77d                	j	80017f2 <usart_deinit+0x4e>

08001846 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/ 
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8001846:	1141                	addi	sp,sp,-16
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
    switch(usart_periph){
 8001848:	400057b7          	lui	a5,0x40005
{
 800184c:	c422                	sw	s0,8(sp)
 800184e:	c226                	sw	s1,4(sp)
 8001850:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 8001852:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
{
 8001856:	842a                	mv	s0,a0
 8001858:	84ae                	mv	s1,a1
    switch(usart_periph){
 800185a:	00e50f63          	beq	a0,a4,8001878 <usart_baudrate_set+0x32>
 800185e:	00a76f63          	bltu	a4,a0,800187c <usart_baudrate_set+0x36>
 8001862:	40004737          	lui	a4,0x40004
 8001866:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 800186a:	00e50763          	beq	a0,a4,8001878 <usart_baudrate_set+0x32>
 800186e:	80078793          	addi	a5,a5,-2048
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001872:	4501                	li	a0,0
    switch(usart_periph){
 8001874:	02f41263          	bne	s0,a5,8001898 <usart_baudrate_set+0x52>
         /* get USART0 clock */
         uclk=rcu_clock_freq_get(CK_APB2);
         break;
    case USART1:
         /* get USART1 clock */
         uclk=rcu_clock_freq_get(CK_APB1);
 8001878:	4509                	li	a0,2
 800187a:	a819                	j	8001890 <usart_baudrate_set+0x4a>
    switch(usart_periph){
 800187c:	fef50ee3          	beq	a0,a5,8001878 <usart_baudrate_set+0x32>
 8001880:	400147b7          	lui	a5,0x40014
 8001884:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001888:	4501                	li	a0,0
    switch(usart_periph){
 800188a:	00f41763          	bne	s0,a5,8001898 <usart_baudrate_set+0x52>
         uclk=rcu_clock_freq_get(CK_APB2);
 800188e:	450d                	li	a0,3
         uclk=rcu_clock_freq_get(CK_APB1);
 8001890:	00000097          	auipc	ra,0x0
 8001894:	8a0080e7          	jalr	-1888(ra) # 8001130 <rcu_clock_freq_get>
         break;  
    default:
         break;
    }
    /* oversampling by 16, configure the value of USART_BAUD */
    udiv = (uclk+baudval/2U)/baudval;
 8001898:	0014d793          	srli	a5,s1,0x1
 800189c:	97aa                	add	a5,a5,a0
 800189e:	0297d7b3          	divu	a5,a5,s1
    intdiv = udiv & (0x0000fff0U);
    fradiv = udiv & (0x0000000fU);
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
}
 80018a2:	40b2                	lw	ra,12(sp)
 80018a4:	4492                	lw	s1,4(sp)
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 80018a6:	07c2                	slli	a5,a5,0x10
 80018a8:	83c1                	srli	a5,a5,0x10
 80018aa:	c41c                	sw	a5,8(s0)
}
 80018ac:	4422                	lw	s0,8(sp)
 80018ae:	0141                	addi	sp,sp,16
 80018b0:	8082                	ret

080018b2 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 80018b2:	455c                	lw	a5,12(a0)
 80018b4:	9ff7f793          	andi	a5,a5,-1537
 80018b8:	c55c                	sw	a5,12(a0)
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg ;
 80018ba:	455c                	lw	a5,12(a0)
 80018bc:	8ddd                	or	a1,a1,a5
 80018be:	c54c                	sw	a1,12(a0)
}
 80018c0:	8082                	ret

080018c2 <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 80018c2:	455c                	lw	a5,12(a0)
 80018c4:	777d                	lui	a4,0xfffff
 80018c6:	177d                	addi	a4,a4,-1
 80018c8:	8ff9                	and	a5,a5,a4
 80018ca:	c55c                	sw	a5,12(a0)
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 80018cc:	455c                	lw	a5,12(a0)
 80018ce:	8ddd                	or	a1,a1,a5
 80018d0:	c54c                	sw	a1,12(a0)
}
 80018d2:	8082                	ret

080018d4 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB; 
 80018d4:	491c                	lw	a5,16(a0)
 80018d6:	7775                	lui	a4,0xffffd
 80018d8:	177d                	addi	a4,a4,-1
 80018da:	8ff9                	and	a5,a5,a4
 80018dc:	c91c                	sw	a5,16(a0)
    /* configure USART stop bits */
    USART_CTL1(usart_periph) |= stblen;
 80018de:	491c                	lw	a5,16(a0)
 80018e0:	8ddd                	or	a1,a1,a5
 80018e2:	c90c                	sw	a1,16(a0)
}
 80018e4:	8082                	ret

080018e6 <usart_enable>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph){
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 80018e6:	455c                	lw	a5,12(a0)
 80018e8:	6709                	lui	a4,0x2
 80018ea:	8fd9                	or	a5,a5,a4
 80018ec:	c55c                	sw	a5,12(a0)
}
 80018ee:	8082                	ret

080018f0 <usart_transmit_config>:
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 80018f0:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_TEN;
 80018f2:	9bdd                	andi	a5,a5,-9
    ctl |= txconfig;
 80018f4:	8ddd                	or	a1,a1,a5
    /* configure transfer mode */
    USART_CTL0(usart_periph) = ctl;
 80018f6:	c54c                	sw	a1,12(a0)
}
 80018f8:	8082                	ret

080018fa <usart_receive_config>:
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 80018fa:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_REN;
 80018fc:	9bed                	andi	a5,a5,-5
    ctl |= rxconfig;
 80018fe:	8ddd                	or	a1,a1,a5
    /* configure receiver mode */
    USART_CTL0(usart_periph) = ctl;
 8001900:	c54c                	sw	a1,12(a0)
}
 8001902:	8082                	ret

08001904 <usart_hardware_flow_rts_config>:
*/
void usart_hardware_flow_rts_config(uint32_t usart_periph, uint32_t rtsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001904:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_RTSEN;
 8001906:	eff7f793          	andi	a5,a5,-257
    ctl |= rtsconfig;
 800190a:	8ddd                	or	a1,a1,a5
    /* configure RTS */
    USART_CTL2(usart_periph) = ctl;
 800190c:	c94c                	sw	a1,20(a0)
}
 800190e:	8082                	ret

08001910 <usart_hardware_flow_cts_config>:
*/
void usart_hardware_flow_cts_config(uint32_t usart_periph, uint32_t ctsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001910:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_CTSEN;
 8001912:	dff7f793          	andi	a5,a5,-513
    ctl |= ctsconfig;
 8001916:	8ddd                	or	a1,a1,a5
    /* configure CTS */
    USART_CTL2(usart_periph) = ctl;
 8001918:	c94c                	sw	a1,20(a0)
}
 800191a:	8082                	ret

0800191c <usart_dma_receive_config>:
*/
void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 800191c:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENR;
 800191e:	fbf7f793          	andi	a5,a5,-65
    ctl |= dmacmd;
 8001922:	8ddd                	or	a1,a1,a5
    /* configure DMA reception */
    USART_CTL2(usart_periph) = ctl;
 8001924:	c94c                	sw	a1,20(a0)
}
 8001926:	8082                	ret

08001928 <usart_dma_transmit_config>:
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001928:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENT;
 800192a:	f7f7f793          	andi	a5,a5,-129
    ctl |= dmacmd;
 800192e:	8ddd                	or	a1,a1,a5
    /* configure DMA transmission */
    USART_CTL2(usart_periph) = ctl;
 8001930:	c94c                	sw	a1,20(a0)
}
 8001932:	8082                	ret

08001934 <SystemInit>:
*/
void SystemInit(void)
{
    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001934:	400217b7          	lui	a5,0x40021
 8001938:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 800193a:	e0ff06b7          	lui	a3,0xe0ff0
 800193e:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001940:	00176713          	ori	a4,a4,1
 8001944:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001946:	43d8                	lw	a4,4(a5)
 8001948:	8f75                	and	a4,a4,a3
 800194a:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800194c:	4398                	lw	a4,0(a5)
 800194e:	fef706b7          	lui	a3,0xfef70
 8001952:	16fd                	addi	a3,a3,-1
 8001954:	8f75                	and	a4,a4,a3
 8001956:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8001958:	4398                	lw	a4,0(a5)
 800195a:	fffc06b7          	lui	a3,0xfffc0
 800195e:	16fd                	addi	a3,a3,-1
 8001960:	8f75                	and	a4,a4,a3
 8001962:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8001964:	43d8                	lw	a4,4(a5)
 8001966:	df0106b7          	lui	a3,0xdf010
 800196a:	16fd                	addi	a3,a3,-1
 800196c:	8f75                	and	a4,a4,a3
 800196e:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8001970:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8001974:	4398                	lw	a4,0(a5)
 8001976:	eaf706b7          	lui	a3,0xeaf70
 800197a:	16fd                	addi	a3,a3,-1
 800197c:	8f75                	and	a4,a4,a3
 800197e:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8001980:	00ff0737          	lui	a4,0xff0
 8001984:	c798                	sw	a4,8(a5)
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8001986:	4394                	lw	a3,0(a5)
 8001988:	6741                	lui	a4,0x10
 800198a:	8ed9                	or	a3,a3,a4
 800198c:	c394                	sw	a3,0(a5)
 800198e:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8001992:	40021737          	lui	a4,0x40021
 8001996:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8001998:	00e69613          	slli	a2,a3,0xe
 800199c:	00064463          	bltz	a2,80019a4 <SystemInit+0x70>
 80019a0:	17fd                	addi	a5,a5,-1
 80019a2:	fbf5                	bnez	a5,8001996 <SystemInit+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 80019a4:	400217b7          	lui	a5,0x40021
 80019a8:	4398                	lw	a4,0(a5)
 80019aa:	00e71693          	slli	a3,a4,0xe
 80019ae:	0006c363          	bltz	a3,80019b4 <SystemInit+0x80>
        while(1){
        }
 80019b2:	a001                	j	80019b2 <SystemInit+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80019b4:	43d8                	lw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80019b6:	dfc406b7          	lui	a3,0xdfc40
 80019ba:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80019bc:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 80019be:	43d8                	lw	a4,4(a5)
 80019c0:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 80019c2:	43d8                	lw	a4,4(a5)
 80019c4:	40076713          	ori	a4,a4,1024
 80019c8:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80019ca:	43d8                	lw	a4,4(a5)
 80019cc:	8f75                	and	a4,a4,a3
 80019ce:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 80019d0:	43d8                	lw	a4,4(a5)
 80019d2:	202906b7          	lui	a3,0x20290
 80019d6:	8f55                	or	a4,a4,a3
 80019d8:	c3d8                	sw	a4,4(a5)
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 80019da:	57d8                	lw	a4,44(a5)
 80019dc:	76bd                	lui	a3,0xfffef
 80019de:	8f75                	and	a4,a4,a3
 80019e0:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 80019e2:	57d8                	lw	a4,44(a5)
 80019e4:	66c1                	lui	a3,0x10
 80019e6:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xef11>
 80019ea:	8f55                	or	a4,a4,a3
 80019ec:	d7d8                	sw	a4,44(a5)

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 80019ee:	4398                	lw	a4,0(a5)
 80019f0:	040006b7          	lui	a3,0x4000
 80019f4:	8f55                	or	a4,a4,a3
 80019f6:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 80019f8:	400217b7          	lui	a5,0x40021
 80019fc:	4398                	lw	a4,0(a5)
 80019fe:	00471693          	slli	a3,a4,0x4
 8001a02:	fe06dde3          	bgez	a3,80019fc <SystemInit+0xc8>
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 8001a06:	4398                	lw	a4,0(a5)
 8001a08:	100006b7          	lui	a3,0x10000
 8001a0c:	8f55                	or	a4,a4,a3
 8001a0e:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 8001a10:	400217b7          	lui	a5,0x40021
 8001a14:	4398                	lw	a4,0(a5)
 8001a16:	00271693          	slli	a3,a4,0x2
 8001a1a:	fe06dde3          	bgez	a3,8001a14 <SystemInit+0xe0>
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8001a1e:	4398                	lw	a4,0(a5)
 8001a20:	010006b7          	lui	a3,0x1000
 8001a24:	8f55                	or	a4,a4,a3
 8001a26:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8001a28:	400217b7          	lui	a5,0x40021
 8001a2c:	4398                	lw	a4,0(a5)
 8001a2e:	00671693          	slli	a3,a4,0x6
 8001a32:	fe06dde3          	bgez	a3,8001a2c <SystemInit+0xf8>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8001a36:	43d8                	lw	a4,4(a5)
 8001a38:	9b71                	andi	a4,a4,-4
 8001a3a:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8001a3c:	43d8                	lw	a4,4(a5)
 8001a3e:	00276713          	ori	a4,a4,2
 8001a42:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8001a44:	40021737          	lui	a4,0x40021
 8001a48:	435c                	lw	a5,4(a4)
 8001a4a:	8ba1                	andi	a5,a5,8
 8001a4c:	dff5                	beqz	a5,8001a48 <SystemInit+0x114>
}
 8001a4e:	8082                	ret

08001a50 <SystemCoreClockUpdate>:
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001a50:	40021737          	lui	a4,0x40021
 8001a54:	435c                	lw	a5,4(a4)
 8001a56:	20000637          	lui	a2,0x20000
    switch (scss)
 8001a5a:	4685                	li	a3,1
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001a5c:	8389                	srli	a5,a5,0x2
 8001a5e:	8b8d                	andi	a5,a5,3
    switch (scss)
 8001a60:	4e860613          	addi	a2,a2,1256 # 200004e8 <SystemCoreClock>
 8001a64:	00d78663          	beq	a5,a3,8001a70 <SystemCoreClockUpdate+0x20>
 8001a68:	c781                	beqz	a5,8001a70 <SystemCoreClockUpdate+0x20>
 8001a6a:	4689                	li	a3,2
 8001a6c:	00d78863          	beq	a5,a3,8001a7c <SystemCoreClockUpdate+0x2c>
            SystemCoreClock = IRC8M_VALUE;
 8001a70:	007a17b7          	lui	a5,0x7a1
 8001a74:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001a78:	c21c                	sw	a5,0(a2)
}
 8001a7a:	8082                	ret
            pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 8001a7c:	435c                	lw	a5,4(a4)
            if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
 8001a7e:	00f79693          	slli	a3,a5,0xf
 8001a82:	0606db63          	bgez	a3,8001af8 <SystemCoreClockUpdate+0xa8>
                predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001a86:	575c                	lw	a5,44(a4)
                if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001a88:	00f79693          	slli	a3,a5,0xf
 8001a8c:	0606d163          	bgez	a3,8001aee <SystemCoreClockUpdate+0x9e>
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a90:	575c                	lw	a5,44(a4)
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a92:	5758                	lw	a4,44(a4)
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a94:	8391                	srli	a5,a5,0x4
 8001a96:	8bbd                	andi	a5,a5,15
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a98:	8321                	srli	a4,a4,0x8
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a9a:	00178693          	addi	a3,a5,1
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a9e:	00f77793          	andi	a5,a4,15
 8001aa2:	00278713          	addi	a4,a5,2
                    if(17U == pll1mf){
 8001aa6:	47c5                	li	a5,17
 8001aa8:	00f71363          	bne	a4,a5,8001aae <SystemCoreClockUpdate+0x5e>
                        pll1mf = 20U;
 8001aac:	4751                	li	a4,20
                    ck_src = (ck_src / predv1) * pll1mf;
 8001aae:	007a17b7          	lui	a5,0x7a1
 8001ab2:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001ab6:	02d7d7b3          	divu	a5,a5,a3
 8001aba:	02e787b3          	mul	a5,a5,a4
                predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 8001abe:	40021737          	lui	a4,0x40021
 8001ac2:	5758                	lw	a4,44(a4)
 8001ac4:	8b3d                	andi	a4,a4,15
 8001ac6:	0705                	addi	a4,a4,1
                ck_src /= predv0;
 8001ac8:	02e7d7b3          	divu	a5,a5,a4
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001acc:	400216b7          	lui	a3,0x40021
 8001ad0:	42d8                	lw	a4,4(a3)
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001ad2:	42d4                	lw	a3,4(a3)
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001ad4:	8349                	srli	a4,a4,0x12
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001ad6:	00269593          	slli	a1,a3,0x2
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001ada:	8b3d                	andi	a4,a4,15
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001adc:	0205d363          	bgez	a1,8001b02 <SystemCoreClockUpdate+0xb2>
                pllmf |= 0x10U;
 8001ae0:	01076713          	ori	a4,a4,16
                pllmf += 1U;
 8001ae4:	0705                	addi	a4,a4,1
            SystemCoreClock = ck_src * pllmf;
 8001ae6:	02f70733          	mul	a4,a4,a5
 8001aea:	c218                	sw	a4,0(a2)
 8001aec:	8082                	ret
                ck_src = HXTAL_VALUE;
 8001aee:	007a17b7          	lui	a5,0x7a1
 8001af2:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001af6:	b7e1                	j	8001abe <SystemCoreClockUpdate+0x6e>
                ck_src = IRC8M_VALUE / 2U;
 8001af8:	003d17b7          	lui	a5,0x3d1
 8001afc:	90078793          	addi	a5,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 8001b00:	b7f1                	j	8001acc <SystemCoreClockUpdate+0x7c>
            if(pllmf >= 15U){
 8001b02:	46bd                	li	a3,15
 8001b04:	fed700e3          	beq	a4,a3,8001ae4 <SystemCoreClockUpdate+0x94>
                pllmf += 2U;
 8001b08:	0709                	addi	a4,a4,2
            if(15U == pllmf){
 8001b0a:	fcd71ee3          	bne	a4,a3,8001ae6 <SystemCoreClockUpdate+0x96>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001b0e:	4719                	li	a4,6
 8001b10:	02e78733          	mul	a4,a5,a4
 8001b14:	8385                	srli	a5,a5,0x1
 8001b16:	97ba                	add	a5,a5,a4
 8001b18:	b785                	j	8001a78 <SystemCoreClockUpdate+0x28>

08001b1a <_exit>:

#include "stub.h"


void _exit(int code)
{
 8001b1a:	7179                	addi	sp,sp,-48
  const char message[] = "\nProgram has exited with code:";
 8001b1c:	080005b7          	lui	a1,0x8000
{
 8001b20:	d422                	sw	s0,40(sp)
  const char message[] = "\nProgram has exited with code:";
 8001b22:	467d                	li	a2,31
{
 8001b24:	842a                	mv	s0,a0
  const char message[] = "\nProgram has exited with code:";
 8001b26:	29058593          	addi	a1,a1,656 # 8000290 <enable_mcycle_minstret+0x44>
 8001b2a:	850a                	mv	a0,sp
{
 8001b2c:	d606                	sw	ra,44(sp)
  const char message[] = "\nProgram has exited with code:";
 8001b2e:	00005097          	auipc	ra,0x5
 8001b32:	696080e7          	jalr	1686(ra) # 80071c4 <memcpy>

  write(STDERR_FILENO, message, sizeof(message) - 1);
 8001b36:	4679                	li	a2,30
 8001b38:	858a                	mv	a1,sp
 8001b3a:	4509                	li	a0,2
 8001b3c:	17fff097          	auipc	ra,0x17fff
 8001b40:	a04080e7          	jalr	-1532(ra) # 20000540 <write>
  write_hex(STDERR_FILENO, code);
 8001b44:	85a2                	mv	a1,s0
 8001b46:	4509                	li	a0,2
 8001b48:	00000097          	auipc	ra,0x0
 8001b4c:	04c080e7          	jalr	76(ra) # 8001b94 <write_hex>
  write(STDERR_FILENO, "\n", 1);
 8001b50:	080005b7          	lui	a1,0x8000
 8001b54:	4605                	li	a2,1
 8001b56:	2c058593          	addi	a1,a1,704 # 80002c0 <enable_mcycle_minstret+0x74>
 8001b5a:	4509                	li	a0,2
 8001b5c:	17fff097          	auipc	ra,0x17fff
 8001b60:	9e4080e7          	jalr	-1564(ra) # 20000540 <write>

  for (;;);
 8001b64:	a001                	j	8001b64 <_exit+0x4a>

08001b66 <_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
 8001b66:	20000737          	lui	a4,0x20000
 8001b6a:	4ec70713          	addi	a4,a4,1260 # 200004ec <curbrk.1524>
 8001b6e:	431c                	lw	a5,0(a4)
 8001b70:	200056b7          	lui	a3,0x20005
 8001b74:	60868693          	addi	a3,a3,1544 # 20005608 <_end>
 8001b78:	953e                	add	a0,a0,a5
 8001b7a:	00d56b63          	bltu	a0,a3,8001b90 <_sbrk+0x2a>
 8001b7e:	200076b7          	lui	a3,0x20007
 8001b82:	00068693          	mv	a3,a3
 8001b86:	00a6e563          	bltu	a3,a0,8001b90 <_sbrk+0x2a>
    return NULL - 1;

  curbrk += incr;
 8001b8a:	c308                	sw	a0,0(a4)
  return curbrk - incr;
 8001b8c:	853e                	mv	a0,a5
 8001b8e:	8082                	ret
    return NULL - 1;
 8001b90:	57fd                	li	a5,-1
 8001b92:	bfed                	j	8001b8c <_sbrk+0x26>

08001b94 <write_hex>:

#include <stdint.h>
#include <unistd.h>

void write_hex(int fd, unsigned long int hex)
{
 8001b94:	7179                	addi	sp,sp,-48
 8001b96:	ce4e                	sw	s3,28(sp)
 8001b98:	89ae                	mv	s3,a1
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
 8001b9a:	080005b7          	lui	a1,0x8000
 8001b9e:	4609                	li	a2,2
 8001ba0:	2b058593          	addi	a1,a1,688 # 80002b0 <enable_mcycle_minstret+0x64>
{
 8001ba4:	d422                	sw	s0,40(sp)
 8001ba6:	d226                	sw	s1,36(sp)
 8001ba8:	d04a                	sw	s2,32(sp)
 8001baa:	cc52                	sw	s4,24(sp)
 8001bac:	ca56                	sw	s5,20(sp)
 8001bae:	d606                	sw	ra,44(sp)
 8001bb0:	892a                	mv	s2,a0
  write(fd , "0x", 2);
 8001bb2:	4471                	li	s0,28
 8001bb4:	17fff097          	auipc	ra,0x17fff
 8001bb8:	98c080e7          	jalr	-1652(ra) # 20000540 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001bbc:	4a3d                	li	s4,15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001bbe:	4aa5                	li	s5,9
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001bc0:	54f1                	li	s1,-4
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001bc2:	008a17b3          	sll	a5,s4,s0
 8001bc6:	0137f7b3          	and	a5,a5,s3
 8001bca:	0087d7b3          	srl	a5,a5,s0
 8001bce:	0ff7f793          	andi	a5,a5,255
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001bd2:	02faec63          	bltu	s5,a5,8001c0a <write_hex+0x76>
 8001bd6:	03078793          	addi	a5,a5,48
 8001bda:	0ff7f793          	andi	a5,a5,255
    write(fd, &towrite, 1);
 8001bde:	4605                	li	a2,1
 8001be0:	00f10593          	addi	a1,sp,15
 8001be4:	854a                	mv	a0,s2
 8001be6:	1471                	addi	s0,s0,-4
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001be8:	00f107a3          	sb	a5,15(sp)
    write(fd, &towrite, 1);
 8001bec:	17fff097          	auipc	ra,0x17fff
 8001bf0:	954080e7          	jalr	-1708(ra) # 20000540 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001bf4:	fc9417e3          	bne	s0,s1,8001bc2 <write_hex+0x2e>
  }
}
 8001bf8:	50b2                	lw	ra,44(sp)
 8001bfa:	5422                	lw	s0,40(sp)
 8001bfc:	5492                	lw	s1,36(sp)
 8001bfe:	5902                	lw	s2,32(sp)
 8001c00:	49f2                	lw	s3,28(sp)
 8001c02:	4a62                	lw	s4,24(sp)
 8001c04:	4ad2                	lw	s5,20(sp)
 8001c06:	6145                	addi	sp,sp,48
 8001c08:	8082                	ret
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001c0a:	03778793          	addi	a5,a5,55
 8001c0e:	b7f1                	j	8001bda <write_hex+0x46>

08001c10 <get_timer_value>:
}


uint32_t mtime_hi(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001c10:	d10007b7          	lui	a5,0xd1000
 8001c14:	43d8                	lw	a4,4(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME);
 8001c16:	4388                	lw	a0,0(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001c18:	43cc                	lw	a1,4(a5)
uint64_t get_timer_value(void)
{
  while (1) {
    uint32_t hi = mtime_hi();
    uint32_t lo = mtime_lo();
    if (hi == mtime_hi())
 8001c1a:	fee59de3          	bne	a1,a4,8001c14 <get_timer_value+0x4>
      return ((uint64_t)hi << 32) | lo;
  }
}
 8001c1e:	8082                	ret

08001c20 <eclic_init>:
{

  typedef volatile uint32_t vuint32_t;

  /* clear cfg register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 8001c20:	d20007b7          	lui	a5,0xd2000
 8001c24:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ff8000>

  /* clear minthresh register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 8001c28:	000785a3          	sb	zero,11(a5)

  /* clear all IP/IE/ATTR/CTRL bits for all interrupt sources */
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 8001c2c:	0512                	slli	a0,a0,0x4
 8001c2e:	d20017b7          	lui	a5,0xd2001
 8001c32:	953e                	add	a0,a0,a5

  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001c34:	00a7e363          	bltu	a5,a0,8001c3a <eclic_init+0x1a>
    *ptr = 0;
  }
}
 8001c38:	8082                	ret
    *ptr = 0;
 8001c3a:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ff9000>
  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001c3e:	07c1                	addi	a5,a5,16
 8001c40:	bfd5                	j	8001c34 <eclic_init+0x14>

08001c42 <eclic_enable_interrupt>:

void eclic_enable_interrupt (uint32_t source) {
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8001c42:	d20017b7          	lui	a5,0xd2001
 8001c46:	0785                	addi	a5,a5,1
 8001c48:	050a                	slli	a0,a0,0x2
 8001c4a:	953e                	add	a0,a0,a5
 8001c4c:	4785                	li	a5,1
 8001c4e:	00f50023          	sb	a5,0(a0)
}
 8001c52:	8082                	ret

08001c54 <eclic_get_nlbits>:
void eclic_set_cliccfg (uint8_t cliccfg){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
}

uint8_t eclic_get_cliccfg (void){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001c54:	d20007b7          	lui	a5,0xd2000
 8001c58:	0007c503          	lbu	a0,0(a5) # d2000000 <_sp+0xb1ff8000>

/* get nlbits */
uint8_t eclic_get_nlbits(void) {
  /* extract nlbits */
  uint8_t nlbits = eclic_get_cliccfg();
  nlbits = (nlbits & ECLIC_CFG_NLBITS_MASK) >> ECLIC_CFG_NLBITS_LSB;
 8001c5c:	8105                	srli	a0,a0,0x1
  return nlbits;
}
 8001c5e:	893d                	andi	a0,a0,15
 8001c60:	8082                	ret

08001c62 <eclic_set_irq_lvl_abs>:
  uint8_t lvl = intctrl << (8-nlbits);

  return lvl;
}

void eclic_set_irq_lvl_abs(uint32_t source, uint8_t lvl_abs) {
 8001c62:	1141                	addi	sp,sp,-16
 8001c64:	c422                	sw	s0,8(sp)
 8001c66:	c226                	sw	s1,4(sp)
 8001c68:	c606                	sw	ra,12(sp)
 8001c6a:	842a                	mv	s0,a0
 8001c6c:	84ae                	mv	s1,a1
  /* extract nlbits */
  uint8_t nlbits = eclic_get_nlbits();
 8001c6e:	00000097          	auipc	ra,0x0
 8001c72:	fe6080e7          	jalr	-26(ra) # 8001c54 <eclic_get_nlbits>
  if (nlbits > ECLICINTCTLBITS) {
    nlbits = ECLICINTCTLBITS;
  }

  /* shift lvl_abs into correct bit position */
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c76:	4791                	li	a5,4
 8001c78:	4711                	li	a4,4
 8001c7a:	00a7e363          	bltu	a5,a0,8001c80 <eclic_set_irq_lvl_abs+0x1e>
 8001c7e:	872a                	mv	a4,a0
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001c80:	d2001537          	lui	a0,0xd2001
 8001c84:	040a                	slli	s0,s0,0x2
 8001c86:	050d                	addi	a0,a0,3
 8001c88:	9522                	add	a0,a0,s0
 8001c8a:	00054783          	lbu	a5,0(a0) # d2001000 <_sp+0xb1ff9000>
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c8e:	0ff77693          	andi	a3,a4,255
 8001c92:	45a1                	li	a1,8
 
  /* write to clicintctrl */
  uint8_t current_intctrl = eclic_get_intctrl(source);
  /* shift intctrl left to mask off unused bits */
  current_intctrl = current_intctrl << nlbits;
 8001c94:	00e797b3          	sll	a5,a5,a4
  /* shift intctrl into correct bit position */
  current_intctrl = current_intctrl >> nlbits;
 8001c98:	0ff7f793          	andi	a5,a5,255
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c9c:	8d95                	sub	a1,a1,a3
 8001c9e:	00b494b3          	sll	s1,s1,a1
  current_intctrl = current_intctrl >> nlbits;
 8001ca2:	40e7d7b3          	sra	a5,a5,a4

  eclic_set_intctrl(source, (current_intctrl | lvl));
 8001ca6:	8fc5                	or	a5,a5,s1
 8001ca8:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001cac:	00f50023          	sb	a5,0(a0)
}
 8001cb0:	40b2                	lw	ra,12(sp)
 8001cb2:	4422                	lw	s0,8(sp)
 8001cb4:	4492                	lw	s1,4(sp)
 8001cb6:	0141                	addi	sp,sp,16
 8001cb8:	8082                	ret

08001cba <eclic_set_irq_priority>:

  return lvl_abs;
}

/* sets an interrupt priority based encoding of nlbits and ECLICINTCTLBITS */
uint8_t eclic_set_irq_priority(uint32_t source, uint8_t priority) {
 8001cba:	1101                	addi	sp,sp,-32
 8001cbc:	cc22                	sw	s0,24(sp)
 8001cbe:	c62e                	sw	a1,12(sp)
 8001cc0:	ce06                	sw	ra,28(sp)
 8001cc2:	842a                	mv	s0,a0
    /* extract nlbits */
    uint8_t nlbits = eclic_get_nlbits();
 8001cc4:	00000097          	auipc	ra,0x0
 8001cc8:	f90080e7          	jalr	-112(ra) # 8001c54 <eclic_get_nlbits>
    if (nlbits >= ECLICINTCTLBITS) {
 8001ccc:	478d                	li	a5,3
        nlbits = ECLICINTCTLBITS;
        return 0;
 8001cce:	4581                	li	a1,0
    if (nlbits >= ECLICINTCTLBITS) {
 8001cd0:	02a7e963          	bltu	a5,a0,8001d02 <eclic_set_irq_priority+0x48>
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001cd4:	d2001737          	lui	a4,0xd2001
 8001cd8:	040a                	slli	s0,s0,0x2
 8001cda:	070d                	addi	a4,a4,3
 8001cdc:	9722                	add	a4,a4,s0
 8001cde:	00074783          	lbu	a5,0(a4) # d2001000 <_sp+0xb1ff9000>
    }

    /* shift priority into correct bit position */
    priority = priority << (8 - ECLICINTCTLBITS);
 8001ce2:	45b2                	lw	a1,12(sp)

    /* write to eclicintctrl */
    uint8_t current_intctrl = eclic_get_intctrl(source);
    /* shift intctrl right to mask off unused bits */
    current_intctrl = current_intctrl >> (8-nlbits);
 8001ce4:	46a1                	li	a3,8
 8001ce6:	40a68533          	sub	a0,a3,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001cea:	0592                	slli	a1,a1,0x4
    current_intctrl = current_intctrl >> (8-nlbits);
 8001cec:	40a7d7b3          	sra	a5,a5,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001cf0:	0ff5f593          	andi	a1,a1,255
    /* shift intctrl into correct bit position */
    current_intctrl = current_intctrl << (8-nlbits);
 8001cf4:	00a797b3          	sll	a5,a5,a0

    eclic_set_intctrl(source, (current_intctrl | priority));
 8001cf8:	8fcd                	or	a5,a5,a1
 8001cfa:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001cfe:	00f70023          	sb	a5,0(a4)

    return priority;
}
 8001d02:	40f2                	lw	ra,28(sp)
 8001d04:	4462                	lw	s0,24(sp)
 8001d06:	852e                	mv	a0,a1
 8001d08:	6105                	addi	sp,sp,32
 8001d0a:	8082                	ret

08001d0c <eclic_mode_enable>:
  uint32_t mtvec_value = read_csr(CSR_MTVEC);
  mtvec_value = mtvec_value & 0xFFFFFFC0;
  mtvec_value = mtvec_value | 0x00000003;
  write_csr(CSR_MTVEC,mtvec_value);
#elif defined ( __GNUC__ )
  uint32_t mtvec_value = read_csr(mtvec);
 8001d0c:	305027f3          	csrr	a5,mtvec
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 8001d10:	fc07f793          	andi	a5,a5,-64
  mtvec_value = mtvec_value | 0x00000003;
 8001d14:	0037e793          	ori	a5,a5,3
  write_csr(mtvec,mtvec_value);
 8001d18:	30579073          	csrw	mtvec,a5
#endif

}
 8001d1c:	8082                	ret

08001d1e <handle_nmi>:
#include "riscv_encoding.h"
#include "n200_func.h"

__attribute__((weak)) uintptr_t handle_nmi()
{
  write(1, "nmi\n", 5);
 8001d1e:	080005b7          	lui	a1,0x8000
{
 8001d22:	1141                	addi	sp,sp,-16
  write(1, "nmi\n", 5);
 8001d24:	4615                	li	a2,5
 8001d26:	2b458593          	addi	a1,a1,692 # 80002b4 <enable_mcycle_minstret+0x68>
 8001d2a:	4505                	li	a0,1
{
 8001d2c:	c606                	sw	ra,12(sp)
  write(1, "nmi\n", 5);
 8001d2e:	17fff097          	auipc	ra,0x17fff
 8001d32:	812080e7          	jalr	-2030(ra) # 20000540 <write>
  _exit(1);
 8001d36:	4505                	li	a0,1
 8001d38:	00000097          	auipc	ra,0x0
 8001d3c:	de2080e7          	jalr	-542(ra) # 8001b1a <_exit>

08001d40 <handle_trap>:
  return 0;
}


__attribute__((weak)) uintptr_t handle_trap(uintptr_t mcause, uintptr_t sp)
{
 8001d40:	1141                	addi	sp,sp,-16
  if((mcause & 0xFFF) == 0xFFF) {
 8001d42:	fff54793          	not	a5,a0
{
 8001d46:	c422                	sw	s0,8(sp)
 8001d48:	c606                	sw	ra,12(sp)
  if((mcause & 0xFFF) == 0xFFF) {
 8001d4a:	01479713          	slli	a4,a5,0x14
{
 8001d4e:	842a                	mv	s0,a0
  if((mcause & 0xFFF) == 0xFFF) {
 8001d50:	e709                	bnez	a4,8001d5a <handle_trap+0x1a>
      handle_nmi();
 8001d52:	00000097          	auipc	ra,0x0
 8001d56:	fcc080e7          	jalr	-52(ra) # 8001d1e <handle_nmi>
  }
  write(1, "trap\n", 5);
 8001d5a:	080005b7          	lui	a1,0x8000
 8001d5e:	4615                	li	a2,5
 8001d60:	2bc58593          	addi	a1,a1,700 # 80002bc <enable_mcycle_minstret+0x70>
 8001d64:	4505                	li	a0,1
 8001d66:	17ffe097          	auipc	ra,0x17ffe
 8001d6a:	7da080e7          	jalr	2010(ra) # 20000540 <write>
  //printf("In trap handler, the mcause is %d\n", mcause);
  //printf("In trap handler, the mepc is 0x%x\n", read_csr(mepc));
  //printf("In trap handler, the mtval is 0x%x\n", read_csr(mbadaddr));
  _exit(mcause);
 8001d6e:	8522                	mv	a0,s0
 8001d70:	00000097          	auipc	ra,0x0
 8001d74:	daa080e7          	jalr	-598(ra) # 8001b1a <_exit>

08001d78 <_init>:
#include "debugger.h"
#endif

extern uint32_t disable_mcycle_minstret();
void _init()
{
 8001d78:	1141                	addi	sp,sp,-16
 8001d7a:	c606                	sw	ra,12(sp)
	SystemInit();
 8001d7c:	00000097          	auipc	ra,0x0
 8001d80:	bb8080e7          	jalr	-1096(ra) # 8001934 <SystemInit>

	//ECLIC init
	eclic_init(ECLIC_NUM_INTERRUPTS);
 8001d84:	05700513          	li	a0,87
 8001d88:	00000097          	auipc	ra,0x0
 8001d8c:	e98080e7          	jalr	-360(ra) # 8001c20 <eclic_init>
	eclic_mode_enable();
 8001d90:	00000097          	auipc	ra,0x0
 8001d94:	f7c080e7          	jalr	-132(ra) # 8001d0c <eclic_mode_enable>
#ifdef USE_SOFTWARE_DEBUGGER
	dbg_init();
#endif
	

}
 8001d98:	40b2                	lw	ra,12(sp)
 8001d9a:	0141                	addi	sp,sp,16
	disable_mcycle_minstret();
 8001d9c:	ffffe317          	auipc	t1,0xffffe
 8001da0:	4aa30067          	jr	1194(t1) # 8000246 <disable_mcycle_minstret>

08001da4 <_fini>:

void _fini()
{
}
 8001da4:	8082                	ret

08001da6 <dma_config>:

    timer_enable(TIMER0);
}

void dma_config()
{
 8001da6:	7179                	addi	sp,sp,-48
	
    /* ADC_DMA_channel configuration */
    dma_parameter_struct dma_data_parameter;
    rcu_periph_clock_enable(RCU_DMA0); //Ändra till DMA1 om möjligt
 8001da8:	50000513          	li	a0,1280
{
 8001dac:	d606                	sw	ra,44(sp)
    rcu_periph_clock_enable(RCU_DMA0); //Ändra till DMA1 om möjligt
 8001dae:	fffff097          	auipc	ra,0xfffff
 8001db2:	2e2080e7          	jalr	738(ra) # 8001090 <rcu_periph_clock_enable>
    /* ADC DMA_channel configuration */
    dma_deinit(DMA0, DMA_CH0);
 8001db6:	4581                	li	a1,0
 8001db8:	40020537          	lui	a0,0x40020
 8001dbc:	fffff097          	auipc	ra,0xfffff
 8001dc0:	092080e7          	jalr	146(ra) # 8000e4e <dma_deinit>
    
    /* initialize DMA data mode */
    dma_data_parameter.periph_addr  = (uint32_t)(&ADC_RDATA(ADC0));
 8001dc4:	400127b7          	lui	a5,0x40012
 8001dc8:	44c78793          	addi	a5,a5,1100 # 4001244c <_sp+0x2000a44c>
 8001dcc:	c23e                	sw	a5,4(sp)
    dma_data_parameter.periph_inc   = DMA_PERIPH_INCREASE_DISABLE;
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
    dma_data_parameter.memory_inc   = DMA_MEMORY_INCREASE_ENABLE;
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
    dma_data_parameter.memory_width = DMA_MEMORY_WIDTH_16BIT;  
 8001dce:	40000713          	li	a4,1024
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001dd2:	200017b7          	lui	a5,0x20001
    dma_data_parameter.memory_width = DMA_MEMORY_WIDTH_16BIT;  
 8001dd6:	c83a                	sw	a4,16(sp)
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001dd8:	5e078793          	addi	a5,a5,1504 # 200015e0 <sample_buffer>
    dma_data_parameter.direction    = DMA_PERIPHERAL_TO_MEMORY;
    dma_data_parameter.number       = 8;
 8001ddc:	4721                	li	a4,8
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dde:	0050                	addi	a2,sp,4
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001de0:	c63e                	sw	a5,12(sp)
    dma_data_parameter.number       = 8;
 8001de2:	ca3a                	sw	a4,20(sp)
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
 8001de4:	10000793          	li	a5,256
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
 8001de8:	6709                	lui	a4,0x2
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dea:	4581                	li	a1,0
 8001dec:	40020537          	lui	a0,0x40020
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
 8001df0:	c43e                	sw	a5,8(sp)
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
 8001df2:	cc3a                	sw	a4,24(sp)
    dma_data_parameter.periph_inc   = DMA_PERIPH_INCREASE_DISABLE;
 8001df4:	00f11e23          	sh	a5,28(sp)
    dma_data_parameter.direction    = DMA_PERIPHERAL_TO_MEMORY;
 8001df8:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dfc:	fffff097          	auipc	ra,0xfffff
 8001e00:	096080e7          	jalr	150(ra) # 8000e92 <dma_init>
    dma_circulation_enable(DMA0, DMA_CH0);
 8001e04:	4581                	li	a1,0
 8001e06:	40020537          	lui	a0,0x40020
 8001e0a:	fffff097          	auipc	ra,0xfffff
 8001e0e:	114080e7          	jalr	276(ra) # 8000f1e <dma_circulation_enable>
    //dma_interrupt_enable(DMA0, DMA_CH0, DMA_INT_FLAG_FTF);
    /* enable DMA channel */
    dma_channel_enable(DMA0, DMA_CH0);
 8001e12:	4581                	li	a1,0
 8001e14:	40020537          	lui	a0,0x40020
 8001e18:	fffff097          	auipc	ra,0xfffff
 8001e1c:	152080e7          	jalr	338(ra) # 8000f6a <dma_channel_enable>
}
 8001e20:	50b2                	lw	ra,44(sp)
 8001e22:	6145                	addi	sp,sp,48
 8001e24:	8082                	ret

08001e26 <eclic_mtip_handler>:
       case USART0_IRQn  : pu0tbeisr=pISR;
   }
}

__attribute__( ( interrupt ) )
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8001e26:	7139                	addi	sp,sp,-64
 8001e28:	cc3e                	sw	a5,24(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8001e2a:	200007b7          	lui	a5,0x20000
 8001e2e:	5007a783          	lw	a5,1280(a5) # 20000500 <__bss_start>
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8001e32:	de06                	sw	ra,60(sp)
 8001e34:	dc16                	sw	t0,56(sp)
 8001e36:	da1a                	sw	t1,52(sp)
 8001e38:	d81e                	sw	t2,48(sp)
 8001e3a:	d62a                	sw	a0,44(sp)
 8001e3c:	d42e                	sw	a1,40(sp)
 8001e3e:	d232                	sw	a2,36(sp)
 8001e40:	d036                	sw	a3,32(sp)
 8001e42:	ce3a                	sw	a4,28(sp)
 8001e44:	ca42                	sw	a6,20(sp)
 8001e46:	c846                	sw	a7,16(sp)
 8001e48:	c672                	sw	t3,12(sp)
 8001e4a:	c476                	sw	t4,8(sp)
 8001e4c:	c27a                	sw	t5,4(sp)
 8001e4e:	c07e                	sw	t6,0(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8001e50:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 8001e52:	50f2                	lw	ra,60(sp)
 8001e54:	52e2                	lw	t0,56(sp)
 8001e56:	5352                	lw	t1,52(sp)
 8001e58:	53c2                	lw	t2,48(sp)
 8001e5a:	5532                	lw	a0,44(sp)
 8001e5c:	55a2                	lw	a1,40(sp)
 8001e5e:	5612                	lw	a2,36(sp)
 8001e60:	5682                	lw	a3,32(sp)
 8001e62:	4772                	lw	a4,28(sp)
 8001e64:	47e2                	lw	a5,24(sp)
 8001e66:	4852                	lw	a6,20(sp)
 8001e68:	48c2                	lw	a7,16(sp)
 8001e6a:	4e32                	lw	t3,12(sp)
 8001e6c:	4ea2                	lw	t4,8(sp)
 8001e6e:	4f12                	lw	t5,4(sp)
 8001e70:	4f82                	lw	t6,0(sp)
 8001e72:	6121                	addi	sp,sp,64
 8001e74:	30200073          	mret

08001e78 <USART0_IRQHandler>:

__attribute__( ( interrupt ) )                  // !!! ALL USART0 INT GOES HERE !!!
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8001e78:	7139                	addi	sp,sp,-64
 8001e7a:	cc3e                	sw	a5,24(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8001e7c:	200007b7          	lui	a5,0x20000
 8001e80:	5047a783          	lw	a5,1284(a5) # 20000504 <pu0tbeisr>
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8001e84:	de06                	sw	ra,60(sp)
 8001e86:	dc16                	sw	t0,56(sp)
 8001e88:	da1a                	sw	t1,52(sp)
 8001e8a:	d81e                	sw	t2,48(sp)
 8001e8c:	d62a                	sw	a0,44(sp)
 8001e8e:	d42e                	sw	a1,40(sp)
 8001e90:	d232                	sw	a2,36(sp)
 8001e92:	d036                	sw	a3,32(sp)
 8001e94:	ce3a                	sw	a4,28(sp)
 8001e96:	ca42                	sw	a6,20(sp)
 8001e98:	c846                	sw	a7,16(sp)
 8001e9a:	c672                	sw	t3,12(sp)
 8001e9c:	c476                	sw	t4,8(sp)
 8001e9e:	c27a                	sw	t5,4(sp)
 8001ea0:	c07e                	sw	t6,0(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8001ea2:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 8001ea4:	50f2                	lw	ra,60(sp)
 8001ea6:	52e2                	lw	t0,56(sp)
 8001ea8:	5352                	lw	t1,52(sp)
 8001eaa:	53c2                	lw	t2,48(sp)
 8001eac:	5532                	lw	a0,44(sp)
 8001eae:	55a2                	lw	a1,40(sp)
 8001eb0:	5612                	lw	a2,36(sp)
 8001eb2:	5682                	lw	a3,32(sp)
 8001eb4:	4772                	lw	a4,28(sp)
 8001eb6:	47e2                	lw	a5,24(sp)
 8001eb8:	4852                	lw	a6,20(sp)
 8001eba:	48c2                	lw	a7,16(sp)
 8001ebc:	4e32                	lw	t3,12(sp)
 8001ebe:	4ea2                	lw	t4,8(sp)
 8001ec0:	4f12                	lw	t5,4(sp)
 8001ec2:	4f82                	lw	t6,0(sp)
 8001ec4:	6121                	addi	sp,sp,64
 8001ec6:	30200073          	mret

08001eca <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8001eca:	00354783          	lbu	a5,3(a0) # 40020003 <_sp+0x20018003>
 8001ece:	00254703          	lbu	a4,2(a0)
 8001ed2:	07a2                	slli	a5,a5,0x8
 8001ed4:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[1];
 8001ed6:	00154703          	lbu	a4,1(a0)
 8001eda:	07a2                	slli	a5,a5,0x8
	rv = rv << 8 | ptr[0];
 8001edc:	00054503          	lbu	a0,0(a0)
	rv = rv << 8 | ptr[1];
 8001ee0:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[0];
 8001ee2:	07a2                	slli	a5,a5,0x8
	return rv;
}
 8001ee4:	8d5d                	or	a0,a0,a5
 8001ee6:	8082                	ret

08001ee8 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001ee8:	0085d793          	srli	a5,a1,0x8
 8001eec:	00b50023          	sb	a1,0(a0)
	*ptr++ = (BYTE)val; val >>= 8;
 8001ef0:	00f500a3          	sb	a5,1(a0)
 8001ef4:	0105d793          	srli	a5,a1,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 8001ef8:	81e1                	srli	a1,a1,0x18
 8001efa:	00f50123          	sb	a5,2(a0)
	*ptr++ = (BYTE)val;
 8001efe:	00b501a3          	sb	a1,3(a0)
}
 8001f02:	8082                	ret

08001f04 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001f04:	87aa                	mv	a5,a0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;
 8001f06:	962a                	add	a2,a2,a0

	do {
		r = *d++ - *s++;
 8001f08:	0785                	addi	a5,a5,1
 8001f0a:	0585                	addi	a1,a1,1
 8001f0c:	fff7c503          	lbu	a0,-1(a5)
 8001f10:	fff5c703          	lbu	a4,-1(a1)
 8001f14:	8d19                	sub	a0,a0,a4
	} while (--cnt && r == 0);
 8001f16:	00c78363          	beq	a5,a2,8001f1c <mem_cmp+0x18>
 8001f1a:	d57d                	beqz	a0,8001f08 <mem_cmp+0x4>

	return r;
}
 8001f1c:	8082                	ret

08001f1e <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f1e:	4958                	lw	a4,20(a0)
	clst -= 2;		/* Cluster number is origin from 2 */
 8001f20:	15f9                	addi	a1,a1,-2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f22:	1779                	addi	a4,a4,-2
 8001f24:	00e5f963          	bgeu	a1,a4,8001f36 <clst2sect+0x18>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001f28:	00a55783          	lhu	a5,10(a0)
 8001f2c:	5508                	lw	a0,40(a0)
 8001f2e:	02b787b3          	mul	a5,a5,a1
 8001f32:	953e                	add	a0,a0,a5
 8001f34:	8082                	ret
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f36:	4501                	li	a0,0
}
 8001f38:	8082                	ret

08001f3a <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8001f3a:	411c                	lw	a5,0(a0)
	if (!tp) return vol;	/* Invalid path name? */
 8001f3c:	c38d                	beqz	a5,8001f5e <get_ldnumber+0x24>
 8001f3e:	873e                	mv	a4,a5
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8001f40:	02000593          	li	a1,32
 8001f44:	03a00613          	li	a2,58
 8001f48:	0705                	addi	a4,a4,1
 8001f4a:	fff74683          	lbu	a3,-1(a4) # 1fff <__stack_size+0xfff>
 8001f4e:	02d5f263          	bgeu	a1,a3,8001f72 <get_ldnumber+0x38>
 8001f52:	fec69be3          	bne	a3,a2,8001f48 <get_ldnumber+0xe>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8001f56:	00278693          	addi	a3,a5,2
 8001f5a:	00d70463          	beq	a4,a3,8001f62 <get_ldnumber+0x28>
	if (!tp) return vol;	/* Invalid path name? */
 8001f5e:	57fd                	li	a5,-1
 8001f60:	a811                	j	8001f74 <get_ldnumber+0x3a>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8001f62:	0007c603          	lbu	a2,0(a5)
 8001f66:	03000693          	li	a3,48
	if (!tp) return vol;	/* Invalid path name? */
 8001f6a:	57fd                	li	a5,-1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8001f6c:	00d61463          	bne	a2,a3,8001f74 <get_ldnumber+0x3a>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 8001f70:	c118                	sw	a4,0(a0)
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8001f72:	4781                	li	a5,0
}
 8001f74:	853e                	mv	a0,a5
 8001f76:	8082                	ret

08001f78 <validate>:
)
{
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f78:	ed01                	bnez	a0,8001f90 <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f7a:	4781                	li	a5,0
	FRESULT res = FR_INVALID_OBJECT;
 8001f7c:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f7e:	c19c                	sw	a5,0(a1)
	return res;
}
 8001f80:	8082                	ret
	FRESULT res = FR_INVALID_OBJECT;
 8001f82:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f84:	4781                	li	a5,0
}
 8001f86:	40f2                	lw	ra,28(sp)
 8001f88:	4462                	lw	s0,24(sp)
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f8a:	c19c                	sw	a5,0(a1)
}
 8001f8c:	6105                	addi	sp,sp,32
 8001f8e:	8082                	ret
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f90:	411c                	lw	a5,0(a0)
{
 8001f92:	1101                	addi	sp,sp,-32
 8001f94:	cc22                	sw	s0,24(sp)
 8001f96:	ce06                	sw	ra,28(sp)
 8001f98:	842a                	mv	s0,a0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f9a:	d7e5                	beqz	a5,8001f82 <validate+0xa>
 8001f9c:	0007c703          	lbu	a4,0(a5)
 8001fa0:	d36d                	beqz	a4,8001f82 <validate+0xa>
 8001fa2:	00455683          	lhu	a3,4(a0)
 8001fa6:	0067d703          	lhu	a4,6(a5)
 8001faa:	fce69ce3          	bne	a3,a4,8001f82 <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8001fae:	0017c503          	lbu	a0,1(a5)
 8001fb2:	c62e                	sw	a1,12(sp)
 8001fb4:	00002097          	auipc	ra,0x2
 8001fb8:	9e0080e7          	jalr	-1568(ra) # 8003994 <disk_status>
 8001fbc:	8905                	andi	a0,a0,1
 8001fbe:	45b2                	lw	a1,12(sp)
 8001fc0:	f169                	bnez	a0,8001f82 <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001fc2:	401c                	lw	a5,0(s0)
 8001fc4:	b7c9                	j	8001f86 <validate+0xe>

08001fc6 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 8001fc6:	4781                	li	a5,0
			*d++ = *s++;
 8001fc8:	00f58733          	add	a4,a1,a5
 8001fcc:	00074683          	lbu	a3,0(a4)
 8001fd0:	00f50733          	add	a4,a0,a5
 8001fd4:	0785                	addi	a5,a5,1
 8001fd6:	00d70023          	sb	a3,0(a4)
		} while (--cnt);
 8001fda:	fef617e3          	bne	a2,a5,8001fc8 <mem_cpy.part.0+0x2>
}
 8001fde:	8082                	ret

08001fe0 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8001fe0:	01b5c783          	lbu	a5,27(a1)
 8001fe4:	01a5c703          	lbu	a4,26(a1)
 8001fe8:	07a2                	slli	a5,a5,0x8
	cl = ld_word(dir + DIR_FstClusLO);
 8001fea:	8fd9                	or	a5,a5,a4
	if (fs->fs_type == FS_FAT32) {
 8001fec:	470d                	li	a4,3
 8001fee:	00e51a63          	bne	a0,a4,8002002 <ld_clust.isra.1+0x22>
	rv = rv << 8 | ptr[0];
 8001ff2:	0155c703          	lbu	a4,21(a1)
 8001ff6:	0145c683          	lbu	a3,20(a1)
 8001ffa:	0722                	slli	a4,a4,0x8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001ffc:	8f55                	or	a4,a4,a3
 8001ffe:	0742                	slli	a4,a4,0x10
 8002000:	8fd9                	or	a5,a5,a4
}
 8002002:	853e                	mv	a0,a5
 8002004:	8082                	ret

08002006 <sync_window.part.3>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002006:	1141                	addi	sp,sp,-16
 8002008:	c422                	sw	s0,8(sp)
 800200a:	c226                	sw	s1,4(sp)
 800200c:	c04a                	sw	s2,0(sp)
 800200e:	c606                	sw	ra,12(sp)
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002010:	03050913          	addi	s2,a0,48
 8002014:	5550                	lw	a2,44(a0)
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002016:	842a                	mv	s0,a0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002018:	00154503          	lbu	a0,1(a0)
 800201c:	4685                	li	a3,1
 800201e:	85ca                	mv	a1,s2
 8002020:	00002097          	auipc	ra,0x2
 8002024:	a2a080e7          	jalr	-1494(ra) # 8003a4a <disk_write>
			res = FR_DISK_ERR;
 8002028:	4485                	li	s1,1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800202a:	e90d                	bnez	a0,800205c <sync_window.part.3+0x56>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800202c:	5450                	lw	a2,44(s0)
 800202e:	501c                	lw	a5,32(s0)
 8002030:	4c18                	lw	a4,24(s0)
			fs->wflag = 0;	/* Clear window dirty flag */
 8002032:	000401a3          	sb	zero,3(s0)
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002036:	40f607b3          	sub	a5,a2,a5
 800203a:	84aa                	mv	s1,a0
 800203c:	02e7f063          	bgeu	a5,a4,800205c <sync_window.part.3+0x56>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002040:	00244683          	lbu	a3,2(s0)
 8002044:	4789                	li	a5,2
 8002046:	00f69b63          	bne	a3,a5,800205c <sync_window.part.3+0x56>
 800204a:	00144503          	lbu	a0,1(s0)
 800204e:	4685                	li	a3,1
 8002050:	963a                	add	a2,a2,a4
 8002052:	85ca                	mv	a1,s2
 8002054:	00002097          	auipc	ra,0x2
 8002058:	9f6080e7          	jalr	-1546(ra) # 8003a4a <disk_write>
}
 800205c:	40b2                	lw	ra,12(sp)
 800205e:	4422                	lw	s0,8(sp)
 8002060:	8526                	mv	a0,s1
 8002062:	4902                	lw	s2,0(sp)
 8002064:	4492                	lw	s1,4(sp)
 8002066:	0141                	addi	sp,sp,16
 8002068:	8082                	ret

0800206a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800206a:	555c                	lw	a5,44(a0)
 800206c:	04b78463          	beq	a5,a1,80020b4 <move_window+0x4a>
{
 8002070:	1141                	addi	sp,sp,-16
 8002072:	c422                	sw	s0,8(sp)
 8002074:	c226                	sw	s1,4(sp)
 8002076:	c606                	sw	ra,12(sp)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002078:	00354783          	lbu	a5,3(a0)
 800207c:	842a                	mv	s0,a0
 800207e:	84ae                	mv	s1,a1
 8002080:	e385                	bnez	a5,80020a0 <move_window+0x36>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002082:	00144503          	lbu	a0,1(s0)
 8002086:	4685                	li	a3,1
 8002088:	8626                	mv	a2,s1
 800208a:	03040593          	addi	a1,s0,48
 800208e:	00002097          	auipc	ra,0x2
 8002092:	91a080e7          	jalr	-1766(ra) # 80039a8 <disk_read>
 8002096:	c119                	beqz	a0,800209c <move_window+0x32>
				res = FR_DISK_ERR;
 8002098:	4505                	li	a0,1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800209a:	54fd                	li	s1,-1
			fs->winsect = sector;
 800209c:	d444                	sw	s1,44(s0)
	return res;
 800209e:	a031                	j	80020aa <move_window+0x40>
 80020a0:	00000097          	auipc	ra,0x0
 80020a4:	f66080e7          	jalr	-154(ra) # 8002006 <sync_window.part.3>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020a8:	dd69                	beqz	a0,8002082 <move_window+0x18>
}
 80020aa:	40b2                	lw	ra,12(sp)
 80020ac:	4422                	lw	s0,8(sp)
 80020ae:	4492                	lw	s1,4(sp)
 80020b0:	0141                	addi	sp,sp,16
 80020b2:	8082                	ret
	FRESULT res = FR_OK;
 80020b4:	4501                	li	a0,0
}
 80020b6:	8082                	ret

080020b8 <check_fs>:
{
 80020b8:	1141                	addi	sp,sp,-16
 80020ba:	c422                	sw	s0,8(sp)
 80020bc:	c606                	sw	ra,12(sp)
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80020be:	57fd                	li	a5,-1
 80020c0:	d55c                	sw	a5,44(a0)
 80020c2:	000501a3          	sb	zero,3(a0)
{
 80020c6:	842a                	mv	s0,a0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80020c8:	00000097          	auipc	ra,0x0
 80020cc:	fa2080e7          	jalr	-94(ra) # 800206a <move_window>
 80020d0:	4791                	li	a5,4
 80020d2:	e53d                	bnez	a0,8002140 <check_fs+0x88>
	rv = rv << 8 | ptr[0];
 80020d4:	22f44703          	lbu	a4,559(s0)
 80020d8:	22e44783          	lbu	a5,558(s0)
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80020dc:	76ed                	lui	a3,0xffffb
	rv = rv << 8 | ptr[0];
 80020de:	0722                	slli	a4,a4,0x8
 80020e0:	8f5d                	or	a4,a4,a5
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80020e2:	0742                	slli	a4,a4,0x10
 80020e4:	8741                	srai	a4,a4,0x10
 80020e6:	a5568693          	addi	a3,a3,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80020ea:	478d                	li	a5,3
 80020ec:	04d71a63          	bne	a4,a3,8002140 <check_fs+0x88>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80020f0:	03044783          	lbu	a5,48(s0)
 80020f4:	0eb00713          	li	a4,235
 80020f8:	00e78963          	beq	a5,a4,800210a <check_fs+0x52>
 80020fc:	07e1                	addi	a5,a5,24
 80020fe:	0ff7f713          	andi	a4,a5,255
 8002102:	4685                	li	a3,1
	return 2;	/* Valid BS but not FAT */
 8002104:	4789                	li	a5,2
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002106:	02e6ed63          	bltu	a3,a4,8002140 <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800210a:	080005b7          	lui	a1,0x8000
 800210e:	460d                	li	a2,3
 8002110:	2c458593          	addi	a1,a1,708 # 80002c4 <enable_mcycle_minstret+0x78>
 8002114:	06640513          	addi	a0,s0,102
 8002118:	00000097          	auipc	ra,0x0
 800211c:	dec080e7          	jalr	-532(ra) # 8001f04 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002120:	4781                	li	a5,0
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002122:	cd19                	beqz	a0,8002140 <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002124:	080005b7          	lui	a1,0x8000
 8002128:	4615                	li	a2,5
 800212a:	2c858593          	addi	a1,a1,712 # 80002c8 <enable_mcycle_minstret+0x7c>
 800212e:	08240513          	addi	a0,s0,130
 8002132:	00000097          	auipc	ra,0x0
 8002136:	dd2080e7          	jalr	-558(ra) # 8001f04 <mem_cmp>
 800213a:	00a037b3          	snez	a5,a0
 800213e:	0786                	slli	a5,a5,0x1
}
 8002140:	40b2                	lw	ra,12(sp)
 8002142:	4422                	lw	s0,8(sp)
 8002144:	853e                	mv	a0,a5
 8002146:	0141                	addi	sp,sp,16
 8002148:	8082                	ret

0800214a <find_volume>:
{
 800214a:	7139                	addi	sp,sp,-64
 800214c:	d84a                	sw	s2,48(sp)
 800214e:	de06                	sw	ra,60(sp)
 8002150:	dc22                	sw	s0,56(sp)
 8002152:	da26                	sw	s1,52(sp)
 8002154:	d64e                	sw	s3,44(sp)
 8002156:	d452                	sw	s4,40(sp)
 8002158:	d256                	sw	s5,36(sp)
 800215a:	d05a                	sw	s6,32(sp)
	*rfs = 0;
 800215c:	0005a023          	sw	zero,0(a1)
{
 8002160:	8932                	mv	s2,a2
	*rfs = 0;
 8002162:	c62e                	sw	a1,12(sp)
	vol = get_ldnumber(path);
 8002164:	00000097          	auipc	ra,0x0
 8002168:	dd6080e7          	jalr	-554(ra) # 8001f3a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800216c:	47ad                	li	a5,11
 800216e:	04054263          	bltz	a0,80021b2 <find_volume+0x68>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002172:	20000737          	lui	a4,0x20000
 8002176:	00251793          	slli	a5,a0,0x2
 800217a:	50870713          	addi	a4,a4,1288 # 20000508 <FatFs>
 800217e:	97ba                	add	a5,a5,a4
 8002180:	4380                	lw	s0,0(a5)
 8002182:	84aa                	mv	s1,a0
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002184:	47b1                	li	a5,12
 8002186:	c415                	beqz	s0,80021b2 <find_volume+0x68>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002188:	45b2                	lw	a1,12(sp)
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800218a:	0fe97913          	andi	s2,s2,254
	*rfs = fs;							/* Return pointer to the filesystem object */
 800218e:	c180                	sw	s0,0(a1)
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002190:	00044783          	lbu	a5,0(s0)
 8002194:	cb95                	beqz	a5,80021c8 <find_volume+0x7e>
		stat = disk_status(fs->pdrv);
 8002196:	00144503          	lbu	a0,1(s0)
 800219a:	00001097          	auipc	ra,0x1
 800219e:	7fa080e7          	jalr	2042(ra) # 8003994 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80021a2:	00157793          	andi	a5,a0,1
 80021a6:	e38d                	bnez	a5,80021c8 <find_volume+0x7e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80021a8:	00090563          	beqz	s2,80021b2 <find_volume+0x68>
 80021ac:	8911                	andi	a0,a0,4
 80021ae:	c111                	beqz	a0,80021b2 <find_volume+0x68>
				return FR_WRITE_PROTECTED;
 80021b0:	47a9                	li	a5,10
}
 80021b2:	50f2                	lw	ra,60(sp)
 80021b4:	5462                	lw	s0,56(sp)
 80021b6:	54d2                	lw	s1,52(sp)
 80021b8:	5942                	lw	s2,48(sp)
 80021ba:	59b2                	lw	s3,44(sp)
 80021bc:	5a22                	lw	s4,40(sp)
 80021be:	5a92                	lw	s5,36(sp)
 80021c0:	5b02                	lw	s6,32(sp)
 80021c2:	853e                	mv	a0,a5
 80021c4:	6121                	addi	sp,sp,64
 80021c6:	8082                	ret
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80021c8:	0ff4f513          	andi	a0,s1,255
	fs->fs_type = 0;					/* Clear the filesystem object */
 80021cc:	00040023          	sb	zero,0(s0)
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80021d0:	00a400a3          	sb	a0,1(s0)
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80021d4:	00001097          	auipc	ra,0x1
 80021d8:	544080e7          	jalr	1348(ra) # 8003718 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80021dc:	00157713          	andi	a4,a0,1
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80021e0:	478d                	li	a5,3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80021e2:	fb61                	bnez	a4,80021b2 <find_volume+0x68>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80021e4:	00090463          	beqz	s2,80021ec <find_volume+0xa2>
 80021e8:	8911                	andi	a0,a0,4
 80021ea:	f179                	bnez	a0,80021b0 <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80021ec:	4581                	li	a1,0
 80021ee:	8522                	mv	a0,s0
 80021f0:	00000097          	auipc	ra,0x0
 80021f4:	ec8080e7          	jalr	-312(ra) # 80020b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80021f8:	4789                	li	a5,2
 80021fa:	04f51f63          	bne	a0,a5,8002258 <find_volume+0x10e>
 80021fe:	0804                	addi	s1,sp,16
 8002200:	1f640913          	addi	s2,s0,502
 8002204:	23640a13          	addi	s4,s0,566
 8002208:	89a6                	mv	s3,s1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800220a:	ffc94783          	lbu	a5,-4(s2)
 800220e:	4501                	li	a0,0
 8002210:	c791                	beqz	a5,800221c <find_volume+0xd2>
 8002212:	854a                	mv	a0,s2
 8002214:	00000097          	auipc	ra,0x0
 8002218:	cb6080e7          	jalr	-842(ra) # 8001eca <ld_dword>
 800221c:	00a9a023          	sw	a0,0(s3)
 8002220:	0941                	addi	s2,s2,16
 8002222:	0991                	addi	s3,s3,4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002224:	ff2a13e3          	bne	s4,s2,800220a <find_volume+0xc0>
 8002228:	01048913          	addi	s2,s1,16
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800222c:	4985                	li	s3,1
			bsect = br[i];
 800222e:	0004aa03          	lw	s4,0(s1)
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002232:	450d                	li	a0,3
 8002234:	000a0a63          	beqz	s4,8002248 <find_volume+0xfe>
 8002238:	85d2                	mv	a1,s4
 800223a:	8522                	mv	a0,s0
 800223c:	00000097          	auipc	ra,0x0
 8002240:	e7c080e7          	jalr	-388(ra) # 80020b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002244:	02a9f363          	bgeu	s3,a0,800226a <find_volume+0x120>
 8002248:	0491                	addi	s1,s1,4
 800224a:	fe9912e3          	bne	s2,s1,800222e <find_volume+0xe4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800224e:	4711                	li	a4,4
 8002250:	4785                	li	a5,1
 8002252:	00e51a63          	bne	a0,a4,8002266 <find_volume+0x11c>
 8002256:	bfb1                	j	80021b2 <find_volume+0x68>
 8002258:	4711                	li	a4,4
 800225a:	4785                	li	a5,1
 800225c:	f4e50be3          	beq	a0,a4,80021b2 <find_volume+0x68>
	bsect = 0;
 8002260:	4a01                	li	s4,0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002262:	00a7f463          	bgeu	a5,a0,800226a <find_volume+0x120>
 8002266:	47b5                	li	a5,13
 8002268:	b7a9                	j	80021b2 <find_volume+0x68>
	rv = rv << 8 | ptr[0];
 800226a:	03c44783          	lbu	a5,60(s0)
 800226e:	03b44703          	lbu	a4,59(s0)
 8002272:	07a2                	slli	a5,a5,0x8
 8002274:	8fd9                	or	a5,a5,a4
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002276:	07c2                	slli	a5,a5,0x10
 8002278:	87c1                	srai	a5,a5,0x10
 800227a:	20000713          	li	a4,512
 800227e:	fee794e3          	bne	a5,a4,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 8002282:	04744983          	lbu	s3,71(s0)
 8002286:	04644783          	lbu	a5,70(s0)
 800228a:	09a2                	slli	s3,s3,0x8
 800228c:	00f9e9b3          	or	s3,s3,a5
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002290:	00099963          	bnez	s3,80022a2 <find_volume+0x158>
 8002294:	05440513          	addi	a0,s0,84
 8002298:	00000097          	auipc	ra,0x0
 800229c:	c32080e7          	jalr	-974(ra) # 8001eca <ld_dword>
 80022a0:	89aa                	mv	s3,a0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022a2:	04044483          	lbu	s1,64(s0)
		fs->fsize = fasize;
 80022a6:	01342c23          	sw	s3,24(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022aa:	4705                	li	a4,1
 80022ac:	fff48793          	addi	a5,s1,-1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022b0:	00940123          	sb	s1,2(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022b4:	0ff7f793          	andi	a5,a5,255
 80022b8:	faf767e3          	bltu	a4,a5,8002266 <find_volume+0x11c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80022bc:	03d44903          	lbu	s2,61(s0)
 80022c0:	01091793          	slli	a5,s2,0x10
 80022c4:	83c1                	srli	a5,a5,0x10
 80022c6:	00f41523          	sh	a5,10(s0)
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80022ca:	dfd1                	beqz	a5,8002266 <find_volume+0x11c>
 80022cc:	fff90793          	addi	a5,s2,-1
 80022d0:	0127f7b3          	and	a5,a5,s2
 80022d4:	fbc9                	bnez	a5,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80022d6:	04244783          	lbu	a5,66(s0)
 80022da:	04144a83          	lbu	s5,65(s0)
 80022de:	07a2                	slli	a5,a5,0x8
 80022e0:	0157e7b3          	or	a5,a5,s5
 80022e4:	01079a93          	slli	s5,a5,0x10
 80022e8:	410ada93          	srai	s5,s5,0x10
 80022ec:	010a9b13          	slli	s6,s5,0x10
 80022f0:	010b5b13          	srli	s6,s6,0x10
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80022f4:	01641423          	sh	s6,8(s0)
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80022f8:	00fb7793          	andi	a5,s6,15
 80022fc:	f7ad                	bnez	a5,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80022fe:	04444503          	lbu	a0,68(s0)
 8002302:	04344783          	lbu	a5,67(s0)
 8002306:	0522                	slli	a0,a0,0x8
 8002308:	8d5d                	or	a0,a0,a5
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800230a:	e519                	bnez	a0,8002318 <find_volume+0x1ce>
 800230c:	05040513          	addi	a0,s0,80
 8002310:	00000097          	auipc	ra,0x0
 8002314:	bba080e7          	jalr	-1094(ra) # 8001eca <ld_dword>
	rv = rv << 8 | ptr[0];
 8002318:	03f44783          	lbu	a5,63(s0)
 800231c:	03e44703          	lbu	a4,62(s0)
 8002320:	07a2                	slli	a5,a5,0x8
 8002322:	8fd9                	or	a5,a5,a4
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002324:	d3a9                	beqz	a5,8002266 <find_volume+0x11c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002326:	033486b3          	mul	a3,s1,s3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800232a:	004b5713          	srli	a4,s6,0x4
 800232e:	973e                	add	a4,a4,a5
 8002330:	9736                	add	a4,a4,a3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002332:	f2e56ae3          	bltu	a0,a4,8002266 <find_volume+0x11c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002336:	8d19                	sub	a0,a0,a4
 8002338:	032554b3          	divu	s1,a0,s2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800233c:	f32565e3          	bltu	a0,s2,8002266 <find_volume+0x11c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002340:	10000637          	lui	a2,0x10000
 8002344:	1655                	addi	a2,a2,-11
 8002346:	f29660e3          	bltu	a2,s1,8002266 <find_volume+0x11c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800234a:	6641                	lui	a2,0x10
 800234c:	1655                	addi	a2,a2,-11
 800234e:	12967963          	bgeu	a2,s1,8002480 <find_volume+0x336>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002352:	490d                	li	s2,3
		fs->database = bsect + sysect;					/* Data start sector */
 8002354:	9752                	add	a4,a4,s4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002356:	0489                	addi	s1,s1,2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002358:	97d2                	add	a5,a5,s4
		fs->database = bsect + sysect;					/* Data start sector */
 800235a:	d418                	sw	a4,40(s0)
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800235c:	c844                	sw	s1,20(s0)
		fs->volbase = bsect;							/* Volume start sector */
 800235e:	01442e23          	sw	s4,28(s0)
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002362:	d01c                	sw	a5,32(s0)
		if (fmt == FS_FAT32) {
 8002364:	470d                	li	a4,3
 8002366:	0ee91e63          	bne	s2,a4,8002462 <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 800236a:	05b44783          	lbu	a5,91(s0)
 800236e:	05a44703          	lbu	a4,90(s0)
 8002372:	07a2                	slli	a5,a5,0x8
 8002374:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002376:	00fae7b3          	or	a5,s5,a5
 800237a:	07c2                	slli	a5,a5,0x10
 800237c:	87c1                	srai	a5,a5,0x10
 800237e:	ee0794e3          	bnez	a5,8002266 <find_volume+0x11c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002382:	05c40513          	addi	a0,s0,92
 8002386:	00000097          	auipc	ra,0x0
 800238a:	b44080e7          	jalr	-1212(ra) # 8001eca <ld_dword>
 800238e:	d048                	sw	a0,36(s0)
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002390:	048a                	slli	s1,s1,0x2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002392:	1ff48493          	addi	s1,s1,511
 8002396:	80a5                	srli	s1,s1,0x9
 8002398:	ec99e7e3          	bltu	s3,s1,8002266 <find_volume+0x11c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800239c:	57fd                	li	a5,-1
 800239e:	c81c                	sw	a5,16(s0)
 80023a0:	c45c                	sw	a5,12(s0)
		fs->fsi_flag = 0x80;
 80023a2:	f8000793          	li	a5,-128
 80023a6:	00f40223          	sb	a5,4(s0)
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80023aa:	478d                	li	a5,3
 80023ac:	08f91a63          	bne	s2,a5,8002440 <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80023b0:	06144783          	lbu	a5,97(s0)
 80023b4:	06044703          	lbu	a4,96(s0)
 80023b8:	07a2                	slli	a5,a5,0x8
 80023ba:	8fd9                	or	a5,a5,a4
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80023bc:	07c2                	slli	a5,a5,0x10
 80023be:	87c1                	srai	a5,a5,0x10
 80023c0:	4705                	li	a4,1
 80023c2:	06e79f63          	bne	a5,a4,8002440 <find_volume+0x2f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80023c6:	001a0593          	addi	a1,s4,1
 80023ca:	8522                	mv	a0,s0
 80023cc:	00000097          	auipc	ra,0x0
 80023d0:	c9e080e7          	jalr	-866(ra) # 800206a <move_window>
 80023d4:	e535                	bnez	a0,8002440 <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80023d6:	22f44783          	lbu	a5,559(s0)
 80023da:	22e44703          	lbu	a4,558(s0)
			fs->fsi_flag = 0;
 80023de:	00040223          	sb	zero,4(s0)
	rv = rv << 8 | ptr[0];
 80023e2:	07a2                	slli	a5,a5,0x8
 80023e4:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80023e6:	07c2                	slli	a5,a5,0x10
 80023e8:	776d                	lui	a4,0xffffb
 80023ea:	87c1                	srai	a5,a5,0x10
 80023ec:	a5570713          	addi	a4,a4,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80023f0:	04e79863          	bne	a5,a4,8002440 <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80023f4:	03040513          	addi	a0,s0,48
 80023f8:	00000097          	auipc	ra,0x0
 80023fc:	ad2080e7          	jalr	-1326(ra) # 8001eca <ld_dword>
 8002400:	416157b7          	lui	a5,0x41615
 8002404:	25278793          	addi	a5,a5,594 # 41615252 <_sp+0x2160d252>
 8002408:	02f51c63          	bne	a0,a5,8002440 <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800240c:	21440513          	addi	a0,s0,532
 8002410:	00000097          	auipc	ra,0x0
 8002414:	aba080e7          	jalr	-1350(ra) # 8001eca <ld_dword>
 8002418:	614177b7          	lui	a5,0x61417
 800241c:	27278793          	addi	a5,a5,626 # 61417272 <_sp+0x4140f272>
 8002420:	02f51063          	bne	a0,a5,8002440 <find_volume+0x2f6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002424:	21840513          	addi	a0,s0,536
 8002428:	00000097          	auipc	ra,0x0
 800242c:	aa2080e7          	jalr	-1374(ra) # 8001eca <ld_dword>
 8002430:	c808                	sw	a0,16(s0)
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002432:	21c40513          	addi	a0,s0,540
 8002436:	00000097          	auipc	ra,0x0
 800243a:	a94080e7          	jalr	-1388(ra) # 8001eca <ld_dword>
 800243e:	c448                	sw	a0,12(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 8002440:	20000737          	lui	a4,0x20000
 8002444:	50c70713          	addi	a4,a4,1292 # 2000050c <Fsid>
 8002448:	00075783          	lhu	a5,0(a4)
	fs->fs_type = fmt;		/* FAT sub-type */
 800244c:	01240023          	sb	s2,0(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 8002450:	0785                	addi	a5,a5,1
 8002452:	07c2                	slli	a5,a5,0x10
 8002454:	83c1                	srli	a5,a5,0x10
 8002456:	00f71023          	sh	a5,0(a4)
 800245a:	00f41323          	sh	a5,6(s0)
	return FR_OK;
 800245e:	4781                	li	a5,0
 8002460:	bb89                	j	80021b2 <find_volume+0x68>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002462:	e00b02e3          	beqz	s6,8002266 <find_volume+0x11c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002466:	97b6                	add	a5,a5,a3
 8002468:	d05c                	sw	a5,36(s0)
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800246a:	4789                	li	a5,2
 800246c:	00f91463          	bne	s2,a5,8002474 <find_volume+0x32a>
 8002470:	0486                	slli	s1,s1,0x1
 8002472:	b705                	j	8002392 <find_volume+0x248>
 8002474:	02e48733          	mul	a4,s1,a4
 8002478:	8885                	andi	s1,s1,1
 800247a:	8305                	srli	a4,a4,0x1
 800247c:	94ba                	add	s1,s1,a4
 800247e:	bf11                	j	8002392 <find_volume+0x248>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002480:	6905                	lui	s2,0x1
 8002482:	1955                	addi	s2,s2,-11
 8002484:	00993933          	sltu	s2,s2,s1
 8002488:	0905                	addi	s2,s2,1
 800248a:	b5e9                	j	8002354 <find_volume+0x20a>

0800248c <put_fat>:
{
 800248c:	1101                	addi	sp,sp,-32
 800248e:	c64e                	sw	s3,12(sp)
 8002490:	c452                	sw	s4,8(sp)
 8002492:	ce06                	sw	ra,28(sp)
 8002494:	cc22                	sw	s0,24(sp)
 8002496:	ca26                	sw	s1,20(sp)
 8002498:	c84a                	sw	s2,16(sp)
 800249a:	c256                	sw	s5,4(sp)
 800249c:	c05a                	sw	s6,0(sp)
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800249e:	4a05                	li	s4,1
	FRESULT res = FR_INT_ERR;
 80024a0:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80024a2:	0aba7463          	bgeu	s4,a1,800254a <put_fat+0xbe>
 80024a6:	495c                	lw	a5,20(a0)
 80024a8:	892a                	mv	s2,a0
	FRESULT res = FR_INT_ERR;
 80024aa:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80024ac:	08f5ff63          	bgeu	a1,a5,800254a <put_fat+0xbe>
		switch (fs->fs_type) {
 80024b0:	00054783          	lbu	a5,0(a0)
 80024b4:	4709                	li	a4,2
 80024b6:	84b2                	mv	s1,a2
 80024b8:	842e                	mv	s0,a1
 80024ba:	0ae78a63          	beq	a5,a4,800256e <put_fat+0xe2>
 80024be:	470d                	li	a4,3
 80024c0:	0ee78063          	beq	a5,a4,80025a0 <put_fat+0x114>
 80024c4:	09479363          	bne	a5,s4,800254a <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80024c8:	0015da13          	srli	s4,a1,0x1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024cc:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80024ce:	9a2e                	add	s4,s4,a1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024d0:	009a5593          	srli	a1,s4,0x9
 80024d4:	95be                	add	a1,a1,a5
 80024d6:	00000097          	auipc	ra,0x0
 80024da:	b94080e7          	jalr	-1132(ra) # 800206a <move_window>
 80024de:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80024e0:	e52d                	bnez	a0,800254a <put_fat+0xbe>
			p = fs->win + bc++ % SS(fs);
 80024e2:	03090a93          	addi	s5,s2,48 # 1030 <__stack_size+0x30>
 80024e6:	001a0b13          	addi	s6,s4,1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024ea:	8805                	andi	s0,s0,1
			p = fs->win + bc++ % SS(fs);
 80024ec:	1ffa7a13          	andi	s4,s4,511
 80024f0:	9a56                	add	s4,s4,s5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024f2:	0ff4f793          	andi	a5,s1,255
 80024f6:	cc09                	beqz	s0,8002510 <put_fat+0x84>
 80024f8:	000a4783          	lbu	a5,0(s4)
 80024fc:	6685                	lui	a3,0x1
 80024fe:	16c1                	addi	a3,a3,-16
 8002500:	00f7f713          	andi	a4,a5,15
 8002504:	00449793          	slli	a5,s1,0x4
 8002508:	8ff5                	and	a5,a5,a3
 800250a:	8fd9                	or	a5,a5,a4
 800250c:	0ff7f793          	andi	a5,a5,255
 8002510:	00fa0023          	sb	a5,0(s4)
			fs->wflag = 1;
 8002514:	4785                	li	a5,1
 8002516:	00f901a3          	sb	a5,3(s2)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800251a:	02092783          	lw	a5,32(s2)
 800251e:	009b5593          	srli	a1,s6,0x9
 8002522:	854a                	mv	a0,s2
 8002524:	95be                	add	a1,a1,a5
 8002526:	00000097          	auipc	ra,0x0
 800252a:	b44080e7          	jalr	-1212(ra) # 800206a <move_window>
 800252e:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 8002530:	ed09                	bnez	a0,800254a <put_fat+0xbe>
			p = fs->win + bc % SS(fs);
 8002532:	1ffb7b13          	andi	s6,s6,511
 8002536:	9ada                	add	s5,s5,s6
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002538:	c405                	beqz	s0,8002560 <put_fat+0xd4>
 800253a:	8091                	srli	s1,s1,0x4
 800253c:	0ff4f493          	andi	s1,s1,255
 8002540:	009a8023          	sb	s1,0(s5)
			fs->wflag = 1;
 8002544:	4785                	li	a5,1
 8002546:	00f901a3          	sb	a5,3(s2)
}
 800254a:	40f2                	lw	ra,28(sp)
 800254c:	4462                	lw	s0,24(sp)
 800254e:	854e                	mv	a0,s3
 8002550:	44d2                	lw	s1,20(sp)
 8002552:	4942                	lw	s2,16(sp)
 8002554:	49b2                	lw	s3,12(sp)
 8002556:	4a22                	lw	s4,8(sp)
 8002558:	4a92                	lw	s5,4(sp)
 800255a:	4b02                	lw	s6,0(sp)
 800255c:	6105                	addi	sp,sp,32
 800255e:	8082                	ret
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002560:	000ac783          	lbu	a5,0(s5)
 8002564:	80a1                	srli	s1,s1,0x8
 8002566:	88bd                	andi	s1,s1,15
 8002568:	9bc1                	andi	a5,a5,-16
 800256a:	8cdd                	or	s1,s1,a5
 800256c:	bfd1                	j	8002540 <put_fat+0xb4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800256e:	511c                	lw	a5,32(a0)
 8002570:	81a1                	srli	a1,a1,0x8
 8002572:	95be                	add	a1,a1,a5
 8002574:	00000097          	auipc	ra,0x0
 8002578:	af6080e7          	jalr	-1290(ra) # 800206a <move_window>
 800257c:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800257e:	f571                	bnez	a0,800254a <put_fat+0xbe>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002580:	0406                	slli	s0,s0,0x1
 8002582:	03090793          	addi	a5,s2,48
 8002586:	1fe47413          	andi	s0,s0,510
 800258a:	943e                	add	s0,s0,a5
	*ptr++ = (BYTE)val; val >>= 8;
 800258c:	00940023          	sb	s1,0(s0)
 8002590:	04c2                	slli	s1,s1,0x10
 8002592:	80c1                	srli	s1,s1,0x10
 8002594:	80a1                	srli	s1,s1,0x8
	*ptr++ = (BYTE)val;
 8002596:	009400a3          	sb	s1,1(s0)
			fs->wflag = 1;
 800259a:	014901a3          	sb	s4,3(s2)
			break;
 800259e:	b775                	j	800254a <put_fat+0xbe>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025a0:	511c                	lw	a5,32(a0)
 80025a2:	819d                	srli	a1,a1,0x7
 80025a4:	95be                	add	a1,a1,a5
 80025a6:	00000097          	auipc	ra,0x0
 80025aa:	ac4080e7          	jalr	-1340(ra) # 800206a <move_window>
 80025ae:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80025b0:	fd49                	bnez	a0,800254a <put_fat+0xbe>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80025b2:	040a                	slli	s0,s0,0x2
 80025b4:	03090793          	addi	a5,s2,48
 80025b8:	1fc47413          	andi	s0,s0,508
 80025bc:	943e                	add	s0,s0,a5
 80025be:	8522                	mv	a0,s0
 80025c0:	00000097          	auipc	ra,0x0
 80025c4:	90a080e7          	jalr	-1782(ra) # 8001eca <ld_dword>
 80025c8:	0492                	slli	s1,s1,0x4
 80025ca:	f00005b7          	lui	a1,0xf0000
 80025ce:	8091                	srli	s1,s1,0x4
 80025d0:	8de9                	and	a1,a1,a0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80025d2:	8dc5                	or	a1,a1,s1
 80025d4:	8522                	mv	a0,s0
 80025d6:	00000097          	auipc	ra,0x0
 80025da:	912080e7          	jalr	-1774(ra) # 8001ee8 <st_dword>
 80025de:	bf75                	j	800259a <put_fat+0x10e>

080025e0 <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80025e0:	4785                	li	a5,1
 80025e2:	0eb7f763          	bgeu	a5,a1,80026d0 <get_fat.isra.7+0xf0>
 80025e6:	4958                	lw	a4,20(a0)
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80025e8:	1101                	addi	sp,sp,-32
 80025ea:	cc22                	sw	s0,24(sp)
 80025ec:	ce06                	sw	ra,28(sp)
 80025ee:	ca26                	sw	s1,20(sp)
 80025f0:	c84a                	sw	s2,16(sp)
 80025f2:	c64e                	sw	s3,12(sp)
 80025f4:	842a                	mv	s0,a0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80025f6:	02e5fa63          	bgeu	a1,a4,800262a <get_fat.isra.7+0x4a>
		switch (fs->fs_type) {
 80025fa:	00054703          	lbu	a4,0(a0)
 80025fe:	4689                	li	a3,2
 8002600:	84ae                	mv	s1,a1
 8002602:	06d70c63          	beq	a4,a3,800267a <get_fat.isra.7+0x9a>
 8002606:	468d                	li	a3,3
 8002608:	08d70e63          	beq	a4,a3,80026a4 <get_fat.isra.7+0xc4>
 800260c:	00f71f63          	bne	a4,a5,800262a <get_fat.isra.7+0x4a>
			bc = (UINT)clst; bc += bc / 2;
 8002610:	0015d913          	srli	s2,a1,0x1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002614:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;
 8002616:	992e                	add	s2,s2,a1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002618:	00995593          	srli	a1,s2,0x9
 800261c:	95be                	add	a1,a1,a5
 800261e:	00000097          	auipc	ra,0x0
 8002622:	a4c080e7          	jalr	-1460(ra) # 800206a <move_window>
 8002626:	c911                	beqz	a0,800263a <get_fat.isra.7+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002628:	57fd                	li	a5,-1
}
 800262a:	40f2                	lw	ra,28(sp)
 800262c:	4462                	lw	s0,24(sp)
 800262e:	44d2                	lw	s1,20(sp)
 8002630:	4942                	lw	s2,16(sp)
 8002632:	49b2                	lw	s3,12(sp)
 8002634:	853e                	mv	a0,a5
 8002636:	6105                	addi	sp,sp,32
 8002638:	8082                	ret
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800263a:	501c                	lw	a5,32(s0)
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800263c:	00190993          	addi	s3,s2,1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002640:	0099d593          	srli	a1,s3,0x9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002644:	1ff97913          	andi	s2,s2,511
 8002648:	9922                	add	s2,s2,s0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800264a:	95be                	add	a1,a1,a5
 800264c:	8522                	mv	a0,s0
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800264e:	03094903          	lbu	s2,48(s2)
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002652:	00000097          	auipc	ra,0x0
 8002656:	a18080e7          	jalr	-1512(ra) # 800206a <move_window>
 800265a:	f579                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800265c:	1ff9f993          	andi	s3,s3,511
 8002660:	944e                	add	s0,s0,s3
 8002662:	03044783          	lbu	a5,48(s0)
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002666:	8885                	andi	s1,s1,1
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002668:	07a2                	slli	a5,a5,0x8
 800266a:	0127e7b3          	or	a5,a5,s2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800266e:	c099                	beqz	s1,8002674 <get_fat.isra.7+0x94>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8002670:	8391                	srli	a5,a5,0x4
			break;
 8002672:	bf65                	j	800262a <get_fat.isra.7+0x4a>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002674:	07d2                	slli	a5,a5,0x14
 8002676:	83d1                	srli	a5,a5,0x14
 8002678:	bf4d                	j	800262a <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800267a:	511c                	lw	a5,32(a0)
 800267c:	81a1                	srli	a1,a1,0x8
 800267e:	95be                	add	a1,a1,a5
 8002680:	00000097          	auipc	ra,0x0
 8002684:	9ea080e7          	jalr	-1558(ra) # 800206a <move_window>
 8002688:	f145                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800268a:	0486                	slli	s1,s1,0x1
 800268c:	03040413          	addi	s0,s0,48
 8002690:	1fe4f493          	andi	s1,s1,510
 8002694:	9426                	add	s0,s0,s1
	rv = rv << 8 | ptr[0];
 8002696:	00144783          	lbu	a5,1(s0)
 800269a:	00044703          	lbu	a4,0(s0)
 800269e:	07a2                	slli	a5,a5,0x8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80026a0:	8fd9                	or	a5,a5,a4
			break;
 80026a2:	b761                	j	800262a <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80026a4:	511c                	lw	a5,32(a0)
 80026a6:	819d                	srli	a1,a1,0x7
 80026a8:	95be                	add	a1,a1,a5
 80026aa:	00000097          	auipc	ra,0x0
 80026ae:	9c0080e7          	jalr	-1600(ra) # 800206a <move_window>
 80026b2:	f93d                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80026b4:	00249513          	slli	a0,s1,0x2
 80026b8:	03040413          	addi	s0,s0,48
 80026bc:	1fc57513          	andi	a0,a0,508
 80026c0:	9522                	add	a0,a0,s0
 80026c2:	00000097          	auipc	ra,0x0
 80026c6:	808080e7          	jalr	-2040(ra) # 8001eca <ld_dword>
 80026ca:	00451793          	slli	a5,a0,0x4
 80026ce:	b74d                	j	8002670 <get_fat.isra.7+0x90>
		val = 1;	/* Internal error */
 80026d0:	4785                	li	a5,1
}
 80026d2:	853e                	mv	a0,a5
 80026d4:	8082                	ret

080026d6 <create_chain>:
{
 80026d6:	1101                	addi	sp,sp,-32
 80026d8:	ca26                	sw	s1,20(sp)
 80026da:	c64e                	sw	s3,12(sp)
 80026dc:	c452                	sw	s4,8(sp)
 80026de:	ce06                	sw	ra,28(sp)
 80026e0:	cc22                	sw	s0,24(sp)
 80026e2:	c84a                	sw	s2,16(sp)
 80026e4:	c256                	sw	s5,4(sp)
 80026e6:	c05a                	sw	s6,0(sp)
 80026e8:	8a2a                	mv	s4,a0
 80026ea:	89ae                	mv	s3,a1
	FATFS *fs = obj->fs;
 80026ec:	4104                	lw	s1,0(a0)
	if (clst == 0) {	/* Create a new chain */
 80026ee:	e991                	bnez	a1,8002702 <create_chain+0x2c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80026f0:	00c4a903          	lw	s2,12(s1)
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80026f4:	00090563          	beqz	s2,80026fe <create_chain+0x28>
 80026f8:	48dc                	lw	a5,20(s1)
 80026fa:	04f96063          	bltu	s2,a5,800273a <create_chain+0x64>
 80026fe:	4905                	li	s2,1
 8002700:	a82d                	j	800273a <create_chain+0x64>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002702:	8526                	mv	a0,s1
 8002704:	00000097          	auipc	ra,0x0
 8002708:	edc080e7          	jalr	-292(ra) # 80025e0 <get_fat.isra.7>
		if (cs < 2) return 1;				/* Test for insanity */
 800270c:	4785                	li	a5,1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800270e:	842a                	mv	s0,a0
		if (cs < 2) return 1;				/* Test for insanity */
 8002710:	00a7ee63          	bltu	a5,a0,800272c <create_chain+0x56>
 8002714:	4405                	li	s0,1
}
 8002716:	8522                	mv	a0,s0
 8002718:	40f2                	lw	ra,28(sp)
 800271a:	4462                	lw	s0,24(sp)
 800271c:	44d2                	lw	s1,20(sp)
 800271e:	4942                	lw	s2,16(sp)
 8002720:	49b2                	lw	s3,12(sp)
 8002722:	4a22                	lw	s4,8(sp)
 8002724:	4a92                	lw	s5,4(sp)
 8002726:	4b02                	lw	s6,0(sp)
 8002728:	6105                	addi	sp,sp,32
 800272a:	8082                	ret
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800272c:	57fd                	li	a5,-1
 800272e:	0cf50363          	beq	a0,a5,80027f4 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002732:	48dc                	lw	a5,20(s1)
 8002734:	894e                	mv	s2,s3
 8002736:	fef560e3          	bltu	a0,a5,8002716 <create_chain+0x40>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800273a:	489c                	lw	a5,16(s1)
 800273c:	e399                	bnez	a5,8002742 <create_chain+0x6c>
 800273e:	4401                	li	s0,0
 8002740:	bfd9                	j	8002716 <create_chain+0x40>
		if (scl == clst) {						/* Stretching an existing chain? */
 8002742:	03391d63          	bne	s2,s3,800277c <create_chain+0xa6>
			if (ncl >= fs->n_fatent) ncl = 2;
 8002746:	48dc                	lw	a5,20(s1)
 8002748:	00190413          	addi	s0,s2,1
 800274c:	00f46363          	bltu	s0,a5,8002752 <create_chain+0x7c>
 8002750:	4409                	li	s0,2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002752:	000a2503          	lw	a0,0(s4)
 8002756:	85a2                	mv	a1,s0
 8002758:	00000097          	auipc	ra,0x0
 800275c:	e88080e7          	jalr	-376(ra) # 80025e0 <get_fat.isra.7>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002760:	4705                	li	a4,1
 8002762:	fae509e3          	beq	a0,a4,8002714 <create_chain+0x3e>
 8002766:	57fd                	li	a5,-1
 8002768:	08f50663          	beq	a0,a5,80027f4 <create_chain+0x11e>
			if (cs != 0) {						/* Not free? */
 800276c:	c129                	beqz	a0,80027ae <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800276e:	44dc                	lw	a5,12(s1)
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002770:	00f77663          	bgeu	a4,a5,800277c <create_chain+0xa6>
 8002774:	48d8                	lw	a4,20(s1)
 8002776:	00e7f363          	bgeu	a5,a4,800277c <create_chain+0xa6>
 800277a:	893e                	mv	s2,a5
 800277c:	844a                	mv	s0,s2
					if (ncl > scl) return 0;	/* No free cluster found? */
 800277e:	4a85                	li	s5,1
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002780:	5b7d                	li	s6,-1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002782:	48dc                	lw	a5,20(s1)
				ncl++;							/* Next cluster */
 8002784:	0405                	addi	s0,s0,1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002786:	00f46563          	bltu	s0,a5,8002790 <create_chain+0xba>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800278a:	fb2afae3          	bgeu	s5,s2,800273e <create_chain+0x68>
					ncl = 2;
 800278e:	4409                	li	s0,2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002790:	000a2503          	lw	a0,0(s4)
 8002794:	85a2                	mv	a1,s0
 8002796:	00000097          	auipc	ra,0x0
 800279a:	e4a080e7          	jalr	-438(ra) # 80025e0 <get_fat.isra.7>
				if (cs == 0) break;				/* Found a free cluster? */
 800279e:	c909                	beqz	a0,80027b0 <create_chain+0xda>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80027a0:	f7550ae3          	beq	a0,s5,8002714 <create_chain+0x3e>
 80027a4:	05650863          	beq	a0,s6,80027f4 <create_chain+0x11e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80027a8:	fd241de3          	bne	s0,s2,8002782 <create_chain+0xac>
 80027ac:	bf49                	j	800273e <create_chain+0x68>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80027ae:	d479                	beqz	s0,800277c <create_chain+0xa6>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80027b0:	567d                	li	a2,-1
 80027b2:	85a2                	mv	a1,s0
 80027b4:	8526                	mv	a0,s1
 80027b6:	00000097          	auipc	ra,0x0
 80027ba:	cd6080e7          	jalr	-810(ra) # 800248c <put_fat>
		if (res == FR_OK && clst != 0) {
 80027be:	e905                	bnez	a0,80027ee <create_chain+0x118>
 80027c0:	00099f63          	bnez	s3,80027de <create_chain+0x108>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027c4:	48d8                	lw	a4,20(s1)
 80027c6:	489c                	lw	a5,16(s1)
		fs->last_clst = ncl;
 80027c8:	c4c0                	sw	s0,12(s1)
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027ca:	1779                	addi	a4,a4,-2
 80027cc:	02f77663          	bgeu	a4,a5,80027f8 <create_chain+0x122>
		fs->fsi_flag |= 1;
 80027d0:	0044c783          	lbu	a5,4(s1)
 80027d4:	0017e793          	ori	a5,a5,1
 80027d8:	00f48223          	sb	a5,4(s1)
 80027dc:	bf2d                	j	8002716 <create_chain+0x40>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80027de:	8622                	mv	a2,s0
 80027e0:	85ce                	mv	a1,s3
 80027e2:	8526                	mv	a0,s1
 80027e4:	00000097          	auipc	ra,0x0
 80027e8:	ca8080e7          	jalr	-856(ra) # 800248c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80027ec:	dd61                	beqz	a0,80027c4 <create_chain+0xee>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80027ee:	4785                	li	a5,1
 80027f0:	f2f512e3          	bne	a0,a5,8002714 <create_chain+0x3e>
 80027f4:	547d                	li	s0,-1
 80027f6:	b705                	j	8002716 <create_chain+0x40>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027f8:	17fd                	addi	a5,a5,-1
 80027fa:	c89c                	sw	a5,16(s1)
 80027fc:	bfd1                	j	80027d0 <create_chain+0xfa>

080027fe <dir_next>:
{
 80027fe:	7179                	addi	sp,sp,-48
 8002800:	cc52                	sw	s4,24(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002802:	01052a03          	lw	s4,16(a0)
{
 8002806:	d422                	sw	s0,40(sp)
 8002808:	d606                	sw	ra,44(sp)
 800280a:	d226                	sw	s1,36(sp)
 800280c:	d04a                	sw	s2,32(sp)
 800280e:	ce4e                	sw	s3,28(sp)
 8002810:	ca56                	sw	s5,20(sp)
 8002812:	c85a                	sw	s6,16(sp)
 8002814:	c65e                	sw	s7,12(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002816:	020a0a13          	addi	s4,s4,32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800281a:	002007b7          	lui	a5,0x200
	FATFS *fs = dp->obj.fs;
 800281e:	4100                	lw	s0,0(a0)
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002820:	00fa6463          	bltu	s4,a5,8002828 <dir_next+0x2a>
 8002824:	00052c23          	sw	zero,24(a0)
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002828:	4d18                	lw	a4,24(a0)
 800282a:	4791                	li	a5,4
 800282c:	c705                	beqz	a4,8002854 <dir_next+0x56>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800282e:	1ffa7b13          	andi	s6,s4,511
 8002832:	8aae                	mv	s5,a1
 8002834:	84aa                	mv	s1,a0
 8002836:	0c0b1d63          	bnez	s6,8002910 <dir_next+0x112>
		if (dp->clust == 0) {	/* Static table */
 800283a:	494c                	lw	a1,20(a0)
		dp->sect++;				/* Next sector */
 800283c:	0705                	addi	a4,a4,1
 800283e:	cd18                	sw	a4,24(a0)
		if (dp->clust == 0) {	/* Static table */
 8002840:	e595                	bnez	a1,800286c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002842:	00845703          	lhu	a4,8(s0)
 8002846:	005a5793          	srli	a5,s4,0x5
 800284a:	0ce7e363          	bltu	a5,a4,8002910 <dir_next+0x112>
				dp->sect = 0; return FR_NO_FILE;
 800284e:	0004ac23          	sw	zero,24(s1)
 8002852:	4791                	li	a5,4
}
 8002854:	50b2                	lw	ra,44(sp)
 8002856:	5422                	lw	s0,40(sp)
 8002858:	5492                	lw	s1,36(sp)
 800285a:	5902                	lw	s2,32(sp)
 800285c:	49f2                	lw	s3,28(sp)
 800285e:	4a62                	lw	s4,24(sp)
 8002860:	4ad2                	lw	s5,20(sp)
 8002862:	4b42                	lw	s6,16(sp)
 8002864:	4bb2                	lw	s7,12(sp)
 8002866:	853e                	mv	a0,a5
 8002868:	6145                	addi	sp,sp,48
 800286a:	8082                	ret
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800286c:	00a45983          	lhu	s3,10(s0)
 8002870:	009a5793          	srli	a5,s4,0x9
 8002874:	19fd                	addi	s3,s3,-1
 8002876:	00f9f9b3          	and	s3,s3,a5
 800287a:	08099b63          	bnez	s3,8002910 <dir_next+0x112>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800287e:	8522                	mv	a0,s0
 8002880:	00000097          	auipc	ra,0x0
 8002884:	d60080e7          	jalr	-672(ra) # 80025e0 <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002888:	4b85                	li	s7,1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800288a:	892a                	mv	s2,a0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800288c:	00abe463          	bltu	s7,a0,8002894 <dir_next+0x96>
 8002890:	4789                	li	a5,2
 8002892:	b7c9                	j	8002854 <dir_next+0x56>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002894:	57fd                	li	a5,-1
 8002896:	00f51463          	bne	a0,a5,800289e <dir_next+0xa0>
 800289a:	4785                	li	a5,1
 800289c:	bf65                	j	8002854 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800289e:	485c                	lw	a5,20(s0)
 80028a0:	04f56f63          	bltu	a0,a5,80028fe <dir_next+0x100>
					if (!stretch) {								/* If no stretch, report EOT */
 80028a4:	fa0a85e3          	beqz	s5,800284e <dir_next+0x50>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80028a8:	48cc                	lw	a1,20(s1)
 80028aa:	8526                	mv	a0,s1
 80028ac:	00000097          	auipc	ra,0x0
 80028b0:	e2a080e7          	jalr	-470(ra) # 80026d6 <create_chain>
 80028b4:	892a                	mv	s2,a0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80028b6:	479d                	li	a5,7
 80028b8:	dd51                	beqz	a0,8002854 <dir_next+0x56>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80028ba:	fd750be3          	beq	a0,s7,8002890 <dir_next+0x92>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80028be:	57fd                	li	a5,-1
 80028c0:	fcf50de3          	beq	a0,a5,800289a <dir_next+0x9c>
	if (fs->wflag) {	/* Is the disk access window dirty */
 80028c4:	00344783          	lbu	a5,3(s0)
 80028c8:	efa1                	bnez	a5,8002920 <dir_next+0x122>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80028ca:	85ca                	mv	a1,s2
 80028cc:	8522                	mv	a0,s0
 80028ce:	fffff097          	auipc	ra,0xfffff
 80028d2:	650080e7          	jalr	1616(ra) # 8001f1e <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80028d6:	03040a93          	addi	s5,s0,48
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80028da:	8baa                	mv	s7,a0
	fs->winsect = sect;				/* Set window to top of the cluster */
 80028dc:	d448                	sw	a0,44(s0)
	BYTE *d = (BYTE*)dst;
 80028de:	23040713          	addi	a4,s0,560
 80028e2:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 80028e4:	0785                	addi	a5,a5,1
 80028e6:	fe078fa3          	sb	zero,-1(a5) # 1fffff <__stack_size+0x1fefff>
	} while (--cnt);
 80028ea:	fee79de3          	bne	a5,a4,80028e4 <dir_next+0xe6>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80028ee:	00a45783          	lhu	a5,10(s0)
 80028f2:	02f9ee63          	bltu	s3,a5,800292e <dir_next+0x130>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80028f6:	00a45783          	lhu	a5,10(s0)
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80028fa:	faf990e3          	bne	s3,a5,800289a <dir_next+0x9c>
				dp->clust = clst;		/* Initialize data for new cluster */
 80028fe:	0124aa23          	sw	s2,20(s1)
				dp->sect = clst2sect(fs, clst);
 8002902:	85ca                	mv	a1,s2
 8002904:	8522                	mv	a0,s0
 8002906:	fffff097          	auipc	ra,0xfffff
 800290a:	618080e7          	jalr	1560(ra) # 8001f1e <clst2sect>
 800290e:	cc88                	sw	a0,24(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002910:	03040413          	addi	s0,s0,48
 8002914:	945a                	add	s0,s0,s6
	dp->dptr = ofs;						/* Current entry */
 8002916:	0144a823          	sw	s4,16(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800291a:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 800291c:	4781                	li	a5,0
 800291e:	bf1d                	j	8002854 <dir_next+0x56>
 8002920:	8522                	mv	a0,s0
 8002922:	fffff097          	auipc	ra,0xfffff
 8002926:	6e4080e7          	jalr	1764(ra) # 8002006 <sync_window.part.3>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800292a:	f925                	bnez	a0,800289a <dir_next+0x9c>
 800292c:	bf79                	j	80028ca <dir_next+0xcc>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800292e:	00144503          	lbu	a0,1(s0)
 8002932:	4685                	li	a3,1
 8002934:	013b8633          	add	a2,s7,s3
 8002938:	85d6                	mv	a1,s5
 800293a:	00001097          	auipc	ra,0x1
 800293e:	110080e7          	jalr	272(ra) # 8003a4a <disk_write>
 8002942:	f955                	bnez	a0,80028f6 <dir_next+0xf8>
 8002944:	0985                	addi	s3,s3,1
 8002946:	b765                	j	80028ee <dir_next+0xf0>

08002948 <dir_sdi.constprop.9>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002948:	1101                	addi	sp,sp,-32
 800294a:	c84a                	sw	s2,16(sp)
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800294c:	00852903          	lw	s2,8(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002950:	cc22                	sw	s0,24(sp)
 8002952:	ca26                	sw	s1,20(sp)
 8002954:	ce06                	sw	ra,28(sp)
 8002956:	c64e                	sw	s3,12(sp)
 8002958:	c452                	sw	s4,8(sp)
	dp->dptr = ofs;				/* Set current offset */
 800295a:	00052823          	sw	zero,16(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800295e:	84aa                	mv	s1,a0
	FATFS *fs = dp->obj.fs;
 8002960:	4100                	lw	s0,0(a0)
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002962:	04091163          	bnez	s2,80029a4 <dir_sdi.constprop.9+0x5c>
 8002966:	00044703          	lbu	a4,0(s0)
 800296a:	4789                	li	a5,2
 800296c:	00e7f463          	bgeu	a5,a4,8002974 <dir_sdi.constprop.9+0x2c>
		clst = fs->dirbase;
 8002970:	505c                	lw	a5,36(s0)
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002972:	eb85                	bnez	a5,80029a2 <dir_sdi.constprop.9+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002974:	00845783          	lhu	a5,8(s0)
 8002978:	eb91                	bnez	a5,800298c <dir_sdi.constprop.9+0x44>
 800297a:	4509                	li	a0,2
}
 800297c:	40f2                	lw	ra,28(sp)
 800297e:	4462                	lw	s0,24(sp)
 8002980:	44d2                	lw	s1,20(sp)
 8002982:	4942                	lw	s2,16(sp)
 8002984:	49b2                	lw	s3,12(sp)
 8002986:	4a22                	lw	s4,8(sp)
 8002988:	6105                	addi	sp,sp,32
 800298a:	8082                	ret
		dp->sect = fs->dirbase;
 800298c:	505c                	lw	a5,36(s0)
 800298e:	cc9c                	sw	a5,24(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002990:	4c9c                	lw	a5,24(s1)
	dp->clust = clst;					/* Current cluster# */
 8002992:	0124aa23          	sw	s2,20(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002996:	d3f5                	beqz	a5,800297a <dir_sdi.constprop.9+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002998:	03040413          	addi	s0,s0,48
 800299c:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 800299e:	4501                	li	a0,0
 80029a0:	bff1                	j	800297c <dir_sdi.constprop.9+0x34>
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80029a2:	893e                	mv	s2,a5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80029a4:	00a45783          	lhu	a5,10(s0)
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029a8:	59fd                	li	s3,-1
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80029aa:	4a05                	li	s4,1
		while (ofs >= csz) {				/* Follow cluster chain */
 80029ac:	e385                	bnez	a5,80029cc <dir_sdi.constprop.9+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80029ae:	4088                	lw	a0,0(s1)
 80029b0:	85ca                	mv	a1,s2
 80029b2:	00000097          	auipc	ra,0x0
 80029b6:	c2e080e7          	jalr	-978(ra) # 80025e0 <get_fat.isra.7>
 80029ba:	892a                	mv	s2,a0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029bc:	03350063          	beq	a0,s3,80029dc <dir_sdi.constprop.9+0x94>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80029c0:	faaa7de3          	bgeu	s4,a0,800297a <dir_sdi.constprop.9+0x32>
 80029c4:	485c                	lw	a5,20(s0)
 80029c6:	fef564e3          	bltu	a0,a5,80029ae <dir_sdi.constprop.9+0x66>
 80029ca:	bf45                	j	800297a <dir_sdi.constprop.9+0x32>
		dp->sect = clst2sect(fs, clst);
 80029cc:	85ca                	mv	a1,s2
 80029ce:	8522                	mv	a0,s0
 80029d0:	fffff097          	auipc	ra,0xfffff
 80029d4:	54e080e7          	jalr	1358(ra) # 8001f1e <clst2sect>
 80029d8:	cc88                	sw	a0,24(s1)
 80029da:	bf5d                	j	8002990 <dir_sdi.constprop.9+0x48>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029dc:	4505                	li	a0,1
 80029de:	bf79                	j	800297c <dir_sdi.constprop.9+0x34>

080029e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80029e0:	7179                	addi	sp,sp,-48
 80029e2:	c62a                	sw	a0,12(sp)
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80029e4:	0868                	addi	a0,sp,28
{
 80029e6:	d606                	sw	ra,44(sp)
 80029e8:	c42e                	sw	a1,8(sp)
 80029ea:	c232                	sw	a2,4(sp)
	const TCHAR *rp = path;
 80029ec:	ce2e                	sw	a1,28(sp)
	vol = get_ldnumber(&rp);
 80029ee:	fffff097          	auipc	ra,0xfffff
 80029f2:	54c080e7          	jalr	1356(ra) # 8001f3a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80029f6:	04054163          	bltz	a0,8002a38 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80029fa:	200007b7          	lui	a5,0x20000
 80029fe:	50878713          	addi	a4,a5,1288 # 20000508 <FatFs>
 8002a02:	050a                	slli	a0,a0,0x2
 8002a04:	972a                	add	a4,a4,a0
 8002a06:	4318                	lw	a4,0(a4)

	if (cfs) {
 8002a08:	50878793          	addi	a5,a5,1288
 8002a0c:	4612                	lw	a2,4(sp)
 8002a0e:	c319                	beqz	a4,8002a14 <f_mount+0x34>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002a10:	00070023          	sb	zero,0(a4)
	}

	if (fs) {
 8002a14:	4732                	lw	a4,12(sp)
 8002a16:	c319                	beqz	a4,8002a1c <f_mount+0x3c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002a18:	00070023          	sb	zero,0(a4)
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002a1c:	97aa                	add	a5,a5,a0
 8002a1e:	c398                	sw	a4,0(a5)

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002a20:	4501                	li	a0,0
 8002a22:	ca01                	beqz	a2,8002a32 <f_mount+0x52>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002a24:	4601                	li	a2,0
 8002a26:	006c                	addi	a1,sp,12
 8002a28:	0028                	addi	a0,sp,8
 8002a2a:	fffff097          	auipc	ra,0xfffff
 8002a2e:	720080e7          	jalr	1824(ra) # 800214a <find_volume>
	LEAVE_FF(fs, res);
}
 8002a32:	50b2                	lw	ra,44(sp)
 8002a34:	6145                	addi	sp,sp,48
 8002a36:	8082                	ret
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a38:	452d                	li	a0,11
 8002a3a:	bfe5                	j	8002a32 <f_mount+0x52>

08002a3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002a3c:	7119                	addi	sp,sp,-128
 8002a3e:	d4d2                	sw	s4,104(sp)
 8002a40:	de86                	sw	ra,124(sp)
 8002a42:	dca2                	sw	s0,120(sp)
 8002a44:	daa6                	sw	s1,116(sp)
 8002a46:	d8ca                	sw	s2,112(sp)
 8002a48:	d6ce                	sw	s3,108(sp)
 8002a4a:	d2d6                	sw	s5,100(sp)
 8002a4c:	d0da                	sw	s6,96(sp)
 8002a4e:	cede                	sw	s7,92(sp)
 8002a50:	cce2                	sw	s8,88(sp)
 8002a52:	cae6                	sw	s9,84(sp)
 8002a54:	c8ea                	sw	s10,80(sp)
 8002a56:	c6ee                	sw	s11,76(sp)
 8002a58:	c62e                	sw	a1,12(sp)
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002a5a:	4a25                	li	s4,9
 8002a5c:	4a050a63          	beqz	a0,8002f10 <f_open+0x4d4>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002a60:	03f67993          	andi	s3,a2,63
 8002a64:	8932                	mv	s2,a2
 8002a66:	84aa                	mv	s1,a0
	res = find_volume(&path, &fs, mode);
 8002a68:	864e                	mv	a2,s3
 8002a6a:	080c                	addi	a1,sp,16
 8002a6c:	0068                	addi	a0,sp,12
 8002a6e:	fffff097          	auipc	ra,0xfffff
 8002a72:	6dc080e7          	jalr	1756(ra) # 800214a <find_volume>
 8002a76:	8a2a                	mv	s4,a0
	if (res == FR_OK) {
 8002a78:	842a                	mv	s0,a0
 8002a7a:	30051b63          	bnez	a0,8002d90 <f_open+0x354>
		dj.obj.fs = fs;
 8002a7e:	4ac2                	lw	s5,16(sp)
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002a80:	4d32                	lw	s10,12(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a82:	02f00693          	li	a3,47
		dj.obj.fs = fs;
 8002a86:	ca56                	sw	s5,20(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a88:	05c00713          	li	a4,92
 8002a8c:	000d4783          	lbu	a5,0(s10)
 8002a90:	0ed78d63          	beq	a5,a3,8002b8a <f_open+0x14e>
 8002a94:	0ee78b63          	beq	a5,a4,8002b8a <f_open+0x14e>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002a98:	ce02                	sw	zero,28(sp)
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002a9a:	000d4703          	lbu	a4,0(s10)
 8002a9e:	47fd                	li	a5,31
 8002aa0:	0ee7f763          	bgeu	a5,a4,8002b8e <f_open+0x152>
 8002aa4:	01f10c13          	addi	s8,sp,31
		*d++ = (BYTE)val;
 8002aa8:	02000b13          	li	s6,32
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002aac:	02f00b93          	li	s7,47
	if (c >= DbcTbl[0]) {
 8002ab0:	08000cb7          	lui	s9,0x8000
	mem_set(sfn, ' ', 11);
 8002ab4:	085c                	addi	a5,sp,20
		*d++ = (BYTE)val;
 8002ab6:	03678023          	sb	s6,32(a5)
 8002aba:	0785                	addi	a5,a5,1
	} while (--cnt);
 8002abc:	fefc1de3          	bne	s8,a5,8002ab6 <f_open+0x7a>
	si = i = 0; ni = 8;
 8002ac0:	4701                	li	a4,0
 8002ac2:	4601                	li	a2,0
 8002ac4:	45a1                	li	a1,8
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002ac6:	05c00513          	li	a0,92
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002aca:	02e00813          	li	a6,46
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002ace:	48ad                	li	a7,11
	if (c >= DbcTbl[0]) {
 8002ad0:	07d00313          	li	t1,125
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002ad4:	4e65                	li	t3,25
	if (c >= DbcTbl[4]) {
 8002ad6:	03f00e93          	li	t4,63
		if (c <= DbcTbl[5]) return 1;
 8002ada:	07e00f13          	li	t5,126
		c = (BYTE)p[si++];				/* Get a byte */
 8002ade:	00cd07b3          	add	a5,s10,a2
 8002ae2:	0007c783          	lbu	a5,0(a5)
 8002ae6:	00160693          	addi	a3,a2,1 # 10001 <__stack_size+0xf001>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002aea:	02fb7063          	bgeu	s6,a5,8002b0a <f_open+0xce>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002aee:	01778463          	beq	a5,s7,8002af6 <f_open+0xba>
 8002af2:	1aa79763          	bne	a5,a0,8002ca0 <f_open+0x264>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002af6:	05c00593          	li	a1,92
 8002afa:	00dd0633          	add	a2,s10,a3
 8002afe:	00064603          	lbu	a2,0(a2)
 8002b02:	19760d63          	beq	a2,s7,8002c9c <f_open+0x260>
 8002b06:	18b60b63          	beq	a2,a1,8002c9c <f_open+0x260>
	*path = p + si;						/* Return pointer to the next segment */
 8002b0a:	9d36                	add	s10,s10,a3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002b0c:	18070e63          	beqz	a4,8002ca8 <f_open+0x26c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002b10:	03414683          	lbu	a3,52(sp)
 8002b14:	0e500713          	li	a4,229
 8002b18:	00e69563          	bne	a3,a4,8002b22 <f_open+0xe6>
 8002b1c:	4715                	li	a4,5
 8002b1e:	02e10a23          	sb	a4,52(sp)
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b22:	4711                	li	a4,4
 8002b24:	00fb7363          	bgeu	s6,a5,8002b2a <f_open+0xee>
 8002b28:	4701                	li	a4,0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002b2a:	0848                	addi	a0,sp,20
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b2c:	02e10fa3          	sb	a4,63(sp)
	FATFS *fs = dp->obj.fs;
 8002b30:	4dd2                	lw	s11,20(sp)
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002b32:	00000097          	auipc	ra,0x0
 8002b36:	e16080e7          	jalr	-490(ra) # 8002948 <dir_sdi.constprop.9>
 8002b3a:	842a                	mv	s0,a0
	if (res != FR_OK) return res;
 8002b3c:	1e051663          	bnez	a0,8002d28 <f_open+0x2ec>
		res = move_window(fs, dp->sect);
 8002b40:	55b2                	lw	a1,44(sp)
 8002b42:	856e                	mv	a0,s11
 8002b44:	fffff097          	auipc	ra,0xfffff
 8002b48:	526080e7          	jalr	1318(ra) # 800206a <move_window>
 8002b4c:	842a                	mv	s0,a0
		if (res != FR_OK) break;
 8002b4e:	1c051d63          	bnez	a0,8002d28 <f_open+0x2ec>
		c = dp->dir[DIR_Name];
 8002b52:	5542                	lw	a0,48(sp)
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002b54:	00054783          	lbu	a5,0(a0)
 8002b58:	1c078763          	beqz	a5,8002d26 <f_open+0x2ea>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002b5c:	00b54783          	lbu	a5,11(a0)
 8002b60:	03f7f713          	andi	a4,a5,63
 8002b64:	00e10d23          	sb	a4,26(sp)
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002b68:	8ba1                	andi	a5,a5,8
 8002b6a:	eb89                	bnez	a5,8002b7c <f_open+0x140>
 8002b6c:	462d                	li	a2,11
 8002b6e:	184c                	addi	a1,sp,52
 8002b70:	fffff097          	auipc	ra,0xfffff
 8002b74:	394080e7          	jalr	916(ra) # 8001f04 <mem_cmp>
 8002b78:	1a050863          	beqz	a0,8002d28 <f_open+0x2ec>
		res = dir_next(dp, 0);	/* Next entry */
 8002b7c:	4581                	li	a1,0
 8002b7e:	0848                	addi	a0,sp,20
 8002b80:	00000097          	auipc	ra,0x0
 8002b84:	c7e080e7          	jalr	-898(ra) # 80027fe <dir_next>
 8002b88:	bf4d                	j	8002b3a <f_open+0xfe>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002b8a:	0d05                	addi	s10,s10,1
 8002b8c:	b701                	j	8002a8c <f_open+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002b8e:	f8000793          	li	a5,-128
		res = dir_sdi(dp, 0);
 8002b92:	0848                	addi	a0,sp,20
		dp->fn[NSFLAG] = NS_NONAME;
 8002b94:	02f10fa3          	sb	a5,63(sp)
		res = dir_sdi(dp, 0);
 8002b98:	00000097          	auipc	ra,0x0
 8002b9c:	db0080e7          	jalr	-592(ra) # 8002948 <dir_sdi.constprop.9>
 8002ba0:	842a                	mv	s0,a0
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002ba2:	1c050263          	beqz	a0,8002d66 <f_open+0x32a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002ba6:	01c97793          	andi	a5,s2,28
 8002baa:	28078563          	beqz	a5,8002e34 <f_open+0x3f8>
			if (res != FR_OK) {					/* No file, create new */
 8002bae:	1e040563          	beqz	s0,8002d98 <f_open+0x35c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002bb2:	4791                	li	a5,4
 8002bb4:	1cf41e63          	bne	s0,a5,8002d90 <f_open+0x354>
	res = dir_sdi(dp, 0);
 8002bb8:	0848                	addi	a0,sp,20
	FATFS *fs = dp->obj.fs;
 8002bba:	4952                	lw	s2,20(sp)
	res = dir_sdi(dp, 0);
 8002bbc:	00000097          	auipc	ra,0x0
 8002bc0:	d8c080e7          	jalr	-628(ra) # 8002948 <dir_sdi.constprop.9>
 8002bc4:	842a                	mv	s0,a0
	if (res == FR_OK) {
 8002bc6:	1c051163          	bnez	a0,8002d88 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002bca:	0e500a93          	li	s5,229
			res = move_window(fs, dp->sect);
 8002bce:	55b2                	lw	a1,44(sp)
 8002bd0:	854a                	mv	a0,s2
 8002bd2:	fffff097          	auipc	ra,0xfffff
 8002bd6:	498080e7          	jalr	1176(ra) # 800206a <move_window>
 8002bda:	842a                	mv	s0,a0
			if (res != FR_OK) break;
 8002bdc:	1a051663          	bnez	a0,8002d88 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002be0:	57c2                	lw	a5,48(sp)
 8002be2:	0007c783          	lbu	a5,0(a5)
 8002be6:	19579663          	bne	a5,s5,8002d72 <f_open+0x336>
		res = move_window(fs, dp->sect);
 8002bea:	55b2                	lw	a1,44(sp)
 8002bec:	854a                	mv	a0,s2
 8002bee:	fffff097          	auipc	ra,0xfffff
 8002bf2:	47c080e7          	jalr	1148(ra) # 800206a <move_window>
 8002bf6:	842a                	mv	s0,a0
		if (res == FR_OK) {
 8002bf8:	18051c63          	bnez	a0,8002d90 <f_open+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002bfc:	57c2                	lw	a5,48(sp)
	BYTE *d = (BYTE*)dst;
 8002bfe:	02078713          	addi	a4,a5,32
		*d++ = (BYTE)val;
 8002c02:	0785                	addi	a5,a5,1
 8002c04:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002c08:	fef71de3          	bne	a4,a5,8002c02 <f_open+0x1c6>
	if (cnt != 0) {
 8002c0c:	5542                	lw	a0,48(sp)
 8002c0e:	462d                	li	a2,11
 8002c10:	184c                	addi	a1,sp,52
 8002c12:	fffff097          	auipc	ra,0xfffff
 8002c16:	3b4080e7          	jalr	948(ra) # 8001fc6 <mem_cpy.part.0>
			fs->wflag = 1;
 8002c1a:	4785                	li	a5,1
 8002c1c:	00f901a3          	sb	a5,3(s2)
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002c20:	0089e993          	ori	s3,s3,8
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8002c24:	47c2                	lw	a5,16(sp)
 8002c26:	5442                	lw	s0,48(sp)
 8002c28:	0007c503          	lbu	a0,0(a5)
 8002c2c:	85a2                	mv	a1,s0
 8002c2e:	fffff097          	auipc	ra,0xfffff
 8002c32:	3b2080e7          	jalr	946(ra) # 8001fe0 <ld_clust.isra.1>
 8002c36:	892a                	mv	s2,a0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8002c38:	00000097          	auipc	ra,0x0
 8002c3c:	730080e7          	jalr	1840(ra) # 8003368 <get_fattime>
 8002c40:	85aa                	mv	a1,a0
 8002c42:	00e40513          	addi	a0,s0,14
 8002c46:	fffff097          	auipc	ra,0xfffff
 8002c4a:	2a2080e7          	jalr	674(ra) # 8001ee8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002c4e:	57c2                	lw	a5,48(sp)
 8002c50:	02000713          	li	a4,32
	if (fs->fs_type == FS_FAT32) {
 8002c54:	468d                	li	a3,3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002c56:	00e785a3          	sb	a4,11(a5)
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002c5a:	57c2                	lw	a5,48(sp)
 8002c5c:	4742                	lw	a4,16(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c5e:	00078d23          	sb	zero,26(a5)
	*ptr++ = (BYTE)val;
 8002c62:	00078da3          	sb	zero,27(a5)
	if (fs->fs_type == FS_FAT32) {
 8002c66:	00074603          	lbu	a2,0(a4)
 8002c6a:	00d61663          	bne	a2,a3,8002c76 <f_open+0x23a>
	*ptr++ = (BYTE)val; val >>= 8;
 8002c6e:	00078a23          	sb	zero,20(a5)
	*ptr++ = (BYTE)val;
 8002c72:	00078aa3          	sb	zero,21(a5)
					st_dword(dj.dir + DIR_FileSize, 0);
 8002c76:	57c2                	lw	a5,48(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c78:	00078e23          	sb	zero,28(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c7c:	00078ea3          	sb	zero,29(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c80:	00078f23          	sb	zero,30(a5)
	*ptr++ = (BYTE)val;
 8002c84:	00078fa3          	sb	zero,31(a5)
					fs->wflag = 1;
 8002c88:	4785                	li	a5,1
 8002c8a:	00f701a3          	sb	a5,3(a4)
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8002c8e:	1c090063          	beqz	s2,8002e4e <f_open+0x412>
	FATFS *fs = obj->fs;
 8002c92:	4ad2                	lw	s5,20(sp)
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c94:	1127ef63          	bltu	a5,s2,8002db2 <f_open+0x376>
 8002c98:	4409                	li	s0,2
 8002c9a:	a8dd                	j	8002d90 <f_open+0x354>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002c9c:	0685                	addi	a3,a3,1
 8002c9e:	bdb1                	j	8002afa <f_open+0xbe>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002ca0:	2b078c63          	beq	a5,a6,8002f58 <f_open+0x51c>
 8002ca4:	00b76463          	bltu	a4,a1,8002cac <f_open+0x270>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002ca8:	4419                	li	s0,6
 8002caa:	bdf5                	j	8002ba6 <f_open+0x16a>
	if (c >= DbcTbl[0]) {
 8002cac:	07f78f93          	addi	t6,a5,127
 8002cb0:	0fffff93          	andi	t6,t6,255
 8002cb4:	05f36763          	bltu	t1,t6,8002d02 <f_open+0x2c6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002cb8:	96ea                	add	a3,a3,s10
 8002cba:	0006cf83          	lbu	t6,0(a3) # 1000 <__stack_size>
 8002cbe:	0609                	addi	a2,a2,2
	if (c >= DbcTbl[4]) {
 8002cc0:	fffef4e3          	bgeu	t4,t6,8002ca8 <f_open+0x26c>
		if (c <= DbcTbl[5]) return 1;
 8002cc4:	07fff693          	andi	a3,t6,127
 8002cc8:	fedf60e3          	bltu	t5,a3,8002ca8 <f_open+0x26c>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002ccc:	fff58693          	addi	a3,a1,-1 # efffffff <_sp+0xcfff7fff>
 8002cd0:	fcd77ce3          	bgeu	a4,a3,8002ca8 <f_open+0x26c>
			sfn[i++] = c;
 8002cd4:	0080                	addi	s0,sp,64
 8002cd6:	00170693          	addi	a3,a4,1
 8002cda:	00e402b3          	add	t0,s0,a4
 8002cde:	fef28a23          	sb	a5,-12(t0)
			sfn[i++] = d;
 8002ce2:	87b6                	mv	a5,a3
 8002ce4:	97a2                	add	a5,a5,s0
 8002ce6:	0709                	addi	a4,a4,2
 8002ce8:	fff78a23          	sb	t6,-12(a5)
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002cec:	86b2                	mv	a3,a2
			i = 8; ni = 11;				/* Enter file extension field */
 8002cee:	8636                	mv	a2,a3
 8002cf0:	b3fd                	j	8002ade <f_open+0xa2>
	while (*str && *str != chr) str++;
 8002cf2:	0605                	addi	a2,a2,1
 8002cf4:	00064f83          	lbu	t6,0(a2)
 8002cf8:	000f8863          	beqz	t6,8002d08 <f_open+0x2cc>
 8002cfc:	fff79be3          	bne	a5,t6,8002cf2 <f_open+0x2b6>
 8002d00:	b765                	j	8002ca8 <f_open+0x26c>
	if (c >= DbcTbl[0]) {
 8002d02:	2d0c8613          	addi	a2,s9,720 # 80002d0 <enable_mcycle_minstret+0x84>
 8002d06:	b7fd                	j	8002cf4 <f_open+0x2b8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002d08:	f9f78613          	addi	a2,a5,-97
 8002d0c:	0ff67613          	andi	a2,a2,255
 8002d10:	00ce6563          	bltu	t3,a2,8002d1a <f_open+0x2de>
 8002d14:	1781                	addi	a5,a5,-32
 8002d16:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
 8002d1a:	0090                	addi	a2,sp,64
 8002d1c:	963a                	add	a2,a2,a4
 8002d1e:	fef60a23          	sb	a5,-12(a2)
 8002d22:	0705                	addi	a4,a4,1
 8002d24:	b7e9                	j	8002cee <f_open+0x2b2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002d26:	4411                	li	s0,4
			ns = dp->fn[NSFLAG];
 8002d28:	03f14783          	lbu	a5,63(sp)
			if (res != FR_OK) {				/* Failed to find the object */
 8002d2c:	c809                	beqz	s0,8002d3e <f_open+0x302>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002d2e:	4711                	li	a4,4
 8002d30:	e6e41be3          	bne	s0,a4,8002ba6 <f_open+0x16a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002d34:	8b91                	andi	a5,a5,4
 8002d36:	e60798e3          	bnez	a5,8002ba6 <f_open+0x16a>
				res = FR_NO_PATH; break;
 8002d3a:	4415                	li	s0,5
 8002d3c:	b5ad                	j	8002ba6 <f_open+0x16a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002d3e:	8b91                	andi	a5,a5,4
 8002d40:	e39d                	bnez	a5,8002d66 <f_open+0x32a>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002d42:	01a14783          	lbu	a5,26(sp)
 8002d46:	8bc1                	andi	a5,a5,16
 8002d48:	dbed                	beqz	a5,8002d3a <f_open+0x2fe>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002d4a:	5792                	lw	a5,36(sp)
 8002d4c:	000ac503          	lbu	a0,0(s5)
 8002d50:	030a8593          	addi	a1,s5,48
 8002d54:	1ff7f793          	andi	a5,a5,511
 8002d58:	95be                	add	a1,a1,a5
 8002d5a:	fffff097          	auipc	ra,0xfffff
 8002d5e:	286080e7          	jalr	646(ra) # 8001fe0 <ld_clust.isra.1>
 8002d62:	ce2a                	sw	a0,28(sp)
 8002d64:	bb81                	j	8002ab4 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002d66:	03f10783          	lb	a5,63(sp)
		res = follow_path(&dj, path);	/* Follow the file path */
 8002d6a:	4401                	li	s0,0
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002d6c:	e207dde3          	bgez	a5,8002ba6 <f_open+0x16a>
 8002d70:	bf25                	j	8002ca8 <f_open+0x26c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002d72:	e6078ce3          	beqz	a5,8002bea <f_open+0x1ae>
			res = dir_next(dp, 1);
 8002d76:	4585                	li	a1,1
 8002d78:	0848                	addi	a0,sp,20
 8002d7a:	00000097          	auipc	ra,0x0
 8002d7e:	a84080e7          	jalr	-1404(ra) # 80027fe <dir_next>
 8002d82:	842a                	mv	s0,a0
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002d84:	e40505e3          	beqz	a0,8002bce <f_open+0x192>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002d88:	4791                	li	a5,4
 8002d8a:	00f41363          	bne	s0,a5,8002d90 <f_open+0x354>
 8002d8e:	441d                	li	s0,7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002d90:	0004a023          	sw	zero,0(s1)
 8002d94:	8a22                	mv	s4,s0
 8002d96:	aaad                	j	8002f10 <f_open+0x4d4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002d98:	01a14783          	lbu	a5,26(sp)
 8002d9c:	8bc5                	andi	a5,a5,17
 8002d9e:	fbe5                	bnez	a5,8002d8e <f_open+0x352>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002da0:	00497793          	andi	a5,s2,4
 8002da4:	1a079663          	bnez	a5,8002f50 <f_open+0x514>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002da8:	00897913          	andi	s2,s2,8
 8002dac:	0a090163          	beqz	s2,8002e4e <f_open+0x412>
 8002db0:	bd95                	j	8002c24 <f_open+0x1e8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002db2:	014aa783          	lw	a5,20(s5)
 8002db6:	eef971e3          	bgeu	s2,a5,8002c98 <f_open+0x25c>
						dw = fs->winsect;
 8002dba:	02c72b83          	lw	s7,44(a4)
 8002dbe:	844a                	mv	s0,s2
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002dc0:	4c05                	li	s8,1
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002dc2:	5cfd                	li	s9,-1
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002dc4:	4552                	lw	a0,20(sp)
 8002dc6:	85a2                	mv	a1,s0
 8002dc8:	00000097          	auipc	ra,0x0
 8002dcc:	818080e7          	jalr	-2024(ra) # 80025e0 <get_fat.isra.7>
 8002dd0:	8b2a                	mv	s6,a0
		if (nxt == 0) break;				/* Empty cluster? */
 8002dd2:	c521                	beqz	a0,8002e1a <f_open+0x3de>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002dd4:	ed8502e3          	beq	a0,s8,8002c98 <f_open+0x25c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002dd8:	01951463          	bne	a0,s9,8002de0 <f_open+0x3a4>
 8002ddc:	4405                	li	s0,1
 8002dde:	bf4d                	j	8002d90 <f_open+0x354>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002de0:	85a2                	mv	a1,s0
 8002de2:	4601                	li	a2,0
 8002de4:	8556                	mv	a0,s5
 8002de6:	fffff097          	auipc	ra,0xfffff
 8002dea:	6a6080e7          	jalr	1702(ra) # 800248c <put_fat>
 8002dee:	842a                	mv	s0,a0
			if (res != FR_OK) return res;
 8002df0:	f145                	bnez	a0,8002d90 <f_open+0x354>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002df2:	014aa703          	lw	a4,20(s5)
 8002df6:	010aa783          	lw	a5,16(s5)
 8002dfa:	ffe70693          	addi	a3,a4,-2
 8002dfe:	00d7fb63          	bgeu	a5,a3,8002e14 <f_open+0x3d8>
			fs->free_clst++;
 8002e02:	0785                	addi	a5,a5,1
 8002e04:	00faa823          	sw	a5,16(s5)
			fs->fsi_flag |= 1;
 8002e08:	004ac783          	lbu	a5,4(s5)
 8002e0c:	0017e793          	ori	a5,a5,1
 8002e10:	00fa8223          	sb	a5,4(s5)
		clst = nxt;					/* Next cluster */
 8002e14:	845a                	mv	s0,s6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002e16:	faeb67e3          	bltu	s6,a4,8002dc4 <f_open+0x388>
							res = move_window(fs, dw);
 8002e1a:	4542                	lw	a0,16(sp)
 8002e1c:	85de                	mv	a1,s7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e1e:	197d                	addi	s2,s2,-1
							res = move_window(fs, dw);
 8002e20:	fffff097          	auipc	ra,0xfffff
 8002e24:	24a080e7          	jalr	586(ra) # 800206a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e28:	47c2                	lw	a5,16(sp)
							res = move_window(fs, dw);
 8002e2a:	842a                	mv	s0,a0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e2c:	0127a623          	sw	s2,12(a5)
		if (res == FR_OK) {
 8002e30:	cd19                	beqz	a0,8002e4e <f_open+0x412>
 8002e32:	bfb9                	j	8002d90 <f_open+0x354>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8002e34:	fc31                	bnez	s0,8002d90 <f_open+0x354>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8002e36:	01a14783          	lbu	a5,26(sp)
 8002e3a:	0107f713          	andi	a4,a5,16
 8002e3e:	10071b63          	bnez	a4,8002f54 <f_open+0x518>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8002e42:	00297913          	andi	s2,s2,2
 8002e46:	00090463          	beqz	s2,8002e4e <f_open+0x412>
 8002e4a:	8b85                	andi	a5,a5,1
 8002e4c:	f3a9                	bnez	a5,8002d8e <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8002e4e:	0089f793          	andi	a5,s3,8
 8002e52:	c399                	beqz	a5,8002e58 <f_open+0x41c>
 8002e54:	0409e993          	ori	s3,s3,64
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e58:	4442                	lw	s0,16(sp)
			fp->dir_ptr = dj.dir;
 8002e5a:	5942                	lw	s2,48(sp)
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8002e5c:	02848a93          	addi	s5,s1,40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e60:	545c                	lw	a5,44(s0)
			fp->dir_ptr = dj.dir;
 8002e62:	0324a223          	sw	s2,36(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002e66:	85ca                	mv	a1,s2
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e68:	d09c                	sw	a5,32(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002e6a:	00044503          	lbu	a0,0(s0)
 8002e6e:	fffff097          	auipc	ra,0xfffff
 8002e72:	172080e7          	jalr	370(ra) # 8001fe0 <ld_clust.isra.1>
 8002e76:	c488                	sw	a0,8(s1)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002e78:	01c90513          	addi	a0,s2,28
 8002e7c:	fffff097          	auipc	ra,0xfffff
 8002e80:	04e080e7          	jalr	78(ra) # 8001eca <ld_dword>
			fp->obj.id = fs->id;
 8002e84:	00645783          	lhu	a5,6(s0)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002e88:	c4c8                	sw	a0,12(s1)
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002e8a:	c080                	sw	s0,0(s1)
			fp->obj.id = fs->id;
 8002e8c:	00f49223          	sh	a5,4(s1)
			fp->flag = mode;		/* Set file access mode */
 8002e90:	01348823          	sb	s3,16(s1)
			fp->err = 0;			/* Clear error flag */
 8002e94:	000488a3          	sb	zero,17(s1)
			fp->sect = 0;			/* Invalidate current data sector */
 8002e98:	0004ae23          	sw	zero,28(s1)
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002e9c:	0004aa23          	sw	zero,20(s1)
	BYTE *d = (BYTE*)dst;
 8002ea0:	22848713          	addi	a4,s1,552
 8002ea4:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 8002ea6:	0785                	addi	a5,a5,1
 8002ea8:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002eac:	fee79de3          	bne	a5,a4,8002ea6 <f_open+0x46a>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002eb0:	0209f993          	andi	s3,s3,32
 8002eb4:	04098e63          	beqz	s3,8002f10 <f_open+0x4d4>
 8002eb8:	00c4a903          	lw	s2,12(s1)
 8002ebc:	04090a63          	beqz	s2,8002f10 <f_open+0x4d4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002ec0:	00a45403          	lhu	s0,10(s0)
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002ec4:	448c                	lw	a1,8(s1)
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002ec6:	0124aa23          	sw	s2,20(s1)
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002eca:	0426                	slli	s0,s0,0x9
					if (clst <= 1) res = FR_INT_ERR;
 8002ecc:	4985                	li	s3,1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002ece:	5b7d                	li	s6,-1
 8002ed0:	07246063          	bltu	s0,s2,8002f30 <f_open+0x4f4>
 8002ed4:	4401                	li	s0,0
				fp->clust = clst;
 8002ed6:	cc8c                	sw	a1,24(s1)
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002ed8:	ea041ce3          	bnez	s0,8002d90 <f_open+0x354>
 8002edc:	1ff97793          	andi	a5,s2,511
 8002ee0:	cb85                	beqz	a5,8002f10 <f_open+0x4d4>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8002ee2:	4442                	lw	s0,16(sp)
 8002ee4:	8522                	mv	a0,s0
 8002ee6:	fffff097          	auipc	ra,0xfffff
 8002eea:	038080e7          	jalr	56(ra) # 8001f1e <clst2sect>
 8002eee:	da0505e3          	beqz	a0,8002c98 <f_open+0x25c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002ef2:	00995913          	srli	s2,s2,0x9
 8002ef6:	00a90633          	add	a2,s2,a0
 8002efa:	ccd0                	sw	a2,28(s1)
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002efc:	00144503          	lbu	a0,1(s0)
 8002f00:	4685                	li	a3,1
 8002f02:	85d6                	mv	a1,s5
 8002f04:	00001097          	auipc	ra,0x1
 8002f08:	aa4080e7          	jalr	-1372(ra) # 80039a8 <disk_read>
 8002f0c:	ec0518e3          	bnez	a0,8002ddc <f_open+0x3a0>

	LEAVE_FF(fs, res);
}
 8002f10:	50f6                	lw	ra,124(sp)
 8002f12:	5466                	lw	s0,120(sp)
 8002f14:	8552                	mv	a0,s4
 8002f16:	54d6                	lw	s1,116(sp)
 8002f18:	5946                	lw	s2,112(sp)
 8002f1a:	59b6                	lw	s3,108(sp)
 8002f1c:	5a26                	lw	s4,104(sp)
 8002f1e:	5a96                	lw	s5,100(sp)
 8002f20:	5b06                	lw	s6,96(sp)
 8002f22:	4bf6                	lw	s7,92(sp)
 8002f24:	4c66                	lw	s8,88(sp)
 8002f26:	4cd6                	lw	s9,84(sp)
 8002f28:	4d46                	lw	s10,80(sp)
 8002f2a:	4db6                	lw	s11,76(sp)
 8002f2c:	6109                	addi	sp,sp,128
 8002f2e:	8082                	ret
					clst = get_fat(&fp->obj, clst);
 8002f30:	4088                	lw	a0,0(s1)
 8002f32:	40890933          	sub	s2,s2,s0
 8002f36:	fffff097          	auipc	ra,0xfffff
 8002f3a:	6aa080e7          	jalr	1706(ra) # 80025e0 <get_fat.isra.7>
 8002f3e:	85aa                	mv	a1,a0
					if (clst <= 1) res = FR_INT_ERR;
 8002f40:	00a9f663          	bgeu	s3,a0,8002f4c <f_open+0x510>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002f44:	f96516e3          	bne	a0,s6,8002ed0 <f_open+0x494>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002f48:	4405                	li	s0,1
 8002f4a:	b771                	j	8002ed6 <f_open+0x49a>
					if (clst <= 1) res = FR_INT_ERR;
 8002f4c:	4409                	li	s0,2
 8002f4e:	b761                	j	8002ed6 <f_open+0x49a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002f50:	4421                	li	s0,8
 8002f52:	bd3d                	j	8002d90 <f_open+0x354>
					res = FR_NO_FILE;
 8002f54:	4411                	li	s0,4
 8002f56:	bd2d                	j	8002d90 <f_open+0x354>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002f58:	d51588e3          	beq	a1,a7,8002ca8 <f_open+0x26c>
			i = 8; ni = 11;				/* Enter file extension field */
 8002f5c:	4721                	li	a4,8
 8002f5e:	45ad                	li	a1,11
 8002f60:	b379                	j	8002cee <f_open+0x2b2>

08002f62 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002f62:	711d                	addi	sp,sp,-96
 8002f64:	cca2                	sw	s0,88(sp)
 8002f66:	c8ca                	sw	s2,80(sp)
 8002f68:	c6ce                	sw	s3,76(sp)
 8002f6a:	c4d2                	sw	s4,72(sp)
 8002f6c:	c0da                	sw	s6,64(sp)
 8002f6e:	ce86                	sw	ra,92(sp)
 8002f70:	caa6                	sw	s1,84(sp)
 8002f72:	c2d6                	sw	s5,68(sp)
 8002f74:	de5e                	sw	s7,60(sp)
 8002f76:	dc62                	sw	s8,56(sp)
 8002f78:	da66                	sw	s9,52(sp)
 8002f7a:	d86a                	sw	s10,48(sp)
 8002f7c:	d66e                	sw	s11,44(sp)
 8002f7e:	8a2e                	mv	s4,a1
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8002f80:	0006a023          	sw	zero,0(a3)
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002f84:	086c                	addi	a1,sp,28
{
 8002f86:	842a                	mv	s0,a0
 8002f88:	8932                	mv	s2,a2
 8002f8a:	8b36                	mv	s6,a3
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002f8c:	fffff097          	auipc	ra,0xfffff
 8002f90:	fec080e7          	jalr	-20(ra) # 8001f78 <validate>
 8002f94:	89aa                	mv	s3,a0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002f96:	e539                	bnez	a0,8002fe4 <f_write+0x82>
 8002f98:	01144983          	lbu	s3,17(s0)
 8002f9c:	04099463          	bnez	s3,8002fe4 <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002fa0:	01044783          	lbu	a5,16(s0)
 8002fa4:	8b89                	andi	a5,a5,2
 8002fa6:	1c078063          	beqz	a5,8003166 <f_write+0x204>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8002faa:	485c                	lw	a5,20(s0)
 8002fac:	01278733          	add	a4,a5,s2
 8002fb0:	00f77463          	bgeu	a4,a5,8002fb8 <f_write+0x56>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8002fb4:	fff7c913          	not	s2,a5
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002fb8:	20000b93          	li	s7,512
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8002fbc:	02840a93          	addi	s5,s0,40
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8002fc0:	1ff00c13          	li	s8,511
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002fc4:	5cfd                	li	s9,-1
 8002fc6:	a239                	j	80030d4 <f_write+0x172>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002fc8:	4c0c                	lw	a1,24(s0)
 8002fca:	8522                	mv	a0,s0
 8002fcc:	fffff097          	auipc	ra,0xfffff
 8002fd0:	70a080e7          	jalr	1802(ra) # 80026d6 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002fd4:	12051663          	bnez	a0,8003100 <f_write+0x19e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8002fd8:	01044783          	lbu	a5,16(s0)
 8002fdc:	0407e793          	ori	a5,a5,64
 8002fe0:	00f40823          	sb	a5,16(s0)

	LEAVE_FF(fs, FR_OK);
}
 8002fe4:	40f6                	lw	ra,92(sp)
 8002fe6:	4466                	lw	s0,88(sp)
 8002fe8:	854e                	mv	a0,s3
 8002fea:	44d6                	lw	s1,84(sp)
 8002fec:	4946                	lw	s2,80(sp)
 8002fee:	49b6                	lw	s3,76(sp)
 8002ff0:	4a26                	lw	s4,72(sp)
 8002ff2:	4a96                	lw	s5,68(sp)
 8002ff4:	4b06                	lw	s6,64(sp)
 8002ff6:	5bf2                	lw	s7,60(sp)
 8002ff8:	5c62                	lw	s8,56(sp)
 8002ffa:	5cd2                	lw	s9,52(sp)
 8002ffc:	5d42                	lw	s10,48(sp)
 8002ffe:	5db2                	lw	s11,44(sp)
 8003000:	6125                	addi	sp,sp,96
 8003002:	8082                	ret
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003004:	01951763          	bne	a0,s9,8003012 <f_write+0xb0>
 8003008:	4785                	li	a5,1
 800300a:	00f408a3          	sb	a5,17(s0)
 800300e:	4985                	li	s3,1
 8003010:	bfd1                	j	8002fe4 <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003012:	441c                	lw	a5,8(s0)
				fp->clust = clst;			/* Update current cluster */
 8003014:	cc08                	sw	a0,24(s0)
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003016:	e391                	bnez	a5,800301a <f_write+0xb8>
 8003018:	c408                	sw	a0,8(s0)
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800301a:	01040783          	lb	a5,16(s0)
 800301e:	0207d363          	bgez	a5,8003044 <f_write+0xe2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003022:	47f2                	lw	a5,28(sp)
 8003024:	4c50                	lw	a2,28(s0)
 8003026:	4685                	li	a3,1
 8003028:	0017c503          	lbu	a0,1(a5)
 800302c:	85d6                	mv	a1,s5
 800302e:	00001097          	auipc	ra,0x1
 8003032:	a1c080e7          	jalr	-1508(ra) # 8003a4a <disk_write>
 8003036:	f969                	bnez	a0,8003008 <f_write+0xa6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003038:	01044783          	lbu	a5,16(s0)
 800303c:	07f7f793          	andi	a5,a5,127
 8003040:	00f40823          	sb	a5,16(s0)
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003044:	47f2                	lw	a5,28(sp)
 8003046:	4c0c                	lw	a1,24(s0)
 8003048:	853e                	mv	a0,a5
 800304a:	c63e                	sw	a5,12(sp)
 800304c:	fffff097          	auipc	ra,0xfffff
 8003050:	ed2080e7          	jalr	-302(ra) # 8001f1e <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003054:	c94d                	beqz	a0,8003106 <f_write+0x1a4>
			sect += csect;
 8003056:	00ad8d33          	add	s10,s11,a0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800305a:	47b2                	lw	a5,12(sp)
 800305c:	0b2c7a63          	bgeu	s8,s2,8003110 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003060:	00a7d703          	lhu	a4,10(a5)
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003064:	00995493          	srli	s1,s2,0x9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003068:	009d86b3          	add	a3,s11,s1
 800306c:	00d77463          	bgeu	a4,a3,8003074 <f_write+0x112>
					cc = fs->csize - csect;
 8003070:	41b704b3          	sub	s1,a4,s11
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003074:	0017c503          	lbu	a0,1(a5)
 8003078:	86a6                	mv	a3,s1
 800307a:	866a                	mv	a2,s10
 800307c:	85d2                	mv	a1,s4
 800307e:	00001097          	auipc	ra,0x1
 8003082:	9cc080e7          	jalr	-1588(ra) # 8003a4a <disk_write>
 8003086:	f149                	bnez	a0,8003008 <f_write+0xa6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003088:	4c4c                	lw	a1,28(s0)
 800308a:	41a58d33          	sub	s10,a1,s10
 800308e:	029d7263          	bgeu	s10,s1,80030b2 <f_write+0x150>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003092:	0d26                	slli	s10,s10,0x9
 8003094:	20000613          	li	a2,512
 8003098:	01aa05b3          	add	a1,s4,s10
 800309c:	8556                	mv	a0,s5
 800309e:	fffff097          	auipc	ra,0xfffff
 80030a2:	f28080e7          	jalr	-216(ra) # 8001fc6 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80030a6:	01044783          	lbu	a5,16(s0)
 80030aa:	07f7f793          	andi	a5,a5,127
 80030ae:	00f40823          	sb	a5,16(s0)
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80030b2:	04a6                	slli	s1,s1,0x9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80030b4:	000b2783          	lw	a5,0(s6)
 80030b8:	40990933          	sub	s2,s2,s1
 80030bc:	9a26                	add	s4,s4,s1
 80030be:	97a6                	add	a5,a5,s1
 80030c0:	00fb2023          	sw	a5,0(s6)
 80030c4:	485c                	lw	a5,20(s0)
 80030c6:	94be                	add	s1,s1,a5
 80030c8:	445c                	lw	a5,12(s0)
 80030ca:	c844                	sw	s1,20(s0)
 80030cc:	0097f363          	bgeu	a5,s1,80030d2 <f_write+0x170>
 80030d0:	87a6                	mv	a5,s1
 80030d2:	c45c                	sw	a5,12(s0)
	for ( ;  btw;							/* Repeat until all data written */
 80030d4:	f00902e3          	beqz	s2,8002fd8 <f_write+0x76>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80030d8:	485c                	lw	a5,20(s0)
 80030da:	1ff7f713          	andi	a4,a5,511
 80030de:	ef29                	bnez	a4,8003138 <f_write+0x1d6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80030e0:	4772                	lw	a4,28(sp)
 80030e2:	00a75d83          	lhu	s11,10(a4)
 80030e6:	0097d713          	srli	a4,a5,0x9
 80030ea:	1dfd                	addi	s11,s11,-1
 80030ec:	00edfdb3          	and	s11,s11,a4
			if (csect == 0) {				/* On the cluster boundary? */
 80030f0:	f20d95e3          	bnez	s11,800301a <f_write+0xb8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80030f4:	ec079ae3          	bnez	a5,8002fc8 <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80030f8:	4408                	lw	a0,8(s0)
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80030fa:	4581                	li	a1,0
					if (clst == 0) {		/* If no cluster is allocated, */
 80030fc:	ec0507e3          	beqz	a0,8002fca <f_write+0x68>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003100:	4785                	li	a5,1
 8003102:	f0f511e3          	bne	a0,a5,8003004 <f_write+0xa2>
 8003106:	4789                	li	a5,2
 8003108:	00f408a3          	sb	a5,17(s0)
 800310c:	4989                	li	s3,2
 800310e:	bdd9                	j	8002fe4 <f_write+0x82>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003110:	4c58                	lw	a4,28(s0)
 8003112:	03a70163          	beq	a4,s10,8003134 <f_write+0x1d2>
 8003116:	4454                	lw	a3,12(s0)
 8003118:	4858                	lw	a4,20(s0)
 800311a:	00d77d63          	bgeu	a4,a3,8003134 <f_write+0x1d2>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800311e:	0017c503          	lbu	a0,1(a5)
 8003122:	4685                	li	a3,1
 8003124:	866a                	mv	a2,s10
 8003126:	85d6                	mv	a1,s5
 8003128:	00001097          	auipc	ra,0x1
 800312c:	880080e7          	jalr	-1920(ra) # 80039a8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003130:	ec051ce3          	bnez	a0,8003008 <f_write+0xa6>
			fp->sect = sect;
 8003134:	01a42e23          	sw	s10,28(s0)
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003138:	4848                	lw	a0,20(s0)
 800313a:	84ca                	mv	s1,s2
 800313c:	1ff57513          	andi	a0,a0,511
 8003140:	40ab87b3          	sub	a5,s7,a0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003144:	0127f363          	bgeu	a5,s2,800314a <f_write+0x1e8>
 8003148:	84be                	mv	s1,a5
	if (cnt != 0) {
 800314a:	8626                	mv	a2,s1
 800314c:	85d2                	mv	a1,s4
 800314e:	9556                	add	a0,a0,s5
 8003150:	fffff097          	auipc	ra,0xfffff
 8003154:	e76080e7          	jalr	-394(ra) # 8001fc6 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8003158:	01044783          	lbu	a5,16(s0)
 800315c:	f807e793          	ori	a5,a5,-128
 8003160:	00f40823          	sb	a5,16(s0)
 8003164:	bf81                	j	80030b4 <f_write+0x152>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003166:	499d                	li	s3,7
 8003168:	bdb5                	j	8002fe4 <f_write+0x82>

0800316a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800316a:	1101                	addi	sp,sp,-32
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800316c:	006c                	addi	a1,sp,12
{
 800316e:	ca26                	sw	s1,20(sp)
 8003170:	ce06                	sw	ra,28(sp)
 8003172:	cc22                	sw	s0,24(sp)
 8003174:	c84a                	sw	s2,16(sp)
 8003176:	84aa                	mv	s1,a0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003178:	fffff097          	auipc	ra,0xfffff
 800317c:	e00080e7          	jalr	-512(ra) # 8001f78 <validate>
 8003180:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 8003182:	18051563          	bnez	a0,800330c <f_sync+0x1a2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003186:	0104c703          	lbu	a4,16(s1)
 800318a:	04077693          	andi	a3,a4,64
 800318e:	16068f63          	beqz	a3,800330c <f_sync+0x1a2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003192:	0762                	slli	a4,a4,0x18
 8003194:	8761                	srai	a4,a4,0x18
 8003196:	02075663          	bgez	a4,80031c2 <f_sync+0x58>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800319a:	47b2                	lw	a5,12(sp)
 800319c:	4cd0                	lw	a2,28(s1)
 800319e:	4685                	li	a3,1
 80031a0:	0017c503          	lbu	a0,1(a5)
 80031a4:	02848593          	addi	a1,s1,40
 80031a8:	00001097          	auipc	ra,0x1
 80031ac:	8a2080e7          	jalr	-1886(ra) # 8003a4a <disk_write>
 80031b0:	4785                	li	a5,1
 80031b2:	14051d63          	bnez	a0,800330c <f_sync+0x1a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80031b6:	0104c783          	lbu	a5,16(s1)
 80031ba:	07f7f793          	andi	a5,a5,127
 80031be:	00f48823          	sb	a5,16(s1)
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80031c2:	00000097          	auipc	ra,0x0
 80031c6:	1a6080e7          	jalr	422(ra) # 8003368 <get_fattime>
 80031ca:	892a                	mv	s2,a0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80031cc:	508c                	lw	a1,32(s1)
 80031ce:	4532                	lw	a0,12(sp)
 80031d0:	fffff097          	auipc	ra,0xfffff
 80031d4:	e9a080e7          	jalr	-358(ra) # 800206a <move_window>
 80031d8:	87aa                	mv	a5,a0
				if (res == FR_OK) {
 80031da:	12051963          	bnez	a0,800330c <f_sync+0x1a2>
					dir = fp->dir_ptr;
 80031de:	50c0                	lw	s0,36(s1)
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80031e0:	00b44783          	lbu	a5,11(s0)
 80031e4:	0207e793          	ori	a5,a5,32
 80031e8:	00f405a3          	sb	a5,11(s0)
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80031ec:	449c                	lw	a5,8(s1)
 80031ee:	4094                	lw	a3,0(s1)
	*ptr++ = (BYTE)val; val >>= 8;
 80031f0:	01079713          	slli	a4,a5,0x10
 80031f4:	8341                	srli	a4,a4,0x10
 80031f6:	8321                	srli	a4,a4,0x8
	*ptr++ = (BYTE)val;
 80031f8:	00e40da3          	sb	a4,27(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80031fc:	00f40d23          	sb	a5,26(s0)
	if (fs->fs_type == FS_FAT32) {
 8003200:	0006c683          	lbu	a3,0(a3)
 8003204:	470d                	li	a4,3
 8003206:	00e69863          	bne	a3,a4,8003216 <f_sync+0xac>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800320a:	83c1                	srli	a5,a5,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 800320c:	00f40a23          	sb	a5,20(s0)
 8003210:	83a1                	srli	a5,a5,0x8
	*ptr++ = (BYTE)val;
 8003212:	00f40aa3          	sb	a5,21(s0)
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003216:	44cc                	lw	a1,12(s1)
 8003218:	01c40513          	addi	a0,s0,28
 800321c:	fffff097          	auipc	ra,0xfffff
 8003220:	ccc080e7          	jalr	-820(ra) # 8001ee8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003224:	85ca                	mv	a1,s2
 8003226:	01640513          	addi	a0,s0,22
 800322a:	fffff097          	auipc	ra,0xfffff
 800322e:	cbe080e7          	jalr	-834(ra) # 8001ee8 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8003232:	00040923          	sb	zero,18(s0)
	*ptr++ = (BYTE)val;
 8003236:	000409a3          	sb	zero,19(s0)
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800323a:	4432                	lw	s0,12(sp)
 800323c:	4905                	li	s2,1
 800323e:	012401a3          	sb	s2,3(s0)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8003242:	8522                	mv	a0,s0
 8003244:	fffff097          	auipc	ra,0xfffff
 8003248:	dc2080e7          	jalr	-574(ra) # 8002006 <sync_window.part.3>
 800324c:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800324e:	e94d                	bnez	a0,8003300 <f_sync+0x196>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003250:	00044703          	lbu	a4,0(s0)
 8003254:	478d                	li	a5,3
 8003256:	08f71b63          	bne	a4,a5,80032ec <f_sync+0x182>
 800325a:	00444783          	lbu	a5,4(s0)
 800325e:	09279763          	bne	a5,s2,80032ec <f_sync+0x182>
			mem_set(fs->win, 0, sizeof fs->win);
 8003262:	03040913          	addi	s2,s0,48
	BYTE *d = (BYTE*)dst;
 8003266:	23040713          	addi	a4,s0,560
 800326a:	87ca                	mv	a5,s2
		*d++ = (BYTE)val;
 800326c:	0785                	addi	a5,a5,1
 800326e:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8003272:	fee79de3          	bne	a5,a4,800326c <f_sync+0x102>
	*ptr++ = (BYTE)val; val >>= 8;
 8003276:	05500793          	li	a5,85
 800327a:	22f40723          	sb	a5,558(s0)
	*ptr++ = (BYTE)val;
 800327e:	faa00793          	li	a5,-86
 8003282:	22f407a3          	sb	a5,559(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003286:	480c                	lw	a1,16(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003288:	05200793          	li	a5,82
	*ptr++ = (BYTE)val;
 800328c:	04100713          	li	a4,65
	*ptr++ = (BYTE)val; val >>= 8;
 8003290:	07200693          	li	a3,114
 8003294:	02f40823          	sb	a5,48(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003298:	02f408a3          	sb	a5,49(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 800329c:	06100793          	li	a5,97
 80032a0:	02f40923          	sb	a5,50(s0)
	*ptr++ = (BYTE)val;
 80032a4:	02e409a3          	sb	a4,51(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032a8:	20d40a23          	sb	a3,532(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032ac:	20d40aa3          	sb	a3,533(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032b0:	20e40b23          	sb	a4,534(s0)
	*ptr++ = (BYTE)val;
 80032b4:	20f40ba3          	sb	a5,535(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80032b8:	21840513          	addi	a0,s0,536
 80032bc:	fffff097          	auipc	ra,0xfffff
 80032c0:	c2c080e7          	jalr	-980(ra) # 8001ee8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80032c4:	444c                	lw	a1,12(s0)
 80032c6:	21c40513          	addi	a0,s0,540
 80032ca:	fffff097          	auipc	ra,0xfffff
 80032ce:	c1e080e7          	jalr	-994(ra) # 8001ee8 <st_dword>
			fs->winsect = fs->volbase + 1;
 80032d2:	4c50                	lw	a2,28(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80032d4:	00144503          	lbu	a0,1(s0)
 80032d8:	4685                	li	a3,1
			fs->winsect = fs->volbase + 1;
 80032da:	0605                	addi	a2,a2,1
 80032dc:	d450                	sw	a2,44(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80032de:	85ca                	mv	a1,s2
 80032e0:	00000097          	auipc	ra,0x0
 80032e4:	76a080e7          	jalr	1898(ra) # 8003a4a <disk_write>
			fs->fsi_flag = 0;
 80032e8:	00040223          	sb	zero,4(s0)
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80032ec:	00144503          	lbu	a0,1(s0)
 80032f0:	4601                	li	a2,0
 80032f2:	4581                	li	a1,0
 80032f4:	00001097          	auipc	ra,0x1
 80032f8:	85e080e7          	jalr	-1954(ra) # 8003b52 <disk_ioctl>
 80032fc:	00a037b3          	snez	a5,a0
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003300:	0104c703          	lbu	a4,16(s1)
 8003304:	fbf77713          	andi	a4,a4,-65
 8003308:	00e48823          	sb	a4,16(s1)
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800330c:	40f2                	lw	ra,28(sp)
 800330e:	4462                	lw	s0,24(sp)
 8003310:	44d2                	lw	s1,20(sp)
 8003312:	4942                	lw	s2,16(sp)
 8003314:	853e                	mv	a0,a5
 8003316:	6105                	addi	sp,sp,32
 8003318:	8082                	ret

0800331a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800331a:	1101                	addi	sp,sp,-32
 800331c:	cc22                	sw	s0,24(sp)
 800331e:	ce06                	sw	ra,28(sp)
 8003320:	842a                	mv	s0,a0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003322:	00000097          	auipc	ra,0x0
 8003326:	e48080e7          	jalr	-440(ra) # 800316a <f_sync>
	if (res == FR_OK)
 800332a:	e911                	bnez	a0,800333e <f_close+0x24>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800332c:	006c                	addi	a1,sp,12
 800332e:	8522                	mv	a0,s0
 8003330:	fffff097          	auipc	ra,0xfffff
 8003334:	c48080e7          	jalr	-952(ra) # 8001f78 <validate>
		if (res == FR_OK) {
 8003338:	e119                	bnez	a0,800333e <f_close+0x24>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800333a:	00042023          	sw	zero,0(s0)
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800333e:	40f2                	lw	ra,28(sp)
 8003340:	4462                	lw	s0,24(sp)
 8003342:	6105                	addi	sp,sp,32
 8003344:	8082                	ret

08003346 <set_fattime>:
#include "tf_card.h"

fat_time_t time = {.year = 2020, .month = 3, .day = 6, .hour = 0, .minute = 0};

void set_fattime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second){
    time.year = year;
 8003346:	20000837          	lui	a6,0x20000
 800334a:	4f080813          	addi	a6,a6,1264 # 200004f0 <time>
 800334e:	00a81023          	sh	a0,0(a6)
    time.month = month;
 8003352:	00b80123          	sb	a1,2(a6)
    time.day = day;
 8003356:	00c801a3          	sb	a2,3(a6)
    time.hour = hour;
 800335a:	00d80223          	sb	a3,4(a6)
    time.minute = minute;
 800335e:	00e802a3          	sb	a4,5(a6)
    time.second = second;
 8003362:	00f80323          	sb	a5,6(a6)
}
 8003366:	8082                	ret

08003368 <get_fattime>:

DWORD get_fattime (void){
	return
		(((uint8_t)(time.year - 1980))  << 25) |
		(time.month	                    << 21) |
 8003368:	20000737          	lui	a4,0x20000
 800336c:	4f070713          	addi	a4,a4,1264 # 200004f0 <time>
 8003370:	00274783          	lbu	a5,2(a4)
		(time.day	                    << 16) |
 8003374:	00374503          	lbu	a0,3(a4)
		(time.month	                    << 21) |
 8003378:	07d6                	slli	a5,a5,0x15
		(time.day	                    << 16) |
 800337a:	0542                	slli	a0,a0,0x10
		(time.hour	                    << 11) |
		(time.minute	                <<  5) |
 800337c:	8fc9                	or	a5,a5,a0
		(time.second	                <<  0);
 800337e:	00674503          	lbu	a0,6(a4)
		(time.minute	                <<  5) |
 8003382:	8fc9                	or	a5,a5,a0
		(time.hour	                    << 11) |
 8003384:	00474503          	lbu	a0,4(a4)
 8003388:	052e                	slli	a0,a0,0xb
		(time.minute	                <<  5) |
 800338a:	8fc9                	or	a5,a5,a0
 800338c:	00574503          	lbu	a0,5(a4)
 8003390:	0516                	slli	a0,a0,0x5
 8003392:	8fc9                	or	a5,a5,a0
		(((uint8_t)(time.year - 1980))  << 25) |
 8003394:	00074503          	lbu	a0,0(a4)
 8003398:	04450513          	addi	a0,a0,68
 800339c:	0566                	slli	a0,a0,0x19
 800339e:	8d5d                	or	a0,a0,a5
 80033a0:	8082                	ret

080033a2 <xchg_spi>:

/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
){
 80033a2:	1141                	addi	sp,sp,-16
 80033a4:	c422                	sw	s0,8(sp)
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80033a6:	40004437          	lui	s0,0x40004
){
 80033aa:	c226                	sw	s1,4(sp)
 80033ac:	c04a                	sw	s2,0(sp)
 80033ae:	c606                	sw	ra,12(sp)
 80033b0:	84aa                	mv	s1,a0
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80033b2:	80040913          	addi	s2,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80033b6:	4589                	li	a1,2
 80033b8:	854a                	mv	a0,s2
 80033ba:	ffffe097          	auipc	ra,0xffffe
 80033be:	f08080e7          	jalr	-248(ra) # 80012c2 <spi_i2s_flag_get>
 80033c2:	d975                	beqz	a0,80033b6 <xchg_spi+0x14>
        spi_i2s_data_transmit(SPI1, dat);
 80033c4:	85a6                	mv	a1,s1
 80033c6:	80040513          	addi	a0,s0,-2048
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80033ca:	40004437          	lui	s0,0x40004
        spi_i2s_data_transmit(SPI1, dat);
 80033ce:	ffffe097          	auipc	ra,0xffffe
 80033d2:	edc080e7          	jalr	-292(ra) # 80012aa <spi_i2s_data_transmit>
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80033d6:	80040493          	addi	s1,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80033da:	4585                	li	a1,1
 80033dc:	8526                	mv	a0,s1
 80033de:	ffffe097          	auipc	ra,0xffffe
 80033e2:	ee4080e7          	jalr	-284(ra) # 80012c2 <spi_i2s_flag_get>
 80033e6:	d975                	beqz	a0,80033da <xchg_spi+0x38>
        return(spi_i2s_data_receive(SPI1));     /* Return received byte */
 80033e8:	80040513          	addi	a0,s0,-2048
 80033ec:	ffffe097          	auipc	ra,0xffffe
 80033f0:	ec2080e7          	jalr	-318(ra) # 80012ae <spi_i2s_data_receive>
}
 80033f4:	40b2                	lw	ra,12(sp)
 80033f6:	4422                	lw	s0,8(sp)
 80033f8:	4492                	lw	s1,4(sp)
 80033fa:	4902                	lw	s2,0(sp)
 80033fc:	0ff57513          	andi	a0,a0,255
 8003400:	0141                	addi	sp,sp,16
 8003402:	8082                	ret

08003404 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void){
 8003404:	1141                	addi	sp,sp,-16
	CS_HIGH();		/* Set CS# high */
 8003406:	40011537          	lui	a0,0x40011
 800340a:	6591                	lui	a1,0x4
void deselect (void){
 800340c:	c606                	sw	ra,12(sp)
	CS_HIGH();		/* Set CS# high */
 800340e:	ffffe097          	auipc	ra,0xffffe
 8003412:	c70080e7          	jalr	-912(ra) # 800107e <gpio_bit_set>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
}
 8003416:	40b2                	lw	ra,12(sp)
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003418:	0ff00513          	li	a0,255
}
 800341c:	0141                	addi	sp,sp,16
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800341e:	00000317          	auipc	t1,0x0
 8003422:	f8430067          	jr	-124(t1) # 80033a2 <xchg_spi>

08003426 <wait_ready>:
){
 8003426:	7139                	addi	sp,sp,-64
 8003428:	da26                	sw	s1,52(sp)
 800342a:	d05a                	sw	s6,32(sp)
 800342c:	ce5e                	sw	s7,28(sp)
 800342e:	cc62                	sw	s8,24(sp)
 8003430:	ca66                	sw	s9,20(sp)
 8003432:	c86a                	sw	s10,16(sp)
 8003434:	de06                	sw	ra,60(sp)
 8003436:	dc22                	sw	s0,56(sp)
 8003438:	d84a                	sw	s2,48(sp)
 800343a:	d64e                	sw	s3,44(sp)
 800343c:	d452                	sw	s4,40(sp)
 800343e:	d256                	sw	s5,36(sp)
 8003440:	84aa                	mv	s1,a0
	start_mtime = get_timer_value();
 8003442:	ffffe097          	auipc	ra,0xffffe
 8003446:	7ce080e7          	jalr	1998(ra) # 8001c10 <get_timer_value>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800344a:	080007b7          	lui	a5,0x8000
 800344e:	2e07ab03          	lw	s6,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8003452:	2e47ab83          	lw	s7,740(a5)
	start_mtime = get_timer_value();
 8003456:	8caa                	mv	s9,a0
 8003458:	8d2e                	mv	s10,a1
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800345a:	20000c37          	lui	s8,0x20000
		delta_mtime = get_timer_value();
 800345e:	ffffe097          	auipc	ra,0xffffe
 8003462:	7b2080e7          	jalr	1970(ra) # 8001c10 <get_timer_value>
		delta_mtime -=  start_mtime;
 8003466:	41950933          	sub	s2,a0,s9
 800346a:	01253533          	sltu	a0,a0,s2
 800346e:	41a585b3          	sub	a1,a1,s10
 8003472:	8d89                	sub	a1,a1,a0
		d = xchg_spi(0xFF);
 8003474:	0ff00513          	li	a0,255
		delta_mtime -=  start_mtime;
 8003478:	c62e                	sw	a1,12(sp)
		d = xchg_spi(0xFF);
 800347a:	00000097          	auipc	ra,0x0
 800347e:	f28080e7          	jalr	-216(ra) # 80033a2 <xchg_spi>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003482:	0ff00793          	li	a5,255
		d = xchg_spi(0xFF);
 8003486:	842a                	mv	s0,a0
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003488:	04f50f63          	beq	a0,a5,80034e6 <wait_ready+0xc0>
 800348c:	45b2                	lw	a1,12(sp)
 800348e:	854a                	mv	a0,s2
 8003490:	00004097          	auipc	ra,0x4
 8003494:	a56080e7          	jalr	-1450(ra) # 8006ee6 <__floatundidf>
 8003498:	892a                	mv	s2,a0
 800349a:	4e8c2503          	lw	a0,1256(s8) # 200004e8 <SystemCoreClock>
 800349e:	89ae                	mv	s3,a1
 80034a0:	00004097          	auipc	ra,0x4
 80034a4:	9f0080e7          	jalr	-1552(ra) # 8006e90 <__floatunsidf>
 80034a8:	865a                	mv	a2,s6
 80034aa:	86de                	mv	a3,s7
 80034ac:	00003097          	auipc	ra,0x3
 80034b0:	f4a080e7          	jalr	-182(ra) # 80063f6 <__divdf3>
 80034b4:	8a2a                	mv	s4,a0
 80034b6:	8526                	mv	a0,s1
 80034b8:	8aae                	mv	s5,a1
 80034ba:	00004097          	auipc	ra,0x4
 80034be:	9d6080e7          	jalr	-1578(ra) # 8006e90 <__floatunsidf>
 80034c2:	862a                	mv	a2,a0
 80034c4:	86ae                	mv	a3,a1
 80034c6:	8552                	mv	a0,s4
 80034c8:	85d6                	mv	a1,s5
 80034ca:	00003097          	auipc	ra,0x3
 80034ce:	516080e7          	jalr	1302(ra) # 80069e0 <__muldf3>
 80034d2:	862a                	mv	a2,a0
 80034d4:	86ae                	mv	a3,a1
 80034d6:	854a                	mv	a0,s2
 80034d8:	85ce                	mv	a1,s3
 80034da:	00003097          	auipc	ra,0x3
 80034de:	462080e7          	jalr	1122(ra) # 800693c <__ledf2>
 80034e2:	f6054ee3          	bltz	a0,800345e <wait_ready+0x38>
	return (d == 0xFF) ? 1 : 0; 
 80034e6:	f0140513          	addi	a0,s0,-255
}
 80034ea:	50f2                	lw	ra,60(sp)
 80034ec:	5462                	lw	s0,56(sp)
 80034ee:	54d2                	lw	s1,52(sp)
 80034f0:	5942                	lw	s2,48(sp)
 80034f2:	59b2                	lw	s3,44(sp)
 80034f4:	5a22                	lw	s4,40(sp)
 80034f6:	5a92                	lw	s5,36(sp)
 80034f8:	5b02                	lw	s6,32(sp)
 80034fa:	4bf2                	lw	s7,28(sp)
 80034fc:	4c62                	lw	s8,24(sp)
 80034fe:	4cd2                	lw	s9,20(sp)
 8003500:	4d42                	lw	s10,16(sp)
 8003502:	00153513          	seqz	a0,a0
 8003506:	6121                	addi	sp,sp,64
 8003508:	8082                	ret

0800350a <_select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int _select (void)	/* 1:OK, 0:Timeout */
{
 800350a:	1101                	addi	sp,sp,-32
	CS_LOW();		/* Set CS# low */
 800350c:	6591                	lui	a1,0x4
 800350e:	40011537          	lui	a0,0x40011
{
 8003512:	ce06                	sw	ra,28(sp)
	CS_LOW();		/* Set CS# low */
 8003514:	ffffe097          	auipc	ra,0xffffe
 8003518:	b6e080e7          	jalr	-1170(ra) # 8001082 <gpio_bit_reset>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800351c:	0ff00513          	li	a0,255
 8003520:	00000097          	auipc	ra,0x0
 8003524:	e82080e7          	jalr	-382(ra) # 80033a2 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003528:	1f400513          	li	a0,500
 800352c:	00000097          	auipc	ra,0x0
 8003530:	efa080e7          	jalr	-262(ra) # 8003426 <wait_ready>
 8003534:	c62a                	sw	a0,12(sp)
 8003536:	e909                	bnez	a0,8003548 <_select+0x3e>

	deselect();
 8003538:	00000097          	auipc	ra,0x0
 800353c:	ecc080e7          	jalr	-308(ra) # 8003404 <deselect>
	return 0;	/* Timeout */
 8003540:	4532                	lw	a0,12(sp)
}
 8003542:	40f2                	lw	ra,28(sp)
 8003544:	6105                	addi	sp,sp,32
 8003546:	8082                	ret
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003548:	4505                	li	a0,1
 800354a:	bfe5                	j	8003542 <_select+0x38>

0800354c <send_cmd>:

static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
){
 800354c:	1141                	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800354e:	01851793          	slli	a5,a0,0x18
){
 8003552:	c422                	sw	s0,8(sp)
 8003554:	c226                	sw	s1,4(sp)
 8003556:	c606                	sw	ra,12(sp)
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003558:	87e1                	srai	a5,a5,0x18
){
 800355a:	842a                	mv	s0,a0
 800355c:	84ae                	mv	s1,a1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800355e:	0007df63          	bgez	a5,800357c <send_cmd+0x30>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8003562:	4581                	li	a1,0
 8003564:	03700513          	li	a0,55
 8003568:	00000097          	auipc	ra,0x0
 800356c:	fe4080e7          	jalr	-28(ra) # 800354c <send_cmd>
		if (res > 1) return res;
 8003570:	4705                	li	a4,1
		res = send_cmd(CMD55, 0);
 8003572:	87aa                	mv	a5,a0
		if (res > 1) return res;
 8003574:	0aa76c63          	bltu	a4,a0,800362c <send_cmd+0xe0>
		cmd &= 0x7F;
 8003578:	07f47413          	andi	s0,s0,127
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800357c:	47b1                	li	a5,12
 800357e:	08f41c63          	bne	s0,a5,8003616 <send_cmd+0xca>
		deselect();
		if (!_select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003582:	04046513          	ori	a0,s0,64
 8003586:	00000097          	auipc	ra,0x0
 800358a:	e1c080e7          	jalr	-484(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800358e:	0184d513          	srli	a0,s1,0x18
 8003592:	00000097          	auipc	ra,0x0
 8003596:	e10080e7          	jalr	-496(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800359a:	0104d513          	srli	a0,s1,0x10
 800359e:	0ff57513          	andi	a0,a0,255
 80035a2:	00000097          	auipc	ra,0x0
 80035a6:	e00080e7          	jalr	-512(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80035aa:	0084d513          	srli	a0,s1,0x8
 80035ae:	0ff57513          	andi	a0,a0,255
 80035b2:	00000097          	auipc	ra,0x0
 80035b6:	df0080e7          	jalr	-528(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80035ba:	0ff4f513          	andi	a0,s1,255
 80035be:	00000097          	auipc	ra,0x0
 80035c2:	de4080e7          	jalr	-540(ra) # 80033a2 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80035c6:	09500513          	li	a0,149
 80035ca:	c419                	beqz	s0,80035d8 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035cc:	47a1                	li	a5,8
	n = 0x01;							/* Dummy CRC + Stop */
 80035ce:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035d0:	00f41463          	bne	s0,a5,80035d8 <send_cmd+0x8c>
 80035d4:	08700513          	li	a0,135
	xchg_spi(n);
 80035d8:	00000097          	auipc	ra,0x0
 80035dc:	dca080e7          	jalr	-566(ra) # 80033a2 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80035e0:	47b1                	li	a5,12
 80035e2:	00f41863          	bne	s0,a5,80035f2 <send_cmd+0xa6>
 80035e6:	0ff00513          	li	a0,255
 80035ea:	00000097          	auipc	ra,0x0
 80035ee:	db8080e7          	jalr	-584(ra) # 80033a2 <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035f2:	4429                	li	s0,10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 80035f4:	0ff00513          	li	a0,255
 80035f8:	00000097          	auipc	ra,0x0
 80035fc:	daa080e7          	jalr	-598(ra) # 80033a2 <xchg_spi>
	} while ((res & 0x80) && --n);
 8003600:	01851713          	slli	a4,a0,0x18
 8003604:	8761                	srai	a4,a4,0x18
		res = xchg_spi(0xFF);
 8003606:	87aa                	mv	a5,a0
	} while ((res & 0x80) && --n);
 8003608:	02075263          	bgez	a4,800362c <send_cmd+0xe0>
 800360c:	147d                	addi	s0,s0,-1
 800360e:	0ff47413          	andi	s0,s0,255
 8003612:	f06d                	bnez	s0,80035f4 <send_cmd+0xa8>
 8003614:	a821                	j	800362c <send_cmd+0xe0>
		deselect();
 8003616:	00000097          	auipc	ra,0x0
 800361a:	dee080e7          	jalr	-530(ra) # 8003404 <deselect>
		if (!_select()) return 0xFF;
 800361e:	00000097          	auipc	ra,0x0
 8003622:	eec080e7          	jalr	-276(ra) # 800350a <_select>
 8003626:	0ff00793          	li	a5,255
 800362a:	fd21                	bnez	a0,8003582 <send_cmd+0x36>

	return res;							/* Return received response */
}
 800362c:	40b2                	lw	ra,12(sp)
 800362e:	4422                	lw	s0,8(sp)
 8003630:	4492                	lw	s1,4(sp)
 8003632:	853e                	mv	a0,a5
 8003634:	0141                	addi	sp,sp,16
 8003636:	8082                	ret

08003638 <rcvr_datablock>:
){
 8003638:	1141                	addi	sp,sp,-16
 800363a:	c422                	sw	s0,8(sp)
 800363c:	842a                	mv	s0,a0
	tf_start_timer(200);
 800363e:	0c800513          	li	a0,200
){
 8003642:	c226                	sw	s1,4(sp)
 8003644:	c606                	sw	ra,12(sp)
 8003646:	84ae                	mv	s1,a1
	tf_start_timer(200);
 8003648:	00000097          	auipc	ra,0x0
 800364c:	728080e7          	jalr	1832(ra) # 8003d70 <tf_start_timer>
		token = xchg_spi(0xFF);
 8003650:	0ff00513          	li	a0,255
 8003654:	00000097          	auipc	ra,0x0
 8003658:	d4e080e7          	jalr	-690(ra) # 80033a2 <xchg_spi>
	} while ((token == 0xFF) && tf_timer_done());
 800365c:	0ff00793          	li	a5,255
 8003660:	00f51d63          	bne	a0,a5,800367a <rcvr_datablock+0x42>
 8003664:	00000097          	auipc	ra,0x0
 8003668:	766080e7          	jalr	1894(ra) # 8003dca <tf_timer_done>
 800366c:	f175                	bnez	a0,8003650 <rcvr_datablock+0x18>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800366e:	4501                	li	a0,0
}
 8003670:	40b2                	lw	ra,12(sp)
 8003672:	4422                	lw	s0,8(sp)
 8003674:	4492                	lw	s1,4(sp)
 8003676:	0141                	addi	sp,sp,16
 8003678:	8082                	ret
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800367a:	0fe00793          	li	a5,254
 800367e:	fef518e3          	bne	a0,a5,800366e <rcvr_datablock+0x36>
 8003682:	0485                	addi	s1,s1,1
 8003684:	94a2                	add	s1,s1,s0
		*buff = xchg_spi(0xff);
 8003686:	0ff00513          	li	a0,255
 800368a:	00000097          	auipc	ra,0x0
 800368e:	d18080e7          	jalr	-744(ra) # 80033a2 <xchg_spi>
 8003692:	00a40023          	sb	a0,0(s0)
		buff++;
 8003696:	0405                	addi	s0,s0,1
	} while (btr--);
 8003698:	fe8497e3          	bne	s1,s0,8003686 <rcvr_datablock+0x4e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800369c:	0ff00513          	li	a0,255
 80036a0:	00000097          	auipc	ra,0x0
 80036a4:	d02080e7          	jalr	-766(ra) # 80033a2 <xchg_spi>
 80036a8:	0ff00513          	li	a0,255
 80036ac:	00000097          	auipc	ra,0x0
 80036b0:	cf6080e7          	jalr	-778(ra) # 80033a2 <xchg_spi>
 80036b4:	4505                	li	a0,1
 80036b6:	bf6d                	j	8003670 <rcvr_datablock+0x38>

080036b8 <xmit_datablock.part.1>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 80036b8:	1141                	addi	sp,sp,-16
 80036ba:	c422                	sw	s0,8(sp)
 80036bc:	c226                	sw	s1,4(sp)
 80036be:	c04a                	sw	s2,0(sp)
 80036c0:	c606                	sw	ra,12(sp)
 80036c2:	892a                	mv	s2,a0
	for(UINT i=0; i<btx; i++) {
 80036c4:	4401                	li	s0,0
 80036c6:	20000493          	li	s1,512
		xchg_spi(*(buff+i));
 80036ca:	008907b3          	add	a5,s2,s0
 80036ce:	0007c503          	lbu	a0,0(a5)
	for(UINT i=0; i<btx; i++) {
 80036d2:	0405                	addi	s0,s0,1
		xchg_spi(*(buff+i));
 80036d4:	00000097          	auipc	ra,0x0
 80036d8:	cce080e7          	jalr	-818(ra) # 80033a2 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80036dc:	fe9417e3          	bne	s0,s1,80036ca <xmit_datablock.part.1+0x12>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80036e0:	0ff00513          	li	a0,255
 80036e4:	00000097          	auipc	ra,0x0
 80036e8:	cbe080e7          	jalr	-834(ra) # 80033a2 <xchg_spi>
 80036ec:	0ff00513          	li	a0,255
 80036f0:	00000097          	auipc	ra,0x0
 80036f4:	cb2080e7          	jalr	-846(ra) # 80033a2 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80036f8:	0ff00513          	li	a0,255
 80036fc:	00000097          	auipc	ra,0x0
 8003700:	ca6080e7          	jalr	-858(ra) # 80033a2 <xchg_spi>
}
 8003704:	40b2                	lw	ra,12(sp)
 8003706:	4422                	lw	s0,8(sp)
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003708:	897d                	andi	a0,a0,31
 800370a:	156d                	addi	a0,a0,-5
}
 800370c:	4492                	lw	s1,4(sp)
 800370e:	4902                	lw	s2,0(sp)
 8003710:	00153513          	seqz	a0,a0
 8003714:	0141                	addi	sp,sp,16
 8003716:	8082                	ret

08003718 <disk_initialize>:

DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003718:	26051c63          	bnez	a0,8003990 <disk_initialize+0x278>
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 800371c:	7179                	addi	sp,sp,-48
    rcu_periph_clock_enable(RCU_GPIOB);
 800371e:	60300513          	li	a0,1539
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 8003722:	d606                	sw	ra,44(sp)
 8003724:	d422                	sw	s0,40(sp)
 8003726:	d226                	sw	s1,36(sp)
 8003728:	d04a                	sw	s2,32(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 800372a:	ffffe097          	auipc	ra,0xffffe
 800372e:	966080e7          	jalr	-1690(ra) # 8001090 <rcu_periph_clock_enable>
	rcu_periph_clock_enable(RCU_GPIOC);
 8003732:	60400513          	li	a0,1540
 8003736:	ffffe097          	auipc	ra,0xffffe
 800373a:	95a080e7          	jalr	-1702(ra) # 8001090 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_SPI1);
 800373e:	70e00513          	li	a0,1806
 8003742:	ffffe097          	auipc	ra,0xffffe
 8003746:	94e080e7          	jalr	-1714(ra) # 8001090 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_13 | GPIO_PIN_15);
 800374a:	40011437          	lui	s0,0x40011
 800374e:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 8003752:	66a9                	lui	a3,0xa
 8003754:	460d                	li	a2,3
 8003756:	45e1                	li	a1,24
 8003758:	ffffe097          	auipc	ra,0xffffe
 800375c:	882080e7          	jalr	-1918(ra) # 8000fda <gpio_init>
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 8003760:	c0040513          	addi	a0,s0,-1024
 8003764:	6691                	lui	a3,0x4
 8003766:	460d                	li	a2,3
 8003768:	4591                	li	a1,4
 800376a:	ffffe097          	auipc	ra,0xffffe
 800376e:	870080e7          	jalr	-1936(ra) # 8000fda <gpio_init>
    gpio_init(GPIOC, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 8003772:	6691                	lui	a3,0x4
 8003774:	460d                	li	a2,3
 8003776:	45c1                	li	a1,16
 8003778:	40011537          	lui	a0,0x40011
 800377c:	ffffe097          	auipc	ra,0xffffe
 8003780:	85e080e7          	jalr	-1954(ra) # 8000fda <gpio_init>
    CS_HIGH();
 8003784:	6591                	lui	a1,0x4
 8003786:	40011537          	lui	a0,0x40011
 800378a:	ffffe097          	auipc	ra,0xffffe
 800378e:	8f4080e7          	jalr	-1804(ra) # 800107e <gpio_bit_set>
    spi_init_struct.device_mode          = SPI_MASTER;
 8003792:	10400793          	li	a5,260
 8003796:	c23e                	sw	a5,4(sp)
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 8003798:	478d                	li	a5,3
    spi_init(SPI1, &spi_init_struct);
 800379a:	400044b7          	lui	s1,0x40004
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 800379e:	cc3e                	sw	a5,24(sp)
    spi_init_struct.nss                  = SPI_NSS_SOFT;
 80037a0:	20000793          	li	a5,512
 80037a4:	c83e                	sw	a5,16(sp)
    spi_init(SPI1, &spi_init_struct);
 80037a6:	004c                	addi	a1,sp,4
    spi_init_struct.prescale             = SPI_PSC_64;
 80037a8:	02800793          	li	a5,40
    spi_init(SPI1, &spi_init_struct);
 80037ac:	80048513          	addi	a0,s1,-2048 # 40003800 <_sp+0x1fffb800>
    spi_init_struct.prescale             = SPI_PSC_64;
 80037b0:	ce3e                	sw	a5,28(sp)
    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;
 80037b2:	c402                	sw	zero,8(sp)
    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;
 80037b4:	c602                	sw	zero,12(sp)
    spi_init_struct.endian               = SPI_ENDIAN_MSB;
 80037b6:	ca02                	sw	zero,20(sp)
    spi_init(SPI1, &spi_init_struct);
 80037b8:	ffffe097          	auipc	ra,0xffffe
 80037bc:	ab2080e7          	jalr	-1358(ra) # 800126a <spi_init>
    spi_crc_polynomial_set(SPI1,7);
 80037c0:	459d                	li	a1,7
 80037c2:	80048513          	addi	a0,s1,-2048
 80037c6:	ffffe097          	auipc	ra,0xffffe
 80037ca:	af0080e7          	jalr	-1296(ra) # 80012b6 <spi_crc_polynomial_set>
    spi_enable(SPI1);
 80037ce:	80048513          	addi	a0,s1,-2048
 80037d2:	ffffe097          	auipc	ra,0xffffe
 80037d6:	ace080e7          	jalr	-1330(ra) # 80012a0 <spi_enable>
	init_spi();							/* Initialize SPI */
    delay_1ms(10);
 80037da:	4529                	li	a0,10
 80037dc:	00000097          	auipc	ra,0x0
 80037e0:	62c080e7          	jalr	1580(ra) # 8003e08 <delay_1ms>
    //init_timer2();

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80037e4:	20000437          	lui	s0,0x20000
 80037e8:	4f840713          	addi	a4,s0,1272 # 200004f8 <Stat>
 80037ec:	00074783          	lbu	a5,0(a4)
 80037f0:	4f840413          	addi	s0,s0,1272
 80037f4:	8b89                	andi	a5,a5,2
 80037f6:	cb99                	beqz	a5,800380c <disk_initialize+0xf4>
 80037f8:	00074503          	lbu	a0,0(a4)
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
}
 80037fc:	50b2                	lw	ra,44(sp)
 80037fe:	5422                	lw	s0,40(sp)
 8003800:	5492                	lw	s1,36(sp)
 8003802:	5902                	lw	s2,32(sp)
	return Stat;
 8003804:	0ff57513          	andi	a0,a0,255
}
 8003808:	6145                	addi	sp,sp,48
 800380a:	8082                	ret
	FCLK_SLOW();
 800380c:	8004a783          	lw	a5,-2048(s1)
	CS_LOW();
 8003810:	6591                	lui	a1,0x4
 8003812:	40011537          	lui	a0,0x40011
	FCLK_SLOW();
 8003816:	fc77f793          	andi	a5,a5,-57
 800381a:	0287e793          	ori	a5,a5,40
 800381e:	80f4a023          	sw	a5,-2048(s1)
	CS_LOW();
 8003822:	ffffe097          	auipc	ra,0xffffe
 8003826:	860080e7          	jalr	-1952(ra) # 8001082 <gpio_bit_reset>
 800382a:	44a9                	li	s1,10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800382c:	14fd                	addi	s1,s1,-1
 800382e:	0ff00513          	li	a0,255
 8003832:	0ff4f493          	andi	s1,s1,255
 8003836:	00000097          	auipc	ra,0x0
 800383a:	b6c080e7          	jalr	-1172(ra) # 80033a2 <xchg_spi>
 800383e:	f4fd                	bnez	s1,800382c <disk_initialize+0x114>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003840:	4581                	li	a1,0
 8003842:	4501                	li	a0,0
 8003844:	00000097          	auipc	ra,0x0
 8003848:	d08080e7          	jalr	-760(ra) # 800354c <send_cmd>
 800384c:	4785                	li	a5,1
 800384e:	892a                	mv	s2,a0
 8003850:	12f51e63          	bne	a0,a5,800398c <disk_initialize+0x274>
		tf_start_timer(1000);						/* Initialization timeout = 1 sec */
 8003854:	3e800513          	li	a0,1000
 8003858:	00000097          	auipc	ra,0x0
 800385c:	518080e7          	jalr	1304(ra) # 8003d70 <tf_start_timer>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003860:	1aa00593          	li	a1,426
 8003864:	4521                	li	a0,8
 8003866:	00000097          	auipc	ra,0x0
 800386a:	ce6080e7          	jalr	-794(ra) # 800354c <send_cmd>
 800386e:	0d251963          	bne	a0,s2,8003940 <disk_initialize+0x228>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003872:	4911                	li	s2,4
 8003874:	0ff00513          	li	a0,255
 8003878:	00000097          	auipc	ra,0x0
 800387c:	b2a080e7          	jalr	-1238(ra) # 80033a2 <xchg_spi>
 8003880:	005c                	addi	a5,sp,4
 8003882:	97a6                	add	a5,a5,s1
 8003884:	00a78023          	sb	a0,0(a5)
 8003888:	0485                	addi	s1,s1,1
 800388a:	ff2495e3          	bne	s1,s2,8003874 <disk_initialize+0x15c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800388e:	00614703          	lbu	a4,6(sp)
 8003892:	4785                	li	a5,1
 8003894:	0ef71c63          	bne	a4,a5,800398c <disk_initialize+0x274>
 8003898:	00714703          	lbu	a4,7(sp)
 800389c:	0aa00793          	li	a5,170
 80038a0:	0ef71663          	bne	a4,a5,800398c <disk_initialize+0x274>
				while (tf_timer_done() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80038a4:	00000097          	auipc	ra,0x0
 80038a8:	526080e7          	jalr	1318(ra) # 8003dca <tf_timer_done>
 80038ac:	c911                	beqz	a0,80038c0 <disk_initialize+0x1a8>
 80038ae:	400005b7          	lui	a1,0x40000
 80038b2:	0a900513          	li	a0,169
 80038b6:	00000097          	auipc	ra,0x0
 80038ba:	c96080e7          	jalr	-874(ra) # 800354c <send_cmd>
 80038be:	f17d                	bnez	a0,80038a4 <disk_initialize+0x18c>
				if (tf_timer_done() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80038c0:	00000097          	auipc	ra,0x0
 80038c4:	50a080e7          	jalr	1290(ra) # 8003dca <tf_timer_done>
 80038c8:	c171                	beqz	a0,800398c <disk_initialize+0x274>
 80038ca:	4581                	li	a1,0
 80038cc:	03a00513          	li	a0,58
 80038d0:	00000097          	auipc	ra,0x0
 80038d4:	c7c080e7          	jalr	-900(ra) # 800354c <send_cmd>
 80038d8:	e955                	bnez	a0,800398c <disk_initialize+0x274>
 80038da:	4481                	li	s1,0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80038dc:	4911                	li	s2,4
 80038de:	0ff00513          	li	a0,255
 80038e2:	00000097          	auipc	ra,0x0
 80038e6:	ac0080e7          	jalr	-1344(ra) # 80033a2 <xchg_spi>
 80038ea:	005c                	addi	a5,sp,4
 80038ec:	97a6                	add	a5,a5,s1
 80038ee:	00a78023          	sb	a0,0(a5)
 80038f2:	0485                	addi	s1,s1,1
 80038f4:	ff2495e3          	bne	s1,s2,80038de <disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80038f8:	00414783          	lbu	a5,4(sp)
 80038fc:	44b1                	li	s1,12
 80038fe:	0407f793          	andi	a5,a5,64
 8003902:	e391                	bnez	a5,8003906 <disk_initialize+0x1ee>
 8003904:	4491                	li	s1,4
	CardType = ty;	/* Card type */
 8003906:	200007b7          	lui	a5,0x20000
 800390a:	50978723          	sb	s1,1294(a5) # 2000050e <CardType>
	deselect();
 800390e:	00000097          	auipc	ra,0x0
 8003912:	af6080e7          	jalr	-1290(ra) # 8003404 <deselect>
		Stat = STA_NOINIT;
 8003916:	4785                	li	a5,1
	if (ty) {			/* OK */
 8003918:	cc99                	beqz	s1,8003936 <disk_initialize+0x21e>
		FCLK_FAST();			/* Set fast clock */
 800391a:	40004737          	lui	a4,0x40004
 800391e:	80072783          	lw	a5,-2048(a4) # 40003800 <_sp+0x1fffb800>
 8003922:	fc77f793          	andi	a5,a5,-57
 8003926:	0287e793          	ori	a5,a5,40
 800392a:	80f72023          	sw	a5,-2048(a4)
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800392e:	00044783          	lbu	a5,0(s0)
 8003932:	0fe7f793          	andi	a5,a5,254
		Stat = STA_NOINIT;
 8003936:	00f40023          	sb	a5,0(s0)
	return Stat;
 800393a:	00044503          	lbu	a0,0(s0)
 800393e:	bd7d                	j	80037fc <disk_initialize+0xe4>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003940:	4581                	li	a1,0
 8003942:	0a900513          	li	a0,169
 8003946:	00000097          	auipc	ra,0x0
 800394a:	c06080e7          	jalr	-1018(ra) # 800354c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800394e:	4485                	li	s1,1
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003950:	00a96563          	bltu	s2,a0,800395a <disk_initialize+0x242>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003954:	4489                	li	s1,2
 8003956:	0a900913          	li	s2,169
			while (tf_timer_done() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800395a:	00000097          	auipc	ra,0x0
 800395e:	470080e7          	jalr	1136(ra) # 8003dca <tf_timer_done>
 8003962:	c901                	beqz	a0,8003972 <disk_initialize+0x25a>
 8003964:	4581                	li	a1,0
 8003966:	854a                	mv	a0,s2
 8003968:	00000097          	auipc	ra,0x0
 800396c:	be4080e7          	jalr	-1052(ra) # 800354c <send_cmd>
 8003970:	f56d                	bnez	a0,800395a <disk_initialize+0x242>
			if (!tf_timer_done() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003972:	00000097          	auipc	ra,0x0
 8003976:	458080e7          	jalr	1112(ra) # 8003dca <tf_timer_done>
 800397a:	c909                	beqz	a0,800398c <disk_initialize+0x274>
 800397c:	20000593          	li	a1,512
 8003980:	4541                	li	a0,16
 8003982:	00000097          	auipc	ra,0x0
 8003986:	bca080e7          	jalr	-1078(ra) # 800354c <send_cmd>
 800398a:	dd35                	beqz	a0,8003906 <disk_initialize+0x1ee>
				ty = 0;
 800398c:	4481                	li	s1,0
 800398e:	bfa5                	j	8003906 <disk_initialize+0x1ee>
	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003990:	4505                	li	a0,1
}
 8003992:	8082                	ret

08003994 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
){
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003994:	e901                	bnez	a0,80039a4 <disk_status+0x10>

	return Stat;	/* Return disk status */
 8003996:	200007b7          	lui	a5,0x20000
 800399a:	4f87c503          	lbu	a0,1272(a5) # 200004f8 <Stat>
 800399e:	0ff57513          	andi	a0,a0,255
 80039a2:	8082                	ret
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80039a4:	4505                	li	a0,1
}
 80039a6:	8082                	ret

080039a8 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80039a8:	ed59                	bnez	a0,8003a46 <disk_read+0x9e>
){
 80039aa:	1141                	addi	sp,sp,-16
 80039ac:	c422                	sw	s0,8(sp)
 80039ae:	c606                	sw	ra,12(sp)
 80039b0:	c226                	sw	s1,4(sp)
 80039b2:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80039b4:	4511                	li	a0,4
 80039b6:	cab1                	beqz	a3,8003a0a <disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80039b8:	200007b7          	lui	a5,0x20000
 80039bc:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 80039c0:	450d                	li	a0,3
 80039c2:	8b85                	andi	a5,a5,1
 80039c4:	e3b9                	bnez	a5,8003a0a <disk_read+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80039c6:	200007b7          	lui	a5,0x20000
 80039ca:	50e7c783          	lbu	a5,1294(a5) # 2000050e <CardType>
 80039ce:	84ae                	mv	s1,a1
 80039d0:	85b2                	mv	a1,a2
 80039d2:	8ba1                	andi	a5,a5,8
 80039d4:	e399                	bnez	a5,80039da <disk_read+0x32>
 80039d6:	00961593          	slli	a1,a2,0x9

	if (count == 1) {	/* Single sector read */
 80039da:	4785                	li	a5,1
 80039dc:	02f41c63          	bne	s0,a5,8003a14 <disk_read+0x6c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80039e0:	4545                	li	a0,17
 80039e2:	00000097          	auipc	ra,0x0
 80039e6:	b6a080e7          	jalr	-1174(ra) # 800354c <send_cmd>
 80039ea:	e911                	bnez	a0,80039fe <disk_read+0x56>
			&& rcvr_datablock(buff, 512)) {
 80039ec:	20000593          	li	a1,512
 80039f0:	8526                	mv	a0,s1
 80039f2:	00000097          	auipc	ra,0x0
 80039f6:	c46080e7          	jalr	-954(ra) # 8003638 <rcvr_datablock>
 80039fa:	00153413          	seqz	s0,a0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
 80039fe:	00000097          	auipc	ra,0x0
 8003a02:	a06080e7          	jalr	-1530(ra) # 8003404 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003a06:	00803533          	snez	a0,s0
}
 8003a0a:	40b2                	lw	ra,12(sp)
 8003a0c:	4422                	lw	s0,8(sp)
 8003a0e:	4492                	lw	s1,4(sp)
 8003a10:	0141                	addi	sp,sp,16
 8003a12:	8082                	ret
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003a14:	4549                	li	a0,18
 8003a16:	00000097          	auipc	ra,0x0
 8003a1a:	b36080e7          	jalr	-1226(ra) # 800354c <send_cmd>
 8003a1e:	f165                	bnez	a0,80039fe <disk_read+0x56>
				if (!rcvr_datablock(buff, 512)) break;
 8003a20:	20000593          	li	a1,512
 8003a24:	8526                	mv	a0,s1
 8003a26:	00000097          	auipc	ra,0x0
 8003a2a:	c12080e7          	jalr	-1006(ra) # 8003638 <rcvr_datablock>
 8003a2e:	c509                	beqz	a0,8003a38 <disk_read+0x90>
			} while (--count);
 8003a30:	147d                	addi	s0,s0,-1
				buff += 512;
 8003a32:	20048493          	addi	s1,s1,512
			} while (--count);
 8003a36:	f46d                	bnez	s0,8003a20 <disk_read+0x78>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003a38:	4581                	li	a1,0
 8003a3a:	4531                	li	a0,12
 8003a3c:	00000097          	auipc	ra,0x0
 8003a40:	b10080e7          	jalr	-1264(ra) # 800354c <send_cmd>
 8003a44:	bf6d                	j	80039fe <disk_read+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a46:	4511                	li	a0,4
}
 8003a48:	8082                	ret

08003a4a <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a4a:	10051263          	bnez	a0,8003b4e <disk_write+0x104>
){
 8003a4e:	1101                	addi	sp,sp,-32
 8003a50:	cc22                	sw	s0,24(sp)
 8003a52:	ce06                	sw	ra,28(sp)
 8003a54:	ca26                	sw	s1,20(sp)
 8003a56:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a58:	4511                	li	a0,4
 8003a5a:	caa9                	beqz	a3,8003aac <disk_write+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003a5c:	200007b7          	lui	a5,0x20000
 8003a60:	4f878793          	addi	a5,a5,1272 # 200004f8 <Stat>
 8003a64:	0007c703          	lbu	a4,0(a5)
 8003a68:	450d                	li	a0,3
 8003a6a:	8b05                	andi	a4,a4,1
 8003a6c:	e321                	bnez	a4,8003aac <disk_write+0x62>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003a6e:	0007c783          	lbu	a5,0(a5)
 8003a72:	4509                	li	a0,2
 8003a74:	8b91                	andi	a5,a5,4
 8003a76:	eb9d                	bnez	a5,8003aac <disk_write+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003a78:	200007b7          	lui	a5,0x20000
 8003a7c:	50e7c783          	lbu	a5,1294(a5) # 2000050e <CardType>
 8003a80:	84ae                	mv	s1,a1
 8003a82:	0087f713          	andi	a4,a5,8
 8003a86:	e311                	bnez	a4,8003a8a <disk_write+0x40>
 8003a88:	0626                	slli	a2,a2,0x9

	if (count == 1) {	/* Single sector write */
 8003a8a:	4705                	li	a4,1
 8003a8c:	04e41a63          	bne	s0,a4,8003ae0 <disk_write+0x96>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003a90:	85b2                	mv	a1,a2
 8003a92:	4561                	li	a0,24
 8003a94:	00000097          	auipc	ra,0x0
 8003a98:	ab8080e7          	jalr	-1352(ra) # 800354c <send_cmd>
 8003a9c:	cd09                	beqz	a0,8003ab6 <disk_write+0x6c>
){
 8003a9e:	4405                	li	s0,1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
 8003aa0:	00000097          	auipc	ra,0x0
 8003aa4:	964080e7          	jalr	-1692(ra) # 8003404 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003aa8:	00803533          	snez	a0,s0
}
 8003aac:	40f2                	lw	ra,28(sp)
 8003aae:	4462                	lw	s0,24(sp)
 8003ab0:	44d2                	lw	s1,20(sp)
 8003ab2:	6105                	addi	sp,sp,32
 8003ab4:	8082                	ret
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003ab6:	1f400513          	li	a0,500
 8003aba:	00000097          	auipc	ra,0x0
 8003abe:	96c080e7          	jalr	-1684(ra) # 8003426 <wait_ready>
 8003ac2:	dd71                	beqz	a0,8003a9e <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003ac4:	0fe00513          	li	a0,254
 8003ac8:	00000097          	auipc	ra,0x0
 8003acc:	8da080e7          	jalr	-1830(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ad0:	8526                	mv	a0,s1
 8003ad2:	00000097          	auipc	ra,0x0
 8003ad6:	be6080e7          	jalr	-1050(ra) # 80036b8 <xmit_datablock.part.1>
			&& xmit_datablock(buff, 0xFE)) {
 8003ada:	00153413          	seqz	s0,a0
 8003ade:	b7c9                	j	8003aa0 <disk_write+0x56>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ae0:	8b99                	andi	a5,a5,6
 8003ae2:	cb91                	beqz	a5,8003af6 <disk_write+0xac>
 8003ae4:	85a2                	mv	a1,s0
 8003ae6:	09700513          	li	a0,151
 8003aea:	c632                	sw	a2,12(sp)
 8003aec:	00000097          	auipc	ra,0x0
 8003af0:	a60080e7          	jalr	-1440(ra) # 800354c <send_cmd>
 8003af4:	4632                	lw	a2,12(sp)
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003af6:	85b2                	mv	a1,a2
 8003af8:	4565                	li	a0,25
 8003afa:	00000097          	auipc	ra,0x0
 8003afe:	a52080e7          	jalr	-1454(ra) # 800354c <send_cmd>
 8003b02:	fd59                	bnez	a0,8003aa0 <disk_write+0x56>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003b04:	1f400513          	li	a0,500
 8003b08:	00000097          	auipc	ra,0x0
 8003b0c:	91e080e7          	jalr	-1762(ra) # 8003426 <wait_ready>
 8003b10:	c10d                	beqz	a0,8003b32 <disk_write+0xe8>
	xchg_spi(token);					/* Send token */
 8003b12:	0fc00513          	li	a0,252
 8003b16:	00000097          	auipc	ra,0x0
 8003b1a:	88c080e7          	jalr	-1908(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b1e:	8526                	mv	a0,s1
 8003b20:	00000097          	auipc	ra,0x0
 8003b24:	b98080e7          	jalr	-1128(ra) # 80036b8 <xmit_datablock.part.1>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003b28:	c509                	beqz	a0,8003b32 <disk_write+0xe8>
			} while (--count);
 8003b2a:	147d                	addi	s0,s0,-1
				buff += 512;
 8003b2c:	20048493          	addi	s1,s1,512
			} while (--count);
 8003b30:	f871                	bnez	s0,8003b04 <disk_write+0xba>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003b32:	1f400513          	li	a0,500
 8003b36:	00000097          	auipc	ra,0x0
 8003b3a:	8f0080e7          	jalr	-1808(ra) # 8003426 <wait_ready>
 8003b3e:	d125                	beqz	a0,8003a9e <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003b40:	0fd00513          	li	a0,253
 8003b44:	00000097          	auipc	ra,0x0
 8003b48:	85e080e7          	jalr	-1954(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b4c:	bf91                	j	8003aa0 <disk_write+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b4e:	4511                	li	a0,4
}
 8003b50:	8082                	ret

08003b52 <disk_ioctl>:

DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
){
 8003b52:	1101                	addi	sp,sp,-32
 8003b54:	ca26                	sw	s1,20(sp)
 8003b56:	ce06                	sw	ra,28(sp)
 8003b58:	cc22                	sw	s0,24(sp)
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003b5a:	4491                	li	s1,4
 8003b5c:	e90d                	bnez	a0,8003b8e <disk_ioctl+0x3c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003b5e:	200007b7          	lui	a5,0x20000
 8003b62:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003b66:	448d                	li	s1,3
 8003b68:	8b85                	andi	a5,a5,1
 8003b6a:	e395                	bnez	a5,8003b8e <disk_ioctl+0x3c>

	res = RES_ERROR;

	switch (cmd) {
 8003b6c:	4785                	li	a5,1
 8003b6e:	8432                	mv	s0,a2
 8003b70:	84ae                	mv	s1,a1
 8003b72:	02f58b63          	beq	a1,a5,8003ba8 <disk_ioctl+0x56>
 8003b76:	c195                	beqz	a1,8003b9a <disk_ioctl+0x48>
 8003b78:	478d                	li	a5,3
 8003b7a:	0af58863          	beq	a1,a5,8003c2a <disk_ioctl+0xd8>
 8003b7e:	4791                	li	a5,4
 8003b80:	16f58363          	beq	a1,a5,8003ce6 <disk_ioctl+0x194>
			res = RES_OK;	/* FatFs does not check result of this command */
		}
		break;

	default:
		res = RES_PARERR;
 8003b84:	4491                	li	s1,4
	}

	deselect();
 8003b86:	00000097          	auipc	ra,0x0
 8003b8a:	87e080e7          	jalr	-1922(ra) # 8003404 <deselect>

	return res;
}
 8003b8e:	40f2                	lw	ra,28(sp)
 8003b90:	4462                	lw	s0,24(sp)
 8003b92:	8526                	mv	a0,s1
 8003b94:	44d2                	lw	s1,20(sp)
 8003b96:	6105                	addi	sp,sp,32
 8003b98:	8082                	ret
		if (_select()) res = RES_OK;
 8003b9a:	00000097          	auipc	ra,0x0
 8003b9e:	970080e7          	jalr	-1680(ra) # 800350a <_select>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003ba2:	00153493          	seqz	s1,a0
 8003ba6:	b7c5                	j	8003b86 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003ba8:	4581                	li	a1,0
 8003baa:	4525                	li	a0,9
 8003bac:	00000097          	auipc	ra,0x0
 8003bb0:	9a0080e7          	jalr	-1632(ra) # 800354c <send_cmd>
 8003bb4:	c119                	beqz	a0,8003bba <disk_ioctl+0x68>
	res = RES_ERROR;
 8003bb6:	4485                	li	s1,1
 8003bb8:	b7f9                	j	8003b86 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003bba:	45c1                	li	a1,16
 8003bbc:	850a                	mv	a0,sp
 8003bbe:	00000097          	auipc	ra,0x0
 8003bc2:	a7a080e7          	jalr	-1414(ra) # 8003638 <rcvr_datablock>
 8003bc6:	d965                	beqz	a0,8003bb6 <disk_ioctl+0x64>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003bc8:	00014603          	lbu	a2,0(sp)
 8003bcc:	00814783          	lbu	a5,8(sp)
 8003bd0:	00914683          	lbu	a3,9(sp)
 8003bd4:	8219                	srli	a2,a2,0x6
 8003bd6:	00714703          	lbu	a4,7(sp)
 8003bda:	00961e63          	bne	a2,s1,8003bf6 <disk_ioctl+0xa4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003bde:	07a2                	slli	a5,a5,0x8
 8003be0:	97b6                	add	a5,a5,a3
 8003be2:	0742                	slli	a4,a4,0x10
 8003be4:	003f06b7          	lui	a3,0x3f0
 8003be8:	8f75                	and	a4,a4,a3
 8003bea:	0705                	addi	a4,a4,1
 8003bec:	97ba                	add	a5,a5,a4
				*(DWORD*)buff = csize << 10;
 8003bee:	07aa                	slli	a5,a5,0xa
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003bf0:	c01c                	sw	a5,0(s0)
				res = RES_OK;
 8003bf2:	4481                	li	s1,0
 8003bf4:	bf49                	j	8003b86 <disk_ioctl+0x34>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003bf6:	070a                	slli	a4,a4,0x2
 8003bf8:	8399                	srli	a5,a5,0x6
 8003bfa:	97ba                	add	a5,a5,a4
 8003bfc:	00614703          	lbu	a4,6(sp)
 8003c00:	6605                	lui	a2,0x1
 8003c02:	c0060613          	addi	a2,a2,-1024 # c00 <__dbg_stack_size+0xc00>
 8003c06:	072a                	slli	a4,a4,0xa
 8003c08:	8f71                	and	a4,a4,a2
 8003c0a:	97ba                	add	a5,a5,a4
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003c0c:	00a14603          	lbu	a2,10(sp)
 8003c10:	00514703          	lbu	a4,5(sp)
 8003c14:	0686                	slli	a3,a3,0x1
 8003c16:	821d                	srli	a2,a2,0x7
 8003c18:	8b3d                	andi	a4,a4,15
 8003c1a:	9732                	add	a4,a4,a2
 8003c1c:	8a99                	andi	a3,a3,6
				*(DWORD*)buff = csize << (n - 9);
 8003c1e:	9736                	add	a4,a4,a3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003c20:	0785                	addi	a5,a5,1
				*(DWORD*)buff = csize << (n - 9);
 8003c22:	1765                	addi	a4,a4,-7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003c24:	00e797b3          	sll	a5,a5,a4
 8003c28:	b7e1                	j	8003bf0 <disk_ioctl+0x9e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c2a:	200004b7          	lui	s1,0x20000
 8003c2e:	50e48493          	addi	s1,s1,1294 # 2000050e <CardType>
 8003c32:	0004c783          	lbu	a5,0(s1)
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c36:	4581                	li	a1,0
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c38:	8b91                	andi	a5,a5,4
 8003c3a:	cbb1                	beqz	a5,8003c8e <disk_ioctl+0x13c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c3c:	08d00513          	li	a0,141
 8003c40:	00000097          	auipc	ra,0x0
 8003c44:	90c080e7          	jalr	-1780(ra) # 800354c <send_cmd>
 8003c48:	f53d                	bnez	a0,8003bb6 <disk_ioctl+0x64>
				xchg_spi(0xFF);
 8003c4a:	0ff00513          	li	a0,255
 8003c4e:	fffff097          	auipc	ra,0xfffff
 8003c52:	754080e7          	jalr	1876(ra) # 80033a2 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003c56:	45c1                	li	a1,16
 8003c58:	850a                	mv	a0,sp
 8003c5a:	00000097          	auipc	ra,0x0
 8003c5e:	9de080e7          	jalr	-1570(ra) # 8003638 <rcvr_datablock>
 8003c62:	d931                	beqz	a0,8003bb6 <disk_ioctl+0x64>
 8003c64:	03000493          	li	s1,48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003c68:	14fd                	addi	s1,s1,-1
 8003c6a:	0ff00513          	li	a0,255
 8003c6e:	0ff4f493          	andi	s1,s1,255
 8003c72:	fffff097          	auipc	ra,0xfffff
 8003c76:	730080e7          	jalr	1840(ra) # 80033a2 <xchg_spi>
 8003c7a:	f4fd                	bnez	s1,8003c68 <disk_ioctl+0x116>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003c7c:	00a14783          	lbu	a5,10(sp)
 8003c80:	0047d713          	srli	a4,a5,0x4
 8003c84:	47c1                	li	a5,16
 8003c86:	00e797b3          	sll	a5,a5,a4
 8003c8a:	c01c                	sw	a5,0(s0)
					res = RES_OK;
 8003c8c:	bded                	j	8003b86 <disk_ioctl+0x34>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003c8e:	4525                	li	a0,9
 8003c90:	00000097          	auipc	ra,0x0
 8003c94:	8bc080e7          	jalr	-1860(ra) # 800354c <send_cmd>
 8003c98:	fd19                	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003c9a:	45c1                	li	a1,16
 8003c9c:	850a                	mv	a0,sp
 8003c9e:	00000097          	auipc	ra,0x0
 8003ca2:	99a080e7          	jalr	-1638(ra) # 8003638 <rcvr_datablock>
 8003ca6:	d901                	beqz	a0,8003bb6 <disk_ioctl+0x64>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ca8:	0004c703          	lbu	a4,0(s1)
 8003cac:	00a14783          	lbu	a5,10(sp)
 8003cb0:	00b14683          	lbu	a3,11(sp)
 8003cb4:	8b09                	andi	a4,a4,2
 8003cb6:	cf01                	beqz	a4,8003cce <disk_ioctl+0x17c>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003cb8:	00d14703          	lbu	a4,13(sp)
 8003cbc:	0786                	slli	a5,a5,0x1
 8003cbe:	07e7f793          	andi	a5,a5,126
 8003cc2:	829d                	srli	a3,a3,0x7
 8003cc4:	97b6                	add	a5,a5,a3
 8003cc6:	8319                	srli	a4,a4,0x6
 8003cc8:	0785                	addi	a5,a5,1
 8003cca:	177d                	addi	a4,a4,-1
 8003ccc:	bfa1                	j	8003c24 <disk_ioctl+0xd2>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003cce:	00369713          	slli	a4,a3,0x3
 8003cd2:	8b61                	andi	a4,a4,24
 8003cd4:	8295                	srli	a3,a3,0x5
 8003cd6:	8789                	srai	a5,a5,0x2
 8003cd8:	9736                	add	a4,a4,a3
 8003cda:	8bfd                	andi	a5,a5,31
 8003cdc:	0705                	addi	a4,a4,1
 8003cde:	0785                	addi	a5,a5,1
 8003ce0:	02f707b3          	mul	a5,a4,a5
 8003ce4:	b731                	j	8003bf0 <disk_ioctl+0x9e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ce6:	200004b7          	lui	s1,0x20000
 8003cea:	50e48493          	addi	s1,s1,1294 # 2000050e <CardType>
 8003cee:	0004c783          	lbu	a5,0(s1)
 8003cf2:	8b99                	andi	a5,a5,6
 8003cf4:	ec0781e3          	beqz	a5,8003bb6 <disk_ioctl+0x64>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003cf8:	860a                	mv	a2,sp
 8003cfa:	45ad                	li	a1,11
 8003cfc:	00000097          	auipc	ra,0x0
 8003d00:	e56080e7          	jalr	-426(ra) # 8003b52 <disk_ioctl>
 8003d04:	ea0519e3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003d08:	00014783          	lbu	a5,0(sp)
 8003d0c:	00a14703          	lbu	a4,10(sp)
 8003d10:	8399                	srli	a5,a5,0x6
 8003d12:	04077713          	andi	a4,a4,64
 8003d16:	8fd9                	or	a5,a5,a4
 8003d18:	e8078fe3          	beqz	a5,8003bb6 <disk_ioctl+0x64>
		if (!(CardType & CT_BLOCK)) {
 8003d1c:	0004c783          	lbu	a5,0(s1)
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003d20:	400c                	lw	a1,0(s0)
 8003d22:	4040                	lw	s0,4(s0)
		if (!(CardType & CT_BLOCK)) {
 8003d24:	8ba1                	andi	a5,a5,8
 8003d26:	e399                	bnez	a5,8003d2c <disk_ioctl+0x1da>
			st *= 512; ed *= 512;
 8003d28:	05a6                	slli	a1,a1,0x9
 8003d2a:	0426                	slli	s0,s0,0x9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d2c:	02000513          	li	a0,32
 8003d30:	00000097          	auipc	ra,0x0
 8003d34:	81c080e7          	jalr	-2020(ra) # 800354c <send_cmd>
 8003d38:	e6051fe3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d3c:	85a2                	mv	a1,s0
 8003d3e:	02100513          	li	a0,33
 8003d42:	00000097          	auipc	ra,0x0
 8003d46:	80a080e7          	jalr	-2038(ra) # 800354c <send_cmd>
 8003d4a:	e60516e3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d4e:	4581                	li	a1,0
 8003d50:	02600513          	li	a0,38
 8003d54:	fffff097          	auipc	ra,0xfffff
 8003d58:	7f8080e7          	jalr	2040(ra) # 800354c <send_cmd>
 8003d5c:	e4051de3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d60:	651d                	lui	a0,0x7
 8003d62:	53050513          	addi	a0,a0,1328 # 7530 <__stack_size+0x6530>
 8003d66:	fffff097          	auipc	ra,0xfffff
 8003d6a:	6c0080e7          	jalr	1728(ra) # 8003426 <wait_ready>
 8003d6e:	bd15                	j	8003ba2 <disk_ioctl+0x50>

08003d70 <tf_start_timer>:


volatile uint64_t tf_current_time = 0;
volatile uint64_t tf_delay_until = 0;

void tf_start_timer(int32_t millis){
 8003d70:	1141                	addi	sp,sp,-16
 8003d72:	c422                	sw	s0,8(sp)
 8003d74:	c606                	sw	ra,12(sp)
 8003d76:	842a                	mv	s0,a0
    tf_current_time = get_timer_value();
 8003d78:	ffffe097          	auipc	ra,0xffffe
 8003d7c:	e98080e7          	jalr	-360(ra) # 8001c10 <get_timer_value>
 8003d80:	200007b7          	lui	a5,0x20000
 8003d84:	51078793          	addi	a5,a5,1296 # 20000510 <tf_current_time>
 8003d88:	c388                	sw	a0,0(a5)
 8003d8a:	c3cc                	sw	a1,4(a5)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003d8c:	0007a803          	lw	a6,0(a5)
 8003d90:	0047a883          	lw	a7,4(a5)
 8003d94:	200007b7          	lui	a5,0x20000
 8003d98:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8003d9c:	6785                	lui	a5,0x1
 8003d9e:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8003da2:	02f55533          	divu	a0,a0,a5
 8003da6:	200006b7          	lui	a3,0x20000
}
 8003daa:	40b2                	lw	ra,12(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003dac:	02850533          	mul	a0,a0,s0
}
 8003db0:	4422                	lw	s0,8(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003db2:	01050633          	add	a2,a0,a6
 8003db6:	00a63533          	sltu	a0,a2,a0
 8003dba:	50c6ac23          	sw	a2,1304(a3) # 20000518 <tf_delay_until>
 8003dbe:	011507b3          	add	a5,a0,a7
 8003dc2:	50f6ae23          	sw	a5,1308(a3)
}
 8003dc6:	0141                	addi	sp,sp,16
 8003dc8:	8082                	ret

08003dca <tf_timer_done>:
uint32_t tf_timer_done(void){
 8003dca:	1141                	addi	sp,sp,-16
 8003dcc:	c606                	sw	ra,12(sp)
    
    tf_current_time = get_timer_value();
 8003dce:	ffffe097          	auipc	ra,0xffffe
 8003dd2:	e42080e7          	jalr	-446(ra) # 8001c10 <get_timer_value>
 8003dd6:	200007b7          	lui	a5,0x20000
 8003dda:	51078793          	addi	a5,a5,1296 # 20000510 <tf_current_time>
 8003dde:	c388                	sw	a0,0(a5)
 8003de0:	c3cc                	sw	a1,4(a5)
    //if(tf_delay_start > tf_delay_until) return tf_delay_start > current_time && current_time > tf_delay_until ? 0 : 1; //On overflow
    if(tf_current_time > tf_delay_until) return 0;   //No overflow
 8003de2:	200006b7          	lui	a3,0x20000
 8003de6:	4398                	lw	a4,0(a5)
 8003de8:	43dc                	lw	a5,4(a5)
 8003dea:	5186a603          	lw	a2,1304(a3) # 20000518 <tf_delay_until>
 8003dee:	51c6a683          	lw	a3,1308(a3)
 8003df2:	00f6e763          	bltu	a3,a5,8003e00 <tf_timer_done+0x36>
 8003df6:	4505                	li	a0,1
 8003df8:	00d79563          	bne	a5,a3,8003e02 <tf_timer_done+0x38>
 8003dfc:	00e67363          	bgeu	a2,a4,8003e02 <tf_timer_done+0x38>
 8003e00:	4501                	li	a0,0
    return 1;
 8003e02:	40b2                	lw	ra,12(sp)
 8003e04:	0141                	addi	sp,sp,16
 8003e06:	8082                	ret

08003e08 <delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void delay_1ms(uint32_t count)
{
 8003e08:	7179                	addi	sp,sp,-48
 8003e0a:	d04a                	sw	s2,32(sp)
 8003e0c:	ce4e                	sw	s3,28(sp)
 8003e0e:	c85a                	sw	s6,16(sp)
 8003e10:	d606                	sw	ra,44(sp)
 8003e12:	d422                	sw	s0,40(sp)
 8003e14:	d226                	sw	s1,36(sp)
 8003e16:	cc52                	sw	s4,24(sp)
 8003e18:	ca56                	sw	s5,20(sp)
 8003e1a:	c65e                	sw	s7,12(sp)
 8003e1c:	c462                	sw	s8,8(sp)
 8003e1e:	c266                	sw	s9,4(sp)
 8003e20:	8b2a                	mv	s6,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8003e22:	ffffe097          	auipc	ra,0xffffe
 8003e26:	dee080e7          	jalr	-530(ra) # 8001c10 <get_timer_value>
 8003e2a:	89aa                	mv	s3,a0
 8003e2c:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 8003e2e:	ffffe097          	auipc	ra,0xffffe
 8003e32:	de2080e7          	jalr	-542(ra) # 8001c10 <get_timer_value>
 8003e36:	84aa                	mv	s1,a0
 8003e38:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 8003e3a:	00a99463          	bne	s3,a0,8003e42 <delay_1ms+0x3a>
 8003e3e:	feb908e3          	beq	s2,a1,8003e2e <delay_1ms+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8003e42:	080007b7          	lui	a5,0x8000
 8003e46:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8003e4a:	2e47a983          	lw	s3,740(a5)
 8003e4e:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 8003e52:	ffffe097          	auipc	ra,0xffffe
 8003e56:	dbe080e7          	jalr	-578(ra) # 8001c10 <get_timer_value>
 8003e5a:	87aa                	mv	a5,a0
 8003e5c:	8d05                	sub	a0,a0,s1
 8003e5e:	00a7b7b3          	sltu	a5,a5,a0
 8003e62:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8003e64:	8d9d                	sub	a1,a1,a5
 8003e66:	00003097          	auipc	ra,0x3
 8003e6a:	080080e7          	jalr	128(ra) # 8006ee6 <__floatundidf>
 8003e6e:	8a2a                	mv	s4,a0
 8003e70:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8003e74:	8aae                	mv	s5,a1
 8003e76:	00003097          	auipc	ra,0x3
 8003e7a:	01a080e7          	jalr	26(ra) # 8006e90 <__floatunsidf>
 8003e7e:	864a                	mv	a2,s2
 8003e80:	86ce                	mv	a3,s3
 8003e82:	00002097          	auipc	ra,0x2
 8003e86:	574080e7          	jalr	1396(ra) # 80063f6 <__divdf3>
 8003e8a:	8c2a                	mv	s8,a0
 8003e8c:	855a                	mv	a0,s6
 8003e8e:	8cae                	mv	s9,a1
 8003e90:	00003097          	auipc	ra,0x3
 8003e94:	000080e7          	jalr	ra # 8006e90 <__floatunsidf>
 8003e98:	862a                	mv	a2,a0
 8003e9a:	86ae                	mv	a3,a1
 8003e9c:	8562                	mv	a0,s8
 8003e9e:	85e6                	mv	a1,s9
 8003ea0:	00003097          	auipc	ra,0x3
 8003ea4:	b40080e7          	jalr	-1216(ra) # 80069e0 <__muldf3>
 8003ea8:	862a                	mv	a2,a0
 8003eaa:	86ae                	mv	a3,a1
 8003eac:	8552                	mv	a0,s4
 8003eae:	85d6                	mv	a1,s5
 8003eb0:	00003097          	auipc	ra,0x3
 8003eb4:	a8c080e7          	jalr	-1396(ra) # 800693c <__ledf2>
 8003eb8:	f8054de3          	bltz	a0,8003e52 <delay_1ms+0x4a>
}
 8003ebc:	50b2                	lw	ra,44(sp)
 8003ebe:	5422                	lw	s0,40(sp)
 8003ec0:	5492                	lw	s1,36(sp)
 8003ec2:	5902                	lw	s2,32(sp)
 8003ec4:	49f2                	lw	s3,28(sp)
 8003ec6:	4a62                	lw	s4,24(sp)
 8003ec8:	4ad2                	lw	s5,20(sp)
 8003eca:	4b42                	lw	s6,16(sp)
 8003ecc:	4bb2                	lw	s7,12(sp)
 8003ece:	4c22                	lw	s8,8(sp)
 8003ed0:	4c92                	lw	s9,4(sp)
 8003ed2:	6145                	addi	sp,sp,48
 8003ed4:	8082                	ret

08003ed6 <usb_txfifo_write>:
                             uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8003ed6:	0671                	addi	a2,a2,28
 8003ed8:	060a                	slli	a2,a2,0x2
 8003eda:	962a                	add	a2,a2,a0
    uint32_t word_count = (byte_count + 3U) / 4U;
 8003edc:	068d                	addi	a3,a3,3
 8003ede:	8289                	srli	a3,a3,0x2
    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8003ee0:	4650                	lw	a2,12(a2)

    while (word_count-- > 0) {
 8003ee2:	068a                	slli	a3,a3,0x2
 8003ee4:	96ae                	add	a3,a3,a1
 8003ee6:	00b69463          	bne	a3,a1,8003eee <usb_txfifo_write+0x18>

        src_buf += 4U;
    }

    return USB_OK;
}
 8003eea:	4501                	li	a0,0
 8003eec:	8082                	ret
        word = src_buf[0] | (src_buf[1] << 8) | (src_buf[2] << 16) | (src_buf[3] << 24);
 8003eee:	0015c703          	lbu	a4,1(a1) # 40000001 <_sp+0x1fff8001>
 8003ef2:	0005c783          	lbu	a5,0(a1)
        src_buf += 4U;
 8003ef6:	0591                	addi	a1,a1,4
 8003ef8:	0722                	slli	a4,a4,0x8
 8003efa:	8f5d                	or	a4,a4,a5
 8003efc:	ffe5c783          	lbu	a5,-2(a1)
 8003f00:	07c2                	slli	a5,a5,0x10
 8003f02:	8f5d                	or	a4,a4,a5
 8003f04:	fff5c783          	lbu	a5,-1(a1)
 8003f08:	07e2                	slli	a5,a5,0x18
 8003f0a:	8fd9                	or	a5,a5,a4
        *fifo = word;
 8003f0c:	c21c                	sw	a5,0(a2)
        src_buf += 4U;
 8003f0e:	bfe1                	j	8003ee6 <usb_txfifo_write+0x10>

08003f10 <usb_rxfifo_read>:
    \param[out] none
    \retval     void type pointer
*/
void *usb_rxfifo_read (usb_core_regs *usb_regs, uint8_t *dest_buf, uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
 8003f10:	060d                	addi	a2,a2,3
 8003f12:	8209                	srli	a2,a2,0x2
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[0];
 8003f14:	5d78                	lw	a4,124(a0)

    while (word_count-- > 0) {
 8003f16:	060a                	slli	a2,a2,0x2
 8003f18:	962e                	add	a2,a2,a1
 8003f1a:	00c59463          	bne	a1,a2,8003f22 <usb_rxfifo_read+0x12>

        dest_buf += 4U;
    }

    return ((void *)dest_buf);
}
 8003f1e:	852e                	mv	a0,a1
 8003f20:	8082                	ret
        word = *fifo;
 8003f22:	431c                	lw	a5,0(a4)
        dest_buf += 4U;
 8003f24:	0591                	addi	a1,a1,4
        dest_buf[1] = (word >> 8) & 0xff;
 8003f26:	0087d693          	srli	a3,a5,0x8
        dest_buf[0] = word & 0xff;
 8003f2a:	fef58e23          	sb	a5,-4(a1)
        dest_buf[1] = (word >> 8) & 0xff;
 8003f2e:	fed58ea3          	sb	a3,-3(a1)
        dest_buf[2] = (word >> 16) & 0xff;
 8003f32:	0107d693          	srli	a3,a5,0x10
        dest_buf[3] = (word >> 24) & 0xff;
 8003f36:	83e1                	srli	a5,a5,0x18
        dest_buf[2] = (word >> 16) & 0xff;
 8003f38:	fed58f23          	sb	a3,-2(a1)
        dest_buf[3] = (word >> 24) & 0xff;
 8003f3c:	fef58fa3          	sb	a5,-1(a1)
        dest_buf += 4U;
 8003f40:	bfe9                	j	8003f1a <usb_rxfifo_read+0xa>

08003f42 <usb_txfifo_flush>:
    \param[out] none
    \retval     operation status
*/
usb_status usb_txfifo_flush (usb_core_regs *usb_regs, uint8_t fifo_num)
{
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f42:	4118                	lw	a4,0(a0)
{
 8003f44:	1141                	addi	sp,sp,-16
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f46:	059a                	slli	a1,a1,0x6
{
 8003f48:	c606                	sw	ra,12(sp)
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f4a:	0205e593          	ori	a1,a1,32
 8003f4e:	cb0c                	sw	a1,16(a4)

    /* wait for Tx FIFO flush bit is set */
    while (usb_regs->gr->GRSTCTL & GRSTCTL_TXFF);
 8003f50:	4b1c                	lw	a5,16(a4)
 8003f52:	0207f793          	andi	a5,a5,32
 8003f56:	ffed                	bnez	a5,8003f50 <usb_txfifo_flush+0xe>

    /* wait for 3 PHY clocks*/
    usb_udelay(3);
 8003f58:	450d                	li	a0,3
 8003f5a:	00001097          	auipc	ra,0x1
 8003f5e:	928080e7          	jalr	-1752(ra) # 8004882 <usb_udelay>

    return USB_OK;
}
 8003f62:	40b2                	lw	ra,12(sp)
 8003f64:	4501                	li	a0,0
 8003f66:	0141                	addi	sp,sp,16
 8003f68:	8082                	ret

08003f6a <usb_devaddr_set>:
    \param[out] none
    \retval     operation status
*/
void usb_devaddr_set (usb_core_driver *udev, uint8_t dev_addr)
{
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8003f6a:	455c                	lw	a5,12(a0)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8003f6c:	0592                	slli	a1,a1,0x4
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8003f6e:	4398                	lw	a4,0(a5)
 8003f70:	80f77713          	andi	a4,a4,-2033
 8003f74:	c398                	sw	a4,0(a5)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8003f76:	4398                	lw	a4,0(a5)
 8003f78:	8dd9                	or	a1,a1,a4
 8003f7a:	c38c                	sw	a1,0(a5)
}
 8003f7c:	8082                	ret

08003f7e <usb_transc_active>:
    __IO uint32_t *reg_addr = NULL;

    __IO uint32_t epinten = 0U;

    /* get the endpoint number */
    uint8_t ep_num = transc->ep_addr.num;
 8003f7e:	4198                	lw	a4,0(a1)

    /* enable endpoint interrupt number */
    if (transc->ep_addr.dir) {
 8003f80:	00058783          	lb	a5,0(a1)
{
 8003f84:	1141                	addi	sp,sp,-16
    __IO uint32_t epinten = 0U;
 8003f86:	c602                	sw	zero,12(sp)
    uint8_t ep_num = transc->ep_addr.num;
 8003f88:	8b3d                	andi	a4,a4,15
    if (transc->ep_addr.dir) {
 8003f8a:	0607d963          	bgez	a5,8003ffc <usb_transc_active+0x7e>
        reg_addr = &udev->regs.er_in[ep_num]->DIEPCTL;
 8003f8e:	00271793          	slli	a5,a4,0x2
 8003f92:	97aa                	add	a5,a5,a0
 8003f94:	4bdc                	lw	a5,20(a5)

        epinten = 1 << ep_num;
 8003f96:	4685                	li	a3,1
 8003f98:	00e696b3          	sll	a3,a3,a4
    } else {
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;

        epinten = 1 << (16 + ep_num);
 8003f9c:	c636                	sw	a3,12(sp)
    }

    /* if the endpoint is not active, need change the endpoint control register */
    if (!(*reg_addr & DEPCTL_EPACT)) {
 8003f9e:	4394                	lw	a3,0(a5)
 8003fa0:	4550                	lw	a2,12(a0)
 8003fa2:	01069513          	slli	a0,a3,0x10
 8003fa6:	04054463          	bltz	a0,8003fee <usb_transc_active+0x70>
        *reg_addr &= ~(DEPCTL_MPL | DEPCTL_EPTYPE | DIEPCTL_TXFNUM);
 8003faa:	4394                	lw	a3,0(a5)
 8003fac:	fc340537          	lui	a0,0xfc340
 8003fb0:	80050513          	addi	a0,a0,-2048 # fc33f800 <_sp+0xdc337800>
 8003fb4:	8ee9                	and	a3,a3,a0
 8003fb6:	c394                	sw	a3,0(a5)

        /* set endpoint maximum packet length */
        if (0U == ep_num) {
 8003fb8:	ef29                	bnez	a4,8004012 <usb_transc_active+0x94>
            *reg_addr |= EP0_MAXLEN[udev->regs.dr->DSTAT & DSTAT_ES];
 8003fba:	4614                	lw	a3,8(a2)
 8003fbc:	0007a803          	lw	a6,0(a5)
 8003fc0:	0066f513          	andi	a0,a3,6
 8003fc4:	080086b7          	lui	a3,0x8008
 8003fc8:	dcc68693          	addi	a3,a3,-564 # 8007dcc <EP0_MAXLEN>
 8003fcc:	96aa                	add	a3,a3,a0
 8003fce:	0006c683          	lbu	a3,0(a3)
 8003fd2:	0106e6b3          	or	a3,a3,a6
        } else {
            *reg_addr |= transc->max_len;
 8003fd6:	c394                	sw	a3,0(a5)
        }

        /* activate endpoint */
        *reg_addr |= (transc->ep_type << 18) | (ep_num << 22) | DEPCTL_SD0PID | DEPCTL_EPACT;
 8003fd8:	0015c683          	lbu	a3,1(a1)
 8003fdc:	4388                	lw	a0,0(a5)
 8003fde:	075a                	slli	a4,a4,0x16
 8003fe0:	06ca                	slli	a3,a3,0x12
 8003fe2:	8f55                	or	a4,a4,a3
 8003fe4:	8f49                	or	a4,a4,a0
 8003fe6:	100086b7          	lui	a3,0x10008
 8003fea:	8f55                	or	a4,a4,a3
 8003fec:	c398                	sw	a4,0(a5)
    }
    else
#endif
    {
        /* enable the interrupts for this endpoint */
        udev->regs.dr->DAEPINTEN |= epinten;
 8003fee:	4732                	lw	a4,12(sp)
 8003ff0:	4e5c                	lw	a5,28(a2)
    }

    return USB_OK;
}
 8003ff2:	4501                	li	a0,0
        udev->regs.dr->DAEPINTEN |= epinten;
 8003ff4:	8fd9                	or	a5,a5,a4
 8003ff6:	ce5c                	sw	a5,28(a2)
}
 8003ff8:	0141                	addi	sp,sp,16
 8003ffa:	8082                	ret
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 8003ffc:	00870793          	addi	a5,a4,8
 8004000:	078a                	slli	a5,a5,0x2
 8004002:	97aa                	add	a5,a5,a0
        epinten = 1 << (16 + ep_num);
 8004004:	01070613          	addi	a2,a4,16
 8004008:	4685                	li	a3,1
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 800400a:	47dc                	lw	a5,12(a5)
        epinten = 1 << (16 + ep_num);
 800400c:	00c696b3          	sll	a3,a3,a2
 8004010:	b771                	j	8003f9c <usb_transc_active+0x1e>
            *reg_addr |= transc->max_len;
 8004012:	4388                	lw	a0,0(a5)
 8004014:	0045d683          	lhu	a3,4(a1)
 8004018:	8ec9                	or	a3,a3,a0
 800401a:	bf75                	j	8003fd6 <usb_transc_active+0x58>

0800401c <usb_transc_inxfer>:
*/
usb_status usb_transc_inxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 800401c:	4190                	lw	a2,0(a1)
{
 800401e:	1101                	addi	sp,sp,-32

    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004020:	e00006b7          	lui	a3,0xe0000
    uint8_t ep_num = transc->ep_addr.num;
 8004024:	8a3d                	andi	a2,a2,15
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 8004026:	00261793          	slli	a5,a2,0x2
 800402a:	97aa                	add	a5,a5,a0
 800402c:	4bd8                	lw	a4,20(a5)
{
 800402e:	ce06                	sw	ra,28(sp)
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 8004030:	431c                	lw	a5,0(a4)
 8004032:	c43e                	sw	a5,8(sp)
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;
 8004034:	4b1c                	lw	a5,16(a4)
 8004036:	c63e                	sw	a5,12(sp)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004038:	47b2                	lw	a5,12(sp)
 800403a:	8ff5                	and	a5,a5,a3
 800403c:	c63e                	sw	a5,12(sp)

    /* zero length packet or endpoint 0 */
    if (0U == transc->xfer_len) {
 800403e:	45dc                	lw	a5,12(a1)
 8004040:	e7a5                	bnez	a5,80040a8 <usb_transc_inxfer+0x8c>
        /* set transfer packet count to 1 */
        eplen |= 1 << 19;
 8004042:	47b2                	lw	a5,12(sp)
 8004044:	000806b7          	lui	a3,0x80

        /* set endpoint transfer length */
        eplen |= transc->xfer_len;

        if (transc->ep_type == USB_EPTYPE_ISOC) {
            eplen |= DIEPLEN_MCNT;
 8004048:	8fd5                	or	a5,a5,a3
 800404a:	c63e                	sw	a5,12(sp)
        }
    }

    udev->regs.er_in[ep_num]->DIEPLEN = eplen;
 800404c:	47b2                	lw	a5,12(sp)
 800404e:	cb1c                	sw	a5,16(a4)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004050:	00454683          	lbu	a3,4(a0)
 8004054:	4785                	li	a5,1
 8004056:	00f69463          	bne	a3,a5,800405e <usb_transc_inxfer+0x42>
        udev->regs.er_in[ep_num]->DIEPDMAADDR = transc->dma_addr;
 800405a:	4d9c                	lw	a5,24(a1)
 800405c:	cb5c                	sw	a5,20(a4)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 800405e:	0015c803          	lbu	a6,1(a1)
 8004062:	4785                	li	a5,1
 8004064:	00f81c63          	bne	a6,a5,800407c <usb_transc_inxfer+0x60>
        if (((udev->regs.dr->DSTAT & DSTAT_FNRSOF) >> 8) & 0x1) {
 8004068:	455c                	lw	a5,12(a0)
 800406a:	479c                	lw	a5,8(a5)
 800406c:	1007f793          	andi	a5,a5,256
 8004070:	cfb5                	beqz	a5,80040ec <usb_transc_inxfer+0xd0>
            epctl |= DEPCTL_SD1PID;
 8004072:	47a2                	lw	a5,8(sp)
 8004074:	200006b7          	lui	a3,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004078:	8fd5                	or	a5,a5,a3
 800407a:	c43e                	sw	a5,8(sp)
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_CNAK | DEPCTL_EPEN;
 800407c:	47a2                	lw	a5,8(sp)
 800407e:	840006b7          	lui	a3,0x84000
 8004082:	8fd5                	or	a5,a5,a3
 8004084:	c43e                	sw	a5,8(sp)

    udev->regs.er_in[ep_num]->DIEPCTL = epctl;
 8004086:	47a2                	lw	a5,8(sp)
 8004088:	45d4                	lw	a3,12(a1)
 800408a:	c31c                	sw	a5,0(a4)

    if (transc->ep_type != USB_EPTYPE_ISOC) {
 800408c:	4785                	li	a5,1
 800408e:	06f80363          	beq	a6,a5,80040f4 <usb_transc_inxfer+0xd8>
        /* enable the Tx FIFO empty interrupt for this endpoint */
        if (transc->xfer_len > 0) {
 8004092:	c699                	beqz	a3,80040a0 <usb_transc_inxfer+0x84>
            udev->regs.dr->DIEPFEINTEN |= 1 << ep_num;
 8004094:	4558                	lw	a4,12(a0)
 8004096:	00c79633          	sll	a2,a5,a2
 800409a:	5b54                	lw	a3,52(a4)
 800409c:	8e55                	or	a2,a2,a3
 800409e:	db50                	sw	a2,52(a4)
    } else {
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
    }

    return status;
}
 80040a0:	40f2                	lw	ra,28(sp)
 80040a2:	4501                	li	a0,0
 80040a4:	6105                	addi	sp,sp,32
 80040a6:	8082                	ret
        if (0U == ep_num) {
 80040a8:	0045d683          	lhu	a3,4(a1)
 80040ac:	e61d                	bnez	a2,80040da <usb_transc_inxfer+0xbe>
            transc->xfer_len = USB_MIN(transc->xfer_len, transc->max_len);
 80040ae:	00f6f363          	bgeu	a3,a5,80040b4 <usb_transc_inxfer+0x98>
 80040b2:	87b6                	mv	a5,a3
 80040b4:	c5dc                	sw	a5,12(a1)
            eplen |= 1 << 19;
 80040b6:	47b2                	lw	a5,12(sp)
 80040b8:	000806b7          	lui	a3,0x80
 80040bc:	8fd5                	or	a5,a5,a3
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 80040be:	c63e                	sw	a5,12(sp)
        eplen |= transc->xfer_len;
 80040c0:	47b2                	lw	a5,12(sp)
 80040c2:	45d4                	lw	a3,12(a1)
 80040c4:	8fd5                	or	a5,a5,a3
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 80040c6:	0015c683          	lbu	a3,1(a1)
        eplen |= transc->xfer_len;
 80040ca:	c63e                	sw	a5,12(sp)
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 80040cc:	4785                	li	a5,1
 80040ce:	f6f69fe3          	bne	a3,a5,800404c <usb_transc_inxfer+0x30>
            eplen |= DIEPLEN_MCNT;
 80040d2:	47b2                	lw	a5,12(sp)
 80040d4:	600006b7          	lui	a3,0x60000
 80040d8:	bf85                	j	8004048 <usb_transc_inxfer+0x2c>
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 80040da:	17fd                	addi	a5,a5,-1
 80040dc:	97b6                	add	a5,a5,a3
 80040de:	02d7d7b3          	divu	a5,a5,a3
 80040e2:	4832                	lw	a6,12(sp)
 80040e4:	07ce                	slli	a5,a5,0x13
 80040e6:	0107e7b3          	or	a5,a5,a6
 80040ea:	bfd1                	j	80040be <usb_transc_inxfer+0xa2>
            epctl |= DEPCTL_SD0PID;
 80040ec:	47a2                	lw	a5,8(sp)
 80040ee:	100006b7          	lui	a3,0x10000
 80040f2:	b759                	j	8004078 <usb_transc_inxfer+0x5c>
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
 80040f4:	458c                	lw	a1,8(a1)
 80040f6:	06c2                	slli	a3,a3,0x10
 80040f8:	82c1                	srli	a3,a3,0x10
 80040fa:	0521                	addi	a0,a0,8
 80040fc:	00000097          	auipc	ra,0x0
 8004100:	dda080e7          	jalr	-550(ra) # 8003ed6 <usb_txfifo_write>
 8004104:	bf71                	j	80040a0 <usb_transc_inxfer+0x84>

08004106 <usb_transc_outxfer>:
*/
usb_status usb_transc_outxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 8004106:	4198                	lw	a4,0(a1)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);

    /* zero length packet or endpoint 0 */
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004108:	45d4                	lw	a3,12(a1)
    uint8_t ep_num = transc->ep_addr.num;
 800410a:	8b3d                	andi	a4,a4,15
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 800410c:	00870793          	addi	a5,a4,8
 8004110:	078a                	slli	a5,a5,0x2
 8004112:	97aa                	add	a5,a5,a0
 8004114:	00c7a883          	lw	a7,12(a5)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004118:	e00007b7          	lui	a5,0xe0000
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 800411c:	0008a603          	lw	a2,0(a7)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004120:	0108a803          	lw	a6,16(a7)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004124:	00f87833          	and	a6,a6,a5
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004128:	0045d783          	lhu	a5,4(a1)
 800412c:	c291                	beqz	a3,8004130 <usb_transc_outxfer+0x2a>
 800412e:	e339                	bnez	a4,8004174 <usb_transc_outxfer+0x6e>
        /* set the transfer length to max packet size */
        eplen |= transc->max_len;
 8004130:	00f86833          	or	a6,a6,a5

        /* set the transfer packet count to 1 */
        eplen |= 1U << 19;
 8004134:	000807b7          	lui	a5,0x80
         * xfersize = N * maxpacket
         */
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;

        eplen |= packet_count << 19;
        eplen |= packet_count * transc->max_len;
 8004138:	0107e7b3          	or	a5,a5,a6
    }

    udev->regs.er_out[ep_num]->DOEPLEN = eplen;
 800413c:	00f8a823          	sw	a5,16(a7)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004140:	00454703          	lbu	a4,4(a0)
 8004144:	4785                	li	a5,1
 8004146:	00f71563          	bne	a4,a5,8004150 <usb_transc_outxfer+0x4a>
        udev->regs.er_out[ep_num]->DOEPDMAADDR = transc->dma_addr;
 800414a:	4d9c                	lw	a5,24(a1)
 800414c:	00f8aa23          	sw	a5,20(a7)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004150:	0015c703          	lbu	a4,1(a1)
 8004154:	4785                	li	a5,1
 8004156:	00f71863          	bne	a4,a5,8004166 <usb_transc_outxfer+0x60>
        if (transc->frame_num) {
 800415a:	0035c783          	lbu	a5,3(a1)
 800415e:	c79d                	beqz	a5,800418c <usb_transc_outxfer+0x86>
            epctl |= DEPCTL_SD1PID;
 8004160:	200007b7          	lui	a5,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004164:	8e5d                	or	a2,a2,a5
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_EPEN | DEPCTL_CNAK;
 8004166:	840007b7          	lui	a5,0x84000
 800416a:	8e5d                	or	a2,a2,a5

    udev->regs.er_out[ep_num]->DOEPCTL = epctl;
 800416c:	00c8a023          	sw	a2,0(a7)

    return status;
}
 8004170:	4501                	li	a0,0
 8004172:	8082                	ret
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;
 8004174:	fff68713          	addi	a4,a3,-1 # fffffff <__fini_array_end+0x7ff8227>
 8004178:	973e                	add	a4,a4,a5
 800417a:	02f75733          	divu	a4,a4,a5
        eplen |= packet_count << 19;
 800417e:	01371693          	slli	a3,a4,0x13
 8004182:	0106e833          	or	a6,a3,a6
        eplen |= packet_count * transc->max_len;
 8004186:	02f707b3          	mul	a5,a4,a5
 800418a:	b77d                	j	8004138 <usb_transc_outxfer+0x32>
            epctl |= DEPCTL_SD0PID;
 800418c:	100007b7          	lui	a5,0x10000
 8004190:	bfd1                	j	8004164 <usb_transc_outxfer+0x5e>

08004192 <usb_transc_stall>:
*/
usb_status usb_transc_stall (usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004192:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004194:	00058703          	lb	a4,0(a1)
 8004198:	8bbd                	andi	a5,a5,15
 800419a:	02075463          	bgez	a4,80041c2 <usb_transc_stall+0x30>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 800419e:	078a                	slli	a5,a5,0x2
 80041a0:	97aa                	add	a5,a5,a0
 80041a2:	4bdc                	lw	a5,20(a5)

        /* set the endpoint disable bit */
        if (*reg_addr & DEPCTL_EPEN) {
 80041a4:	4398                	lw	a4,0(a5)
 80041a6:	00075763          	bgez	a4,80041b4 <usb_transc_stall+0x22>
            *reg_addr |= DEPCTL_EPD;
 80041aa:	4398                	lw	a4,0(a5)
 80041ac:	400006b7          	lui	a3,0x40000
 80041b0:	8f55                	or	a4,a4,a3
 80041b2:	c398                	sw	a4,0(a5)
        /* set the endpoint stall bit */
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
    }

    /* set the endpoint stall bit */
    *reg_addr |= DEPCTL_STALL;
 80041b4:	4398                	lw	a4,0(a5)
 80041b6:	002006b7          	lui	a3,0x200

    return USB_OK;
}
 80041ba:	4501                	li	a0,0
    *reg_addr |= DEPCTL_STALL;
 80041bc:	8f55                	or	a4,a4,a3
 80041be:	c398                	sw	a4,0(a5)
}
 80041c0:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 80041c2:	07a1                	addi	a5,a5,8
 80041c4:	078a                	slli	a5,a5,0x2
 80041c6:	97aa                	add	a5,a5,a0
 80041c8:	47dc                	lw	a5,12(a5)
 80041ca:	b7ed                	j	80041b4 <usb_transc_stall+0x22>

080041cc <usb_transc_clrstall>:
*/
usb_status usb_transc_clrstall(usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 80041cc:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 80041ce:	00058703          	lb	a4,0(a1)
 80041d2:	8bbd                	andi	a5,a5,15
 80041d4:	02075a63          	bgez	a4,8004208 <usb_transc_clrstall+0x3c>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 80041d8:	078a                	slli	a5,a5,0x2
 80041da:	97aa                	add	a5,a5,a0
 80041dc:	4bdc                	lw	a5,20(a5)
    } else {
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 80041de:	4398                	lw	a4,0(a5)
    }

    /* clear the endpoint stall bits */
    *reg_addr &= ~DEPCTL_STALL;
 80041e0:	ffe006b7          	lui	a3,0xffe00
 80041e4:	16fd                	addi	a3,a3,-1
 80041e6:	8f75                	and	a4,a4,a3
 80041e8:	c398                	sw	a4,0(a5)

    /* reset data PID of the periodic endpoints */
    if ((transc->ep_type == USB_EPTYPE_INTR) || (transc->ep_type == USB_EPTYPE_BULK)) {
 80041ea:	0015c703          	lbu	a4,1(a1)
 80041ee:	4685                	li	a3,1
 80041f0:	1779                	addi	a4,a4,-2
 80041f2:	0ff77713          	andi	a4,a4,255
 80041f6:	00e6e763          	bltu	a3,a4,8004204 <usb_transc_clrstall+0x38>
        *reg_addr |= DEPCTL_SD0PID;
 80041fa:	4398                	lw	a4,0(a5)
 80041fc:	100006b7          	lui	a3,0x10000
 8004200:	8f55                	or	a4,a4,a3
 8004202:	c398                	sw	a4,0(a5)
    }

    return USB_OK;
}
 8004204:	4501                	li	a0,0
 8004206:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004208:	07a1                	addi	a5,a5,8
 800420a:	078a                	slli	a5,a5,0x2
 800420c:	97aa                	add	a5,a5,a0
 800420e:	47dc                	lw	a5,12(a5)
 8004210:	b7f9                	j	80041de <usb_transc_clrstall+0x12>

08004212 <usb_oepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004212:	455c                	lw	a5,12(a0)
 8004214:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004216:	4fdc                	lw	a5,28(a5)
 8004218:	8d7d                	and	a0,a0,a5

    return (value & DAEPINT_OEPITB) >> 16;
 800421a:	8141                	srli	a0,a0,0x10
}
 800421c:	03f57513          	andi	a0,a0,63
 8004220:	8082                	ret

08004222 <usb_oepintr_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = udev->regs.er_out[ep_num]->DOEPINTF;
 8004222:	05a1                	addi	a1,a1,8
 8004224:	058a                	slli	a1,a1,0x2
 8004226:	95aa                	add	a1,a1,a0
 8004228:	45dc                	lw	a5,12(a1)
 800422a:	4798                	lw	a4,8(a5)

    value &= udev->regs.dr->DOEPINTEN;
 800422c:	455c                	lw	a5,12(a0)
 800422e:	4bc8                	lw	a0,20(a5)

    return value;
}
 8004230:	8d79                	and	a0,a0,a4
 8004232:	8082                	ret

08004234 <usb_iepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_iepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004234:	455c                	lw	a5,12(a0)
 8004236:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004238:	4fdc                	lw	a5,28(a5)
 800423a:	8d7d                	and	a0,a0,a5
    
    return value & DAEPINT_IEPITB;
}
 800423c:	03f57513          	andi	a0,a0,63
 8004240:	8082                	ret

08004242 <usb_iepintr_read>:
*/
uint32_t usb_iepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = 0U, fifoemptymask = 0U, commonintmask = 0U;

    commonintmask = udev->regs.dr->DIEPINTEN;
 8004242:	4558                	lw	a4,12(a0)
 8004244:	4b14                	lw	a3,16(a4)
    fifoemptymask = udev->regs.dr->DIEPFEINTEN;
 8004246:	5b5c                	lw	a5,52(a4)

    /* check FIFO empty interrupt enable bit */
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;

    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004248:	00259713          	slli	a4,a1,0x2
 800424c:	953a                	add	a0,a0,a4
 800424e:	4958                	lw	a4,20(a0)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004250:	00b7d7b3          	srl	a5,a5,a1
 8004254:	079e                	slli	a5,a5,0x7
    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004256:	4708                	lw	a0,8(a4)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004258:	0ff7f793          	andi	a5,a5,255
 800425c:	8fd5                	or	a5,a5,a3

    return value;
}
 800425e:	8d7d                	and	a0,a0,a5
 8004260:	8082                	ret

08004262 <usb_ctlep_startout>:
    \retval     none
*/
void usb_ctlep_startout (usb_core_driver *udev)
{
    /* set OUT endpoint 0 receive length to 24 bytes, 1 packet and 3 setup packets */
    udev->regs.er_out[0]->DOEPLEN = DOEP0_TLEN(8U * 3U) | DOEP0_PCNT(1U) | DOEP0_STPCNT(3U);
 8004262:	555c                	lw	a5,44(a0)
 8004264:	60080737          	lui	a4,0x60080
 8004268:	0761                	addi	a4,a4,24
 800426a:	cb98                	sw	a4,16(a5)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 800426c:	00454683          	lbu	a3,4(a0)
 8004270:	4705                	li	a4,1
 8004272:	00e69a63          	bne	a3,a4,8004286 <usb_ctlep_startout+0x24>
        udev->regs.er_out[0]->DOEPDMAADDR = (uint32_t)&udev->dev.control.req;
 8004276:	42450513          	addi	a0,a0,1060
 800427a:	cbc8                	sw	a0,20(a5)

        /* endpoint enable */
        udev->regs.er_out[0]->DOEPCTL |= DEPCTL_EPACT | DEPCTL_EPEN;
 800427c:	4398                	lw	a4,0(a5)
 800427e:	800086b7          	lui	a3,0x80008
 8004282:	8f55                	or	a4,a4,a3
 8004284:	c398                	sw	a4,0(a5)
    }
}
 8004286:	8082                	ret

08004288 <usb_clock_active>:
    \param[out] none
    \retval     none
*/
void usb_clock_active (usb_core_driver *udev)
{
    if (udev->bp.low_power) {
 8004288:	00754783          	lbu	a5,7(a0)
 800428c:	cb91                	beqz	a5,80042a0 <usb_clock_active+0x18>
        if (udev->regs.dr->DSTAT & DSTAT_SPST) {
 800428e:	455c                	lw	a5,12(a0)
 8004290:	479c                	lw	a5,8(a5)
 8004292:	8b85                	andi	a5,a5,1
 8004294:	c791                	beqz	a5,80042a0 <usb_clock_active+0x18>
            /* un-gate USB Core clock */
            *udev->regs.PWRCLKCTL &= ~(PWRCLKCTL_SHCLK | PWRCLKCTL_SUCLK);
 8004296:	0c052703          	lw	a4,192(a0)
 800429a:	431c                	lw	a5,0(a4)
 800429c:	9bf1                	andi	a5,a5,-4
 800429e:	c31c                	sw	a5,0(a4)
        }
    }
}
 80042a0:	8082                	ret

080042a2 <usbd_isr>:
    \param[out] none
    \retval     none
*/
void usbd_isr (usb_core_driver *udev)
{
    if (HOST_MODE != (udev->regs.gr->GINTF & GINTF_COPM)) {
 80042a2:	451c                	lw	a5,8(a0)
 80042a4:	4bd8                	lw	a4,20(a5)
 80042a6:	8b05                	andi	a4,a4,1
 80042a8:	12071c63          	bnez	a4,80043e0 <usbd_isr+0x13e>
{
 80042ac:	1141                	addi	sp,sp,-16
 80042ae:	c226                	sw	s1,4(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 80042b0:	4bc4                	lw	s1,20(a5)
 80042b2:	4f9c                	lw	a5,24(a5)
{
 80042b4:	c606                	sw	ra,12(sp)
 80042b6:	c422                	sw	s0,8(sp)
 80042b8:	c04a                	sw	s2,0(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 80042ba:	8cfd                	and	s1,s1,a5

        /* there are no interrupts, avoid spurious interrupt */
        if (!intr) {
 80042bc:	10048c63          	beqz	s1,80043d4 <usbd_isr+0x132>
            return;
        }

        /* OUT endpoints interrupts */
        if (intr & GINTF_OEPIF) {
 80042c0:	00c49793          	slli	a5,s1,0xc
 80042c4:	842a                	mv	s0,a0
 80042c6:	0007d663          	bgez	a5,80042d2 <usbd_isr+0x30>
            usbd_int_epout (udev);
 80042ca:	00000097          	auipc	ra,0x0
 80042ce:	118080e7          	jalr	280(ra) # 80043e2 <usbd_int_epout>
        }

        /* IN endpoints interrupts */
        if (intr & GINTF_IEPIF) {
 80042d2:	00d49793          	slli	a5,s1,0xd
 80042d6:	0007d763          	bgez	a5,80042e4 <usbd_isr+0x42>
            usbd_int_epin (udev);
 80042da:	8522                	mv	a0,s0
 80042dc:	00000097          	auipc	ra,0x0
 80042e0:	204080e7          	jalr	516(ra) # 80044e0 <usbd_int_epin>
        }

        /* suspend interrupt */
        if (intr & GINTF_SP) {
 80042e4:	6785                	lui	a5,0x1
 80042e6:	80078793          	addi	a5,a5,-2048 # 800 <__dbg_stack_size+0x800>
 80042ea:	00f4f733          	and	a4,s1,a5
 80042ee:	c319                	beqz	a4,80042f4 <usbd_isr+0x52>
        /* enter DEEP_SLEEP mode with LDO in low power mode */
   //     pmu_to_deepsleepmode(PMU_LDO_LOWPOWER, WFI_CMD);
    //}

    /* clear interrupt */
    udev->regs.gr->GINTF = GINTF_SP;
 80042f0:	4418                	lw	a4,8(s0)
 80042f2:	cb5c                	sw	a5,20(a4)
        if (intr & GINTF_WKUPIF) {
 80042f4:	0004dc63          	bgez	s1,800430c <usbd_isr+0x6a>
            udev->dev.cur_status = udev->dev.backup_status;
 80042f8:	0c744783          	lbu	a5,199(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 80042fc:	80000737          	lui	a4,0x80000
            udev->dev.cur_status = udev->dev.backup_status;
 8004300:	0ff7f793          	andi	a5,a5,255
 8004304:	0cf40323          	sb	a5,198(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004308:	441c                	lw	a5,8(s0)
 800430a:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_MFIF) {
 800430c:	0024f793          	andi	a5,s1,2
 8004310:	c781                	beqz	a5,8004318 <usbd_isr+0x76>
            udev->regs.gr->GINTF = GINTF_MFIF;
 8004312:	441c                	lw	a5,8(s0)
 8004314:	4709                	li	a4,2
 8004316:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_SOF) {
 8004318:	0084f793          	andi	a5,s1,8
 800431c:	c7b1                	beqz	a5,8004368 <usbd_isr+0xc6>
            if (udev->dev.class_core->SOF) {
 800431e:	43042783          	lw	a5,1072(s0)
 8004322:	4f9c                	lw	a5,24(a5)
 8004324:	c399                	beqz	a5,800432a <usbd_isr+0x88>
                udev->dev.class_core->SOF(udev); 
 8004326:	8522                	mv	a0,s0
 8004328:	9782                	jalr	a5
            if (0U != setupc_flag) {
 800432a:	20000937          	lui	s2,0x20000
 800432e:	52090913          	addi	s2,s2,1312 # 20000520 <setupc_flag>
 8004332:	00094783          	lbu	a5,0(s2)
 8004336:	0ff7f793          	andi	a5,a5,255
 800433a:	c785                	beqz	a5,8004362 <usbd_isr+0xc0>
                setupc_flag ++;
 800433c:	00094783          	lbu	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004340:	4709                	li	a4,2
                setupc_flag ++;
 8004342:	0785                	addi	a5,a5,1
 8004344:	0ff7f793          	andi	a5,a5,255
 8004348:	00f90023          	sb	a5,0(s2)
                if (setupc_flag >= 3U) {
 800434c:	00094783          	lbu	a5,0(s2)
 8004350:	00f77963          	bgeu	a4,a5,8004362 <usbd_isr+0xc0>
                    usbd_setup_transc (udev);
 8004354:	8522                	mv	a0,s0
 8004356:	00001097          	auipc	ra,0x1
 800435a:	e62080e7          	jalr	-414(ra) # 80051b8 <usbd_setup_transc>
                    setupc_flag = 0U;
 800435e:	00090023          	sb	zero,0(s2)
            udev->regs.gr->GINTF = GINTF_SOF;
 8004362:	441c                	lw	a5,8(s0)
 8004364:	4721                	li	a4,8
 8004366:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_RXFNEIF) {
 8004368:	0104f793          	andi	a5,s1,16
 800436c:	c791                	beqz	a5,8004378 <usbd_isr+0xd6>
            usbd_int_rxfifo (udev);
 800436e:	8522                	mv	a0,s0
 8004370:	00000097          	auipc	ra,0x0
 8004374:	22c080e7          	jalr	556(ra) # 800459c <usbd_int_rxfifo>
        if (intr & GINTF_RST) {
 8004378:	01349793          	slli	a5,s1,0x13
 800437c:	0007d763          	bgez	a5,800438a <usbd_isr+0xe8>
            usbd_int_reset (udev);
 8004380:	8522                	mv	a0,s0
 8004382:	00000097          	auipc	ra,0x0
 8004386:	2e0080e7          	jalr	736(ra) # 8004662 <usbd_int_reset>
        if (intr & GINTF_ENUMFIF) {
 800438a:	01249793          	slli	a5,s1,0x12
 800438e:	0007d763          	bgez	a5,800439c <usbd_isr+0xfa>
            usbd_int_enumfinish (udev);
 8004392:	8522                	mv	a0,s0
 8004394:	00000097          	auipc	ra,0x0
 8004398:	3a0080e7          	jalr	928(ra) # 8004734 <usbd_int_enumfinish>
        if (intr & GINTF_ISOINCIF) {
 800439c:	00b49793          	slli	a5,s1,0xb
 80043a0:	0007dc63          	bgez	a5,80043b8 <usbd_isr+0x116>
            if (NULL != udev->dev.class_core->incomplete_isoc_in) {
 80043a4:	43042783          	lw	a5,1072(s0)
 80043a8:	4fdc                	lw	a5,28(a5)
 80043aa:	c399                	beqz	a5,80043b0 <usbd_isr+0x10e>
                udev->dev.class_core->incomplete_isoc_in(udev);
 80043ac:	8522                	mv	a0,s0
 80043ae:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOINCIF;
 80043b0:	441c                	lw	a5,8(s0)
 80043b2:	00100737          	lui	a4,0x100
 80043b6:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_ISOONCIF) {
 80043b8:	00a49793          	slli	a5,s1,0xa
 80043bc:	0007dc63          	bgez	a5,80043d4 <usbd_isr+0x132>
            if (NULL != udev->dev.class_core->incomplete_isoc_out) {
 80043c0:	43042783          	lw	a5,1072(s0)
 80043c4:	539c                	lw	a5,32(a5)
 80043c6:	c399                	beqz	a5,80043cc <usbd_isr+0x12a>
                udev->dev.class_core->incomplete_isoc_out(udev);
 80043c8:	8522                	mv	a0,s0
 80043ca:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOONCIF;
 80043cc:	441c                	lw	a5,8(s0)
 80043ce:	00200737          	lui	a4,0x200
 80043d2:	cbd8                	sw	a4,20(a5)
}
 80043d4:	40b2                	lw	ra,12(sp)
 80043d6:	4422                	lw	s0,8(sp)
 80043d8:	4492                	lw	s1,4(sp)
 80043da:	4902                	lw	s2,0(sp)
 80043dc:	0141                	addi	sp,sp,16
 80043de:	8082                	ret
 80043e0:	8082                	ret

080043e2 <usbd_int_epout>:
{
 80043e2:	7139                	addi	sp,sp,-64
 80043e4:	dc22                	sw	s0,56(sp)
 80043e6:	da26                	sw	s1,52(sp)
 80043e8:	d84a                	sw	s2,48(sp)
 80043ea:	d64e                	sw	s3,44(sp)
 80043ec:	d452                	sw	s4,40(sp)
 80043ee:	d256                	sw	s5,36(sp)
 80043f0:	d05a                	sw	s6,32(sp)
 80043f2:	ce5e                	sw	s7,28(sp)
 80043f4:	cc62                	sw	s8,24(sp)
 80043f6:	de06                	sw	ra,60(sp)
 80043f8:	ca66                	sw	s9,20(sp)
 80043fa:	842a                	mv	s0,a0
                                                                (eplen & DEPLEN_TLEN);
 80043fc:	00080a37          	lui	s4,0x80
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004400:	00000097          	auipc	ra,0x0
 8004404:	e12080e7          	jalr	-494(ra) # 8004212 <usb_oepintnum_read>
 8004408:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 800440a:	4481                	li	s1,0
                if ((0U == ep_num) && (0U != setupc_flag)) {
 800440c:	20000ab7          	lui	s5,0x20000
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004410:	4b21                	li	s6,8
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004412:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004414:	4b99                	li	s7,6
 8004416:	4c61                	li	s8,24
                                                                (eplen & DEPLEN_TLEN);
 8004418:	1a7d                	addi	s4,s4,-1
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 800441a:	02091063          	bnez	s2,800443a <usbd_int_epout+0x58>
}
 800441e:	50f2                	lw	ra,60(sp)
 8004420:	5462                	lw	s0,56(sp)
 8004422:	54d2                	lw	s1,52(sp)
 8004424:	5942                	lw	s2,48(sp)
 8004426:	59b2                	lw	s3,44(sp)
 8004428:	5a22                	lw	s4,40(sp)
 800442a:	5a92                	lw	s5,36(sp)
 800442c:	5b02                	lw	s6,32(sp)
 800442e:	4bf2                	lw	s7,28(sp)
 8004430:	4c62                	lw	s8,24(sp)
 8004432:	4cd2                	lw	s9,20(sp)
 8004434:	4505                	li	a0,1
 8004436:	6121                	addi	sp,sp,64
 8004438:	8082                	ret
        if (epintnum & 0x1) {
 800443a:	00197793          	andi	a5,s2,1
 800443e:	cfc9                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
            __IO uint32_t oepintr = usb_oepintr_read (udev, ep_num);
 8004440:	0ff4fc93          	andi	s9,s1,255
 8004444:	85e6                	mv	a1,s9
 8004446:	8522                	mv	a0,s0
 8004448:	00000097          	auipc	ra,0x0
 800444c:	dda080e7          	jalr	-550(ra) # 8004222 <usb_oepintr_read>
 8004450:	c42a                	sw	a0,8(sp)
            if (oepintr & DOEPINTF_TF) {
 8004452:	47a2                	lw	a5,8(sp)
 8004454:	8b85                	andi	a5,a5,1
 8004456:	cfa1                	beqz	a5,80044ae <usbd_int_epout+0xcc>
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004458:	00249793          	slli	a5,s1,0x2
 800445c:	97a2                	add	a5,a5,s0
 800445e:	57d8                	lw	a4,44(a5)
 8004460:	01372423          	sw	s3,8(a4) # 200008 <__stack_size+0x1ff008>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004464:	00444683          	lbu	a3,4(s0)
 8004468:	01369f63          	bne	a3,s3,8004486 <usbd_int_epout+0xa4>
                    __IO uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 800446c:	4b18                	lw	a4,16(a4)
 800446e:	c63a                	sw	a4,12(sp)
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004470:	03848733          	mul	a4,s1,s8
                                                                (eplen & DEPLEN_TLEN);
 8004474:	46b2                	lw	a3,12(sp)
 8004476:	0146f6b3          	and	a3,a3,s4
 800447a:	97ba                	add	a5,a5,a4
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 800447c:	2707d703          	lhu	a4,624(a5)
 8004480:	8f15                	sub	a4,a4,a3
 8004482:	26e7ae23          	sw	a4,636(a5)
                usbd_out_transc (udev, ep_num);
 8004486:	85e6                	mv	a1,s9
 8004488:	8522                	mv	a0,s0
 800448a:	00001097          	auipc	ra,0x1
 800448e:	dc2080e7          	jalr	-574(ra) # 800524c <usbd_out_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004492:	00444783          	lbu	a5,4(s0)
 8004496:	01379c63          	bne	a5,s3,80044ae <usbd_int_epout+0xcc>
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 800449a:	e891                	bnez	s1,80044ae <usbd_int_epout+0xcc>
 800449c:	42c44783          	lbu	a5,1068(s0)
 80044a0:	01779763          	bne	a5,s7,80044ae <usbd_int_epout+0xcc>
                        usb_ctlep_startout (udev);
 80044a4:	8522                	mv	a0,s0
 80044a6:	00000097          	auipc	ra,0x0
 80044aa:	dbc080e7          	jalr	-580(ra) # 8004262 <usb_ctlep_startout>
            if (oepintr & DOEPINTF_STPF) {
 80044ae:	47a2                	lw	a5,8(sp)
 80044b0:	8ba1                	andi	a5,a5,8
 80044b2:	c39d                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
                if ((0U == ep_num) && (0U != setupc_flag)) {
 80044b4:	e095                	bnez	s1,80044d8 <usbd_int_epout+0xf6>
 80044b6:	520a8c93          	addi	s9,s5,1312 # 20000520 <setupc_flag>
 80044ba:	000cc783          	lbu	a5,0(s9)
 80044be:	0ff7f793          	andi	a5,a5,255
 80044c2:	cb99                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
                    usbd_setup_transc (udev);
 80044c4:	8522                	mv	a0,s0
 80044c6:	00001097          	auipc	ra,0x1
 80044ca:	cf2080e7          	jalr	-782(ra) # 80051b8 <usbd_setup_transc>
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 80044ce:	545c                	lw	a5,44(s0)
                    setupc_flag = 0U;
 80044d0:	000c8023          	sb	zero,0(s9)
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 80044d4:	0167a423          	sw	s6,8(a5)
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 80044d8:	00195913          	srli	s2,s2,0x1
 80044dc:	0485                	addi	s1,s1,1
 80044de:	bf35                	j	800441a <usbd_int_epout+0x38>

080044e0 <usbd_int_epin>:
{
 80044e0:	7179                	addi	sp,sp,-48
 80044e2:	d422                	sw	s0,40(sp)
 80044e4:	d226                	sw	s1,36(sp)
 80044e6:	d04a                	sw	s2,32(sp)
 80044e8:	ce4e                	sw	s3,28(sp)
 80044ea:	cc52                	sw	s4,24(sp)
 80044ec:	ca56                	sw	s5,20(sp)
 80044ee:	d606                	sw	ra,44(sp)
 80044f0:	c85a                	sw	s6,16(sp)
 80044f2:	842a                	mv	s0,a0
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 80044f4:	00000097          	auipc	ra,0x0
 80044f8:	d40080e7          	jalr	-704(ra) # 8004234 <usb_iepintnum_read>
 80044fc:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 80044fe:	4481                	li	s1,0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004500:	08000a13          	li	s4,128
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004504:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004506:	4a95                	li	s5,5
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004508:	00091d63          	bnez	s2,8004522 <usbd_int_epin+0x42>
}
 800450c:	50b2                	lw	ra,44(sp)
 800450e:	5422                	lw	s0,40(sp)
 8004510:	5492                	lw	s1,36(sp)
 8004512:	5902                	lw	s2,32(sp)
 8004514:	49f2                	lw	s3,28(sp)
 8004516:	4a62                	lw	s4,24(sp)
 8004518:	4ad2                	lw	s5,20(sp)
 800451a:	4b42                	lw	s6,16(sp)
 800451c:	4505                	li	a0,1
 800451e:	6145                	addi	sp,sp,48
 8004520:	8082                	ret
        if (epintnum & 0x1U) {
 8004522:	00197793          	andi	a5,s2,1
 8004526:	c7bd                	beqz	a5,8004594 <usbd_int_epin+0xb4>
            __IO uint32_t iepintr = usb_iepintr_read (udev, ep_num);
 8004528:	0ff4fb13          	andi	s6,s1,255
 800452c:	85da                	mv	a1,s6
 800452e:	8522                	mv	a0,s0
 8004530:	00000097          	auipc	ra,0x0
 8004534:	d12080e7          	jalr	-750(ra) # 8004242 <usb_iepintr_read>
 8004538:	c62a                	sw	a0,12(sp)
            if (iepintr & DIEPINTF_TF) {
 800453a:	47b2                	lw	a5,12(sp)
 800453c:	8b85                	andi	a5,a5,1
 800453e:	cb9d                	beqz	a5,8004574 <usbd_int_epin+0x94>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004540:	00249793          	slli	a5,s1,0x2
 8004544:	97a2                	add	a5,a5,s0
 8004546:	4bdc                	lw	a5,20(a5)
                usbd_in_transc (udev, ep_num);
 8004548:	85da                	mv	a1,s6
 800454a:	8522                	mv	a0,s0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 800454c:	0137a423          	sw	s3,8(a5)
                usbd_in_transc (udev, ep_num);
 8004550:	00001097          	auipc	ra,0x1
 8004554:	de2080e7          	jalr	-542(ra) # 8005332 <usbd_in_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004558:	00444783          	lbu	a5,4(s0)
 800455c:	01379c63          	bne	a5,s3,8004574 <usbd_int_epin+0x94>
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004560:	e891                	bnez	s1,8004574 <usbd_int_epin+0x94>
 8004562:	42c44783          	lbu	a5,1068(s0)
 8004566:	01579763          	bne	a5,s5,8004574 <usbd_int_epin+0x94>
                        usb_ctlep_startout (udev);
 800456a:	8522                	mv	a0,s0
 800456c:	00000097          	auipc	ra,0x0
 8004570:	cf6080e7          	jalr	-778(ra) # 8004262 <usb_ctlep_startout>
            if (iepintr & DIEPINTF_TXFE) {
 8004574:	47b2                	lw	a5,12(sp)
 8004576:	0807f793          	andi	a5,a5,128
 800457a:	cf89                	beqz	a5,8004594 <usbd_int_epin+0xb4>
                usbd_emptytxfifo_write (udev, ep_num);
 800457c:	85a6                	mv	a1,s1
 800457e:	8522                	mv	a0,s0
 8004580:	00000097          	auipc	ra,0x0
 8004584:	21c080e7          	jalr	540(ra) # 800479c <usbd_emptytxfifo_write>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004588:	00249793          	slli	a5,s1,0x2
 800458c:	97a2                	add	a5,a5,s0
 800458e:	4bdc                	lw	a5,20(a5)
 8004590:	0147a423          	sw	s4,8(a5)
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004594:	00195913          	srli	s2,s2,0x1
 8004598:	0485                	addi	s1,s1,1
 800459a:	b7bd                	j	8004508 <usbd_int_epin+0x28>

0800459c <usbd_int_rxfifo>:
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 800459c:	451c                	lw	a5,8(a0)
{
 800459e:	1101                	addi	sp,sp,-32
    __IO uint32_t devrxstat = 0;
 80045a0:	c602                	sw	zero,12(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045a2:	4f98                	lw	a4,24(a5)
{
 80045a4:	cc22                	sw	s0,24(sp)
 80045a6:	ca26                	sw	s1,20(sp)
 80045a8:	c84a                	sw	s2,16(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045aa:	9b3d                	andi	a4,a4,-17
{
 80045ac:	ce06                	sw	ra,28(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045ae:	cf98                	sw	a4,24(a5)
    devrxstat = udev->regs.gr->GRSTATP;
 80045b0:	539c                	lw	a5,32(a5)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045b2:	4689                	li	a3,2
{
 80045b4:	892a                	mv	s2,a0
    devrxstat = udev->regs.gr->GRSTATP;
 80045b6:	c63e                	sw	a5,12(sp)
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 80045b8:	4432                	lw	s0,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045ba:	44b2                	lw	s1,12(sp)
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 80045bc:	4732                	lw	a4,12(sp)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045be:	47b2                	lw	a5,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045c0:	8091                	srli	s1,s1,0x4
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 80045c2:	883d                	andi	s0,s0,15
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045c4:	83c5                	srli	a5,a5,0x11
 80045c6:	8bbd                	andi	a5,a5,15
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045c8:	7ff4f493          	andi	s1,s1,2047
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045cc:	02d78263          	beq	a5,a3,80045f0 <usbd_int_rxfifo+0x54>
 80045d0:	4699                	li	a3,6
 80045d2:	04d78763          	beq	a5,a3,8004620 <usbd_int_rxfifo+0x84>
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045d6:	00892703          	lw	a4,8(s2)
}
 80045da:	40f2                	lw	ra,28(sp)
 80045dc:	4462                	lw	s0,24(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045de:	4f1c                	lw	a5,24(a4)
}
 80045e0:	44d2                	lw	s1,20(sp)
 80045e2:	4942                	lw	s2,16(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045e4:	0107e793          	ori	a5,a5,16
 80045e8:	cf1c                	sw	a5,24(a4)
}
 80045ea:	4505                	li	a0,1
 80045ec:	6105                	addi	sp,sp,32
 80045ee:	8082                	ret
            if (bcount > 0) {
 80045f0:	d0fd                	beqz	s1,80045d6 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, transc->xfer_buf, bcount);
 80045f2:	47f1                	li	a5,28
 80045f4:	02f40433          	mul	s0,s0,a5
 80045f8:	8626                	mv	a2,s1
 80045fa:	942a                	add	s0,s0,a0
 80045fc:	27442583          	lw	a1,628(s0)
 8004600:	0521                	addi	a0,a0,8
 8004602:	00000097          	auipc	ra,0x0
 8004606:	90e080e7          	jalr	-1778(ra) # 8003f10 <usb_rxfifo_read>
                transc->xfer_buf += bcount;
 800460a:	27442783          	lw	a5,628(s0)
 800460e:	97a6                	add	a5,a5,s1
 8004610:	26f42a23          	sw	a5,628(s0)
                transc->xfer_count += bcount;
 8004614:	27c42783          	lw	a5,636(s0)
 8004618:	94be                	add	s1,s1,a5
 800461a:	26942e23          	sw	s1,636(s0)
 800461e:	bf65                	j	80045d6 <usbd_int_rxfifo+0x3a>
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004620:	47f1                	li	a5,28
 8004622:	02f40433          	mul	s0,s0,a5
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004626:	833d                	srli	a4,a4,0xf
 8004628:	8b0d                	andi	a4,a4,3
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 800462a:	942a                	add	s0,s0,a0
 800462c:	26c44783          	lbu	a5,620(s0)
 8004630:	8bbd                	andi	a5,a5,15
 8004632:	8fd9                	or	a5,a5,a4
 8004634:	f3cd                	bnez	a5,80045d6 <usbd_int_rxfifo+0x3a>
 8004636:	47a1                	li	a5,8
 8004638:	f8f49fe3          	bne	s1,a5,80045d6 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, (uint8_t *)&udev->dev.control.req, bcount);
 800463c:	42450593          	addi	a1,a0,1060
 8004640:	4621                	li	a2,8
 8004642:	0521                	addi	a0,a0,8
 8004644:	00000097          	auipc	ra,0x0
 8004648:	8cc080e7          	jalr	-1844(ra) # 8003f10 <usb_rxfifo_read>
                transc->xfer_count += bcount;
 800464c:	27c42783          	lw	a5,636(s0)
                setupc_flag = 1;
 8004650:	4705                	li	a4,1
                transc->xfer_count += bcount;
 8004652:	07a1                	addi	a5,a5,8
 8004654:	26f42e23          	sw	a5,636(s0)
                setupc_flag = 1;
 8004658:	200007b7          	lui	a5,0x20000
 800465c:	52e78023          	sb	a4,1312(a5) # 20000520 <setupc_flag>
 8004660:	bf9d                	j	80045d6 <usbd_int_rxfifo+0x3a>

08004662 <usbd_int_reset>:
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004662:	4558                	lw	a4,12(a0)
{
 8004664:	1141                	addi	sp,sp,-16
 8004666:	c422                	sw	s0,8(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004668:	435c                	lw	a5,4(a4)
{
 800466a:	c606                	sw	ra,12(sp)
 800466c:	c226                	sw	s1,4(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 800466e:	9bf9                	andi	a5,a5,-2
{
 8004670:	c04a                	sw	s2,0(sp)
 8004672:	842a                	mv	s0,a0
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004674:	c35c                	sw	a5,4(a4)
    usb_txfifo_flush (&udev->regs, 0);
 8004676:	4581                	li	a1,0
 8004678:	0521                	addi	a0,a0,8
 800467a:	00000097          	auipc	ra,0x0
 800467e:	8c8080e7          	jalr	-1848(ra) # 8003f42 <usb_txfifo_flush>
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004682:	00344603          	lbu	a2,3(s0)
 8004686:	01440793          	addi	a5,s0,20
 800468a:	4701                	li	a4,0
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800468c:	0ff00693          	li	a3,255
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004690:	08c76b63          	bltu	a4,a2,8004726 <usbd_int_reset+0xc4>
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8004694:	445c                	lw	a5,12(s0)
 8004696:	577d                	li	a4,-1
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8004698:	4485                	li	s1,1
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 800469a:	cf98                	sw	a4,24(a5)
    udev->regs.dr->DAEPINTEN = 1U | (1U << 16);
 800469c:	6741                	lui	a4,0x10
 800469e:	0705                	addi	a4,a4,1
 80046a0:	cfd8                	sw	a4,28(a5)
    udev->regs.dr->DOEPINTEN = DOEPINTEN_STPFEN | DOEPINTEN_TFEN;
 80046a2:	4725                	li	a4,9
 80046a4:	cbd8                	sw	a4,20(a5)
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 80046a6:	cb84                	sw	s1,16(a5)
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 80046a8:	4398                	lw	a4,0(a5)
    usb_ctlep_startout (udev);
 80046aa:	8522                	mv	a0,s0
    udev->dev.transc_out[0] = (usb_transc) {
 80046ac:	04000913          	li	s2,64
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 80046b0:	80f77713          	andi	a4,a4,-2033
 80046b4:	c398                	sw	a4,0(a5)
    udev->dev.dev_addr = 0U;
 80046b6:	0c0402a3          	sb	zero,197(s0)
    usb_ctlep_startout (udev);
 80046ba:	00000097          	auipc	ra,0x0
 80046be:	ba8080e7          	jalr	-1112(ra) # 8004262 <usb_ctlep_startout>
    udev->regs.gr->GINTF = GINTF_RST;
 80046c2:	441c                	lw	a5,8(s0)
 80046c4:	6705                	lui	a4,0x1
    udev->dev.transc_out[0] = (usb_transc) {
 80046c6:	4671                	li	a2,28
    udev->regs.gr->GINTF = GINTF_RST;
 80046c8:	cbd8                	sw	a4,20(a5)
    udev->dev.transc_out[0] = (usb_transc) {
 80046ca:	26c40793          	addi	a5,s0,620
 80046ce:	853e                	mv	a0,a5
 80046d0:	4581                	li	a1,0
 80046d2:	00003097          	auipc	ra,0x3
 80046d6:	b08080e7          	jalr	-1272(ra) # 80071da <memset>
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 80046da:	85aa                	mv	a1,a0
    udev->dev.transc_out[0] = (usb_transc) {
 80046dc:	27241823          	sh	s2,624(s0)
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 80046e0:	8522                	mv	a0,s0
 80046e2:	00000097          	auipc	ra,0x0
 80046e6:	89c080e7          	jalr	-1892(ra) # 8003f7e <usb_transc_active>
    udev->dev.transc_in[0] = (usb_transc) {
 80046ea:	0c840793          	addi	a5,s0,200
 80046ee:	4671                	li	a2,28
 80046f0:	4581                	li	a1,0
 80046f2:	853e                	mv	a0,a5
 80046f4:	00003097          	auipc	ra,0x3
 80046f8:	ae6080e7          	jalr	-1306(ra) # 80071da <memset>
 80046fc:	f8000713          	li	a4,-128
 8004700:	0d241623          	sh	s2,204(s0)
 8004704:	0ce40423          	sb	a4,200(s0)
    usb_transc_active (udev, &udev->dev.transc_in[0]);
 8004708:	85aa                	mv	a1,a0
 800470a:	8522                	mv	a0,s0
 800470c:	00000097          	auipc	ra,0x0
 8004710:	872080e7          	jalr	-1934(ra) # 8003f7e <usb_transc_active>
}
 8004714:	40b2                	lw	ra,12(sp)
    udev->dev.cur_status = USBD_DEFAULT;
 8004716:	0c940323          	sb	s1,198(s0)
}
 800471a:	4422                	lw	s0,8(sp)
 800471c:	4492                	lw	s1,4(sp)
 800471e:	4902                	lw	s2,0(sp)
 8004720:	4505                	li	a0,1
 8004722:	0141                	addi	sp,sp,16
 8004724:	8082                	ret
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 8004726:	438c                	lw	a1,0(a5)
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004728:	0705                	addi	a4,a4,1
 800472a:	0791                	addi	a5,a5,4
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800472c:	c594                	sw	a3,8(a1)
        udev->regs.er_out[i]->DOEPINTF = 0xFFU;
 800472e:	4bcc                	lw	a1,20(a5)
 8004730:	c594                	sw	a3,8(a1)
 8004732:	bfb9                	j	8004690 <usbd_int_reset+0x2e>

08004734 <usbd_int_enumfinish>:
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 8004734:	455c                	lw	a5,12(a0)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 8004736:	7671                	lui	a2,0xffffc
 8004738:	3ff60613          	addi	a2,a2,1023 # ffffc3ff <_sp+0xdfff43ff>
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 800473c:	4798                	lw	a4,8(a5)
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 800473e:	43d4                	lw	a3,4(a5)
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 8004740:	8305                	srli	a4,a4,0x1
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 8004742:	eff6f693          	andi	a3,a3,-257
 8004746:	c3d4                	sw	a3,4(a5)
    udev->regs.dr->DCTL |= DCTL_CGINAK;
 8004748:	43d4                	lw	a3,4(a5)
 800474a:	1006e693          	ori	a3,a3,256
 800474e:	c3d4                	sw	a3,4(a5)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 8004750:	451c                	lw	a5,8(a0)
 8004752:	47d4                	lw	a3,12(a5)
 8004754:	8ef1                	and	a3,a3,a2
 8004756:	c7d4                	sw	a3,12(a5)
    if (USB_SPEED[enum_speed] == USB_SPEED_HIGH) {
 8004758:	00377693          	andi	a3,a4,3
 800475c:	08008737          	lui	a4,0x8008
 8004760:	dd070713          	addi	a4,a4,-560 # 8007dd0 <USB_SPEED>
 8004764:	9736                	add	a4,a4,a3
 8004766:	00074703          	lbu	a4,0(a4)
 800476a:	468d                	li	a3,3
 800476c:	00d71e63          	bne	a4,a3,8004788 <usbd_int_enumfinish+0x54>
        udev->bp.core_speed = USB_SPEED_HIGH;
 8004770:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x09 << 10;
 8004774:	47d8                	lw	a4,12(a5)
 8004776:	6689                	lui	a3,0x2
 8004778:	40068693          	addi	a3,a3,1024 # 2400 <__stack_size+0x1400>
 800477c:	8f55                	or	a4,a4,a3
 800477e:	c7d8                	sw	a4,12(a5)
    udev->regs.gr->GINTF = GINTF_ENUMFIF;
 8004780:	6709                	lui	a4,0x2
 8004782:	cbd8                	sw	a4,20(a5)
}
 8004784:	4505                	li	a0,1
 8004786:	8082                	ret
        udev->bp.core_speed = USB_SPEED_FULL;
 8004788:	4709                	li	a4,2
 800478a:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x05 << 10;
 800478e:	47d8                	lw	a4,12(a5)
 8004790:	6685                	lui	a3,0x1
 8004792:	40068693          	addi	a3,a3,1024 # 1400 <__stack_size+0x400>
 8004796:	8f55                	or	a4,a4,a3
 8004798:	c7d8                	sw	a4,12(a5)
 800479a:	b7dd                	j	8004780 <usbd_int_enumfinish+0x4c>

0800479c <usbd_emptytxfifo_write>:
    uint32_t len = 0;
    uint32_t word_count = 0;

    transc = &udev->dev.transc_in[ep_num];

    len = transc->xfer_len - transc->xfer_count;
 800479c:	47f1                	li	a5,28
 800479e:	02f587b3          	mul	a5,a1,a5
{
 80047a2:	7179                	addi	sp,sp,-48
 80047a4:	ce4e                	sw	s3,28(sp)
 80047a6:	d606                	sw	ra,44(sp)
 80047a8:	d422                	sw	s0,40(sp)
 80047aa:	d226                	sw	s1,36(sp)
 80047ac:	d04a                	sw	s2,32(sp)
 80047ae:	cc52                	sw	s4,24(sp)
 80047b0:	ca56                	sw	s5,20(sp)
 80047b2:	c85a                	sw	s6,16(sp)
    len = transc->xfer_len - transc->xfer_count;
 80047b4:	97aa                	add	a5,a5,a0
 80047b6:	0d47a703          	lw	a4,212(a5)
 80047ba:	0d87a683          	lw	a3,216(a5)

    /* get the data length to write */
    if (len > transc->max_len) {
 80047be:	0cc7d783          	lhu	a5,204(a5)
{
 80047c2:	c65e                	sw	s7,12(sp)
 80047c4:	c462                	sw	s8,8(sp)
    len = transc->xfer_len - transc->xfer_count;
 80047c6:	8f15                	sub	a4,a4,a3
{
 80047c8:	89aa                	mv	s3,a0
        len = transc->max_len;
    }

    word_count = (len + 3) / 4;
 80047ca:	00f77363          	bgeu	a4,a5,80047d0 <usbd_emptytxfifo_write+0x34>
 80047ce:	87ba                	mv	a5,a4

    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
        (transc->xfer_count < transc->xfer_len)) {
 80047d0:	4471                	li	s0,28
 80047d2:	02858433          	mul	s0,a1,s0
        transc->xfer_buf += len;
        transc->xfer_count += len;

        if (transc->xfer_count == transc->xfer_len) {
            /* disable the device endpoint FIFO empty interrupt */
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047d6:	4a85                	li	s5,1
    word_count = (len + 3) / 4;
 80047d8:	078d                	addi	a5,a5,3
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047da:	00ba9ab3          	sll	s5,s5,a1
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047de:	00259b13          	slli	s6,a1,0x2
 80047e2:	6bc1                	lui	s7,0x10
    word_count = (len + 3) / 4;
 80047e4:	0027da13          	srli	s4,a5,0x2
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047e8:	fffaca93          	not	s5,s5
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047ec:	9b4e                	add	s6,s6,s3
 80047ee:	1bfd                	addi	s7,s7,-1
        (transc->xfer_count < transc->xfer_len)) {
 80047f0:	944e                	add	s0,s0,s3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80047f2:	0ff5f913          	andi	s2,a1,255
 80047f6:	00898c13          	addi	s8,s3,8
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047fa:	014b2783          	lw	a5,20(s6)
 80047fe:	4f98                	lw	a4,24(a5)
 8004800:	01777733          	and	a4,a4,s7
 8004804:	00ea7863          	bgeu	s4,a4,8004814 <usbd_emptytxfifo_write+0x78>
        (transc->xfer_count < transc->xfer_len)) {
 8004808:	0d842703          	lw	a4,216(s0)
 800480c:	0d442783          	lw	a5,212(s0)
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 8004810:	00f76f63          	bltu	a4,a5,800482e <usbd_emptytxfifo_write+0x92>
        }
    }

    return 1;
}
 8004814:	50b2                	lw	ra,44(sp)
 8004816:	5422                	lw	s0,40(sp)
 8004818:	5492                	lw	s1,36(sp)
 800481a:	5902                	lw	s2,32(sp)
 800481c:	49f2                	lw	s3,28(sp)
 800481e:	4a62                	lw	s4,24(sp)
 8004820:	4ad2                	lw	s5,20(sp)
 8004822:	4b42                	lw	s6,16(sp)
 8004824:	4bb2                	lw	s7,12(sp)
 8004826:	4c22                	lw	s8,8(sp)
 8004828:	4505                	li	a0,1
 800482a:	6145                	addi	sp,sp,48
 800482c:	8082                	ret
        if (len > transc->max_len) {
 800482e:	0cc45483          	lhu	s1,204(s0)
        len = transc->xfer_len - transc->xfer_count;
 8004832:	8f99                	sub	a5,a5,a4
        if (len > transc->max_len) {
 8004834:	0097f363          	bgeu	a5,s1,800483a <usbd_emptytxfifo_write+0x9e>
 8004838:	84be                	mv	s1,a5
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 800483a:	0d042583          	lw	a1,208(s0)
 800483e:	01049693          	slli	a3,s1,0x10
        word_count = (len + 3) / 4;
 8004842:	00348793          	addi	a5,s1,3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8004846:	82c1                	srli	a3,a3,0x10
 8004848:	864a                	mv	a2,s2
 800484a:	8562                	mv	a0,s8
        word_count = (len + 3) / 4;
 800484c:	0027da13          	srli	s4,a5,0x2
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8004850:	fffff097          	auipc	ra,0xfffff
 8004854:	686080e7          	jalr	1670(ra) # 8003ed6 <usb_txfifo_write>
        transc->xfer_count += len;
 8004858:	0d842783          	lw	a5,216(s0)
        transc->xfer_buf += len;
 800485c:	0d042703          	lw	a4,208(s0)
 8004860:	9726                	add	a4,a4,s1
        transc->xfer_count += len;
 8004862:	94be                	add	s1,s1,a5
        if (transc->xfer_count == transc->xfer_len) {
 8004864:	0d442783          	lw	a5,212(s0)
        transc->xfer_buf += len;
 8004868:	0ce42823          	sw	a4,208(s0)
        transc->xfer_count += len;
 800486c:	0c942c23          	sw	s1,216(s0)
        if (transc->xfer_count == transc->xfer_len) {
 8004870:	f8f495e3          	bne	s1,a5,80047fa <usbd_emptytxfifo_write+0x5e>
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8004874:	00c9a783          	lw	a5,12(s3)
 8004878:	5bd8                	lw	a4,52(a5)
 800487a:	01577733          	and	a4,a4,s5
 800487e:	dbd8                	sw	a4,52(a5)
 8004880:	bfad                	j	80047fa <usbd_emptytxfifo_write+0x5e>

08004882 <usb_udelay>:
    \retval     none
*/
static void hw_delay(uint32_t ntime, uint8_t unit)
{
    if(unit == TIM_USEC_DELAY){
        usb_delay_1us(ntime);
 8004882:	00000317          	auipc	t1,0x0
 8004886:	0e030067          	jr	224(t1) # 8004962 <usb_delay_1us>

0800488a <USBFS_IRQHandler>:
    \retval     none
*/
void USBFS_IRQHandler (void)
{ 
    //DEBUG_PIN_ON();
    usbd_isr (&USB_OTG_dev);
 800488a:	20000537          	lui	a0,0x20000
 800488e:	04450513          	addi	a0,a0,68 # 20000044 <USB_OTG_dev>
 8004892:	00000317          	auipc	t1,0x0
 8004896:	a1030067          	jr	-1520(t1) # 80042a2 <usbd_isr>

0800489a <USBFS_WKUP_IRQHandler>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void USBFS_WKUP_IRQHandler(void)
{
 800489a:	1141                	addi	sp,sp,-16
 800489c:	c422                	sw	s0,8(sp)
    //DEBUG_PIN_ON();
    if (USB_OTG_dev.bp.low_power) {
 800489e:	20000437          	lui	s0,0x20000
{
 80048a2:	c606                	sw	ra,12(sp)
    if (USB_OTG_dev.bp.low_power) {
 80048a4:	04440793          	addi	a5,s0,68 # 20000044 <USB_OTG_dev>
 80048a8:	0077c783          	lbu	a5,7(a5)
 80048ac:	cb8d                	beqz	a5,80048de <USBFS_WKUP_IRQHandler+0x44>
        //SystemInit();
        set_usb_clock_96m_hxtal();
 80048ae:	00000097          	auipc	ra,0x0
 80048b2:	128080e7          	jalr	296(ra) # 80049d6 <set_usb_clock_96m_hxtal>
        rcu_usb_clock_config(usbfs_prescaler);
 80048b6:	200007b7          	lui	a5,0x20000
 80048ba:	5247a503          	lw	a0,1316(a5) # 20000524 <usbfs_prescaler>
 80048be:	ffffd097          	auipc	ra,0xffffd
 80048c2:	85e080e7          	jalr	-1954(ra) # 800111c <rcu_usb_clock_config>

        rcu_periph_clock_enable(RCU_USBFS);
 80048c6:	50c00513          	li	a0,1292
 80048ca:	ffffc097          	auipc	ra,0xffffc
 80048ce:	7c6080e7          	jalr	1990(ra) # 8001090 <rcu_periph_clock_enable>

        usb_clock_active(&USB_OTG_dev);
 80048d2:	04440513          	addi	a0,s0,68
 80048d6:	00000097          	auipc	ra,0x0
 80048da:	9b2080e7          	jalr	-1614(ra) # 8004288 <usb_clock_active>
    }

    exti_interrupt_flag_clear(EXTI_18);
}
 80048de:	4422                	lw	s0,8(sp)
 80048e0:	40b2                	lw	ra,12(sp)
    exti_interrupt_flag_clear(EXTI_18);
 80048e2:	00040537          	lui	a0,0x40
}
 80048e6:	0141                	addi	sp,sp,16
    exti_interrupt_flag_clear(EXTI_18);
 80048e8:	ffffc317          	auipc	t1,0xffffc
 80048ec:	6e830067          	jr	1768(t1) # 8000fd0 <exti_interrupt_flag_clear>

080048f0 <usb_delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void usb_delay_1ms(uint32_t count)
{
 80048f0:	1101                	addi	sp,sp,-32
 80048f2:	cc22                	sw	s0,24(sp)
 80048f4:	c64e                	sw	s3,12(sp)
 80048f6:	c452                	sw	s4,8(sp)
 80048f8:	ce06                	sw	ra,28(sp)
 80048fa:	ca26                	sw	s1,20(sp)
 80048fc:	c84a                	sw	s2,16(sp)
 80048fe:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8004900:	ffffd097          	auipc	ra,0xffffd
 8004904:	310080e7          	jalr	784(ra) # 8001c10 <get_timer_value>
 8004908:	8a2a                	mv	s4,a0
 800490a:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800490c:	ffffd097          	auipc	ra,0xffffd
 8004910:	304080e7          	jalr	772(ra) # 8001c10 <get_timer_value>
 8004914:	84aa                	mv	s1,a0
 8004916:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 8004918:	00aa1463          	bne	s4,a0,8004920 <usb_delay_1ms+0x30>
 800491c:	feb408e3          	beq	s0,a1,800490c <usb_delay_1ms+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004920:	6405                	lui	s0,0x1
 8004922:	20000a37          	lui	s4,0x20000
 8004926:	fa040413          	addi	s0,s0,-96 # fa0 <__dbg_stack_size+0xfa0>
	delta_mtime = get_timer_value() - start_mtime;
 800492a:	ffffd097          	auipc	ra,0xffffd
 800492e:	2e6080e7          	jalr	742(ra) # 8001c10 <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004932:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 8004936:	40950733          	sub	a4,a0,s1
 800493a:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 800493e:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 8004942:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004946:	033787b3          	mul	a5,a5,s3
 800494a:	00a59463          	bne	a1,a0,8004952 <usb_delay_1ms+0x62>
 800494e:	fcf76ee3          	bltu	a4,a5,800492a <usb_delay_1ms+0x3a>
}
 8004952:	40f2                	lw	ra,28(sp)
 8004954:	4462                	lw	s0,24(sp)
 8004956:	44d2                	lw	s1,20(sp)
 8004958:	4942                	lw	s2,16(sp)
 800495a:	49b2                	lw	s3,12(sp)
 800495c:	4a22                	lw	s4,8(sp)
 800495e:	6105                	addi	sp,sp,32
 8004960:	8082                	ret

08004962 <usb_delay_1us>:

void usb_delay_1us(uint32_t count)
{
 8004962:	1101                	addi	sp,sp,-32
 8004964:	cc22                	sw	s0,24(sp)
 8004966:	c64e                	sw	s3,12(sp)
 8004968:	c452                	sw	s4,8(sp)
 800496a:	ce06                	sw	ra,28(sp)
 800496c:	ca26                	sw	s1,20(sp)
 800496e:	c84a                	sw	s2,16(sp)
 8004970:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8004972:	ffffd097          	auipc	ra,0xffffd
 8004976:	29e080e7          	jalr	670(ra) # 8001c10 <get_timer_value>
 800497a:	8a2a                	mv	s4,a0
 800497c:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800497e:	ffffd097          	auipc	ra,0xffffd
 8004982:	292080e7          	jalr	658(ra) # 8001c10 <get_timer_value>
 8004986:	84aa                	mv	s1,a0
 8004988:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 800498a:	00aa1463          	bne	s4,a0,8004992 <usb_delay_1us+0x30>
 800498e:	feb408e3          	beq	s0,a1,800497e <usb_delay_1us+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8004992:	003d1437          	lui	s0,0x3d1
 8004996:	20000a37          	lui	s4,0x20000
 800499a:	90040413          	addi	s0,s0,-1792 # 3d0900 <__stack_size+0x3cf900>
	delta_mtime = get_timer_value() - start_mtime;
 800499e:	ffffd097          	auipc	ra,0xffffd
 80049a2:	272080e7          	jalr	626(ra) # 8001c10 <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049a6:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 80049aa:	40950733          	sub	a4,a0,s1
 80049ae:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049b2:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 80049b6:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049ba:	033787b3          	mul	a5,a5,s3
 80049be:	00a59463          	bne	a1,a0,80049c6 <usb_delay_1us+0x64>
 80049c2:	fcf76ee3          	bltu	a4,a5,800499e <usb_delay_1us+0x3c>
 80049c6:	40f2                	lw	ra,28(sp)
 80049c8:	4462                	lw	s0,24(sp)
 80049ca:	44d2                	lw	s1,20(sp)
 80049cc:	4942                	lw	s2,16(sp)
 80049ce:	49b2                	lw	s3,12(sp)
 80049d0:	4a22                	lw	s4,8(sp)
 80049d2:	6105                	addi	sp,sp,32
 80049d4:	8082                	ret

080049d6 <set_usb_clock_96m_hxtal>:

void set_usb_clock_96m_hxtal(void){

    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 80049d6:	400217b7          	lui	a5,0x40021
 80049da:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 80049dc:	e0ff06b7          	lui	a3,0xe0ff0
 80049e0:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 80049e2:	00176713          	ori	a4,a4,1
 80049e6:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 80049e8:	43d8                	lw	a4,4(a5)
 80049ea:	8f75                	and	a4,a4,a3
 80049ec:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 80049ee:	4398                	lw	a4,0(a5)
 80049f0:	fef706b7          	lui	a3,0xfef70
 80049f4:	16fd                	addi	a3,a3,-1
 80049f6:	8f75                	and	a4,a4,a3
 80049f8:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 80049fa:	4398                	lw	a4,0(a5)
 80049fc:	fffc06b7          	lui	a3,0xfffc0
 8004a00:	16fd                	addi	a3,a3,-1
 8004a02:	8f75                	and	a4,a4,a3
 8004a04:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8004a06:	43d8                	lw	a4,4(a5)
 8004a08:	df0106b7          	lui	a3,0xdf010
 8004a0c:	16fd                	addi	a3,a3,-1
 8004a0e:	8f75                	and	a4,a4,a3
 8004a10:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8004a12:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8004a16:	4398                	lw	a4,0(a5)
 8004a18:	eaf706b7          	lui	a3,0xeaf70
 8004a1c:	16fd                	addi	a3,a3,-1
 8004a1e:	8f75                	and	a4,a4,a3
 8004a20:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8004a22:	00ff0737          	lui	a4,0xff0
 8004a26:	c798                	sw	a4,8(a5)

    uint32_t timeout = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8004a28:	4394                	lw	a3,0(a5)
 8004a2a:	6741                	lui	a4,0x10
 8004a2c:	8ed9                	or	a3,a3,a4
 8004a2e:	c394                	sw	a3,0(a5)
 8004a30:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8004a34:	40021737          	lui	a4,0x40021
 8004a38:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8004a3a:	00e69613          	slli	a2,a3,0xe
 8004a3e:	00064463          	bltz	a2,8004a46 <set_usb_clock_96m_hxtal+0x70>
 8004a42:	17fd                	addi	a5,a5,-1
 8004a44:	fbf5                	bnez	a5,8004a38 <set_usb_clock_96m_hxtal+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8004a46:	400217b7          	lui	a5,0x40021
 8004a4a:	4398                	lw	a4,0(a5)
 8004a4c:	00e71693          	slli	a3,a4,0xe
 8004a50:	0006c363          	bltz	a3,8004a56 <set_usb_clock_96m_hxtal+0x80>
        while(1){
        }
 8004a54:	a001                	j	8004a54 <set_usb_clock_96m_hxtal+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8004a56:	43d8                	lw	a4,4(a5)
        while((RCU_CTL & RCU_CTL_PLL1STB) == 0){
        }

    }else if(HXTAL_VALUE==8000000){
        /* CK_PLL = (CK_PREDIV0) * 24 = 96 MHz */
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8004a58:	dfc406b7          	lui	a3,0xdfc40
 8004a5c:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8004a5e:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8004a60:	43d8                	lw	a4,4(a5)
 8004a62:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8004a64:	43d8                	lw	a4,4(a5)
 8004a66:	40076713          	ori	a4,a4,1024
 8004a6a:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8004a6c:	43d8                	lw	a4,4(a5)
 8004a6e:	8f75                	and	a4,a4,a3
 8004a70:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL24);
 8004a72:	43d8                	lw	a4,4(a5)
 8004a74:	201d06b7          	lui	a3,0x201d0
 8004a78:	8f55                	or	a4,a4,a3
 8004a7a:	c3d8                	sw	a4,4(a5)

		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8004a7c:	57d8                	lw	a4,44(a5)
 8004a7e:	76bd                	lui	a3,0xfffef
 8004a80:	8f75                	and	a4,a4,a3
 8004a82:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8004a84:	57d8                	lw	a4,44(a5)
    }

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8004a86:	010006b7          	lui	a3,0x1000
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8004a8a:	00176713          	ori	a4,a4,1
 8004a8e:	d7d8                	sw	a4,44(a5)
    RCU_CTL |= RCU_CTL_PLLEN;
 8004a90:	4398                	lw	a4,0(a5)
 8004a92:	8f55                	or	a4,a4,a3
 8004a94:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8004a96:	400217b7          	lui	a5,0x40021
 8004a9a:	4398                	lw	a4,0(a5)
 8004a9c:	00671693          	slli	a3,a4,0x6
 8004aa0:	fe06dde3          	bgez	a3,8004a9a <set_usb_clock_96m_hxtal+0xc4>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8004aa4:	43d8                	lw	a4,4(a5)
 8004aa6:	9b71                	andi	a4,a4,-4
 8004aa8:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8004aaa:	43d8                	lw	a4,4(a5)
 8004aac:	00276713          	ori	a4,a4,2
 8004ab0:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8004ab2:	40021737          	lui	a4,0x40021
 8004ab6:	435c                	lw	a5,4(a4)
 8004ab8:	8ba1                	andi	a5,a5,8
 8004aba:	dff5                	beqz	a5,8004ab6 <set_usb_clock_96m_hxtal+0xe0>
    }
    //SystemCoreClock = 96000000;
    SystemCoreClockUpdate();
 8004abc:	ffffd317          	auipc	t1,0xffffd
 8004ac0:	f9430067          	jr	-108(t1) # 8001a50 <SystemCoreClockUpdate>

08004ac4 <usbd_ep_recev>:
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_recev (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004ac4:	07f5f793          	andi	a5,a1,127
 8004ac8:	45f1                	li	a1,28
 8004aca:	02b787b3          	mul	a5,a5,a1
{
 8004ace:	1141                	addi	sp,sp,-16
 8004ad0:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ad2:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004ad4:	26c78593          	addi	a1,a5,620 # 4002126c <_sp+0x2001926c>
    transc->xfer_buf = pbuf;
 8004ad8:	97aa                	add	a5,a5,a0
 8004ada:	26c7aa23          	sw	a2,628(a5)
    transc->xfer_len = len;
 8004ade:	26d7ac23          	sw	a3,632(a5)
    transc->xfer_count = 0;
 8004ae2:	2607ae23          	sw	zero,636(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ae6:	00454683          	lbu	a3,4(a0) # 40004 <__stack_size+0x3f004>
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004aea:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004aec:	00e69463          	bne	a3,a4,8004af4 <usbd_ep_recev+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 8004af0:	28c7a223          	sw	a2,644(a5)
    }

    /* start the transfer */
    usb_transc_outxfer (udev, transc);
 8004af4:	fffff097          	auipc	ra,0xfffff
 8004af8:	612080e7          	jalr	1554(ra) # 8004106 <usb_transc_outxfer>

    return 0;
}
 8004afc:	40b2                	lw	ra,12(sp)
 8004afe:	4501                	li	a0,0
 8004b00:	0141                	addi	sp,sp,16
 8004b02:	8082                	ret

08004b04 <usbd_ep_send>:
    \param[out] none
    \retval     none
*/
uint32_t  usbd_ep_send (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b04:	07f5f793          	andi	a5,a1,127
 8004b08:	45f1                	li	a1,28
 8004b0a:	02b787b3          	mul	a5,a5,a1
{
 8004b0e:	1141                	addi	sp,sp,-16
 8004b10:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b12:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b14:	0c878593          	addi	a1,a5,200
    transc->xfer_buf = pbuf;
 8004b18:	97aa                	add	a5,a5,a0
 8004b1a:	0cc7a823          	sw	a2,208(a5)
    transc->xfer_len = len;
 8004b1e:	0cd7aa23          	sw	a3,212(a5)
    transc->xfer_count = 0;
 8004b22:	0c07ac23          	sw	zero,216(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b26:	00454683          	lbu	a3,4(a0)
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b2a:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b2c:	00e69463          	bne	a3,a4,8004b34 <usbd_ep_send+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 8004b30:	0ec7a023          	sw	a2,224(a5)
    }

    /* start the transfer */
    usb_transc_inxfer (udev, transc);
 8004b34:	fffff097          	auipc	ra,0xfffff
 8004b38:	4e8080e7          	jalr	1256(ra) # 800401c <usb_transc_inxfer>

    return 0;
}
 8004b3c:	40b2                	lw	ra,12(sp)
 8004b3e:	4501                	li	a0,0
 8004b40:	0141                	addi	sp,sp,16
 8004b42:	8082                	ret

08004b44 <usbd_ep_stall>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall (usb_core_driver *udev, uint8_t ep_addr)
{
 8004b44:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8004b46:	01859793          	slli	a5,a1,0x18
{
 8004b4a:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 8004b4c:	87e1                	srai	a5,a5,0x18
 8004b4e:	0207d563          	bgez	a5,8004b78 <usbd_ep_stall+0x34>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b52:	07f5f593          	andi	a1,a1,127
 8004b56:	47f1                	li	a5,28
 8004b58:	02f585b3          	mul	a1,a1,a5
 8004b5c:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 8004b60:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 1;
 8004b62:	4785                	li	a5,1
 8004b64:	00f58123          	sb	a5,2(a1)

    usb_transc_stall (udev, transc);
 8004b68:	fffff097          	auipc	ra,0xfffff
 8004b6c:	62a080e7          	jalr	1578(ra) # 8004192 <usb_transc_stall>

    return (0);
}
 8004b70:	40b2                	lw	ra,12(sp)
 8004b72:	4501                	li	a0,0
 8004b74:	0141                	addi	sp,sp,16
 8004b76:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8004b78:	47f1                	li	a5,28
 8004b7a:	02f585b3          	mul	a1,a1,a5
 8004b7e:	26c58593          	addi	a1,a1,620
 8004b82:	bff9                	j	8004b60 <usbd_ep_stall+0x1c>

08004b84 <usbd_ep_stall_clear>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall_clear (usb_core_driver *udev, uint8_t ep_addr)
{
 8004b84:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8004b86:	01859793          	slli	a5,a1,0x18
{
 8004b8a:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 8004b8c:	87e1                	srai	a5,a5,0x18
 8004b8e:	0207d463          	bgez	a5,8004bb6 <usbd_ep_stall_clear+0x32>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b92:	07f5f593          	andi	a1,a1,127
 8004b96:	47f1                	li	a5,28
 8004b98:	02f585b3          	mul	a1,a1,a5
 8004b9c:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 8004ba0:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 0;
 8004ba2:	00058123          	sb	zero,2(a1)

    usb_transc_clrstall (udev, transc);
 8004ba6:	fffff097          	auipc	ra,0xfffff
 8004baa:	626080e7          	jalr	1574(ra) # 80041cc <usb_transc_clrstall>

    return (0);
}
 8004bae:	40b2                	lw	ra,12(sp)
 8004bb0:	4501                	li	a0,0
 8004bb2:	0141                	addi	sp,sp,16
 8004bb4:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8004bb6:	47f1                	li	a5,28
 8004bb8:	02f585b3          	mul	a1,a1,a5
 8004bbc:	26c58593          	addi	a1,a1,620
 8004bc0:	b7c5                	j	8004ba0 <usbd_ep_stall_clear+0x1c>

08004bc2 <usbd_addr_set>:
    \param[out] none
    \retval     none
*/
void  usbd_addr_set (usb_core_driver *udev, uint8_t addr)
{
    usb_devaddr_set(udev, addr);
 8004bc2:	fffff317          	auipc	t1,0xfffff
 8004bc6:	3a830067          	jr	936(t1) # 8003f6a <usb_devaddr_set>

08004bca <_usb_std_reserved>:
static usb_reqsta _usb_std_reserved (usb_core_driver *udev, usb_req *req)
{
    /* no operation... */

    return REQ_NOTSUPP;
}
 8004bca:	4505                	li	a0,1
 8004bcc:	8082                	ret

08004bce <_usb_dev_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_dev_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.dev_desc[0];
 8004bce:	41452503          	lw	a0,1044(a0)
 8004bd2:	00054783          	lbu	a5,0(a0)
 8004bd6:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.dev_desc;
}
 8004bda:	8082                	ret

08004bdc <_usb_config_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_config_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.config_desc[2];
 8004bdc:	41852503          	lw	a0,1048(a0)
 8004be0:	00254783          	lbu	a5,2(a0)
 8004be4:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.config_desc;
}
 8004be8:	8082                	ret

08004bea <_usb_str_desc_get>:
    \param[out] len: pointer to string length
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_str_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    uint8_t *desc = udev->dev.desc.strings[index];
 8004bea:	42052783          	lw	a5,1056(a0)
 8004bee:	058a                	slli	a1,a1,0x2
 8004bf0:	97ae                	add	a5,a5,a1
 8004bf2:	4388                	lw	a0,0(a5)

    *len = desc[0];
 8004bf4:	00054783          	lbu	a5,0(a0)
 8004bf8:	00f61023          	sh	a5,0(a2)

    return desc;
}
 8004bfc:	8082                	ret

08004bfe <_usb_std_getdescriptor>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getdescriptor (usb_core_driver *udev, usb_req *req)
{
 8004bfe:	1141                	addi	sp,sp,-16
 8004c00:	c422                	sw	s0,8(sp)
 8004c02:	c226                	sw	s1,4(sp)
 8004c04:	c606                	sw	ra,12(sp)
 8004c06:	0005c783          	lbu	a5,0(a1)
 8004c0a:	842a                	mv	s0,a0
 8004c0c:	84ae                	mv	s1,a1
 8004c0e:	8b8d                	andi	a5,a5,3
    uint8_t desc_index = 0;

    usb_transc *transc = &udev->dev.transc_in[0];

    /* get device standard descriptor */
    switch (req->bmRequestType & USB_RECPTYPE_MASK) {
 8004c10:	cf8d                	beqz	a5,8004c4a <_usb_std_getdescriptor+0x4c>
 8004c12:	4705                	li	a4,1
 8004c14:	0ce78563          	beq	a5,a4,8004cde <_usb_std_getdescriptor+0xe0>

    default:
        break;
    }

    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 8004c18:	0dc42703          	lw	a4,220(s0)
        }

        return REQ_SUPP;
    }

    return REQ_NOTSUPP;
 8004c1c:	4505                	li	a0,1
    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 8004c1e:	c761                	beqz	a4,8004ce6 <_usb_std_getdescriptor+0xe8>
 8004c20:	0074c783          	lbu	a5,7(s1)
 8004c24:	0064c683          	lbu	a3,6(s1)
 8004c28:	07a2                	slli	a5,a5,0x8
 8004c2a:	8fd5                	or	a5,a5,a3
 8004c2c:	cfcd                	beqz	a5,8004ce6 <_usb_std_getdescriptor+0xe8>
        if (transc->remain_len < req->wLength) {
 8004c2e:	0cf77163          	bgeu	a4,a5,8004cf0 <_usb_std_getdescriptor+0xf2>
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 8004c32:	0cc45783          	lhu	a5,204(s0)
        return REQ_SUPP;
 8004c36:	4501                	li	a0,0
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 8004c38:	0af76763          	bltu	a4,a5,8004ce6 <_usb_std_getdescriptor+0xe8>
 8004c3c:	02f77533          	remu	a0,a4,a5
 8004c40:	e955                	bnez	a0,8004cf4 <_usb_std_getdescriptor+0xf6>
                udev->dev.control.ctl_zlp = 1;
 8004c42:	4785                	li	a5,1
 8004c44:	42f406a3          	sb	a5,1069(s0)
 8004c48:	a879                	j	8004ce6 <_usb_std_getdescriptor+0xe8>
        desc_type = BYTE_HIGH(req->wValue);
 8004c4a:	0025c783          	lbu	a5,2(a1)
 8004c4e:	0035c583          	lbu	a1,3(a1)
 8004c52:	4709                	li	a4,2
 8004c54:	05a2                	slli	a1,a1,0x8
 8004c56:	8ddd                	or	a1,a1,a5
 8004c58:	0085d793          	srli	a5,a1,0x8
        desc_index = BYTE_LOW(req->wValue);
 8004c5c:	0ff5f593          	andi	a1,a1,255
        switch (desc_type) {
 8004c60:	04e78c63          	beq	a5,a4,8004cb8 <_usb_std_getdescriptor+0xba>
 8004c64:	02f76b63          	bltu	a4,a5,8004c9a <_usb_std_getdescriptor+0x9c>
 8004c68:	4705                	li	a4,1
 8004c6a:	fae797e3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004c6e:	0dc50613          	addi	a2,a0,220
 8004c72:	00000097          	auipc	ra,0x0
 8004c76:	f5c080e7          	jalr	-164(ra) # 8004bce <_usb_dev_desc_get>
 8004c7a:	0ca42823          	sw	a0,208(s0)
            if (64U == req->wLength) {
 8004c7e:	0074c783          	lbu	a5,7(s1)
 8004c82:	0064c703          	lbu	a4,6(s1)
 8004c86:	07a2                	slli	a5,a5,0x8
 8004c88:	8fd9                	or	a5,a5,a4
 8004c8a:	04000713          	li	a4,64
 8004c8e:	f8e795e3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
                transc->remain_len = 8U;
 8004c92:	47a1                	li	a5,8
 8004c94:	0cf42e23          	sw	a5,220(s0)
 8004c98:	b741                	j	8004c18 <_usb_std_getdescriptor+0x1a>
 8004c9a:	470d                	li	a4,3
 8004c9c:	02e78763          	beq	a5,a4,8004cca <_usb_std_getdescriptor+0xcc>
 8004ca0:	473d                	li	a4,15
 8004ca2:	f6e79be3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
    *len = udev->dev.desc.bos_desc[2];
 8004ca6:	41c52783          	lw	a5,1052(a0)
 8004caa:	0027c703          	lbu	a4,2(a5)
            transc->xfer_buf = _usb_bos_desc_get(udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cae:	0cf52823          	sw	a5,208(a0)
    *len = udev->dev.desc.bos_desc[2];
 8004cb2:	0ce51e23          	sh	a4,220(a0)
            break;
 8004cb6:	b78d                	j	8004c18 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cb8:	0dc50613          	addi	a2,a0,220
 8004cbc:	00000097          	auipc	ra,0x0
 8004cc0:	f20080e7          	jalr	-224(ra) # 8004bdc <_usb_config_desc_get>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cc4:	0ca42823          	sw	a0,208(s0)
 8004cc8:	bf81                	j	8004c18 <_usb_std_getdescriptor+0x1a>
            if (desc_index < STR_IDX_MAX) {
 8004cca:	4795                	li	a5,5
 8004ccc:	f4b7e6e3          	bltu	a5,a1,8004c18 <_usb_std_getdescriptor+0x1a>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cd0:	0dc50613          	addi	a2,a0,220
 8004cd4:	00000097          	auipc	ra,0x0
 8004cd8:	f16080e7          	jalr	-234(ra) # 8004bea <_usb_str_desc_get>
 8004cdc:	b7e5                	j	8004cc4 <_usb_std_getdescriptor+0xc6>
        return (usb_reqsta)(udev->dev.class_core->req_proc(udev, req));
 8004cde:	43052783          	lw	a5,1072(a0)
 8004ce2:	47dc                	lw	a5,12(a5)
 8004ce4:	9782                	jalr	a5
}
 8004ce6:	40b2                	lw	ra,12(sp)
 8004ce8:	4422                	lw	s0,8(sp)
 8004cea:	4492                	lw	s1,4(sp)
 8004cec:	0141                	addi	sp,sp,16
 8004cee:	8082                	ret
            transc->remain_len = req->wLength;
 8004cf0:	0cf42e23          	sw	a5,220(s0)
        return REQ_SUPP;
 8004cf4:	4501                	li	a0,0
 8004cf6:	bfc5                	j	8004ce6 <_usb_std_getdescriptor+0xe8>

08004cf8 <_usb_std_setconfiguration>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setconfiguration (usb_core_driver *udev, usb_req *req)
{
 8004cf8:	1141                	addi	sp,sp,-16
 8004cfa:	c04a                	sw	s2,0(sp)
 8004cfc:	c606                	sw	ra,12(sp)
 8004cfe:	c422                	sw	s0,8(sp)
 8004d00:	c226                	sw	s1,4(sp)
    static uint8_t config;

    config = (uint8_t)(req->wValue);
 8004d02:	0025c783          	lbu	a5,2(a1)
 8004d06:	20000937          	lui	s2,0x20000
 8004d0a:	52890913          	addi	s2,s2,1320 # 20000528 <config.4766>
 8004d0e:	00f90023          	sb	a5,0(s2)

    if (config <= USBD_CFG_MAX_NUM) {
 8004d12:	4685                	li	a3,1
 8004d14:	00f6ed63          	bltu	a3,a5,8004d2e <_usb_std_setconfiguration+0x36>
        switch (udev->dev.cur_status) {
 8004d18:	0c654703          	lbu	a4,198(a0)
 8004d1c:	4489                	li	s1,2
 8004d1e:	842a                	mv	s0,a0
 8004d20:	0ff77713          	andi	a4,a4,255
 8004d24:	00970763          	beq	a4,s1,8004d32 <_usb_std_setconfiguration+0x3a>
 8004d28:	460d                	li	a2,3
 8004d2a:	02c70963          	beq	a4,a2,8004d5c <_usb_std_setconfiguration+0x64>
        default:
            break;
        }
    }

    return REQ_NOTSUPP;
 8004d2e:	4485                	li	s1,1
 8004d30:	a839                	j	8004d4e <_usb_std_setconfiguration+0x56>
            return REQ_SUPP;
 8004d32:	4481                	li	s1,0
            if (config){
 8004d34:	cf89                	beqz	a5,8004d4e <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->init(udev, config);
 8004d36:	43052783          	lw	a5,1072(a0)
 8004d3a:	4585                	li	a1,1
 8004d3c:	43dc                	lw	a5,4(a5)
 8004d3e:	9782                	jalr	a5
                udev->dev.config = config;
 8004d40:	00094783          	lbu	a5,0(s2)
 8004d44:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_CONFIGURED;
 8004d48:	478d                	li	a5,3
 8004d4a:	0cf40323          	sb	a5,198(s0)
}
 8004d4e:	40b2                	lw	ra,12(sp)
 8004d50:	4422                	lw	s0,8(sp)
 8004d52:	8526                	mv	a0,s1
 8004d54:	4902                	lw	s2,0(sp)
 8004d56:	4492                	lw	s1,4(sp)
 8004d58:	0141                	addi	sp,sp,16
 8004d5a:	8082                	ret
            if (USB_DEFAULT_CONFIG == config) {
 8004d5c:	ef91                	bnez	a5,8004d78 <_usb_std_setconfiguration+0x80>
                udev->dev.class_core->deinit(udev, config);
 8004d5e:	43052783          	lw	a5,1072(a0)
 8004d62:	4581                	li	a1,0
 8004d64:	479c                	lw	a5,8(a5)
 8004d66:	9782                	jalr	a5
                udev->dev.config = config;
 8004d68:	00094783          	lbu	a5,0(s2)
                udev->dev.cur_status = USBD_ADDRESSED;
 8004d6c:	0c940323          	sb	s1,198(s0)
            return REQ_SUPP;
 8004d70:	4481                	li	s1,0
                udev->dev.config = config;
 8004d72:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_ADDRESSED;
 8004d76:	bfe1                	j	8004d4e <_usb_std_setconfiguration+0x56>
            } else if (config != udev->dev.config) {
 8004d78:	0c454783          	lbu	a5,196(a0)
            return REQ_SUPP;
 8004d7c:	4481                	li	s1,0
            } else if (config != udev->dev.config) {
 8004d7e:	fcd788e3          	beq	a5,a3,8004d4e <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->deinit(udev, config);
 8004d82:	43052783          	lw	a5,1072(a0)
 8004d86:	4585                	li	a1,1
 8004d88:	479c                	lw	a5,8(a5)
 8004d8a:	9782                	jalr	a5
                udev->dev.config = config;
 8004d8c:	00094583          	lbu	a1,0(s2)
                udev->dev.class_core->init(udev, config);
 8004d90:	43042783          	lw	a5,1072(s0)
 8004d94:	8522                	mv	a0,s0
                udev->dev.config = config;
 8004d96:	0cb40223          	sb	a1,196(s0)
                udev->dev.class_core->init(udev, config);
 8004d9a:	43dc                	lw	a5,4(a5)
 8004d9c:	9782                	jalr	a5
 8004d9e:	bf45                	j	8004d4e <_usb_std_setconfiguration+0x56>

08004da0 <_usb_std_getstatus>:
    uint8_t recp = BYTE_LOW(req->wIndex);
 8004da0:	0055c683          	lbu	a3,5(a1)
 8004da4:	0045c703          	lbu	a4,4(a1)
 8004da8:	0005c603          	lbu	a2,0(a1)
 8004dac:	06a2                	slli	a3,a3,0x8
 8004dae:	8ed9                	or	a3,a3,a4
 8004db0:	8a0d                	andi	a2,a2,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8004db2:	4585                	li	a1,1
{
 8004db4:	87aa                	mv	a5,a0
    uint8_t recp = BYTE_LOW(req->wIndex);
 8004db6:	0ff6f713          	andi	a4,a3,255
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8004dba:	04b60363          	beq	a2,a1,8004e00 <_usb_std_getstatus+0x60>
 8004dbe:	c611                	beqz	a2,8004dca <_usb_std_getstatus+0x2a>
 8004dc0:	4589                	li	a1,2
 8004dc2:	06b60263          	beq	a2,a1,8004e26 <_usb_std_getstatus+0x86>
    return REQ_NOTSUPP;
 8004dc6:	4505                	li	a0,1
 8004dc8:	8082                	ret
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004dca:	0c654703          	lbu	a4,198(a0)
 8004dce:	4689                	li	a3,2
 8004dd0:	00e68863          	beq	a3,a4,8004de0 <_usb_std_getstatus+0x40>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8004dd4:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004dd8:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004dda:	4505                	li	a0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004ddc:	04e69463          	bne	a3,a4,8004e24 <_usb_std_getstatus+0x84>
                if (udev->dev.pm.dev_remote_wakeup) {
 8004de0:	4127c683          	lbu	a3,1042(a5)
                if (udev->dev.pm.power_mode) {
 8004de4:	4107c703          	lbu	a4,1040(a5)
                if (udev->dev.pm.dev_remote_wakeup) {
 8004de8:	c689                	beqz	a3,8004df2 <_usb_std_getstatus+0x52>
                if (udev->dev.pm.power_mode) {
 8004dea:	00e036b3          	snez	a3,a4
                    status[0] |= USB_STATUS_REMOTE_WAKEUP;
 8004dee:	0026e693          	ori	a3,a3,2
 8004df2:	20000737          	lui	a4,0x20000
 8004df6:	52c70713          	addi	a4,a4,1324 # 2000052c <status.4696>
 8004dfa:	00d70023          	sb	a3,0(a4)
 8004dfe:	a829                	j	8004e18 <_usb_std_getstatus+0x78>
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 8004e00:	0c654683          	lbu	a3,198(a0)
 8004e04:	460d                	li	a2,3
    return REQ_NOTSUPP;
 8004e06:	4505                	li	a0,1
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 8004e08:	00d61e63          	bne	a2,a3,8004e24 <_usb_std_getstatus+0x84>
 8004e0c:	00e56c63          	bltu	a0,a4,8004e24 <_usb_std_getstatus+0x84>
                transc->xfer_buf = status;
 8004e10:	20000737          	lui	a4,0x20000
 8004e14:	52c70713          	addi	a4,a4,1324 # 2000052c <status.4696>
                transc->xfer_buf = status;
 8004e18:	0ce7a823          	sw	a4,208(a5)
                transc->remain_len = 2U;
 8004e1c:	4709                	li	a4,2
 8004e1e:	0ce7ae23          	sw	a4,220(a5)
                return REQ_SUPP;
 8004e22:	4501                	li	a0,0
}
 8004e24:	8082                	ret
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004e26:	0c654603          	lbu	a2,198(a0)
 8004e2a:	458d                	li	a1,3
    return REQ_NOTSUPP;
 8004e2c:	4505                	li	a0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004e2e:	fec59be3          	bne	a1,a2,8004e24 <_usb_std_getstatus+0x84>
                if (0x80U == (recp & 0x80U)) {
 8004e32:	06e2                	slli	a3,a3,0x18
 8004e34:	86e1                	srai	a3,a3,0x18
 8004e36:	0006db63          	bgez	a3,8004e4c <_usb_std_getstatus+0xac>
                    status[0] = udev->dev.transc_in[EP_ID(recp)].ep_stall;
 8004e3a:	46f1                	li	a3,28
 8004e3c:	07f77713          	andi	a4,a4,127
 8004e40:	02d70733          	mul	a4,a4,a3
 8004e44:	973e                	add	a4,a4,a5
 8004e46:	0ca74683          	lbu	a3,202(a4)
 8004e4a:	b765                	j	8004df2 <_usb_std_getstatus+0x52>
                    status[0] = udev->dev.transc_out[recp].ep_stall;
 8004e4c:	46f1                	li	a3,28
 8004e4e:	02d70733          	mul	a4,a4,a3
 8004e52:	973e                	add	a4,a4,a5
 8004e54:	26e74683          	lbu	a3,622(a4)
 8004e58:	bf69                	j	8004df2 <_usb_std_getstatus+0x52>

08004e5a <_usb_std_getconfiguration>:
    switch (udev->dev.cur_status) {
 8004e5a:	0c654703          	lbu	a4,198(a0)
 8004e5e:	4689                	li	a3,2
{
 8004e60:	87aa                	mv	a5,a0
    switch (udev->dev.cur_status) {
 8004e62:	0ff77713          	andi	a4,a4,255
 8004e66:	00d70763          	beq	a4,a3,8004e74 <_usb_std_getconfiguration+0x1a>
 8004e6a:	468d                	li	a3,3
 8004e6c:	02d70163          	beq	a4,a3,8004e8e <_usb_std_getconfiguration+0x34>
    return REQ_NOTSUPP;
 8004e70:	4505                	li	a0,1
}
 8004e72:	8082                	ret
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8004e74:	0c454703          	lbu	a4,196(a0)
    return REQ_NOTSUPP;
 8004e78:	4505                	li	a0,1
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8004e7a:	ff65                	bnez	a4,8004e72 <_usb_std_getconfiguration+0x18>
            transc->xfer_buf = &(udev->dev.config);
 8004e7c:	0c478713          	addi	a4,a5,196
 8004e80:	0ce7a823          	sw	a4,208(a5)
            transc->remain_len = 1U;
 8004e84:	4705                	li	a4,1
 8004e86:	0ce7ae23          	sw	a4,220(a5)
            return REQ_SUPP;
 8004e8a:	4501                	li	a0,0
 8004e8c:	8082                	ret
        if (udev->dev.config != USB_DEFAULT_CONFIG) {
 8004e8e:	0c454703          	lbu	a4,196(a0)
 8004e92:	df79                	beqz	a4,8004e70 <_usb_std_getconfiguration+0x16>
 8004e94:	b7e5                	j	8004e7c <_usb_std_getconfiguration+0x22>

08004e96 <_usb_std_getinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8004e96:	0c654783          	lbu	a5,198(a0)
 8004e9a:	470d                	li	a4,3
 8004e9c:	02f71163          	bne	a4,a5,8004ebe <_usb_std_getinterface+0x28>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ea0:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8004ea4:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ea6:	00e7ea63          	bltu	a5,a4,8004eba <_usb_std_getinterface+0x24>
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8004eaa:	43052703          	lw	a4,1072(a0)
            transc->remain_len = 1U;
 8004eae:	0cf52e23          	sw	a5,220(a0)
            return REQ_SUPP;
 8004eb2:	4781                	li	a5,0
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8004eb4:	0705                	addi	a4,a4,1
 8004eb6:	0ce52823          	sw	a4,208(a0)
}
 8004eba:	853e                	mv	a0,a5
 8004ebc:	8082                	ret
    return REQ_NOTSUPP;
 8004ebe:	4785                	li	a5,1
 8004ec0:	bfed                	j	8004eba <_usb_std_getinterface+0x24>

08004ec2 <_usb_std_setinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8004ec2:	0c654783          	lbu	a5,198(a0)
 8004ec6:	470d                	li	a4,3
 8004ec8:	02f71063          	bne	a4,a5,8004ee8 <_usb_std_setinterface+0x26>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ecc:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8004ed0:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ed2:	00e7e963          	bltu	a5,a4,8004ee4 <_usb_std_setinterface+0x22>
            udev->dev.class_core->alter_set = req->wValue;
 8004ed6:	43052783          	lw	a5,1072(a0)
 8004eda:	0025c703          	lbu	a4,2(a1)
 8004ede:	00e780a3          	sb	a4,1(a5)
            return REQ_SUPP;
 8004ee2:	4781                	li	a5,0
}
 8004ee4:	853e                	mv	a0,a5
 8004ee6:	8082                	ret
    return REQ_NOTSUPP;
 8004ee8:	4785                	li	a5,1
 8004eea:	bfed                	j	8004ee4 <_usb_std_setinterface+0x22>

08004eec <_usb_std_setaddress>:
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 8004eec:	0055c703          	lbu	a4,5(a1)
 8004ef0:	0045c683          	lbu	a3,4(a1)
 8004ef4:	0722                	slli	a4,a4,0x8
 8004ef6:	8f55                	or	a4,a4,a3
 8004ef8:	cb01                	beqz	a4,8004f08 <_usb_std_setaddress+0x1c>
    return REQ_NOTSUPP;
 8004efa:	4505                	li	a0,1
}
 8004efc:	8082                	ret
    return REQ_NOTSUPP;
 8004efe:	4505                	li	a0,1
}
 8004f00:	40b2                	lw	ra,12(sp)
 8004f02:	4422                	lw	s0,8(sp)
 8004f04:	0141                	addi	sp,sp,16
 8004f06:	8082                	ret
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 8004f08:	0075c703          	lbu	a4,7(a1)
 8004f0c:	0065c683          	lbu	a3,6(a1)
 8004f10:	0722                	slli	a4,a4,0x8
 8004f12:	8f55                	or	a4,a4,a3
 8004f14:	f37d                	bnez	a4,8004efa <_usb_std_setaddress+0xe>
{
 8004f16:	1141                	addi	sp,sp,-16
 8004f18:	c422                	sw	s0,8(sp)
 8004f1a:	c606                	sw	ra,12(sp)
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f1c:	0025c583          	lbu	a1,2(a1)
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 8004f20:	0c654703          	lbu	a4,198(a0)
 8004f24:	468d                	li	a3,3
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f26:	07f5f593          	andi	a1,a1,127
 8004f2a:	0cb502a3          	sb	a1,197(a0)
 8004f2e:	842a                	mv	s0,a0
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 8004f30:	fce687e3          	beq	a3,a4,8004efe <_usb_std_setaddress+0x12>
            usbd_addr_set (udev, udev->dev.dev_addr);
 8004f34:	00000097          	auipc	ra,0x0
 8004f38:	c8e080e7          	jalr	-882(ra) # 8004bc2 <usbd_addr_set>
            if (udev->dev.dev_addr) {
 8004f3c:	0c544783          	lbu	a5,197(s0)
 8004f40:	c791                	beqz	a5,8004f4c <_usb_std_setaddress+0x60>
                udev->dev.cur_status = USBD_ADDRESSED;
 8004f42:	4789                	li	a5,2
                udev->dev.cur_status = USBD_DEFAULT;
 8004f44:	0cf40323          	sb	a5,198(s0)
            return REQ_SUPP;
 8004f48:	4501                	li	a0,0
 8004f4a:	bf5d                	j	8004f00 <_usb_std_setaddress+0x14>
                udev->dev.cur_status = USBD_DEFAULT;
 8004f4c:	4785                	li	a5,1
 8004f4e:	bfdd                	j	8004f44 <_usb_std_setaddress+0x58>

08004f50 <_usb_std_setfeature>:
{
 8004f50:	1141                	addi	sp,sp,-16
 8004f52:	c606                	sw	ra,12(sp)
 8004f54:	c422                	sw	s0,8(sp)
 8004f56:	0005c783          	lbu	a5,0(a1)
 8004f5a:	872a                	mv	a4,a0
 8004f5c:	8b8d                	andi	a5,a5,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004f5e:	cf8d                	beqz	a5,8004f98 <_usb_std_setfeature+0x48>
 8004f60:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8004f62:	4405                	li	s0,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004f64:	06d79163          	bne	a5,a3,8004fc6 <_usb_std_setfeature+0x76>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004f68:	0c654783          	lbu	a5,198(a0)
 8004f6c:	470d                	li	a4,3
    return REQ_NOTSUPP;
 8004f6e:	4405                	li	s0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004f70:	04f71b63          	bne	a4,a5,8004fc6 <_usb_std_setfeature+0x76>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f74:	0035c783          	lbu	a5,3(a1)
 8004f78:	0025c703          	lbu	a4,2(a1)
                return REQ_SUPP;
 8004f7c:	4401                	li	s0,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f7e:	07a2                	slli	a5,a5,0x8
 8004f80:	8fd9                	or	a5,a5,a4
 8004f82:	e3b1                	bnez	a5,8004fc6 <_usb_std_setfeature+0x76>
            ep = BYTE_LOW(req->wIndex);
 8004f84:	0045c583          	lbu	a1,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f88:	07f5f793          	andi	a5,a1,127
 8004f8c:	cf8d                	beqz	a5,8004fc6 <_usb_std_setfeature+0x76>
                    usbd_ep_stall (udev, ep);
 8004f8e:	00000097          	auipc	ra,0x0
 8004f92:	bb6080e7          	jalr	-1098(ra) # 8004b44 <usbd_ep_stall>
 8004f96:	a805                	j	8004fc6 <_usb_std_setfeature+0x76>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004f98:	0c654783          	lbu	a5,198(a0)
 8004f9c:	4689                	li	a3,2
 8004f9e:	00f68863          	beq	a3,a5,8004fae <_usb_std_setfeature+0x5e>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8004fa2:	0c654783          	lbu	a5,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004fa6:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004fa8:	4405                	li	s0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004faa:	00f69e63          	bne	a3,a5,8004fc6 <_usb_std_setfeature+0x76>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8004fae:	0035c783          	lbu	a5,3(a1)
 8004fb2:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8004fb6:	4401                	li	s0,0
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8004fb8:	07a2                	slli	a5,a5,0x8
 8004fba:	8fd5                	or	a5,a5,a3
 8004fbc:	4685                	li	a3,1
 8004fbe:	00d79463          	bne	a5,a3,8004fc6 <_usb_std_setfeature+0x76>
                    udev->dev.pm.dev_remote_wakeup = 1U;
 8004fc2:	40f70923          	sb	a5,1042(a4)
}
 8004fc6:	8522                	mv	a0,s0
 8004fc8:	40b2                	lw	ra,12(sp)
 8004fca:	4422                	lw	s0,8(sp)
 8004fcc:	0141                	addi	sp,sp,16
 8004fce:	8082                	ret

08004fd0 <_usb_std_clearfeature>:
{
 8004fd0:	1141                	addi	sp,sp,-16
 8004fd2:	c226                	sw	s1,4(sp)
 8004fd4:	c606                	sw	ra,12(sp)
 8004fd6:	c422                	sw	s0,8(sp)
 8004fd8:	c04a                	sw	s2,0(sp)
 8004fda:	0005c703          	lbu	a4,0(a1)
 8004fde:	84aa                	mv	s1,a0
 8004fe0:	8b0d                	andi	a4,a4,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004fe2:	c729                	beqz	a4,800502c <_usb_std_clearfeature+0x5c>
 8004fe4:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8004fe6:	4905                	li	s2,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004fe8:	06d71963          	bne	a4,a3,800505a <_usb_std_clearfeature+0x8a>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004fec:	0c654703          	lbu	a4,198(a0)
 8004ff0:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004ff2:	4905                	li	s2,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004ff4:	06e69363          	bne	a3,a4,800505a <_usb_std_clearfeature+0x8a>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004ff8:	0035c703          	lbu	a4,3(a1)
 8004ffc:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8005000:	4901                	li	s2,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005002:	0722                	slli	a4,a4,0x8
 8005004:	8f55                	or	a4,a4,a3
 8005006:	eb31                	bnez	a4,800505a <_usb_std_clearfeature+0x8a>
            ep = BYTE_LOW(req->wIndex);
 8005008:	0045c703          	lbu	a4,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 800500c:	07f77693          	andi	a3,a4,127
 8005010:	c6a9                	beqz	a3,800505a <_usb_std_clearfeature+0x8a>
 8005012:	842e                	mv	s0,a1
                    usbd_ep_stall_clear (udev, ep);
 8005014:	85ba                	mv	a1,a4
 8005016:	00000097          	auipc	ra,0x0
 800501a:	b6e080e7          	jalr	-1170(ra) # 8004b84 <usbd_ep_stall_clear>
                    udev->dev.class_core->req_proc (udev, req);
 800501e:	4304a783          	lw	a5,1072(s1)
 8005022:	85a2                	mv	a1,s0
 8005024:	8526                	mv	a0,s1
 8005026:	47dc                	lw	a5,12(a5)
 8005028:	9782                	jalr	a5
 800502a:	a805                	j	800505a <_usb_std_clearfeature+0x8a>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800502c:	0c654703          	lbu	a4,198(a0)
 8005030:	4689                	li	a3,2
 8005032:	00e68863          	beq	a3,a4,8005042 <_usb_std_clearfeature+0x72>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005036:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800503a:	468d                	li	a3,3
    return REQ_NOTSUPP;
 800503c:	4905                	li	s2,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800503e:	00e69e63          	bne	a3,a4,800505a <_usb_std_clearfeature+0x8a>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8005042:	0035c703          	lbu	a4,3(a1)
 8005046:	0025c683          	lbu	a3,2(a1)
    return REQ_NOTSUPP;
 800504a:	4905                	li	s2,1
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 800504c:	0722                	slli	a4,a4,0x8
 800504e:	8f55                	or	a4,a4,a3
 8005050:	01271563          	bne	a4,s2,800505a <_usb_std_clearfeature+0x8a>
                    udev->dev.pm.dev_remote_wakeup = 0U;
 8005054:	40048923          	sb	zero,1042(s1)
                    return REQ_SUPP;
 8005058:	4901                	li	s2,0
}
 800505a:	40b2                	lw	ra,12(sp)
 800505c:	4422                	lw	s0,8(sp)
 800505e:	854a                	mv	a0,s2
 8005060:	4492                	lw	s1,4(sp)
 8005062:	4902                	lw	s2,0(sp)
 8005064:	0141                	addi	sp,sp,16
 8005066:	8082                	ret

08005068 <_usb_std_setdescriptor>:
 8005068:	4501                	li	a0,0
 800506a:	8082                	ret

0800506c <_usb_std_synchframe>:
 800506c:	4501                	li	a0,0
 800506e:	8082                	ret

08005070 <usbd_standard_request>:
    return (*_std_dev_req[req->bRequest])(udev, req);
 8005070:	0015c783          	lbu	a5,1(a1)
 8005074:	00279713          	slli	a4,a5,0x2
 8005078:	080007b7          	lui	a5,0x8000
 800507c:	39078793          	addi	a5,a5,912 # 8000390 <_std_dev_req>
 8005080:	97ba                	add	a5,a5,a4
 8005082:	0007a303          	lw	t1,0(a5)
 8005086:	8302                	jr	t1

08005088 <usbd_class_request>:
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005088:	0c654683          	lbu	a3,198(a0)
 800508c:	460d                	li	a2,3
    return REQ_NOTSUPP;
 800508e:	4785                	li	a5,1
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005090:	02d61063          	bne	a2,a3,80050b0 <usbd_class_request+0x28>
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005094:	0045c683          	lbu	a3,4(a1)
    return REQ_NOTSUPP;
 8005098:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800509a:	00d7eb63          	bltu	a5,a3,80050b0 <usbd_class_request+0x28>
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 800509e:	43052783          	lw	a5,1072(a0)
{
 80050a2:	1141                	addi	sp,sp,-16
 80050a4:	c606                	sw	ra,12(sp)
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 80050a6:	47dc                	lw	a5,12(a5)
 80050a8:	9782                	jalr	a5
}
 80050aa:	40b2                	lw	ra,12(sp)
 80050ac:	0141                	addi	sp,sp,16
 80050ae:	8082                	ret
 80050b0:	853e                	mv	a0,a5
 80050b2:	8082                	ret

080050b4 <usbd_vendor_request>:
}
 80050b4:	4501                	li	a0,0
 80050b6:	8082                	ret

080050b8 <usbd_enum_error>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     none
*/
void usbd_enum_error (usb_core_driver *udev, usb_req *req)
{
 80050b8:	1141                	addi	sp,sp,-16
    usbd_ep_stall (udev, 0x80);
 80050ba:	08000593          	li	a1,128
{
 80050be:	c606                	sw	ra,12(sp)
 80050c0:	c422                	sw	s0,8(sp)
 80050c2:	842a                	mv	s0,a0
    usbd_ep_stall (udev, 0x80);
 80050c4:	00000097          	auipc	ra,0x0
 80050c8:	a80080e7          	jalr	-1408(ra) # 8004b44 <usbd_ep_stall>
    usbd_ep_stall (udev, 0x00);
 80050cc:	8522                	mv	a0,s0
 80050ce:	4581                	li	a1,0
 80050d0:	00000097          	auipc	ra,0x0
 80050d4:	a74080e7          	jalr	-1420(ra) # 8004b44 <usbd_ep_stall>

    usb_ctlep_startout(udev);
 80050d8:	8522                	mv	a0,s0
}
 80050da:	4422                	lw	s0,8(sp)
 80050dc:	40b2                	lw	ra,12(sp)
 80050de:	0141                	addi	sp,sp,16
    usb_ctlep_startout(udev);
 80050e0:	fffff317          	auipc	t1,0xfffff
 80050e4:	18230067          	jr	386(t1) # 8004262 <usb_ctlep_startout>

080050e8 <usbd_ctl_send>:
*/
usbd_status usbd_ctl_send (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_in[0];

    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050e8:	0dc55683          	lhu	a3,220(a0)
 80050ec:	0d052603          	lw	a2,208(a0)
{
 80050f0:	1141                	addi	sp,sp,-16
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050f2:	4581                	li	a1,0
{
 80050f4:	c422                	sw	s0,8(sp)
 80050f6:	c606                	sw	ra,12(sp)
 80050f8:	842a                	mv	s0,a0
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050fa:	00000097          	auipc	ra,0x0
 80050fe:	a0a080e7          	jalr	-1526(ra) # 8004b04 <usbd_ep_send>

    if (transc->remain_len > transc->max_len) {
 8005102:	0cc45703          	lhu	a4,204(s0)
 8005106:	0dc42683          	lw	a3,220(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_IN;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_IN;
 800510a:	4789                	li	a5,2
    if (transc->remain_len > transc->max_len) {
 800510c:	00d77363          	bgeu	a4,a3,8005112 <usbd_ctl_send+0x2a>
 8005110:	4785                	li	a5,1
 8005112:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005116:	40b2                	lw	ra,12(sp)
 8005118:	4422                	lw	s0,8(sp)
 800511a:	4501                	li	a0,0
 800511c:	0141                	addi	sp,sp,16
 800511e:	8082                	ret

08005120 <usbd_ctl_recev>:
*/
usbd_status  usbd_ctl_recev (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_out[0];

    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005120:	28055683          	lhu	a3,640(a0)
 8005124:	27452603          	lw	a2,628(a0)
{
 8005128:	1141                	addi	sp,sp,-16
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 800512a:	4581                	li	a1,0
{
 800512c:	c422                	sw	s0,8(sp)
 800512e:	c606                	sw	ra,12(sp)
 8005130:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005132:	00000097          	auipc	ra,0x0
 8005136:	992080e7          	jalr	-1646(ra) # 8004ac4 <usbd_ep_recev>

    if (transc->remain_len > transc->max_len) {
 800513a:	27045703          	lhu	a4,624(s0)
 800513e:	28042683          	lw	a3,640(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_OUT;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_OUT;
 8005142:	4791                	li	a5,4
    if (transc->remain_len > transc->max_len) {
 8005144:	00d77363          	bgeu	a4,a3,800514a <usbd_ctl_recev+0x2a>
 8005148:	478d                	li	a5,3
 800514a:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 800514e:	40b2                	lw	ra,12(sp)
 8005150:	4422                	lw	s0,8(sp)
 8005152:	4501                	li	a0,0
 8005154:	0141                	addi	sp,sp,16
 8005156:	8082                	ret

08005158 <usbd_ctl_status_send>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status  usbd_ctl_status_send (usb_core_driver *udev)
{
 8005158:	1141                	addi	sp,sp,-16
 800515a:	c606                	sw	ra,12(sp)
 800515c:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_IN;
 800515e:	4795                	li	a5,5
 8005160:	42f50623          	sb	a5,1068(a0)

    usbd_ep_send (udev, 0U, NULL, 0U);
 8005164:	4681                	li	a3,0
 8005166:	4601                	li	a2,0
 8005168:	4581                	li	a1,0
{
 800516a:	842a                	mv	s0,a0
    usbd_ep_send (udev, 0U, NULL, 0U);
 800516c:	00000097          	auipc	ra,0x0
 8005170:	998080e7          	jalr	-1640(ra) # 8004b04 <usbd_ep_send>

    usb_ctlep_startout(udev);
 8005174:	8522                	mv	a0,s0
 8005176:	fffff097          	auipc	ra,0xfffff
 800517a:	0ec080e7          	jalr	236(ra) # 8004262 <usb_ctlep_startout>

    return USBD_OK;
}
 800517e:	40b2                	lw	ra,12(sp)
 8005180:	4422                	lw	s0,8(sp)
 8005182:	4501                	li	a0,0
 8005184:	0141                	addi	sp,sp,16
 8005186:	8082                	ret

08005188 <usbd_ctl_status_recev>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status usbd_ctl_status_recev (usb_core_driver *udev)
{
 8005188:	1141                	addi	sp,sp,-16
 800518a:	c606                	sw	ra,12(sp)
 800518c:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_OUT;
 800518e:	4799                	li	a5,6
 8005190:	42f50623          	sb	a5,1068(a0)

    usbd_ep_recev (udev, 0, NULL, 0);
 8005194:	4681                	li	a3,0
 8005196:	4601                	li	a2,0
 8005198:	4581                	li	a1,0
{
 800519a:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0, NULL, 0);
 800519c:	00000097          	auipc	ra,0x0
 80051a0:	928080e7          	jalr	-1752(ra) # 8004ac4 <usbd_ep_recev>

    usb_ctlep_startout(udev);
 80051a4:	8522                	mv	a0,s0
 80051a6:	fffff097          	auipc	ra,0xfffff
 80051aa:	0bc080e7          	jalr	188(ra) # 8004262 <usb_ctlep_startout>

    return USBD_OK;
}
 80051ae:	40b2                	lw	ra,12(sp)
 80051b0:	4422                	lw	s0,8(sp)
 80051b2:	4501                	li	a0,0
 80051b4:	0141                	addi	sp,sp,16
 80051b6:	8082                	ret

080051b8 <usbd_setup_transc>:
*/
uint8_t usbd_setup_transc (usb_core_driver *udev)
{
    usb_reqsta reqstat = REQ_NOTSUPP;

    usb_req req = udev->dev.control.req;
 80051b8:	42452783          	lw	a5,1060(a0)
 80051bc:	42852703          	lw	a4,1064(a0)
{
 80051c0:	1101                	addi	sp,sp,-32
 80051c2:	cc22                	sw	s0,24(sp)
    usb_req req = udev->dev.control.req;
 80051c4:	c43e                	sw	a5,8(sp)
 80051c6:	c63a                	sw	a4,12(sp)
{
 80051c8:	ce06                	sw	ra,28(sp)
 80051ca:	0607f793          	andi	a5,a5,96

    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 80051ce:	02000713          	li	a4,32
{
 80051d2:	842a                	mv	s0,a0
    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 80051d4:	02e78a63          	beq	a5,a4,8005208 <usbd_setup_transc+0x50>
 80051d8:	04000713          	li	a4,64
 80051dc:	02e78c63          	beq	a5,a4,8005214 <usbd_setup_transc+0x5c>
 80051e0:	efb9                	bnez	a5,800523e <usbd_setup_transc+0x86>
    /* standard device request */
    case USB_REQTYPE_STRD:
        reqstat = usbd_standard_request (udev, &req);
 80051e2:	002c                	addi	a1,sp,8
 80051e4:	00000097          	auipc	ra,0x0
 80051e8:	e8c080e7          	jalr	-372(ra) # 8005070 <usbd_standard_request>

    default:
        break;
    }

    if (REQ_SUPP == reqstat) {
 80051ec:	e929                	bnez	a0,800523e <usbd_setup_transc+0x86>
        if (req.wLength == 0) {
 80051ee:	00e15783          	lhu	a5,14(sp)
 80051f2:	e79d                	bnez	a5,8005220 <usbd_setup_transc+0x68>
            usbd_ctl_status_send (udev);
 80051f4:	8522                	mv	a0,s0
 80051f6:	00000097          	auipc	ra,0x0
 80051fa:	f62080e7          	jalr	-158(ra) # 8005158 <usbd_ctl_status_send>
    } else {
        usbd_enum_error (udev, &req);
    }

    return USBD_OK;
}
 80051fe:	40f2                	lw	ra,28(sp)
 8005200:	4462                	lw	s0,24(sp)
 8005202:	4501                	li	a0,0
 8005204:	6105                	addi	sp,sp,32
 8005206:	8082                	ret
        reqstat = usbd_class_request (udev, &req);
 8005208:	002c                	addi	a1,sp,8
 800520a:	00000097          	auipc	ra,0x0
 800520e:	e7e080e7          	jalr	-386(ra) # 8005088 <usbd_class_request>
        break;
 8005212:	bfe9                	j	80051ec <usbd_setup_transc+0x34>
        reqstat = usbd_vendor_request (udev, &req);
 8005214:	002c                	addi	a1,sp,8
 8005216:	00000097          	auipc	ra,0x0
 800521a:	e9e080e7          	jalr	-354(ra) # 80050b4 <usbd_vendor_request>
        break;
 800521e:	b7f9                	j	80051ec <usbd_setup_transc+0x34>
            if (req.bmRequestType & 0x80) {
 8005220:	00810783          	lb	a5,8(sp)
                usbd_ctl_send (udev);
 8005224:	8522                	mv	a0,s0
            if (req.bmRequestType & 0x80) {
 8005226:	0007d763          	bgez	a5,8005234 <usbd_setup_transc+0x7c>
                usbd_ctl_send (udev);
 800522a:	00000097          	auipc	ra,0x0
 800522e:	ebe080e7          	jalr	-322(ra) # 80050e8 <usbd_ctl_send>
 8005232:	b7f1                	j	80051fe <usbd_setup_transc+0x46>
                usbd_ctl_recev (udev);
 8005234:	00000097          	auipc	ra,0x0
 8005238:	eec080e7          	jalr	-276(ra) # 8005120 <usbd_ctl_recev>
 800523c:	b7c9                	j	80051fe <usbd_setup_transc+0x46>
        usbd_enum_error (udev, &req);
 800523e:	002c                	addi	a1,sp,8
 8005240:	8522                	mv	a0,s0
 8005242:	00000097          	auipc	ra,0x0
 8005246:	e76080e7          	jalr	-394(ra) # 80050b8 <usbd_enum_error>
 800524a:	bf55                	j	80051fe <usbd_setup_transc+0x46>

0800524c <usbd_out_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_out_transc (usb_core_driver *udev, uint8_t ep_num)
{
 800524c:	7179                	addi	sp,sp,-48
 800524e:	d606                	sw	ra,44(sp)
 8005250:	d422                	sw	s0,40(sp)
 8005252:	1800                	addi	s0,sp,48
 8005254:	fca42e23          	sw	a0,-36(s0)
 8005258:	87ae                	mv	a5,a1
 800525a:	fcf40da3          	sb	a5,-37(s0)
    if (ep_num == 0) {
 800525e:	fdb44783          	lbu	a5,-37(s0)
 8005262:	ebc1                	bnez	a5,80052f2 <usbd_out_transc+0xa6>
        usb_transc *transc = &udev->dev.transc_out[0];
 8005264:	fdc42783          	lw	a5,-36(s0)
 8005268:	26c78793          	addi	a5,a5,620
 800526c:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005270:	fdc42783          	lw	a5,-36(s0)
 8005274:	42c7c783          	lbu	a5,1068(a5)
 8005278:	470d                	li	a4,3
 800527a:	00e78663          	beq	a5,a4,8005286 <usbd_out_transc+0x3a>
 800527e:	4711                	li	a4,4
 8005280:	02e78663          	beq	a5,a4,80052ac <usbd_out_transc+0x60>

            usbd_ctl_status_send (udev);
            break;

        default:
            break;
 8005284:	a04d                	j	8005326 <usbd_out_transc+0xda>
            transc->remain_len -= transc->max_len;
 8005286:	fec42783          	lw	a5,-20(s0)
 800528a:	4bdc                	lw	a5,20(a5)
 800528c:	fec42703          	lw	a4,-20(s0)
 8005290:	00475703          	lhu	a4,4(a4)
 8005294:	40e78733          	sub	a4,a5,a4
 8005298:	fec42783          	lw	a5,-20(s0)
 800529c:	cbd8                	sw	a4,20(a5)
            usbd_ctl_recev (udev);
 800529e:	fdc42503          	lw	a0,-36(s0)
 80052a2:	00000097          	auipc	ra,0x0
 80052a6:	e7e080e7          	jalr	-386(ra) # 8005120 <usbd_ctl_recev>
            break;
 80052aa:	a8b5                	j	8005326 <usbd_out_transc+0xda>
            if (udev->dev.cur_status == USBD_CONFIGURED) {
 80052ac:	fdc42783          	lw	a5,-36(s0)
 80052b0:	0c67c783          	lbu	a5,198(a5)
 80052b4:	0ff7f713          	andi	a4,a5,255
 80052b8:	478d                	li	a5,3
 80052ba:	02f71163          	bne	a4,a5,80052dc <usbd_out_transc+0x90>
                if (udev->dev.class_core->data_out != NULL) {
 80052be:	fdc42783          	lw	a5,-36(s0)
 80052c2:	4307a783          	lw	a5,1072(a5)
 80052c6:	4bdc                	lw	a5,20(a5)
 80052c8:	cb91                	beqz	a5,80052dc <usbd_out_transc+0x90>
                    udev->dev.class_core->data_out (udev, 0U);
 80052ca:	fdc42783          	lw	a5,-36(s0)
 80052ce:	4307a783          	lw	a5,1072(a5)
 80052d2:	4bdc                	lw	a5,20(a5)
 80052d4:	4581                	li	a1,0
 80052d6:	fdc42503          	lw	a0,-36(s0)
 80052da:	9782                	jalr	a5
            transc->remain_len = 0U;
 80052dc:	fec42783          	lw	a5,-20(s0)
 80052e0:	0007aa23          	sw	zero,20(a5)
            usbd_ctl_status_send (udev);
 80052e4:	fdc42503          	lw	a0,-36(s0)
 80052e8:	00000097          	auipc	ra,0x0
 80052ec:	e70080e7          	jalr	-400(ra) # 8005158 <usbd_ctl_status_send>
            break;
 80052f0:	a81d                	j	8005326 <usbd_out_transc+0xda>
        }
    } else if ((udev->dev.class_core->data_out != NULL) && (udev->dev.cur_status == USBD_CONFIGURED)) {
 80052f2:	fdc42783          	lw	a5,-36(s0)
 80052f6:	4307a783          	lw	a5,1072(a5)
 80052fa:	4bdc                	lw	a5,20(a5)
 80052fc:	c78d                	beqz	a5,8005326 <usbd_out_transc+0xda>
 80052fe:	fdc42783          	lw	a5,-36(s0)
 8005302:	0c67c783          	lbu	a5,198(a5)
 8005306:	0ff7f713          	andi	a4,a5,255
 800530a:	478d                	li	a5,3
 800530c:	00f71d63          	bne	a4,a5,8005326 <usbd_out_transc+0xda>
        udev->dev.class_core->data_out (udev, ep_num);
 8005310:	fdc42783          	lw	a5,-36(s0)
 8005314:	4307a783          	lw	a5,1072(a5)
 8005318:	4bd8                	lw	a4,20(a5)
 800531a:	fdb44783          	lbu	a5,-37(s0)
 800531e:	85be                	mv	a1,a5
 8005320:	fdc42503          	lw	a0,-36(s0)
 8005324:	9702                	jalr	a4
    }

    return USBD_OK;
 8005326:	4781                	li	a5,0
}
 8005328:	853e                	mv	a0,a5
 800532a:	50b2                	lw	ra,44(sp)
 800532c:	5422                	lw	s0,40(sp)
 800532e:	6145                	addi	sp,sp,48
 8005330:	8082                	ret

08005332 <usbd_in_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_in_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005332:	7179                	addi	sp,sp,-48
 8005334:	d606                	sw	ra,44(sp)
 8005336:	d422                	sw	s0,40(sp)
 8005338:	1800                	addi	s0,sp,48
 800533a:	fca42e23          	sw	a0,-36(s0)
 800533e:	87ae                	mv	a5,a1
 8005340:	fcf40da3          	sb	a5,-37(s0)
    if (0U == ep_num) {
 8005344:	fdb44783          	lbu	a5,-37(s0)
 8005348:	ebdd                	bnez	a5,80053fe <usbd_in_transc+0xcc>
        usb_transc *transc = &udev->dev.transc_in[0];
 800534a:	fdc42783          	lw	a5,-36(s0)
 800534e:	0c878793          	addi	a5,a5,200
 8005352:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005356:	fdc42783          	lw	a5,-36(s0)
 800535a:	42c7c783          	lbu	a5,1068(a5)
 800535e:	4705                	li	a4,1
 8005360:	00e78663          	beq	a5,a4,800536c <usbd_in_transc+0x3a>
 8005364:	4709                	li	a4,2
 8005366:	02e78663          	beq	a5,a4,8005392 <usbd_in_transc+0x60>
                usbd_ctl_status_recev (udev);
            }
            break;

        default:
            break;
 800536a:	a0e1                	j	8005432 <usbd_in_transc+0x100>
            transc->remain_len -= transc->max_len;
 800536c:	fec42783          	lw	a5,-20(s0)
 8005370:	4bdc                	lw	a5,20(a5)
 8005372:	fec42703          	lw	a4,-20(s0)
 8005376:	00475703          	lhu	a4,4(a4)
 800537a:	40e78733          	sub	a4,a5,a4
 800537e:	fec42783          	lw	a5,-20(s0)
 8005382:	cbd8                	sw	a4,20(a5)
            usbd_ctl_send (udev);
 8005384:	fdc42503          	lw	a0,-36(s0)
 8005388:	00000097          	auipc	ra,0x0
 800538c:	d60080e7          	jalr	-672(ra) # 80050e8 <usbd_ctl_send>
            break;
 8005390:	a04d                	j	8005432 <usbd_in_transc+0x100>
            if (udev->dev.control.ctl_zlp) {
 8005392:	fdc42783          	lw	a5,-36(s0)
 8005396:	42d7c783          	lbu	a5,1069(a5)
 800539a:	cf99                	beqz	a5,80053b8 <usbd_in_transc+0x86>
                usbd_ep_send (udev, 0U, NULL, 0U);
 800539c:	4681                	li	a3,0
 800539e:	4601                	li	a2,0
 80053a0:	4581                	li	a1,0
 80053a2:	fdc42503          	lw	a0,-36(s0)
 80053a6:	fffff097          	auipc	ra,0xfffff
 80053aa:	75e080e7          	jalr	1886(ra) # 8004b04 <usbd_ep_send>
                udev->dev.control.ctl_zlp = 0U;
 80053ae:	fdc42783          	lw	a5,-36(s0)
 80053b2:	420786a3          	sb	zero,1069(a5)
            break;
 80053b6:	a8b5                	j	8005432 <usbd_in_transc+0x100>
                if (udev->dev.cur_status == USBD_CONFIGURED) {
 80053b8:	fdc42783          	lw	a5,-36(s0)
 80053bc:	0c67c783          	lbu	a5,198(a5)
 80053c0:	0ff7f713          	andi	a4,a5,255
 80053c4:	478d                	li	a5,3
 80053c6:	02f71163          	bne	a4,a5,80053e8 <usbd_in_transc+0xb6>
                    if (udev->dev.class_core->data_in != NULL) {
 80053ca:	fdc42783          	lw	a5,-36(s0)
 80053ce:	4307a783          	lw	a5,1072(a5)
 80053d2:	4b9c                	lw	a5,16(a5)
 80053d4:	cb91                	beqz	a5,80053e8 <usbd_in_transc+0xb6>
                        udev->dev.class_core->data_in (udev, 0U);
 80053d6:	fdc42783          	lw	a5,-36(s0)
 80053da:	4307a783          	lw	a5,1072(a5)
 80053de:	4b9c                	lw	a5,16(a5)
 80053e0:	4581                	li	a1,0
 80053e2:	fdc42503          	lw	a0,-36(s0)
 80053e6:	9782                	jalr	a5
                transc->remain_len = 0U;
 80053e8:	fec42783          	lw	a5,-20(s0)
 80053ec:	0007aa23          	sw	zero,20(a5)
                usbd_ctl_status_recev (udev);
 80053f0:	fdc42503          	lw	a0,-36(s0)
 80053f4:	00000097          	auipc	ra,0x0
 80053f8:	d94080e7          	jalr	-620(ra) # 8005188 <usbd_ctl_status_recev>
            break;
 80053fc:	a81d                	j	8005432 <usbd_in_transc+0x100>
        }
    } else {
        if ((udev->dev.cur_status == USBD_CONFIGURED) && (udev->dev.class_core->data_in != NULL)) {
 80053fe:	fdc42783          	lw	a5,-36(s0)
 8005402:	0c67c783          	lbu	a5,198(a5)
 8005406:	0ff7f713          	andi	a4,a5,255
 800540a:	478d                	li	a5,3
 800540c:	02f71363          	bne	a4,a5,8005432 <usbd_in_transc+0x100>
 8005410:	fdc42783          	lw	a5,-36(s0)
 8005414:	4307a783          	lw	a5,1072(a5)
 8005418:	4b9c                	lw	a5,16(a5)
 800541a:	cf81                	beqz	a5,8005432 <usbd_in_transc+0x100>
            udev->dev.class_core->data_in (udev, ep_num);
 800541c:	fdc42783          	lw	a5,-36(s0)
 8005420:	4307a783          	lw	a5,1072(a5)
 8005424:	4b98                	lw	a4,16(a5)
 8005426:	fdb44783          	lbu	a5,-37(s0)
 800542a:	85be                	mv	a1,a5
 800542c:	fdc42503          	lw	a0,-36(s0)
 8005430:	9702                	jalr	a4
        }
    }

    return USBD_OK;
 8005432:	4781                	li	a5,0
}
 8005434:	853e                	mv	a0,a5
 8005436:	50b2                	lw	ra,44(sp)
 8005438:	5422                	lw	s0,40(sp)
 800543a:	6145                	addi	sp,sp,48
 800543c:	8082                	ret

0800543e <init_ADC_A0_A7>:
#include "adc.h"
#include "gd32vf103.h"
#include "systick.h"

void init_ADC_A0_A7(){
 800543e:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_ADC0);
 8005440:	60900513          	li	a0,1545
void init_ADC_A0_A7(){
 8005444:	c606                	sw	ra,12(sp)
 8005446:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_ADC0);
 8005448:	ffffc097          	auipc	ra,0xffffc
 800544c:	c48080e7          	jalr	-952(ra) # 8001090 <rcu_periph_clock_enable>
    /* enable GPIOA clock */
    rcu_periph_clock_enable(RCU_GPIOA);
 8005450:	60200513          	li	a0,1538
 8005454:	ffffc097          	auipc	ra,0xffffc
 8005458:	c3c080e7          	jalr	-964(ra) # 8001090 <rcu_periph_clock_enable>
    /* Initialize the GPIO that will be used for ADC. A0-A7 and B0-B1 are connected to an ADC-channel each. */
    gpio_init(GPIOA, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800545c:	40011437          	lui	s0,0x40011
 8005460:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 8005464:	46bd                	li	a3,15
 8005466:	460d                	li	a2,3
 8005468:	4581                	li	a1,0
 800546a:	ffffc097          	auipc	ra,0xffffc
 800546e:	b70080e7          	jalr	-1168(ra) # 8000fda <gpio_init>
    gpio_init(GPIOA, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7); 
 8005472:	0f000693          	li	a3,240
 8005476:	460d                	li	a2,3
 8005478:	4581                	li	a1,0
 800547a:	80040513          	addi	a0,s0,-2048
 800547e:	ffffc097          	auipc	ra,0xffffc
 8005482:	b5c080e7          	jalr	-1188(ra) # 8000fda <gpio_init>
    /* enable ADC clock */
    rcu_periph_clock_enable(RCU_ADC0);
 8005486:	60900513          	li	a0,1545
 800548a:	ffffc097          	auipc	ra,0xffffc
 800548e:	c06080e7          	jalr	-1018(ra) # 8001090 <rcu_periph_clock_enable>

    /* Select the clock frequency that will be used for the ADC core. Refer to README for more info on what to select. */
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8005492:	450d                	li	a0,3

    /* Reset ADC1 configuration. GD32VF103 has two internal ADCs (ADC0, ADC1). */
    adc_deinit(ADC0);
 8005494:	40012437          	lui	s0,0x40012
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8005498:	ffffc097          	auipc	ra,0xffffc
 800549c:	c44080e7          	jalr	-956(ra) # 80010dc <rcu_adc_clock_config>
    adc_deinit(ADC0);
 80054a0:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 80054a4:	ffffb097          	auipc	ra,0xffffb
 80054a8:	6f2080e7          	jalr	1778(ra) # 8000b96 <adc_deinit>

    /* Set the ADCs to work independently. Refer to the manual for the different parallel modes available. */
    adc_mode_config(ADC_MODE_FREE);
 80054ac:	4501                	li	a0,0
 80054ae:	ffffb097          	auipc	ra,0xffffb
 80054b2:	738080e7          	jalr	1848(ra) # 8000be6 <adc_mode_config>
       an external trigger. */
    /*  adc_special_function_config(0, ADC_CONTINUOUS_MODE, ENABLE);
        adc_special_function_config(0, ADC_SCAN_MODE, ENABLE); */

    /* Sets where padding is applied to the measurement. Data alignment right puts padding bits above MSB */
    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);
 80054b6:	40040513          	addi	a0,s0,1024
 80054ba:	4581                	li	a1,0
 80054bc:	ffffb097          	auipc	ra,0xffffb
 80054c0:	74a080e7          	jalr	1866(ra) # 8000c06 <adc_data_alignment_config>

    /* Selects how many channels to convert each time. This can be used to "queue" multiple channels. Here just one channel is selected. */
    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, 8);
 80054c4:	40040513          	addi	a0,s0,1024
 80054c8:	4621                	li	a2,8
 80054ca:	4585                	li	a1,1
 80054cc:	ffffb097          	auipc	ra,0xffffb
 80054d0:	7d6080e7          	jalr	2006(ra) # 8000ca2 <adc_channel_length_config>

    /* Set the channel as the first "queued" conversion each time the ADC is activated. */
    adc_regular_channel_config(ADC0, 0, ADC_CHANNEL_0, ADC_SAMPLETIME_13POINT5);
 80054d4:	40040513          	addi	a0,s0,1024
 80054d8:	4689                	li	a3,2
 80054da:	4601                	li	a2,0
 80054dc:	4581                	li	a1,0
 80054de:	ffffc097          	auipc	ra,0xffffc
 80054e2:	80e080e7          	jalr	-2034(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 1, ADC_CHANNEL_1, ADC_SAMPLETIME_13POINT5);
 80054e6:	40040513          	addi	a0,s0,1024
 80054ea:	4689                	li	a3,2
 80054ec:	4605                	li	a2,1
 80054ee:	4585                	li	a1,1
 80054f0:	ffffb097          	auipc	ra,0xffffb
 80054f4:	7fc080e7          	jalr	2044(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 2, ADC_CHANNEL_2, ADC_SAMPLETIME_13POINT5);
 80054f8:	40040513          	addi	a0,s0,1024
 80054fc:	4689                	li	a3,2
 80054fe:	4609                	li	a2,2
 8005500:	4589                	li	a1,2
 8005502:	ffffb097          	auipc	ra,0xffffb
 8005506:	7ea080e7          	jalr	2026(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 3, ADC_CHANNEL_3, ADC_SAMPLETIME_13POINT5);
 800550a:	40040513          	addi	a0,s0,1024
 800550e:	4689                	li	a3,2
 8005510:	460d                	li	a2,3
 8005512:	458d                	li	a1,3
 8005514:	ffffb097          	auipc	ra,0xffffb
 8005518:	7d8080e7          	jalr	2008(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 4, ADC_CHANNEL_4, ADC_SAMPLETIME_13POINT5);
 800551c:	40040513          	addi	a0,s0,1024
 8005520:	4689                	li	a3,2
 8005522:	4611                	li	a2,4
 8005524:	4591                	li	a1,4
 8005526:	ffffb097          	auipc	ra,0xffffb
 800552a:	7c6080e7          	jalr	1990(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 5, ADC_CHANNEL_5, ADC_SAMPLETIME_13POINT5);
 800552e:	40040513          	addi	a0,s0,1024
 8005532:	4689                	li	a3,2
 8005534:	4615                	li	a2,5
 8005536:	4595                	li	a1,5
 8005538:	ffffb097          	auipc	ra,0xffffb
 800553c:	7b4080e7          	jalr	1972(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 6, ADC_CHANNEL_6, ADC_SAMPLETIME_13POINT5);
 8005540:	40040513          	addi	a0,s0,1024
 8005544:	4689                	li	a3,2
 8005546:	4619                	li	a2,6
 8005548:	4599                	li	a1,6
 800554a:	ffffb097          	auipc	ra,0xffffb
 800554e:	7a2080e7          	jalr	1954(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 7, ADC_CHANNEL_7, ADC_SAMPLETIME_13POINT5);
 8005552:	4689                	li	a3,2
 8005554:	40040513          	addi	a0,s0,1024
 8005558:	461d                	li	a2,7
 800555a:	459d                	li	a1,7
 800555c:	ffffb097          	auipc	ra,0xffffb
 8005560:	790080e7          	jalr	1936(ra) # 8000cec <adc_regular_channel_config>

    /* Since we are using continious conversion we do not want to use an external trigger. */
    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_EXTTRIG_REGULAR_NONE);
 8005564:	40040513          	addi	a0,s0,1024
 8005568:	000e0637          	lui	a2,0xe0
 800556c:	4585                	li	a1,1
 800556e:	ffffc097          	auipc	ra,0xffffc
 8005572:	83c080e7          	jalr	-1988(ra) # 8000daa <adc_external_trigger_source_config>
    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);
 8005576:	40040513          	addi	a0,s0,1024
 800557a:	4605                	li	a2,1
 800557c:	4585                	li	a1,1
 800557e:	ffffc097          	auipc	ra,0xffffc
 8005582:	860080e7          	jalr	-1952(ra) # 8000dde <adc_external_trigger_config>

    adc_discontinuous_mode_config(ADC0,ADC_REGULAR_CHANNEL,8);
 8005586:	4585                	li	a1,1
 8005588:	4621                	li	a2,8
 800558a:	40040513          	addi	a0,s0,1024
 800558e:	ffffb097          	auipc	ra,0xffffb
 8005592:	6ce080e7          	jalr	1742(ra) # 8000c5c <adc_discontinuous_mode_config>
    /* Enable ADC.*/
    adc_enable(ADC0);
 8005596:	40040513          	addi	a0,s0,1024
 800559a:	ffffb097          	auipc	ra,0xffffb
 800559e:	686080e7          	jalr	1670(ra) # 8000c20 <adc_enable>

    /* Let ADC stabilize */
    delay_1ms(1);
 80055a2:	4505                	li	a0,1
 80055a4:	fffff097          	auipc	ra,0xfffff
 80055a8:	864080e7          	jalr	-1948(ra) # 8003e08 <delay_1ms>

    /* Calibrates the ADC against an internal source. */
    adc_calibration_enable(ADC0);
 80055ac:	40040513          	addi	a0,s0,1024
 80055b0:	ffffb097          	auipc	ra,0xffffb
 80055b4:	680080e7          	jalr	1664(ra) # 8000c30 <adc_calibration_enable>
    adc_dma_mode_enable(ADC0);
 80055b8:	40040513          	addi	a0,s0,1024
 80055bc:	ffffb097          	auipc	ra,0xffffb
 80055c0:	696080e7          	jalr	1686(ra) # 8000c52 <adc_dma_mode_enable>

    delay_1ms(1);
 80055c4:	4505                	li	a0,1
 80055c6:	fffff097          	auipc	ra,0xfffff
 80055ca:	842080e7          	jalr	-1982(ra) # 8003e08 <delay_1ms>

    /* Start converting */
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055ce:	40040513          	addi	a0,s0,1024
 80055d2:	4422                	lw	s0,8(sp)
 80055d4:	40b2                	lw	ra,12(sp)
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055d6:	4585                	li	a1,1
 80055d8:	0141                	addi	sp,sp,16
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055da:	ffffc317          	auipc	t1,0xffffc
 80055de:	83e30067          	jr	-1986(t1) # 8000e18 <adc_software_trigger_enable>

080055e2 <write_handle_raw>:
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 80055e2:	7151                	addi	sp,sp,-240
 80055e4:	d5a2                	sw	s0,232(sp)
 80055e6:	d1ca                	sw	s2,224(sp)
 80055e8:	c62a                	sw	a0,12(sp)
 80055ea:	892e                	mv	s2,a1
 80055ec:	8432                	mv	s0,a2
	uint8_t string_buffer[128] = {'\0'};
 80055ee:	4581                	li	a1,0
 80055f0:	08000613          	li	a2,128
 80055f4:	1088                	addi	a0,sp,96
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 80055f6:	d786                	sw	ra,236(sp)
 80055f8:	d3a6                	sw	s1,228(sp)
	uint8_t string_buffer[128] = {'\0'};
 80055fa:	00002097          	auipc	ra,0x2
 80055fe:	be0080e7          	jalr	-1056(ra) # 80071da <memset>
	uint8_t data_buffer[(20*2)+15] = {'\0'};
 8005602:	03700613          	li	a2,55
 8005606:	4581                	li	a1,0
 8005608:	1028                	addi	a0,sp,40
 800560a:	00002097          	auipc	ra,0x2
 800560e:	bd0080e7          	jalr	-1072(ra) # 80071da <memset>
	const uint8_t lut_hex[] = "0123456789ABCDEF";
 8005612:	080004b7          	lui	s1,0x8000
 8005616:	3c848593          	addi	a1,s1,968 # 80003c8 <_std_dev_req+0x38>
 800561a:	4645                	li	a2,17
 800561c:	03058593          	addi	a1,a1,48
 8005620:	0848                	addi	a0,sp,20
 8005622:	00002097          	auipc	ra,0x2
 8005626:	ba2080e7          	jalr	-1118(ra) # 80071c4 <memcpy>
	for(int i = 0; i < size; i++){
 800562a:	46b2                	lw	a3,12(sp)
 800562c:	1030                	addi	a2,sp,40
 800562e:	4701                	li	a4,0
 8005630:	3c848593          	addi	a1,s1,968
 8005634:	04874463          	blt	a4,s0,800567c <write_handle_raw+0x9a>
	data_buffer[size*2] = '\0';
 8005638:	119c                	addi	a5,sp,224
 800563a:	0406                	slli	s0,s0,0x1
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 800563c:	08000637          	lui	a2,0x8000
	data_buffer[size*2] = '\0';
 8005640:	943e                	add	s0,s0,a5
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005642:	1038                	addi	a4,sp,40
 8005644:	40c60613          	addi	a2,a2,1036 # 800040c <_std_dev_req+0x7c>
 8005648:	04c58593          	addi	a1,a1,76
 800564c:	1088                	addi	a0,sp,96
	data_buffer[size*2] = '\0';
 800564e:	f4040423          	sb	zero,-184(s0)
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005652:	00002097          	auipc	ra,0x2
 8005656:	b98080e7          	jalr	-1128(ra) # 80071ea <siprintf>
	lio_send_bt(string_buffer, strlen(string_buffer));
 800565a:	1088                	addi	a0,sp,96
 800565c:	00002097          	auipc	ra,0x2
 8005660:	bf4080e7          	jalr	-1036(ra) # 8007250 <strlen>
 8005664:	85aa                	mv	a1,a0
 8005666:	1088                	addi	a0,sp,96
 8005668:	00001097          	auipc	ra,0x1
 800566c:	be6080e7          	jalr	-1050(ra) # 800624e <lio_send_bt>
}
 8005670:	50be                	lw	ra,236(sp)
 8005672:	542e                	lw	s0,232(sp)
 8005674:	549e                	lw	s1,228(sp)
 8005676:	590e                	lw	s2,224(sp)
 8005678:	616d                	addi	sp,sp,240
 800567a:	8082                	ret
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800567c:	00e907b3          	add	a5,s2,a4
 8005680:	0007c783          	lbu	a5,0(a5)
 8005684:	1184                	addi	s1,sp,224
	for(int i = 0; i < size; i++){
 8005686:	0705                	addi	a4,a4,1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005688:	0047d513          	srli	a0,a5,0x4
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 800568c:	8bbd                	andi	a5,a5,15
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800568e:	9526                	add	a0,a0,s1
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005690:	97a6                	add	a5,a5,s1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005692:	f3454503          	lbu	a0,-204(a0)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005696:	f347c783          	lbu	a5,-204(a5)
 800569a:	0609                	addi	a2,a2,2
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800569c:	fea60f23          	sb	a0,-2(a2)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 80056a0:	fef60fa3          	sb	a5,-1(a2)
 80056a4:	bf41                	j	8005634 <write_handle_raw+0x52>

080056a6 <send_data_to_phone>:
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 80056a6:	00859793          	slli	a5,a1,0x8
 80056aa:	05c2                	slli	a1,a1,0x10
 80056ac:	81c1                	srli	a1,a1,0x10
 80056ae:	81a1                	srli	a1,a1,0x8
void send_data_to_phone(uint16_t handle, int16_t value){
 80056b0:	1101                	addi	sp,sp,-32
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 80056b2:	8ddd                	or	a1,a1,a5
 80056b4:	00b11623          	sh	a1,12(sp)
    write_handle_raw(handle,bytes,2);
 80056b8:	4609                	li	a2,2
 80056ba:	006c                	addi	a1,sp,12
void send_data_to_phone(uint16_t handle, int16_t value){
 80056bc:	ce06                	sw	ra,28(sp)
    write_handle_raw(handle,bytes,2);
 80056be:	00000097          	auipc	ra,0x0
 80056c2:	f24080e7          	jalr	-220(ra) # 80055e2 <write_handle_raw>
}
 80056c6:	40f2                	lw	ra,28(sp)
 80056c8:	6105                	addi	sp,sp,32
 80056ca:	8082                	ret

080056cc <stagger_data_to_phone>:
    int index = (seconds - 1) % 8;
 80056cc:	47a1                	li	a5,8
 80056ce:	157d                	addi	a0,a0,-1
 80056d0:	02f56533          	rem	a0,a0,a5
    value = (int16_t)sample_buffer[index];
 80056d4:	20001737          	lui	a4,0x20001
    send_data_to_phone(finapressHandles[index], value);
 80056d8:	200007b7          	lui	a5,0x20000
    value = (int16_t)sample_buffer[index];
 80056dc:	5e070713          	addi	a4,a4,1504 # 200015e0 <sample_buffer>
    send_data_to_phone(finapressHandles[index], value);
 80056e0:	47878793          	addi	a5,a5,1144 # 20000478 <finapressHandles>
    value = (int16_t)sample_buffer[index];
 80056e4:	0506                	slli	a0,a0,0x1
 80056e6:	972a                	add	a4,a4,a0
    send_data_to_phone(finapressHandles[index], value);
 80056e8:	953e                	add	a0,a0,a5
 80056ea:	00071583          	lh	a1,0(a4)
 80056ee:	00055503          	lhu	a0,0(a0)
 80056f2:	00000317          	auipc	t1,0x0
 80056f6:	fb430067          	jr	-76(t1) # 80056a6 <send_data_to_phone>

080056fa <reboot_BT>:
    lio_send_bt("R,1\r",4);//reboot bluetooth
 80056fa:	08000537          	lui	a0,0x8000
void reboot_BT(){
 80056fe:	1141                	addi	sp,sp,-16
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005700:	4591                	li	a1,4
 8005702:	42050513          	addi	a0,a0,1056 # 8000420 <_std_dev_req+0x90>
void reboot_BT(){
 8005706:	c606                	sw	ra,12(sp)
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005708:	00001097          	auipc	ra,0x1
 800570c:	b46080e7          	jalr	-1210(ra) # 800624e <lio_send_bt>
}
 8005710:	40b2                	lw	ra,12(sp)
    delay_1ms(50);
 8005712:	03200513          	li	a0,50
}
 8005716:	0141                	addi	sp,sp,16
    delay_1ms(50);
 8005718:	ffffe317          	auipc	t1,0xffffe
 800571c:	6f030067          	jr	1776(t1) # 8003e08 <delay_1ms>

08005720 <TIMER1_IRQHandler>:
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005720:	40012537          	lui	a0,0x40012
void TIMER1_IRQHandler(void){
 8005724:	712d                	addi	sp,sp,-288
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005726:	4589                	li	a1,2
 8005728:	40050513          	addi	a0,a0,1024 # 40012400 <_sp+0x2000a400>
void TIMER1_IRQHandler(void){
 800572c:	10112e23          	sw	ra,284(sp)
 8005730:	10812c23          	sw	s0,280(sp)
 8005734:	10912a23          	sw	s1,276(sp)
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005738:	ffffb097          	auipc	ra,0xffffb
 800573c:	700080e7          	jalr	1792(ra) # 8000e38 <adc_flag_get>
 8005740:	18051163          	bnez	a0,80058c2 <TIMER1_IRQHandler+0x1a2>
 8005744:	842a                	mv	s0,a0
        char str_buf[256] = {'\0'};
 8005746:	10000613          	li	a2,256
 800574a:	4581                	li	a1,0
 800574c:	0808                	addi	a0,sp,16
        uint16_t data_Buffer[8] = {0};
 800574e:	c002                	sw	zero,0(sp)
 8005750:	c202                	sw	zero,4(sp)
 8005752:	c402                	sw	zero,8(sp)
 8005754:	c602                	sw	zero,12(sp)
        char str_buf[256] = {'\0'};
 8005756:	00002097          	auipc	ra,0x2
 800575a:	a84080e7          	jalr	-1404(ra) # 80071da <memset>
            data_Buffer[i] = sample_buffer[i];
 800575e:	200017b7          	lui	a5,0x20001
 8005762:	5e078793          	addi	a5,a5,1504 # 200015e0 <sample_buffer>
        for (int i = 0; i < 8; i++){
 8005766:	4741                	li	a4,16
            data_Buffer[i] = sample_buffer[i];
 8005768:	00f40633          	add	a2,s0,a5
 800576c:	00065603          	lhu	a2,0(a2)
 8005770:	008106b3          	add	a3,sp,s0
 8005774:	0409                	addi	s0,s0,2
 8005776:	00c69023          	sh	a2,0(a3) # 1000000 <__stack_size+0xfff000>
        for (int i = 0; i < 8; i++){
 800577a:	fee417e3          	bne	s0,a4,8005768 <TIMER1_IRQHandler+0x48>
        adc_flag_clear(ADC0, ADC_FLAG_EOC); 
 800577e:	40012437          	lui	s0,0x40012
 8005782:	4589                	li	a1,2
 8005784:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 8005788:	ffffb097          	auipc	ra,0xffffb
 800578c:	6ba080e7          	jalr	1722(ra) # 8000e42 <adc_flag_clear>
        adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 8005790:	4585                	li	a1,1
 8005792:	40040513          	addi	a0,s0,1024
 8005796:	ffffb097          	auipc	ra,0xffffb
 800579a:	682080e7          	jalr	1666(ra) # 8000e18 <adc_software_trigger_enable>
        if (SET == timer_interrupt_flag_get(TIMER1, TIMER_INT_CH0)){
 800579e:	4589                	li	a1,2
 80057a0:	40000537          	lui	a0,0x40000
 80057a4:	ffffc097          	auipc	ra,0xffffc
 80057a8:	fe6080e7          	jalr	-26(ra) # 800178a <timer_interrupt_flag_get>
 80057ac:	4785                	li	a5,1
 80057ae:	10f51a63          	bne	a0,a5,80058c2 <TIMER1_IRQHandler+0x1a2>
            millisec++; // Add one each time an interrupt happens
 80057b2:	200004b7          	lui	s1,0x20000
 80057b6:	53048793          	addi	a5,s1,1328 # 20000530 <millisec>
 80057ba:	4398                	lw	a4,0(a5)
 80057bc:	20000437          	lui	s0,0x20000
 80057c0:	53048493          	addi	s1,s1,1328
 80057c4:	0705                	addi	a4,a4,1
 80057c6:	c398                	sw	a4,0(a5)
            if (millisec == 1000){
 80057c8:	4398                	lw	a4,0(a5)
 80057ca:	3e800793          	li	a5,1000
 80057ce:	53840413          	addi	s0,s0,1336 # 20000538 <seconds>
 80057d2:	00f71763          	bne	a4,a5,80057e0 <TIMER1_IRQHandler+0xc0>
                millisec = 0;
 80057d6:	0004a023          	sw	zero,0(s1)
                seconds++;
 80057da:	401c                	lw	a5,0(s0)
 80057dc:	0785                	addi	a5,a5,1
 80057de:	c01c                	sw	a5,0(s0)
            if(millisec == 800){
 80057e0:	4098                	lw	a4,0(s1)
 80057e2:	32000793          	li	a5,800
 80057e6:	00f71963          	bne	a4,a5,80057f8 <TIMER1_IRQHandler+0xd8>
                stagger_data_to_phone(seconds);
 80057ea:	4008                	lw	a0,0(s0)
 80057ec:	0542                	slli	a0,a0,0x10
 80057ee:	8541                	srai	a0,a0,0x10
 80057f0:	00000097          	auipc	ra,0x0
 80057f4:	edc080e7          	jalr	-292(ra) # 80056cc <stagger_data_to_phone>
            if (seconds == 60){
 80057f8:	4014                	lw	a3,0(s0)
 80057fa:	200007b7          	lui	a5,0x20000
 80057fe:	03c00713          	li	a4,60
 8005802:	53478793          	addi	a5,a5,1332 # 20000534 <minutes>
 8005806:	00e69763          	bne	a3,a4,8005814 <TIMER1_IRQHandler+0xf4>
                seconds = 0;
 800580a:	00042023          	sw	zero,0(s0)
                minutes++;
 800580e:	4398                	lw	a4,0(a5)
 8005810:	0705                	addi	a4,a4,1
 8005812:	c398                	sw	a4,0(a5)
            formatTime(str_buf, minutes, seconds, millisec);
 8005814:	438c                	lw	a1,0(a5)
 8005816:	4010                	lw	a2,0(s0)
 8005818:	4094                	lw	a3,0(s1)
 800581a:	0808                	addi	a0,sp,16
 800581c:	00000097          	auipc	ra,0x0
 8005820:	22a080e7          	jalr	554(ra) # 8005a46 <formatTime>
            append_int_to_string(str_buf, data_Buffer[0]);
 8005824:	00015583          	lhu	a1,0(sp)
 8005828:	0808                	addi	a0,sp,16
 800582a:	00000097          	auipc	ra,0x0
 800582e:	320080e7          	jalr	800(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[1]);
 8005832:	00215583          	lhu	a1,2(sp)
 8005836:	0808                	addi	a0,sp,16
 8005838:	00000097          	auipc	ra,0x0
 800583c:	312080e7          	jalr	786(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[2]);
 8005840:	00415583          	lhu	a1,4(sp)
 8005844:	0808                	addi	a0,sp,16
 8005846:	00000097          	auipc	ra,0x0
 800584a:	304080e7          	jalr	772(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[3]);
 800584e:	00615583          	lhu	a1,6(sp)
 8005852:	0808                	addi	a0,sp,16
 8005854:	00000097          	auipc	ra,0x0
 8005858:	2f6080e7          	jalr	758(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[4]);
 800585c:	00815583          	lhu	a1,8(sp)
 8005860:	0808                	addi	a0,sp,16
 8005862:	00000097          	auipc	ra,0x0
 8005866:	2e8080e7          	jalr	744(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[5]);
 800586a:	00a15583          	lhu	a1,10(sp)
 800586e:	0808                	addi	a0,sp,16
 8005870:	00000097          	auipc	ra,0x0
 8005874:	2da080e7          	jalr	730(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[6]);
 8005878:	00c15583          	lhu	a1,12(sp)
 800587c:	0808                	addi	a0,sp,16
 800587e:	00000097          	auipc	ra,0x0
 8005882:	2cc080e7          	jalr	716(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[7]);
 8005886:	00e15583          	lhu	a1,14(sp)
 800588a:	0808                	addi	a0,sp,16
 800588c:	00000097          	auipc	ra,0x0
 8005890:	2be080e7          	jalr	702(ra) # 8005b4a <append_int_to_string>
            append_newLine(str_buf, strlen(str_buf));
 8005894:	0808                	addi	a0,sp,16
 8005896:	00002097          	auipc	ra,0x2
 800589a:	9ba080e7          	jalr	-1606(ra) # 8007250 <strlen>
 800589e:	85aa                	mv	a1,a0
 80058a0:	0808                	addi	a0,sp,16
 80058a2:	00000097          	auipc	ra,0x0
 80058a6:	2d8080e7          	jalr	728(ra) # 8005b7a <append_newLine>
            enqueue_string(str_buf);
 80058aa:	0808                	addi	a0,sp,16
 80058ac:	00000097          	auipc	ra,0x0
 80058b0:	35e080e7          	jalr	862(ra) # 8005c0a <enqueue_string>
            timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 80058b4:	4589                	li	a1,2
 80058b6:	40000537          	lui	a0,0x40000
 80058ba:	ffffc097          	auipc	ra,0xffffc
 80058be:	ee2080e7          	jalr	-286(ra) # 800179c <timer_interrupt_flag_clear>
}
 80058c2:	11c12083          	lw	ra,284(sp)
 80058c6:	11812403          	lw	s0,280(sp)
 80058ca:	11412483          	lw	s1,276(sp)
 80058ce:	6115                	addi	sp,sp,288
 80058d0:	8082                	ret

080058d2 <ledInit>:
                break;
        }
    }
}

void ledInit (void){
 80058d2:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 80058d4:	60300513          	li	a0,1539
void ledInit (void){
 80058d8:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 80058da:	ffffb097          	auipc	ra,0xffffb
 80058de:	7b6080e7          	jalr	1974(ra) # 8001090 <rcu_periph_clock_enable>
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
}
 80058e2:	40b2                	lw	ra,12(sp)
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80058e4:	40011537          	lui	a0,0x40011
 80058e8:	469d                	li	a3,7
 80058ea:	460d                	li	a2,3
 80058ec:	45c1                	li	a1,16
 80058ee:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
}
 80058f2:	0141                	addi	sp,sp,16
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80058f4:	ffffb317          	auipc	t1,0xffffb
 80058f8:	6e630067          	jr	1766(t1) # 8000fda <gpio_init>

080058fc <led_on_B1>:

void led_on_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 1);
 80058fc:	40011537          	lui	a0,0x40011
 8005900:	4605                	li	a2,1
 8005902:	4589                	li	a1,2
 8005904:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005908:	ffffb317          	auipc	t1,0xffffb
 800590c:	77e30067          	jr	1918(t1) # 8001086 <gpio_bit_write>

08005910 <led_off_B1>:
}
void led_off_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 0);
 8005910:	40011537          	lui	a0,0x40011
 8005914:	4601                	li	a2,0
 8005916:	4589                	li	a1,2
 8005918:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 800591c:	ffffb317          	auipc	t1,0xffffb
 8005920:	76a30067          	jr	1898(t1) # 8001086 <gpio_bit_write>

08005924 <led_on_B0>:
void led_off_b2(){
    gpio_bit_write(GPIOB, GPIO_PIN_2, 0);
}

void led_on_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 1);
 8005924:	40011537          	lui	a0,0x40011
 8005928:	4605                	li	a2,1
 800592a:	4585                	li	a1,1
 800592c:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005930:	ffffb317          	auipc	t1,0xffffb
 8005934:	75630067          	jr	1878(t1) # 8001086 <gpio_bit_write>

08005938 <led_off_B0>:
}
void led_off_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 0);
 8005938:	40011537          	lui	a0,0x40011
 800593c:	4601                	li	a2,0
 800593e:	4585                	li	a1,1
 8005940:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005944:	ffffb317          	auipc	t1,0xffffb
 8005948:	74230067          	jr	1858(t1) # 8001086 <gpio_bit_write>

0800594c <timer_interrupt_config>:
}

void timer_interrupt_config(){
 800594c:	7179                	addi	sp,sp,-48
    timer_oc_parameter_struct timer_ocinitpara;
    timer_parameter_struct timer_initpara;

    eclic_irq_enable(TIMER1_IRQn, 1, 0);
 800594e:	4601                	li	a2,0
 8005950:	4585                	li	a1,1
 8005952:	02f00513          	li	a0,47
void timer_interrupt_config(){
 8005956:	d606                	sw	ra,44(sp)
 8005958:	d422                	sw	s0,40(sp)
 800595a:	d226                	sw	s1,36(sp)
    eclic_irq_enable(TIMER1_IRQn, 1, 0);
 800595c:	ffffb097          	auipc	ra,0xffffb
 8005960:	640080e7          	jalr	1600(ra) # 8000f9c <eclic_irq_enable>

    rcu_periph_clock_enable(RCU_TIMER1);
 8005964:	70000513          	li	a0,1792
 8005968:	ffffb097          	auipc	ra,0xffffb
 800596c:	728080e7          	jalr	1832(ra) # 8001090 <rcu_periph_clock_enable>

    timer_deinit(TIMER1);
 8005970:	40000537          	lui	a0,0x40000
 8005974:	ffffc097          	auipc	ra,0xffffc
 8005978:	958080e7          	jalr	-1704(ra) # 80012cc <timer_deinit>

    timer_struct_para_init(&timer_initpara);
 800597c:	0808                	addi	a0,sp,16
 800597e:	ffffc097          	auipc	ra,0xffffc
 8005982:	a20080e7          	jalr	-1504(ra) # 800139e <timer_struct_para_init>
    /* TIMER1 configuration */
    /* Frequency = core clock / ((1+prescaler)*period) = 108MHz / (2*54000) = 1KHz */
    timer_initpara.prescaler = 1;
    timer_initpara.alignedmode = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection = TIMER_COUNTER_UP;
    timer_initpara.period = SystemCoreClock/2000;
 8005986:	20000437          	lui	s0,0x20000
 800598a:	4e842783          	lw	a5,1256(s0) # 200004e8 <SystemCoreClock>
 800598e:	7d000713          	li	a4,2000
    timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
    timer_init(TIMER1, &timer_initpara);
 8005992:	080c                	addi	a1,sp,16
    timer_initpara.period = SystemCoreClock/2000;
 8005994:	02e7d7b3          	divu	a5,a5,a4
    timer_initpara.prescaler = 1;
 8005998:	4485                	li	s1,1
    timer_init(TIMER1, &timer_initpara);
 800599a:	40000537          	lui	a0,0x40000
    timer_initpara.prescaler = 1;
 800599e:	c826                	sw	s1,16(sp)
    timer_initpara.counterdirection = TIMER_COUNTER_UP;
 80059a0:	00011a23          	sh	zero,20(sp)
    timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
 80059a4:	00011e23          	sh	zero,28(sp)
    timer_initpara.period = SystemCoreClock/2000;
 80059a8:	cc3e                	sw	a5,24(sp)
    timer_init(TIMER1, &timer_initpara);
 80059aa:	ffffc097          	auipc	ra,0xffffc
 80059ae:	a0c080e7          	jalr	-1524(ra) # 80013b6 <timer_init>

    timer_channel_output_struct_para_init(&timer_ocinitpara);
 80059b2:	0048                	addi	a0,sp,4
 80059b4:	ffffc097          	auipc	ra,0xffffc
 80059b8:	a9a080e7          	jalr	-1382(ra) # 800144e <timer_channel_output_struct_para_init>

    timer_ocinitpara.outputstate = TIMER_CCX_ENABLE;
    timer_ocinitpara.ocpolarity = TIMER_OC_POLARITY_HIGH;
    timer_ocinitpara.ocidlestate = TIMER_OC_IDLE_STATE_LOW;
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 80059bc:	0050                	addi	a2,sp,4
 80059be:	4581                	li	a1,0
 80059c0:	40000537          	lui	a0,0x40000
    timer_ocinitpara.outputstate = TIMER_CCX_ENABLE;
 80059c4:	00911223          	sh	s1,4(sp)
    timer_ocinitpara.ocpolarity = TIMER_OC_POLARITY_HIGH;
 80059c8:	00011423          	sh	zero,8(sp)
    timer_ocinitpara.ocidlestate = TIMER_OC_IDLE_STATE_LOW;
 80059cc:	00011623          	sh	zero,12(sp)
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 80059d0:	ffffc097          	auipc	ra,0xffffc
 80059d4:	a98080e7          	jalr	-1384(ra) # 8001468 <timer_channel_output_config>

    timer_channel_output_pulse_value_config(TIMER1, TIMER_CH_0, SystemCoreClock / 4000);
 80059d8:	4e842603          	lw	a2,1256(s0)
 80059dc:	6785                	lui	a5,0x1
 80059de:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 80059e2:	02f65633          	divu	a2,a2,a5
 80059e6:	4581                	li	a1,0
 80059e8:	40000537          	lui	a0,0x40000
 80059ec:	ffffc097          	auipc	ra,0xffffc
 80059f0:	d0e080e7          	jalr	-754(ra) # 80016fa <timer_channel_output_pulse_value_config>
    timer_channel_output_mode_config(TIMER1, TIMER_CH_0, TIMER_OC_MODE_TIMING);
 80059f4:	4601                	li	a2,0
 80059f6:	4581                	li	a1,0
 80059f8:	40000537          	lui	a0,0x40000
 80059fc:	ffffc097          	auipc	ra,0xffffc
 8005a00:	ca8080e7          	jalr	-856(ra) # 80016a4 <timer_channel_output_mode_config>
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_0, TIMER_OC_SHADOW_DISABLE);
 8005a04:	4601                	li	a2,0
 8005a06:	4581                	li	a1,0
 8005a08:	40000537          	lui	a0,0x40000
 8005a0c:	ffffc097          	auipc	ra,0xffffc
 8005a10:	d14080e7          	jalr	-748(ra) # 8001720 <timer_channel_output_shadow_config>

    timer_interrupt_enable(TIMER1, TIMER_INT_CH0);
 8005a14:	4589                	li	a1,2
 8005a16:	40000537          	lui	a0,0x40000
 8005a1a:	ffffc097          	auipc	ra,0xffffc
 8005a1e:	d5c080e7          	jalr	-676(ra) # 8001776 <timer_interrupt_enable>
    /* Make sure interrupt flag is clear */
    timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 8005a22:	4589                	li	a1,2
 8005a24:	40000537          	lui	a0,0x40000
 8005a28:	ffffc097          	auipc	ra,0xffffc
 8005a2c:	d74080e7          	jalr	-652(ra) # 800179c <timer_interrupt_flag_clear>
    timer_enable(TIMER1);
 8005a30:	40000537          	lui	a0,0x40000
 8005a34:	ffffc097          	auipc	ra,0xffffc
 8005a38:	a10080e7          	jalr	-1520(ra) # 8001444 <timer_enable>
}
 8005a3c:	50b2                	lw	ra,44(sp)
 8005a3e:	5422                	lw	s0,40(sp)
 8005a40:	5492                	lw	s1,36(sp)
 8005a42:	6145                	addi	sp,sp,48
 8005a44:	8082                	ret

08005a46 <formatTime>:

void formatTime(char *output, int minutes, int seconds, int milliseconds) {
    // Format minutes
    output[0] = (minutes / 10) + '0';
 8005a46:	47a9                	li	a5,10
 8005a48:	02f5c733          	div	a4,a1,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
    output[8] = (milliseconds % 10) + '0';

    // Add a semicolon and null terminator
    output[9] = ';';
    output[10] = '\0';
 8005a4c:	00050523          	sb	zero,10(a0) # 4000000a <_sp+0x1fff800a>
    output[0] = (minutes / 10) + '0';
 8005a50:	03070713          	addi	a4,a4,48
 8005a54:	00e50023          	sb	a4,0(a0)
    output[3] = (seconds / 10) + '0';
 8005a58:	02f64733          	div	a4,a2,a5
 8005a5c:	03070713          	addi	a4,a4,48
 8005a60:	00e501a3          	sb	a4,3(a0)
    output[6] = ((milliseconds / 100) % 10) + '0';
 8005a64:	06400713          	li	a4,100
 8005a68:	02e6c733          	div	a4,a3,a4
 8005a6c:	02f76733          	rem	a4,a4,a5
 8005a70:	03070713          	addi	a4,a4,48
 8005a74:	00e50323          	sb	a4,6(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005a78:	02f6c733          	div	a4,a3,a5
    output[1] = (minutes % 10) + '0';
 8005a7c:	02f5e5b3          	rem	a1,a1,a5
    output[4] = (seconds % 10) + '0';
 8005a80:	02f66633          	rem	a2,a2,a5
    output[1] = (minutes % 10) + '0';
 8005a84:	03058593          	addi	a1,a1,48
 8005a88:	00b500a3          	sb	a1,1(a0)
    output[2] = '.';
 8005a8c:	02e00593          	li	a1,46
 8005a90:	00b50123          	sb	a1,2(a0)
    output[5] = '.';
 8005a94:	00b502a3          	sb	a1,5(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005a98:	02f76733          	rem	a4,a4,a5
    output[4] = (seconds % 10) + '0';
 8005a9c:	03060613          	addi	a2,a2,48
 8005aa0:	00c50223          	sb	a2,4(a0)
    output[8] = (milliseconds % 10) + '0';
 8005aa4:	02f6e6b3          	rem	a3,a3,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005aa8:	03070713          	addi	a4,a4,48
    output[9] = ';';
 8005aac:	03b00793          	li	a5,59
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005ab0:	00e503a3          	sb	a4,7(a0)
    output[9] = ';';
 8005ab4:	00f504a3          	sb	a5,9(a0)
    output[8] = (milliseconds % 10) + '0';
 8005ab8:	03068693          	addi	a3,a3,48
 8005abc:	00d50423          	sb	a3,8(a0)
}
 8005ac0:	8082                	ret

08005ac2 <int_to_string>:

int int_to_string(char *string, int integer){
 8005ac2:	87aa                	mv	a5,a0
    int i = 0;
    int divider = 1000;
    if(integer < 0){
 8005ac4:	0605d363          	bgez	a1,8005b2a <int_to_string+0x68>
        string[i++] = '-';
 8005ac8:	02d00713          	li	a4,45
 8005acc:	00e50023          	sb	a4,0(a0)
        integer = -integer;
 8005ad0:	40b005b3          	neg	a1,a1
        string[i++] = '-';
 8005ad4:	4705                	li	a4,1
    int divider = 1000;
 8005ad6:	3e800693          	li	a3,1000
        string[i++] = ';';
        string[i] = '\0';
        return i;
    }
    int og_num = integer;
    while (integer >= divider * 10) {
 8005ada:	4529                	li	a0,10
 8005adc:	02a68633          	mul	a2,a3,a0
 8005ae0:	06c5d363          	bge	a1,a2,8005b46 <int_to_string+0x84>
 8005ae4:	852e                	mv	a0,a1
        divider *= 10; 
    }

    while(divider){
        char digit = (integer/divider)+ '0';
        if(digit != '0' || og_num > integer){
 8005ae6:	03000893          	li	a7,48
            string[i++] = digit; 
        }
        
        integer %= divider;
        divider /= 10;
 8005aea:	4829                	li	a6,10
        char digit = (integer/divider)+ '0';
 8005aec:	02d54633          	div	a2,a0,a3
 8005af0:	03060613          	addi	a2,a2,48
 8005af4:	0ff67613          	andi	a2,a2,255
        if(digit != '0' || og_num > integer){
 8005af8:	01161463          	bne	a2,a7,8005b00 <int_to_string+0x3e>
 8005afc:	00b55763          	bge	a0,a1,8005b0a <int_to_string+0x48>
            string[i++] = digit; 
 8005b00:	00e78333          	add	t1,a5,a4
 8005b04:	00c30023          	sb	a2,0(t1)
 8005b08:	0705                	addi	a4,a4,1
        integer %= divider;
 8005b0a:	02d56533          	rem	a0,a0,a3
        divider /= 10;
 8005b0e:	0306c6b3          	div	a3,a3,a6
    while(divider){
 8005b12:	fee9                	bnez	a3,8005aec <int_to_string+0x2a>
    }
    string[i++] = ';';
 8005b14:	00170513          	addi	a0,a4,1
 8005b18:	03b00693          	li	a3,59
 8005b1c:	973e                	add	a4,a4,a5
 8005b1e:	00d70023          	sb	a3,0(a4)
    string[i] = '\0';
 8005b22:	97aa                	add	a5,a5,a0
 8005b24:	00078023          	sb	zero,0(a5)
    return i;
}
 8005b28:	8082                	ret
    int i = 0;
 8005b2a:	4701                	li	a4,0
    }else if(integer == 0){
 8005b2c:	f5cd                	bnez	a1,8005ad6 <int_to_string+0x14>
        string[i++] = '0';
 8005b2e:	03000713          	li	a4,48
 8005b32:	00e50023          	sb	a4,0(a0)
        string[i++] = ';';
 8005b36:	03b00713          	li	a4,59
 8005b3a:	00e500a3          	sb	a4,1(a0)
        string[i] = '\0';
 8005b3e:	00050123          	sb	zero,2(a0)
        return i;
 8005b42:	4509                	li	a0,2
 8005b44:	8082                	ret
 8005b46:	86b2                	mv	a3,a2
 8005b48:	bf51                	j	8005adc <int_to_string+0x1a>

08005b4a <append_int_to_string>:

int append_int_to_string(char *string, int integer){
 8005b4a:	7179                	addi	sp,sp,-48
 8005b4c:	d422                	sw	s0,40(sp)
 8005b4e:	842a                	mv	s0,a0
    char temp[20] = {'\0'};
    int_to_string(temp, integer);
 8005b50:	0068                	addi	a0,sp,12
int append_int_to_string(char *string, int integer){
 8005b52:	d606                	sw	ra,44(sp)
    char temp[20] = {'\0'};
 8005b54:	c602                	sw	zero,12(sp)
 8005b56:	c802                	sw	zero,16(sp)
 8005b58:	ca02                	sw	zero,20(sp)
 8005b5a:	cc02                	sw	zero,24(sp)
 8005b5c:	ce02                	sw	zero,28(sp)
    int_to_string(temp, integer);
 8005b5e:	00000097          	auipc	ra,0x0
 8005b62:	f64080e7          	jalr	-156(ra) # 8005ac2 <int_to_string>
    int len = fuseStrings(string, temp);
 8005b66:	006c                	addi	a1,sp,12
 8005b68:	8522                	mv	a0,s0
 8005b6a:	00000097          	auipc	ra,0x0
 8005b6e:	118080e7          	jalr	280(ra) # 8005c82 <fuseStrings>
    return len;
}
 8005b72:	50b2                	lw	ra,44(sp)
 8005b74:	5422                	lw	s0,40(sp)
 8005b76:	6145                	addi	sp,sp,48
 8005b78:	8082                	ret

08005b7a <append_newLine>:

void append_newLine(char *string, int length) {
    string[length-1] = '\n';
 8005b7a:	95aa                	add	a1,a1,a0
 8005b7c:	47a9                	li	a5,10
 8005b7e:	fef58fa3          	sb	a5,-1(a1)
    string[length] = '\0'; // Add a null terminator at the new end
 8005b82:	00058023          	sb	zero,0(a1)
}
 8005b86:	8082                	ret

08005b88 <millis>:

int millis(void) {
 8005b88:	1141                	addi	sp,sp,-16
 8005b8a:	c606                	sw	ra,12(sp)
 8005b8c:	c422                	sw	s0,8(sp)
 8005b8e:	c226                	sw	s1,4(sp)
    uint64_t mtime = get_timer_value();
 8005b90:	ffffc097          	auipc	ra,0xffffc
 8005b94:	080080e7          	jalr	128(ra) # 8001c10 <get_timer_value>
    return ((mtime * 4000.0) / SystemCoreClock); // Adjusted for seconds and milliseconds
 8005b98:	00001097          	auipc	ra,0x1
 8005b9c:	34e080e7          	jalr	846(ra) # 8006ee6 <__floatundidf>
 8005ba0:	080007b7          	lui	a5,0x8000
 8005ba4:	4987a603          	lw	a2,1176(a5) # 8000498 <_std_dev_req+0x108>
 8005ba8:	49c7a683          	lw	a3,1180(a5)
 8005bac:	00001097          	auipc	ra,0x1
 8005bb0:	e34080e7          	jalr	-460(ra) # 80069e0 <__muldf3>
 8005bb4:	200007b7          	lui	a5,0x20000
 8005bb8:	842a                	mv	s0,a0
 8005bba:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8005bbe:	84ae                	mv	s1,a1
 8005bc0:	00001097          	auipc	ra,0x1
 8005bc4:	2d0080e7          	jalr	720(ra) # 8006e90 <__floatunsidf>
 8005bc8:	862a                	mv	a2,a0
 8005bca:	86ae                	mv	a3,a1
 8005bcc:	8522                	mv	a0,s0
 8005bce:	85a6                	mv	a1,s1
 8005bd0:	00001097          	auipc	ra,0x1
 8005bd4:	826080e7          	jalr	-2010(ra) # 80063f6 <__divdf3>
 8005bd8:	00001097          	auipc	ra,0x1
 8005bdc:	254080e7          	jalr	596(ra) # 8006e2c <__fixdfsi>
 8005be0:	40b2                	lw	ra,12(sp)
 8005be2:	4422                	lw	s0,8(sp)
 8005be4:	4492                	lw	s1,4(sp)
 8005be6:	0141                	addi	sp,sp,16
 8005be8:	8082                	ret

08005bea <init_q>:
#include "queue.h"

Buf_queue w;

void init_q(void){
    w.memorySize  = STRING_QUEUE_SIZE;
 8005bea:	200057b7          	lui	a5,0x20005
 8005bee:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
 8005bf2:	02000713          	li	a4,32
 8005bf6:	c398                	sw	a4,0(a5)
    w.size        = SIZE_INIT;
 8005bf8:	0007a223          	sw	zero,4(a5)
    w.head        = HEAD_INIT;
 8005bfc:	0007a423          	sw	zero,8(a5)
    w.tail        = TAIL_INIT;
 8005c00:	0007a623          	sw	zero,12(a5)
    w.tail_string = TAIL_INIT;
 8005c04:	0007a823          	sw	zero,16(a5)
}
 8005c08:	8082                	ret

08005c0a <enqueue_string>:

int enqueue_string(char *string) {
    // Check if the queue is already full.
    if (w.size == w.memorySize) {
 8005c0a:	200017b7          	lui	a5,0x20001
 8005c0e:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005c12:	6691                	lui	a3,0x4
 8005c14:	9736                	add	a4,a4,a3
 8005c16:	00072883          	lw	a7,0(a4)
 8005c1a:	4358                	lw	a4,4(a4)
 8005c1c:	5f078593          	addi	a1,a5,1520
 8005c20:	200057b7          	lui	a5,0x20005
 8005c24:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
        w.buf[w.tail][w.tail_string] = *string;
        string++; // Move to the next character in 'string'.
        w.tail_string++; // Move to the next position in the current buffer.

        // If the current buffer is full (512 characters), wrap around to the next buffer.
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8005c28:	1ff00e13          	li	t3,511
    if (w.size == w.memorySize) {
 8005c2c:	03171c63          	bne	a4,a7,8005c64 <enqueue_string+0x5a>
        return 0; // Return 0 to indicate that the queue is full.
 8005c30:	4501                	li	a0,0
 8005c32:	8082                	ret
        w.buf[w.tail][w.tail_string] = *string;
 8005c34:	47d8                	lw	a4,12(a5)
 8005c36:	4b94                	lw	a3,16(a5)
        string++; // Move to the next character in 'string'.
 8005c38:	0505                	addi	a0,a0,1
        w.buf[w.tail][w.tail_string] = *string;
 8005c3a:	00971813          	slli	a6,a4,0x9
 8005c3e:	982e                	add	a6,a6,a1
 8005c40:	00d80eb3          	add	t4,a6,a3
        w.tail_string++; // Move to the next position in the current buffer.
 8005c44:	0685                	addi	a3,a3,1
        w.buf[w.tail][w.tail_string] = *string;
 8005c46:	006e8023          	sb	t1,0(t4)
        w.tail_string++; // Move to the next position in the current buffer.
 8005c4a:	cb94                	sw	a3,16(a5)
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8005c4c:	01c69c63          	bne	a3,t3,8005c64 <enqueue_string+0x5a>
            w.buf[w.tail][w.tail_string] = '\0';
            w.tail_string = 0; // Reset the buffer position.
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8005c50:	0705                	addi	a4,a4,1
 8005c52:	03176733          	rem	a4,a4,a7
            w.size++; // Increment the size of the queue.
 8005c56:	0605                	addi	a2,a2,1
            w.buf[w.tail][w.tail_string] = '\0';
 8005c58:	1e080fa3          	sb	zero,511(a6)
            w.tail_string = 0; // Reset the buffer position.
 8005c5c:	0007a823          	sw	zero,16(a5)
            w.size++; // Increment the size of the queue.
 8005c60:	c3d0                	sw	a2,4(a5)
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8005c62:	c7d8                	sw	a4,12(a5)
    while (*string != '\0' && w.size != w.memorySize) {
 8005c64:	00054303          	lbu	t1,0(a0)
 8005c68:	00030563          	beqz	t1,8005c72 <enqueue_string+0x68>
 8005c6c:	43d0                	lw	a2,4(a5)
 8005c6e:	fcc893e3          	bne	a7,a2,8005c34 <enqueue_string+0x2a>
        }
    }

    return 1; // Return 1 to indicate successful enqueuing.
 8005c72:	4505                	li	a0,1
}
 8005c74:	8082                	ret

08005c76 <queue_str_len>:
    return str_len; // Return the length of the concatenated string.
}

int queue_str_len(void) {
    return w.size; // Return the size of the queue.
}
 8005c76:	200057b7          	lui	a5,0x20005
 8005c7a:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
 8005c7e:	43c8                	lw	a0,4(a5)
 8005c80:	8082                	ret

08005c82 <fuseStrings>:
}

int fuseStrings(char *str1, const char *str2) {
    char *start = str1;  // Save the starting position of str1
    // Find the end of the first string
    while (*str1 != '\0') {
 8005c82:	87aa                	mv	a5,a0
 8005c84:	0007c703          	lbu	a4,0(a5)
 8005c88:	eb09                	bnez	a4,8005c9a <fuseStrings+0x18>
        str1++;
    }
    // Copy characters from the second string to the end of the first string
    while (*str2 != '\0') {
 8005c8a:	0005c703          	lbu	a4,0(a1)
 8005c8e:	eb01                	bnez	a4,8005c9e <fuseStrings+0x1c>
        *str1 = *str2;
        str1++;
        str2++;
    }
    // Add the null terminator to mark the end of the concatenated string
    *str1 = '\0';
 8005c90:	00078023          	sb	zero,0(a5)
    // Calculate and return the length of the concatenated string
    return str1 - start;
}
 8005c94:	40a78533          	sub	a0,a5,a0
 8005c98:	8082                	ret
        str1++;
 8005c9a:	0785                	addi	a5,a5,1
 8005c9c:	b7e5                	j	8005c84 <fuseStrings+0x2>
        *str1 = *str2;
 8005c9e:	00e78023          	sb	a4,0(a5)
        str2++;
 8005ca2:	0585                	addi	a1,a1,1
        str1++;
 8005ca4:	0785                	addi	a5,a5,1
        str2++;
 8005ca6:	b7d5                	j	8005c8a <fuseStrings+0x8>

08005ca8 <dequeue_string>:
    if (w.size == 0) {
 8005ca8:	200017b7          	lui	a5,0x20001
 8005cac:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005cb0:	6691                	lui	a3,0x4
int dequeue_string(char *string, int num_of_blocks) {
 8005cb2:	1101                	addi	sp,sp,-32
    if (w.size == 0) {
 8005cb4:	9736                	add	a4,a4,a3
int dequeue_string(char *string, int num_of_blocks) {
 8005cb6:	ca26                	sw	s1,20(sp)
    if (w.size == 0) {
 8005cb8:	4344                	lw	s1,4(a4)
int dequeue_string(char *string, int num_of_blocks) {
 8005cba:	ce06                	sw	ra,28(sp)
 8005cbc:	cc22                	sw	s0,24(sp)
 8005cbe:	c84a                	sw	s2,16(sp)
 8005cc0:	c64e                	sw	s3,12(sp)
 8005cc2:	c452                	sw	s4,8(sp)
 8005cc4:	c256                	sw	s5,4(sp)
    if (w.size == 0) {
 8005cc6:	cc99                	beqz	s1,8005ce4 <dequeue_string+0x3c>
    } else if (num_of_blocks > w.size) {
 8005cc8:	04b4cc63          	blt	s1,a1,8005d20 <dequeue_string+0x78>
 8005ccc:	20005437          	lui	s0,0x20005
 8005cd0:	5f078993          	addi	s3,a5,1520
 8005cd4:	5f040413          	addi	s0,s0,1520 # 200055f0 <w+0x4000>
 8005cd8:	892e                	mv	s2,a1
 8005cda:	8aaa                	mv	s5,a0
    int blocks_dequeued = 0; // Track the number of blocks dequeued
 8005cdc:	4a01                	li	s4,0
    int str_len = 0;
 8005cde:	4481                	li	s1,0
    while (blocks_dequeued < num_of_blocks) {
 8005ce0:	012a4c63          	blt	s4,s2,8005cf8 <dequeue_string+0x50>
}
 8005ce4:	40f2                	lw	ra,28(sp)
 8005ce6:	4462                	lw	s0,24(sp)
 8005ce8:	8526                	mv	a0,s1
 8005cea:	4942                	lw	s2,16(sp)
 8005cec:	44d2                	lw	s1,20(sp)
 8005cee:	49b2                	lw	s3,12(sp)
 8005cf0:	4a22                	lw	s4,8(sp)
 8005cf2:	4a92                	lw	s5,4(sp)
 8005cf4:	6105                	addi	sp,sp,32
 8005cf6:	8082                	ret
        str_len += fuseStrings(string, w.buf[w.head]);
 8005cf8:	440c                	lw	a1,8(s0)
 8005cfa:	8556                	mv	a0,s5
        blocks_dequeued++; // Increment the number of blocks dequeued.
 8005cfc:	0a05                	addi	s4,s4,1
        str_len += fuseStrings(string, w.buf[w.head]);
 8005cfe:	05a6                	slli	a1,a1,0x9
 8005d00:	95ce                	add	a1,a1,s3
 8005d02:	00000097          	auipc	ra,0x0
 8005d06:	f80080e7          	jalr	-128(ra) # 8005c82 <fuseStrings>
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 8005d0a:	441c                	lw	a5,8(s0)
 8005d0c:	4018                	lw	a4,0(s0)
        str_len += fuseStrings(string, w.buf[w.head]);
 8005d0e:	94aa                	add	s1,s1,a0
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 8005d10:	0785                	addi	a5,a5,1
 8005d12:	02e7e7b3          	rem	a5,a5,a4
 8005d16:	c41c                	sw	a5,8(s0)
        w.size--; // Decrement the size of the queue.
 8005d18:	405c                	lw	a5,4(s0)
 8005d1a:	17fd                	addi	a5,a5,-1
 8005d1c:	c05c                	sw	a5,4(s0)
        blocks_dequeued++; // Increment the number of blocks dequeued.
 8005d1e:	b7c9                	j	8005ce0 <dequeue_string+0x38>
        return -1; // Return -1 to indicate that there are not enough blocks in the queue.
 8005d20:	54fd                	li	s1,-1
 8005d22:	b7c9                	j	8005ce4 <dequeue_string+0x3c>

08005d24 <empty_string_queue>:
int empty_string_queue(char *dest, int max_block_size){
 8005d24:	1101                	addi	sp,sp,-32
 8005d26:	ca26                	sw	s1,20(sp)
 8005d28:	c84a                	sw	s2,16(sp)
 8005d2a:	c64e                	sw	s3,12(sp)
 8005d2c:	892a                	mv	s2,a0
 8005d2e:	ce06                	sw	ra,28(sp)
 8005d30:	cc22                	sw	s0,24(sp)
 8005d32:	89ae                	mv	s3,a1
    for(int i = max_block_size; i > 0; i--){
 8005d34:	84ae                	mv	s1,a1
    int str_len = 0;
 8005d36:	4501                	li	a0,0
    for(int i = max_block_size; i > 0; i--){
 8005d38:	04904263          	bgtz	s1,8005d7c <empty_string_queue+0x58>
    int blocks_dequeued = 0;
 8005d3c:	4481                	li	s1,0
    if(w.size == 0 && blocks_dequeued < max_block_size){
 8005d3e:	200015b7          	lui	a1,0x20001
 8005d42:	5f058593          	addi	a1,a1,1520 # 200015f0 <w>
 8005d46:	6411                	lui	s0,0x4
 8005d48:	942e                	add	s0,s0,a1
 8005d4a:	405c                	lw	a5,4(s0)
 8005d4c:	e38d                	bnez	a5,8005d6e <empty_string_queue+0x4a>
 8005d4e:	0334d063          	bge	s1,s3,8005d6e <empty_string_queue+0x4a>
        w.buf[w.head][w.tail_string] = '\0';
 8005d52:	4418                	lw	a4,8(s0)
 8005d54:	481c                	lw	a5,16(s0)
        str_len = fuseStrings(dest, w.buf[w.head]);
 8005d56:	854a                	mv	a0,s2
        w.buf[w.head][w.tail_string] = '\0';
 8005d58:	0726                	slli	a4,a4,0x9
 8005d5a:	95ba                	add	a1,a1,a4
 8005d5c:	97ae                	add	a5,a5,a1
 8005d5e:	00078023          	sb	zero,0(a5)
        str_len = fuseStrings(dest, w.buf[w.head]);
 8005d62:	00000097          	auipc	ra,0x0
 8005d66:	f20080e7          	jalr	-224(ra) # 8005c82 <fuseStrings>
        w.tail_string = 0;
 8005d6a:	00042823          	sw	zero,16(s0) # 4010 <__stack_size+0x3010>
}
 8005d6e:	40f2                	lw	ra,28(sp)
 8005d70:	4462                	lw	s0,24(sp)
 8005d72:	44d2                	lw	s1,20(sp)
 8005d74:	4942                	lw	s2,16(sp)
 8005d76:	49b2                	lw	s3,12(sp)
 8005d78:	6105                	addi	sp,sp,32
 8005d7a:	8082                	ret
        str_len = dequeue_string(dest,i);
 8005d7c:	85a6                	mv	a1,s1
 8005d7e:	854a                	mv	a0,s2
 8005d80:	00000097          	auipc	ra,0x0
 8005d84:	f28080e7          	jalr	-216(ra) # 8005ca8 <dequeue_string>
        if(str_len > 0){
 8005d88:	faa04be3          	bgtz	a0,8005d3e <empty_string_queue+0x1a>
    for(int i = max_block_size; i > 0; i--){
 8005d8c:	14fd                	addi	s1,s1,-1
 8005d8e:	b76d                	j	8005d38 <empty_string_queue+0x14>

08005d90 <clear_queues>:

void clear_queues(void) {
    // Reset the main queue (w)
    w.size = SIZE_INIT;
 8005d90:	200017b7          	lui	a5,0x20001
 8005d94:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005d98:	6691                	lui	a3,0x4
 8005d9a:	9736                	add	a4,a4,a3
 8005d9c:	00072223          	sw	zero,4(a4)
    w.head = HEAD_INIT;
 8005da0:	00072423          	sw	zero,8(a4)
    w.tail = TAIL_INIT;
 8005da4:	00072623          	sw	zero,12(a4)

    // Reset the string queue (w)
    w.size = SIZE_INIT;
    w.head = HEAD_INIT;
    w.tail = TAIL_INIT;
    w.tail_string = TAIL_INIT;
 8005da8:	00072823          	sw	zero,16(a4)

    // Clear values in the string queue
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8005dac:	5f078793          	addi	a5,a5,1520
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8005db0:	20000613          	li	a2,512
 8005db4:	4681                	li	a3,0
            w.buf[i][j] = '\0';
 8005db6:	00d785b3          	add	a1,a5,a3
 8005dba:	00058023          	sb	zero,0(a1)
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8005dbe:	0685                	addi	a3,a3,1
 8005dc0:	fec69be3          	bne	a3,a2,8005db6 <clear_queues+0x26>
 8005dc4:	20078793          	addi	a5,a5,512
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8005dc8:	fef716e3          	bne	a4,a5,8005db4 <clear_queues+0x24>
        }
    }
}
 8005dcc:	8082                	ret

08005dce <init_radio>:


char rx_radio_buffer[1024] = {'\0'};
char tx_radio_buffer[1024] = {'\0'};

void init_radio(){
 8005dce:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 8005dd0:	50000513          	li	a0,1280
void init_radio(){
 8005dd4:	d606                	sw	ra,44(sp)
 8005dd6:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8005dd8:	ffffb097          	auipc	ra,0xffffb
 8005ddc:	2b8080e7          	jalr	696(ra) # 8001090 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOB);
 8005de0:	60300513          	li	a0,1539
 8005de4:	ffffb097          	auipc	ra,0xffffb
 8005de8:	2ac080e7          	jalr	684(ra) # 8001090 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART2);
 8005dec:	71200513          	li	a0,1810
 8005df0:	ffffb097          	auipc	ra,0xffffb
 8005df4:	2a0080e7          	jalr	672(ra) # 8001090 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_10); //PP for no half duplex
 8005df8:	40011437          	lui	s0,0x40011
 8005dfc:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 8005e00:	40000693          	li	a3,1024
 8005e04:	460d                	li	a2,3
 8005e06:	45e1                	li	a1,24
 8005e08:	ffffb097          	auipc	ra,0xffffb
 8005e0c:	1d2080e7          	jalr	466(ra) # 8000fda <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
 8005e10:	6685                	lui	a3,0x1
 8005e12:	80068693          	addi	a3,a3,-2048 # 800 <__dbg_stack_size+0x800>
 8005e16:	460d                	li	a2,3
 8005e18:	4591                	li	a1,4
 8005e1a:	c0040513          	addi	a0,s0,-1024
 8005e1e:	ffffb097          	auipc	ra,0xffffb
 8005e22:	1bc080e7          	jalr	444(ra) # 8000fda <gpio_init>

    /* USART configure */
    usart_deinit(USART2);
 8005e26:	40005437          	lui	s0,0x40005
 8005e2a:	80040513          	addi	a0,s0,-2048 # 40004800 <_sp+0x1fffc800>
 8005e2e:	ffffc097          	auipc	ra,0xffffc
 8005e32:	976080e7          	jalr	-1674(ra) # 80017a4 <usart_deinit>
    usart_baudrate_set(USART2, 1200);
 8005e36:	80040513          	addi	a0,s0,-2048
 8005e3a:	4b000593          	li	a1,1200
 8005e3e:	ffffc097          	auipc	ra,0xffffc
 8005e42:	a08080e7          	jalr	-1528(ra) # 8001846 <usart_baudrate_set>
    usart_word_length_set(USART2, USART_WL_8BIT);
 8005e46:	80040513          	addi	a0,s0,-2048
 8005e4a:	4581                	li	a1,0
 8005e4c:	ffffc097          	auipc	ra,0xffffc
 8005e50:	a76080e7          	jalr	-1418(ra) # 80018c2 <usart_word_length_set>
    usart_stop_bit_set(USART2, USART_STB_1BIT);
 8005e54:	80040513          	addi	a0,s0,-2048
 8005e58:	4581                	li	a1,0
 8005e5a:	ffffc097          	auipc	ra,0xffffc
 8005e5e:	a7a080e7          	jalr	-1414(ra) # 80018d4 <usart_stop_bit_set>
    usart_parity_config(USART2, USART_PM_NONE);
 8005e62:	80040513          	addi	a0,s0,-2048
 8005e66:	4581                	li	a1,0
 8005e68:	ffffc097          	auipc	ra,0xffffc
 8005e6c:	a4a080e7          	jalr	-1462(ra) # 80018b2 <usart_parity_config>
    usart_hardware_flow_rts_config(USART2, USART_RTS_DISABLE);
 8005e70:	80040513          	addi	a0,s0,-2048
 8005e74:	4581                	li	a1,0
 8005e76:	ffffc097          	auipc	ra,0xffffc
 8005e7a:	a8e080e7          	jalr	-1394(ra) # 8001904 <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART2, USART_CTS_DISABLE);
 8005e7e:	80040513          	addi	a0,s0,-2048
 8005e82:	4581                	li	a1,0
 8005e84:	ffffc097          	auipc	ra,0xffffc
 8005e88:	a8c080e7          	jalr	-1396(ra) # 8001910 <usart_hardware_flow_cts_config>
    usart_receive_config(USART2, USART_RECEIVE_ENABLE);
 8005e8c:	80040513          	addi	a0,s0,-2048
 8005e90:	4591                	li	a1,4
 8005e92:	ffffc097          	auipc	ra,0xffffc
 8005e96:	a68080e7          	jalr	-1432(ra) # 80018fa <usart_receive_config>
    usart_transmit_config(USART2, USART_TRANSMIT_ENABLE);
 8005e9a:	45a1                	li	a1,8
 8005e9c:	80040513          	addi	a0,s0,-2048
 8005ea0:	ffffc097          	auipc	ra,0xffffc
 8005ea4:	a50080e7          	jalr	-1456(ra) # 80018f0 <usart_transmit_config>

    usart_enable(USART2);
 8005ea8:	80040513          	addi	a0,s0,-2048
 8005eac:	ffffc097          	auipc	ra,0xffffc
 8005eb0:	a3a080e7          	jalr	-1478(ra) # 80018e6 <usart_enable>

    usart_dma_transmit_config(USART2, USART_DENT_ENABLE);
 8005eb4:	80040513          	addi	a0,s0,-2048
 8005eb8:	08000593          	li	a1,128
 8005ebc:	ffffc097          	auipc	ra,0xffffc
 8005ec0:	a6c080e7          	jalr	-1428(ra) # 8001928 <usart_dma_transmit_config>
    usart_dma_receive_config(USART2, USART_DENR_ENABLE);
 8005ec4:	80040513          	addi	a0,s0,-2048
 8005ec8:	04000593          	li	a1,64
 8005ecc:	ffffc097          	auipc	ra,0xffffc
 8005ed0:	a50080e7          	jalr	-1456(ra) # 800191c <usart_dma_receive_config>

    dma_deinit(DMA0, DMA_CH2);
 8005ed4:	4589                	li	a1,2
 8005ed6:	40020537          	lui	a0,0x40020
 8005eda:	ffffb097          	auipc	ra,0xffffb
 8005ede:	f74080e7          	jalr	-140(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_radio_buffer;
 8005ee2:	200007b7          	lui	a5,0x20000
 8005ee6:	55478793          	addi	a5,a5,1364 # 20000554 <rx_radio_buffer>
 8005eea:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = 1024;
 8005eec:	40000793          	li	a5,1024
 8005ef0:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005ef2:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005ef4:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005ef6:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005ef8:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005efc:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005f00:	4589                	li	a1,2
 8005f02:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f06:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005f0a:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8005f0c:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8005f0e:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8005f10:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005f14:	ffffb097          	auipc	ra,0xffffb
 8005f18:	f7e080e7          	jalr	-130(ra) # 8000e92 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH2);
 8005f1c:	4589                	li	a1,2
 8005f1e:	40020537          	lui	a0,0x40020
 8005f22:	ffffb097          	auipc	ra,0xffffb
 8005f26:	022080e7          	jalr	34(ra) # 8000f44 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH2);
 8005f2a:	4589                	li	a1,2
 8005f2c:	40020537          	lui	a0,0x40020
 8005f30:	ffffb097          	auipc	ra,0xffffb
 8005f34:	03a080e7          	jalr	58(ra) # 8000f6a <dma_channel_enable>
}
 8005f38:	50b2                	lw	ra,44(sp)
 8005f3a:	5422                	lw	s0,40(sp)
 8005f3c:	6145                	addi	sp,sp,48
 8005f3e:	8082                	ret

08005f40 <send_radio>:
        return i;
    }
    return 0;
}

size_t send_radio(char* message, uint32_t size){
 8005f40:	7179                	addi	sp,sp,-48
 8005f42:	d422                	sw	s0,40(sp)
 8005f44:	20001437          	lui	s0,0x20001
 8005f48:	d226                	sw	s1,36(sp)
 8005f4a:	d606                	sw	ra,44(sp)
 8005f4c:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < 1024; i++) {
 8005f4e:	4781                	li	a5,0
 8005f50:	95440413          	addi	s0,s0,-1708 # 20000954 <tx_radio_buffer>
 8005f54:	40000713          	li	a4,1024
 8005f58:	00978463          	beq	a5,s1,8005f60 <send_radio+0x20>
 8005f5c:	06e79663          	bne	a5,a4,8005fc8 <send_radio+0x88>
        tx_radio_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH1);
 8005f60:	4585                	li	a1,1
 8005f62:	40020537          	lui	a0,0x40020
 8005f66:	ffffb097          	auipc	ra,0xffffb
 8005f6a:	ee8080e7          	jalr	-280(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_radio_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005f6e:	400057b7          	lui	a5,0x40005
 8005f72:	80478793          	addi	a5,a5,-2044 # 40004804 <_sp+0x1fffc804>
 8005f76:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005f78:	678d                	lui	a5,0x3
 8005f7a:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f7c:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f80:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f82:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f86:	4585                	li	a1,1
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8005f88:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f8a:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8005f8e:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_radio_buffer;
 8005f92:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 8005f94:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8005f96:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8005f98:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f9a:	ffffb097          	auipc	ra,0xffffb
 8005f9e:	ef8080e7          	jalr	-264(ra) # 8000e92 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH1);
 8005fa2:	4585                	li	a1,1
 8005fa4:	40020537          	lui	a0,0x40020
 8005fa8:	ffffb097          	auipc	ra,0xffffb
 8005fac:	f9c080e7          	jalr	-100(ra) # 8000f44 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH1);
 8005fb0:	40020537          	lui	a0,0x40020
 8005fb4:	4585                	li	a1,1
 8005fb6:	ffffb097          	auipc	ra,0xffffb
 8005fba:	fb4080e7          	jalr	-76(ra) # 8000f6a <dma_channel_enable>
}
 8005fbe:	50b2                	lw	ra,44(sp)
 8005fc0:	5422                	lw	s0,40(sp)
 8005fc2:	5492                	lw	s1,36(sp)
 8005fc4:	6145                	addi	sp,sp,48
 8005fc6:	8082                	ret
        tx_radio_buffer[i] = message[i];
 8005fc8:	00f506b3          	add	a3,a0,a5
 8005fcc:	0006c603          	lbu	a2,0(a3)
 8005fd0:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < 1024; i++) {
 8005fd4:	0785                	addi	a5,a5,1
        tx_radio_buffer[i] = message[i];
 8005fd6:	00c68023          	sb	a2,0(a3)
 8005fda:	bfbd                	j	8005f58 <send_radio+0x18>

08005fdc <enter_command_mode>:
        output[len - i - 1] = input[i + 1];
    }
    output[len] = '\0';
}

void enter_command_mode(void){
 8005fdc:	1101                	addi	sp,sp,-32
    usb_delay_1ms(1000);
 8005fde:	3e800513          	li	a0,1000
void enter_command_mode(void){
 8005fe2:	ce06                	sw	ra,28(sp)
    usb_delay_1ms(1000);
 8005fe4:	fffff097          	auipc	ra,0xfffff
 8005fe8:	90c080e7          	jalr	-1780(ra) # 80048f0 <usb_delay_1ms>
    char command_mode[] = "$$$";
 8005fec:	002427b7          	lui	a5,0x242
 8005ff0:	42478793          	addi	a5,a5,1060 # 242424 <__stack_size+0x241424>
    lio_send_bt(command_mode, 3);
 8005ff4:	458d                	li	a1,3
 8005ff6:	0068                	addi	a0,sp,12
    char command_mode[] = "$$$";
 8005ff8:	c63e                	sw	a5,12(sp)
    lio_send_bt(command_mode, 3);
 8005ffa:	00000097          	auipc	ra,0x0
 8005ffe:	254080e7          	jalr	596(ra) # 800624e <lio_send_bt>
    usb_delay_1ms(1000);
 8006002:	3e800513          	li	a0,1000
 8006006:	fffff097          	auipc	ra,0xfffff
 800600a:	8ea080e7          	jalr	-1814(ra) # 80048f0 <usb_delay_1ms>
    command_mode[0] = '\r';
 800600e:	47b5                	li	a5,13
    lio_send_bt(command_mode, 1);
 8006010:	0068                	addi	a0,sp,12
 8006012:	4585                	li	a1,1
    command_mode[0] = '\r';
 8006014:	00f10623          	sb	a5,12(sp)
    lio_send_bt(command_mode, 1);
 8006018:	00000097          	auipc	ra,0x0
 800601c:	236080e7          	jalr	566(ra) # 800624e <lio_send_bt>
}
 8006020:	40f2                	lw	ra,28(sp)
 8006022:	6105                	addi	sp,sp,32
 8006024:	8082                	ret

08006026 <lio_init_bt>:

void lio_init_bt(){
 8006026:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 8006028:	50000513          	li	a0,1280
void lio_init_bt(){
 800602c:	d606                	sw	ra,44(sp)
 800602e:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8006030:	ffffb097          	auipc	ra,0xffffb
 8006034:	060080e7          	jalr	96(ra) # 8001090 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOA);
 8006038:	60200513          	li	a0,1538
 800603c:	ffffb097          	auipc	ra,0xffffb
 8006040:	054080e7          	jalr	84(ra) # 8001090 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART0);
 8006044:	60e00513          	li	a0,1550
 8006048:	ffffb097          	auipc	ra,0xffffb
 800604c:	048080e7          	jalr	72(ra) # 8001090 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);
 8006050:	40011437          	lui	s0,0x40011
 8006054:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 8006058:	20000693          	li	a3,512
 800605c:	460d                	li	a2,3
 800605e:	45e1                	li	a1,24
 8006060:	ffffb097          	auipc	ra,0xffffb
 8006064:	f7a080e7          	jalr	-134(ra) # 8000fda <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);
 8006068:	40000693          	li	a3,1024
 800606c:	460d                	li	a2,3
 800606e:	4591                	li	a1,4
 8006070:	80040513          	addi	a0,s0,-2048
 8006074:	ffffb097          	auipc	ra,0xffffb
 8006078:	f66080e7          	jalr	-154(ra) # 8000fda <gpio_init>

    /* USART configure */
    usart_deinit(USART0);
 800607c:	40014437          	lui	s0,0x40014
 8006080:	80040513          	addi	a0,s0,-2048 # 40013800 <_sp+0x2000b800>
 8006084:	ffffb097          	auipc	ra,0xffffb
 8006088:	720080e7          	jalr	1824(ra) # 80017a4 <usart_deinit>
    usart_baudrate_set(USART0, 115200U);
 800608c:	65f1                	lui	a1,0x1c
 800608e:	80040513          	addi	a0,s0,-2048
 8006092:	20058593          	addi	a1,a1,512 # 1c200 <__stack_size+0x1b200>
 8006096:	ffffb097          	auipc	ra,0xffffb
 800609a:	7b0080e7          	jalr	1968(ra) # 8001846 <usart_baudrate_set>
    usart_word_length_set(USART0, USART_WL_8BIT);
 800609e:	80040513          	addi	a0,s0,-2048
 80060a2:	4581                	li	a1,0
 80060a4:	ffffc097          	auipc	ra,0xffffc
 80060a8:	81e080e7          	jalr	-2018(ra) # 80018c2 <usart_word_length_set>
    usart_stop_bit_set(USART0, USART_STB_1BIT);
 80060ac:	80040513          	addi	a0,s0,-2048
 80060b0:	4581                	li	a1,0
 80060b2:	ffffc097          	auipc	ra,0xffffc
 80060b6:	822080e7          	jalr	-2014(ra) # 80018d4 <usart_stop_bit_set>
    usart_parity_config(USART0, USART_PM_NONE);
 80060ba:	80040513          	addi	a0,s0,-2048
 80060be:	4581                	li	a1,0
 80060c0:	ffffb097          	auipc	ra,0xffffb
 80060c4:	7f2080e7          	jalr	2034(ra) # 80018b2 <usart_parity_config>
    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);
 80060c8:	80040513          	addi	a0,s0,-2048
 80060cc:	4581                	li	a1,0
 80060ce:	ffffc097          	auipc	ra,0xffffc
 80060d2:	836080e7          	jalr	-1994(ra) # 8001904 <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);
 80060d6:	80040513          	addi	a0,s0,-2048
 80060da:	4581                	li	a1,0
 80060dc:	ffffc097          	auipc	ra,0xffffc
 80060e0:	834080e7          	jalr	-1996(ra) # 8001910 <usart_hardware_flow_cts_config>
    usart_receive_config(USART0, USART_RECEIVE_ENABLE);
 80060e4:	80040513          	addi	a0,s0,-2048
 80060e8:	4591                	li	a1,4
 80060ea:	ffffc097          	auipc	ra,0xffffc
 80060ee:	810080e7          	jalr	-2032(ra) # 80018fa <usart_receive_config>
    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);
 80060f2:	45a1                	li	a1,8
 80060f4:	80040513          	addi	a0,s0,-2048
 80060f8:	ffffb097          	auipc	ra,0xffffb
 80060fc:	7f8080e7          	jalr	2040(ra) # 80018f0 <usart_transmit_config>
    usart_enable(USART0);
 8006100:	80040513          	addi	a0,s0,-2048
 8006104:	ffffb097          	auipc	ra,0xffffb
 8006108:	7e2080e7          	jalr	2018(ra) # 80018e6 <usart_enable>

    usart_dma_transmit_config(USART0, USART_DENT_ENABLE);
 800610c:	80040513          	addi	a0,s0,-2048
 8006110:	08000593          	li	a1,128
 8006114:	ffffc097          	auipc	ra,0xffffc
 8006118:	814080e7          	jalr	-2028(ra) # 8001928 <usart_dma_transmit_config>
    usart_dma_receive_config(USART0, USART_DENR_ENABLE);
 800611c:	80040513          	addi	a0,s0,-2048
 8006120:	04000593          	li	a1,64
 8006124:	ffffb097          	auipc	ra,0xffffb
 8006128:	7f8080e7          	jalr	2040(ra) # 800191c <usart_dma_receive_config>

   

    dma_deinit(DMA0, DMA_CH4);
 800612c:	4591                	li	a1,4
 800612e:	40020537          	lui	a0,0x40020
 8006132:	ffffb097          	auipc	ra,0xffffb
 8006136:	d1c080e7          	jalr	-740(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 800613a:	200017b7          	lui	a5,0x20001
 800613e:	d5478793          	addi	a5,a5,-684 # 20000d54 <rx_dma_buffer>
 8006142:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 8006144:	40000793          	li	a5,1024
 8006148:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 800614a:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800614c:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 800614e:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006150:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006154:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006158:	4591                	li	a1,4
 800615a:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800615e:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006162:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8006164:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8006166:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8006168:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800616c:	ffffb097          	auipc	ra,0xffffb
 8006170:	d26080e7          	jalr	-730(ra) # 8000e92 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH4);
 8006174:	4591                	li	a1,4
 8006176:	40020537          	lui	a0,0x40020
 800617a:	ffffb097          	auipc	ra,0xffffb
 800617e:	dca080e7          	jalr	-566(ra) # 8000f44 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH4);
 8006182:	4591                	li	a1,4
 8006184:	40020537          	lui	a0,0x40020
 8006188:	ffffb097          	auipc	ra,0xffffb
 800618c:	de2080e7          	jalr	-542(ra) # 8000f6a <dma_channel_enable>
}
 8006190:	50b2                	lw	ra,44(sp)
 8006192:	5422                	lw	s0,40(sp)
 8006194:	6145                	addi	sp,sp,48
 8006196:	8082                	ret

08006198 <lio_read_bt>:

size_t lio_read_bt(char* buffer, uint32_t size){
    if(rx_dma_buffer[0] != 0)
 8006198:	20001737          	lui	a4,0x20001
 800619c:	d5474783          	lbu	a5,-684(a4) # 20000d54 <rx_dma_buffer>
size_t lio_read_bt(char* buffer, uint32_t size){
 80061a0:	7179                	addi	sp,sp,-48
 80061a2:	d422                	sw	s0,40(sp)
 80061a4:	d606                	sw	ra,44(sp)
 80061a6:	d226                	sw	s1,36(sp)
        dma_circulation_disable(DMA0, DMA_CH4);
        /* enable DMA channel4 */
        dma_channel_enable(DMA0, DMA_CH4);
        return i;
    }
    return 0;
 80061a8:	4401                	li	s0,0
    if(rx_dma_buffer[0] != 0)
 80061aa:	cfc1                	beqz	a5,8006242 <lio_read_bt+0xaa>
 80061ac:	d5470493          	addi	s1,a4,-684
        int i = 0;
 80061b0:	4781                	li	a5,0
    if(rx_dma_buffer[0] != 0)
 80061b2:	d5470713          	addi	a4,a4,-684
        for(; i < LIO_BT_BUFFER_SIZE && rx_dma_buffer[i] != 0 && i < size - 1; i++){
 80061b6:	15fd                	addi	a1,a1,-1
 80061b8:	40000613          	li	a2,1024
 80061bc:	00074683          	lbu	a3,0(a4)
 80061c0:	ce89                	beqz	a3,80061da <lio_read_bt+0x42>
 80061c2:	00b7fc63          	bgeu	a5,a1,80061da <lio_read_bt+0x42>
            buffer[i] = rx_dma_buffer[i];
 80061c6:	00f50833          	add	a6,a0,a5
 80061ca:	00d80023          	sb	a3,0(a6)
            rx_dma_buffer[i] = 0;
 80061ce:	00070023          	sb	zero,0(a4)
        for(; i < LIO_BT_BUFFER_SIZE && rx_dma_buffer[i] != 0 && i < size - 1; i++){
 80061d2:	0785                	addi	a5,a5,1
 80061d4:	0705                	addi	a4,a4,1
 80061d6:	fec793e3          	bne	a5,a2,80061bc <lio_read_bt+0x24>
        buffer[i] = '\0';
 80061da:	953e                	add	a0,a0,a5
 80061dc:	00050023          	sb	zero,0(a0) # 40020000 <_sp+0x20018000>
        dma_deinit(DMA0, DMA_CH4);
 80061e0:	4591                	li	a1,4
 80061e2:	40020537          	lui	a0,0x40020
        buffer[i] = '\0';
 80061e6:	843e                	mv	s0,a5
        dma_deinit(DMA0, DMA_CH4);
 80061e8:	ffffb097          	auipc	ra,0xffffb
 80061ec:	c66080e7          	jalr	-922(ra) # 8000e4e <dma_deinit>
        dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 80061f0:	400147b7          	lui	a5,0x40014
 80061f4:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 80061f8:	c23e                	sw	a5,4(sp)
        dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 80061fa:	40000793          	li	a5,1024
 80061fe:	ca3e                	sw	a5,20(sp)
        dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006200:	678d                	lui	a5,0x3
 8006202:	cc3e                	sw	a5,24(sp)
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006204:	0050                	addi	a2,sp,4
        dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006206:	10000793          	li	a5,256
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800620a:	4591                	li	a1,4
 800620c:	40020537          	lui	a0,0x40020
        dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006210:	00f11e23          	sh	a5,28(sp)
        dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 8006214:	c626                	sw	s1,12(sp)
        dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8006216:	c402                	sw	zero,8(sp)
        dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8006218:	c802                	sw	zero,16(sp)
        dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 800621a:	00010f23          	sb	zero,30(sp)
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800621e:	ffffb097          	auipc	ra,0xffffb
 8006222:	c74080e7          	jalr	-908(ra) # 8000e92 <dma_init>
        dma_circulation_disable(DMA0, DMA_CH4);
 8006226:	4591                	li	a1,4
 8006228:	40020537          	lui	a0,0x40020
 800622c:	ffffb097          	auipc	ra,0xffffb
 8006230:	d18080e7          	jalr	-744(ra) # 8000f44 <dma_circulation_disable>
        dma_channel_enable(DMA0, DMA_CH4);
 8006234:	4591                	li	a1,4
 8006236:	40020537          	lui	a0,0x40020
 800623a:	ffffb097          	auipc	ra,0xffffb
 800623e:	d30080e7          	jalr	-720(ra) # 8000f6a <dma_channel_enable>
}
 8006242:	8522                	mv	a0,s0
 8006244:	50b2                	lw	ra,44(sp)
 8006246:	5422                	lw	s0,40(sp)
 8006248:	5492                	lw	s1,36(sp)
 800624a:	6145                	addi	sp,sp,48
 800624c:	8082                	ret

0800624e <lio_send_bt>:

size_t lio_send_bt(char* message, uint32_t size){
 800624e:	7179                	addi	sp,sp,-48
 8006250:	d422                	sw	s0,40(sp)
 8006252:	20001437          	lui	s0,0x20001
 8006256:	d226                	sw	s1,36(sp)
 8006258:	d606                	sw	ra,44(sp)
 800625a:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 800625c:	4781                	li	a5,0
 800625e:	15440413          	addi	s0,s0,340 # 20001154 <tx_dma_buffer>
 8006262:	40000713          	li	a4,1024
 8006266:	00978463          	beq	a5,s1,800626e <lio_send_bt+0x20>
 800626a:	06e79663          	bne	a5,a4,80062d6 <lio_send_bt+0x88>
        tx_dma_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH3);
 800626e:	458d                	li	a1,3
 8006270:	40020537          	lui	a0,0x40020
 8006274:	ffffb097          	auipc	ra,0xffffb
 8006278:	bda080e7          	jalr	-1062(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 800627c:	400147b7          	lui	a5,0x40014
 8006280:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 8006284:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006286:	678d                	lui	a5,0x3
 8006288:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800628a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 800628e:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006290:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 8006294:	458d                	li	a1,3
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8006296:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 8006298:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 800629c:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
 80062a0:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 80062a2:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 80062a4:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 80062a6:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80062a8:	ffffb097          	auipc	ra,0xffffb
 80062ac:	bea080e7          	jalr	-1046(ra) # 8000e92 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH3);
 80062b0:	458d                	li	a1,3
 80062b2:	40020537          	lui	a0,0x40020
 80062b6:	ffffb097          	auipc	ra,0xffffb
 80062ba:	c8e080e7          	jalr	-882(ra) # 8000f44 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH3);
 80062be:	40020537          	lui	a0,0x40020
 80062c2:	458d                	li	a1,3
 80062c4:	ffffb097          	auipc	ra,0xffffb
 80062c8:	ca6080e7          	jalr	-858(ra) # 8000f6a <dma_channel_enable>
}
 80062cc:	50b2                	lw	ra,44(sp)
 80062ce:	5422                	lw	s0,40(sp)
 80062d0:	5492                	lw	s1,36(sp)
 80062d2:	6145                	addi	sp,sp,48
 80062d4:	8082                	ret
        tx_dma_buffer[i] = message[i];
 80062d6:	00f506b3          	add	a3,a0,a5
 80062da:	0006c603          	lbu	a2,0(a3)
 80062de:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 80062e2:	0785                	addi	a5,a5,1
        tx_dma_buffer[i] = message[i];
 80062e4:	00c68023          	sb	a2,0(a3)
 80062e8:	bfbd                	j	8006266 <lio_send_bt+0x18>

080062ea <get_state>:

static int current_state = RUNNING;

int get_state(){
    return current_state;
};
 80062ea:	200007b7          	lui	a5,0x20000
 80062ee:	5447a503          	lw	a0,1348(a5) # 20000544 <current_state>
 80062f2:	8082                	ret

080062f4 <set_state>:

void set_state(int state){
    current_state = state;
 80062f4:	200007b7          	lui	a5,0x20000
 80062f8:	54a7a223          	sw	a0,1348(a5) # 20000544 <current_state>
 80062fc:	8082                	ret
	...

08006300 <trap_entry>:
trap_entry:
  // Allocate the stack space
 // addi sp, sp, -19*REGBYTES

  // Save the caller saving registers (context)
  SAVE_CONTEXT
 8006300:	715d                	addi	sp,sp,-80
 8006302:	c006                	sw	ra,0(sp)
 8006304:	c212                	sw	tp,4(sp)
 8006306:	c416                	sw	t0,8(sp)
 8006308:	c61a                	sw	t1,12(sp)
 800630a:	c81e                	sw	t2,16(sp)
 800630c:	ca2a                	sw	a0,20(sp)
 800630e:	cc2e                	sw	a1,24(sp)
 8006310:	ce32                	sw	a2,28(sp)
 8006312:	d036                	sw	a3,32(sp)
 8006314:	d23a                	sw	a4,36(sp)
 8006316:	d43e                	sw	a5,40(sp)
 8006318:	d642                	sw	a6,44(sp)
 800631a:	d846                	sw	a7,48(sp)
 800631c:	da72                	sw	t3,52(sp)
 800631e:	dc76                	sw	t4,56(sp)
 8006320:	de7a                	sw	t5,60(sp)
 8006322:	c0fe                	sw	t6,64(sp)
  // Save the MEPC/Mstatus/Msubm reg
  SAVE_EPC_STATUS
 8006324:	341022f3          	csrr	t0,mepc
 8006328:	c096                	sw	t0,64(sp)
 800632a:	300022f3          	csrr	t0,mstatus
 800632e:	c296                	sw	t0,68(sp)
 8006330:	7c4022f3          	csrr	t0,0x7c4
 8006334:	c496                	sw	t0,72(sp)

     // Set the function argument
  csrr a0, mcause
 8006336:	34202573          	csrr	a0,mcause
  mv a1, sp
 800633a:	858a                	mv	a1,sp
     // Call the function
  call handle_trap
 800633c:	ffffc097          	auipc	ra,0xffffc
 8006340:	a04080e7          	jalr	-1532(ra) # 8001d40 <handle_trap>

  // Restore the MEPC/Mstatus/Msubm reg
  RESTORE_EPC_STATUS
 8006344:	4286                	lw	t0,64(sp)
 8006346:	34129073          	csrw	mepc,t0
 800634a:	4296                	lw	t0,68(sp)
 800634c:	30029073          	csrw	mstatus,t0
 8006350:	42a6                	lw	t0,72(sp)
 8006352:	7c429073          	csrw	0x7c4,t0
  // Restore the caller saving registers (context)
  RESTORE_CONTEXT
 8006356:	4082                	lw	ra,0(sp)
 8006358:	4212                	lw	tp,4(sp)
 800635a:	42a2                	lw	t0,8(sp)
 800635c:	4332                	lw	t1,12(sp)
 800635e:	43c2                	lw	t2,16(sp)
 8006360:	4552                	lw	a0,20(sp)
 8006362:	45e2                	lw	a1,24(sp)
 8006364:	4672                	lw	a2,28(sp)
 8006366:	5682                	lw	a3,32(sp)
 8006368:	5712                	lw	a4,36(sp)
 800636a:	57a2                	lw	a5,40(sp)
 800636c:	5832                	lw	a6,44(sp)
 800636e:	58c2                	lw	a7,48(sp)
 8006370:	5e52                	lw	t3,52(sp)
 8006372:	5ee2                	lw	t4,56(sp)
 8006374:	5f72                	lw	t5,60(sp)
 8006376:	4f86                	lw	t6,64(sp)
 8006378:	6161                	addi	sp,sp,80

  // De-allocate the stack space
 // addi sp, sp, 19*REGBYTES
  // Return to regular code
  mret
 800637a:	30200073          	mret
 800637e:	0000                	unimp
 8006380:	0000                	unimp
	...

08006384 <irq_entry>:
  csrrw 
  sp, mscratch, 
  sp

  #endif
  SAVE_CONTEXT// Save 16 regs
 8006384:	715d                	addi	sp,sp,-80
 8006386:	c006                	sw	ra,0(sp)
 8006388:	c212                	sw	tp,4(sp)
 800638a:	c416                	sw	t0,8(sp)
 800638c:	c61a                	sw	t1,12(sp)
 800638e:	c81e                	sw	t2,16(sp)
 8006390:	ca2a                	sw	a0,20(sp)
 8006392:	cc2e                	sw	a1,24(sp)
 8006394:	ce32                	sw	a2,28(sp)
 8006396:	d036                	sw	a3,32(sp)
 8006398:	d23a                	sw	a4,36(sp)
 800639a:	d43e                	sw	a5,40(sp)
 800639c:	d642                	sw	a6,44(sp)
 800639e:	d846                	sw	a7,48(sp)
 80063a0:	da72                	sw	t3,52(sp)
 80063a2:	dc76                	sw	t4,56(sp)
 80063a4:	de7a                	sw	t5,60(sp)
 80063a6:	c0fe                	sw	t6,64(sp)

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 80063a8:	7ee8d073          	csrwi	0x7ee,17
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 80063ac:	7ef95073          	csrwi	0x7ef,18
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 80063b0:	7eb9d073          	csrwi	0x7eb,19

080063b4 <service_loop>:
 
service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register 
  csrrw ra, CSR_JALMNXTI, ra 
 80063b4:	7ed090f3          	csrrw	ra,0x7ed,ra
  
  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts 
 80063b8:	30047073          	csrci	mstatus,8

  LOAD x5,  19*REGBYTES(sp)
 80063bc:	42b6                	lw	t0,76(sp)
  csrw CSR_MSUBM, x5  
 80063be:	7c429073          	csrw	0x7c4,t0
  LOAD x5,  18*REGBYTES(sp)
 80063c2:	42a6                	lw	t0,72(sp)
  csrw CSR_MEPC, x5  
 80063c4:	34129073          	csrw	mepc,t0
  LOAD x5,  17*REGBYTES(sp)
 80063c8:	4296                	lw	t0,68(sp)
  csrw CSR_MCAUSE, x5  
 80063ca:	34229073          	csrw	mcause,t0


  RESTORE_CONTEXT
 80063ce:	4082                	lw	ra,0(sp)
 80063d0:	4212                	lw	tp,4(sp)
 80063d2:	42a2                	lw	t0,8(sp)
 80063d4:	4332                	lw	t1,12(sp)
 80063d6:	43c2                	lw	t2,16(sp)
 80063d8:	4552                	lw	a0,20(sp)
 80063da:	45e2                	lw	a1,24(sp)
 80063dc:	4672                	lw	a2,28(sp)
 80063de:	5682                	lw	a3,32(sp)
 80063e0:	5712                	lw	a4,36(sp)
 80063e2:	57a2                	lw	a5,40(sp)
 80063e4:	5832                	lw	a6,44(sp)
 80063e6:	58c2                	lw	a7,48(sp)
 80063e8:	5e52                	lw	t3,52(sp)
 80063ea:	5ee2                	lw	t4,56(sp)
 80063ec:	5f72                	lw	t5,60(sp)
 80063ee:	4f86                	lw	t6,64(sp)
 80063f0:	6161                	addi	sp,sp,80
  sp
  
  #endif
  
  // Return to regular code
  mret
 80063f2:	30200073          	mret

080063f6 <__divdf3>:
 80063f6:	7179                	addi	sp,sp,-48
 80063f8:	0145d813          	srli	a6,a1,0x14
 80063fc:	d226                	sw	s1,36(sp)
 80063fe:	ce4e                	sw	s3,28(sp)
 8006400:	cc52                	sw	s4,24(sp)
 8006402:	c85a                	sw	s6,16(sp)
 8006404:	c65e                	sw	s7,12(sp)
 8006406:	00c59493          	slli	s1,a1,0xc
 800640a:	d606                	sw	ra,44(sp)
 800640c:	d422                	sw	s0,40(sp)
 800640e:	d04a                	sw	s2,32(sp)
 8006410:	ca56                	sw	s5,20(sp)
 8006412:	7ff87813          	andi	a6,a6,2047
 8006416:	8b2a                	mv	s6,a0
 8006418:	8bb2                	mv	s7,a2
 800641a:	8a36                	mv	s4,a3
 800641c:	80b1                	srli	s1,s1,0xc
 800641e:	01f5d993          	srli	s3,a1,0x1f
 8006422:	08080463          	beqz	a6,80064aa <__divdf3+0xb4>
 8006426:	7ff00793          	li	a5,2047
 800642a:	0cf80e63          	beq	a6,a5,8006506 <__divdf3+0x110>
 800642e:	01d55a93          	srli	s5,a0,0x1d
 8006432:	048e                	slli	s1,s1,0x3
 8006434:	009ae4b3          	or	s1,s5,s1
 8006438:	00800ab7          	lui	s5,0x800
 800643c:	0154eab3          	or	s5,s1,s5
 8006440:	00351413          	slli	s0,a0,0x3
 8006444:	c0180913          	addi	s2,a6,-1023
 8006448:	4b01                	li	s6,0
 800644a:	014a5513          	srli	a0,s4,0x14
 800644e:	00ca1493          	slli	s1,s4,0xc
 8006452:	7ff57813          	andi	a6,a0,2047
 8006456:	80b1                	srli	s1,s1,0xc
 8006458:	01fa5a13          	srli	s4,s4,0x1f
 800645c:	0c080863          	beqz	a6,800652c <__divdf3+0x136>
 8006460:	7ff00793          	li	a5,2047
 8006464:	12f80163          	beq	a6,a5,8006586 <__divdf3+0x190>
 8006468:	00349513          	slli	a0,s1,0x3
 800646c:	01dbd793          	srli	a5,s7,0x1d
 8006470:	8d5d                	or	a0,a0,a5
 8006472:	008004b7          	lui	s1,0x800
 8006476:	8cc9                	or	s1,s1,a0
 8006478:	003b9f13          	slli	t5,s7,0x3
 800647c:	c0180513          	addi	a0,a6,-1023
 8006480:	4781                	li	a5,0
 8006482:	002b1713          	slli	a4,s6,0x2
 8006486:	8f5d                	or	a4,a4,a5
 8006488:	177d                	addi	a4,a4,-1
 800648a:	46b9                	li	a3,14
 800648c:	0149c633          	xor	a2,s3,s4
 8006490:	40a90833          	sub	a6,s2,a0
 8006494:	10e6eb63          	bltu	a3,a4,80065aa <__divdf3+0x1b4>
 8006498:	ffffa697          	auipc	a3,0xffffa
 800649c:	00868693          	addi	a3,a3,8 # 80004a0 <_std_dev_req+0x110>
 80064a0:	070a                	slli	a4,a4,0x2
 80064a2:	9736                	add	a4,a4,a3
 80064a4:	4318                	lw	a4,0(a4)
 80064a6:	9736                	add	a4,a4,a3
 80064a8:	8702                	jr	a4
 80064aa:	00a4eab3          	or	s5,s1,a0
 80064ae:	060a8663          	beqz	s5,800651a <__divdf3+0x124>
 80064b2:	cc8d                	beqz	s1,80064ec <__divdf3+0xf6>
 80064b4:	8526                	mv	a0,s1
 80064b6:	00001097          	auipc	ra,0x1
 80064ba:	bea080e7          	jalr	-1046(ra) # 80070a0 <__clzsi2>
 80064be:	ff550793          	addi	a5,a0,-11 # 4001fff5 <_sp+0x20017ff5>
 80064c2:	4771                	li	a4,28
 80064c4:	02f74b63          	blt	a4,a5,80064fa <__divdf3+0x104>
 80064c8:	4af5                	li	s5,29
 80064ca:	ff850413          	addi	s0,a0,-8
 80064ce:	40fa8ab3          	sub	s5,s5,a5
 80064d2:	008494b3          	sll	s1,s1,s0
 80064d6:	015b5ab3          	srl	s5,s6,s5
 80064da:	009aeab3          	or	s5,s5,s1
 80064de:	008b1433          	sll	s0,s6,s0
 80064e2:	c0d00813          	li	a6,-1011
 80064e6:	40a80933          	sub	s2,a6,a0
 80064ea:	bfb9                	j	8006448 <__divdf3+0x52>
 80064ec:	00001097          	auipc	ra,0x1
 80064f0:	bb4080e7          	jalr	-1100(ra) # 80070a0 <__clzsi2>
 80064f4:	02050513          	addi	a0,a0,32
 80064f8:	b7d9                	j	80064be <__divdf3+0xc8>
 80064fa:	fd850493          	addi	s1,a0,-40
 80064fe:	009b1ab3          	sll	s5,s6,s1
 8006502:	4401                	li	s0,0
 8006504:	bff9                	j	80064e2 <__divdf3+0xec>
 8006506:	00a4eab3          	or	s5,s1,a0
 800650a:	000a8c63          	beqz	s5,8006522 <__divdf3+0x12c>
 800650e:	842a                	mv	s0,a0
 8006510:	8aa6                	mv	s5,s1
 8006512:	7ff00913          	li	s2,2047
 8006516:	4b0d                	li	s6,3
 8006518:	bf0d                	j	800644a <__divdf3+0x54>
 800651a:	4401                	li	s0,0
 800651c:	4901                	li	s2,0
 800651e:	4b05                	li	s6,1
 8006520:	b72d                	j	800644a <__divdf3+0x54>
 8006522:	4401                	li	s0,0
 8006524:	7ff00913          	li	s2,2047
 8006528:	4b09                	li	s6,2
 800652a:	b705                	j	800644a <__divdf3+0x54>
 800652c:	0174ef33          	or	t5,s1,s7
 8006530:	060f0463          	beqz	t5,8006598 <__divdf3+0x1a2>
 8006534:	c89d                	beqz	s1,800656a <__divdf3+0x174>
 8006536:	8526                	mv	a0,s1
 8006538:	00001097          	auipc	ra,0x1
 800653c:	b68080e7          	jalr	-1176(ra) # 80070a0 <__clzsi2>
 8006540:	ff550793          	addi	a5,a0,-11
 8006544:	4771                	li	a4,28
 8006546:	02f74a63          	blt	a4,a5,800657a <__divdf3+0x184>
 800654a:	4775                	li	a4,29
 800654c:	ff850f13          	addi	t5,a0,-8
 8006550:	8f1d                	sub	a4,a4,a5
 8006552:	01e494b3          	sll	s1,s1,t5
 8006556:	00ebd733          	srl	a4,s7,a4
 800655a:	8cd9                	or	s1,s1,a4
 800655c:	01eb9f33          	sll	t5,s7,t5
 8006560:	c0d00613          	li	a2,-1011
 8006564:	40a60533          	sub	a0,a2,a0
 8006568:	bf21                	j	8006480 <__divdf3+0x8a>
 800656a:	855e                	mv	a0,s7
 800656c:	00001097          	auipc	ra,0x1
 8006570:	b34080e7          	jalr	-1228(ra) # 80070a0 <__clzsi2>
 8006574:	02050513          	addi	a0,a0,32
 8006578:	b7e1                	j	8006540 <__divdf3+0x14a>
 800657a:	fd850493          	addi	s1,a0,-40
 800657e:	009b94b3          	sll	s1,s7,s1
 8006582:	4f01                	li	t5,0
 8006584:	bff1                	j	8006560 <__divdf3+0x16a>
 8006586:	0174ef33          	or	t5,s1,s7
 800658a:	000f0b63          	beqz	t5,80065a0 <__divdf3+0x1aa>
 800658e:	8f5e                	mv	t5,s7
 8006590:	7ff00513          	li	a0,2047
 8006594:	478d                	li	a5,3
 8006596:	b5f5                	j	8006482 <__divdf3+0x8c>
 8006598:	4481                	li	s1,0
 800659a:	4501                	li	a0,0
 800659c:	4785                	li	a5,1
 800659e:	b5d5                	j	8006482 <__divdf3+0x8c>
 80065a0:	4481                	li	s1,0
 80065a2:	7ff00513          	li	a0,2047
 80065a6:	4789                	li	a5,2
 80065a8:	bde9                	j	8006482 <__divdf3+0x8c>
 80065aa:	0154e663          	bltu	s1,s5,80065b6 <__divdf3+0x1c0>
 80065ae:	2a9a9363          	bne	s5,s1,8006854 <__divdf3+0x45e>
 80065b2:	2be46163          	bltu	s0,t5,8006854 <__divdf3+0x45e>
 80065b6:	01fa9693          	slli	a3,s5,0x1f
 80065ba:	00145713          	srli	a4,s0,0x1
 80065be:	01f41793          	slli	a5,s0,0x1f
 80065c2:	001ada93          	srli	s5,s5,0x1
 80065c6:	00e6e433          	or	s0,a3,a4
 80065ca:	00849513          	slli	a0,s1,0x8
 80065ce:	018f5493          	srli	s1,t5,0x18
 80065d2:	8d45                	or	a0,a0,s1
 80065d4:	01055e13          	srli	t3,a0,0x10
 80065d8:	03cad8b3          	divu	a7,s5,t3
 80065dc:	01051313          	slli	t1,a0,0x10
 80065e0:	01035313          	srli	t1,t1,0x10
 80065e4:	01045713          	srli	a4,s0,0x10
 80065e8:	008f1593          	slli	a1,t5,0x8
 80065ec:	03caf4b3          	remu	s1,s5,t3
 80065f0:	8fc6                	mv	t6,a7
 80065f2:	031306b3          	mul	a3,t1,a7
 80065f6:	01049a93          	slli	s5,s1,0x10
 80065fa:	01576733          	or	a4,a4,s5
 80065fe:	00d77c63          	bgeu	a4,a3,8006616 <__divdf3+0x220>
 8006602:	972a                	add	a4,a4,a0
 8006604:	fff88f93          	addi	t6,a7,-1
 8006608:	00a76763          	bltu	a4,a0,8006616 <__divdf3+0x220>
 800660c:	00d77563          	bgeu	a4,a3,8006616 <__divdf3+0x220>
 8006610:	ffe88f93          	addi	t6,a7,-2
 8006614:	972a                	add	a4,a4,a0
 8006616:	8f15                	sub	a4,a4,a3
 8006618:	03c75eb3          	divu	t4,a4,t3
 800661c:	0442                	slli	s0,s0,0x10
 800661e:	8041                	srli	s0,s0,0x10
 8006620:	03c77733          	remu	a4,a4,t3
 8006624:	86f6                	mv	a3,t4
 8006626:	03d308b3          	mul	a7,t1,t4
 800662a:	0742                	slli	a4,a4,0x10
 800662c:	8f41                	or	a4,a4,s0
 800662e:	01177c63          	bgeu	a4,a7,8006646 <__divdf3+0x250>
 8006632:	972a                	add	a4,a4,a0
 8006634:	fffe8693          	addi	a3,t4,-1
 8006638:	00a76763          	bltu	a4,a0,8006646 <__divdf3+0x250>
 800663c:	01177563          	bgeu	a4,a7,8006646 <__divdf3+0x250>
 8006640:	ffee8693          	addi	a3,t4,-2
 8006644:	972a                	add	a4,a4,a0
 8006646:	0fc2                	slli	t6,t6,0x10
 8006648:	00dfefb3          	or	t6,t6,a3
 800664c:	66c1                	lui	a3,0x10
 800664e:	41170433          	sub	s0,a4,a7
 8006652:	fff68893          	addi	a7,a3,-1 # ffff <__stack_size+0xefff>
 8006656:	010fdf13          	srli	t5,t6,0x10
 800665a:	011ff733          	and	a4,t6,a7
 800665e:	0105de93          	srli	t4,a1,0x10
 8006662:	0115f8b3          	and	a7,a1,a7
 8006666:	031703b3          	mul	t2,a4,a7
 800666a:	031f04b3          	mul	s1,t5,a7
 800666e:	02ee8733          	mul	a4,t4,a4
 8006672:	03df02b3          	mul	t0,t5,t4
 8006676:	00970f33          	add	t5,a4,s1
 800667a:	0103d713          	srli	a4,t2,0x10
 800667e:	977a                	add	a4,a4,t5
 8006680:	00977363          	bgeu	a4,s1,8006686 <__divdf3+0x290>
 8006684:	92b6                	add	t0,t0,a3
 8006686:	01075f13          	srli	t5,a4,0x10
 800668a:	9f16                	add	t5,t5,t0
 800668c:	62c1                	lui	t0,0x10
 800668e:	12fd                	addi	t0,t0,-1
 8006690:	005776b3          	and	a3,a4,t0
 8006694:	06c2                	slli	a3,a3,0x10
 8006696:	0053f3b3          	and	t2,t2,t0
 800669a:	969e                	add	a3,a3,t2
 800669c:	01e46763          	bltu	s0,t5,80066aa <__divdf3+0x2b4>
 80066a0:	84fe                	mv	s1,t6
 80066a2:	03e41e63          	bne	s0,t5,80066de <__divdf3+0x2e8>
 80066a6:	02d7fc63          	bgeu	a5,a3,80066de <__divdf3+0x2e8>
 80066aa:	97ae                	add	a5,a5,a1
 80066ac:	00b7b733          	sltu	a4,a5,a1
 80066b0:	972a                	add	a4,a4,a0
 80066b2:	943a                	add	s0,s0,a4
 80066b4:	ffff8493          	addi	s1,t6,-1
 80066b8:	00856663          	bltu	a0,s0,80066c4 <__divdf3+0x2ce>
 80066bc:	02851163          	bne	a0,s0,80066de <__divdf3+0x2e8>
 80066c0:	00b7ef63          	bltu	a5,a1,80066de <__divdf3+0x2e8>
 80066c4:	01e46663          	bltu	s0,t5,80066d0 <__divdf3+0x2da>
 80066c8:	008f1b63          	bne	t5,s0,80066de <__divdf3+0x2e8>
 80066cc:	00d7f963          	bgeu	a5,a3,80066de <__divdf3+0x2e8>
 80066d0:	97ae                	add	a5,a5,a1
 80066d2:	00b7b733          	sltu	a4,a5,a1
 80066d6:	972a                	add	a4,a4,a0
 80066d8:	ffef8493          	addi	s1,t6,-2
 80066dc:	943a                	add	s0,s0,a4
 80066de:	40d786b3          	sub	a3,a5,a3
 80066e2:	41e40433          	sub	s0,s0,t5
 80066e6:	00d7b7b3          	sltu	a5,a5,a3
 80066ea:	8c1d                	sub	s0,s0,a5
 80066ec:	5f7d                	li	t5,-1
 80066ee:	0e850563          	beq	a0,s0,80067d8 <__divdf3+0x3e2>
 80066f2:	03c45f33          	divu	t5,s0,t3
 80066f6:	0106d713          	srli	a4,a3,0x10
 80066fa:	03c47433          	remu	s0,s0,t3
 80066fe:	03e307b3          	mul	a5,t1,t5
 8006702:	0442                	slli	s0,s0,0x10
 8006704:	8c59                	or	s0,s0,a4
 8006706:	877a                	mv	a4,t5
 8006708:	00f47c63          	bgeu	s0,a5,8006720 <__divdf3+0x32a>
 800670c:	942a                	add	s0,s0,a0
 800670e:	ffff0713          	addi	a4,t5,-1
 8006712:	00a46763          	bltu	s0,a0,8006720 <__divdf3+0x32a>
 8006716:	00f47563          	bgeu	s0,a5,8006720 <__divdf3+0x32a>
 800671a:	ffef0713          	addi	a4,t5,-2
 800671e:	942a                	add	s0,s0,a0
 8006720:	8c1d                	sub	s0,s0,a5
 8006722:	03c45f33          	divu	t5,s0,t3
 8006726:	06c2                	slli	a3,a3,0x10
 8006728:	82c1                	srli	a3,a3,0x10
 800672a:	03c47433          	remu	s0,s0,t3
 800672e:	87fa                	mv	a5,t5
 8006730:	03e30333          	mul	t1,t1,t5
 8006734:	0442                	slli	s0,s0,0x10
 8006736:	8c55                	or	s0,s0,a3
 8006738:	00647c63          	bgeu	s0,t1,8006750 <__divdf3+0x35a>
 800673c:	942a                	add	s0,s0,a0
 800673e:	ffff0793          	addi	a5,t5,-1
 8006742:	00a46763          	bltu	s0,a0,8006750 <__divdf3+0x35a>
 8006746:	00647563          	bgeu	s0,t1,8006750 <__divdf3+0x35a>
 800674a:	ffef0793          	addi	a5,t5,-2
 800674e:	942a                	add	s0,s0,a0
 8006750:	0742                	slli	a4,a4,0x10
 8006752:	8f5d                	or	a4,a4,a5
 8006754:	01071793          	slli	a5,a4,0x10
 8006758:	83c1                	srli	a5,a5,0x10
 800675a:	40640433          	sub	s0,s0,t1
 800675e:	01075313          	srli	t1,a4,0x10
 8006762:	03178e33          	mul	t3,a5,a7
 8006766:	031308b3          	mul	a7,t1,a7
 800676a:	026e8333          	mul	t1,t4,t1
 800676e:	02fe8eb3          	mul	t4,t4,a5
 8006772:	010e5793          	srli	a5,t3,0x10
 8006776:	9ec6                	add	t4,t4,a7
 8006778:	97f6                	add	a5,a5,t4
 800677a:	0117f463          	bgeu	a5,a7,8006782 <__divdf3+0x38c>
 800677e:	66c1                	lui	a3,0x10
 8006780:	9336                	add	t1,t1,a3
 8006782:	0107d893          	srli	a7,a5,0x10
 8006786:	989a                	add	a7,a7,t1
 8006788:	6341                	lui	t1,0x10
 800678a:	137d                	addi	t1,t1,-1
 800678c:	0067f6b3          	and	a3,a5,t1
 8006790:	06c2                	slli	a3,a3,0x10
 8006792:	006e7e33          	and	t3,t3,t1
 8006796:	96f2                	add	a3,a3,t3
 8006798:	01146663          	bltu	s0,a7,80067a4 <__divdf3+0x3ae>
 800679c:	19141e63          	bne	s0,a7,8006938 <__divdf3+0x542>
 80067a0:	8f3a                	mv	t5,a4
 80067a2:	ca9d                	beqz	a3,80067d8 <__divdf3+0x3e2>
 80067a4:	942a                	add	s0,s0,a0
 80067a6:	fff70f13          	addi	t5,a4,-1
 80067aa:	02a46163          	bltu	s0,a0,80067cc <__divdf3+0x3d6>
 80067ae:	01146663          	bltu	s0,a7,80067ba <__divdf3+0x3c4>
 80067b2:	19141263          	bne	s0,a7,8006936 <__divdf3+0x540>
 80067b6:	00d5fd63          	bgeu	a1,a3,80067d0 <__divdf3+0x3da>
 80067ba:	00159793          	slli	a5,a1,0x1
 80067be:	00b7b5b3          	sltu	a1,a5,a1
 80067c2:	952e                	add	a0,a0,a1
 80067c4:	ffe70f13          	addi	t5,a4,-2
 80067c8:	942a                	add	s0,s0,a0
 80067ca:	85be                	mv	a1,a5
 80067cc:	01141463          	bne	s0,a7,80067d4 <__divdf3+0x3de>
 80067d0:	00b68463          	beq	a3,a1,80067d8 <__divdf3+0x3e2>
 80067d4:	001f6f13          	ori	t5,t5,1
 80067d8:	3ff80713          	addi	a4,a6,1023
 80067dc:	0ae05763          	blez	a4,800688a <__divdf3+0x494>
 80067e0:	007f7793          	andi	a5,t5,7
 80067e4:	cf81                	beqz	a5,80067fc <__divdf3+0x406>
 80067e6:	00ff7793          	andi	a5,t5,15
 80067ea:	4691                	li	a3,4
 80067ec:	00d78863          	beq	a5,a3,80067fc <__divdf3+0x406>
 80067f0:	004f0693          	addi	a3,t5,4
 80067f4:	01e6bf33          	sltu	t5,a3,t5
 80067f8:	94fa                	add	s1,s1,t5
 80067fa:	8f36                	mv	t5,a3
 80067fc:	00749793          	slli	a5,s1,0x7
 8006800:	0007d863          	bgez	a5,8006810 <__divdf3+0x41a>
 8006804:	ff0007b7          	lui	a5,0xff000
 8006808:	17fd                	addi	a5,a5,-1
 800680a:	8cfd                	and	s1,s1,a5
 800680c:	40080713          	addi	a4,a6,1024
 8006810:	7fe00793          	li	a5,2046
 8006814:	10e7c863          	blt	a5,a4,8006924 <__divdf3+0x52e>
 8006818:	003f5f13          	srli	t5,t5,0x3
 800681c:	01d49793          	slli	a5,s1,0x1d
 8006820:	01e7e7b3          	or	a5,a5,t5
 8006824:	0034d513          	srli	a0,s1,0x3
 8006828:	0532                	slli	a0,a0,0xc
 800682a:	7ff77713          	andi	a4,a4,2047
 800682e:	0752                	slli	a4,a4,0x14
 8006830:	50b2                	lw	ra,44(sp)
 8006832:	5422                	lw	s0,40(sp)
 8006834:	8131                	srli	a0,a0,0xc
 8006836:	8d59                	or	a0,a0,a4
 8006838:	067e                	slli	a2,a2,0x1f
 800683a:	00c56733          	or	a4,a0,a2
 800683e:	5492                	lw	s1,36(sp)
 8006840:	5902                	lw	s2,32(sp)
 8006842:	49f2                	lw	s3,28(sp)
 8006844:	4a62                	lw	s4,24(sp)
 8006846:	4ad2                	lw	s5,20(sp)
 8006848:	4b42                	lw	s6,16(sp)
 800684a:	4bb2                	lw	s7,12(sp)
 800684c:	853e                	mv	a0,a5
 800684e:	85ba                	mv	a1,a4
 8006850:	6145                	addi	sp,sp,48
 8006852:	8082                	ret
 8006854:	187d                	addi	a6,a6,-1
 8006856:	4781                	li	a5,0
 8006858:	bb8d                	j	80065ca <__divdf3+0x1d4>
 800685a:	864e                	mv	a2,s3
 800685c:	84d6                	mv	s1,s5
 800685e:	8f22                	mv	t5,s0
 8006860:	87da                	mv	a5,s6
 8006862:	4709                	li	a4,2
 8006864:	0ce78063          	beq	a5,a4,8006924 <__divdf3+0x52e>
 8006868:	470d                	li	a4,3
 800686a:	0ae78663          	beq	a5,a4,8006916 <__divdf3+0x520>
 800686e:	4705                	li	a4,1
 8006870:	f6e794e3          	bne	a5,a4,80067d8 <__divdf3+0x3e2>
 8006874:	4501                	li	a0,0
 8006876:	4781                	li	a5,0
 8006878:	a885                	j	80068e8 <__divdf3+0x4f2>
 800687a:	8652                	mv	a2,s4
 800687c:	b7dd                	j	8006862 <__divdf3+0x46c>
 800687e:	000804b7          	lui	s1,0x80
 8006882:	4f01                	li	t5,0
 8006884:	4601                	li	a2,0
 8006886:	478d                	li	a5,3
 8006888:	bfe9                	j	8006862 <__divdf3+0x46c>
 800688a:	4505                	li	a0,1
 800688c:	8d19                	sub	a0,a0,a4
 800688e:	03800793          	li	a5,56
 8006892:	fea7c1e3          	blt	a5,a0,8006874 <__divdf3+0x47e>
 8006896:	47fd                	li	a5,31
 8006898:	04a7ca63          	blt	a5,a0,80068ec <__divdf3+0x4f6>
 800689c:	41e80813          	addi	a6,a6,1054
 80068a0:	010497b3          	sll	a5,s1,a6
 80068a4:	00af5733          	srl	a4,t5,a0
 80068a8:	010f1833          	sll	a6,t5,a6
 80068ac:	8fd9                	or	a5,a5,a4
 80068ae:	01003833          	snez	a6,a6
 80068b2:	0107e7b3          	or	a5,a5,a6
 80068b6:	00a4d533          	srl	a0,s1,a0
 80068ba:	0077f713          	andi	a4,a5,7
 80068be:	cf01                	beqz	a4,80068d6 <__divdf3+0x4e0>
 80068c0:	00f7f713          	andi	a4,a5,15
 80068c4:	4691                	li	a3,4
 80068c6:	00d70863          	beq	a4,a3,80068d6 <__divdf3+0x4e0>
 80068ca:	00478713          	addi	a4,a5,4 # ff000004 <_sp+0xdeff8004>
 80068ce:	00f737b3          	sltu	a5,a4,a5
 80068d2:	953e                	add	a0,a0,a5
 80068d4:	87ba                	mv	a5,a4
 80068d6:	00851713          	slli	a4,a0,0x8
 80068da:	04074a63          	bltz	a4,800692e <__divdf3+0x538>
 80068de:	01d51713          	slli	a4,a0,0x1d
 80068e2:	838d                	srli	a5,a5,0x3
 80068e4:	8fd9                	or	a5,a5,a4
 80068e6:	810d                	srli	a0,a0,0x3
 80068e8:	4701                	li	a4,0
 80068ea:	bf3d                	j	8006828 <__divdf3+0x432>
 80068ec:	5785                	li	a5,-31
 80068ee:	8f99                	sub	a5,a5,a4
 80068f0:	02000693          	li	a3,32
 80068f4:	00f4d7b3          	srl	a5,s1,a5
 80068f8:	4701                	li	a4,0
 80068fa:	00d50663          	beq	a0,a3,8006906 <__divdf3+0x510>
 80068fe:	43e80813          	addi	a6,a6,1086
 8006902:	01049733          	sll	a4,s1,a6
 8006906:	01e76f33          	or	t5,a4,t5
 800690a:	01e03f33          	snez	t5,t5
 800690e:	01e7e7b3          	or	a5,a5,t5
 8006912:	4501                	li	a0,0
 8006914:	b75d                	j	80068ba <__divdf3+0x4c4>
 8006916:	00080537          	lui	a0,0x80
 800691a:	4781                	li	a5,0
 800691c:	7ff00713          	li	a4,2047
 8006920:	4601                	li	a2,0
 8006922:	b719                	j	8006828 <__divdf3+0x432>
 8006924:	4501                	li	a0,0
 8006926:	4781                	li	a5,0
 8006928:	7ff00713          	li	a4,2047
 800692c:	bdf5                	j	8006828 <__divdf3+0x432>
 800692e:	4501                	li	a0,0
 8006930:	4781                	li	a5,0
 8006932:	4705                	li	a4,1
 8006934:	bdd5                	j	8006828 <__divdf3+0x432>
 8006936:	877a                	mv	a4,t5
 8006938:	8f3a                	mv	t5,a4
 800693a:	bd69                	j	80067d4 <__divdf3+0x3de>

0800693c <__ledf2>:
 800693c:	0145d813          	srli	a6,a1,0x14
 8006940:	001007b7          	lui	a5,0x100
 8006944:	17fd                	addi	a5,a5,-1
 8006946:	0146d713          	srli	a4,a3,0x14
 800694a:	7ff87813          	andi	a6,a6,2047
 800694e:	7ff00e93          	li	t4,2047
 8006952:	00b7f8b3          	and	a7,a5,a1
 8006956:	832a                	mv	t1,a0
 8006958:	8ff5                	and	a5,a5,a3
 800695a:	81fd                	srli	a1,a1,0x1f
 800695c:	8e32                	mv	t3,a2
 800695e:	7ff77713          	andi	a4,a4,2047
 8006962:	82fd                	srli	a3,a3,0x1f
 8006964:	01d81863          	bne	a6,t4,8006974 <__ledf2+0x38>
 8006968:	00a8eeb3          	or	t4,a7,a0
 800696c:	060e8563          	beqz	t4,80069d6 <__ledf2+0x9a>
 8006970:	4589                	li	a1,2
 8006972:	a80d                	j	80069a4 <__ledf2+0x68>
 8006974:	01d71663          	bne	a4,t4,8006980 <__ledf2+0x44>
 8006978:	00c7eeb3          	or	t4,a5,a2
 800697c:	fe0e9ae3          	bnez	t4,8006970 <__ledf2+0x34>
 8006980:	04081d63          	bnez	a6,80069da <__ledf2+0x9e>
 8006984:	00a8e533          	or	a0,a7,a0
 8006988:	00153513          	seqz	a0,a0
 800698c:	e319                	bnez	a4,8006992 <__ledf2+0x56>
 800698e:	8e5d                	or	a2,a2,a5
 8006990:	ce15                	beqz	a2,80069cc <__ledf2+0x90>
 8006992:	e511                	bnez	a0,800699e <__ledf2+0x62>
 8006994:	00d58a63          	beq	a1,a3,80069a8 <__ledf2+0x6c>
 8006998:	c985                	beqz	a1,80069c8 <__ledf2+0x8c>
 800699a:	55fd                	li	a1,-1
 800699c:	a021                	j	80069a4 <__ledf2+0x68>
 800699e:	55fd                	li	a1,-1
 80069a0:	c291                	beqz	a3,80069a4 <__ledf2+0x68>
 80069a2:	85b6                	mv	a1,a3
 80069a4:	852e                	mv	a0,a1
 80069a6:	8082                	ret
 80069a8:	ff0748e3          	blt	a4,a6,8006998 <__ledf2+0x5c>
 80069ac:	00e85463          	bge	a6,a4,80069b4 <__ledf2+0x78>
 80069b0:	f9f5                	bnez	a1,80069a4 <__ledf2+0x68>
 80069b2:	b7e5                	j	800699a <__ledf2+0x5e>
 80069b4:	ff17e2e3          	bltu	a5,a7,8006998 <__ledf2+0x5c>
 80069b8:	00f89c63          	bne	a7,a5,80069d0 <__ledf2+0x94>
 80069bc:	fc6e6ee3          	bltu	t3,t1,8006998 <__ledf2+0x5c>
 80069c0:	ffc368e3          	bltu	t1,t3,80069b0 <__ledf2+0x74>
 80069c4:	4581                	li	a1,0
 80069c6:	bff9                	j	80069a4 <__ledf2+0x68>
 80069c8:	4585                	li	a1,1
 80069ca:	bfe9                	j	80069a4 <__ledf2+0x68>
 80069cc:	fd65                	bnez	a0,80069c4 <__ledf2+0x88>
 80069ce:	b7e9                	j	8006998 <__ledf2+0x5c>
 80069d0:	fef8e0e3          	bltu	a7,a5,80069b0 <__ledf2+0x74>
 80069d4:	bfc5                	j	80069c4 <__ledf2+0x88>
 80069d6:	fb0701e3          	beq	a4,a6,8006978 <__ledf2+0x3c>
 80069da:	ff4d                	bnez	a4,8006994 <__ledf2+0x58>
 80069dc:	4501                	li	a0,0
 80069de:	bf45                	j	800698e <__ledf2+0x52>

080069e0 <__muldf3>:
 80069e0:	7179                	addi	sp,sp,-48
 80069e2:	ce4e                	sw	s3,28(sp)
 80069e4:	0145d993          	srli	s3,a1,0x14
 80069e8:	d422                	sw	s0,40(sp)
 80069ea:	d226                	sw	s1,36(sp)
 80069ec:	cc52                	sw	s4,24(sp)
 80069ee:	ca56                	sw	s5,20(sp)
 80069f0:	c85a                	sw	s6,16(sp)
 80069f2:	00c59493          	slli	s1,a1,0xc
 80069f6:	d606                	sw	ra,44(sp)
 80069f8:	d04a                	sw	s2,32(sp)
 80069fa:	c65e                	sw	s7,12(sp)
 80069fc:	7ff9f993          	andi	s3,s3,2047
 8006a00:	842a                	mv	s0,a0
 8006a02:	8b32                	mv	s6,a2
 8006a04:	8ab6                	mv	s5,a3
 8006a06:	80b1                	srli	s1,s1,0xc
 8006a08:	01f5da13          	srli	s4,a1,0x1f
 8006a0c:	08098163          	beqz	s3,8006a8e <__muldf3+0xae>
 8006a10:	7ff00793          	li	a5,2047
 8006a14:	0cf98963          	beq	s3,a5,8006ae6 <__muldf3+0x106>
 8006a18:	01d55793          	srli	a5,a0,0x1d
 8006a1c:	048e                	slli	s1,s1,0x3
 8006a1e:	8cdd                	or	s1,s1,a5
 8006a20:	008007b7          	lui	a5,0x800
 8006a24:	8cdd                	or	s1,s1,a5
 8006a26:	00351913          	slli	s2,a0,0x3
 8006a2a:	c0198993          	addi	s3,s3,-1023
 8006a2e:	4b81                	li	s7,0
 8006a30:	014ad513          	srli	a0,s5,0x14
 8006a34:	00ca9413          	slli	s0,s5,0xc
 8006a38:	7ff57513          	andi	a0,a0,2047
 8006a3c:	8031                	srli	s0,s0,0xc
 8006a3e:	01fada93          	srli	s5,s5,0x1f
 8006a42:	c561                	beqz	a0,8006b0a <__muldf3+0x12a>
 8006a44:	7ff00793          	li	a5,2047
 8006a48:	10f50d63          	beq	a0,a5,8006b62 <__muldf3+0x182>
 8006a4c:	01db5793          	srli	a5,s6,0x1d
 8006a50:	040e                	slli	s0,s0,0x3
 8006a52:	8c5d                	or	s0,s0,a5
 8006a54:	008007b7          	lui	a5,0x800
 8006a58:	8c5d                	or	s0,s0,a5
 8006a5a:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__stack_size+0x7ec01>
 8006a5e:	003b1793          	slli	a5,s6,0x3
 8006a62:	4701                	li	a4,0
 8006a64:	002b9693          	slli	a3,s7,0x2
 8006a68:	8ed9                	or	a3,a3,a4
 8006a6a:	954e                	add	a0,a0,s3
 8006a6c:	16fd                	addi	a3,a3,-1
 8006a6e:	45b9                	li	a1,14
 8006a70:	015a4633          	xor	a2,s4,s5
 8006a74:	00150813          	addi	a6,a0,1
 8006a78:	10d5e663          	bltu	a1,a3,8006b84 <__muldf3+0x1a4>
 8006a7c:	ffffa597          	auipc	a1,0xffffa
 8006a80:	a6058593          	addi	a1,a1,-1440 # 80004dc <_std_dev_req+0x14c>
 8006a84:	068a                	slli	a3,a3,0x2
 8006a86:	96ae                	add	a3,a3,a1
 8006a88:	4294                	lw	a3,0(a3)
 8006a8a:	96ae                	add	a3,a3,a1
 8006a8c:	8682                	jr	a3
 8006a8e:	00a4e933          	or	s2,s1,a0
 8006a92:	06090363          	beqz	s2,8006af8 <__muldf3+0x118>
 8006a96:	c89d                	beqz	s1,8006acc <__muldf3+0xec>
 8006a98:	8526                	mv	a0,s1
 8006a9a:	00000097          	auipc	ra,0x0
 8006a9e:	606080e7          	jalr	1542(ra) # 80070a0 <__clzsi2>
 8006aa2:	ff550713          	addi	a4,a0,-11
 8006aa6:	47f1                	li	a5,28
 8006aa8:	02e7c963          	blt	a5,a4,8006ada <__muldf3+0xfa>
 8006aac:	47f5                	li	a5,29
 8006aae:	ff850913          	addi	s2,a0,-8
 8006ab2:	8f99                	sub	a5,a5,a4
 8006ab4:	012494b3          	sll	s1,s1,s2
 8006ab8:	00f457b3          	srl	a5,s0,a5
 8006abc:	8cdd                	or	s1,s1,a5
 8006abe:	01241933          	sll	s2,s0,s2
 8006ac2:	c0d00993          	li	s3,-1011
 8006ac6:	40a989b3          	sub	s3,s3,a0
 8006aca:	b795                	j	8006a2e <__muldf3+0x4e>
 8006acc:	00000097          	auipc	ra,0x0
 8006ad0:	5d4080e7          	jalr	1492(ra) # 80070a0 <__clzsi2>
 8006ad4:	02050513          	addi	a0,a0,32
 8006ad8:	b7e9                	j	8006aa2 <__muldf3+0xc2>
 8006ada:	fd850493          	addi	s1,a0,-40
 8006ade:	009414b3          	sll	s1,s0,s1
 8006ae2:	4901                	li	s2,0
 8006ae4:	bff9                	j	8006ac2 <__muldf3+0xe2>
 8006ae6:	00a4e933          	or	s2,s1,a0
 8006aea:	00090b63          	beqz	s2,8006b00 <__muldf3+0x120>
 8006aee:	892a                	mv	s2,a0
 8006af0:	7ff00993          	li	s3,2047
 8006af4:	4b8d                	li	s7,3
 8006af6:	bf2d                	j	8006a30 <__muldf3+0x50>
 8006af8:	4481                	li	s1,0
 8006afa:	4981                	li	s3,0
 8006afc:	4b85                	li	s7,1
 8006afe:	bf0d                	j	8006a30 <__muldf3+0x50>
 8006b00:	4481                	li	s1,0
 8006b02:	7ff00993          	li	s3,2047
 8006b06:	4b89                	li	s7,2
 8006b08:	b725                	j	8006a30 <__muldf3+0x50>
 8006b0a:	016467b3          	or	a5,s0,s6
 8006b0e:	c3b5                	beqz	a5,8006b72 <__muldf3+0x192>
 8006b10:	c81d                	beqz	s0,8006b46 <__muldf3+0x166>
 8006b12:	8522                	mv	a0,s0
 8006b14:	00000097          	auipc	ra,0x0
 8006b18:	58c080e7          	jalr	1420(ra) # 80070a0 <__clzsi2>
 8006b1c:	ff550693          	addi	a3,a0,-11
 8006b20:	47f1                	li	a5,28
 8006b22:	02d7ca63          	blt	a5,a3,8006b56 <__muldf3+0x176>
 8006b26:	4775                	li	a4,29
 8006b28:	ff850793          	addi	a5,a0,-8
 8006b2c:	8f15                	sub	a4,a4,a3
 8006b2e:	00f41433          	sll	s0,s0,a5
 8006b32:	00eb5733          	srl	a4,s6,a4
 8006b36:	8c59                	or	s0,s0,a4
 8006b38:	00fb17b3          	sll	a5,s6,a5
 8006b3c:	c0d00713          	li	a4,-1011
 8006b40:	40a70533          	sub	a0,a4,a0
 8006b44:	bf39                	j	8006a62 <__muldf3+0x82>
 8006b46:	855a                	mv	a0,s6
 8006b48:	00000097          	auipc	ra,0x0
 8006b4c:	558080e7          	jalr	1368(ra) # 80070a0 <__clzsi2>
 8006b50:	02050513          	addi	a0,a0,32
 8006b54:	b7e1                	j	8006b1c <__muldf3+0x13c>
 8006b56:	fd850413          	addi	s0,a0,-40
 8006b5a:	008b1433          	sll	s0,s6,s0
 8006b5e:	4781                	li	a5,0
 8006b60:	bff1                	j	8006b3c <__muldf3+0x15c>
 8006b62:	016467b3          	or	a5,s0,s6
 8006b66:	cb91                	beqz	a5,8006b7a <__muldf3+0x19a>
 8006b68:	87da                	mv	a5,s6
 8006b6a:	7ff00513          	li	a0,2047
 8006b6e:	470d                	li	a4,3
 8006b70:	bdd5                	j	8006a64 <__muldf3+0x84>
 8006b72:	4401                	li	s0,0
 8006b74:	4501                	li	a0,0
 8006b76:	4705                	li	a4,1
 8006b78:	b5f5                	j	8006a64 <__muldf3+0x84>
 8006b7a:	4401                	li	s0,0
 8006b7c:	7ff00513          	li	a0,2047
 8006b80:	4709                	li	a4,2
 8006b82:	b5cd                	j	8006a64 <__muldf3+0x84>
 8006b84:	6f41                	lui	t5,0x10
 8006b86:	ffff0e93          	addi	t4,t5,-1 # ffff <__stack_size+0xefff>
 8006b8a:	01095713          	srli	a4,s2,0x10
 8006b8e:	0107d893          	srli	a7,a5,0x10
 8006b92:	01d97933          	and	s2,s2,t4
 8006b96:	01d7f7b3          	and	a5,a5,t4
 8006b9a:	032885b3          	mul	a1,a7,s2
 8006b9e:	032786b3          	mul	a3,a5,s2
 8006ba2:	02f70fb3          	mul	t6,a4,a5
 8006ba6:	01f58333          	add	t1,a1,t6
 8006baa:	0106d593          	srli	a1,a3,0x10
 8006bae:	959a                	add	a1,a1,t1
 8006bb0:	03170e33          	mul	t3,a4,a7
 8006bb4:	01f5f363          	bgeu	a1,t6,8006bba <__muldf3+0x1da>
 8006bb8:	9e7a                	add	t3,t3,t5
 8006bba:	0105d393          	srli	t2,a1,0x10
 8006bbe:	01d5f5b3          	and	a1,a1,t4
 8006bc2:	01d6f6b3          	and	a3,a3,t4
 8006bc6:	01045f13          	srli	t5,s0,0x10
 8006bca:	01d472b3          	and	t0,s0,t4
 8006bce:	05c2                	slli	a1,a1,0x10
 8006bd0:	95b6                	add	a1,a1,a3
 8006bd2:	02570eb3          	mul	t4,a4,t0
 8006bd6:	032286b3          	mul	a3,t0,s2
 8006bda:	032f0933          	mul	s2,t5,s2
 8006bde:	01d90333          	add	t1,s2,t4
 8006be2:	0106d913          	srli	s2,a3,0x10
 8006be6:	991a                	add	s2,s2,t1
 8006be8:	03e70733          	mul	a4,a4,t5
 8006bec:	01d97463          	bgeu	s2,t4,8006bf4 <__muldf3+0x214>
 8006bf0:	6341                	lui	t1,0x10
 8006bf2:	971a                	add	a4,a4,t1
 8006bf4:	01095e93          	srli	t4,s2,0x10
 8006bf8:	69c1                	lui	s3,0x10
 8006bfa:	9eba                	add	t4,t4,a4
 8006bfc:	fff98713          	addi	a4,s3,-1 # ffff <__stack_size+0xefff>
 8006c00:	00e97933          	and	s2,s2,a4
 8006c04:	8ef9                	and	a3,a3,a4
 8006c06:	0104d413          	srli	s0,s1,0x10
 8006c0a:	0942                	slli	s2,s2,0x10
 8006c0c:	8cf9                	and	s1,s1,a4
 8006c0e:	9936                	add	s2,s2,a3
 8006c10:	02978733          	mul	a4,a5,s1
 8006c14:	93ca                	add	t2,t2,s2
 8006c16:	02f40333          	mul	t1,s0,a5
 8006c1a:	029886b3          	mul	a3,a7,s1
 8006c1e:	028887b3          	mul	a5,a7,s0
 8006c22:	006688b3          	add	a7,a3,t1
 8006c26:	01075693          	srli	a3,a4,0x10
 8006c2a:	96c6                	add	a3,a3,a7
 8006c2c:	0066f363          	bgeu	a3,t1,8006c32 <__muldf3+0x252>
 8006c30:	97ce                	add	a5,a5,s3
 8006c32:	0106d893          	srli	a7,a3,0x10
 8006c36:	69c1                	lui	s3,0x10
 8006c38:	00f88fb3          	add	t6,a7,a5
 8006c3c:	fff98793          	addi	a5,s3,-1 # ffff <__stack_size+0xefff>
 8006c40:	8efd                	and	a3,a3,a5
 8006c42:	8f7d                	and	a4,a4,a5
 8006c44:	029288b3          	mul	a7,t0,s1
 8006c48:	06c2                	slli	a3,a3,0x10
 8006c4a:	96ba                	add	a3,a3,a4
 8006c4c:	025407b3          	mul	a5,s0,t0
 8006c50:	029f04b3          	mul	s1,t5,s1
 8006c54:	028f0333          	mul	t1,t5,s0
 8006c58:	94be                	add	s1,s1,a5
 8006c5a:	0108d413          	srli	s0,a7,0x10
 8006c5e:	94a2                	add	s1,s1,s0
 8006c60:	00f4f363          	bgeu	s1,a5,8006c66 <__muldf3+0x286>
 8006c64:	934e                	add	t1,t1,s3
 8006c66:	67c1                	lui	a5,0x10
 8006c68:	17fd                	addi	a5,a5,-1
 8006c6a:	00f4f733          	and	a4,s1,a5
 8006c6e:	00f8f8b3          	and	a7,a7,a5
 8006c72:	0742                	slli	a4,a4,0x10
 8006c74:	9e1e                	add	t3,t3,t2
 8006c76:	9746                	add	a4,a4,a7
 8006c78:	012e3933          	sltu	s2,t3,s2
 8006c7c:	9776                	add	a4,a4,t4
 8006c7e:	01270433          	add	s0,a4,s2
 8006c82:	9e36                	add	t3,t3,a3
 8006c84:	00de36b3          	sltu	a3,t3,a3
 8006c88:	01f408b3          	add	a7,s0,t6
 8006c8c:	00d88f33          	add	t5,a7,a3
 8006c90:	01d73733          	sltu	a4,a4,t4
 8006c94:	01243433          	sltu	s0,s0,s2
 8006c98:	8c59                	or	s0,s0,a4
 8006c9a:	80c1                	srli	s1,s1,0x10
 8006c9c:	01f8b8b3          	sltu	a7,a7,t6
 8006ca0:	00df36b3          	sltu	a3,t5,a3
 8006ca4:	9426                	add	s0,s0,s1
 8006ca6:	00d8e6b3          	or	a3,a7,a3
 8006caa:	9436                	add	s0,s0,a3
 8006cac:	941a                	add	s0,s0,t1
 8006cae:	017f5793          	srli	a5,t5,0x17
 8006cb2:	0426                	slli	s0,s0,0x9
 8006cb4:	8c5d                	or	s0,s0,a5
 8006cb6:	009e1793          	slli	a5,t3,0x9
 8006cba:	8fcd                	or	a5,a5,a1
 8006cbc:	00f037b3          	snez	a5,a5
 8006cc0:	017e5e13          	srli	t3,t3,0x17
 8006cc4:	009f1713          	slli	a4,t5,0x9
 8006cc8:	01c7e7b3          	or	a5,a5,t3
 8006ccc:	8fd9                	or	a5,a5,a4
 8006cce:	00741713          	slli	a4,s0,0x7
 8006cd2:	0a075863          	bgez	a4,8006d82 <__muldf3+0x3a2>
 8006cd6:	0017d713          	srli	a4,a5,0x1
 8006cda:	8b85                	andi	a5,a5,1
 8006cdc:	8fd9                	or	a5,a5,a4
 8006cde:	01f41713          	slli	a4,s0,0x1f
 8006ce2:	8fd9                	or	a5,a5,a4
 8006ce4:	8005                	srli	s0,s0,0x1
 8006ce6:	3ff80693          	addi	a3,a6,1023
 8006cea:	08d05e63          	blez	a3,8006d86 <__muldf3+0x3a6>
 8006cee:	0077f713          	andi	a4,a5,7
 8006cf2:	cf01                	beqz	a4,8006d0a <__muldf3+0x32a>
 8006cf4:	00f7f713          	andi	a4,a5,15
 8006cf8:	4591                	li	a1,4
 8006cfa:	00b70863          	beq	a4,a1,8006d0a <__muldf3+0x32a>
 8006cfe:	00478713          	addi	a4,a5,4 # 10004 <__stack_size+0xf004>
 8006d02:	00f737b3          	sltu	a5,a4,a5
 8006d06:	943e                	add	s0,s0,a5
 8006d08:	87ba                	mv	a5,a4
 8006d0a:	00741713          	slli	a4,s0,0x7
 8006d0e:	00075863          	bgez	a4,8006d1e <__muldf3+0x33e>
 8006d12:	ff000737          	lui	a4,0xff000
 8006d16:	177d                	addi	a4,a4,-1
 8006d18:	8c79                	and	s0,s0,a4
 8006d1a:	40080693          	addi	a3,a6,1024
 8006d1e:	7fe00713          	li	a4,2046
 8006d22:	0ed74c63          	blt	a4,a3,8006e1a <__muldf3+0x43a>
 8006d26:	0037d713          	srli	a4,a5,0x3
 8006d2a:	01d41793          	slli	a5,s0,0x1d
 8006d2e:	8fd9                	or	a5,a5,a4
 8006d30:	800d                	srli	s0,s0,0x3
 8006d32:	0432                	slli	s0,s0,0xc
 8006d34:	7ff6f713          	andi	a4,a3,2047
 8006d38:	0752                	slli	a4,a4,0x14
 8006d3a:	8031                	srli	s0,s0,0xc
 8006d3c:	8c59                	or	s0,s0,a4
 8006d3e:	067e                	slli	a2,a2,0x1f
 8006d40:	00c46733          	or	a4,s0,a2
 8006d44:	50b2                	lw	ra,44(sp)
 8006d46:	5422                	lw	s0,40(sp)
 8006d48:	5492                	lw	s1,36(sp)
 8006d4a:	5902                	lw	s2,32(sp)
 8006d4c:	49f2                	lw	s3,28(sp)
 8006d4e:	4a62                	lw	s4,24(sp)
 8006d50:	4ad2                	lw	s5,20(sp)
 8006d52:	4b42                	lw	s6,16(sp)
 8006d54:	4bb2                	lw	s7,12(sp)
 8006d56:	853e                	mv	a0,a5
 8006d58:	85ba                	mv	a1,a4
 8006d5a:	6145                	addi	sp,sp,48
 8006d5c:	8082                	ret
 8006d5e:	8652                	mv	a2,s4
 8006d60:	8426                	mv	s0,s1
 8006d62:	87ca                	mv	a5,s2
 8006d64:	875e                	mv	a4,s7
 8006d66:	4689                	li	a3,2
 8006d68:	0ad70963          	beq	a4,a3,8006e1a <__muldf3+0x43a>
 8006d6c:	468d                	li	a3,3
 8006d6e:	08d70f63          	beq	a4,a3,8006e0c <__muldf3+0x42c>
 8006d72:	4685                	li	a3,1
 8006d74:	f6d719e3          	bne	a4,a3,8006ce6 <__muldf3+0x306>
 8006d78:	4401                	li	s0,0
 8006d7a:	4781                	li	a5,0
 8006d7c:	a09d                	j	8006de2 <__muldf3+0x402>
 8006d7e:	8656                	mv	a2,s5
 8006d80:	b7dd                	j	8006d66 <__muldf3+0x386>
 8006d82:	882a                	mv	a6,a0
 8006d84:	b78d                	j	8006ce6 <__muldf3+0x306>
 8006d86:	4585                	li	a1,1
 8006d88:	8d95                	sub	a1,a1,a3
 8006d8a:	03800713          	li	a4,56
 8006d8e:	feb745e3          	blt	a4,a1,8006d78 <__muldf3+0x398>
 8006d92:	477d                	li	a4,31
 8006d94:	04b74963          	blt	a4,a1,8006de6 <__muldf3+0x406>
 8006d98:	41e80813          	addi	a6,a6,1054
 8006d9c:	01041733          	sll	a4,s0,a6
 8006da0:	00b7d6b3          	srl	a3,a5,a1
 8006da4:	010797b3          	sll	a5,a5,a6
 8006da8:	8f55                	or	a4,a4,a3
 8006daa:	00f037b3          	snez	a5,a5
 8006dae:	8fd9                	or	a5,a5,a4
 8006db0:	00b45433          	srl	s0,s0,a1
 8006db4:	0077f713          	andi	a4,a5,7
 8006db8:	cf01                	beqz	a4,8006dd0 <__muldf3+0x3f0>
 8006dba:	00f7f713          	andi	a4,a5,15
 8006dbe:	4691                	li	a3,4
 8006dc0:	00d70863          	beq	a4,a3,8006dd0 <__muldf3+0x3f0>
 8006dc4:	00478713          	addi	a4,a5,4
 8006dc8:	00f737b3          	sltu	a5,a4,a5
 8006dcc:	943e                	add	s0,s0,a5
 8006dce:	87ba                	mv	a5,a4
 8006dd0:	00841713          	slli	a4,s0,0x8
 8006dd4:	04074863          	bltz	a4,8006e24 <__muldf3+0x444>
 8006dd8:	01d41713          	slli	a4,s0,0x1d
 8006ddc:	838d                	srli	a5,a5,0x3
 8006dde:	8fd9                	or	a5,a5,a4
 8006de0:	800d                	srli	s0,s0,0x3
 8006de2:	4681                	li	a3,0
 8006de4:	b7b9                	j	8006d32 <__muldf3+0x352>
 8006de6:	5705                	li	a4,-31
 8006de8:	8f15                	sub	a4,a4,a3
 8006dea:	02000513          	li	a0,32
 8006dee:	00e45733          	srl	a4,s0,a4
 8006df2:	4681                	li	a3,0
 8006df4:	00a58663          	beq	a1,a0,8006e00 <__muldf3+0x420>
 8006df8:	43e80813          	addi	a6,a6,1086
 8006dfc:	010416b3          	sll	a3,s0,a6
 8006e00:	8fd5                	or	a5,a5,a3
 8006e02:	00f037b3          	snez	a5,a5
 8006e06:	8fd9                	or	a5,a5,a4
 8006e08:	4401                	li	s0,0
 8006e0a:	b76d                	j	8006db4 <__muldf3+0x3d4>
 8006e0c:	00080437          	lui	s0,0x80
 8006e10:	4781                	li	a5,0
 8006e12:	7ff00693          	li	a3,2047
 8006e16:	4601                	li	a2,0
 8006e18:	bf29                	j	8006d32 <__muldf3+0x352>
 8006e1a:	4401                	li	s0,0
 8006e1c:	4781                	li	a5,0
 8006e1e:	7ff00693          	li	a3,2047
 8006e22:	bf01                	j	8006d32 <__muldf3+0x352>
 8006e24:	4401                	li	s0,0
 8006e26:	4781                	li	a5,0
 8006e28:	4685                	li	a3,1
 8006e2a:	b721                	j	8006d32 <__muldf3+0x352>

08006e2c <__fixdfsi>:
 8006e2c:	0145d713          	srli	a4,a1,0x14
 8006e30:	001006b7          	lui	a3,0x100
 8006e34:	fff68793          	addi	a5,a3,-1 # fffff <__stack_size+0xfefff>
 8006e38:	7ff77713          	andi	a4,a4,2047
 8006e3c:	3fe00613          	li	a2,1022
 8006e40:	8fed                	and	a5,a5,a1
 8006e42:	81fd                	srli	a1,a1,0x1f
 8006e44:	04e65463          	bge	a2,a4,8006e8c <__fixdfsi+0x60>
 8006e48:	41d00613          	li	a2,1053
 8006e4c:	00e65863          	bge	a2,a4,8006e5c <__fixdfsi+0x30>
 8006e50:	80000537          	lui	a0,0x80000
 8006e54:	fff54513          	not	a0,a0
 8006e58:	952e                	add	a0,a0,a1
 8006e5a:	8082                	ret
 8006e5c:	8fd5                	or	a5,a5,a3
 8006e5e:	43300693          	li	a3,1075
 8006e62:	8e99                	sub	a3,a3,a4
 8006e64:	467d                	li	a2,31
 8006e66:	00d64d63          	blt	a2,a3,8006e80 <__fixdfsi+0x54>
 8006e6a:	bed70713          	addi	a4,a4,-1043 # fefffbed <_sp+0xdeff7bed>
 8006e6e:	00e797b3          	sll	a5,a5,a4
 8006e72:	00d55533          	srl	a0,a0,a3
 8006e76:	8d5d                	or	a0,a0,a5
 8006e78:	c999                	beqz	a1,8006e8e <__fixdfsi+0x62>
 8006e7a:	40a00533          	neg	a0,a0
 8006e7e:	8082                	ret
 8006e80:	41300513          	li	a0,1043
 8006e84:	8d19                	sub	a0,a0,a4
 8006e86:	00a7d533          	srl	a0,a5,a0
 8006e8a:	b7fd                	j	8006e78 <__fixdfsi+0x4c>
 8006e8c:	4501                	li	a0,0
 8006e8e:	8082                	ret

08006e90 <__floatunsidf>:
 8006e90:	1141                	addi	sp,sp,-16
 8006e92:	c422                	sw	s0,8(sp)
 8006e94:	c606                	sw	ra,12(sp)
 8006e96:	842a                	mv	s0,a0
 8006e98:	c521                	beqz	a0,8006ee0 <__floatunsidf+0x50>
 8006e9a:	00000097          	auipc	ra,0x0
 8006e9e:	206080e7          	jalr	518(ra) # 80070a0 <__clzsi2>
 8006ea2:	41e00713          	li	a4,1054
 8006ea6:	47a9                	li	a5,10
 8006ea8:	8f09                	sub	a4,a4,a0
 8006eaa:	02a7c663          	blt	a5,a0,8006ed6 <__floatunsidf+0x46>
 8006eae:	47ad                	li	a5,11
 8006eb0:	8f89                	sub	a5,a5,a0
 8006eb2:	0555                	addi	a0,a0,21
 8006eb4:	00f457b3          	srl	a5,s0,a5
 8006eb8:	00a41433          	sll	s0,s0,a0
 8006ebc:	8522                	mv	a0,s0
 8006ebe:	40b2                	lw	ra,12(sp)
 8006ec0:	4422                	lw	s0,8(sp)
 8006ec2:	07b2                	slli	a5,a5,0xc
 8006ec4:	7ff77713          	andi	a4,a4,2047
 8006ec8:	0752                	slli	a4,a4,0x14
 8006eca:	83b1                	srli	a5,a5,0xc
 8006ecc:	00e7e6b3          	or	a3,a5,a4
 8006ed0:	85b6                	mv	a1,a3
 8006ed2:	0141                	addi	sp,sp,16
 8006ed4:	8082                	ret
 8006ed6:	1555                	addi	a0,a0,-11
 8006ed8:	00a417b3          	sll	a5,s0,a0
 8006edc:	4401                	li	s0,0
 8006ede:	bff9                	j	8006ebc <__floatunsidf+0x2c>
 8006ee0:	4781                	li	a5,0
 8006ee2:	4701                	li	a4,0
 8006ee4:	bfe1                	j	8006ebc <__floatunsidf+0x2c>

08006ee6 <__floatundidf>:
 8006ee6:	1101                	addi	sp,sp,-32
 8006ee8:	ce06                	sw	ra,28(sp)
 8006eea:	cc22                	sw	s0,24(sp)
 8006eec:	ca26                	sw	s1,20(sp)
 8006eee:	c84a                	sw	s2,16(sp)
 8006ef0:	c64e                	sw	s3,12(sp)
 8006ef2:	c452                	sw	s4,8(sp)
 8006ef4:	00b567b3          	or	a5,a0,a1
 8006ef8:	14078663          	beqz	a5,8007044 <__floatundidf+0x15e>
 8006efc:	842a                	mv	s0,a0
 8006efe:	892e                	mv	s2,a1
 8006f00:	84ae                	mv	s1,a1
 8006f02:	c5bd                	beqz	a1,8006f70 <__floatundidf+0x8a>
 8006f04:	852e                	mv	a0,a1
 8006f06:	00000097          	auipc	ra,0x0
 8006f0a:	19a080e7          	jalr	410(ra) # 80070a0 <__clzsi2>
 8006f0e:	89aa                	mv	s3,a0
 8006f10:	43e00a13          	li	s4,1086
 8006f14:	413a0a33          	sub	s4,s4,s3
 8006f18:	43300793          	li	a5,1075
 8006f1c:	0747c763          	blt	a5,s4,8006f8a <__floatundidf+0xa4>
 8006f20:	47ad                	li	a5,11
 8006f22:	8522                	mv	a0,s0
 8006f24:	0337d363          	bge	a5,s3,8006f4a <__floatundidf+0x64>
 8006f28:	02a00793          	li	a5,42
 8006f2c:	0537c963          	blt	a5,s3,8006f7e <__floatundidf+0x98>
 8006f30:	02b00593          	li	a1,43
 8006f34:	ff598793          	addi	a5,s3,-11
 8006f38:	413585b3          	sub	a1,a1,s3
 8006f3c:	00b455b3          	srl	a1,s0,a1
 8006f40:	00f914b3          	sll	s1,s2,a5
 8006f44:	8ccd                	or	s1,s1,a1
 8006f46:	00f41533          	sll	a0,s0,a5
 8006f4a:	00c49593          	slli	a1,s1,0xc
 8006f4e:	40f2                	lw	ra,28(sp)
 8006f50:	4462                	lw	s0,24(sp)
 8006f52:	7ffa7a13          	andi	s4,s4,2047
 8006f56:	0a52                	slli	s4,s4,0x14
 8006f58:	81b1                	srli	a1,a1,0xc
 8006f5a:	0145e7b3          	or	a5,a1,s4
 8006f5e:	872a                	mv	a4,a0
 8006f60:	44d2                	lw	s1,20(sp)
 8006f62:	4942                	lw	s2,16(sp)
 8006f64:	49b2                	lw	s3,12(sp)
 8006f66:	4a22                	lw	s4,8(sp)
 8006f68:	853a                	mv	a0,a4
 8006f6a:	85be                	mv	a1,a5
 8006f6c:	6105                	addi	sp,sp,32
 8006f6e:	8082                	ret
 8006f70:	00000097          	auipc	ra,0x0
 8006f74:	130080e7          	jalr	304(ra) # 80070a0 <__clzsi2>
 8006f78:	02050993          	addi	s3,a0,32 # 80000020 <_sp+0x5fff8020>
 8006f7c:	bf51                	j	8006f10 <__floatundidf+0x2a>
 8006f7e:	fd598593          	addi	a1,s3,-43
 8006f82:	00b414b3          	sll	s1,s0,a1
 8006f86:	4501                	li	a0,0
 8006f88:	b7c9                	j	8006f4a <__floatundidf+0x64>
 8006f8a:	43600793          	li	a5,1078
 8006f8e:	0347d963          	bge	a5,s4,8006fc0 <__floatundidf+0xda>
 8006f92:	03898613          	addi	a2,s3,56
 8006f96:	8522                	mv	a0,s0
 8006f98:	85ca                	mv	a1,s2
 8006f9a:	00000097          	auipc	ra,0x0
 8006f9e:	0dc080e7          	jalr	220(ra) # 8007076 <__ashldi3>
 8006fa2:	8dc9                	or	a1,a1,a0
 8006fa4:	4621                	li	a2,8
 8006fa6:	00b034b3          	snez	s1,a1
 8006faa:	8522                	mv	a0,s0
 8006fac:	85ca                	mv	a1,s2
 8006fae:	41360633          	sub	a2,a2,s3
 8006fb2:	00000097          	auipc	ra,0x0
 8006fb6:	09a080e7          	jalr	154(ra) # 800704c <__lshrdi3>
 8006fba:	00a4e433          	or	s0,s1,a0
 8006fbe:	892e                	mv	s2,a1
 8006fc0:	47a1                	li	a5,8
 8006fc2:	8522                	mv	a0,s0
 8006fc4:	0337d463          	bge	a5,s3,8006fec <__floatundidf+0x106>
 8006fc8:	02700793          	li	a5,39
 8006fcc:	0737c663          	blt	a5,s3,8007038 <__floatundidf+0x152>
 8006fd0:	02800593          	li	a1,40
 8006fd4:	ff898793          	addi	a5,s3,-8
 8006fd8:	413585b3          	sub	a1,a1,s3
 8006fdc:	00f91933          	sll	s2,s2,a5
 8006fe0:	00b455b3          	srl	a1,s0,a1
 8006fe4:	0125e933          	or	s2,a1,s2
 8006fe8:	00f41533          	sll	a0,s0,a5
 8006fec:	ff8007b7          	lui	a5,0xff800
 8006ff0:	17fd                	addi	a5,a5,-1
 8006ff2:	00f975b3          	and	a1,s2,a5
 8006ff6:	00757793          	andi	a5,a0,7
 8006ffa:	cf81                	beqz	a5,8007012 <__floatundidf+0x12c>
 8006ffc:	00f57793          	andi	a5,a0,15
 8007000:	4711                	li	a4,4
 8007002:	00e78863          	beq	a5,a4,8007012 <__floatundidf+0x12c>
 8007006:	00450793          	addi	a5,a0,4
 800700a:	00a7b533          	sltu	a0,a5,a0
 800700e:	95aa                	add	a1,a1,a0
 8007010:	853e                	mv	a0,a5
 8007012:	00859793          	slli	a5,a1,0x8
 8007016:	0007da63          	bgez	a5,800702a <__floatundidf+0x144>
 800701a:	ff8007b7          	lui	a5,0xff800
 800701e:	17fd                	addi	a5,a5,-1
 8007020:	43f00a13          	li	s4,1087
 8007024:	8dfd                	and	a1,a1,a5
 8007026:	413a0a33          	sub	s4,s4,s3
 800702a:	810d                	srli	a0,a0,0x3
 800702c:	01d59793          	slli	a5,a1,0x1d
 8007030:	8d5d                	or	a0,a0,a5
 8007032:	0035d493          	srli	s1,a1,0x3
 8007036:	bf11                	j	8006f4a <__floatundidf+0x64>
 8007038:	fd898913          	addi	s2,s3,-40
 800703c:	01241933          	sll	s2,s0,s2
 8007040:	4501                	li	a0,0
 8007042:	b76d                	j	8006fec <__floatundidf+0x106>
 8007044:	4481                	li	s1,0
 8007046:	4501                	li	a0,0
 8007048:	4a01                	li	s4,0
 800704a:	b701                	j	8006f4a <__floatundidf+0x64>

0800704c <__lshrdi3>:
 800704c:	ce01                	beqz	a2,8007064 <__lshrdi3+0x18>
 800704e:	02000793          	li	a5,32
 8007052:	8f91                	sub	a5,a5,a2
 8007054:	00f04963          	bgtz	a5,8007066 <__lshrdi3+0x1a>
 8007058:	fe060513          	addi	a0,a2,-32
 800705c:	4701                	li	a4,0
 800705e:	00a5d533          	srl	a0,a1,a0
 8007062:	85ba                	mv	a1,a4
 8007064:	8082                	ret
 8007066:	00c5d733          	srl	a4,a1,a2
 800706a:	00c55533          	srl	a0,a0,a2
 800706e:	00f595b3          	sll	a1,a1,a5
 8007072:	8d4d                	or	a0,a0,a1
 8007074:	b7fd                	j	8007062 <__lshrdi3+0x16>

08007076 <__ashldi3>:
 8007076:	ce01                	beqz	a2,800708e <__ashldi3+0x18>
 8007078:	02000793          	li	a5,32
 800707c:	8f91                	sub	a5,a5,a2
 800707e:	00f04963          	bgtz	a5,8007090 <__ashldi3+0x1a>
 8007082:	fe060593          	addi	a1,a2,-32
 8007086:	4701                	li	a4,0
 8007088:	00b515b3          	sll	a1,a0,a1
 800708c:	853a                	mv	a0,a4
 800708e:	8082                	ret
 8007090:	00c51733          	sll	a4,a0,a2
 8007094:	00c595b3          	sll	a1,a1,a2
 8007098:	00f55533          	srl	a0,a0,a5
 800709c:	8dc9                	or	a1,a1,a0
 800709e:	b7fd                	j	800708c <__ashldi3+0x16>

080070a0 <__clzsi2>:
 80070a0:	67c1                	lui	a5,0x10
 80070a2:	02f57663          	bgeu	a0,a5,80070ce <__clzsi2+0x2e>
 80070a6:	0ff00793          	li	a5,255
 80070aa:	00a7b7b3          	sltu	a5,a5,a0
 80070ae:	078e                	slli	a5,a5,0x3
 80070b0:	02000713          	li	a4,32
 80070b4:	8f1d                	sub	a4,a4,a5
 80070b6:	00f557b3          	srl	a5,a0,a5
 80070ba:	ffff9517          	auipc	a0,0xffff9
 80070be:	45e50513          	addi	a0,a0,1118 # 8000518 <__clz_tab>
 80070c2:	97aa                	add	a5,a5,a0
 80070c4:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xf000>
 80070c8:	40a70533          	sub	a0,a4,a0
 80070cc:	8082                	ret
 80070ce:	01000737          	lui	a4,0x1000
 80070d2:	47c1                	li	a5,16
 80070d4:	fce56ee3          	bltu	a0,a4,80070b0 <__clzsi2+0x10>
 80070d8:	47e1                	li	a5,24
 80070da:	bfd9                	j	80070b0 <__clzsi2+0x10>

080070dc <atexit>:
 80070dc:	85aa                	mv	a1,a0
 80070de:	4681                	li	a3,0
 80070e0:	4601                	li	a2,0
 80070e2:	4501                	li	a0,0
 80070e4:	00000317          	auipc	t1,0x0
 80070e8:	17e30067          	jr	382(t1) # 8007262 <__register_exitproc>

080070ec <exit>:
 80070ec:	1141                	addi	sp,sp,-16
 80070ee:	c422                	sw	s0,8(sp)
 80070f0:	c606                	sw	ra,12(sp)
 80070f2:	00000797          	auipc	a5,0x0
 80070f6:	1fc78793          	addi	a5,a5,508 # 80072ee <__call_exitprocs>
 80070fa:	842a                	mv	s0,a0
 80070fc:	c791                	beqz	a5,8007108 <exit+0x1c>
 80070fe:	4581                	li	a1,0
 8007100:	00000097          	auipc	ra,0x0
 8007104:	1ee080e7          	jalr	494(ra) # 80072ee <__call_exitprocs>
 8007108:	00001797          	auipc	a5,0x1
 800710c:	ccc78793          	addi	a5,a5,-820 # 8007dd4 <_global_impure_ptr>
 8007110:	4388                	lw	a0,0(a5)
 8007112:	551c                	lw	a5,40(a0)
 8007114:	c391                	beqz	a5,8007118 <exit+0x2c>
 8007116:	9782                	jalr	a5
 8007118:	8522                	mv	a0,s0
 800711a:	ffffb097          	auipc	ra,0xffffb
 800711e:	a00080e7          	jalr	-1536(ra) # 8001b1a <_exit>

08007122 <__libc_fini_array>:
 8007122:	1141                	addi	sp,sp,-16
 8007124:	00001797          	auipc	a5,0x1
 8007128:	cb478793          	addi	a5,a5,-844 # 8007dd8 <__fini_array_end>
 800712c:	c422                	sw	s0,8(sp)
 800712e:	00001417          	auipc	s0,0x1
 8007132:	caa40413          	addi	s0,s0,-854 # 8007dd8 <__fini_array_end>
 8007136:	8c1d                	sub	s0,s0,a5
 8007138:	c226                	sw	s1,4(sp)
 800713a:	c606                	sw	ra,12(sp)
 800713c:	8409                	srai	s0,s0,0x2
 800713e:	84be                	mv	s1,a5
 8007140:	e411                	bnez	s0,800714c <__libc_fini_array+0x2a>
 8007142:	40b2                	lw	ra,12(sp)
 8007144:	4422                	lw	s0,8(sp)
 8007146:	4492                	lw	s1,4(sp)
 8007148:	0141                	addi	sp,sp,16
 800714a:	8082                	ret
 800714c:	147d                	addi	s0,s0,-1
 800714e:	00241793          	slli	a5,s0,0x2
 8007152:	97a6                	add	a5,a5,s1
 8007154:	439c                	lw	a5,0(a5)
 8007156:	9782                	jalr	a5
 8007158:	b7e5                	j	8007140 <__libc_fini_array+0x1e>

0800715a <__libc_init_array>:
 800715a:	1141                	addi	sp,sp,-16
 800715c:	00001797          	auipc	a5,0x1
 8007160:	c7c78793          	addi	a5,a5,-900 # 8007dd8 <__fini_array_end>
 8007164:	c422                	sw	s0,8(sp)
 8007166:	00001417          	auipc	s0,0x1
 800716a:	c7240413          	addi	s0,s0,-910 # 8007dd8 <__fini_array_end>
 800716e:	8c1d                	sub	s0,s0,a5
 8007170:	c226                	sw	s1,4(sp)
 8007172:	c04a                	sw	s2,0(sp)
 8007174:	c606                	sw	ra,12(sp)
 8007176:	8409                	srai	s0,s0,0x2
 8007178:	4481                	li	s1,0
 800717a:	893e                	mv	s2,a5
 800717c:	02849663          	bne	s1,s0,80071a8 <__libc_init_array+0x4e>
 8007180:	00001797          	auipc	a5,0x1
 8007184:	c5878793          	addi	a5,a5,-936 # 8007dd8 <__fini_array_end>
 8007188:	00001417          	auipc	s0,0x1
 800718c:	c5040413          	addi	s0,s0,-944 # 8007dd8 <__fini_array_end>
 8007190:	8c1d                	sub	s0,s0,a5
 8007192:	8409                	srai	s0,s0,0x2
 8007194:	4481                	li	s1,0
 8007196:	893e                	mv	s2,a5
 8007198:	00849f63          	bne	s1,s0,80071b6 <__libc_init_array+0x5c>
 800719c:	40b2                	lw	ra,12(sp)
 800719e:	4422                	lw	s0,8(sp)
 80071a0:	4492                	lw	s1,4(sp)
 80071a2:	4902                	lw	s2,0(sp)
 80071a4:	0141                	addi	sp,sp,16
 80071a6:	8082                	ret
 80071a8:	00249793          	slli	a5,s1,0x2
 80071ac:	97ca                	add	a5,a5,s2
 80071ae:	439c                	lw	a5,0(a5)
 80071b0:	0485                	addi	s1,s1,1
 80071b2:	9782                	jalr	a5
 80071b4:	b7e1                	j	800717c <__libc_init_array+0x22>
 80071b6:	00249793          	slli	a5,s1,0x2
 80071ba:	97ca                	add	a5,a5,s2
 80071bc:	439c                	lw	a5,0(a5)
 80071be:	0485                	addi	s1,s1,1
 80071c0:	9782                	jalr	a5
 80071c2:	bfd9                	j	8007198 <__libc_init_array+0x3e>

080071c4 <memcpy>:
 80071c4:	832a                	mv	t1,a0
 80071c6:	ca09                	beqz	a2,80071d8 <memcpy+0x14>
 80071c8:	00058383          	lb	t2,0(a1)
 80071cc:	00730023          	sb	t2,0(t1)
 80071d0:	167d                	addi	a2,a2,-1
 80071d2:	0305                	addi	t1,t1,1
 80071d4:	0585                	addi	a1,a1,1
 80071d6:	fa6d                	bnez	a2,80071c8 <memcpy+0x4>
 80071d8:	8082                	ret

080071da <memset>:
 80071da:	832a                	mv	t1,a0
 80071dc:	c611                	beqz	a2,80071e8 <memset+0xe>
 80071de:	00b30023          	sb	a1,0(t1)
 80071e2:	167d                	addi	a2,a2,-1
 80071e4:	0305                	addi	t1,t1,1
 80071e6:	fe65                	bnez	a2,80071de <memset+0x4>
 80071e8:	8082                	ret

080071ea <siprintf>:
 80071ea:	7135                	addi	sp,sp,-160
 80071ec:	cb3e                	sw	a5,148(sp)
 80071ee:	800007b7          	lui	a5,0x80000
 80071f2:	fff7c793          	not	a5,a5
 80071f6:	ce3e                	sw	a5,28(sp)
 80071f8:	c83e                	sw	a5,16(sp)
 80071fa:	77c1                	lui	a5,0xffff0
 80071fc:	20878793          	addi	a5,a5,520 # ffff0208 <_sp+0xdffe8208>
 8007200:	c532                	sw	a2,136(sp)
 8007202:	c736                	sw	a3,140(sp)
 8007204:	c93a                	sw	a4,144(sp)
 8007206:	cd42                	sw	a6,152(sp)
 8007208:	cf46                	sw	a7,156(sp)
 800720a:	ca3e                	sw	a5,20(sp)
 800720c:	17ff9797          	auipc	a5,0x17ff9
 8007210:	2f078793          	addi	a5,a5,752 # 200004fc <_impure_ptr>
 8007214:	c42a                	sw	a0,8(sp)
 8007216:	cc2a                	sw	a0,24(sp)
 8007218:	4388                	lw	a0,0(a5)
 800721a:	0134                	addi	a3,sp,136
 800721c:	862e                	mv	a2,a1
 800721e:	002c                	addi	a1,sp,8
 8007220:	de86                	sw	ra,124(sp)
 8007222:	c236                	sw	a3,4(sp)
 8007224:	00000097          	auipc	ra,0x0
 8007228:	44e080e7          	jalr	1102(ra) # 8007672 <_svfiprintf_r>
 800722c:	47a2                	lw	a5,8(sp)
 800722e:	00078023          	sb	zero,0(a5)
 8007232:	50f6                	lw	ra,124(sp)
 8007234:	610d                	addi	sp,sp,160
 8007236:	8082                	ret

08007238 <strcmp>:
 8007238:	00054603          	lbu	a2,0(a0)
 800723c:	0005c683          	lbu	a3,0(a1)
 8007240:	0505                	addi	a0,a0,1
 8007242:	0585                	addi	a1,a1,1
 8007244:	00d61363          	bne	a2,a3,800724a <strcmp+0x12>
 8007248:	fa65                	bnez	a2,8007238 <strcmp>
 800724a:	40d60533          	sub	a0,a2,a3
 800724e:	8082                	ret

08007250 <strlen>:
 8007250:	87aa                	mv	a5,a0
 8007252:	0785                	addi	a5,a5,1
 8007254:	fff7c703          	lbu	a4,-1(a5)
 8007258:	ff6d                	bnez	a4,8007252 <strlen+0x2>
 800725a:	40a78533          	sub	a0,a5,a0
 800725e:	157d                	addi	a0,a0,-1
 8007260:	8082                	ret

08007262 <__register_exitproc>:
 8007262:	17ff9797          	auipc	a5,0x17ff9
 8007266:	2e678793          	addi	a5,a5,742 # 20000548 <_global_atexit>
 800726a:	439c                	lw	a5,0(a5)
 800726c:	8e2a                	mv	t3,a0
 800726e:	e78d                	bnez	a5,8007298 <__register_exitproc+0x36>
 8007270:	17ffa717          	auipc	a4,0x17ffa
 8007274:	2e470713          	addi	a4,a4,740 # 20001554 <_global_atexit0>
 8007278:	17ff9797          	auipc	a5,0x17ff9
 800727c:	2ce7a823          	sw	a4,720(a5) # 20000548 <_global_atexit>
 8007280:	f7ff9517          	auipc	a0,0xf7ff9
 8007284:	d8050513          	addi	a0,a0,-640 # 0 <__dbg_stack_size>
 8007288:	87ba                	mv	a5,a4
 800728a:	c519                	beqz	a0,8007298 <__register_exitproc+0x36>
 800728c:	411c                	lw	a5,0(a0)
 800728e:	17ffa517          	auipc	a0,0x17ffa
 8007292:	34f52723          	sw	a5,846(a0) # 200015dc <_global_atexit0+0x88>
 8007296:	87ba                	mv	a5,a4
 8007298:	43d8                	lw	a4,4(a5)
 800729a:	487d                	li	a6,31
 800729c:	557d                	li	a0,-1
 800729e:	04e84763          	blt	a6,a4,80072ec <__register_exitproc+0x8a>
 80072a2:	020e0e63          	beqz	t3,80072de <__register_exitproc+0x7c>
 80072a6:	0887a803          	lw	a6,136(a5)
 80072aa:	04080163          	beqz	a6,80072ec <__register_exitproc+0x8a>
 80072ae:	00271893          	slli	a7,a4,0x2
 80072b2:	98c2                	add	a7,a7,a6
 80072b4:	00c8a023          	sw	a2,0(a7)
 80072b8:	10082303          	lw	t1,256(a6)
 80072bc:	4605                	li	a2,1
 80072be:	00e61633          	sll	a2,a2,a4
 80072c2:	00c36333          	or	t1,t1,a2
 80072c6:	10682023          	sw	t1,256(a6)
 80072ca:	08d8a023          	sw	a3,128(a7)
 80072ce:	4689                	li	a3,2
 80072d0:	00de1763          	bne	t3,a3,80072de <__register_exitproc+0x7c>
 80072d4:	10482683          	lw	a3,260(a6)
 80072d8:	8e55                	or	a2,a2,a3
 80072da:	10c82223          	sw	a2,260(a6)
 80072de:	00170693          	addi	a3,a4,1
 80072e2:	070a                	slli	a4,a4,0x2
 80072e4:	c3d4                	sw	a3,4(a5)
 80072e6:	97ba                	add	a5,a5,a4
 80072e8:	c78c                	sw	a1,8(a5)
 80072ea:	4501                	li	a0,0
 80072ec:	8082                	ret

080072ee <__call_exitprocs>:
 80072ee:	7179                	addi	sp,sp,-48
 80072f0:	cc52                	sw	s4,24(sp)
 80072f2:	ca56                	sw	s5,20(sp)
 80072f4:	c85a                	sw	s6,16(sp)
 80072f6:	c65e                	sw	s7,12(sp)
 80072f8:	d606                	sw	ra,44(sp)
 80072fa:	d422                	sw	s0,40(sp)
 80072fc:	d226                	sw	s1,36(sp)
 80072fe:	d04a                	sw	s2,32(sp)
 8007300:	ce4e                	sw	s3,28(sp)
 8007302:	c462                	sw	s8,8(sp)
 8007304:	8b2a                	mv	s6,a0
 8007306:	8a2e                	mv	s4,a1
 8007308:	17ff9a97          	auipc	s5,0x17ff9
 800730c:	240a8a93          	addi	s5,s5,576 # 20000548 <_global_atexit>
 8007310:	4b85                	li	s7,1
 8007312:	000aa403          	lw	s0,0(s5)
 8007316:	c811                	beqz	s0,800732a <__call_exitprocs+0x3c>
 8007318:	4044                	lw	s1,4(s0)
 800731a:	08842983          	lw	s3,136(s0)
 800731e:	fff48913          	addi	s2,s1,-1 # 7ffff <__stack_size+0x7efff>
 8007322:	048a                	slli	s1,s1,0x2
 8007324:	94a2                	add	s1,s1,s0
 8007326:	00095e63          	bgez	s2,8007342 <__call_exitprocs+0x54>
 800732a:	50b2                	lw	ra,44(sp)
 800732c:	5422                	lw	s0,40(sp)
 800732e:	5492                	lw	s1,36(sp)
 8007330:	5902                	lw	s2,32(sp)
 8007332:	49f2                	lw	s3,28(sp)
 8007334:	4a62                	lw	s4,24(sp)
 8007336:	4ad2                	lw	s5,20(sp)
 8007338:	4b42                	lw	s6,16(sp)
 800733a:	4bb2                	lw	s7,12(sp)
 800733c:	4c22                	lw	s8,8(sp)
 800733e:	6145                	addi	sp,sp,48
 8007340:	8082                	ret
 8007342:	000a0e63          	beqz	s4,800735e <__call_exitprocs+0x70>
 8007346:	00099563          	bnez	s3,8007350 <__call_exitprocs+0x62>
 800734a:	197d                	addi	s2,s2,-1
 800734c:	14f1                	addi	s1,s1,-4
 800734e:	bfe1                	j	8007326 <__call_exitprocs+0x38>
 8007350:	00291793          	slli	a5,s2,0x2
 8007354:	97ce                	add	a5,a5,s3
 8007356:	0807a783          	lw	a5,128(a5)
 800735a:	ff4798e3          	bne	a5,s4,800734a <__call_exitprocs+0x5c>
 800735e:	4058                	lw	a4,4(s0)
 8007360:	40dc                	lw	a5,4(s1)
 8007362:	177d                	addi	a4,a4,-1
 8007364:	03271863          	bne	a4,s2,8007394 <__call_exitprocs+0xa6>
 8007368:	01242223          	sw	s2,4(s0)
 800736c:	dff9                	beqz	a5,800734a <__call_exitprocs+0x5c>
 800736e:	00442c03          	lw	s8,4(s0)
 8007372:	00098863          	beqz	s3,8007382 <__call_exitprocs+0x94>
 8007376:	1009a683          	lw	a3,256(s3)
 800737a:	012b9733          	sll	a4,s7,s2
 800737e:	8ef9                	and	a3,a3,a4
 8007380:	ee89                	bnez	a3,800739a <__call_exitprocs+0xac>
 8007382:	9782                	jalr	a5
 8007384:	4058                	lw	a4,4(s0)
 8007386:	000aa783          	lw	a5,0(s5)
 800738a:	f98714e3          	bne	a4,s8,8007312 <__call_exitprocs+0x24>
 800738e:	faf40ee3          	beq	s0,a5,800734a <__call_exitprocs+0x5c>
 8007392:	b741                	j	8007312 <__call_exitprocs+0x24>
 8007394:	0004a223          	sw	zero,4(s1)
 8007398:	bfd1                	j	800736c <__call_exitprocs+0x7e>
 800739a:	00291693          	slli	a3,s2,0x2
 800739e:	96ce                	add	a3,a3,s3
 80073a0:	428c                	lw	a1,0(a3)
 80073a2:	1049a683          	lw	a3,260(s3)
 80073a6:	8f75                	and	a4,a4,a3
 80073a8:	e701                	bnez	a4,80073b0 <__call_exitprocs+0xc2>
 80073aa:	855a                	mv	a0,s6
 80073ac:	9782                	jalr	a5
 80073ae:	bfd9                	j	8007384 <__call_exitprocs+0x96>
 80073b0:	852e                	mv	a0,a1
 80073b2:	9782                	jalr	a5
 80073b4:	bfc1                	j	8007384 <__call_exitprocs+0x96>

080073b6 <_free_r>:
 80073b6:	c9dd                	beqz	a1,800746c <_free_r+0xb6>
 80073b8:	ffc5a783          	lw	a5,-4(a1)
 80073bc:	1141                	addi	sp,sp,-16
 80073be:	c422                	sw	s0,8(sp)
 80073c0:	c606                	sw	ra,12(sp)
 80073c2:	c226                	sw	s1,4(sp)
 80073c4:	ffc58413          	addi	s0,a1,-4
 80073c8:	0007d363          	bgez	a5,80073ce <_free_r+0x18>
 80073cc:	943e                	add	s0,s0,a5
 80073ce:	84aa                	mv	s1,a0
 80073d0:	00001097          	auipc	ra,0x1
 80073d4:	96c080e7          	jalr	-1684(ra) # 8007d3c <__malloc_lock>
 80073d8:	17ff9797          	auipc	a5,0x17ff9
 80073dc:	17478793          	addi	a5,a5,372 # 2000054c <__malloc_free_list>
 80073e0:	439c                	lw	a5,0(a5)
 80073e2:	e385                	bnez	a5,8007402 <_free_r+0x4c>
 80073e4:	00042223          	sw	zero,4(s0)
 80073e8:	17ff9797          	auipc	a5,0x17ff9
 80073ec:	1687a223          	sw	s0,356(a5) # 2000054c <__malloc_free_list>
 80073f0:	4422                	lw	s0,8(sp)
 80073f2:	40b2                	lw	ra,12(sp)
 80073f4:	8526                	mv	a0,s1
 80073f6:	4492                	lw	s1,4(sp)
 80073f8:	0141                	addi	sp,sp,16
 80073fa:	00001317          	auipc	t1,0x1
 80073fe:	94430067          	jr	-1724(t1) # 8007d3e <__malloc_unlock>
 8007402:	00f47e63          	bgeu	s0,a5,800741e <_free_r+0x68>
 8007406:	4014                	lw	a3,0(s0)
 8007408:	00d40733          	add	a4,s0,a3
 800740c:	00e79663          	bne	a5,a4,8007418 <_free_r+0x62>
 8007410:	4398                	lw	a4,0(a5)
 8007412:	43dc                	lw	a5,4(a5)
 8007414:	9736                	add	a4,a4,a3
 8007416:	c018                	sw	a4,0(s0)
 8007418:	c05c                	sw	a5,4(s0)
 800741a:	b7f9                	j	80073e8 <_free_r+0x32>
 800741c:	87ba                	mv	a5,a4
 800741e:	43d8                	lw	a4,4(a5)
 8007420:	c319                	beqz	a4,8007426 <_free_r+0x70>
 8007422:	fee47de3          	bgeu	s0,a4,800741c <_free_r+0x66>
 8007426:	4394                	lw	a3,0(a5)
 8007428:	00d78633          	add	a2,a5,a3
 800742c:	00861f63          	bne	a2,s0,800744a <_free_r+0x94>
 8007430:	4010                	lw	a2,0(s0)
 8007432:	96b2                	add	a3,a3,a2
 8007434:	c394                	sw	a3,0(a5)
 8007436:	00d78633          	add	a2,a5,a3
 800743a:	fac71be3          	bne	a4,a2,80073f0 <_free_r+0x3a>
 800743e:	4310                	lw	a2,0(a4)
 8007440:	4358                	lw	a4,4(a4)
 8007442:	96b2                	add	a3,a3,a2
 8007444:	c394                	sw	a3,0(a5)
 8007446:	c3d8                	sw	a4,4(a5)
 8007448:	b765                	j	80073f0 <_free_r+0x3a>
 800744a:	00c47563          	bgeu	s0,a2,8007454 <_free_r+0x9e>
 800744e:	47b1                	li	a5,12
 8007450:	c09c                	sw	a5,0(s1)
 8007452:	bf79                	j	80073f0 <_free_r+0x3a>
 8007454:	4010                	lw	a2,0(s0)
 8007456:	00c406b3          	add	a3,s0,a2
 800745a:	00d71663          	bne	a4,a3,8007466 <_free_r+0xb0>
 800745e:	4314                	lw	a3,0(a4)
 8007460:	4358                	lw	a4,4(a4)
 8007462:	96b2                	add	a3,a3,a2
 8007464:	c014                	sw	a3,0(s0)
 8007466:	c058                	sw	a4,4(s0)
 8007468:	c3c0                	sw	s0,4(a5)
 800746a:	b759                	j	80073f0 <_free_r+0x3a>
 800746c:	8082                	ret

0800746e <_malloc_r>:
 800746e:	1101                	addi	sp,sp,-32
 8007470:	ca26                	sw	s1,20(sp)
 8007472:	00358493          	addi	s1,a1,3
 8007476:	98f1                	andi	s1,s1,-4
 8007478:	ce06                	sw	ra,28(sp)
 800747a:	cc22                	sw	s0,24(sp)
 800747c:	c84a                	sw	s2,16(sp)
 800747e:	c64e                	sw	s3,12(sp)
 8007480:	04a1                	addi	s1,s1,8
 8007482:	47b1                	li	a5,12
 8007484:	06f4f363          	bgeu	s1,a5,80074ea <_malloc_r+0x7c>
 8007488:	44b1                	li	s1,12
 800748a:	06b4e263          	bltu	s1,a1,80074ee <_malloc_r+0x80>
 800748e:	892a                	mv	s2,a0
 8007490:	00001097          	auipc	ra,0x1
 8007494:	8ac080e7          	jalr	-1876(ra) # 8007d3c <__malloc_lock>
 8007498:	17ff9797          	auipc	a5,0x17ff9
 800749c:	0b478793          	addi	a5,a5,180 # 2000054c <__malloc_free_list>
 80074a0:	4398                	lw	a4,0(a5)
 80074a2:	843a                	mv	s0,a4
 80074a4:	ec39                	bnez	s0,8007502 <_malloc_r+0x94>
 80074a6:	17ff9797          	auipc	a5,0x17ff9
 80074aa:	0aa78793          	addi	a5,a5,170 # 20000550 <__malloc_sbrk_start>
 80074ae:	439c                	lw	a5,0(a5)
 80074b0:	eb99                	bnez	a5,80074c6 <_malloc_r+0x58>
 80074b2:	4581                	li	a1,0
 80074b4:	854a                	mv	a0,s2
 80074b6:	00001097          	auipc	ra,0x1
 80074ba:	810080e7          	jalr	-2032(ra) # 8007cc6 <_sbrk_r>
 80074be:	17ff9797          	auipc	a5,0x17ff9
 80074c2:	08a7a923          	sw	a0,146(a5) # 20000550 <__malloc_sbrk_start>
 80074c6:	85a6                	mv	a1,s1
 80074c8:	854a                	mv	a0,s2
 80074ca:	00000097          	auipc	ra,0x0
 80074ce:	7fc080e7          	jalr	2044(ra) # 8007cc6 <_sbrk_r>
 80074d2:	59fd                	li	s3,-1
 80074d4:	07351f63          	bne	a0,s3,8007552 <_malloc_r+0xe4>
 80074d8:	47b1                	li	a5,12
 80074da:	00f92023          	sw	a5,0(s2)
 80074de:	854a                	mv	a0,s2
 80074e0:	00001097          	auipc	ra,0x1
 80074e4:	85e080e7          	jalr	-1954(ra) # 8007d3e <__malloc_unlock>
 80074e8:	a029                	j	80074f2 <_malloc_r+0x84>
 80074ea:	fa04d0e3          	bgez	s1,800748a <_malloc_r+0x1c>
 80074ee:	47b1                	li	a5,12
 80074f0:	c11c                	sw	a5,0(a0)
 80074f2:	4501                	li	a0,0
 80074f4:	40f2                	lw	ra,28(sp)
 80074f6:	4462                	lw	s0,24(sp)
 80074f8:	44d2                	lw	s1,20(sp)
 80074fa:	4942                	lw	s2,16(sp)
 80074fc:	49b2                	lw	s3,12(sp)
 80074fe:	6105                	addi	sp,sp,32
 8007500:	8082                	ret
 8007502:	401c                	lw	a5,0(s0)
 8007504:	8f85                	sub	a5,a5,s1
 8007506:	0407c363          	bltz	a5,800754c <_malloc_r+0xde>
 800750a:	46ad                	li	a3,11
 800750c:	00f6f663          	bgeu	a3,a5,8007518 <_malloc_r+0xaa>
 8007510:	c01c                	sw	a5,0(s0)
 8007512:	943e                	add	s0,s0,a5
 8007514:	c004                	sw	s1,0(s0)
 8007516:	a801                	j	8007526 <_malloc_r+0xb8>
 8007518:	405c                	lw	a5,4(s0)
 800751a:	02871763          	bne	a4,s0,8007548 <_malloc_r+0xda>
 800751e:	17ff9717          	auipc	a4,0x17ff9
 8007522:	02f72723          	sw	a5,46(a4) # 2000054c <__malloc_free_list>
 8007526:	854a                	mv	a0,s2
 8007528:	00001097          	auipc	ra,0x1
 800752c:	816080e7          	jalr	-2026(ra) # 8007d3e <__malloc_unlock>
 8007530:	00b40513          	addi	a0,s0,11
 8007534:	00440793          	addi	a5,s0,4
 8007538:	9961                	andi	a0,a0,-8
 800753a:	40f50733          	sub	a4,a0,a5
 800753e:	db5d                	beqz	a4,80074f4 <_malloc_r+0x86>
 8007540:	943a                	add	s0,s0,a4
 8007542:	8f89                	sub	a5,a5,a0
 8007544:	c01c                	sw	a5,0(s0)
 8007546:	b77d                	j	80074f4 <_malloc_r+0x86>
 8007548:	c35c                	sw	a5,4(a4)
 800754a:	bff1                	j	8007526 <_malloc_r+0xb8>
 800754c:	8722                	mv	a4,s0
 800754e:	4040                	lw	s0,4(s0)
 8007550:	bf91                	j	80074a4 <_malloc_r+0x36>
 8007552:	00350413          	addi	s0,a0,3
 8007556:	9871                	andi	s0,s0,-4
 8007558:	fa850ee3          	beq	a0,s0,8007514 <_malloc_r+0xa6>
 800755c:	40a405b3          	sub	a1,s0,a0
 8007560:	854a                	mv	a0,s2
 8007562:	00000097          	auipc	ra,0x0
 8007566:	764080e7          	jalr	1892(ra) # 8007cc6 <_sbrk_r>
 800756a:	fb3515e3          	bne	a0,s3,8007514 <_malloc_r+0xa6>
 800756e:	b7ad                	j	80074d8 <_malloc_r+0x6a>

08007570 <__ssputs_r>:
 8007570:	1101                	addi	sp,sp,-32
 8007572:	c84a                	sw	s2,16(sp)
 8007574:	0085a903          	lw	s2,8(a1)
 8007578:	cc22                	sw	s0,24(sp)
 800757a:	c452                	sw	s4,8(sp)
 800757c:	c05a                	sw	s6,0(sp)
 800757e:	ce06                	sw	ra,28(sp)
 8007580:	ca26                	sw	s1,20(sp)
 8007582:	c64e                	sw	s3,12(sp)
 8007584:	c256                	sw	s5,4(sp)
 8007586:	842e                	mv	s0,a1
 8007588:	8b32                	mv	s6,a2
 800758a:	8a36                	mv	s4,a3
 800758c:	0b26e263          	bltu	a3,s2,8007630 <__ssputs_r+0xc0>
 8007590:	00c5d783          	lhu	a5,12(a1)
 8007594:	4807f713          	andi	a4,a5,1152
 8007598:	cb51                	beqz	a4,800762c <__ssputs_r+0xbc>
 800759a:	4004                	lw	s1,0(s0)
 800759c:	498c                	lw	a1,16(a1)
 800759e:	4858                	lw	a4,20(s0)
 80075a0:	8aaa                	mv	s5,a0
 80075a2:	40b489b3          	sub	s3,s1,a1
 80075a6:	448d                	li	s1,3
 80075a8:	02e484b3          	mul	s1,s1,a4
 80075ac:	4709                	li	a4,2
 80075ae:	02e4c4b3          	div	s1,s1,a4
 80075b2:	00168713          	addi	a4,a3,1
 80075b6:	974e                	add	a4,a4,s3
 80075b8:	00e4f363          	bgeu	s1,a4,80075be <__ssputs_r+0x4e>
 80075bc:	84ba                	mv	s1,a4
 80075be:	4007f793          	andi	a5,a5,1024
 80075c2:	cbc9                	beqz	a5,8007654 <__ssputs_r+0xe4>
 80075c4:	85a6                	mv	a1,s1
 80075c6:	8556                	mv	a0,s5
 80075c8:	00000097          	auipc	ra,0x0
 80075cc:	ea6080e7          	jalr	-346(ra) # 800746e <_malloc_r>
 80075d0:	892a                	mv	s2,a0
 80075d2:	e50d                	bnez	a0,80075fc <__ssputs_r+0x8c>
 80075d4:	47b1                	li	a5,12
 80075d6:	00faa023          	sw	a5,0(s5)
 80075da:	00c45783          	lhu	a5,12(s0)
 80075de:	557d                	li	a0,-1
 80075e0:	0407e793          	ori	a5,a5,64
 80075e4:	00f41623          	sh	a5,12(s0)
 80075e8:	40f2                	lw	ra,28(sp)
 80075ea:	4462                	lw	s0,24(sp)
 80075ec:	44d2                	lw	s1,20(sp)
 80075ee:	4942                	lw	s2,16(sp)
 80075f0:	49b2                	lw	s3,12(sp)
 80075f2:	4a22                	lw	s4,8(sp)
 80075f4:	4a92                	lw	s5,4(sp)
 80075f6:	4b02                	lw	s6,0(sp)
 80075f8:	6105                	addi	sp,sp,32
 80075fa:	8082                	ret
 80075fc:	480c                	lw	a1,16(s0)
 80075fe:	864e                	mv	a2,s3
 8007600:	00000097          	auipc	ra,0x0
 8007604:	bc4080e7          	jalr	-1084(ra) # 80071c4 <memcpy>
 8007608:	00c45783          	lhu	a5,12(s0)
 800760c:	b7f7f793          	andi	a5,a5,-1153
 8007610:	0807e793          	ori	a5,a5,128
 8007614:	00f41623          	sh	a5,12(s0)
 8007618:	01242823          	sw	s2,16(s0)
 800761c:	c844                	sw	s1,20(s0)
 800761e:	994e                	add	s2,s2,s3
 8007620:	413484b3          	sub	s1,s1,s3
 8007624:	01242023          	sw	s2,0(s0)
 8007628:	c404                	sw	s1,8(s0)
 800762a:	8952                	mv	s2,s4
 800762c:	012a7363          	bgeu	s4,s2,8007632 <__ssputs_r+0xc2>
 8007630:	8952                	mv	s2,s4
 8007632:	4008                	lw	a0,0(s0)
 8007634:	864a                	mv	a2,s2
 8007636:	85da                	mv	a1,s6
 8007638:	00000097          	auipc	ra,0x0
 800763c:	6de080e7          	jalr	1758(ra) # 8007d16 <memmove>
 8007640:	441c                	lw	a5,8(s0)
 8007642:	4501                	li	a0,0
 8007644:	412787b3          	sub	a5,a5,s2
 8007648:	c41c                	sw	a5,8(s0)
 800764a:	401c                	lw	a5,0(s0)
 800764c:	993e                	add	s2,s2,a5
 800764e:	01242023          	sw	s2,0(s0)
 8007652:	bf59                	j	80075e8 <__ssputs_r+0x78>
 8007654:	8626                	mv	a2,s1
 8007656:	8556                	mv	a0,s5
 8007658:	00000097          	auipc	ra,0x0
 800765c:	6e8080e7          	jalr	1768(ra) # 8007d40 <_realloc_r>
 8007660:	892a                	mv	s2,a0
 8007662:	f95d                	bnez	a0,8007618 <__ssputs_r+0xa8>
 8007664:	480c                	lw	a1,16(s0)
 8007666:	8556                	mv	a0,s5
 8007668:	00000097          	auipc	ra,0x0
 800766c:	d4e080e7          	jalr	-690(ra) # 80073b6 <_free_r>
 8007670:	b795                	j	80075d4 <__ssputs_r+0x64>

08007672 <_svfiprintf_r>:
 8007672:	00c5d783          	lhu	a5,12(a1)
 8007676:	7171                	addi	sp,sp,-176
 8007678:	d326                	sw	s1,164(sp)
 800767a:	d14a                	sw	s2,160(sp)
 800767c:	cf4e                	sw	s3,156(sp)
 800767e:	d706                	sw	ra,172(sp)
 8007680:	d522                	sw	s0,168(sp)
 8007682:	cd52                	sw	s4,152(sp)
 8007684:	cb56                	sw	s5,148(sp)
 8007686:	c95a                	sw	s6,144(sp)
 8007688:	c75e                	sw	s7,140(sp)
 800768a:	c562                	sw	s8,136(sp)
 800768c:	c366                	sw	s9,132(sp)
 800768e:	0807f793          	andi	a5,a5,128
 8007692:	89aa                	mv	s3,a0
 8007694:	892e                	mv	s2,a1
 8007696:	84b2                	mv	s1,a2
 8007698:	c7a9                	beqz	a5,80076e2 <_svfiprintf_r+0x70>
 800769a:	499c                	lw	a5,16(a1)
 800769c:	e3b9                	bnez	a5,80076e2 <_svfiprintf_r+0x70>
 800769e:	04000593          	li	a1,64
 80076a2:	c636                	sw	a3,12(sp)
 80076a4:	00000097          	auipc	ra,0x0
 80076a8:	dca080e7          	jalr	-566(ra) # 800746e <_malloc_r>
 80076ac:	00a92023          	sw	a0,0(s2)
 80076b0:	00a92823          	sw	a0,16(s2)
 80076b4:	46b2                	lw	a3,12(sp)
 80076b6:	e115                	bnez	a0,80076da <_svfiprintf_r+0x68>
 80076b8:	47b1                	li	a5,12
 80076ba:	00f9a023          	sw	a5,0(s3)
 80076be:	557d                	li	a0,-1
 80076c0:	50ba                	lw	ra,172(sp)
 80076c2:	542a                	lw	s0,168(sp)
 80076c4:	549a                	lw	s1,164(sp)
 80076c6:	590a                	lw	s2,160(sp)
 80076c8:	49fa                	lw	s3,156(sp)
 80076ca:	4a6a                	lw	s4,152(sp)
 80076cc:	4ada                	lw	s5,148(sp)
 80076ce:	4b4a                	lw	s6,144(sp)
 80076d0:	4bba                	lw	s7,140(sp)
 80076d2:	4c2a                	lw	s8,136(sp)
 80076d4:	4c9a                	lw	s9,132(sp)
 80076d6:	614d                	addi	sp,sp,176
 80076d8:	8082                	ret
 80076da:	04000793          	li	a5,64
 80076de:	00f92a23          	sw	a5,20(s2)
 80076e2:	02000793          	li	a5,32
 80076e6:	02f10ca3          	sb	a5,57(sp)
 80076ea:	03000793          	li	a5,48
 80076ee:	da02                	sw	zero,52(sp)
 80076f0:	02f10d23          	sb	a5,58(sp)
 80076f4:	ce36                	sw	a3,28(sp)
 80076f6:	02500b93          	li	s7,37
 80076fa:	ffff9a97          	auipc	s5,0xffff9
 80076fe:	f7ea8a93          	addi	s5,s5,-130 # 8000678 <__sf_fake_stdout+0x20>
 8007702:	4c05                	li	s8,1
 8007704:	4b29                	li	s6,10
 8007706:	8426                	mv	s0,s1
 8007708:	00044783          	lbu	a5,0(s0)
 800770c:	c399                	beqz	a5,8007712 <_svfiprintf_r+0xa0>
 800770e:	0b779163          	bne	a5,s7,80077b0 <_svfiprintf_r+0x13e>
 8007712:	40940cb3          	sub	s9,s0,s1
 8007716:	020c8063          	beqz	s9,8007736 <_svfiprintf_r+0xc4>
 800771a:	86e6                	mv	a3,s9
 800771c:	8626                	mv	a2,s1
 800771e:	85ca                	mv	a1,s2
 8007720:	854e                	mv	a0,s3
 8007722:	00000097          	auipc	ra,0x0
 8007726:	e4e080e7          	jalr	-434(ra) # 8007570 <__ssputs_r>
 800772a:	57fd                	li	a5,-1
 800772c:	1af50a63          	beq	a0,a5,80078e0 <_svfiprintf_r+0x26e>
 8007730:	56d2                	lw	a3,52(sp)
 8007732:	96e6                	add	a3,a3,s9
 8007734:	da36                	sw	a3,52(sp)
 8007736:	00044783          	lbu	a5,0(s0)
 800773a:	1a078363          	beqz	a5,80078e0 <_svfiprintf_r+0x26e>
 800773e:	57fd                	li	a5,-1
 8007740:	00140493          	addi	s1,s0,1
 8007744:	d002                	sw	zero,32(sp)
 8007746:	d602                	sw	zero,44(sp)
 8007748:	d23e                	sw	a5,36(sp)
 800774a:	d402                	sw	zero,40(sp)
 800774c:	060101a3          	sb	zero,99(sp)
 8007750:	dc82                	sw	zero,120(sp)
 8007752:	0004c583          	lbu	a1,0(s1)
 8007756:	4615                	li	a2,5
 8007758:	8556                	mv	a0,s5
 800775a:	00000097          	auipc	ra,0x0
 800775e:	5a2080e7          	jalr	1442(ra) # 8007cfc <memchr>
 8007762:	00148413          	addi	s0,s1,1
 8007766:	5782                	lw	a5,32(sp)
 8007768:	e531                	bnez	a0,80077b4 <_svfiprintf_r+0x142>
 800776a:	0107f713          	andi	a4,a5,16
 800776e:	c709                	beqz	a4,8007778 <_svfiprintf_r+0x106>
 8007770:	02000713          	li	a4,32
 8007774:	06e101a3          	sb	a4,99(sp)
 8007778:	0087f713          	andi	a4,a5,8
 800777c:	c709                	beqz	a4,8007786 <_svfiprintf_r+0x114>
 800777e:	02b00713          	li	a4,43
 8007782:	06e101a3          	sb	a4,99(sp)
 8007786:	0004c683          	lbu	a3,0(s1)
 800778a:	02a00713          	li	a4,42
 800778e:	02e68b63          	beq	a3,a4,80077c4 <_svfiprintf_r+0x152>
 8007792:	57b2                	lw	a5,44(sp)
 8007794:	8426                	mv	s0,s1
 8007796:	4681                	li	a3,0
 8007798:	4625                	li	a2,9
 800779a:	00044703          	lbu	a4,0(s0)
 800779e:	00140593          	addi	a1,s0,1
 80077a2:	fd070713          	addi	a4,a4,-48
 80077a6:	06e67463          	bgeu	a2,a4,800780e <_svfiprintf_r+0x19c>
 80077aa:	c68d                	beqz	a3,80077d4 <_svfiprintf_r+0x162>
 80077ac:	d63e                	sw	a5,44(sp)
 80077ae:	a01d                	j	80077d4 <_svfiprintf_r+0x162>
 80077b0:	0405                	addi	s0,s0,1
 80077b2:	bf99                	j	8007708 <_svfiprintf_r+0x96>
 80077b4:	41550533          	sub	a0,a0,s5
 80077b8:	00ac1533          	sll	a0,s8,a0
 80077bc:	8fc9                	or	a5,a5,a0
 80077be:	d03e                	sw	a5,32(sp)
 80077c0:	84a2                	mv	s1,s0
 80077c2:	bf41                	j	8007752 <_svfiprintf_r+0xe0>
 80077c4:	4772                	lw	a4,28(sp)
 80077c6:	00470693          	addi	a3,a4,4
 80077ca:	4318                	lw	a4,0(a4)
 80077cc:	ce36                	sw	a3,28(sp)
 80077ce:	02074963          	bltz	a4,8007800 <_svfiprintf_r+0x18e>
 80077d2:	d63a                	sw	a4,44(sp)
 80077d4:	00044703          	lbu	a4,0(s0)
 80077d8:	02e00793          	li	a5,46
 80077dc:	04f71f63          	bne	a4,a5,800783a <_svfiprintf_r+0x1c8>
 80077e0:	00144703          	lbu	a4,1(s0)
 80077e4:	02a00793          	li	a5,42
 80077e8:	02f71b63          	bne	a4,a5,800781e <_svfiprintf_r+0x1ac>
 80077ec:	47f2                	lw	a5,28(sp)
 80077ee:	0409                	addi	s0,s0,2
 80077f0:	00478713          	addi	a4,a5,4
 80077f4:	439c                	lw	a5,0(a5)
 80077f6:	ce3a                	sw	a4,28(sp)
 80077f8:	0207c163          	bltz	a5,800781a <_svfiprintf_r+0x1a8>
 80077fc:	d23e                	sw	a5,36(sp)
 80077fe:	a835                	j	800783a <_svfiprintf_r+0x1c8>
 8007800:	40e00733          	neg	a4,a4
 8007804:	0027e793          	ori	a5,a5,2
 8007808:	d63a                	sw	a4,44(sp)
 800780a:	d03e                	sw	a5,32(sp)
 800780c:	b7e1                	j	80077d4 <_svfiprintf_r+0x162>
 800780e:	036787b3          	mul	a5,a5,s6
 8007812:	4685                	li	a3,1
 8007814:	842e                	mv	s0,a1
 8007816:	97ba                	add	a5,a5,a4
 8007818:	b749                	j	800779a <_svfiprintf_r+0x128>
 800781a:	57fd                	li	a5,-1
 800781c:	b7c5                	j	80077fc <_svfiprintf_r+0x18a>
 800781e:	0405                	addi	s0,s0,1
 8007820:	d202                	sw	zero,36(sp)
 8007822:	4681                	li	a3,0
 8007824:	4781                	li	a5,0
 8007826:	4625                	li	a2,9
 8007828:	00044703          	lbu	a4,0(s0)
 800782c:	00140593          	addi	a1,s0,1
 8007830:	fd070713          	addi	a4,a4,-48
 8007834:	06e67c63          	bgeu	a2,a4,80078ac <_svfiprintf_r+0x23a>
 8007838:	f2f1                	bnez	a3,80077fc <_svfiprintf_r+0x18a>
 800783a:	00044583          	lbu	a1,0(s0)
 800783e:	460d                	li	a2,3
 8007840:	ffff9517          	auipc	a0,0xffff9
 8007844:	e4050513          	addi	a0,a0,-448 # 8000680 <__sf_fake_stdout+0x28>
 8007848:	00000097          	auipc	ra,0x0
 800784c:	4b4080e7          	jalr	1204(ra) # 8007cfc <memchr>
 8007850:	cd11                	beqz	a0,800786c <_svfiprintf_r+0x1fa>
 8007852:	ffff9797          	auipc	a5,0xffff9
 8007856:	e2e78793          	addi	a5,a5,-466 # 8000680 <__sf_fake_stdout+0x28>
 800785a:	8d1d                	sub	a0,a0,a5
 800785c:	04000793          	li	a5,64
 8007860:	00a797b3          	sll	a5,a5,a0
 8007864:	5502                	lw	a0,32(sp)
 8007866:	0405                	addi	s0,s0,1
 8007868:	8d5d                	or	a0,a0,a5
 800786a:	d02a                	sw	a0,32(sp)
 800786c:	00044583          	lbu	a1,0(s0)
 8007870:	4619                	li	a2,6
 8007872:	ffff9517          	auipc	a0,0xffff9
 8007876:	e1250513          	addi	a0,a0,-494 # 8000684 <__sf_fake_stdout+0x2c>
 800787a:	00140493          	addi	s1,s0,1
 800787e:	02b10c23          	sb	a1,56(sp)
 8007882:	00000097          	auipc	ra,0x0
 8007886:	47a080e7          	jalr	1146(ra) # 8007cfc <memchr>
 800788a:	c525                	beqz	a0,80078f2 <_svfiprintf_r+0x280>
 800788c:	f7ff8797          	auipc	a5,0xf7ff8
 8007890:	77478793          	addi	a5,a5,1908 # 0 <__dbg_stack_size>
 8007894:	e795                	bnez	a5,80078c0 <_svfiprintf_r+0x24e>
 8007896:	5702                	lw	a4,32(sp)
 8007898:	47f2                	lw	a5,28(sp)
 800789a:	10077713          	andi	a4,a4,256
 800789e:	cf09                	beqz	a4,80078b8 <_svfiprintf_r+0x246>
 80078a0:	0791                	addi	a5,a5,4
 80078a2:	ce3e                	sw	a5,28(sp)
 80078a4:	57d2                	lw	a5,52(sp)
 80078a6:	97d2                	add	a5,a5,s4
 80078a8:	da3e                	sw	a5,52(sp)
 80078aa:	bdb1                	j	8007706 <_svfiprintf_r+0x94>
 80078ac:	036787b3          	mul	a5,a5,s6
 80078b0:	4685                	li	a3,1
 80078b2:	842e                	mv	s0,a1
 80078b4:	97ba                	add	a5,a5,a4
 80078b6:	bf8d                	j	8007828 <_svfiprintf_r+0x1b6>
 80078b8:	079d                	addi	a5,a5,7
 80078ba:	9be1                	andi	a5,a5,-8
 80078bc:	07a1                	addi	a5,a5,8
 80078be:	b7d5                	j	80078a2 <_svfiprintf_r+0x230>
 80078c0:	0878                	addi	a4,sp,28
 80078c2:	00000697          	auipc	a3,0x0
 80078c6:	cae68693          	addi	a3,a3,-850 # 8007570 <__ssputs_r>
 80078ca:	864a                	mv	a2,s2
 80078cc:	100c                	addi	a1,sp,32
 80078ce:	854e                	mv	a0,s3
 80078d0:	00000097          	auipc	ra,0x0
 80078d4:	000000e7          	jalr	zero # 0 <__dbg_stack_size>
 80078d8:	57fd                	li	a5,-1
 80078da:	8a2a                	mv	s4,a0
 80078dc:	fcf514e3          	bne	a0,a5,80078a4 <_svfiprintf_r+0x232>
 80078e0:	00c95783          	lhu	a5,12(s2)
 80078e4:	557d                	li	a0,-1
 80078e6:	0407f793          	andi	a5,a5,64
 80078ea:	dc079be3          	bnez	a5,80076c0 <_svfiprintf_r+0x4e>
 80078ee:	5552                	lw	a0,52(sp)
 80078f0:	bbc1                	j	80076c0 <_svfiprintf_r+0x4e>
 80078f2:	0878                	addi	a4,sp,28
 80078f4:	00000697          	auipc	a3,0x0
 80078f8:	c7c68693          	addi	a3,a3,-900 # 8007570 <__ssputs_r>
 80078fc:	864a                	mv	a2,s2
 80078fe:	100c                	addi	a1,sp,32
 8007900:	854e                	mv	a0,s3
 8007902:	00000097          	auipc	ra,0x0
 8007906:	116080e7          	jalr	278(ra) # 8007a18 <_printf_i>
 800790a:	b7f9                	j	80078d8 <_svfiprintf_r+0x266>

0800790c <_printf_common>:
 800790c:	7179                	addi	sp,sp,-48
 800790e:	ca56                	sw	s5,20(sp)
 8007910:	499c                	lw	a5,16(a1)
 8007912:	8aba                	mv	s5,a4
 8007914:	4598                	lw	a4,8(a1)
 8007916:	d422                	sw	s0,40(sp)
 8007918:	d226                	sw	s1,36(sp)
 800791a:	ce4e                	sw	s3,28(sp)
 800791c:	cc52                	sw	s4,24(sp)
 800791e:	d606                	sw	ra,44(sp)
 8007920:	d04a                	sw	s2,32(sp)
 8007922:	c85a                	sw	s6,16(sp)
 8007924:	c65e                	sw	s7,12(sp)
 8007926:	89aa                	mv	s3,a0
 8007928:	842e                	mv	s0,a1
 800792a:	84b2                	mv	s1,a2
 800792c:	8a36                	mv	s4,a3
 800792e:	00e7d363          	bge	a5,a4,8007934 <_printf_common+0x28>
 8007932:	87ba                	mv	a5,a4
 8007934:	c09c                	sw	a5,0(s1)
 8007936:	04344703          	lbu	a4,67(s0)
 800793a:	c319                	beqz	a4,8007940 <_printf_common+0x34>
 800793c:	0785                	addi	a5,a5,1
 800793e:	c09c                	sw	a5,0(s1)
 8007940:	401c                	lw	a5,0(s0)
 8007942:	0207f793          	andi	a5,a5,32
 8007946:	c781                	beqz	a5,800794e <_printf_common+0x42>
 8007948:	409c                	lw	a5,0(s1)
 800794a:	0789                	addi	a5,a5,2
 800794c:	c09c                	sw	a5,0(s1)
 800794e:	00042903          	lw	s2,0(s0)
 8007952:	00697913          	andi	s2,s2,6
 8007956:	00091a63          	bnez	s2,800796a <_printf_common+0x5e>
 800795a:	01940b13          	addi	s6,s0,25
 800795e:	5bfd                	li	s7,-1
 8007960:	445c                	lw	a5,12(s0)
 8007962:	4098                	lw	a4,0(s1)
 8007964:	8f99                	sub	a5,a5,a4
 8007966:	04f94c63          	blt	s2,a5,80079be <_printf_common+0xb2>
 800796a:	401c                	lw	a5,0(s0)
 800796c:	04344683          	lbu	a3,67(s0)
 8007970:	0207f793          	andi	a5,a5,32
 8007974:	00d036b3          	snez	a3,a3
 8007978:	eba5                	bnez	a5,80079e8 <_printf_common+0xdc>
 800797a:	04340613          	addi	a2,s0,67
 800797e:	85d2                	mv	a1,s4
 8007980:	854e                	mv	a0,s3
 8007982:	9a82                	jalr	s5
 8007984:	57fd                	li	a5,-1
 8007986:	04f50363          	beq	a0,a5,80079cc <_printf_common+0xc0>
 800798a:	401c                	lw	a5,0(s0)
 800798c:	4611                	li	a2,4
 800798e:	4098                	lw	a4,0(s1)
 8007990:	8b99                	andi	a5,a5,6
 8007992:	4454                	lw	a3,12(s0)
 8007994:	4481                	li	s1,0
 8007996:	00c79763          	bne	a5,a2,80079a4 <_printf_common+0x98>
 800799a:	40e684b3          	sub	s1,a3,a4
 800799e:	0004d363          	bgez	s1,80079a4 <_printf_common+0x98>
 80079a2:	4481                	li	s1,0
 80079a4:	441c                	lw	a5,8(s0)
 80079a6:	4818                	lw	a4,16(s0)
 80079a8:	00f75463          	bge	a4,a5,80079b0 <_printf_common+0xa4>
 80079ac:	8f99                	sub	a5,a5,a4
 80079ae:	94be                	add	s1,s1,a5
 80079b0:	4901                	li	s2,0
 80079b2:	0469                	addi	s0,s0,26
 80079b4:	5b7d                	li	s6,-1
 80079b6:	05249863          	bne	s1,s2,8007a06 <_printf_common+0xfa>
 80079ba:	4501                	li	a0,0
 80079bc:	a809                	j	80079ce <_printf_common+0xc2>
 80079be:	4685                	li	a3,1
 80079c0:	865a                	mv	a2,s6
 80079c2:	85d2                	mv	a1,s4
 80079c4:	854e                	mv	a0,s3
 80079c6:	9a82                	jalr	s5
 80079c8:	01751e63          	bne	a0,s7,80079e4 <_printf_common+0xd8>
 80079cc:	557d                	li	a0,-1
 80079ce:	50b2                	lw	ra,44(sp)
 80079d0:	5422                	lw	s0,40(sp)
 80079d2:	5492                	lw	s1,36(sp)
 80079d4:	5902                	lw	s2,32(sp)
 80079d6:	49f2                	lw	s3,28(sp)
 80079d8:	4a62                	lw	s4,24(sp)
 80079da:	4ad2                	lw	s5,20(sp)
 80079dc:	4b42                	lw	s6,16(sp)
 80079de:	4bb2                	lw	s7,12(sp)
 80079e0:	6145                	addi	sp,sp,48
 80079e2:	8082                	ret
 80079e4:	0905                	addi	s2,s2,1
 80079e6:	bfad                	j	8007960 <_printf_common+0x54>
 80079e8:	00d40733          	add	a4,s0,a3
 80079ec:	03000613          	li	a2,48
 80079f0:	04c701a3          	sb	a2,67(a4)
 80079f4:	04544703          	lbu	a4,69(s0)
 80079f8:	00168793          	addi	a5,a3,1
 80079fc:	97a2                	add	a5,a5,s0
 80079fe:	0689                	addi	a3,a3,2
 8007a00:	04e781a3          	sb	a4,67(a5)
 8007a04:	bf9d                	j	800797a <_printf_common+0x6e>
 8007a06:	4685                	li	a3,1
 8007a08:	8622                	mv	a2,s0
 8007a0a:	85d2                	mv	a1,s4
 8007a0c:	854e                	mv	a0,s3
 8007a0e:	9a82                	jalr	s5
 8007a10:	fb650ee3          	beq	a0,s6,80079cc <_printf_common+0xc0>
 8007a14:	0905                	addi	s2,s2,1
 8007a16:	b745                	j	80079b6 <_printf_common+0xaa>

08007a18 <_printf_i>:
 8007a18:	7179                	addi	sp,sp,-48
 8007a1a:	d422                	sw	s0,40(sp)
 8007a1c:	d226                	sw	s1,36(sp)
 8007a1e:	d04a                	sw	s2,32(sp)
 8007a20:	ce4e                	sw	s3,28(sp)
 8007a22:	d606                	sw	ra,44(sp)
 8007a24:	cc52                	sw	s4,24(sp)
 8007a26:	ca56                	sw	s5,20(sp)
 8007a28:	c85a                	sw	s6,16(sp)
 8007a2a:	89b6                	mv	s3,a3
 8007a2c:	0185c683          	lbu	a3,24(a1)
 8007a30:	06e00793          	li	a5,110
 8007a34:	8932                	mv	s2,a2
 8007a36:	84aa                	mv	s1,a0
 8007a38:	842e                	mv	s0,a1
 8007a3a:	04358613          	addi	a2,a1,67
 8007a3e:	1ef68363          	beq	a3,a5,8007c24 <_printf_i+0x20c>
 8007a42:	06d7e263          	bltu	a5,a3,8007aa6 <_printf_i+0x8e>
 8007a46:	06300793          	li	a5,99
 8007a4a:	0af68263          	beq	a3,a5,8007aee <_printf_i+0xd6>
 8007a4e:	00d7ed63          	bltu	a5,a3,8007a68 <_printf_i+0x50>
 8007a52:	1e068d63          	beqz	a3,8007c4c <_printf_i+0x234>
 8007a56:	05800793          	li	a5,88
 8007a5a:	16f68963          	beq	a3,a5,8007bcc <_printf_i+0x1b4>
 8007a5e:	04240a93          	addi	s5,s0,66
 8007a62:	04d40123          	sb	a3,66(s0)
 8007a66:	a869                	j	8007b00 <_printf_i+0xe8>
 8007a68:	06400793          	li	a5,100
 8007a6c:	00f68663          	beq	a3,a5,8007a78 <_printf_i+0x60>
 8007a70:	06900793          	li	a5,105
 8007a74:	fef695e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007a78:	401c                	lw	a5,0(s0)
 8007a7a:	4308                	lw	a0,0(a4)
 8007a7c:	0807f693          	andi	a3,a5,128
 8007a80:	00450593          	addi	a1,a0,4
 8007a84:	c2c1                	beqz	a3,8007b04 <_printf_i+0xec>
 8007a86:	411c                	lw	a5,0(a0)
 8007a88:	c30c                	sw	a1,0(a4)
 8007a8a:	0007d863          	bgez	a5,8007a9a <_printf_i+0x82>
 8007a8e:	02d00713          	li	a4,45
 8007a92:	40f007b3          	neg	a5,a5
 8007a96:	04e401a3          	sb	a4,67(s0)
 8007a9a:	ffff9697          	auipc	a3,0xffff9
 8007a9e:	bf268693          	addi	a3,a3,-1038 # 800068c <__sf_fake_stdout+0x34>
 8007aa2:	4729                	li	a4,10
 8007aa4:	a065                	j	8007b4c <_printf_i+0x134>
 8007aa6:	07300793          	li	a5,115
 8007aaa:	1af68563          	beq	a3,a5,8007c54 <_printf_i+0x23c>
 8007aae:	00d7ef63          	bltu	a5,a3,8007acc <_printf_i+0xb4>
 8007ab2:	06f00793          	li	a5,111
 8007ab6:	04f68f63          	beq	a3,a5,8007b14 <_printf_i+0xfc>
 8007aba:	07000793          	li	a5,112
 8007abe:	faf690e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007ac2:	419c                	lw	a5,0(a1)
 8007ac4:	0207e793          	ori	a5,a5,32
 8007ac8:	c19c                	sw	a5,0(a1)
 8007aca:	a809                	j	8007adc <_printf_i+0xc4>
 8007acc:	07500793          	li	a5,117
 8007ad0:	04f68263          	beq	a3,a5,8007b14 <_printf_i+0xfc>
 8007ad4:	07800793          	li	a5,120
 8007ad8:	f8f693e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007adc:	07800793          	li	a5,120
 8007ae0:	04f402a3          	sb	a5,69(s0)
 8007ae4:	ffff9697          	auipc	a3,0xffff9
 8007ae8:	bbc68693          	addi	a3,a3,-1092 # 80006a0 <__sf_fake_stdout+0x48>
 8007aec:	a0f5                	j	8007bd8 <_printf_i+0x1c0>
 8007aee:	431c                	lw	a5,0(a4)
 8007af0:	04258a93          	addi	s5,a1,66
 8007af4:	00478693          	addi	a3,a5,4
 8007af8:	439c                	lw	a5,0(a5)
 8007afa:	c314                	sw	a3,0(a4)
 8007afc:	04f58123          	sb	a5,66(a1)
 8007b00:	4785                	li	a5,1
 8007b02:	aa9d                	j	8007c78 <_printf_i+0x260>
 8007b04:	0407f693          	andi	a3,a5,64
 8007b08:	411c                	lw	a5,0(a0)
 8007b0a:	c30c                	sw	a1,0(a4)
 8007b0c:	debd                	beqz	a3,8007a8a <_printf_i+0x72>
 8007b0e:	07c2                	slli	a5,a5,0x10
 8007b10:	87c1                	srai	a5,a5,0x10
 8007b12:	bfa5                	j	8007a8a <_printf_i+0x72>
 8007b14:	400c                	lw	a1,0(s0)
 8007b16:	431c                	lw	a5,0(a4)
 8007b18:	0805f813          	andi	a6,a1,128
 8007b1c:	00478513          	addi	a0,a5,4
 8007b20:	00080563          	beqz	a6,8007b2a <_printf_i+0x112>
 8007b24:	c308                	sw	a0,0(a4)
 8007b26:	439c                	lw	a5,0(a5)
 8007b28:	a039                	j	8007b36 <_printf_i+0x11e>
 8007b2a:	0405f593          	andi	a1,a1,64
 8007b2e:	c308                	sw	a0,0(a4)
 8007b30:	d9fd                	beqz	a1,8007b26 <_printf_i+0x10e>
 8007b32:	0007d783          	lhu	a5,0(a5)
 8007b36:	06f00713          	li	a4,111
 8007b3a:	0ce68d63          	beq	a3,a4,8007c14 <_printf_i+0x1fc>
 8007b3e:	ffff9697          	auipc	a3,0xffff9
 8007b42:	b4e68693          	addi	a3,a3,-1202 # 800068c <__sf_fake_stdout+0x34>
 8007b46:	4729                	li	a4,10
 8007b48:	040401a3          	sb	zero,67(s0)
 8007b4c:	404c                	lw	a1,4(s0)
 8007b4e:	c40c                	sw	a1,8(s0)
 8007b50:	0005c563          	bltz	a1,8007b5a <_printf_i+0x142>
 8007b54:	4008                	lw	a0,0(s0)
 8007b56:	996d                	andi	a0,a0,-5
 8007b58:	c008                	sw	a0,0(s0)
 8007b5a:	e399                	bnez	a5,8007b60 <_printf_i+0x148>
 8007b5c:	8ab2                	mv	s5,a2
 8007b5e:	cd91                	beqz	a1,8007b7a <_printf_i+0x162>
 8007b60:	8ab2                	mv	s5,a2
 8007b62:	02e7f5b3          	remu	a1,a5,a4
 8007b66:	1afd                	addi	s5,s5,-1
 8007b68:	95b6                	add	a1,a1,a3
 8007b6a:	0005c583          	lbu	a1,0(a1)
 8007b6e:	00ba8023          	sb	a1,0(s5)
 8007b72:	02e7d5b3          	divu	a1,a5,a4
 8007b76:	0ae7f563          	bgeu	a5,a4,8007c20 <_printf_i+0x208>
 8007b7a:	47a1                	li	a5,8
 8007b7c:	00f71e63          	bne	a4,a5,8007b98 <_printf_i+0x180>
 8007b80:	401c                	lw	a5,0(s0)
 8007b82:	8b85                	andi	a5,a5,1
 8007b84:	cb91                	beqz	a5,8007b98 <_printf_i+0x180>
 8007b86:	4058                	lw	a4,4(s0)
 8007b88:	481c                	lw	a5,16(s0)
 8007b8a:	00e7c763          	blt	a5,a4,8007b98 <_printf_i+0x180>
 8007b8e:	03000793          	li	a5,48
 8007b92:	fefa8fa3          	sb	a5,-1(s5)
 8007b96:	1afd                	addi	s5,s5,-1
 8007b98:	41560633          	sub	a2,a2,s5
 8007b9c:	c810                	sw	a2,16(s0)
 8007b9e:	874e                	mv	a4,s3
 8007ba0:	86ca                	mv	a3,s2
 8007ba2:	0070                	addi	a2,sp,12
 8007ba4:	85a2                	mv	a1,s0
 8007ba6:	8526                	mv	a0,s1
 8007ba8:	00000097          	auipc	ra,0x0
 8007bac:	d64080e7          	jalr	-668(ra) # 800790c <_printf_common>
 8007bb0:	5a7d                	li	s4,-1
 8007bb2:	0d451763          	bne	a0,s4,8007c80 <_printf_i+0x268>
 8007bb6:	557d                	li	a0,-1
 8007bb8:	50b2                	lw	ra,44(sp)
 8007bba:	5422                	lw	s0,40(sp)
 8007bbc:	5492                	lw	s1,36(sp)
 8007bbe:	5902                	lw	s2,32(sp)
 8007bc0:	49f2                	lw	s3,28(sp)
 8007bc2:	4a62                	lw	s4,24(sp)
 8007bc4:	4ad2                	lw	s5,20(sp)
 8007bc6:	4b42                	lw	s6,16(sp)
 8007bc8:	6145                	addi	sp,sp,48
 8007bca:	8082                	ret
 8007bcc:	04d582a3          	sb	a3,69(a1)
 8007bd0:	ffff9697          	auipc	a3,0xffff9
 8007bd4:	abc68693          	addi	a3,a3,-1348 # 800068c <__sf_fake_stdout+0x34>
 8007bd8:	400c                	lw	a1,0(s0)
 8007bda:	4308                	lw	a0,0(a4)
 8007bdc:	0805f813          	andi	a6,a1,128
 8007be0:	411c                	lw	a5,0(a0)
 8007be2:	0511                	addi	a0,a0,4
 8007be4:	02080063          	beqz	a6,8007c04 <_printf_i+0x1ec>
 8007be8:	c308                	sw	a0,0(a4)
 8007bea:	0015f713          	andi	a4,a1,1
 8007bee:	c701                	beqz	a4,8007bf6 <_printf_i+0x1de>
 8007bf0:	0205e593          	ori	a1,a1,32
 8007bf4:	c00c                	sw	a1,0(s0)
 8007bf6:	4741                	li	a4,16
 8007bf8:	fba1                	bnez	a5,8007b48 <_printf_i+0x130>
 8007bfa:	400c                	lw	a1,0(s0)
 8007bfc:	fdf5f593          	andi	a1,a1,-33
 8007c00:	c00c                	sw	a1,0(s0)
 8007c02:	b799                	j	8007b48 <_printf_i+0x130>
 8007c04:	0405f813          	andi	a6,a1,64
 8007c08:	c308                	sw	a0,0(a4)
 8007c0a:	fe0800e3          	beqz	a6,8007bea <_printf_i+0x1d2>
 8007c0e:	07c2                	slli	a5,a5,0x10
 8007c10:	83c1                	srli	a5,a5,0x10
 8007c12:	bfe1                	j	8007bea <_printf_i+0x1d2>
 8007c14:	ffff9697          	auipc	a3,0xffff9
 8007c18:	a7868693          	addi	a3,a3,-1416 # 800068c <__sf_fake_stdout+0x34>
 8007c1c:	4721                	li	a4,8
 8007c1e:	b72d                	j	8007b48 <_printf_i+0x130>
 8007c20:	87ae                	mv	a5,a1
 8007c22:	b781                	j	8007b62 <_printf_i+0x14a>
 8007c24:	4194                	lw	a3,0(a1)
 8007c26:	431c                	lw	a5,0(a4)
 8007c28:	49cc                	lw	a1,20(a1)
 8007c2a:	0806f813          	andi	a6,a3,128
 8007c2e:	00478513          	addi	a0,a5,4
 8007c32:	00080663          	beqz	a6,8007c3e <_printf_i+0x226>
 8007c36:	c308                	sw	a0,0(a4)
 8007c38:	439c                	lw	a5,0(a5)
 8007c3a:	c38c                	sw	a1,0(a5)
 8007c3c:	a801                	j	8007c4c <_printf_i+0x234>
 8007c3e:	c308                	sw	a0,0(a4)
 8007c40:	0406f693          	andi	a3,a3,64
 8007c44:	439c                	lw	a5,0(a5)
 8007c46:	daf5                	beqz	a3,8007c3a <_printf_i+0x222>
 8007c48:	00b79023          	sh	a1,0(a5)
 8007c4c:	00042823          	sw	zero,16(s0)
 8007c50:	8ab2                	mv	s5,a2
 8007c52:	b7b1                	j	8007b9e <_printf_i+0x186>
 8007c54:	431c                	lw	a5,0(a4)
 8007c56:	41d0                	lw	a2,4(a1)
 8007c58:	4581                	li	a1,0
 8007c5a:	00478693          	addi	a3,a5,4
 8007c5e:	c314                	sw	a3,0(a4)
 8007c60:	0007aa83          	lw	s5,0(a5)
 8007c64:	8556                	mv	a0,s5
 8007c66:	00000097          	auipc	ra,0x0
 8007c6a:	096080e7          	jalr	150(ra) # 8007cfc <memchr>
 8007c6e:	c501                	beqz	a0,8007c76 <_printf_i+0x25e>
 8007c70:	41550533          	sub	a0,a0,s5
 8007c74:	c048                	sw	a0,4(s0)
 8007c76:	405c                	lw	a5,4(s0)
 8007c78:	c81c                	sw	a5,16(s0)
 8007c7a:	040401a3          	sb	zero,67(s0)
 8007c7e:	b705                	j	8007b9e <_printf_i+0x186>
 8007c80:	4814                	lw	a3,16(s0)
 8007c82:	8656                	mv	a2,s5
 8007c84:	85ca                	mv	a1,s2
 8007c86:	8526                	mv	a0,s1
 8007c88:	9982                	jalr	s3
 8007c8a:	f34506e3          	beq	a0,s4,8007bb6 <_printf_i+0x19e>
 8007c8e:	401c                	lw	a5,0(s0)
 8007c90:	8b89                	andi	a5,a5,2
 8007c92:	e78d                	bnez	a5,8007cbc <_printf_i+0x2a4>
 8007c94:	47b2                	lw	a5,12(sp)
 8007c96:	4448                	lw	a0,12(s0)
 8007c98:	f2f550e3          	bge	a0,a5,8007bb8 <_printf_i+0x1a0>
 8007c9c:	853e                	mv	a0,a5
 8007c9e:	bf29                	j	8007bb8 <_printf_i+0x1a0>
 8007ca0:	4685                	li	a3,1
 8007ca2:	8656                	mv	a2,s5
 8007ca4:	85ca                	mv	a1,s2
 8007ca6:	8526                	mv	a0,s1
 8007ca8:	9982                	jalr	s3
 8007caa:	f16506e3          	beq	a0,s6,8007bb6 <_printf_i+0x19e>
 8007cae:	0a05                	addi	s4,s4,1
 8007cb0:	445c                	lw	a5,12(s0)
 8007cb2:	4732                	lw	a4,12(sp)
 8007cb4:	8f99                	sub	a5,a5,a4
 8007cb6:	fefa45e3          	blt	s4,a5,8007ca0 <_printf_i+0x288>
 8007cba:	bfe9                	j	8007c94 <_printf_i+0x27c>
 8007cbc:	4a01                	li	s4,0
 8007cbe:	01940a93          	addi	s5,s0,25
 8007cc2:	5b7d                	li	s6,-1
 8007cc4:	b7f5                	j	8007cb0 <_printf_i+0x298>

08007cc6 <_sbrk_r>:
 8007cc6:	1141                	addi	sp,sp,-16
 8007cc8:	c422                	sw	s0,8(sp)
 8007cca:	842a                	mv	s0,a0
 8007ccc:	852e                	mv	a0,a1
 8007cce:	17ffe797          	auipc	a5,0x17ffe
 8007cd2:	9207ab23          	sw	zero,-1738(a5) # 20005604 <errno>
 8007cd6:	c606                	sw	ra,12(sp)
 8007cd8:	ffffa097          	auipc	ra,0xffffa
 8007cdc:	e8e080e7          	jalr	-370(ra) # 8001b66 <_sbrk>
 8007ce0:	57fd                	li	a5,-1
 8007ce2:	00f51963          	bne	a0,a5,8007cf4 <_sbrk_r+0x2e>
 8007ce6:	17ffe797          	auipc	a5,0x17ffe
 8007cea:	91e78793          	addi	a5,a5,-1762 # 20005604 <errno>
 8007cee:	439c                	lw	a5,0(a5)
 8007cf0:	c391                	beqz	a5,8007cf4 <_sbrk_r+0x2e>
 8007cf2:	c01c                	sw	a5,0(s0)
 8007cf4:	40b2                	lw	ra,12(sp)
 8007cf6:	4422                	lw	s0,8(sp)
 8007cf8:	0141                	addi	sp,sp,16
 8007cfa:	8082                	ret

08007cfc <memchr>:
 8007cfc:	0ff5f593          	andi	a1,a1,255
 8007d00:	962a                	add	a2,a2,a0
 8007d02:	00c51463          	bne	a0,a2,8007d0a <memchr+0xe>
 8007d06:	4501                	li	a0,0
 8007d08:	8082                	ret
 8007d0a:	00054783          	lbu	a5,0(a0)
 8007d0e:	feb78de3          	beq	a5,a1,8007d08 <memchr+0xc>
 8007d12:	0505                	addi	a0,a0,1
 8007d14:	b7fd                	j	8007d02 <memchr+0x6>

08007d16 <memmove>:
 8007d16:	c215                	beqz	a2,8007d3a <memmove+0x24>
 8007d18:	832a                	mv	t1,a0
 8007d1a:	4685                	li	a3,1
 8007d1c:	00b56763          	bltu	a0,a1,8007d2a <memmove+0x14>
 8007d20:	56fd                	li	a3,-1
 8007d22:	fff60713          	addi	a4,a2,-1
 8007d26:	933a                	add	t1,t1,a4
 8007d28:	95ba                	add	a1,a1,a4
 8007d2a:	00058383          	lb	t2,0(a1)
 8007d2e:	00730023          	sb	t2,0(t1)
 8007d32:	167d                	addi	a2,a2,-1
 8007d34:	9336                	add	t1,t1,a3
 8007d36:	95b6                	add	a1,a1,a3
 8007d38:	fa6d                	bnez	a2,8007d2a <memmove+0x14>
 8007d3a:	8082                	ret

08007d3c <__malloc_lock>:
 8007d3c:	8082                	ret

08007d3e <__malloc_unlock>:
 8007d3e:	8082                	ret

08007d40 <_realloc_r>:
 8007d40:	e591                	bnez	a1,8007d4c <_realloc_r+0xc>
 8007d42:	85b2                	mv	a1,a2
 8007d44:	fffff317          	auipc	t1,0xfffff
 8007d48:	72a30067          	jr	1834(t1) # 800746e <_malloc_r>
 8007d4c:	1101                	addi	sp,sp,-32
 8007d4e:	cc22                	sw	s0,24(sp)
 8007d50:	ce06                	sw	ra,28(sp)
 8007d52:	ca26                	sw	s1,20(sp)
 8007d54:	c84a                	sw	s2,16(sp)
 8007d56:	c64e                	sw	s3,12(sp)
 8007d58:	8432                	mv	s0,a2
 8007d5a:	ee11                	bnez	a2,8007d76 <_realloc_r+0x36>
 8007d5c:	fffff097          	auipc	ra,0xfffff
 8007d60:	65a080e7          	jalr	1626(ra) # 80073b6 <_free_r>
 8007d64:	4901                	li	s2,0
 8007d66:	40f2                	lw	ra,28(sp)
 8007d68:	4462                	lw	s0,24(sp)
 8007d6a:	854a                	mv	a0,s2
 8007d6c:	44d2                	lw	s1,20(sp)
 8007d6e:	4942                	lw	s2,16(sp)
 8007d70:	49b2                	lw	s3,12(sp)
 8007d72:	6105                	addi	sp,sp,32
 8007d74:	8082                	ret
 8007d76:	84ae                	mv	s1,a1
 8007d78:	89aa                	mv	s3,a0
 8007d7a:	00000097          	auipc	ra,0x0
 8007d7e:	038080e7          	jalr	56(ra) # 8007db2 <_malloc_usable_size_r>
 8007d82:	8926                	mv	s2,s1
 8007d84:	fe8571e3          	bgeu	a0,s0,8007d66 <_realloc_r+0x26>
 8007d88:	85a2                	mv	a1,s0
 8007d8a:	854e                	mv	a0,s3
 8007d8c:	fffff097          	auipc	ra,0xfffff
 8007d90:	6e2080e7          	jalr	1762(ra) # 800746e <_malloc_r>
 8007d94:	892a                	mv	s2,a0
 8007d96:	d961                	beqz	a0,8007d66 <_realloc_r+0x26>
 8007d98:	85a6                	mv	a1,s1
 8007d9a:	8622                	mv	a2,s0
 8007d9c:	fffff097          	auipc	ra,0xfffff
 8007da0:	428080e7          	jalr	1064(ra) # 80071c4 <memcpy>
 8007da4:	85a6                	mv	a1,s1
 8007da6:	854e                	mv	a0,s3
 8007da8:	fffff097          	auipc	ra,0xfffff
 8007dac:	60e080e7          	jalr	1550(ra) # 80073b6 <_free_r>
 8007db0:	bf5d                	j	8007d66 <_realloc_r+0x26>

08007db2 <_malloc_usable_size_r>:
 8007db2:	ffc5a783          	lw	a5,-4(a1)
 8007db6:	ffc78513          	addi	a0,a5,-4
 8007dba:	0007d563          	bgez	a5,8007dc4 <_malloc_usable_size_r+0x12>
 8007dbe:	95aa                	add	a1,a1,a0
 8007dc0:	419c                	lw	a5,0(a1)
 8007dc2:	953e                	add	a0,a0,a5
 8007dc4:	8082                	ret

build/gd32vf103.elf:     file format elf32-littleriscv
build/gd32vf103.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800015c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00007dd8 memsz 0x00007dd8 flags r-x
    LOAD off    0x00009000 vaddr 0x20000000 paddr 0x08007dd8 align 2**12
         filesz 0x00000500 memsz 0x00000500 flags rw-
    LOAD off    0x00009500 vaddr 0x20000500 paddr 0x20000500 align 2**12
         filesz 0x00000000 memsz 0x00005108 flags rw-
    LOAD off    0x0000a000 vaddr 0x20007000 paddr 0x20005608 align 2**12
         filesz 0x00000000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000254  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ilalign      00000000  08000254  08000254  00009500  2**0
                  CONTENTS
  2 .text         00007b46  08000280  08000280  00001280  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sdata2.usbd_language_id_desc 00000004  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sdata2.EP0_MAXLEN 00000004  08007dcc  08007dcc  00008dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .sdata2.USB_SPEED 00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .sdata2._global_impure_ptr 00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000000  08007dd8  08007dd8  00009500  2**0
                  CONTENTS
  8 .dalign       00000000  20000000  20000000  00009500  2**0
                  CONTENTS
  9 .data         00000500  20000000  08007dd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005108  20000500  20000500  00009500  2**3
                  ALLOC
 11 .stack        00001000  20007000  20005608  0000a000  2**0
                  ALLOC
 12 .debug_info   0002ce98  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007212  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000101b7  00000000  00000000  0003d5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001578  00000000  00000000  0004d768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d60  00000000  00000000  0004ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002095e  00000000  00000000  00050a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006dc0  00000000  00000000  0007139e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000028  00000000  00000000  0007815e  2**0
                  CONTENTS, READONLY
 20 .riscv.attributes 0000002b  00000000  00000000  00078186  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003448  00000000  00000000  000781b4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .init	00000000 .init
08000254 l    d  .ilalign	00000000 .ilalign
08000280 l    d  .text	00000000 .text
08007dc8 l    d  .sdata2.usbd_language_id_desc	00000000 .sdata2.usbd_language_id_desc
08007dcc l    d  .sdata2.EP0_MAXLEN	00000000 .sdata2.EP0_MAXLEN
08007dd0 l    d  .sdata2.USB_SPEED	00000000 .sdata2.USB_SPEED
08007dd4 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
08007dd8 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000500 l    d  .bss	00000000 .bss
20007000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/start.o
08000000 l       .init	00000000 vector_base
08000182 l       .init	00000000 _start0800
00000000 l    df *ABS*	00000000 gd32vf103_rcu.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 write_hex.c
00000000 l    df *ABS*	00000000 handlers.c
00000000 l    df *ABS*	00000000 ff.c
08001eca l     F .text	0000001e ld_dword
08001ee8 l     F .text	0000001c st_dword
08001f04 l     F .text	0000001a mem_cmp
08001f1e l     F .text	0000001c clst2sect
08001f3a l     F .text	0000003e get_ldnumber
08001f78 l     F .text	0000004e validate
08001fc6 l     F .text	0000001a mem_cpy.part.0
08001fe0 l     F .text	00000026 ld_clust.isra.1
08002006 l     F .text	00000064 sync_window.part.3
0800206a l     F .text	0000004e move_window
080020b8 l     F .text	00000092 check_fs
0800214a l     F .text	00000342 find_volume
0800248c l     F .text	00000154 put_fat
080025e0 l     F .text	000000f6 get_fat.isra.7
080026d6 l     F .text	00000128 create_chain
080027fe l     F .text	0000014a dir_next
08002948 l     F .text	00000098 dir_sdi.constprop.9
20000508 l     O .bss	00000004 FatFs
2000050c l     O .bss	00000002 Fsid
00000000 l    df *ABS*	00000000 tf_card.c
080033a2 l     F .text	00000062 xchg_spi
08003404 l     F .text	00000022 deselect
08003426 l     F .text	000000e4 wait_ready
0800350a l     F .text	00000042 _select
0800354c l     F .text	000000ec send_cmd
08003638 l     F .text	00000080 rcvr_datablock
080036b8 l     F .text	00000060 xmit_datablock.part.1
2000050e l     O .bss	00000001 CardType
200004f8 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 cdc_acm_core.c
080002e8 l     O .text	00000018 __compound_literal.0
08000300 l     O .text	0000003a __compound_literal.1
0800033c l     O .text	00000030 __compound_literal.2
00000000 l    df *ABS*	00000000 usbd_enum.c
08004bca l     F .text	00000004 _usb_std_reserved
08004bce l     F .text	0000000e _usb_dev_desc_get
08004bdc l     F .text	0000000e _usb_config_desc_get
08004bea l     F .text	00000014 _usb_str_desc_get
08004bfe l     F .text	000000fa _usb_std_getdescriptor
08004cf8 l     F .text	000000a8 _usb_std_setconfiguration
08004da0 l     F .text	000000ba _usb_std_getstatus
08004e5a l     F .text	0000003c _usb_std_getconfiguration
08004e96 l     F .text	0000002c _usb_std_getinterface
08004ec2 l     F .text	0000002a _usb_std_setinterface
08004eec l     F .text	00000064 _usb_std_setaddress
08004f50 l     F .text	00000080 _usb_std_setfeature
08004fd0 l     F .text	00000098 _usb_std_clearfeature
08005068 l     F .text	00000004 _usb_std_setdescriptor
0800506c l     F .text	00000004 _usb_std_synchframe
08000390 l     O .text	00000034 _std_dev_req
20000528 l     O .bss	00000001 config.4766
2000052c l     O .bss	00000002 status.4696
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 gd32vf103_adc.c
00000000 l    df *ABS*	00000000 gd32vf103_dma.c
00000000 l    df *ABS*	00000000 gd32vf103_eclic.c
00000000 l    df *ABS*	00000000 gd32vf103_exti.c
00000000 l    df *ABS*	00000000 gd32vf103_gpio.c
00000000 l    df *ABS*	00000000 gd32vf103_spi.c
00000000 l    df *ABS*	00000000 gd32vf103_timer.c
00000000 l    df *ABS*	00000000 gd32vf103_usart.c
00000000 l    df *ABS*	00000000 system_gd32vf103.c
00000000 l    df *ABS*	00000000 sbrk.c
200004ec l     O .data	00000004 curbrk.1524
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 eclicw.c
20000500 l     O .bss	00000004 pmtisr
20000504 l     O .bss	00000004 pu0tbeisr
00000000 l    df *ABS*	00000000 gd32v_tf_card_if.c
00000000 l    df *ABS*	00000000 tf_delay.c
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 drv_usb_core.c
00000000 l    df *ABS*	00000000 drv_usb_dev.c
08007dcc l     O .sdata2.EP0_MAXLEN	00000004 EP0_MAXLEN
00000000 l    df *ABS*	00000000 drv_usbd_int.c
080043e2 l     F .text	000000fe usbd_int_epout
080044e0 l     F .text	000000bc usbd_int_epin
0800459c l     F .text	000000c6 usbd_int_rxfifo
08004662 l     F .text	000000d2 usbd_int_reset
08004734 l     F .text	00000068 usbd_int_enumfinish
0800479c l     F .text	000000e6 usbd_emptytxfifo_write
08007dd0 l     O .sdata2.USB_SPEED	00000004 USB_SPEED
00000000 l    df *ABS*	00000000 gd32vf103_hw.c
00000000 l    df *ABS*	00000000 gd32vf103_usb_it.c
00000000 l    df *ABS*	00000000 usb_delay.c
00000000 l    df *ABS*	00000000 usb_serial_if.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_transc.c
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 radioHead.c
00000000 l    df *ABS*	00000000 rn4871.c
00000000 l    df *ABS*	00000000 state.c
20000544 l     O .bss	00000004 current_state
00000000 l    df *ABS*	00000000 build/entry.o
080063b4 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
20001554 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000488 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
08007dd8 l       .sdata2._global_impure_ptr	00000000 __fini_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __fini_array_start
08007dd8 l       .sdata2._global_impure_ptr	00000000 __init_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_end
08007dd8 l       .sdata2._global_impure_ptr	00000000 __init_array_start
08007dd8 l       .sdata2._global_impure_ptr	00000000 __preinit_array_start
08007db2 g     F .text	00000014 _malloc_usable_size_r
08005910 g     F .text	00000014 led_off_B1
080018f0 g     F .text	0000000a usart_transmit_config
08007076 g     F .text	0000002a .hidden __ashldi3
20000478 g     O .data	00000010 finapressHandles
08000daa g     F .text	00000034 adc_external_trigger_source_config
080056a6 g     F .text	00000026 send_data_to_phone
20000ce8 g       .data	00000000 __global_pointer$
08005188 g     F .text	00000030 usbd_ctl_status_recev
08004106 g     F .text	0000008c usb_transc_outxfer
08005938 g     F .text	00000014 led_off_B0
08007d3e g     F .text	00000002 __malloc_unlock
08005b4a g     F .text	00000030 append_int_to_string
080050e8 g     F .text	00000038 usbd_ctl_send
08005924 g     F .text	00000014 led_on_B0
08007d16 g     F .text	00000026 memmove
08000cec g     F .text	000000be adc_regular_channel_config
0800111c g     F .text	00000014 rcu_usb_clock_config
08005d90 g     F .text	0000003e clear_queues
08001c54 g     F .text	0000000e eclic_get_nlbits
0800489a g     F .text	00000056 USBFS_WKUP_IRQHandler
080018c2 g     F .text	00000012 usart_word_length_set
08004882 g     F .text	00000008 usb_udelay
08000f6a g     F .text	00000026 dma_channel_enable
20000554 g     O .bss	00000400 rx_radio_buffer
08003f10 g     F .text	00000032 usb_rxfifo_read
20005604 g     O .bss	00000004 errno
08001130 g     F .text	0000013a rcu_clock_freq_get
08005088 g     F .text	0000002c usbd_class_request
00001000 g       *ABS*	00000000 __stack_size
08001468 g     F .text	0000023c timer_channel_output_config
0800488a g     F .text	00000010 USBFS_IRQHandler
08006198 g     F .text	000000b6 lio_read_bt
08000c20 g     F .text	00000010 adc_enable
080062f4 g     F .text	0000000a set_state
08000380 g     O .text	00000010 usbd_strings
08004242 g     F .text	00000020 usb_iepintr_read
080071c4 g     F .text	00000016 memcpy
08004234 g     F .text	0000000e usb_iepintnum_read
080049d6 g     F .text	000000ee set_usb_clock_96m_hxtal
08001e26 g     F .text	00000052 eclic_mtip_handler
08001720 g     F .text	00000056 timer_channel_output_shadow_config
080018e6 g     F .text	0000000a usart_enable
08007672 g     F .text	0000029a _svfprintf_r
0800693c g     F .text	000000a4 .hidden __ltdf2
08003718 g     F .text	0000027c disk_initialize
0800524c g     F .text	000000e6 usbd_out_transc
0800107e g     F .text	00000004 gpio_bit_set
08001444 g     F .text	0000000a timer_enable
200004e8 g     O .data	00000004 SystemCoreClock
080010c0 g     F .text	0000001c rcu_periph_reset_disable
0800126a g     F .text	00000036 spi_init
08001d40  w    F .text	00000038 handle_trap
08003994 g     F .text	00000014 disk_status
08006384  w      .text	00000000 irq_entry
200015f0 g     O .bss	00004014 w
08004b84 g     F .text	0000003e usbd_ep_stall_clear
08007cc6 g     F .text	00000036 _sbrk_r
08000e42 g     F .text	0000000c adc_flag_clear
08003b52 g     F .text	0000021e disk_ioctl
08004b44 g     F .text	00000040 usbd_ep_stall
08007dc8 g     O .sdata2.usbd_language_id_desc	00000004 usbd_language_id_desc
080018b2 g     F .text	00000010 usart_parity_config
20007000 g       .stack	00000000 _heap_end
08000b96 g     F .text	00000050 adc_deinit
08006026 g     F .text	00000172 lio_init_bt
08005120 g     F .text	00000038 usbd_ctl_recev
08007dd4 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
08007d40 g     F .text	00000072 _realloc_r
0800715a g     F .text	0000006a __libc_init_array
08006e90 g     F .text	00000056 .hidden __floatunsidf
08001b66 g     F .text	0000002e _sbrk
08000be6 g     F .text	00000020 adc_mode_config
0800191c g     F .text	0000000c usart_dma_receive_config
08001d78 g     F .text	0000002c _init
08004b04 g     F .text	00000040 usbd_ep_send
0800543e g     F .text	000001a4 init_ADC_A0_A7
08007122 g     F .text	00000038 __libc_fini_array
08001d1e  w    F .text	00000022 handle_nmi
080012aa g     F .text	00000004 spi_i2s_data_transmit
08004ac4 g     F .text	00000040 usbd_ep_recev
08006e2c g     F .text	00000064 .hidden __fixdfsi
0800139e g     F .text	00000018 timer_struct_para_init
08000e38 g     F .text	0000000a adc_flag_get
0800401c g     F .text	000000ea usb_transc_inxfer
0800594c g     F .text	000000fa timer_interrupt_config
080013b6 g     F .text	0000008e timer_init
0800178a g     F .text	00000012 timer_interrupt_flag_get
20000540 g     O .bss	00000004 write
08004222 g     F .text	00000012 usb_oepintr_read
08003f42 g     F .text	00000028 usb_txfifo_flush
0800704c g     F .text	0000002a .hidden __lshrdi3
0800693c g     F .text	000000a4 .hidden __ledf2
080016a4 g     F .text	00000056 timer_channel_output_mode_config
08004262 g     F .text	00000026 usb_ctlep_startout
08003e08 g     F .text	000000ce delay_1ms
080018fa g     F .text	0000000a usart_receive_config
08001e78 g     F .text	00000052 USART0_IRQHandler
08001c62 g     F .text	00000058 eclic_set_irq_lvl_abs
08001c42 g     F .text	00000012 eclic_enable_interrupt
08000f96 g     F .text	00000006 eclic_global_interrupt_disable
08003ed6 g     F .text	0000003a usb_txfifo_write
08005720 g     F .text	000001b2 TIMER1_IRQHandler
08000618 g     O .text	00000020 __sf_fake_stderr
080041cc g     F .text	00000046 usb_transc_clrstall
08001b94 g     F .text	0000007c write_hex
08005dce g     F .text	00000172 init_radio
08007570 g     F .text	00000102 __ssputs_r
200015e0 g     O .bss	00000010 sample_buffer
2000053c g     O .bss	00000004 start_time
080070a0 g     F .text	0000003c .hidden __clzsi2
080051b8 g     F .text	00000094 usbd_setup_transc
08001082 g     F .text	00000004 gpio_bit_reset
08007cfc g     F .text	0000001a memchr
080073b6 g     F .text	000000b8 _free_r
08000e18 g     F .text	00000020 adc_software_trigger_enable
20000548 g     O .bss	00000004 _global_atexit
080072ee g     F .text	000000c8 __call_exitprocs
0800179c g     F .text	00000008 timer_interrupt_flag_clear
20008000 g       .stack	00000000 _sp
080018d4 g     F .text	00000012 usart_stop_bit_set
0800331a g     F .text	0000002c f_close
08005bea g     F .text	00000020 init_q
0800015c g     F .init	00000000 _start
0800177e g     F .text	0000000c timer_interrupt_disable
08001090 g     F .text	00000018 rcu_periph_clock_enable
08006ee6 g     F .text	00000166 .hidden __floatundidf
0800036c g     O .text	00000012 device_descriptor
0800024c g       .init	00000000 enable_mcycle_minstret
08007262 g     F .text	0000008c __register_exitproc
08004288 g     F .text	0000001a usb_clock_active
080012cc g     F .text	000000d2 timer_deinit
08003f6a g     F .text	00000014 usb_devaddr_set
08001c10 g     F .text	00000010 get_timer_value
08001776 g     F .text	00000008 timer_interrupt_enable
080012a0 g     F .text	0000000a spi_enable
08005b7a g     F .text	0000000e append_newLine
080012b6 g     F .text	0000000c spi_crc_polynomial_set
08004212 g     F .text	00000010 usb_oepintnum_read
08005f40 g     F .text	0000009c send_radio
080063f6 g     F .text	00000546 .hidden __divdf3
08001846 g     F .text	0000006c usart_baudrate_set
08001928 g     F .text	0000000c usart_dma_transmit_config
080069e0 g     F .text	0000044c .hidden __muldf3
20000520 g     O .bss	00000001 setupc_flag
08000f1e g     F .text	00000026 dma_circulation_enable
08003368 g     F .text	0000003a get_fattime
08000c06 g     F .text	0000001a adc_data_alignment_config
20000d54 g     O .bss	00000400 rx_dma_buffer
08007d3c g     F .text	00000002 __malloc_lock
08001910 g     F .text	0000000c usart_hardware_flow_cts_config
08001cba g     F .text	00000052 eclic_set_irq_priority
08000638 g     O .text	00000020 __sf_fake_stdin
20000500 g       .bss	00000000 __bss_start
080071da g     F .text	00000010 memset
080012ae g     F .text	00000008 spi_i2s_data_receive
080006b4 g     F .text	000004e2 main
080056fa g     F .text	00000026 reboot_BT
08006300  w      .text	00000000 trap_entry
0800316a g     F .text	000001b0 f_sync
08003346 g     F .text	00000022 set_fattime
08000246 g       .init	00000000 disable_mcycle_minstret
08000e92 g     F .text	0000008c dma_init
0800746e g     F .text	00000102 _malloc_r
200004f0 g     O .data	00000008 time
080029e0 g     F .text	0000005c f_mount
08001d0c g     F .text	00000012 eclic_mode_enable
20000538 g     O .bss	00000004 seconds
080042a2 g     F .text	00000140 usbd_isr
20000510 g     O .bss	00000008 tf_current_time
08007238 g     F .text	00000018 strcmp
08001934 g     F .text	0000011c SystemInit
08005c76 g     F .text	0000000c queue_str_len
08001da4 g     F .text	00000002 _fini
00000000 g       *ABS*	00000000 __dbg_stack_size
20000524 g     O .bss	00000004 usbfs_prescaler
080071ea g     F .text	0000004e sprintf
08000518 g     O .text	00000100 .hidden __clz_tab
080017a4 g     F .text	000000a2 usart_deinit
080070dc g     F .text	00000010 atexit
080050b4 g     F .text	00000004 usbd_vendor_request
0800624e g     F .text	0000009c lio_send_bt
0800790c g     F .text	0000010c _printf_common
200004fc g     O .data	00000004 _impure_ptr
080010a8 g     F .text	00000018 rcu_periph_reset_enable
08003f7e g     F .text	0000009e usb_transc_active
20000000 g     O .data	00000043 configuration_descriptor
08007672 g     F .text	0000029a _svfiprintf_r
20000000 g       .dalign	00000000 _data
20000044 g     O .data	00000434 USB_OTG_dev
080055e2 g     F .text	000000c4 write_handle_raw
080048f0 g     F .text	00000072 usb_delay_1ms
20000530 g     O .bss	00000004 millisec
08000c5c g     F .text	00000046 adc_discontinuous_mode_config
08005ac2 g     F .text	00000088 int_to_string
08000f9c g     F .text	00000034 eclic_irq_enable
08005a46 g     F .text	0000007c formatTime
08001904 g     F .text	0000000c usart_hardware_flow_rts_config
20001154 g     O .bss	00000400 tx_dma_buffer
08005c0a g     F .text	0000006c enqueue_string
08005d24 g     F .text	0000006c empty_string_queue
20000500 g       .bss	00000000 _edata
20005608 g       .bss	00000000 _end
08005158 g     F .text	00000030 usbd_ctl_status_send
08002f62 g     F .text	00000208 f_write
08003d70 g     F .text	0000005a tf_start_timer
08003dca g     F .text	0000003e tf_timer_done
08000f90 g     F .text	00000006 eclic_global_interrupt_enable
08004192 g     F .text	0000003a usb_transc_stall
08007dd8 g       .lalign	00000000 _data_lma
08000fd0 g     F .text	0000000a exti_interrupt_flag_clear
08002a3c g     F .text	00000526 f_open
08000dde g     F .text	0000003a adc_external_trigger_config
08003a4a g     F .text	00000108 disk_write
08000c52 g     F .text	0000000a adc_dma_mode_enable
080070ec g     F .text	00000036 exit
080050b8 g     F .text	00000030 usbd_enum_error
0800144e g     F .text	0000001a timer_channel_output_struct_para_init
08001a50 g     F .text	000000ca SystemCoreClockUpdate
080012c2 g     F .text	0000000a spi_i2s_flag_get
08001c20 g     F .text	00000022 eclic_init
080016fa g     F .text	00000026 timer_channel_output_pulse_value_config
08000658 g     O .text	00000020 __sf_fake_stdout
080071ea g     F .text	0000004e siprintf
08000ca2 g     F .text	0000004a adc_channel_length_config
080062ea g     F .text	0000000a get_state
08005c82 g     F .text	00000026 fuseStrings
08001b1a g     F .text	0000004c _exit
08000e4e g     F .text	00000044 dma_deinit
20000534 g     O .bss	00000004 minutes
08005fdc g     F .text	0000004a enter_command_mode
080058fc g     F .text	00000014 led_on_B1
08000f44 g     F .text	00000026 dma_circulation_disable
08001da6 g     F .text	00000080 dma_config
08007250 g     F .text	00000012 strlen
080039a8 g     F .text	000000a2 disk_read
08007a18 g     F .text	000002ae _printf_i
20000518 g     O .bss	00000008 tf_delay_until
20000550 g     O .bss	00000004 __malloc_sbrk_start
08004bc2 g     F .text	00000008 usbd_addr_set
080056cc g     F .text	0000002e stagger_data_to_phone
080010dc g     F .text	00000040 rcu_adc_clock_config
080058d2 g     F .text	0000002a ledInit
08000fda g     F .text	000000a4 gpio_init
08004962 g     F .text	00000074 usb_delay_1us
2000054c g     O .bss	00000004 __malloc_free_list
08000c30 g     F .text	00000022 adc_calibration_enable
08005332 g     F .text	0000010c usbd_in_transc
08005ca8 g     F .text	0000007c dequeue_string
08005b88 g     F .text	00000062 millis
08001086 g     F .text	0000000a gpio_bit_write
20000954 g     O .bss	00000400 tx_radio_buffer
08005070 g     F .text	00000018 usbd_standard_request



Disassembly of section .init:

08000000 <vector_base>:
    .weak  CAN1_RX1_IRQHandler
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    j _start
 8000000:	aab1                	j	800015c <_start>
 8000002:	0001                	nop
	...
 800001c:	1e26                	slli	t3,t3,0x29
 800001e:	0800                	addi	s0,sp,16
	...
 80000bc:	5720                	lw	s0,104(a4)
 80000be:	0800                	addi	s0,sp,16
	...
 80000e0:	1e78                	addi	a4,sp,828
 80000e2:	0800                	addi	s0,sp,16
	...
 80000f4:	489a                	lw	a7,132(sp)
 80000f6:	0800                	addi	s0,sp,16
	...
 8000158:	488a                	lw	a7,128(sp)
 800015a:	0800                	addi	s0,sp,16

0800015c <_start>:
	.globl _start
	.type _start,@function

_start:

	csrc CSR_MSTATUS, MSTATUS_MIE
 800015c:	30047073          	csrci	mstatus,8
	/* Jump to logical address first to ensure correct operation of RAM region  */
    la		a0,	_start
 8000160:	00000517          	auipc	a0,0x0
 8000164:	ffc50513          	addi	a0,a0,-4 # 800015c <_start>
    li		a1,	1
 8000168:	4585                	li	a1,1
	slli	a1,	a1, 29
 800016a:	05f6                	slli	a1,a1,0x1d
    bleu	a1, a0, _start0800
 800016c:	00b57b63          	bgeu	a0,a1,8000182 <_start0800>
    srli	a1,	a1, 2
 8000170:	8189                	srli	a1,a1,0x2
    bleu	a1, a0, _start0800
 8000172:	00b57863          	bgeu	a0,a1,8000182 <_start0800>
    la		a0,	_start0800
 8000176:	00000517          	auipc	a0,0x0
 800017a:	00c50513          	addi	a0,a0,12 # 8000182 <_start0800>
    add		a0, a0, a1
 800017e:	952e                	add	a0,a0,a1
	jr      a0
 8000180:	8502                	jr	a0

08000182 <_start0800>:

_start0800:

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 8000182:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
 8000186:	7d02a073          	csrs	0x7d0,t0

	/* Intial the mtvt*/
    la t0, vector_base
 800018a:	00000297          	auipc	t0,0x0
 800018e:	e7628293          	addi	t0,t0,-394 # 8000000 <vector_base>
    csrw CSR_MTVT, t0
 8000192:	30729073          	csrw	mtvt,t0

	/* Intial the mtvt2 and enable it*/
    la t0, irq_entry
 8000196:	00006297          	auipc	t0,0x6
 800019a:	1ee28293          	addi	t0,t0,494 # 8006384 <irq_entry>
    csrw CSR_MTVT2, t0
 800019e:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
 80001a2:	7ec0e073          	csrsi	0x7ec,1

    /* Intial the CSR MTVEC for the Trap ane NMI base addr*/
    la t0, trap_entry
 80001a6:	00006297          	auipc	t0,0x6
 80001aa:	15a28293          	addi	t0,t0,346 # 8006300 <trap_entry>
    csrw CSR_MTVEC, t0
 80001ae:	30529073          	csrw	mtvec,t0
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80001b2:	18001197          	auipc	gp,0x18001
 80001b6:	b3618193          	addi	gp,gp,-1226 # 20000ce8 <__global_pointer$>
.option pop
	la sp, _sp
 80001ba:	18008117          	auipc	sp,0x18008
 80001be:	e4610113          	addi	sp,sp,-442 # 20008000 <_sp>

	/* Load data section */
	la a0, _data_lma
 80001c2:	00008517          	auipc	a0,0x8
 80001c6:	c1650513          	addi	a0,a0,-1002 # 8007dd8 <__fini_array_end>
	la a1, _data
 80001ca:	18000597          	auipc	a1,0x18000
 80001ce:	e3658593          	addi	a1,a1,-458 # 20000000 <_data>
	la a2, _edata
 80001d2:	18000617          	auipc	a2,0x18000
 80001d6:	32e60613          	addi	a2,a2,814 # 20000500 <__bss_start>
	bgeu a1, a2, 2f
 80001da:	00c5fa63          	bgeu	a1,a2,80001ee <_start0800+0x6c>
1:
	lw t0, (a0)
 80001de:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
 80001e2:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
 80001e6:	0511                	addi	a0,a0,4
	addi a1, a1, 4
 80001e8:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
 80001ea:	fec5eae3          	bltu	a1,a2,80001de <_start0800+0x5c>
2:
	/* Clear bss section */
	la a0, __bss_start
 80001ee:	18000517          	auipc	a0,0x18000
 80001f2:	31250513          	addi	a0,a0,786 # 20000500 <__bss_start>
	la a1, _end
 80001f6:	18005597          	auipc	a1,0x18005
 80001fa:	41258593          	addi	a1,a1,1042 # 20005608 <_end>
	bgeu a0, a1, 2f
 80001fe:	00b57763          	bgeu	a0,a1,800020c <_start0800+0x8a>
1:
	sw zero, (a0)
 8000202:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
 8000206:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
 8000208:	feb56de3          	bltu	a0,a1,8000202 <_start0800+0x80>
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 800020c:	3202f073          	csrci	mucounteren,5
	/* Call global constructors */
	la a0, __libc_fini_array
 8000210:	00007517          	auipc	a0,0x7
 8000214:	f1250513          	addi	a0,a0,-238 # 8007122 <__libc_fini_array>
	call atexit
 8000218:	00007097          	auipc	ra,0x7
 800021c:	ec4080e7          	jalr	-316(ra) # 80070dc <atexit>
	call __libc_init_array
 8000220:	00007097          	auipc	ra,0x7
 8000224:	f3a080e7          	jalr	-198(ra) # 800715a <__libc_init_array>


	/* argc = argv = 0 */
	call _init
 8000228:	00002097          	auipc	ra,0x2
 800022c:	b50080e7          	jalr	-1200(ra) # 8001d78 <_init>
	li a0, 0
 8000230:	4501                	li	a0,0
	li a1, 0
 8000232:	4581                	li	a1,0
	call main
 8000234:	00000097          	auipc	ra,0x0
 8000238:	480080e7          	jalr	1152(ra) # 80006b4 <main>
	tail exit
 800023c:	00007317          	auipc	t1,0x7
 8000240:	eb030067          	jr	-336(t1) # 80070ec <exit>

1:
	j 1b
 8000244:	a001                	j	8000244 <_start0800+0xc2>

08000246 <disable_mcycle_minstret>:
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
        csrsi CSR_MCOUNTINHIBIT, 0x5
 8000246:	3202e073          	csrsi	mucounteren,5
	ret
 800024a:	8082                	ret

0800024c <enable_mcycle_minstret>:

	.global enable_mcycle_minstret
enable_mcycle_minstret:
        csrci CSR_MCOUNTINHIBIT, 0x5
 800024c:	3202f073          	csrci	mucounteren,5
	ret
 8000250:	8082                	ret
	...

Disassembly of section .text:

08000280 <__compound_literal.0-0x68>:
	...
 8000288:	0201                	addi	tp,tp,0
 800028a:	07060403          	lb	s0,112(a2)
 800028e:	0908                	addi	a0,sp,144
 8000290:	500a                	0x500a
 8000292:	6f72                	flw	ft10,28(sp)
 8000294:	6d617267          	0x6d617267
 8000298:	6820                	flw	fs0,80(s0)
 800029a:	7361                	lui	t1,0xffff8
 800029c:	6520                	flw	fs0,72(a0)
 800029e:	6978                	flw	fa4,84(a0)
 80002a0:	6574                	flw	fa3,76(a0)
 80002a2:	2064                	fld	fs1,192(s0)
 80002a4:	68746977          	0x68746977
 80002a8:	6320                	flw	fs0,64(a4)
 80002aa:	3a65646f          	jal	s0,8056650 <__fini_array_end+0x4e878>
 80002ae:	0000                	unimp
 80002b0:	7830                	flw	fa2,112(s0)
 80002b2:	0000                	unimp
 80002b4:	6d6e                	flw	fs10,216(sp)
 80002b6:	0a69                	addi	s4,s4,26
 80002b8:	0000                	unimp
 80002ba:	0000                	unimp
 80002bc:	7274                	flw	fa3,100(a2)
 80002be:	7061                	c.lui	zero,0xffff8
 80002c0:	000a                	c.slli	zero,0x2
 80002c2:	0000                	unimp
 80002c4:	4146                	lw	sp,80(sp)
 80002c6:	0054                	addi	a3,sp,4
 80002c8:	4146                	lw	sp,80(sp)
 80002ca:	3354                	fld	fa3,160(a4)
 80002cc:	0032                	c.slli	zero,0xc
 80002ce:	0000                	unimp
 80002d0:	2a22                	fld	fs4,8(sp)
 80002d2:	3b3a2c2b          	0x3b3a2c2b
 80002d6:	3d3c                	fld	fa5,120(a0)
 80002d8:	3f3e                	fld	ft10,488(sp)
 80002da:	7f7c5d5b          	0x7f7c5d5b
 80002de:	0000                	unimp
 80002e0:	0000                	unimp
 80002e2:	0000                	unimp
 80002e4:	4000                	lw	s0,0(s0)
 80002e6:	          	0x40af

080002e8 <__compound_literal.0>:
 80002e8:	00470316 00670069 00440061 00760065     ..G.i.g.a.D.e.v.
 80002f8:	00630069 00000065                       i.c.e...

08000300 <__compound_literal.1>:
 8000300:	00470338 00330044 00200032 00530055     8.G.D.3.2. .U.S.
 8000310:	00200042 00440043 00200043 00430041     B. .C.D.C. .A.C.
 8000320:	0020004d 006e0069 00460020 00200053     M. .i.n. .F.S. .
 8000330:	006f004d 00650064 00000000              M.o.d.e.....

0800033c <__compound_literal.2>:
 800033c:	0047032e 00330044 00580032 00580058     ..G.D.3.2.X.X.X.
 800034c:	0033002d 0030002e 0030002e 0037002d     -.3...0...0.-.7.
 800035c:	0038007a 00390078 00650079 00000072     z.8.x.9.y.e.r...

0800036c <device_descriptor>:
 800036c:	02000112 40000002 018a28e9 02010100     .......@.(......
 800037c:	00000103                                ....

08000380 <usbd_strings>:
 8000380:	08007dc8 080002e8 08000300 0800033c     .}..........<...

08000390 <_std_dev_req>:
 8000390:	08004da0 08004fd0 08004bca 08004f50     .M...O...K..PO..
 80003a0:	08004bca 08004eec 08004bfe 08005068     .K...N...K..hP..
 80003b0:	08004e5a 08004cf8 08004e96 08004ec2     ZN...L...N...N..
 80003c0:	0800506c 00000000 72617473 00003074     lP......start0..
 80003d0:	72617473 00003174 72617473 00003274     start1..start2..
 80003e0:	706f7473 00003070 706f7473 00003170     stopp0..stopp1..
 80003f0:	706f7473 00003270 33323130 37363534     stopp2..01234567
 8000400:	42413938 46454443 00000000 2c574853     89ABCDEF....SHW,
 8000410:	00000000 2e257325 252c7834 000a0d73     ....%s%.4x,%s...
 8000420:	0d312c52 00000000 74736574 00000000     R,1.....test....
 8000430:	414e4946 53432e50 00000056 656d6954     FINAP.CSV...Time
 8000440:	3b30413b 413b3141 33413b32 3b34413b     ;A0;A1;A2;A3;A4;
 8000450:	413b3541 37413b36 0000000a 2c565725     A5;A6;A7....%WV,
 8000460:	32373030 2531302c 00000000 74706d65     0072,01%....empt
 8000470:	00000079 2c565725 32373030 2530302c     y...%WV,0072,00%
 8000480:	00000000 2c565725 32373030 2532302c     ....%WV,0072,02%
	...
 800049c:	40af4000 00006484 000063d4 000063da     .@.@.d...c...c..
 80004ac:	000063d4 00006476 000063d4 000063da     .c..vd...c...c..
 80004bc:	00006484 00006484 00006476 000063da     .d...d..vd...c..
 80004cc:	000063ba 000063ba 000063ba 000063de     .c...c...c...c..
 80004dc:	0000688a 0000688a 000068a2 00006884     .h...h...h...h..
 80004ec:	00006884 00006930 000068a2 00006884     .h..0i...h...h..
 80004fc:	00006930 00006884 000068a2 00006882     0i...h...h...h..
 800050c:	00006882 00006882 00006930              .h...h..0i..

08000518 <__clz_tab>:
 8000518:	02020100 03030303 04040404 04040404     ................
 8000528:	05050505 05050505 05050505 05050505     ................
 8000538:	06060606 06060606 06060606 06060606     ................
 8000548:	06060606 06060606 06060606 06060606     ................
 8000558:	07070707 07070707 07070707 07070707     ................
 8000568:	07070707 07070707 07070707 07070707     ................
 8000578:	07070707 07070707 07070707 07070707     ................
 8000588:	07070707 07070707 07070707 07070707     ................
 8000598:	08080808 08080808 08080808 08080808     ................
 80005a8:	08080808 08080808 08080808 08080808     ................
 80005b8:	08080808 08080808 08080808 08080808     ................
 80005c8:	08080808 08080808 08080808 08080808     ................
 80005d8:	08080808 08080808 08080808 08080808     ................
 80005e8:	08080808 08080808 08080808 08080808     ................
 80005f8:	08080808 08080808 08080808 08080808     ................
 8000608:	08080808 08080808 08080808 08080808     ................

08000618 <__sf_fake_stderr>:
	...

08000638 <__sf_fake_stdin>:
	...

08000658 <__sf_fake_stdout>:
	...
 8000678:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
 8000688:	00004746 33323130 37363534 42413938     FG..0123456789AB
 8000698:	46454443 00000000 33323130 37363534     CDEF....01234567
 80006a8:	62613938 66656463 00000000              89abcdef....

080006b4 <main>:
            
        }
    }
}

int main(void){
 80006b4:	737d                	lui	t1,0xfffff
 80006b6:	aa010113          	addi	sp,sp,-1376
 80006ba:	54112e23          	sw	ra,1372(sp)
 80006be:	54812c23          	sw	s0,1368(sp)
 80006c2:	54912a23          	sw	s1,1364(sp)
 80006c6:	55212823          	sw	s2,1360(sp)
 80006ca:	55312623          	sw	s3,1356(sp)
 80006ce:	55412423          	sw	s4,1352(sp)
 80006d2:	55512223          	sw	s5,1348(sp)
 80006d6:	55612023          	sw	s6,1344(sp)
 80006da:	53712e23          	sw	s7,1340(sp)
 80006de:	53812c23          	sw	s8,1336(sp)
 80006e2:	53912a23          	sw	s9,1332(sp)
 80006e6:	53a12823          	sw	s10,1328(sp)
 80006ea:	53b12623          	sw	s11,1324(sp)
 80006ee:	911a                	add	sp,sp,t1
    init_q();
 80006f0:	00005097          	auipc	ra,0x5
 80006f4:	4fa080e7          	jalr	1274(ra) # 8005bea <init_q>

    /* Used for bytes written */
    UINT bw = 0;
    
    /* Sets a valid date for when writing to file */
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 80006f8:	4701                	li	a4,0
 80006fa:	4681                	li	a3,0
 80006fc:	4781                	li	a5,0
 80006fe:	4605                	li	a2,1
 8000700:	4585                	li	a1,1
 8000702:	7bc00513          	li	a0,1980
    UINT bw = 0;
 8000706:	c202                	sw	zero,4(sp)
    set_fattime(1980, 1, 1, 0, 0, 0); // 1980 Jan 1st, 00:00:00
 8000708:	00003097          	auipc	ra,0x3
 800070c:	c3e080e7          	jalr	-962(ra) # 8003346 <set_fattime>
    delay_1ms(100);
 8000710:	06400513          	li	a0,100
 8000714:	00003097          	auipc	ra,0x3
 8000718:	6f4080e7          	jalr	1780(ra) # 8003e08 <delay_1ms>

    /* This function "mounts" the SD-card which makes the filesystem available */
    fr = f_mount(&fs, "test", 1); // Mount storage device
 800071c:	6905                	lui	s2,0x1
    UINT bw = 0;
 800071e:	747d                	lui	s0,0xfffff
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000720:	52090793          	addi	a5,s2,1312 # 1520 <__stack_size+0x520>
 8000724:	978a                	add	a5,a5,sp
 8000726:	dd040513          	addi	a0,s0,-560 # ffffedd0 <_sp+0xdfff6dd0>
 800072a:	08000b37          	lui	s6,0x8000
 800072e:	4605                	li	a2,1
 8000730:	428b0593          	addi	a1,s6,1064 # 8000428 <_std_dev_req+0x98>
 8000734:	953e                	add	a0,a0,a5
 8000736:	00002097          	auipc	ra,0x2
 800073a:	2aa080e7          	jalr	682(ra) # 80029e0 <f_mount>
    f_sync(&fil);
 800073e:	52090793          	addi	a5,s2,1312
 8000742:	978a                	add	a5,a5,sp
    fr = f_mount(&fs, "test", 1); // Mount storage device
 8000744:	c02a                	sw	a0,0(sp)
    f_sync(&fil);
 8000746:	ba840513          	addi	a0,s0,-1112
 800074a:	953e                	add	a0,a0,a5
 800074c:	00003097          	auipc	ra,0x3
 8000750:	a1e080e7          	jalr	-1506(ra) # 800316a <f_sync>

    /* This function opens a file. In this case, we are creating a file which we want to write to */
    /* Filename should be at most 8 chars long and the extension should be at most 3 */
    
    delay_1ms(400);
 8000754:	19000513          	li	a0,400
 8000758:	00003097          	auipc	ra,0x3
 800075c:	6b0080e7          	jalr	1712(ra) # 8003e08 <delay_1ms>

    int ind_ble = 0;
    char read_buf[80] = {'\0'};
 8000760:	05000613          	li	a2,80
 8000764:	4581                	li	a1,0
 8000766:	1028                	addi	a0,sp,40
 8000768:	00007097          	auipc	ra,0x7
 800076c:	a72080e7          	jalr	-1422(ra) # 80071da <memset>
    char read_buf_ble[80] = {'\0'};
 8000770:	05000613          	li	a2,80
 8000774:	4581                	li	a1,0
 8000776:	18a8                	addi	a0,sp,120
 8000778:	00007097          	auipc	ra,0x7
 800077c:	a62080e7          	jalr	-1438(ra) # 80071da <memset>
    //configure_usb_serial(); //måste vara före lio_init_bt
    lio_init_bt();
 8000780:	00006097          	auipc	ra,0x6
 8000784:	8a6080e7          	jalr	-1882(ra) # 8006026 <lio_init_bt>
    init_radio();
 8000788:	00005097          	auipc	ra,0x5
 800078c:	646080e7          	jalr	1606(ra) # 8005dce <init_radio>
    dma_config();
 8000790:	00001097          	auipc	ra,0x1
 8000794:	616080e7          	jalr	1558(ra) # 8001da6 <dma_config>
    init_ADC_A0_A7();
 8000798:	00005097          	auipc	ra,0x5
 800079c:	ca6080e7          	jalr	-858(ra) # 800543e <init_ADC_A0_A7>
    ledInit();
 80007a0:	00005097          	auipc	ra,0x5
 80007a4:	132080e7          	jalr	306(ra) # 80058d2 <ledInit>
    usb_delay_1ms(1);
 80007a8:	4505                	li	a0,1
 80007aa:	00004097          	auipc	ra,0x4
 80007ae:	146080e7          	jalr	326(ra) # 80048f0 <usb_delay_1ms>

    char write_to_sd[4096] = {'\0'};
 80007b2:	6605                	lui	a2,0x1
 80007b4:	4581                	li	a1,0
 80007b6:	52010513          	addi	a0,sp,1312
 80007ba:	00007097          	auipc	ra,0x7
 80007be:	a20080e7          	jalr	-1504(ra) # 80071da <memset>
    char buf[BUFFER_SIZE] = {'\0'};
    int buf_size = 0;
    char usb_data_buffer[4096] = {'\0'};
    int dequeued_str_len = 0;

    write = 0;
 80007c2:	200004b7          	lui	s1,0x20000
 80007c6:	5404a023          	sw	zero,1344(s1) # 20000540 <write>
    /* while(!usb_serial_available()){
        delay_1ms(100);
    } */

    int file_Nr = 0;
    reboot_BT();
 80007ca:	00005097          	auipc	ra,0x5
 80007ce:	f30080e7          	jalr	-208(ra) # 80056fa <reboot_BT>
    enter_command_mode();
 80007d2:	00006097          	auipc	ra,0x6
 80007d6:	80a080e7          	jalr	-2038(ra) # 8005fdc <enter_command_mode>
    send_data_to_phone(finapressHandle_start_stop,0x00);
 80007da:	4581                	li	a1,0
 80007dc:	07500513          	li	a0,117
 80007e0:	00005097          	auipc	ra,0x5
 80007e4:	ec6080e7          	jalr	-314(ra) # 80056a6 <send_data_to_phone>
        switch (get_state()){
            case START:
                eclic_global_interrupt_disable();    
                fr = f_mount(&fs, "test", 1); // Mount storage device
                f_sync(&fil);
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007e8:	080009b7          	lui	s3,0x8000
                eclic_global_interrupt_disable();
                //Skicka till telefon jag stoppar nu
                
                write_to_sd[0] = '\0';
                while(empty_string_queue(write_to_sd, 8)){
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007ec:	52090793          	addi	a5,s2,1312
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80007f0:	3c898993          	addi	s3,s3,968 # 80003c8 <_std_dev_req+0x38>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 80007f4:	ae440a93          	addi	s5,s0,-1308
 80007f8:	978a                	add	a5,a5,sp
    int onOff = 0;
 80007fa:	4b81                	li	s7,0
    int blink = 0;
 80007fc:	4a01                	li	s4,0
 80007fe:	54048493          	addi	s1,s1,1344
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 8000802:	06898c13          	addi	s8,s3,104
                millisec = 0;
 8000806:	20000cb7          	lui	s9,0x20000
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 800080a:	9abe                	add	s5,s5,a5
        switch (get_state()){
 800080c:	00006097          	auipc	ra,0x6
 8000810:	ade080e7          	jalr	-1314(ra) # 80062ea <get_state>
 8000814:	4785                	li	a5,1
 8000816:	892a                	mv	s2,a0
 8000818:	18f50063          	beq	a0,a5,8000998 <main+0x2e4>
 800081c:	4789                	li	a5,2
 800081e:	24f50063          	beq	a0,a5,8000a5e <main+0x3aa>
 8000822:	f56d                	bnez	a0,800080c <main+0x158>
                set_state(RUNNING);
                break;

            case RUNNING:
                //RUNNING CONTROL
                lio_read_bt(read_buf, 20);
 8000824:	6d85                	lui	s11,0x1
 8000826:	520d8793          	addi	a5,s11,1312 # 1520 <__stack_size+0x520>
 800082a:	978a                	add	a5,a5,sp
 800082c:	b0840913          	addi	s2,s0,-1272
 8000830:	993e                	add	s2,s2,a5
 8000832:	45d1                	li	a1,20
 8000834:	854a                	mv	a0,s2
 8000836:	00006097          	auipc	ra,0x6
 800083a:	962080e7          	jalr	-1694(ra) # 8006198 <lio_read_bt>
                ind_ble = fuseStrings(read_buf_ble, read_buf);
 800083e:	520d8793          	addi	a5,s11,1312
 8000842:	978a                	add	a5,a5,sp
 8000844:	b5840d13          	addi	s10,s0,-1192
 8000848:	9d3e                	add	s10,s10,a5
 800084a:	85ca                	mv	a1,s2
 800084c:	856a                	mv	a0,s10
 800084e:	00005097          	auipc	ra,0x5
 8000852:	434080e7          	jalr	1076(ra) # 8005c82 <fuseStrings>
                memset(read_buf, '\0', sizeof(read_buf));
 8000856:	05000613          	li	a2,80
 800085a:	4581                	li	a1,0
 800085c:	854a                	mv	a0,s2
 800085e:	00007097          	auipc	ra,0x7
 8000862:	97c080e7          	jalr	-1668(ra) # 80071da <memset>
                blink++;
                if (blink == 100000){
 8000866:	67e1                	lui	a5,0x18
                blink++;
 8000868:	0a05                	addi	s4,s4,1
                if (blink == 100000){
 800086a:	6a078793          	addi	a5,a5,1696 # 186a0 <__stack_size+0x176a0>
 800086e:	02fa1263          	bne	s4,a5,8000892 <main+0x1de>
                    /* if(read_handle(finapressHandle_start_stop,read_buf_ble,1000)){
                        led_on_b2();
                    }else{
                        led_off_b2();
                    } */
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000872:	05000613          	li	a2,80
 8000876:	4581                	li	a1,0
 8000878:	856a                	mv	a0,s10
 800087a:	00007097          	auipc	ra,0x7
 800087e:	960080e7          	jalr	-1696(ra) # 80071da <memset>
                    if(onOff){
 8000882:	260b8663          	beqz	s7,8000aee <main+0x43a>
                        led_on_B0();
 8000886:	00005097          	auipc	ra,0x5
 800088a:	09e080e7          	jalr	158(ra) # 8005924 <led_on_B0>
                        
                        onOff = 0;
 800088e:	4b81                	li	s7,0
                    blink = 0;
 8000890:	4a01                	li	s4,0
                        led_off_B0();
                        onOff = 1;
                    }
                }
                //printf("%s\r\n", read_buf_ble);
                if(!strcmp(read_buf_ble, BLUETOOTH_START_MESSAGE)){
 8000892:	6785                	lui	a5,0x1
 8000894:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 8000898:	b5840913          	addi	s2,s0,-1192
 800089c:	978a                	add	a5,a5,sp
 800089e:	993e                	add	s2,s2,a5
 80008a0:	09498593          	addi	a1,s3,148
 80008a4:	854a                	mv	a0,s2
 80008a6:	00007097          	auipc	ra,0x7
 80008aa:	992080e7          	jalr	-1646(ra) # 8007238 <strcmp>
 80008ae:	24051763          	bnez	a0,8000afc <main+0x448>
                    send_radio("empty",5);
 80008b2:	08000537          	lui	a0,0x8000
 80008b6:	4595                	li	a1,5
 80008b8:	46c50513          	addi	a0,a0,1132 # 800046c <_std_dev_req+0xdc>
 80008bc:	00005097          	auipc	ra,0x5
 80008c0:	684080e7          	jalr	1668(ra) # 8005f40 <send_radio>
                    delay_1ms(50);
 80008c4:	03200513          	li	a0,50
 80008c8:	00003097          	auipc	ra,0x3
 80008cc:	540080e7          	jalr	1344(ra) # 8003e08 <delay_1ms>
                    send_radio("start0", 6);
 80008d0:	08000537          	lui	a0,0x8000
 80008d4:	4599                	li	a1,6
 80008d6:	3c850513          	addi	a0,a0,968 # 80003c8 <_std_dev_req+0x38>
 80008da:	00005097          	auipc	ra,0x5
 80008de:	666080e7          	jalr	1638(ra) # 8005f40 <send_radio>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 80008e2:	05000613          	li	a2,80
 80008e6:	4581                	li	a1,0
 80008e8:	854a                	mv	a0,s2
 80008ea:	00007097          	auipc	ra,0x7
 80008ee:	8f0080e7          	jalr	-1808(ra) # 80071da <memset>
                    start_time = millis() + 1051;
 80008f2:	00005097          	auipc	ra,0x5
 80008f6:	296080e7          	jalr	662(ra) # 8005b88 <millis>
 80008fa:	200007b7          	lui	a5,0x20000
 80008fe:	41b50513          	addi	a0,a0,1051
 8000902:	52a7ae23          	sw	a0,1340(a5) # 2000053c <start_time>
                    led_on_B1();
 8000906:	00005097          	auipc	ra,0x5
 800090a:	ff6080e7          	jalr	-10(ra) # 80058fc <led_on_B1>
                    set_state(START);
 800090e:	4505                	li	a0,1
 8000910:	00006097          	auipc	ra,0x6
 8000914:	9e4080e7          	jalr	-1564(ra) # 80062f4 <set_state>
                    write = 1;
 8000918:	4785                	li	a5,1
                    send_data_to_phone(finapressHandle_start_stop,0x01);
 800091a:	4585                	li	a1,1
 800091c:	07500513          	li	a0,117
                    write = 1;
 8000920:	c09c                	sw	a5,0(s1)
                    send_data_to_phone(finapressHandle_start_stop,0x01);
 8000922:	00005097          	auipc	ra,0x5
 8000926:	d84080e7          	jalr	-636(ra) # 80056a6 <send_data_to_phone>
                    led_on_B1();
 800092a:	00005097          	auipc	ra,0x5
 800092e:	fd2080e7          	jalr	-46(ra) # 80058fc <led_on_B1>
                }else if(!strcmp(read_buf_ble, RUNNING_MSG)){
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
                }//Vi kan koll vilket kommand vi får när vi connectar för att ta bort det. Just nu så memsettar vi aldrig read_buf_ble så den kommer alltid ligga kvar där i buffern, vilket gör att disconnectar telefonen och sen connectar så kan vi ej starta mätningen

                //BREAK IF PROGRAM SHOULDNT WRITE
                if(!write){
 8000932:	409c                	lw	a5,0(s1)
 8000934:	ec078ce3          	beqz	a5,800080c <main+0x158>
                    break;
                }

                //WRITE TO FILE
                if (queue_str_len() > 8){
 8000938:	00005097          	auipc	ra,0x5
 800093c:	33e080e7          	jalr	830(ra) # 8005c76 <queue_str_len>
 8000940:	47a1                	li	a5,8
 8000942:	eca7d5e3          	bge	a5,a0,800080c <main+0x158>
                    write_to_sd[0] = '\0';
                    buf_size = dequeue_string(write_to_sd, 8);
 8000946:	45a1                	li	a1,8
 8000948:	52010513          	addi	a0,sp,1312
                    write_to_sd[0] = '\0';
 800094c:	52010023          	sb	zero,1312(sp)
                    buf_size = dequeue_string(write_to_sd, 8);
 8000950:	00005097          	auipc	ra,0x5
 8000954:	358080e7          	jalr	856(ra) # 8005ca8 <dequeue_string>
                    if(buf_size > 0){
 8000958:	eaa05ae3          	blez	a0,800080c <main+0x158>
                        //led_on();
                        f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 800095c:	52010513          	addi	a0,sp,1312
 8000960:	00007097          	auipc	ra,0x7
 8000964:	8f0080e7          	jalr	-1808(ra) # 8007250 <strlen>
 8000968:	6785                	lui	a5,0x1
 800096a:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 800096e:	978a                	add	a5,a5,sp
 8000970:	ba840913          	addi	s2,s0,-1112
 8000974:	993e                	add	s2,s2,a5
 8000976:	862a                	mv	a2,a0
 8000978:	86d6                	mv	a3,s5
 800097a:	52010593          	addi	a1,sp,1312
 800097e:	854a                	mv	a0,s2
 8000980:	00002097          	auipc	ra,0x2
 8000984:	5e2080e7          	jalr	1506(ra) # 8002f62 <f_write>
                        f_sync(&fil);
 8000988:	854a                	mv	a0,s2
 800098a:	00002097          	auipc	ra,0x2
 800098e:	7e0080e7          	jalr	2016(ra) # 800316a <f_sync>
                        write_to_sd[0] = '\0';
 8000992:	52010023          	sb	zero,1312(sp)
        switch (get_state()){
 8000996:	bd9d                	j	800080c <main+0x158>
                eclic_global_interrupt_disable();    
 8000998:	00000097          	auipc	ra,0x0
 800099c:	5fe080e7          	jalr	1534(ra) # 8000f96 <eclic_global_interrupt_disable>
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80009a0:	6d85                	lui	s11,0x1
 80009a2:	520d8793          	addi	a5,s11,1312 # 1520 <__stack_size+0x520>
 80009a6:	978a                	add	a5,a5,sp
 80009a8:	dd040513          	addi	a0,s0,-560
 80009ac:	4605                	li	a2,1
 80009ae:	428b0593          	addi	a1,s6,1064
 80009b2:	953e                	add	a0,a0,a5
 80009b4:	00002097          	auipc	ra,0x2
 80009b8:	02c080e7          	jalr	44(ra) # 80029e0 <f_mount>
                f_sync(&fil);
 80009bc:	520d8793          	addi	a5,s11,1312
 80009c0:	978a                	add	a5,a5,sp
 80009c2:	ba840d13          	addi	s10,s0,-1112
 80009c6:	9d3e                	add	s10,s10,a5
                fr = f_mount(&fs, "test", 1); // Mount storage device
 80009c8:	c02a                	sw	a0,0(sp)
                f_sync(&fil);
 80009ca:	856a                	mv	a0,s10
 80009cc:	00002097          	auipc	ra,0x2
 80009d0:	79e080e7          	jalr	1950(ra) # 800316a <f_sync>
                fr = f_open(&fil, FILENAME, FA_WRITE | FA_CREATE_ALWAYS);
 80009d4:	4629                	li	a2,10
 80009d6:	85e2                	mv	a1,s8
 80009d8:	856a                	mv	a0,s10
 80009da:	00002097          	auipc	ra,0x2
 80009de:	062080e7          	jalr	98(ra) # 8002a3c <f_open>
 80009e2:	c02a                	sw	a0,0(sp)
                clear_queues();
 80009e4:	00005097          	auipc	ra,0x5
 80009e8:	3ac080e7          	jalr	940(ra) # 8005d90 <clear_queues>
                char header[] = "Time;A0;A1;A2;A3;A4;A5;A6;A7\n";
 80009ec:	4679                	li	a2,30
 80009ee:	07498593          	addi	a1,s3,116
 80009f2:	0028                	addi	a0,sp,8
 80009f4:	00006097          	auipc	ra,0x6
 80009f8:	7d0080e7          	jalr	2000(ra) # 80071c4 <memcpy>
                enqueue_string(header);
 80009fc:	520d8793          	addi	a5,s11,1312
 8000a00:	978a                	add	a5,a5,sp
 8000a02:	ae840513          	addi	a0,s0,-1304
 8000a06:	953e                	add	a0,a0,a5
 8000a08:	00005097          	auipc	ra,0x5
 8000a0c:	202080e7          	jalr	514(ra) # 8005c0a <enqueue_string>
                millisec = 0;
 8000a10:	530c8793          	addi	a5,s9,1328 # 20000530 <millisec>
 8000a14:	0007a023          	sw	zero,0(a5)
                seconds = 0;
 8000a18:	200007b7          	lui	a5,0x20000
 8000a1c:	5207ac23          	sw	zero,1336(a5) # 20000538 <seconds>
                set_state(RUNNING);
 8000a20:	4501                	li	a0,0
                minutes = 0;
 8000a22:	200007b7          	lui	a5,0x20000
 8000a26:	5207aa23          	sw	zero,1332(a5) # 20000534 <minutes>
                set_state(RUNNING);
 8000a2a:	00006097          	auipc	ra,0x6
 8000a2e:	8ca080e7          	jalr	-1846(ra) # 80062f4 <set_state>
                write = 1;
 8000a32:	0124a023          	sw	s2,0(s1)
                while(millis() < start_time);
 8000a36:	20000937          	lui	s2,0x20000
 8000a3a:	00005097          	auipc	ra,0x5
 8000a3e:	14e080e7          	jalr	334(ra) # 8005b88 <millis>
 8000a42:	53c90793          	addi	a5,s2,1340 # 2000053c <start_time>
 8000a46:	439c                	lw	a5,0(a5)
 8000a48:	fef549e3          	blt	a0,a5,8000a3a <main+0x386>
                timer_interrupt_config();
 8000a4c:	00005097          	auipc	ra,0x5
 8000a50:	f00080e7          	jalr	-256(ra) # 800594c <timer_interrupt_config>
                eclic_global_interrupt_enable();  
 8000a54:	00000097          	auipc	ra,0x0
 8000a58:	53c080e7          	jalr	1340(ra) # 8000f90 <eclic_global_interrupt_enable>
                break;
 8000a5c:	bb45                	j	800080c <main+0x158>
                timer_interrupt_disable(TIMER1, TIMER_INT_CH0);
 8000a5e:	4589                	li	a1,2
 8000a60:	40000537          	lui	a0,0x40000
 8000a64:	00001097          	auipc	ra,0x1
 8000a68:	d1a080e7          	jalr	-742(ra) # 800177e <timer_interrupt_disable>
                eclic_global_interrupt_disable();
 8000a6c:	00000097          	auipc	ra,0x0
 8000a70:	52a080e7          	jalr	1322(ra) # 8000f96 <eclic_global_interrupt_disable>
                write_to_sd[0] = '\0';
 8000a74:	6705                	lui	a4,0x1
 8000a76:	52070793          	addi	a5,a4,1312 # 1520 <__stack_size+0x520>
 8000a7a:	978a                	add	a5,a5,sp
 8000a7c:	00878933          	add	s2,a5,s0
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a80:	52070793          	addi	a5,a4,1312
 8000a84:	ba840d13          	addi	s10,s0,-1112
 8000a88:	978a                	add	a5,a5,sp
                write_to_sd[0] = '\0';
 8000a8a:	00090023          	sb	zero,0(s2)
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000a8e:	9d3e                	add	s10,s10,a5
                while(empty_string_queue(write_to_sd, 8)){
 8000a90:	45a1                	li	a1,8
 8000a92:	854a                	mv	a0,s2
 8000a94:	00005097          	auipc	ra,0x5
 8000a98:	290080e7          	jalr	656(ra) # 8005d24 <empty_string_queue>
 8000a9c:	e505                	bnez	a0,8000ac4 <main+0x410>
                f_close(&fil);
 8000a9e:	6785                	lui	a5,0x1
 8000aa0:	52078793          	addi	a5,a5,1312 # 1520 <__stack_size+0x520>
 8000aa4:	978a                	add	a5,a5,sp
 8000aa6:	ba840513          	addi	a0,s0,-1112
 8000aaa:	953e                	add	a0,a0,a5
 8000aac:	00003097          	auipc	ra,0x3
 8000ab0:	86e080e7          	jalr	-1938(ra) # 800331a <f_close>
                set_state(RUNNING);
 8000ab4:	4501                	li	a0,0
                write = 0;
 8000ab6:	0004a023          	sw	zero,0(s1)
                set_state(RUNNING);
 8000aba:	00006097          	auipc	ra,0x6
 8000abe:	83a080e7          	jalr	-1990(ra) # 80062f4 <set_state>
                break;
 8000ac2:	b3a9                	j	800080c <main+0x158>
                    f_write(&fil, write_to_sd, strlen(write_to_sd), &bw); // testa byt strlen till buf_size för bättre prestanda
 8000ac4:	854a                	mv	a0,s2
 8000ac6:	00006097          	auipc	ra,0x6
 8000aca:	78a080e7          	jalr	1930(ra) # 8007250 <strlen>
 8000ace:	862a                	mv	a2,a0
 8000ad0:	86d6                	mv	a3,s5
 8000ad2:	85ca                	mv	a1,s2
 8000ad4:	856a                	mv	a0,s10
 8000ad6:	00002097          	auipc	ra,0x2
 8000ada:	48c080e7          	jalr	1164(ra) # 8002f62 <f_write>
                    f_sync(&fil);
 8000ade:	856a                	mv	a0,s10
 8000ae0:	00002097          	auipc	ra,0x2
 8000ae4:	68a080e7          	jalr	1674(ra) # 800316a <f_sync>
                    write_to_sd[0] = '\0';
 8000ae8:	00090023          	sb	zero,0(s2)
 8000aec:	b755                	j	8000a90 <main+0x3dc>
                        led_off_B0();
 8000aee:	00005097          	auipc	ra,0x5
 8000af2:	e4a080e7          	jalr	-438(ra) # 8005938 <led_off_B0>
                    blink = 0;
 8000af6:	4a01                	li	s4,0
                        onOff = 1;
 8000af8:	4b85                	li	s7,1
 8000afa:	bb61                	j	8000892 <main+0x1de>
                }else if(!strcmp(read_buf_ble, BLUETOOTH_STOP_MESSAGE)){
 8000afc:	0ac98593          	addi	a1,s3,172
 8000b00:	854a                	mv	a0,s2
 8000b02:	00006097          	auipc	ra,0x6
 8000b06:	736080e7          	jalr	1846(ra) # 8007238 <strcmp>
 8000b0a:	e525                	bnez	a0,8000b72 <main+0x4be>
                    send_radio("empty",5);
 8000b0c:	08000537          	lui	a0,0x8000
 8000b10:	4595                	li	a1,5
 8000b12:	46c50513          	addi	a0,a0,1132 # 800046c <_std_dev_req+0xdc>
 8000b16:	00005097          	auipc	ra,0x5
 8000b1a:	42a080e7          	jalr	1066(ra) # 8005f40 <send_radio>
                    delay_1ms(50);
 8000b1e:	03200513          	li	a0,50
 8000b22:	00003097          	auipc	ra,0x3
 8000b26:	2e6080e7          	jalr	742(ra) # 8003e08 <delay_1ms>
                    send_radio("stopp0", 6);
 8000b2a:	08000537          	lui	a0,0x8000
 8000b2e:	4599                	li	a1,6
 8000b30:	3e050513          	addi	a0,a0,992 # 80003e0 <_std_dev_req+0x50>
 8000b34:	00005097          	auipc	ra,0x5
 8000b38:	40c080e7          	jalr	1036(ra) # 8005f40 <send_radio>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000b3c:	05000613          	li	a2,80
 8000b40:	4581                	li	a1,0
 8000b42:	854a                	mv	a0,s2
 8000b44:	00006097          	auipc	ra,0x6
 8000b48:	696080e7          	jalr	1686(ra) # 80071da <memset>
                    set_state(STOP);
 8000b4c:	4509                	li	a0,2
 8000b4e:	00005097          	auipc	ra,0x5
 8000b52:	7a6080e7          	jalr	1958(ra) # 80062f4 <set_state>
                    send_data_to_phone(finapressHandle_start_stop,0x00);
 8000b56:	4581                	li	a1,0
 8000b58:	07500513          	li	a0,117
 8000b5c:	00005097          	auipc	ra,0x5
 8000b60:	b4a080e7          	jalr	-1206(ra) # 80056a6 <send_data_to_phone>
                    write = 0;
 8000b64:	0004a023          	sw	zero,0(s1)
                    led_off_B1();
 8000b68:	00005097          	auipc	ra,0x5
 8000b6c:	da8080e7          	jalr	-600(ra) # 8005910 <led_off_B1>
 8000b70:	b3c9                	j	8000932 <main+0x27e>
                }else if(!strcmp(read_buf_ble, RUNNING_MSG)){
 8000b72:	0bc98593          	addi	a1,s3,188
 8000b76:	854a                	mv	a0,s2
 8000b78:	00006097          	auipc	ra,0x6
 8000b7c:	6c0080e7          	jalr	1728(ra) # 8007238 <strcmp>
 8000b80:	da0519e3          	bnez	a0,8000932 <main+0x27e>
                    memset(read_buf_ble, '\0', sizeof(read_buf_ble));
 8000b84:	05000613          	li	a2,80
 8000b88:	4581                	li	a1,0
 8000b8a:	854a                	mv	a0,s2
 8000b8c:	00006097          	auipc	ra,0x6
 8000b90:	64e080e7          	jalr	1614(ra) # 80071da <memset>
 8000b94:	bb79                	j	8000932 <main+0x27e>

08000b96 <adc_deinit>:
    \param[in]  adc_periph: ADCx, x=0,1
    \param[out] none
    \retval     none
*/
void adc_deinit(uint32_t adc_periph)
{
 8000b96:	1141                	addi	sp,sp,-16
    switch(adc_periph){
 8000b98:	400127b7          	lui	a5,0x40012
{
 8000b9c:	c606                	sw	ra,12(sp)
    switch(adc_periph){
 8000b9e:	40078793          	addi	a5,a5,1024 # 40012400 <_sp+0x2000a400>
 8000ba2:	00f50b63          	beq	a0,a5,8000bb8 <adc_deinit+0x22>
 8000ba6:	400137b7          	lui	a5,0x40013
 8000baa:	80078793          	addi	a5,a5,-2048 # 40012800 <_sp+0x2000a800>
 8000bae:	02f50363          	beq	a0,a5,8000bd4 <adc_deinit+0x3e>
        rcu_periph_reset_disable(RCU_ADC1RST);
        break;
    default:
        break;
    }
}
 8000bb2:	40b2                	lw	ra,12(sp)
 8000bb4:	0141                	addi	sp,sp,16
 8000bb6:	8082                	ret
        rcu_periph_reset_enable(RCU_ADC0RST);
 8000bb8:	30900513          	li	a0,777
 8000bbc:	00000097          	auipc	ra,0x0
 8000bc0:	4ec080e7          	jalr	1260(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC0RST);
 8000bc4:	30900513          	li	a0,777
}
 8000bc8:	40b2                	lw	ra,12(sp)
 8000bca:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000bcc:	00000317          	auipc	t1,0x0
 8000bd0:	4f430067          	jr	1268(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_ADC1RST);
 8000bd4:	30a00513          	li	a0,778
 8000bd8:	00000097          	auipc	ra,0x0
 8000bdc:	4d0080e7          	jalr	1232(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_ADC1RST);
 8000be0:	30a00513          	li	a0,778
 8000be4:	b7d5                	j	8000bc8 <adc_deinit+0x32>

08000be6 <adc_mode_config>:
    \param[out] none
    \retval     none
*/
void adc_mode_config(uint32_t mode)
{
    ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
 8000be6:	400127b7          	lui	a5,0x40012
 8000bea:	4047a703          	lw	a4,1028(a5) # 40012404 <_sp+0x2000a404>
 8000bee:	fff106b7          	lui	a3,0xfff10
 8000bf2:	16fd                	addi	a3,a3,-1
 8000bf4:	8f75                	and	a4,a4,a3
 8000bf6:	40e7a223          	sw	a4,1028(a5)
    ADC_CTL0(ADC0) |= mode;
 8000bfa:	4047a703          	lw	a4,1028(a5)
 8000bfe:	8d59                	or	a0,a0,a4
 8000c00:	40a7a223          	sw	a0,1028(a5)
}
 8000c04:	8082                	ret

08000c06 <adc_data_alignment_config>:
*/
void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
{
    if(ADC_DATAALIGN_RIGHT != data_alignment){
        /* MSB alignment */
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000c06:	451c                	lw	a5,8(a0)
    if(ADC_DATAALIGN_RIGHT != data_alignment){
 8000c08:	c599                	beqz	a1,8000c16 <adc_data_alignment_config+0x10>
        ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
 8000c0a:	6705                	lui	a4,0x1
 8000c0c:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
 8000c10:	8fd9                	or	a5,a5,a4
    }else{
        /* LSB alignment */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000c12:	c51c                	sw	a5,8(a0)
    }
}
 8000c14:	8082                	ret
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
 8000c16:	777d                	lui	a4,0xfffff
 8000c18:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 8000c1c:	8ff9                	and	a5,a5,a4
 8000c1e:	bfd5                	j	8000c12 <adc_data_alignment_config+0xc>

08000c20 <adc_enable>:
    \param[out] none
    \retval     none
*/
void adc_enable(uint32_t adc_periph)
{
    if((uint32_t)RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
 8000c20:	451c                	lw	a5,8(a0)
 8000c22:	8b85                	andi	a5,a5,1
 8000c24:	e789                	bnez	a5,8000c2e <adc_enable+0xe>
        /* enable ADC */
        ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
 8000c26:	451c                	lw	a5,8(a0)
 8000c28:	0017e793          	ori	a5,a5,1
 8000c2c:	c51c                	sw	a5,8(a0)
    }       
}
 8000c2e:	8082                	ret

08000c30 <adc_calibration_enable>:
    \retval     none
*/
void adc_calibration_enable(uint32_t adc_periph)
{
    /* reset the selected ADC1 calibration registers */
    ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
 8000c30:	451c                	lw	a5,8(a0)
 8000c32:	00850713          	addi	a4,a0,8
 8000c36:	0087e793          	ori	a5,a5,8
 8000c3a:	c51c                	sw	a5,8(a0)
    /* check the RSTCLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
 8000c3c:	431c                	lw	a5,0(a4)
 8000c3e:	8ba1                	andi	a5,a5,8
 8000c40:	fff5                	bnez	a5,8000c3c <adc_calibration_enable+0xc>
    }
    /* enable ADC calibration process */
    ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
 8000c42:	451c                	lw	a5,8(a0)
 8000c44:	0047e793          	ori	a5,a5,4
 8000c48:	c51c                	sw	a5,8(a0)
    /* check the CLB bit state */
    while((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
 8000c4a:	431c                	lw	a5,0(a4)
 8000c4c:	8b91                	andi	a5,a5,4
 8000c4e:	fff5                	bnez	a5,8000c4a <adc_calibration_enable+0x1a>
    }
}
 8000c50:	8082                	ret

08000c52 <adc_dma_mode_enable>:
    \retval     none
*/
void adc_dma_mode_enable(uint32_t adc_periph)
{
    /* enable DMA request */
    ADC_CTL1(adc_periph) |= (uint32_t)(ADC_CTL1_DMA);
 8000c52:	451c                	lw	a5,8(a0)
 8000c54:	1007e793          	ori	a5,a5,256
 8000c58:	c51c                	sw	a5,8(a0)
}
 8000c5a:	8082                	ret

08000c5c <adc_discontinuous_mode_config>:
    \retval     none
*/
void adc_discontinuous_mode_config(uint32_t adc_periph, uint8_t adc_channel_group, uint8_t length)
{
    /* disable discontinuous mode of regular & inserted channel */
    ADC_CTL0(adc_periph) &= ~((uint32_t)(ADC_CTL0_DISRC | ADC_CTL0_DISIC));
 8000c5c:	415c                	lw	a5,4(a0)
 8000c5e:	7779                	lui	a4,0xffffe
 8000c60:	7ff70713          	addi	a4,a4,2047 # ffffe7ff <_sp+0xdfff67ff>
 8000c64:	8ff9                	and	a5,a5,a4
 8000c66:	c15c                	sw	a5,4(a0)
    switch(adc_channel_group){
 8000c68:	4785                	li	a5,1
 8000c6a:	00f58663          	beq	a1,a5,8000c76 <adc_discontinuous_mode_config+0x1a>
 8000c6e:	4789                	li	a5,2
 8000c70:	02f58663          	beq	a1,a5,8000c9c <adc_discontinuous_mode_config+0x40>
 8000c74:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* config the number of conversions in discontinuous mode */
        ADC_CTL0(adc_periph) &= ~((uint32_t)ADC_CTL0_DISNUM);
 8000c76:	415c                	lw	a5,4(a0)
 8000c78:	7749                	lui	a4,0xffff2
 8000c7a:	177d                	addi	a4,a4,-1
 8000c7c:	8ff9                	and	a5,a5,a4
 8000c7e:	c15c                	sw	a5,4(a0)
        ADC_CTL0(adc_periph) |= CTL0_DISNUM(((uint32_t)length - ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000c80:	415c                	lw	a5,4(a0)
 8000c82:	167d                	addi	a2,a2,-1
 8000c84:	6739                	lui	a4,0xe
 8000c86:	0636                	slli	a2,a2,0xd
 8000c88:	8e79                	and	a2,a2,a4
 8000c8a:	8e5d                	or	a2,a2,a5
 8000c8c:	c150                	sw	a2,4(a0)
        /* enable regular channel group discontinuous mode */
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISRC;
 8000c8e:	415c                	lw	a5,4(a0)
 8000c90:	6705                	lui	a4,0x1
 8000c92:	80070713          	addi	a4,a4,-2048 # 800 <__dbg_stack_size+0x800>
        break;
    case ADC_INSERTED_CHANNEL:
        /* enable inserted channel group discontinuous mode */
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
 8000c96:	8fd9                	or	a5,a5,a4
 8000c98:	c15c                	sw	a5,4(a0)
    case ADC_CHANNEL_DISCON_DISABLE:
        /* disable discontinuous mode of regular & inserted channel */
    default:
        break;
    }
}
 8000c9a:	8082                	ret
        ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
 8000c9c:	415c                	lw	a5,4(a0)
 8000c9e:	6705                	lui	a4,0x1
 8000ca0:	bfdd                	j	8000c96 <adc_discontinuous_mode_config+0x3a>

08000ca2 <adc_channel_length_config>:
    \param[out] none
    \retval     none
*/
void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
{
    switch(adc_channel_group){
 8000ca2:	4785                	li	a5,1
 8000ca4:	00f58663          	beq	a1,a5,8000cb0 <adc_channel_length_config+0xe>
 8000ca8:	4789                	li	a5,2
 8000caa:	02f58263          	beq	a1,a5,8000cce <adc_channel_length_config+0x2c>
 8000cae:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure the length of regular channel group */
        ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
 8000cb0:	555c                	lw	a5,44(a0)
 8000cb2:	ff100737          	lui	a4,0xff100
 8000cb6:	177d                	addi	a4,a4,-1
 8000cb8:	8ff9                	and	a5,a5,a4
 8000cba:	d55c                	sw	a5,44(a0)
        ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000cbc:	555c                	lw	a5,44(a0)
 8000cbe:	167d                	addi	a2,a2,-1
 8000cc0:	0652                	slli	a2,a2,0x14
 8000cc2:	00f00737          	lui	a4,0xf00
 8000cc6:	8e79                	and	a2,a2,a4
 8000cc8:	8e5d                	or	a2,a2,a5
 8000cca:	d550                	sw	a2,44(a0)
        break;
 8000ccc:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure the length of inserted channel group */
        ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
 8000cce:	5d1c                	lw	a5,56(a0)
 8000cd0:	ffd00737          	lui	a4,0xffd00
 8000cd4:	177d                	addi	a4,a4,-1
 8000cd6:	8ff9                	and	a5,a5,a4
 8000cd8:	dd1c                	sw	a5,56(a0)
        ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
 8000cda:	5d1c                	lw	a5,56(a0)
 8000cdc:	167d                	addi	a2,a2,-1
 8000cde:	0652                	slli	a2,a2,0x14
 8000ce0:	00300737          	lui	a4,0x300
 8000ce4:	8e79                	and	a2,a2,a4
 8000ce6:	8e5d                	or	a2,a2,a5
 8000ce8:	dd10                	sw	a2,56(a0)
        break;
    default:
        break;
    }
}
 8000cea:	8082                	ret

08000cec <adc_regular_channel_config>:
void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
{
    uint32_t rsq,sampt;
    
    /* ADC regular sequence config */
    if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
 8000cec:	4715                	li	a4,5
 8000cee:	04b76363          	bltu	a4,a1,8000d34 <adc_regular_channel_config+0x48>
        /* the regular group sequence rank is smaller than six */
        rsq = ADC_RSQ2(adc_periph);
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000cf2:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ2(adc_periph);
 8000cf6:	03452803          	lw	a6,52(a0)
        rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
 8000cfa:	47fd                	li	a5,31
 8000cfc:	00b797b3          	sll	a5,a5,a1
 8000d00:	fff7c793          	not	a5,a5
 8000d04:	0107f7b3          	and	a5,a5,a6
        /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
 8000d08:	00b615b3          	sll	a1,a2,a1
 8000d0c:	8ddd                	or	a1,a1,a5
        ADC_RSQ2(adc_periph) = rsq;
 8000d0e:	d94c                	sw	a1,52(a0)
        ADC_RSQ0(adc_periph) = rsq;
    }else{
    }
    
    /* ADC sampling time config */
    if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
 8000d10:	47a5                	li	a5,9
 8000d12:	06c7e963          	bltu	a5,a2,8000d84 <adc_regular_channel_config+0x98>
        /* the regular group sequence rank is smaller than ten */
        sampt = ADC_SAMPT1(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000d16:	478d                	li	a5,3
 8000d18:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT1(adc_periph);
 8000d1c:	490c                	lw	a1,16(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
 8000d1e:	471d                	li	a4,7
 8000d20:	00c71733          	sll	a4,a4,a2
 8000d24:	fff74713          	not	a4,a4
 8000d28:	8f6d                	and	a4,a4,a1
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
 8000d2a:	00c69633          	sll	a2,a3,a2
 8000d2e:	8e59                	or	a2,a2,a4
        ADC_SAMPT1(adc_periph) = sampt;
 8000d30:	c910                	sw	a2,16(a0)
 8000d32:	8082                	ret
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
 8000d34:	47ad                	li	a5,11
 8000d36:	02b7e363          	bltu	a5,a1,8000d5c <adc_regular_channel_config+0x70>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000d3a:	15e9                	addi	a1,a1,-6
 8000d3c:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ1(adc_periph);
 8000d40:	03052803          	lw	a6,48(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
 8000d44:	47fd                	li	a5,31
 8000d46:	00b797b3          	sll	a5,a5,a1
 8000d4a:	fff7c793          	not	a5,a5
 8000d4e:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
 8000d52:	00b615b3          	sll	a1,a2,a1
 8000d56:	8ddd                	or	a1,a1,a5
        ADC_RSQ1(adc_periph) = rsq;
 8000d58:	d90c                	sw	a1,48(a0)
 8000d5a:	bf5d                	j	8000d10 <adc_regular_channel_config+0x24>
    }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
 8000d5c:	47bd                	li	a5,15
 8000d5e:	fab7e9e3          	bltu	a5,a1,8000d10 <adc_regular_channel_config+0x24>
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000d62:	15d1                	addi	a1,a1,-12
 8000d64:	02e585b3          	mul	a1,a1,a4
        rsq = ADC_RSQ0(adc_periph);
 8000d68:	02c52803          	lw	a6,44(a0)
        rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
 8000d6c:	47fd                	li	a5,31
 8000d6e:	00b797b3          	sll	a5,a5,a1
 8000d72:	fff7c793          	not	a5,a5
 8000d76:	0107f7b3          	and	a5,a5,a6
        rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
 8000d7a:	00b615b3          	sll	a1,a2,a1
 8000d7e:	8ddd                	or	a1,a1,a5
        ADC_RSQ0(adc_periph) = rsq;
 8000d80:	d54c                	sw	a1,44(a0)
 8000d82:	b779                	j	8000d10 <adc_regular_channel_config+0x24>
    }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
 8000d84:	47c5                	li	a5,17
 8000d86:	02c7e163          	bltu	a5,a2,8000da8 <adc_regular_channel_config+0xbc>
        /* the regular group sequence rank is smaller than eighteen */
        sampt = ADC_SAMPT0(adc_periph);
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000d8a:	478d                	li	a5,3
 8000d8c:	1659                	addi	a2,a2,-10
 8000d8e:	02f60633          	mul	a2,a2,a5
        sampt = ADC_SAMPT0(adc_periph);
 8000d92:	4558                	lw	a4,12(a0)
        sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
 8000d94:	479d                	li	a5,7
 8000d96:	00c797b3          	sll	a5,a5,a2
 8000d9a:	fff7c793          	not	a5,a5
 8000d9e:	8ff9                	and	a5,a5,a4
        /* channel sample time set*/
        sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
 8000da0:	00c69633          	sll	a2,a3,a2
 8000da4:	8fd1                	or	a5,a5,a2
        ADC_SAMPT0(adc_periph) = sampt;
 8000da6:	c55c                	sw	a5,12(a0)
    }else{
    }
}
 8000da8:	8082                	ret

08000daa <adc_external_trigger_source_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
{   
    switch(adc_channel_group){
 8000daa:	4785                	li	a5,1
 8000dac:	00f58663          	beq	a1,a5,8000db8 <adc_external_trigger_source_config+0xe>
 8000db0:	4789                	li	a5,2
 8000db2:	00f58d63          	beq	a1,a5,8000dcc <adc_external_trigger_source_config+0x22>
 8000db6:	8082                	ret
    case ADC_REGULAR_CHANNEL:
        /* configure ADC regular group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
 8000db8:	4514                	lw	a3,8(a0)
 8000dba:	fff205b7          	lui	a1,0xfff20
 8000dbe:	15fd                	addi	a1,a1,-1
 8000dc0:	8eed                	and	a3,a3,a1
 8000dc2:	c514                	sw	a3,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000dc4:	4518                	lw	a4,8(a0)
 8000dc6:	8f51                	or	a4,a4,a2
 8000dc8:	c518                	sw	a4,8(a0)
        break;
 8000dca:	8082                	ret
    case ADC_INSERTED_CHANNEL:
        /* configure ADC inserted group external trigger source */
        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
 8000dcc:	4518                	lw	a4,8(a0)
 8000dce:	76e5                	lui	a3,0xffff9
 8000dd0:	16fd                	addi	a3,a3,-1
 8000dd2:	8f75                	and	a4,a4,a3
 8000dd4:	c518                	sw	a4,8(a0)
        ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
 8000dd6:	451c                	lw	a5,8(a0)
 8000dd8:	8fd1                	or	a5,a5,a2
 8000dda:	c51c                	sw	a5,8(a0)
        break;
    default:
        break;
    }
}
 8000ddc:	8082                	ret

08000dde <adc_external_trigger_config>:
    \param[out] none
    \retval     none
*/
void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
{
    if(newvalue){
 8000dde:	0015f793          	andi	a5,a1,1
 8000de2:	8989                	andi	a1,a1,2
 8000de4:	ce09                	beqz	a2,8000dfe <adc_external_trigger_config+0x20>
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000de6:	c791                	beqz	a5,8000df2 <adc_external_trigger_config+0x14>
            /* enable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
 8000de8:	451c                	lw	a5,8(a0)
 8000dea:	00100737          	lui	a4,0x100
 8000dee:	8fd9                	or	a5,a5,a4
 8000df0:	c51c                	sw	a5,8(a0)
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000df2:	c589                	beqz	a1,8000dfc <adc_external_trigger_config+0x1e>
            /* enable ADC inserted channel group external trigger */
            ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
 8000df4:	451c                	lw	a5,8(a0)
 8000df6:	6721                	lui	a4,0x8
 8000df8:	8fd9                	or	a5,a5,a4
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
        }
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
            /* disable ADC regular channel group external trigger */
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000dfa:	c51c                	sw	a5,8(a0)
        }      
    }
}
 8000dfc:	8082                	ret
        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000dfe:	c799                	beqz	a5,8000e0c <adc_external_trigger_config+0x2e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
 8000e00:	451c                	lw	a5,8(a0)
 8000e02:	fff00737          	lui	a4,0xfff00
 8000e06:	177d                	addi	a4,a4,-1
 8000e08:	8ff9                	and	a5,a5,a4
 8000e0a:	c51c                	sw	a5,8(a0)
        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000e0c:	d9e5                	beqz	a1,8000dfc <adc_external_trigger_config+0x1e>
            ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
 8000e0e:	451c                	lw	a5,8(a0)
 8000e10:	7761                	lui	a4,0xffff8
 8000e12:	177d                	addi	a4,a4,-1
 8000e14:	8ff9                	and	a5,a5,a4
 8000e16:	b7d5                	j	8000dfa <adc_external_trigger_config+0x1c>

08000e18 <adc_software_trigger_enable>:
    \param[out] none
    \retval     none
*/
void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
{
    if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
 8000e18:	0015f793          	andi	a5,a1,1
 8000e1c:	c791                	beqz	a5,8000e28 <adc_software_trigger_enable+0x10>
        /* enable ADC regular channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
 8000e1e:	451c                	lw	a5,8(a0)
 8000e20:	00400737          	lui	a4,0x400
 8000e24:	8fd9                	or	a5,a5,a4
 8000e26:	c51c                	sw	a5,8(a0)
    }
    if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
 8000e28:	8989                	andi	a1,a1,2
 8000e2a:	c591                	beqz	a1,8000e36 <adc_software_trigger_enable+0x1e>
        /* enable ADC inserted channel group software trigger */
        ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
 8000e2c:	451c                	lw	a5,8(a0)
 8000e2e:	00200737          	lui	a4,0x200
 8000e32:	8fd9                	or	a5,a5,a4
 8000e34:	c51c                	sw	a5,8(a0)
    }
}
 8000e36:	8082                	ret

08000e38 <adc_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus adc_flag_get(uint32_t adc_periph, uint32_t adc_flag)
{
    FlagStatus reval = RESET;
    if(ADC_STAT(adc_periph) & adc_flag){
 8000e38:	4108                	lw	a0,0(a0)
 8000e3a:	8d6d                	and	a0,a0,a1
        reval = SET;
    }
    return reval;
}
 8000e3c:	00a03533          	snez	a0,a0
 8000e40:	8082                	ret

08000e42 <adc_flag_clear>:
    \param[out] none
    \retval     none
*/
void adc_flag_clear(uint32_t adc_periph, uint32_t adc_flag)
{
    ADC_STAT(adc_periph) &= ~((uint32_t)adc_flag);
 8000e42:	411c                	lw	a5,0(a0)
 8000e44:	fff5c593          	not	a1,a1
 8000e48:	8dfd                	and	a1,a1,a5
 8000e4a:	c10c                	sw	a1,0(a0)
}
 8000e4c:	8082                	ret

08000e4e <dma_deinit>:
*/
static ErrStatus dma_periph_and_channel_check(uint32_t dma_periph, dma_channel_enum channelx)
{
    ErrStatus val = SUCCESS;

    if(DMA1 == dma_periph){
 8000e4e:	400207b7          	lui	a5,0x40020
 8000e52:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000e56:	00f51663          	bne	a0,a5,8000e62 <dma_deinit+0x14>
        /* for DMA1, the channel is from DMA_CH0 to DMA_CH4 */
        if(channelx > DMA_CH4){
 8000e5a:	4791                	li	a5,4
 8000e5c:	00b7f363          	bgeu	a5,a1,8000e62 <dma_deinit+0x14>
		DMA_WRONG_HANDLE
 8000e60:	a001                	j	8000e60 <dma_deinit+0x12>
	DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
 8000e62:	47d1                	li	a5,20
 8000e64:	02f587b3          	mul	a5,a1,a5
 8000e68:	97aa                	add	a5,a5,a0
 8000e6a:	4798                	lw	a4,8(a5)
 8000e6c:	9b79                	andi	a4,a4,-2
 8000e6e:	c798                	sw	a4,8(a5)
	DMA_CHCTL(dma_periph, channelx) = DMA_CHCTL_RESET_VALUE;
 8000e70:	0007a423          	sw	zero,8(a5)
	DMA_CHCNT(dma_periph, channelx) = DMA_CHCNT_RESET_VALUE;
 8000e74:	0007a623          	sw	zero,12(a5)
	DMA_CHPADDR(dma_periph, channelx) = DMA_CHPADDR_RESET_VALUE;
 8000e78:	0007a823          	sw	zero,16(a5)
	DMA_CHMADDR(dma_periph, channelx) = DMA_CHMADDR_RESET_VALUE;
 8000e7c:	0007aa23          	sw	zero,20(a5)
	DMA_INTC(dma_periph) |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, (uint32_t)channelx);
 8000e80:	4158                	lw	a4,4(a0)
 8000e82:	00259793          	slli	a5,a1,0x2
 8000e86:	45bd                	li	a1,15
 8000e88:	00f595b3          	sll	a1,a1,a5
 8000e8c:	8dd9                	or	a1,a1,a4
 8000e8e:	c14c                	sw	a1,4(a0)
}
 8000e90:	8082                	ret

08000e92 <dma_init>:
    if(DMA1 == dma_periph){
 8000e92:	400207b7          	lui	a5,0x40020
 8000e96:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000e9a:	00f51663          	bne	a0,a5,8000ea6 <dma_init+0x14>
        if(channelx > DMA_CH4){
 8000e9e:	4791                	li	a5,4
 8000ea0:	00b7f363          	bgeu	a5,a1,8000ea6 <dma_init+0x14>
        DMA_WRONG_HANDLE
 8000ea4:	a001                	j	8000ea4 <dma_init+0x12>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000ea6:	47d1                	li	a5,20
 8000ea8:	02f585b3          	mul	a1,a1,a5
 8000eac:	421c                	lw	a5,0(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000eae:	7771                	lui	a4,0xffffc
 8000eb0:	0ff70713          	addi	a4,a4,255 # ffffc0ff <_sp+0xdfff40ff>
    DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
 8000eb4:	952e                	add	a0,a0,a1
 8000eb6:	c91c                	sw	a5,16(a0)
    DMA_CHMADDR(dma_periph, channelx) = init_struct->memory_addr;
 8000eb8:	461c                	lw	a5,8(a2)
 8000eba:	c95c                	sw	a5,20(a0)
    DMA_CHCNT(dma_periph, channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 8000ebc:	01065783          	lhu	a5,16(a2) # 1010 <__stack_size+0x10>
 8000ec0:	c55c                	sw	a5,12(a0)
    ctl = DMA_CHCTL(dma_periph, channelx);
 8000ec2:	451c                	lw	a5,8(a0)
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000ec4:	4654                	lw	a3,12(a2)
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 8000ec6:	8f7d                	and	a4,a4,a5
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8000ec8:	425c                	lw	a5,4(a2)
 8000eca:	8fd5                	or	a5,a5,a3
 8000ecc:	4a54                	lw	a3,20(a2)
 8000ece:	8fd5                	or	a5,a5,a3
 8000ed0:	8fd9                	or	a5,a5,a4
    DMA_CHCTL(dma_periph, channelx) = ctl;
 8000ed2:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc){
 8000ed4:	01864703          	lbu	a4,24(a2)
 8000ed8:	4785                	li	a5,1
 8000eda:	02f71663          	bne	a4,a5,8000f06 <dma_init+0x74>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
 8000ede:	451c                	lw	a5,8(a0)
 8000ee0:	0407e793          	ori	a5,a5,64
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000ee4:	c51c                	sw	a5,8(a0)
    if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc){
 8000ee6:	01964703          	lbu	a4,25(a2)
 8000eea:	4785                	li	a5,1
 8000eec:	02f71163          	bne	a4,a5,8000f0e <dma_init+0x7c>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
 8000ef0:	451c                	lw	a5,8(a0)
 8000ef2:	0807e793          	ori	a5,a5,128
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000ef6:	c51c                	sw	a5,8(a0)
    if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction){
 8000ef8:	01a64783          	lbu	a5,26(a2)
 8000efc:	ef89                	bnez	a5,8000f16 <dma_init+0x84>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
 8000efe:	451c                	lw	a5,8(a0)
 8000f00:	9bbd                	andi	a5,a5,-17
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000f02:	c51c                	sw	a5,8(a0)
}
 8000f04:	8082                	ret
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
 8000f06:	451c                	lw	a5,8(a0)
 8000f08:	fbf7f793          	andi	a5,a5,-65
 8000f0c:	bfe1                	j	8000ee4 <dma_init+0x52>
        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
 8000f0e:	451c                	lw	a5,8(a0)
 8000f10:	f7f7f793          	andi	a5,a5,-129
 8000f14:	b7cd                	j	8000ef6 <dma_init+0x64>
        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
 8000f16:	451c                	lw	a5,8(a0)
 8000f18:	0107e793          	ori	a5,a5,16
 8000f1c:	b7dd                	j	8000f02 <dma_init+0x70>

08000f1e <dma_circulation_enable>:
    if(DMA1 == dma_periph){
 8000f1e:	400207b7          	lui	a5,0x40020
 8000f22:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f26:	00f51663          	bne	a0,a5,8000f32 <dma_circulation_enable+0x14>
        if(channelx > DMA_CH4){
 8000f2a:	4791                	li	a5,4
 8000f2c:	00b7f363          	bgeu	a5,a1,8000f32 <dma_circulation_enable+0x14>
        DMA_WRONG_HANDLE
 8000f30:	a001                	j	8000f30 <dma_circulation_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CMEN;
 8000f32:	47d1                	li	a5,20
 8000f34:	02f585b3          	mul	a1,a1,a5
 8000f38:	952e                	add	a0,a0,a1
 8000f3a:	451c                	lw	a5,8(a0)
 8000f3c:	0207e793          	ori	a5,a5,32
 8000f40:	c51c                	sw	a5,8(a0)
}
 8000f42:	8082                	ret

08000f44 <dma_circulation_disable>:
    if(DMA1 == dma_periph){
 8000f44:	400207b7          	lui	a5,0x40020
 8000f48:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f4c:	00f51663          	bne	a0,a5,8000f58 <dma_circulation_disable+0x14>
        if(channelx > DMA_CH4){
 8000f50:	4791                	li	a5,4
 8000f52:	00b7f363          	bgeu	a5,a1,8000f58 <dma_circulation_disable+0x14>
        DMA_WRONG_HANDLE
 8000f56:	a001                	j	8000f56 <dma_circulation_disable+0x12>
    DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CMEN;
 8000f58:	47d1                	li	a5,20
 8000f5a:	02f585b3          	mul	a1,a1,a5
 8000f5e:	952e                	add	a0,a0,a1
 8000f60:	451c                	lw	a5,8(a0)
 8000f62:	fdf7f793          	andi	a5,a5,-33
 8000f66:	c51c                	sw	a5,8(a0)
}
 8000f68:	8082                	ret

08000f6a <dma_channel_enable>:
    if(DMA1 == dma_periph){
 8000f6a:	400207b7          	lui	a5,0x40020
 8000f6e:	40078793          	addi	a5,a5,1024 # 40020400 <_sp+0x20018400>
 8000f72:	00f51663          	bne	a0,a5,8000f7e <dma_channel_enable+0x14>
        if(channelx > DMA_CH4){
 8000f76:	4791                	li	a5,4
 8000f78:	00b7f363          	bgeu	a5,a1,8000f7e <dma_channel_enable+0x14>
        DMA_WRONG_HANDLE
 8000f7c:	a001                	j	8000f7c <dma_channel_enable+0x12>
    DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CHEN;
 8000f7e:	47d1                	li	a5,20
 8000f80:	02f585b3          	mul	a1,a1,a5
 8000f84:	952e                	add	a0,a0,a1
 8000f86:	451c                	lw	a5,8(a0)
 8000f88:	0017e793          	ori	a5,a5,1
 8000f8c:	c51c                	sw	a5,8(a0)
}
 8000f8e:	8082                	ret

08000f90 <eclic_global_interrupt_enable>:
    \retval     none
*/
void eclic_global_interrupt_enable(void)
{
    /* set machine interrupt enable bit */
    set_csr(mstatus, MSTATUS_MIE);
 8000f90:	300467f3          	csrrsi	a5,mstatus,8
}
 8000f94:	8082                	ret

08000f96 <eclic_global_interrupt_disable>:
    \retval     none
*/
void eclic_global_interrupt_disable(void)
{
    /* clear machine interrupt enable bit */
    clear_csr(mstatus, MSTATUS_MIE);
 8000f96:	300477f3          	csrrci	a5,mstatus,8
}
 8000f9a:	8082                	ret

08000f9c <eclic_irq_enable>:
    \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
    \param[out] none
    \retval     none
*/
void eclic_irq_enable(uint32_t source, uint8_t level, uint8_t priority)
{
 8000f9c:	1101                	addi	sp,sp,-32
 8000f9e:	ce06                	sw	ra,28(sp)
 8000fa0:	cc22                	sw	s0,24(sp)
 8000fa2:	c432                	sw	a2,8(sp)
 8000fa4:	842a                	mv	s0,a0
 8000fa6:	c62e                	sw	a1,12(sp)
    eclic_enable_interrupt(source);
 8000fa8:	00001097          	auipc	ra,0x1
 8000fac:	c9a080e7          	jalr	-870(ra) # 8001c42 <eclic_enable_interrupt>
    eclic_set_irq_lvl_abs(source, level);
 8000fb0:	45b2                	lw	a1,12(sp)
 8000fb2:	8522                	mv	a0,s0
 8000fb4:	00001097          	auipc	ra,0x1
 8000fb8:	cae080e7          	jalr	-850(ra) # 8001c62 <eclic_set_irq_lvl_abs>
    eclic_set_irq_priority(source, priority);
 8000fbc:	4622                	lw	a2,8(sp)
 8000fbe:	8522                	mv	a0,s0
}
 8000fc0:	4462                	lw	s0,24(sp)
 8000fc2:	40f2                	lw	ra,28(sp)
    eclic_set_irq_priority(source, priority);
 8000fc4:	85b2                	mv	a1,a2
}
 8000fc6:	6105                	addi	sp,sp,32
    eclic_set_irq_priority(source, priority);
 8000fc8:	00001317          	auipc	t1,0x1
 8000fcc:	cf230067          	jr	-782(t1) # 8001cba <eclic_set_irq_priority>

08000fd0 <exti_interrupt_flag_clear>:
 8000fd0:	400107b7          	lui	a5,0x40010
 8000fd4:	40a7aa23          	sw	a0,1044(a5) # 40010414 <_sp+0x20008414>
 8000fd8:	8082                	ret

08000fda <gpio_init>:

    /* GPIO mode configuration */
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));

    /* GPIO speed configuration */
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000fda:	0105f793          	andi	a5,a1,16
    temp_mode = (uint32_t) (mode & ((uint32_t) 0x0FU));
 8000fde:	00f5f893          	andi	a7,a1,15
    if (((uint32_t) 0x00U) != ((uint32_t) mode & ((uint32_t) 0x10U))) {
 8000fe2:	c399                	beqz	a5,8000fe8 <gpio_init+0xe>
        /* output mode max speed:10MHz,2MHz,50MHz */
        temp_mode |= (uint32_t) speed;
 8000fe4:	00c8e8b3          	or	a7,a7,a2
{
 8000fe8:	4781                	li	a5,0
    }

    /* configure the eight low port pins with GPIO_CTL0 */
    for (i = 0U; i < 8U; i++) {
        if ((1U << i) & pin) {
 8000fea:	4e05                	li	t3,1
            reg = GPIO_CTL0(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i);
 8000fec:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 8000fee:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8000ff2:	04800f93          	li	t6,72
    for (i = 0U; i < 8U; i++) {
 8000ff6:	4321                	li	t1,8
        if ((1U << i) & pin) {
 8000ff8:	00fe1633          	sll	a2,t3,a5
 8000ffc:	8e75                	and	a2,a2,a3
 8000ffe:	c21d                	beqz	a2,8001024 <gpio_init+0x4a>
            reg = GPIO_CTL0(gpio_periph);
 8001000:	00279713          	slli	a4,a5,0x2
 8001004:	00052283          	lw	t0,0(a0)
            reg &= ~GPIO_MODE_MASK(i);
 8001008:	00ee9833          	sll	a6,t4,a4
 800100c:	fff84813          	not	a6,a6
 8001010:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i, temp_mode);
 8001014:	00e89733          	sll	a4,a7,a4
 8001018:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 800101c:	05e59963          	bne	a1,t5,800106e <gpio_init+0x94>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001020:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL0 register */
            GPIO_CTL0(gpio_periph) = reg;
 8001022:	c118                	sw	a4,0(a0)
 8001024:	0785                	addi	a5,a5,1
    for (i = 0U; i < 8U; i++) {
 8001026:	fc6799e3          	bne	a5,t1,8000ff8 <gpio_init+0x1e>
        }
    }
    /* configure the eight high port pins with GPIO_CTL1 */
    for (i = 8U; i < 16U; i++) {
        if ((1U << i) & pin) {
 800102a:	4e05                	li	t3,1
            reg = GPIO_CTL1(gpio_periph);

            /* clear the specified pin mode bits */
            reg &= ~GPIO_MODE_MASK(i - 8U);
 800102c:	4ebd                	li	t4,15
            /* set the specified pin mode bits */
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);

            /* set IPD or IPU */
            if (GPIO_MODE_IPD == mode) {
 800102e:	02800f13          	li	t5,40
                /* reset the corresponding OCTL bit */
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
            } else {
                /* set the corresponding OCTL bit */
                if (GPIO_MODE_IPU == mode) {
 8001032:	04800f93          	li	t6,72
    for (i = 8U; i < 16U; i++) {
 8001036:	4341                	li	t1,16
        if ((1U << i) & pin) {
 8001038:	00fe1633          	sll	a2,t3,a5
 800103c:	8e75                	and	a2,a2,a3
 800103e:	c605                	beqz	a2,8001066 <gpio_init+0x8c>
            reg &= ~GPIO_MODE_MASK(i - 8U);
 8001040:	00279713          	slli	a4,a5,0x2
 8001044:	1701                	addi	a4,a4,-32
            reg = GPIO_CTL1(gpio_periph);
 8001046:	00452283          	lw	t0,4(a0)
            reg &= ~GPIO_MODE_MASK(i - 8U);
 800104a:	00ee9833          	sll	a6,t4,a4
 800104e:	fff84813          	not	a6,a6
 8001052:	00587833          	and	a6,a6,t0
            reg |= GPIO_MODE_SET(i - 8U, temp_mode);
 8001056:	00e89733          	sll	a4,a7,a4
 800105a:	01076733          	or	a4,a4,a6
            if (GPIO_MODE_IPD == mode) {
 800105e:	01e59c63          	bne	a1,t5,8001076 <gpio_init+0x9c>
                GPIO_BC(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001062:	c950                	sw	a2,20(a0)
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
                }
            }
            /* set GPIO_CTL1 register */
            GPIO_CTL1(gpio_periph) = reg;
 8001064:	c158                	sw	a4,4(a0)
 8001066:	0785                	addi	a5,a5,1
    for (i = 8U; i < 16U; i++) {
 8001068:	fc6798e3          	bne	a5,t1,8001038 <gpio_init+0x5e>
        }
    }
}
 800106c:	8082                	ret
                if (GPIO_MODE_IPU == mode) {
 800106e:	fbf59ae3          	bne	a1,t6,8001022 <gpio_init+0x48>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 8001072:	c910                	sw	a2,16(a0)
 8001074:	b77d                	j	8001022 <gpio_init+0x48>
                if (GPIO_MODE_IPU == mode) {
 8001076:	fff597e3          	bne	a1,t6,8001064 <gpio_init+0x8a>
                    GPIO_BOP(gpio_periph) = (uint32_t) ((1U << i) & pin);
 800107a:	c910                	sw	a2,16(a0)
 800107c:	b7e5                	j	8001064 <gpio_init+0x8a>

0800107e <gpio_bit_set>:
    \param[out] none
    \retval     none
*/
void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BOP(gpio_periph) = (uint32_t) pin;
 800107e:	c90c                	sw	a1,16(a0)
}
 8001080:	8082                	ret

08001082 <gpio_bit_reset>:
    \param[out] none
    \retval     none
*/
void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
{
    GPIO_BC(gpio_periph) = (uint32_t) pin;
 8001082:	c94c                	sw	a1,20(a0)
}
 8001084:	8082                	ret

08001086 <gpio_bit_write>:
    \param[out] none
    \retval     none
*/
void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
{
    if (RESET != bit_value) {
 8001086:	c219                	beqz	a2,800108c <gpio_bit_write+0x6>
        GPIO_BOP(gpio_periph) = (uint32_t) pin;
 8001088:	c90c                	sw	a1,16(a0)
 800108a:	8082                	ret
    } else {
        GPIO_BC(gpio_periph) = (uint32_t) pin;
 800108c:	c94c                	sw	a1,20(a0)
    }
}
 800108e:	8082                	ret

08001090 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8001090:	400217b7          	lui	a5,0x40021
 8001094:	00655713          	srli	a4,a0,0x6
 8001098:	973e                	add	a4,a4,a5
 800109a:	4314                	lw	a3,0(a4)
 800109c:	4785                	li	a5,1
 800109e:	00a797b3          	sll	a5,a5,a0
 80010a2:	8fd5                	or	a5,a5,a3
 80010a4:	c31c                	sw	a5,0(a4)
}
 80010a6:	8082                	ret

080010a8 <rcu_periph_reset_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
 80010a8:	400217b7          	lui	a5,0x40021
 80010ac:	00655713          	srli	a4,a0,0x6
 80010b0:	973e                	add	a4,a4,a5
 80010b2:	4314                	lw	a3,0(a4)
 80010b4:	4785                	li	a5,1
 80010b6:	00a797b3          	sll	a5,a5,a0
 80010ba:	8fd5                	or	a5,a5,a3
 80010bc:	c31c                	sw	a5,0(a4)
}
 80010be:	8082                	ret

080010c0 <rcu_periph_reset_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
 80010c0:	400217b7          	lui	a5,0x40021
 80010c4:	00655713          	srli	a4,a0,0x6
 80010c8:	973e                	add	a4,a4,a5
 80010ca:	4314                	lw	a3,0(a4)
 80010cc:	4785                	li	a5,1
 80010ce:	00a797b3          	sll	a5,a5,a0
 80010d2:	fff7c793          	not	a5,a5
 80010d6:	8ff5                	and	a5,a5,a3
 80010d8:	c31c                	sw	a5,0(a4)
}
 80010da:	8082                	ret

080010dc <rcu_adc_clock_config>:
void rcu_adc_clock_config(uint32_t adc_psc)
{
    uint32_t reg0;

    /* reset the ADCPSC bits */
    reg0 = RCU_CFG0;
 80010dc:	400217b7          	lui	a5,0x40021
 80010e0:	43dc                	lw	a5,4(a5)
    reg0 &= ~(RCU_CFG0_ADCPSC_2 | RCU_CFG0_ADCPSC);
 80010e2:	efff4737          	lui	a4,0xefff4
 80010e6:	177d                	addi	a4,a4,-1
 80010e8:	8ff9                	and	a5,a5,a4

    /* set the ADC prescaler factor */
    switch(adc_psc){
 80010ea:	4715                	li	a4,5
 80010ec:	00e50e63          	beq	a0,a4,8001108 <rcu_adc_clock_config+0x2c>
 80010f0:	00a76963          	bltu	a4,a0,8001102 <rcu_adc_clock_config+0x26>
 80010f4:	470d                	li	a4,3
 80010f6:	02a77063          	bgeu	a4,a0,8001116 <rcu_adc_clock_config+0x3a>
        default:
            break;
    }

    /* set the register */
    RCU_CFG0 = reg0;
 80010fa:	40021737          	lui	a4,0x40021
 80010fe:	c35c                	sw	a5,4(a4)
}
 8001100:	8082                	ret
    switch(adc_psc){
 8001102:	471d                	li	a4,7
 8001104:	fee51be3          	bne	a0,a4,80010fa <rcu_adc_clock_config+0x1e>
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 8001108:	053a                	slli	a0,a0,0xe
 800110a:	7731                	lui	a4,0xfffec
 800110c:	8d79                	and	a0,a0,a4
 800110e:	8d5d                	or	a0,a0,a5
 8001110:	100007b7          	lui	a5,0x10000
 8001114:	a011                	j	8001118 <rcu_adc_clock_config+0x3c>
            reg0 |= (adc_psc << 14);
 8001116:	053a                	slli	a0,a0,0xe
            reg0 |= (adc_psc << 14 | RCU_CFG0_ADCPSC_2);
 8001118:	8fc9                	or	a5,a5,a0
            break;
 800111a:	b7c5                	j	80010fa <rcu_adc_clock_config+0x1e>

0800111c <rcu_usb_clock_config>:
*/
void rcu_usb_clock_config(uint32_t usb_psc)
{
    uint32_t reg;
    
    reg = RCU_CFG0;
 800111c:	400216b7          	lui	a3,0x40021
 8001120:	42dc                	lw	a5,4(a3)

    /* configure the USBFS prescaler factor */
    reg &= ~RCU_CFG0_USBFSPSC;
 8001122:	ff400737          	lui	a4,0xff400
 8001126:	177d                	addi	a4,a4,-1
 8001128:	8ff9                	and	a5,a5,a4
    RCU_CFG0 = (reg | usb_psc);
 800112a:	8d5d                	or	a0,a0,a5
 800112c:	c2c8                	sw	a0,4(a3)
}
 800112e:	8082                	ret

08001130 <rcu_clock_freq_get>:
      \arg        CK_APB2: APB2 clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8001130:	7179                	addi	sp,sp,-48
    uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
    uint32_t pllsel, predv0sel, pllmf,ck_src, idx, clk_exp;
    uint32_t predv0, predv1, pll1mf;

    /* exponent of AHB, APB1 and APB2 clock divider */
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001132:	080005b7          	lui	a1,0x8000
{
 8001136:	d422                	sw	s0,40(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001138:	4641                	li	a2,16
{
 800113a:	842a                	mv	s0,a0
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800113c:	28058593          	addi	a1,a1,640 # 8000280 <enable_mcycle_minstret+0x34>
 8001140:	0808                	addi	a0,sp,16
{
 8001142:	d606                	sw	ra,44(sp)
    uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8001144:	00006097          	auipc	ra,0x6
 8001148:	080080e7          	jalr	128(ra) # 80071c4 <memcpy>
    uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 800114c:	040307b7          	lui	a5,0x4030
 8001150:	20178793          	addi	a5,a5,513 # 4030201 <__stack_size+0x402f201>
 8001154:	c002                	sw	zero,0(sp)
 8001156:	c23e                	sw	a5,4(sp)
    uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8001158:	c402                	sw	zero,8(sp)
 800115a:	c63e                	sw	a5,12(sp)

    sws = GET_BITS(RCU_CFG0, 2, 3);
 800115c:	40021737          	lui	a4,0x40021
 8001160:	435c                	lw	a5,4(a4)
    switch(sws){
 8001162:	4689                	li	a3,2
    sws = GET_BITS(RCU_CFG0, 2, 3);
 8001164:	8389                	srli	a5,a5,0x2
 8001166:	8b8d                	andi	a5,a5,3
    switch(sws){
 8001168:	0ed79763          	bne	a5,a3,8001256 <rcu_clock_freq_get+0x126>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* PLL clock source selection, HXTAL or IRC8M/2 */
        pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 800116c:	435c                	lw	a5,4(a4)

        if(RCU_PLLSRC_HXTAL == pllsel) {
 800116e:	00f79693          	slli	a3,a5,0xf
 8001172:	0606d663          	bgez	a3,80011de <rcu_clock_freq_get+0xae>
            /* PLL clock source is HXTAL */
            ck_src = HXTAL_VALUE;

            predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001176:	575c                	lw	a5,44(a4)
            /* source clock use PLL1 */
            if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001178:	00f79693          	slli	a3,a5,0xf
 800117c:	0406dc63          	bgez	a3,80011d4 <rcu_clock_freq_get+0xa4>
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001180:	575c                	lw	a5,44(a4)
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001182:	5758                	lw	a4,44(a4)
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001184:	8391                	srli	a5,a5,0x4
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001186:	8321                	srli	a4,a4,0x8
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001188:	8bbd                	andi	a5,a5,15
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 800118a:	8b3d                	andi	a4,a4,15
                predv1 = (uint32_t)((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 800118c:	00178693          	addi	a3,a5,1
                pll1mf = (uint32_t)((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001190:	0709                	addi	a4,a4,2
                if(17U == pll1mf){
 8001192:	47c5                	li	a5,17
 8001194:	00f71363          	bne	a4,a5,800119a <rcu_clock_freq_get+0x6a>
                    pll1mf = 20U;
 8001198:	4751                	li	a4,20
                }
                ck_src = (ck_src / predv1) * pll1mf;
 800119a:	007a17b7          	lui	a5,0x7a1
 800119e:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80011a2:	02d7d7b3          	divu	a5,a5,a3
 80011a6:	02e787b3          	mul	a5,a5,a4
            }
            predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 80011aa:	40021737          	lui	a4,0x40021
 80011ae:	5758                	lw	a4,44(a4)
 80011b0:	8b3d                	andi	a4,a4,15
 80011b2:	0705                	addi	a4,a4,1
            ck_src /= predv0;
 80011b4:	02e7d733          	divu	a4,a5,a4
            /* PLL clock source is IRC8M/2 */
            ck_src = IRC8M_VALUE/2U;
        }

        /* PLL multiplication factor */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011b8:	400216b7          	lui	a3,0x40021
 80011bc:	42dc                	lw	a5,4(a3)
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011be:	42d4                	lw	a3,4(a3)
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011c0:	83c9                	srli	a5,a5,0x12
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011c2:	00269613          	slli	a2,a3,0x2
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80011c6:	8bbd                	andi	a5,a5,15
        if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 80011c8:	02065063          	bgez	a2,80011e8 <rcu_clock_freq_get+0xb8>
            pllmf |= 0x10U;
 80011cc:	0107e793          	ori	a5,a5,16
        }
        if(pllmf < 15U){
            pllmf += 2U;
        }else{
            pllmf += 1U;
 80011d0:	0785                	addi	a5,a5,1
        }

        cksys_freq = ck_src * pllmf;

        if(15U == pllmf){
 80011d2:	a00d                	j	80011f4 <rcu_clock_freq_get+0xc4>
            ck_src = HXTAL_VALUE;
 80011d4:	007a17b7          	lui	a5,0x7a1
 80011d8:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 80011dc:	b7f9                	j	80011aa <rcu_clock_freq_get+0x7a>
            ck_src = IRC8M_VALUE/2U;
 80011de:	003d17b7          	lui	a5,0x3d1
 80011e2:	90078713          	addi	a4,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 80011e6:	bfc9                	j	80011b8 <rcu_clock_freq_get+0x88>
        if(pllmf < 15U){
 80011e8:	46bd                	li	a3,15
 80011ea:	fed783e3          	beq	a5,a3,80011d0 <rcu_clock_freq_get+0xa0>
            pllmf += 2U;
 80011ee:	0789                	addi	a5,a5,2
        if(15U == pllmf){
 80011f0:	04d78d63          	beq	a5,a3,800124a <rcu_clock_freq_get+0x11a>
        cksys_freq = ck_src * pllmf;
 80011f4:	02e787b3          	mul	a5,a5,a4
        cksys_freq = IRC8M_VALUE;
        break;
    }

    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 80011f8:	400216b7          	lui	a3,0x40021
 80011fc:	42d8                	lw	a4,4(a3)
    clk_exp = ahb_exp[idx];
 80011fe:	1010                	addi	a2,sp,32
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8001200:	8311                	srli	a4,a4,0x4
 8001202:	8b3d                	andi	a4,a4,15
    clk_exp = ahb_exp[idx];
 8001204:	9732                	add	a4,a4,a2
 8001206:	ff074503          	lbu	a0,-16(a4) # 40020ff0 <_sp+0x20018ff0>
    ahb_freq = cksys_freq >> clk_exp;
    
    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 800120a:	42d8                	lw	a4,4(a3)
    ahb_freq = cksys_freq >> clk_exp;
 800120c:	00a7d533          	srl	a0,a5,a0
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8001210:	8321                	srli	a4,a4,0x8
 8001212:	8b1d                	andi	a4,a4,7
    clk_exp = apb1_exp[idx];
 8001214:	9732                	add	a4,a4,a2
 8001216:	fe074603          	lbu	a2,-32(a4)
    apb1_freq = ahb_freq >> clk_exp;
    
    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800121a:	42d8                	lw	a4,4(a3)
    clk_exp = apb2_exp[idx];
 800121c:	1014                	addi	a3,sp,32
    idx = GET_BITS(RCU_CFG0, 11, 13);
 800121e:	832d                	srli	a4,a4,0xb
 8001220:	8b1d                	andi	a4,a4,7
    clk_exp = apb2_exp[idx];
 8001222:	9736                	add	a4,a4,a3
    apb2_freq = ahb_freq >> clk_exp;
    
    /* return the clocks frequency */
    switch(clock){
 8001224:	4685                	li	a3,1
    clk_exp = apb2_exp[idx];
 8001226:	fe874703          	lbu	a4,-24(a4)
    switch(clock){
 800122a:	00d40c63          	beq	s0,a3,8001242 <rcu_clock_freq_get+0x112>
 800122e:	cc05                	beqz	s0,8001266 <rcu_clock_freq_get+0x136>
 8001230:	4789                	li	a5,2
 8001232:	02f40763          	beq	s0,a5,8001260 <rcu_clock_freq_get+0x130>
 8001236:	478d                	li	a5,3
    apb2_freq = ahb_freq >> clk_exp;
 8001238:	00e55533          	srl	a0,a0,a4
    switch(clock){
 800123c:	00f40363          	beq	s0,a5,8001242 <rcu_clock_freq_get+0x112>
    uint32_t sws, ck_freq = 0U;
 8001240:	4501                	li	a0,0
        break;
    default:
        break;
    }
    return ck_freq;
}
 8001242:	50b2                	lw	ra,44(sp)
 8001244:	5422                	lw	s0,40(sp)
 8001246:	6145                	addi	sp,sp,48
 8001248:	8082                	ret
            cksys_freq = ck_src * 6U + ck_src / 2U;
 800124a:	4799                	li	a5,6
 800124c:	02f707b3          	mul	a5,a4,a5
 8001250:	8305                	srli	a4,a4,0x1
 8001252:	97ba                	add	a5,a5,a4
 8001254:	b755                	j	80011f8 <rcu_clock_freq_get+0xc8>
        cksys_freq = IRC8M_VALUE;
 8001256:	007a17b7          	lui	a5,0x7a1
 800125a:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 800125e:	bf69                	j	80011f8 <rcu_clock_freq_get+0xc8>
    apb1_freq = ahb_freq >> clk_exp;
 8001260:	00c55533          	srl	a0,a0,a2
        break;
 8001264:	bff9                	j	8001242 <rcu_clock_freq_get+0x112>
        ck_freq = cksys_freq;
 8001266:	853e                	mv	a0,a5
    return ck_freq;
 8001268:	bfe9                	j	8001242 <rcu_clock_freq_get+0x112>

0800126a <spi_init>:
    \retval     none
*/
void spi_init(uint32_t spi_periph, spi_parameter_struct* spi_struct)
{   
    uint32_t reg = 0U;
    reg = SPI_CTL0(spi_periph);
 800126a:	411c                	lw	a5,0(a0)
    reg &= SPI_INIT_MASK;
 800126c:	670d                	lui	a4,0x3
 800126e:	04070713          	addi	a4,a4,64 # 3040 <__stack_size+0x2040>
    /* select SPI LSB or MSB */
    reg |= spi_struct->endian;
    /* select SPI polarity and phase */
    reg |= spi_struct->clock_polarity_phase;
    /* select SPI prescale to adjust transmit speed */
    reg |= spi_struct->prescale;
 8001272:	41d4                	lw	a3,4(a1)
    reg &= SPI_INIT_MASK;
 8001274:	8f7d                	and	a4,a4,a5
    reg |= spi_struct->prescale;
 8001276:	419c                	lw	a5,0(a1)
 8001278:	8fd5                	or	a5,a5,a3
 800127a:	4594                	lw	a3,8(a1)
 800127c:	8fd5                	or	a5,a5,a3
 800127e:	45d4                	lw	a3,12(a1)
 8001280:	8fd5                	or	a5,a5,a3
 8001282:	4994                	lw	a3,16(a1)
 8001284:	8fd5                	or	a5,a5,a3
 8001286:	49d4                	lw	a3,20(a1)
 8001288:	8fd5                	or	a5,a5,a3
 800128a:	4d94                	lw	a3,24(a1)
 800128c:	8fd5                	or	a5,a5,a3
 800128e:	8fd9                	or	a5,a5,a4

    /* write to SPI_CTL0 register */
    SPI_CTL0(spi_periph) = (uint32_t)reg;
 8001290:	c11c                	sw	a5,0(a0)

    SPI_I2SCTL(spi_periph) &= (uint32_t)(~SPI_I2SCTL_I2SSEL);
 8001292:	4d5c                	lw	a5,28(a0)
 8001294:	777d                	lui	a4,0xfffff
 8001296:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800129a:	8ff9                	and	a5,a5,a4
 800129c:	cd5c                	sw	a5,28(a0)
}
 800129e:	8082                	ret

080012a0 <spi_enable>:
    \param[out] none
    \retval     none
*/
void spi_enable(uint32_t spi_periph)
{
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_SPIEN;
 80012a0:	411c                	lw	a5,0(a0)
 80012a2:	0407e793          	ori	a5,a5,64
 80012a6:	c11c                	sw	a5,0(a0)
}
 80012a8:	8082                	ret

080012aa <spi_i2s_data_transmit>:
    \param[out] none
    \retval     none
*/
void spi_i2s_data_transmit(uint32_t spi_periph, uint16_t data)
{
    SPI_DATA(spi_periph) = (uint32_t)data;
 80012aa:	c54c                	sw	a1,12(a0)
}
 80012ac:	8082                	ret

080012ae <spi_i2s_data_receive>:
    \param[out] none
    \retval     16-bit data
*/
uint16_t spi_i2s_data_receive(uint32_t spi_periph)
{
    return ((uint16_t)SPI_DATA(spi_periph));
 80012ae:	4548                	lw	a0,12(a0)
}
 80012b0:	0542                	slli	a0,a0,0x10
 80012b2:	8141                	srli	a0,a0,0x10
 80012b4:	8082                	ret

080012b6 <spi_crc_polynomial_set>:
    \retval     none
*/
void spi_crc_polynomial_set(uint32_t spi_periph,uint16_t crc_poly)
{
    /* enable SPI CRC */
    SPI_CTL0(spi_periph) |= (uint32_t)SPI_CTL0_CRCEN;
 80012b6:	411c                	lw	a5,0(a0)
 80012b8:	6709                	lui	a4,0x2
 80012ba:	8fd9                	or	a5,a5,a4
 80012bc:	c11c                	sw	a5,0(a0)

    /* set SPI CRC polynomial */
    SPI_CRCPOLY(spi_periph) = (uint32_t)crc_poly;
 80012be:	c90c                	sw	a1,16(a0)
}
 80012c0:	8082                	ret

080012c2 <spi_i2s_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus spi_i2s_flag_get(uint32_t spi_periph, uint32_t flag)
{
    if(RESET != (SPI_STAT(spi_periph) & flag)){
 80012c2:	4508                	lw	a0,8(a0)
 80012c4:	8d6d                	and	a0,a0,a1
        return SET;
    }else{
        return RESET;
    }
}
 80012c6:	00a03533          	snez	a0,a0
 80012ca:	8082                	ret

080012cc <timer_deinit>:
    \param[in]  timer_periph: TIMERx(x=0..6)
    \param[out] none
    \retval     none
*/
void timer_deinit(uint32_t timer_periph)
{
 80012cc:	1141                	addi	sp,sp,-16
    switch(timer_periph){
 80012ce:	400017b7          	lui	a5,0x40001
{
 80012d2:	c606                	sw	ra,12(sp)
    switch(timer_periph){
 80012d4:	c0078713          	addi	a4,a5,-1024 # 40000c00 <_sp+0x1fff8c00>
 80012d8:	08e50e63          	beq	a0,a4,8001374 <timer_deinit+0xa8>
 80012dc:	02a76763          	bltu	a4,a0,800130a <timer_deinit+0x3e>
 80012e0:	40000737          	lui	a4,0x40000
 80012e4:	40070693          	addi	a3,a4,1024 # 40000400 <_sp+0x1fff8400>
 80012e8:	06d50463          	beq	a0,a3,8001350 <timer_deinit+0x84>
 80012ec:	80078793          	addi	a5,a5,-2048
 80012f0:	06f50963          	beq	a0,a5,8001362 <timer_deinit+0x96>
 80012f4:	0ae51263          	bne	a0,a4,8001398 <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER0RST);
        rcu_periph_reset_disable(RCU_TIMER0RST);
        break;
    case TIMER1:
        /* reset TIMER1 */
        rcu_periph_reset_enable(RCU_TIMER1RST);
 80012f8:	40000513          	li	a0,1024
 80012fc:	00000097          	auipc	ra,0x0
 8001300:	dac080e7          	jalr	-596(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER1RST);
 8001304:	40000513          	li	a0,1024
 8001308:	a835                	j	8001344 <timer_deinit+0x78>
    switch(timer_periph){
 800130a:	40078713          	addi	a4,a5,1024
 800130e:	06e50c63          	beq	a0,a4,8001386 <timer_deinit+0xba>
 8001312:	40013737          	lui	a4,0x40013
 8001316:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_sp+0x2000ac00>
 800131a:	00e50d63          	beq	a0,a4,8001334 <timer_deinit+0x68>
 800131e:	06f51d63          	bne	a0,a5,8001398 <timer_deinit+0xcc>
        rcu_periph_reset_enable(RCU_TIMER4RST);
        rcu_periph_reset_disable(RCU_TIMER4RST);
        break;
    case TIMER5:
        /* reset TIMER5 */
        rcu_periph_reset_enable(RCU_TIMER5RST);
 8001322:	40400513          	li	a0,1028
 8001326:	00000097          	auipc	ra,0x0
 800132a:	d82080e7          	jalr	-638(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER5RST);
 800132e:	40400513          	li	a0,1028
 8001332:	a809                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER0RST);
 8001334:	30b00513          	li	a0,779
 8001338:	00000097          	auipc	ra,0x0
 800133c:	d70080e7          	jalr	-656(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER0RST);
 8001340:	30b00513          	li	a0,779
        break;

    default:
        break;
    }
}
 8001344:	40b2                	lw	ra,12(sp)
 8001346:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_TIMER6RST);
 8001348:	00000317          	auipc	t1,0x0
 800134c:	d7830067          	jr	-648(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_TIMER2RST);
 8001350:	40100513          	li	a0,1025
 8001354:	00000097          	auipc	ra,0x0
 8001358:	d54080e7          	jalr	-684(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER2RST);
 800135c:	40100513          	li	a0,1025
 8001360:	b7d5                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER3RST);
 8001362:	40200513          	li	a0,1026
 8001366:	00000097          	auipc	ra,0x0
 800136a:	d42080e7          	jalr	-702(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER3RST);
 800136e:	40200513          	li	a0,1026
 8001372:	bfc9                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER4RST);
 8001374:	40300513          	li	a0,1027
 8001378:	00000097          	auipc	ra,0x0
 800137c:	d30080e7          	jalr	-720(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER4RST);
 8001380:	40300513          	li	a0,1027
 8001384:	b7c1                	j	8001344 <timer_deinit+0x78>
        rcu_periph_reset_enable(RCU_TIMER6RST);
 8001386:	40500513          	li	a0,1029
 800138a:	00000097          	auipc	ra,0x0
 800138e:	d1e080e7          	jalr	-738(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER6RST);
 8001392:	40500513          	li	a0,1029
 8001396:	b77d                	j	8001344 <timer_deinit+0x78>
}
 8001398:	40b2                	lw	ra,12(sp)
 800139a:	0141                	addi	sp,sp,16
 800139c:	8082                	ret

0800139e <timer_struct_para_init>:
{
    /* initialize the init parameter struct member with the default value */
    initpara->prescaler         = 0U;
    initpara->alignedmode       = TIMER_COUNTER_EDGE;
    initpara->counterdirection  = TIMER_COUNTER_UP;
    initpara->period            = 65535U;
 800139e:	67c1                	lui	a5,0x10
 80013a0:	17fd                	addi	a5,a5,-1
    initpara->prescaler         = 0U;
 80013a2:	00052023          	sw	zero,0(a0)
    initpara->counterdirection  = TIMER_COUNTER_UP;
 80013a6:	00051223          	sh	zero,4(a0)
    initpara->period            = 65535U;
 80013aa:	c51c                	sw	a5,8(a0)
    initpara->clockdivision     = TIMER_CKDIV_DIV1;
 80013ac:	00051623          	sh	zero,12(a0)
    initpara->repetitioncounter = 0U;
 80013b0:	00050723          	sb	zero,14(a0)
}
 80013b4:	8082                	ret

080013b6 <timer_init>:
    \retval     none
*/
void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
{
    /* configure the counter prescaler value */
    TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
 80013b6:	0005d783          	lhu	a5,0(a1)
 80013ba:	0045d703          	lhu	a4,4(a1)
 80013be:	bff57693          	andi	a3,a0,-1025
 80013c2:	d51c                	sw	a5,40(a0)

    /* configure the counter direction and aligned mode */
    if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph)
 80013c4:	400137b7          	lui	a5,0x40013
 80013c8:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80013cc:	8b41                	andi	a4,a4,16
 80013ce:	00f50a63          	beq	a0,a5,80013e2 <timer_init+0x2c>
 80013d2:	77fd                	lui	a5,0xfffff
 80013d4:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_sp+0xdfff73ff>
 80013d8:	8fe9                	and	a5,a5,a0
 80013da:	40000637          	lui	a2,0x40000
 80013de:	06c79063          	bne	a5,a2,800143e <timer_init+0x88>
        || (TIMER3 == timer_periph) || (TIMER4 == timer_periph) ){
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
 80013e2:	411c                	lw	a5,0(a0)
 80013e4:	f8f7f793          	andi	a5,a5,-113
 80013e8:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
 80013ea:	0025d783          	lhu	a5,2(a1)
 80013ee:	4110                	lw	a2,0(a0)
 80013f0:	0607f793          	andi	a5,a5,96
 80013f4:	8fd1                	or	a5,a5,a2
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
    }else{
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 80013f6:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK); 
 80013f8:	411c                	lw	a5,0(a0)
 80013fa:	8f5d                	or	a4,a4,a5
 80013fc:	c118                	sw	a4,0(a0)
    }
    
    /* configure the autoreload value */
    TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
 80013fe:	459c                	lw	a5,8(a1)
 8001400:	d55c                	sw	a5,44(a0)

    if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
 8001402:	400017b7          	lui	a5,0x40001
 8001406:	02f68763          	beq	a3,a5,8001434 <timer_init+0x7e>
        /* reset the CKDIV bit */
        TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
 800140a:	411c                	lw	a5,0(a0)
 800140c:	cff7f793          	andi	a5,a5,-769
 8001410:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
 8001412:	00c5d783          	lhu	a5,12(a1)
 8001416:	4118                	lw	a4,0(a0)
 8001418:	3007f793          	andi	a5,a5,768
 800141c:	8fd9                	or	a5,a5,a4
 800141e:	c11c                	sw	a5,0(a0)
    }

    if (TIMER0 == timer_periph) {
 8001420:	400137b7          	lui	a5,0x40013
 8001424:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001428:	00e51663          	bne	a0,a4,8001434 <timer_init+0x7e>
        /* configure the repetition counter value */
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
 800142c:	00e5c703          	lbu	a4,14(a1)
 8001430:	c2e7a823          	sw	a4,-976(a5)
    }

    /* generate an update event */
    TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
 8001434:	495c                	lw	a5,20(a0)
 8001436:	0017e793          	ori	a5,a5,1
 800143a:	c95c                	sw	a5,20(a0)
}
 800143c:	8082                	ret
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 800143e:	411c                	lw	a5,0(a0)
 8001440:	9bbd                	andi	a5,a5,-17
 8001442:	bf55                	j	80013f6 <timer_init+0x40>

08001444 <timer_enable>:
    \param[out] none
    \retval     none
*/
void timer_enable(uint32_t timer_periph)
{
    TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
 8001444:	411c                	lw	a5,0(a0)
 8001446:	0017e793          	ori	a5,a5,1
 800144a:	c11c                	sw	a5,0(a0)
}
 800144c:	8082                	ret

0800144e <timer_channel_output_struct_para_init>:
    \retval     none
*/
void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
{
    /* initialize the channel output parameter struct member with the default value */
    ocpara->outputstate  = TIMER_CCX_DISABLE;
 800144e:	00051023          	sh	zero,0(a0)
    ocpara->outputnstate = TIMER_CCXN_DISABLE;
 8001452:	00051123          	sh	zero,2(a0)
    ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8001456:	00051223          	sh	zero,4(a0)
    ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
 800145a:	00051323          	sh	zero,6(a0)
    ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 800145e:	00051423          	sh	zero,8(a0)
    ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
 8001462:	00051523          	sh	zero,10(a0)
}
 8001466:	8082                	ret

08001468 <timer_channel_output_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
{
    switch(channel){
 8001468:	4785                	li	a5,1
 800146a:	08f58e63          	beq	a1,a5,8001506 <timer_channel_output_config+0x9e>
 800146e:	c981                	beqz	a1,800147e <timer_channel_output_config+0x16>
 8001470:	4789                	li	a5,2
 8001472:	12f58963          	beq	a1,a5,80015a4 <timer_channel_output_config+0x13c>
 8001476:	478d                	li	a5,3
 8001478:	1cf58763          	beq	a1,a5,8001646 <timer_channel_output_config+0x1de>
 800147c:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        /* reset the CH0EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
 800147e:	511c                	lw	a5,32(a0)
 8001480:	9bf9                	andi	a5,a5,-2
 8001482:	d11c                	sw	a5,32(a0)
        /* set the CH0EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
 8001484:	5118                	lw	a4,32(a0)
 8001486:	00065783          	lhu	a5,0(a2) # 40000000 <_sp+0x1fff8000>
 800148a:	8fd9                	or	a5,a5,a4
 800148c:	d11c                	sw	a5,32(a0)
        /* reset the CH0P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
 800148e:	511c                	lw	a5,32(a0)
 8001490:	9bf5                	andi	a5,a5,-3
 8001492:	d11c                	sw	a5,32(a0)
        /* set the CH0P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
 8001494:	5118                	lw	a4,32(a0)
 8001496:	00465783          	lhu	a5,4(a2)
 800149a:	8fd9                	or	a5,a5,a4
 800149c:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 800149e:	400137b7          	lui	a5,0x40013
 80014a2:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80014a6:	04e51c63          	bne	a0,a4,80014fe <timer_channel_output_config+0x96>
            /* reset the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
 80014aa:	5118                	lw	a4,32(a0)
 80014ac:	9b6d                	andi	a4,a4,-5
 80014ae:	d118                	sw	a4,32(a0)
            /* set the CH0NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
 80014b0:	5114                	lw	a3,32(a0)
 80014b2:	00265703          	lhu	a4,2(a2)
 80014b6:	8f55                	or	a4,a4,a3
 80014b8:	d118                	sw	a4,32(a0)
            /* reset the CH0NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
 80014ba:	5118                	lw	a4,32(a0)
 80014bc:	9b5d                	andi	a4,a4,-9
 80014be:	d118                	sw	a4,32(a0)
            /* set the CH0NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
 80014c0:	5114                	lw	a3,32(a0)
 80014c2:	00665703          	lhu	a4,6(a2)
 80014c6:	8f55                	or	a4,a4,a3
 80014c8:	d118                	sw	a4,32(a0)
            /* reset the ISO0 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
 80014ca:	c047a703          	lw	a4,-1020(a5)
 80014ce:	eff77713          	andi	a4,a4,-257
 80014d2:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
 80014d6:	c047a683          	lw	a3,-1020(a5)
 80014da:	00865703          	lhu	a4,8(a2)
 80014de:	8f55                	or	a4,a4,a3
 80014e0:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO0N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
 80014e4:	c047a703          	lw	a4,-1020(a5)
 80014e8:	dff77713          	andi	a4,a4,-513
 80014ec:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO0N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
 80014f0:	c047a683          	lw	a3,-1020(a5)
 80014f4:	00a65703          	lhu	a4,10(a2)
 80014f8:	8f55                	or	a4,a4,a3
 80014fa:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
 80014fe:	4d1c                	lw	a5,24(a0)
 8001500:	9bf1                	andi	a5,a5,-4
            /* reset the ISO1N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
            /* set the ISO1N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 8001502:	cd1c                	sw	a5,24(a0)
        break;
 8001504:	8082                	ret
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
 8001506:	511c                	lw	a5,32(a0)
 8001508:	9bbd                	andi	a5,a5,-17
 800150a:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
 800150c:	00065783          	lhu	a5,0(a2)
 8001510:	5118                	lw	a4,32(a0)
 8001512:	0792                	slli	a5,a5,0x4
 8001514:	8fd9                	or	a5,a5,a4
 8001516:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
 8001518:	511c                	lw	a5,32(a0)
 800151a:	fdf7f793          	andi	a5,a5,-33
 800151e:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 4U);
 8001520:	00465783          	lhu	a5,4(a2)
 8001524:	5118                	lw	a4,32(a0)
 8001526:	0792                	slli	a5,a5,0x4
 8001528:	8fd9                	or	a5,a5,a4
 800152a:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 800152c:	400137b7          	lui	a5,0x40013
 8001530:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 8001534:	06e51463          	bne	a0,a4,800159c <timer_channel_output_config+0x134>
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
 8001538:	5118                	lw	a4,32(a0)
 800153a:	fbf77713          	andi	a4,a4,-65
 800153e:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 4U);
 8001540:	00265703          	lhu	a4,2(a2)
 8001544:	5114                	lw	a3,32(a0)
 8001546:	0712                	slli	a4,a4,0x4
 8001548:	8f55                	or	a4,a4,a3
 800154a:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
 800154c:	5118                	lw	a4,32(a0)
 800154e:	f7f77713          	andi	a4,a4,-129
 8001552:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 4U);
 8001554:	00665703          	lhu	a4,6(a2)
 8001558:	5114                	lw	a3,32(a0)
 800155a:	0712                	slli	a4,a4,0x4
 800155c:	8f55                	or	a4,a4,a3
 800155e:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
 8001560:	c047a703          	lw	a4,-1020(a5)
 8001564:	bff77713          	andi	a4,a4,-1025
 8001568:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 2U);
 800156c:	00865703          	lhu	a4,8(a2)
 8001570:	c047a683          	lw	a3,-1020(a5)
 8001574:	070a                	slli	a4,a4,0x2
 8001576:	8f55                	or	a4,a4,a3
 8001578:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
 800157c:	c047a703          	lw	a4,-1020(a5)
 8001580:	76fd                	lui	a3,0xfffff
 8001582:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 8001586:	8f75                	and	a4,a4,a3
 8001588:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
 800158c:	00a65703          	lhu	a4,10(a2)
 8001590:	c047a683          	lw	a3,-1020(a5)
 8001594:	070a                	slli	a4,a4,0x2
 8001596:	8f55                	or	a4,a4,a3
 8001598:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 800159c:	4d1c                	lw	a5,24(a0)
 800159e:	cff7f793          	andi	a5,a5,-769
 80015a2:	b785                	j	8001502 <timer_channel_output_config+0x9a>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        /* reset the CH2EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
 80015a4:	511c                	lw	a5,32(a0)
 80015a6:	eff7f793          	andi	a5,a5,-257
 80015aa:	d11c                	sw	a5,32(a0)
        /* set the CH2EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
 80015ac:	00065783          	lhu	a5,0(a2)
 80015b0:	5118                	lw	a4,32(a0)
 80015b2:	07a2                	slli	a5,a5,0x8
 80015b4:	8fd9                	or	a5,a5,a4
 80015b6:	d11c                	sw	a5,32(a0)
        /* reset the CH2P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
 80015b8:	511c                	lw	a5,32(a0)
 80015ba:	dff7f793          	andi	a5,a5,-513
 80015be:	d11c                	sw	a5,32(a0)
        /* set the CH2P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 8U);
 80015c0:	00465783          	lhu	a5,4(a2)
 80015c4:	5118                	lw	a4,32(a0)
 80015c6:	07a2                	slli	a5,a5,0x8
 80015c8:	8fd9                	or	a5,a5,a4
 80015ca:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 80015cc:	400137b7          	lui	a5,0x40013
 80015d0:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 80015d4:	06e51563          	bne	a0,a4,800163e <timer_channel_output_config+0x1d6>
            /* reset the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
 80015d8:	5118                	lw	a4,32(a0)
 80015da:	bff77713          	andi	a4,a4,-1025
 80015de:	d118                	sw	a4,32(a0)
            /* set the CH2NEN bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 8U);
 80015e0:	00265703          	lhu	a4,2(a2)
 80015e4:	5114                	lw	a3,32(a0)
 80015e6:	0722                	slli	a4,a4,0x8
 80015e8:	8f55                	or	a4,a4,a3
 80015ea:	d118                	sw	a4,32(a0)
            /* reset the CH2NP bit */
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
 80015ec:	5118                	lw	a4,32(a0)
 80015ee:	76fd                	lui	a3,0xfffff
 80015f0:	7ff68593          	addi	a1,a3,2047 # fffff7ff <_sp+0xdfff77ff>
 80015f4:	8f6d                	and	a4,a4,a1
 80015f6:	d118                	sw	a4,32(a0)
            /* set the CH2NP bit */
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 80015f8:	00665703          	lhu	a4,6(a2)
 80015fc:	510c                	lw	a1,32(a0)
            /* reset the ISO2 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 80015fe:	16fd                	addi	a3,a3,-1
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 8001600:	0722                	slli	a4,a4,0x8
 8001602:	8f4d                	or	a4,a4,a1
 8001604:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8001606:	c047a703          	lw	a4,-1020(a5)
 800160a:	8ef9                	and	a3,a3,a4
 800160c:	c0d7a223          	sw	a3,-1020(a5)
            /* set the ISO2 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 4U);
 8001610:	00865703          	lhu	a4,8(a2)
 8001614:	c047a683          	lw	a3,-1020(a5)
 8001618:	0712                	slli	a4,a4,0x4
 800161a:	8f55                	or	a4,a4,a3
 800161c:	c0e7a223          	sw	a4,-1020(a5)
            /* reset the ISO2N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
 8001620:	c047a703          	lw	a4,-1020(a5)
 8001624:	76f9                	lui	a3,0xffffe
 8001626:	16fd                	addi	a3,a3,-1
 8001628:	8f75                	and	a4,a4,a3
 800162a:	c0e7a223          	sw	a4,-1020(a5)
            /* set the ISO2N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
 800162e:	00a65703          	lhu	a4,10(a2)
 8001632:	c047a683          	lw	a3,-1020(a5)
 8001636:	0712                	slli	a4,a4,0x4
 8001638:	8f55                	or	a4,a4,a3
 800163a:	c0e7a223          	sw	a4,-1020(a5)
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
 800163e:	4d5c                	lw	a5,28(a0)
 8001640:	9bf1                	andi	a5,a5,-4
            /* reset the ISO3 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
            /* set the ISO3 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 8001642:	cd5c                	sw	a5,28(a0)
        break;
    default:
        break;
    }
}
 8001644:	8082                	ret
        TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
 8001646:	511c                	lw	a5,32(a0)
 8001648:	777d                	lui	a4,0xfffff
 800164a:	177d                	addi	a4,a4,-1
 800164c:	8ff9                	and	a5,a5,a4
 800164e:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
 8001650:	00065783          	lhu	a5,0(a2)
 8001654:	5118                	lw	a4,32(a0)
 8001656:	07b2                	slli	a5,a5,0xc
 8001658:	8fd9                	or	a5,a5,a4
 800165a:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
 800165c:	511c                	lw	a5,32(a0)
 800165e:	7779                	lui	a4,0xffffe
 8001660:	177d                	addi	a4,a4,-1
 8001662:	8ff9                	and	a5,a5,a4
 8001664:	d11c                	sw	a5,32(a0)
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 12U);
 8001666:	00465783          	lhu	a5,4(a2)
 800166a:	5118                	lw	a4,32(a0)
 800166c:	07b2                	slli	a5,a5,0xc
 800166e:	8fd9                	or	a5,a5,a4
 8001670:	d11c                	sw	a5,32(a0)
        if (TIMER0 == timer_periph) {
 8001672:	400137b7          	lui	a5,0x40013
 8001676:	c0078713          	addi	a4,a5,-1024 # 40012c00 <_sp+0x2000ac00>
 800167a:	02e51163          	bne	a0,a4,800169c <timer_channel_output_config+0x234>
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
 800167e:	c047a703          	lw	a4,-1020(a5)
 8001682:	76f1                	lui	a3,0xffffc
 8001684:	16fd                	addi	a3,a3,-1
 8001686:	8f75                	and	a4,a4,a3
 8001688:	c0e7a223          	sw	a4,-1020(a5)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
 800168c:	00865703          	lhu	a4,8(a2)
 8001690:	c047a683          	lw	a3,-1020(a5)
 8001694:	071a                	slli	a4,a4,0x6
 8001696:	8f55                	or	a4,a4,a3
 8001698:	c0e7a223          	sw	a4,-1020(a5)
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 800169c:	4d5c                	lw	a5,28(a0)
 800169e:	cff7f793          	andi	a5,a5,-769
 80016a2:	b745                	j	8001642 <timer_channel_output_config+0x1da>

080016a4 <timer_channel_output_mode_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
{
    switch(channel){
 80016a4:	4785                	li	a5,1
 80016a6:	02f58263          	beq	a1,a5,80016ca <timer_channel_output_mode_config+0x26>
 80016aa:	c981                	beqz	a1,80016ba <timer_channel_output_mode_config+0x16>
 80016ac:	4789                	li	a5,2
 80016ae:	02f58663          	beq	a1,a5,80016da <timer_channel_output_mode_config+0x36>
 80016b2:	478d                	li	a5,3
 80016b4:	02f58b63          	beq	a1,a5,80016ea <timer_channel_output_mode_config+0x46>
 80016b8:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
 80016ba:	4d1c                	lw	a5,24(a0)
 80016bc:	f8f7f793          	andi	a5,a5,-113
 80016c0:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
 80016c2:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016c4:	8e5d                	or	a2,a2,a5
 80016c6:	cd10                	sw	a2,24(a0)
        break;
 80016c8:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
 80016ca:	4d1c                	lw	a5,24(a0)
 80016cc:	7765                	lui	a4,0xffff9
 80016ce:	177d                	addi	a4,a4,-1
 80016d0:	8ff9                	and	a5,a5,a4
 80016d2:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016d4:	4d1c                	lw	a5,24(a0)
 80016d6:	0622                	slli	a2,a2,0x8
 80016d8:	b7f5                	j	80016c4 <timer_channel_output_mode_config+0x20>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
 80016da:	4d5c                	lw	a5,28(a0)
 80016dc:	f8f7f793          	andi	a5,a5,-113
 80016e0:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
 80016e2:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016e4:	8e5d                	or	a2,a2,a5
 80016e6:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 80016e8:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
 80016ea:	4d5c                	lw	a5,28(a0)
 80016ec:	7765                	lui	a4,0xffff9
 80016ee:	177d                	addi	a4,a4,-1
 80016f0:	8ff9                	and	a5,a5,a4
 80016f2:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 80016f4:	4d5c                	lw	a5,28(a0)
 80016f6:	0622                	slli	a2,a2,0x8
 80016f8:	b7f5                	j	80016e4 <timer_channel_output_mode_config+0x40>

080016fa <timer_channel_output_pulse_value_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint32_t pulse)
{
    switch(channel){
 80016fa:	4785                	li	a5,1
 80016fc:	00f58c63          	beq	a1,a5,8001714 <timer_channel_output_pulse_value_config+0x1a>
 8001700:	c981                	beqz	a1,8001710 <timer_channel_output_pulse_value_config+0x16>
 8001702:	4789                	li	a5,2
 8001704:	00f58a63          	beq	a1,a5,8001718 <timer_channel_output_pulse_value_config+0x1e>
 8001708:	478d                	li	a5,3
 800170a:	00f58963          	beq	a1,a5,800171c <timer_channel_output_pulse_value_config+0x22>
 800170e:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
 8001710:	d950                	sw	a2,52(a0)
        break;
 8001712:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
 8001714:	dd10                	sw	a2,56(a0)
        break;
 8001716:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
 8001718:	dd50                	sw	a2,60(a0)
        break;
 800171a:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
         TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
 800171c:	c130                	sw	a2,64(a0)
        break;
    default:
        break;
    }
}
 800171e:	8082                	ret

08001720 <timer_channel_output_shadow_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
{
    switch(channel){
 8001720:	4785                	li	a5,1
 8001722:	02f58163          	beq	a1,a5,8001744 <timer_channel_output_shadow_config+0x24>
 8001726:	c981                	beqz	a1,8001736 <timer_channel_output_shadow_config+0x16>
 8001728:	4789                	li	a5,2
 800172a:	02f58663          	beq	a1,a5,8001756 <timer_channel_output_shadow_config+0x36>
 800172e:	478d                	li	a5,3
 8001730:	02f58a63          	beq	a1,a5,8001764 <timer_channel_output_shadow_config+0x44>
 8001734:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
 8001736:	4d1c                	lw	a5,24(a0)
 8001738:	9bdd                	andi	a5,a5,-9
 800173a:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
 800173c:	4d1c                	lw	a5,24(a0)
        break;
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 800173e:	8e5d                	or	a2,a2,a5
 8001740:	cd10                	sw	a2,24(a0)
        break;
 8001742:	8082                	ret
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
 8001744:	4d1c                	lw	a5,24(a0)
 8001746:	777d                	lui	a4,0xfffff
 8001748:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800174c:	8ff9                	and	a5,a5,a4
 800174e:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001750:	4d1c                	lw	a5,24(a0)
 8001752:	0622                	slli	a2,a2,0x8
 8001754:	b7ed                	j	800173e <timer_channel_output_shadow_config+0x1e>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
 8001756:	4d5c                	lw	a5,28(a0)
 8001758:	9bdd                	andi	a5,a5,-9
 800175a:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
 800175c:	4d5c                	lw	a5,28(a0)
        break;
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 800175e:	8e5d                	or	a2,a2,a5
 8001760:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8001762:	8082                	ret
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
 8001764:	4d5c                	lw	a5,28(a0)
 8001766:	777d                	lui	a4,0xfffff
 8001768:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfff77ff>
 800176c:	8ff9                	and	a5,a5,a4
 800176e:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8001770:	4d5c                	lw	a5,28(a0)
 8001772:	0622                	slli	a2,a2,0x8
 8001774:	b7ed                	j	800175e <timer_channel_output_shadow_config+0x3e>

08001776 <timer_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
 8001776:	455c                	lw	a5,12(a0)
 8001778:	8ddd                	or	a1,a1,a5
 800177a:	c54c                	sw	a1,12(a0)
}
 800177c:	8082                	ret

0800177e <timer_interrupt_disable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_disable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)interrupt); 
 800177e:	455c                	lw	a5,12(a0)
 8001780:	fff5c593          	not	a1,a1
 8001784:	8dfd                	and	a1,a1,a5
 8001786:	c54c                	sw	a1,12(a0)
}
 8001788:	8082                	ret

0800178a <timer_interrupt_flag_get>:
    \retval     FlagStatus: SET or RESET
*/
FlagStatus timer_interrupt_flag_get(uint32_t timer_periph, uint32_t interrupt)
{
    uint32_t val;
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 800178a:	455c                	lw	a5,12(a0)
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 800178c:	4908                	lw	a0,16(a0)
 800178e:	8d6d                	and	a0,a0,a1
 8001790:	c509                	beqz	a0,800179a <timer_interrupt_flag_get+0x10>
    val = (TIMER_DMAINTEN(timer_periph) & interrupt);
 8001792:	00b7f533          	and	a0,a5,a1
    if((RESET != (TIMER_INTF(timer_periph) & interrupt)) && (RESET != val)){
 8001796:	00a03533          	snez	a0,a0
        return SET;
    }else{
        return RESET;
    }
}
 800179a:	8082                	ret

0800179c <timer_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_flag_clear(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_INTF(timer_periph) = (~(uint32_t)interrupt);
 800179c:	fff5c593          	not	a1,a1
 80017a0:	c90c                	sw	a1,16(a0)
}
 80017a2:	8082                	ret

080017a4 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 80017a4:	1141                	addi	sp,sp,-16
    switch(usart_periph){
 80017a6:	400057b7          	lui	a5,0x40005
{
 80017aa:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 80017ac:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
 80017b0:	06e50963          	beq	a0,a4,8001822 <usart_deinit+0x7e>
 80017b4:	00a76f63          	bltu	a4,a0,80017d2 <usart_deinit+0x2e>
 80017b8:	40004737          	lui	a4,0x40004
 80017bc:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 80017c0:	02e50f63          	beq	a0,a4,80017fe <usart_deinit+0x5a>
 80017c4:	80078793          	addi	a5,a5,-2048
 80017c8:	04f50463          	beq	a0,a5,8001810 <usart_deinit+0x6c>
        rcu_periph_reset_disable(RCU_UART4RST);
        break;
    default:
        break;
    }
}
 80017cc:	40b2                	lw	ra,12(sp)
 80017ce:	0141                	addi	sp,sp,16
 80017d0:	8082                	ret
    switch(usart_periph){
 80017d2:	06f50163          	beq	a0,a5,8001834 <usart_deinit+0x90>
 80017d6:	400147b7          	lui	a5,0x40014
 80017da:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
 80017de:	fef517e3          	bne	a0,a5,80017cc <usart_deinit+0x28>
        rcu_periph_reset_enable(RCU_USART0RST);
 80017e2:	30e00513          	li	a0,782
 80017e6:	00000097          	auipc	ra,0x0
 80017ea:	8c2080e7          	jalr	-1854(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 80017ee:	30e00513          	li	a0,782
}
 80017f2:	40b2                	lw	ra,12(sp)
 80017f4:	0141                	addi	sp,sp,16
        rcu_periph_reset_disable(RCU_UART4RST);
 80017f6:	00000317          	auipc	t1,0x0
 80017fa:	8ca30067          	jr	-1846(t1) # 80010c0 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 80017fe:	41100513          	li	a0,1041
 8001802:	00000097          	auipc	ra,0x0
 8001806:	8a6080e7          	jalr	-1882(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 800180a:	41100513          	li	a0,1041
 800180e:	b7d5                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_USART2RST);
 8001810:	41200513          	li	a0,1042
 8001814:	00000097          	auipc	ra,0x0
 8001818:	894080e7          	jalr	-1900(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART2RST);
 800181c:	41200513          	li	a0,1042
 8001820:	bfc9                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART3RST);
 8001822:	41300513          	li	a0,1043
 8001826:	00000097          	auipc	ra,0x0
 800182a:	882080e7          	jalr	-1918(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART3RST);
 800182e:	41300513          	li	a0,1043
 8001832:	b7c1                	j	80017f2 <usart_deinit+0x4e>
        rcu_periph_reset_enable(RCU_UART4RST);
 8001834:	41400513          	li	a0,1044
 8001838:	00000097          	auipc	ra,0x0
 800183c:	870080e7          	jalr	-1936(ra) # 80010a8 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_UART4RST);
 8001840:	41400513          	li	a0,1044
 8001844:	b77d                	j	80017f2 <usart_deinit+0x4e>

08001846 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/ 
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8001846:	1141                	addi	sp,sp,-16
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
    switch(usart_periph){
 8001848:	400057b7          	lui	a5,0x40005
{
 800184c:	c422                	sw	s0,8(sp)
 800184e:	c226                	sw	s1,4(sp)
 8001850:	c606                	sw	ra,12(sp)
    switch(usart_periph){
 8001852:	c0078713          	addi	a4,a5,-1024 # 40004c00 <_sp+0x1fffcc00>
{
 8001856:	842a                	mv	s0,a0
 8001858:	84ae                	mv	s1,a1
    switch(usart_periph){
 800185a:	00e50f63          	beq	a0,a4,8001878 <usart_baudrate_set+0x32>
 800185e:	00a76f63          	bltu	a4,a0,800187c <usart_baudrate_set+0x36>
 8001862:	40004737          	lui	a4,0x40004
 8001866:	40070713          	addi	a4,a4,1024 # 40004400 <_sp+0x1fffc400>
 800186a:	00e50763          	beq	a0,a4,8001878 <usart_baudrate_set+0x32>
 800186e:	80078793          	addi	a5,a5,-2048
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001872:	4501                	li	a0,0
    switch(usart_periph){
 8001874:	02f41263          	bne	s0,a5,8001898 <usart_baudrate_set+0x52>
         /* get USART0 clock */
         uclk=rcu_clock_freq_get(CK_APB2);
         break;
    case USART1:
         /* get USART1 clock */
         uclk=rcu_clock_freq_get(CK_APB1);
 8001878:	4509                	li	a0,2
 800187a:	a819                	j	8001890 <usart_baudrate_set+0x4a>
    switch(usart_periph){
 800187c:	fef50ee3          	beq	a0,a5,8001878 <usart_baudrate_set+0x32>
 8001880:	400147b7          	lui	a5,0x40014
 8001884:	80078793          	addi	a5,a5,-2048 # 40013800 <_sp+0x2000b800>
    uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
 8001888:	4501                	li	a0,0
    switch(usart_periph){
 800188a:	00f41763          	bne	s0,a5,8001898 <usart_baudrate_set+0x52>
         uclk=rcu_clock_freq_get(CK_APB2);
 800188e:	450d                	li	a0,3
         uclk=rcu_clock_freq_get(CK_APB1);
 8001890:	00000097          	auipc	ra,0x0
 8001894:	8a0080e7          	jalr	-1888(ra) # 8001130 <rcu_clock_freq_get>
         break;  
    default:
         break;
    }
    /* oversampling by 16, configure the value of USART_BAUD */
    udiv = (uclk+baudval/2U)/baudval;
 8001898:	0014d793          	srli	a5,s1,0x1
 800189c:	97aa                	add	a5,a5,a0
 800189e:	0297d7b3          	divu	a5,a5,s1
    intdiv = udiv & (0x0000fff0U);
    fradiv = udiv & (0x0000000fU);
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
}
 80018a2:	40b2                	lw	ra,12(sp)
 80018a4:	4492                	lw	s1,4(sp)
    USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 80018a6:	07c2                	slli	a5,a5,0x10
 80018a8:	83c1                	srli	a5,a5,0x10
 80018aa:	c41c                	sw	a5,8(s0)
}
 80018ac:	4422                	lw	s0,8(sp)
 80018ae:	0141                	addi	sp,sp,16
 80018b0:	8082                	ret

080018b2 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 80018b2:	455c                	lw	a5,12(a0)
 80018b4:	9ff7f793          	andi	a5,a5,-1537
 80018b8:	c55c                	sw	a5,12(a0)
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg ;
 80018ba:	455c                	lw	a5,12(a0)
 80018bc:	8ddd                	or	a1,a1,a5
 80018be:	c54c                	sw	a1,12(a0)
}
 80018c0:	8082                	ret

080018c2 <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 80018c2:	455c                	lw	a5,12(a0)
 80018c4:	777d                	lui	a4,0xfffff
 80018c6:	177d                	addi	a4,a4,-1
 80018c8:	8ff9                	and	a5,a5,a4
 80018ca:	c55c                	sw	a5,12(a0)
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 80018cc:	455c                	lw	a5,12(a0)
 80018ce:	8ddd                	or	a1,a1,a5
 80018d0:	c54c                	sw	a1,12(a0)
}
 80018d2:	8082                	ret

080018d4 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB; 
 80018d4:	491c                	lw	a5,16(a0)
 80018d6:	7775                	lui	a4,0xffffd
 80018d8:	177d                	addi	a4,a4,-1
 80018da:	8ff9                	and	a5,a5,a4
 80018dc:	c91c                	sw	a5,16(a0)
    /* configure USART stop bits */
    USART_CTL1(usart_periph) |= stblen;
 80018de:	491c                	lw	a5,16(a0)
 80018e0:	8ddd                	or	a1,a1,a5
 80018e2:	c90c                	sw	a1,16(a0)
}
 80018e4:	8082                	ret

080018e6 <usart_enable>:
    \param[in]  usart_periph: USARTx(x=0,1,2)/UARTx(x=3,4)
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph){
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 80018e6:	455c                	lw	a5,12(a0)
 80018e8:	6709                	lui	a4,0x2
 80018ea:	8fd9                	or	a5,a5,a4
 80018ec:	c55c                	sw	a5,12(a0)
}
 80018ee:	8082                	ret

080018f0 <usart_transmit_config>:
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 80018f0:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_TEN;
 80018f2:	9bdd                	andi	a5,a5,-9
    ctl |= txconfig;
 80018f4:	8ddd                	or	a1,a1,a5
    /* configure transfer mode */
    USART_CTL0(usart_periph) = ctl;
 80018f6:	c54c                	sw	a1,12(a0)
}
 80018f8:	8082                	ret

080018fa <usart_receive_config>:
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL0(usart_periph);
 80018fa:	455c                	lw	a5,12(a0)
    ctl &= ~USART_CTL0_REN;
 80018fc:	9bed                	andi	a5,a5,-5
    ctl |= rxconfig;
 80018fe:	8ddd                	or	a1,a1,a5
    /* configure receiver mode */
    USART_CTL0(usart_periph) = ctl;
 8001900:	c54c                	sw	a1,12(a0)
}
 8001902:	8082                	ret

08001904 <usart_hardware_flow_rts_config>:
*/
void usart_hardware_flow_rts_config(uint32_t usart_periph, uint32_t rtsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001904:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_RTSEN;
 8001906:	eff7f793          	andi	a5,a5,-257
    ctl |= rtsconfig;
 800190a:	8ddd                	or	a1,a1,a5
    /* configure RTS */
    USART_CTL2(usart_periph) = ctl;
 800190c:	c94c                	sw	a1,20(a0)
}
 800190e:	8082                	ret

08001910 <usart_hardware_flow_cts_config>:
*/
void usart_hardware_flow_cts_config(uint32_t usart_periph, uint32_t ctsconfig)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001910:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_CTSEN;
 8001912:	dff7f793          	andi	a5,a5,-513
    ctl |= ctsconfig;
 8001916:	8ddd                	or	a1,a1,a5
    /* configure CTS */
    USART_CTL2(usart_periph) = ctl;
 8001918:	c94c                	sw	a1,20(a0)
}
 800191a:	8082                	ret

0800191c <usart_dma_receive_config>:
*/
void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 800191c:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENR;
 800191e:	fbf7f793          	andi	a5,a5,-65
    ctl |= dmacmd;
 8001922:	8ddd                	or	a1,a1,a5
    /* configure DMA reception */
    USART_CTL2(usart_periph) = ctl;
 8001924:	c94c                	sw	a1,20(a0)
}
 8001926:	8082                	ret

08001928 <usart_dma_transmit_config>:
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
{
    uint32_t ctl = 0U;
    
    ctl = USART_CTL2(usart_periph);
 8001928:	495c                	lw	a5,20(a0)
    ctl &= ~USART_CTL2_DENT;
 800192a:	f7f7f793          	andi	a5,a5,-129
    ctl |= dmacmd;
 800192e:	8ddd                	or	a1,a1,a5
    /* configure DMA transmission */
    USART_CTL2(usart_periph) = ctl;
 8001930:	c94c                	sw	a1,20(a0)
}
 8001932:	8082                	ret

08001934 <SystemInit>:
*/
void SystemInit(void)
{
    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001934:	400217b7          	lui	a5,0x40021
 8001938:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 800193a:	e0ff06b7          	lui	a3,0xe0ff0
 800193e:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001940:	00176713          	ori	a4,a4,1
 8001944:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001946:	43d8                	lw	a4,4(a5)
 8001948:	8f75                	and	a4,a4,a3
 800194a:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800194c:	4398                	lw	a4,0(a5)
 800194e:	fef706b7          	lui	a3,0xfef70
 8001952:	16fd                	addi	a3,a3,-1
 8001954:	8f75                	and	a4,a4,a3
 8001956:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8001958:	4398                	lw	a4,0(a5)
 800195a:	fffc06b7          	lui	a3,0xfffc0
 800195e:	16fd                	addi	a3,a3,-1
 8001960:	8f75                	and	a4,a4,a3
 8001962:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8001964:	43d8                	lw	a4,4(a5)
 8001966:	df0106b7          	lui	a3,0xdf010
 800196a:	16fd                	addi	a3,a3,-1
 800196c:	8f75                	and	a4,a4,a3
 800196e:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8001970:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8001974:	4398                	lw	a4,0(a5)
 8001976:	eaf706b7          	lui	a3,0xeaf70
 800197a:	16fd                	addi	a3,a3,-1
 800197c:	8f75                	and	a4,a4,a3
 800197e:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8001980:	00ff0737          	lui	a4,0xff0
 8001984:	c798                	sw	a4,8(a5)
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8001986:	4394                	lw	a3,0(a5)
 8001988:	6741                	lui	a4,0x10
 800198a:	8ed9                	or	a3,a3,a4
 800198c:	c394                	sw	a3,0(a5)
 800198e:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8001992:	40021737          	lui	a4,0x40021
 8001996:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8001998:	00e69613          	slli	a2,a3,0xe
 800199c:	00064463          	bltz	a2,80019a4 <SystemInit+0x70>
 80019a0:	17fd                	addi	a5,a5,-1
 80019a2:	fbf5                	bnez	a5,8001996 <SystemInit+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 80019a4:	400217b7          	lui	a5,0x40021
 80019a8:	4398                	lw	a4,0(a5)
 80019aa:	00e71693          	slli	a3,a4,0xe
 80019ae:	0006c363          	bltz	a3,80019b4 <SystemInit+0x80>
        while(1){
        }
 80019b2:	a001                	j	80019b2 <SystemInit+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80019b4:	43d8                	lw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80019b6:	dfc406b7          	lui	a3,0xdfc40
 80019ba:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80019bc:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 80019be:	43d8                	lw	a4,4(a5)
 80019c0:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 80019c2:	43d8                	lw	a4,4(a5)
 80019c4:	40076713          	ori	a4,a4,1024
 80019c8:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 80019ca:	43d8                	lw	a4,4(a5)
 80019cc:	8f75                	and	a4,a4,a3
 80019ce:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 80019d0:	43d8                	lw	a4,4(a5)
 80019d2:	202906b7          	lui	a3,0x20290
 80019d6:	8f55                	or	a4,a4,a3
 80019d8:	c3d8                	sw	a4,4(a5)
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 80019da:	57d8                	lw	a4,44(a5)
 80019dc:	76bd                	lui	a3,0xfffef
 80019de:	8f75                	and	a4,a4,a3
 80019e0:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 80019e2:	57d8                	lw	a4,44(a5)
 80019e4:	66c1                	lui	a3,0x10
 80019e6:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xef11>
 80019ea:	8f55                	or	a4,a4,a3
 80019ec:	d7d8                	sw	a4,44(a5)

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 80019ee:	4398                	lw	a4,0(a5)
 80019f0:	040006b7          	lui	a3,0x4000
 80019f4:	8f55                	or	a4,a4,a3
 80019f6:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 80019f8:	400217b7          	lui	a5,0x40021
 80019fc:	4398                	lw	a4,0(a5)
 80019fe:	00471693          	slli	a3,a4,0x4
 8001a02:	fe06dde3          	bgez	a3,80019fc <SystemInit+0xc8>
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 8001a06:	4398                	lw	a4,0(a5)
 8001a08:	100006b7          	lui	a3,0x10000
 8001a0c:	8f55                	or	a4,a4,a3
 8001a0e:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 8001a10:	400217b7          	lui	a5,0x40021
 8001a14:	4398                	lw	a4,0(a5)
 8001a16:	00271693          	slli	a3,a4,0x2
 8001a1a:	fe06dde3          	bgez	a3,8001a14 <SystemInit+0xe0>
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8001a1e:	4398                	lw	a4,0(a5)
 8001a20:	010006b7          	lui	a3,0x1000
 8001a24:	8f55                	or	a4,a4,a3
 8001a26:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8001a28:	400217b7          	lui	a5,0x40021
 8001a2c:	4398                	lw	a4,0(a5)
 8001a2e:	00671693          	slli	a3,a4,0x6
 8001a32:	fe06dde3          	bgez	a3,8001a2c <SystemInit+0xf8>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8001a36:	43d8                	lw	a4,4(a5)
 8001a38:	9b71                	andi	a4,a4,-4
 8001a3a:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8001a3c:	43d8                	lw	a4,4(a5)
 8001a3e:	00276713          	ori	a4,a4,2
 8001a42:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8001a44:	40021737          	lui	a4,0x40021
 8001a48:	435c                	lw	a5,4(a4)
 8001a4a:	8ba1                	andi	a5,a5,8
 8001a4c:	dff5                	beqz	a5,8001a48 <SystemInit+0x114>
}
 8001a4e:	8082                	ret

08001a50 <SystemCoreClockUpdate>:
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001a50:	40021737          	lui	a4,0x40021
 8001a54:	435c                	lw	a5,4(a4)
 8001a56:	20000637          	lui	a2,0x20000
    switch (scss)
 8001a5a:	4685                	li	a3,1
    scss = GET_BITS(RCU_CFG0, 2, 3);
 8001a5c:	8389                	srli	a5,a5,0x2
 8001a5e:	8b8d                	andi	a5,a5,3
    switch (scss)
 8001a60:	4e860613          	addi	a2,a2,1256 # 200004e8 <SystemCoreClock>
 8001a64:	00d78663          	beq	a5,a3,8001a70 <SystemCoreClockUpdate+0x20>
 8001a68:	c781                	beqz	a5,8001a70 <SystemCoreClockUpdate+0x20>
 8001a6a:	4689                	li	a3,2
 8001a6c:	00d78863          	beq	a5,a3,8001a7c <SystemCoreClockUpdate+0x2c>
            SystemCoreClock = IRC8M_VALUE;
 8001a70:	007a17b7          	lui	a5,0x7a1
 8001a74:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001a78:	c21c                	sw	a5,0(a2)
}
 8001a7a:	8082                	ret
            pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
 8001a7c:	435c                	lw	a5,4(a4)
            if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
 8001a7e:	00f79693          	slli	a3,a5,0xf
 8001a82:	0606db63          	bgez	a3,8001af8 <SystemCoreClockUpdate+0xa8>
                predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
 8001a86:	575c                	lw	a5,44(a4)
                if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
 8001a88:	00f79693          	slli	a3,a5,0xf
 8001a8c:	0606d163          	bgez	a3,8001aee <SystemCoreClockUpdate+0x9e>
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a90:	575c                	lw	a5,44(a4)
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a92:	5758                	lw	a4,44(a4)
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a94:	8391                	srli	a5,a5,0x4
 8001a96:	8bbd                	andi	a5,a5,15
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a98:	8321                	srli	a4,a4,0x8
                    predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
 8001a9a:	00178693          	addi	a3,a5,1
                    pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
 8001a9e:	00f77793          	andi	a5,a4,15
 8001aa2:	00278713          	addi	a4,a5,2
                    if(17U == pll1mf){
 8001aa6:	47c5                	li	a5,17
 8001aa8:	00f71363          	bne	a4,a5,8001aae <SystemCoreClockUpdate+0x5e>
                        pll1mf = 20U;
 8001aac:	4751                	li	a4,20
                    ck_src = (ck_src / predv1) * pll1mf;
 8001aae:	007a17b7          	lui	a5,0x7a1
 8001ab2:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001ab6:	02d7d7b3          	divu	a5,a5,a3
 8001aba:	02e787b3          	mul	a5,a5,a4
                predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
 8001abe:	40021737          	lui	a4,0x40021
 8001ac2:	5758                	lw	a4,44(a4)
 8001ac4:	8b3d                	andi	a4,a4,15
 8001ac6:	0705                	addi	a4,a4,1
                ck_src /= predv0;
 8001ac8:	02e7d7b3          	divu	a5,a5,a4
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001acc:	400216b7          	lui	a3,0x40021
 8001ad0:	42d8                	lw	a4,4(a3)
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001ad2:	42d4                	lw	a3,4(a3)
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001ad4:	8349                	srli	a4,a4,0x12
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001ad6:	00269593          	slli	a1,a3,0x2
            pllmf = GET_BITS(RCU_CFG0, 18, 21);
 8001ada:	8b3d                	andi	a4,a4,15
            if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
 8001adc:	0205d363          	bgez	a1,8001b02 <SystemCoreClockUpdate+0xb2>
                pllmf |= 0x10U;
 8001ae0:	01076713          	ori	a4,a4,16
                pllmf += 1U;
 8001ae4:	0705                	addi	a4,a4,1
            SystemCoreClock = ck_src * pllmf;
 8001ae6:	02f70733          	mul	a4,a4,a5
 8001aea:	c218                	sw	a4,0(a2)
 8001aec:	8082                	ret
                ck_src = HXTAL_VALUE;
 8001aee:	007a17b7          	lui	a5,0x7a1
 8001af2:	20078793          	addi	a5,a5,512 # 7a1200 <__stack_size+0x7a0200>
 8001af6:	b7e1                	j	8001abe <SystemCoreClockUpdate+0x6e>
                ck_src = IRC8M_VALUE / 2U;
 8001af8:	003d17b7          	lui	a5,0x3d1
 8001afc:	90078793          	addi	a5,a5,-1792 # 3d0900 <__stack_size+0x3cf900>
 8001b00:	b7f1                	j	8001acc <SystemCoreClockUpdate+0x7c>
            if(pllmf >= 15U){
 8001b02:	46bd                	li	a3,15
 8001b04:	fed700e3          	beq	a4,a3,8001ae4 <SystemCoreClockUpdate+0x94>
                pllmf += 2U;
 8001b08:	0709                	addi	a4,a4,2
            if(15U == pllmf){
 8001b0a:	fcd71ee3          	bne	a4,a3,8001ae6 <SystemCoreClockUpdate+0x96>
                SystemCoreClock = ck_src * 6U + ck_src / 2U;
 8001b0e:	4719                	li	a4,6
 8001b10:	02e78733          	mul	a4,a5,a4
 8001b14:	8385                	srli	a5,a5,0x1
 8001b16:	97ba                	add	a5,a5,a4
 8001b18:	b785                	j	8001a78 <SystemCoreClockUpdate+0x28>

08001b1a <_exit>:

#include "stub.h"


void _exit(int code)
{
 8001b1a:	7179                	addi	sp,sp,-48
  const char message[] = "\nProgram has exited with code:";
 8001b1c:	080005b7          	lui	a1,0x8000
{
 8001b20:	d422                	sw	s0,40(sp)
  const char message[] = "\nProgram has exited with code:";
 8001b22:	467d                	li	a2,31
{
 8001b24:	842a                	mv	s0,a0
  const char message[] = "\nProgram has exited with code:";
 8001b26:	29058593          	addi	a1,a1,656 # 8000290 <enable_mcycle_minstret+0x44>
 8001b2a:	850a                	mv	a0,sp
{
 8001b2c:	d606                	sw	ra,44(sp)
  const char message[] = "\nProgram has exited with code:";
 8001b2e:	00005097          	auipc	ra,0x5
 8001b32:	696080e7          	jalr	1686(ra) # 80071c4 <memcpy>

  write(STDERR_FILENO, message, sizeof(message) - 1);
 8001b36:	4679                	li	a2,30
 8001b38:	858a                	mv	a1,sp
 8001b3a:	4509                	li	a0,2
 8001b3c:	17fff097          	auipc	ra,0x17fff
 8001b40:	a04080e7          	jalr	-1532(ra) # 20000540 <write>
  write_hex(STDERR_FILENO, code);
 8001b44:	85a2                	mv	a1,s0
 8001b46:	4509                	li	a0,2
 8001b48:	00000097          	auipc	ra,0x0
 8001b4c:	04c080e7          	jalr	76(ra) # 8001b94 <write_hex>
  write(STDERR_FILENO, "\n", 1);
 8001b50:	080005b7          	lui	a1,0x8000
 8001b54:	4605                	li	a2,1
 8001b56:	2c058593          	addi	a1,a1,704 # 80002c0 <enable_mcycle_minstret+0x74>
 8001b5a:	4509                	li	a0,2
 8001b5c:	17fff097          	auipc	ra,0x17fff
 8001b60:	9e4080e7          	jalr	-1564(ra) # 20000540 <write>

  for (;;);
 8001b64:	a001                	j	8001b64 <_exit+0x4a>

08001b66 <_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
 8001b66:	20000737          	lui	a4,0x20000
 8001b6a:	4ec70713          	addi	a4,a4,1260 # 200004ec <curbrk.1524>
 8001b6e:	431c                	lw	a5,0(a4)
 8001b70:	200056b7          	lui	a3,0x20005
 8001b74:	60868693          	addi	a3,a3,1544 # 20005608 <_end>
 8001b78:	953e                	add	a0,a0,a5
 8001b7a:	00d56b63          	bltu	a0,a3,8001b90 <_sbrk+0x2a>
 8001b7e:	200076b7          	lui	a3,0x20007
 8001b82:	00068693          	mv	a3,a3
 8001b86:	00a6e563          	bltu	a3,a0,8001b90 <_sbrk+0x2a>
    return NULL - 1;

  curbrk += incr;
 8001b8a:	c308                	sw	a0,0(a4)
  return curbrk - incr;
 8001b8c:	853e                	mv	a0,a5
 8001b8e:	8082                	ret
    return NULL - 1;
 8001b90:	57fd                	li	a5,-1
 8001b92:	bfed                	j	8001b8c <_sbrk+0x26>

08001b94 <write_hex>:

#include <stdint.h>
#include <unistd.h>

void write_hex(int fd, unsigned long int hex)
{
 8001b94:	7179                	addi	sp,sp,-48
 8001b96:	ce4e                	sw	s3,28(sp)
 8001b98:	89ae                	mv	s3,a1
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
 8001b9a:	080005b7          	lui	a1,0x8000
 8001b9e:	4609                	li	a2,2
 8001ba0:	2b058593          	addi	a1,a1,688 # 80002b0 <enable_mcycle_minstret+0x64>
{
 8001ba4:	d422                	sw	s0,40(sp)
 8001ba6:	d226                	sw	s1,36(sp)
 8001ba8:	d04a                	sw	s2,32(sp)
 8001baa:	cc52                	sw	s4,24(sp)
 8001bac:	ca56                	sw	s5,20(sp)
 8001bae:	d606                	sw	ra,44(sp)
 8001bb0:	892a                	mv	s2,a0
  write(fd , "0x", 2);
 8001bb2:	4471                	li	s0,28
 8001bb4:	17fff097          	auipc	ra,0x17fff
 8001bb8:	98c080e7          	jalr	-1652(ra) # 20000540 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001bbc:	4a3d                	li	s4,15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001bbe:	4aa5                	li	s5,9
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001bc0:	54f1                	li	s1,-4
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8001bc2:	008a17b3          	sll	a5,s4,s0
 8001bc6:	0137f7b3          	and	a5,a5,s3
 8001bca:	0087d7b3          	srl	a5,a5,s0
 8001bce:	0ff7f793          	andi	a5,a5,255
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001bd2:	02faec63          	bltu	s5,a5,8001c0a <write_hex+0x76>
 8001bd6:	03078793          	addi	a5,a5,48
 8001bda:	0ff7f793          	andi	a5,a5,255
    write(fd, &towrite, 1);
 8001bde:	4605                	li	a2,1
 8001be0:	00f10593          	addi	a1,sp,15
 8001be4:	854a                	mv	a0,s2
 8001be6:	1471                	addi	s0,s0,-4
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001be8:	00f107a3          	sb	a5,15(sp)
    write(fd, &towrite, 1);
 8001bec:	17fff097          	auipc	ra,0x17fff
 8001bf0:	954080e7          	jalr	-1708(ra) # 20000540 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8001bf4:	fc9417e3          	bne	s0,s1,8001bc2 <write_hex+0x2e>
  }
}
 8001bf8:	50b2                	lw	ra,44(sp)
 8001bfa:	5422                	lw	s0,40(sp)
 8001bfc:	5492                	lw	s1,36(sp)
 8001bfe:	5902                	lw	s2,32(sp)
 8001c00:	49f2                	lw	s3,28(sp)
 8001c02:	4a62                	lw	s4,24(sp)
 8001c04:	4ad2                	lw	s5,20(sp)
 8001c06:	6145                	addi	sp,sp,48
 8001c08:	8082                	ret
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8001c0a:	03778793          	addi	a5,a5,55
 8001c0e:	b7f1                	j	8001bda <write_hex+0x46>

08001c10 <get_timer_value>:
}


uint32_t mtime_hi(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001c10:	d10007b7          	lui	a5,0xd1000
 8001c14:	43d8                	lw	a4,4(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME);
 8001c16:	4388                	lw	a0,0(a5)
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8001c18:	43cc                	lw	a1,4(a5)
uint64_t get_timer_value(void)
{
  while (1) {
    uint32_t hi = mtime_hi();
    uint32_t lo = mtime_lo();
    if (hi == mtime_hi())
 8001c1a:	fee59de3          	bne	a1,a4,8001c14 <get_timer_value+0x4>
      return ((uint64_t)hi << 32) | lo;
  }
}
 8001c1e:	8082                	ret

08001c20 <eclic_init>:
{

  typedef volatile uint32_t vuint32_t;

  /* clear cfg register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 8001c20:	d20007b7          	lui	a5,0xd2000
 8001c24:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ff8000>

  /* clear minthresh register */
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 8001c28:	000785a3          	sb	zero,11(a5)

  /* clear all IP/IE/ATTR/CTRL bits for all interrupt sources */
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 8001c2c:	0512                	slli	a0,a0,0x4
 8001c2e:	d20017b7          	lui	a5,0xd2001
 8001c32:	953e                	add	a0,a0,a5

  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001c34:	00a7e363          	bltu	a5,a0,8001c3a <eclic_init+0x1a>
    *ptr = 0;
  }
}
 8001c38:	8082                	ret
    *ptr = 0;
 8001c3a:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ff9000>
  for (ptr = base; ptr < upper; ptr=ptr+4){
 8001c3e:	07c1                	addi	a5,a5,16
 8001c40:	bfd5                	j	8001c34 <eclic_init+0x14>

08001c42 <eclic_enable_interrupt>:

void eclic_enable_interrupt (uint32_t source) {
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8001c42:	d20017b7          	lui	a5,0xd2001
 8001c46:	0785                	addi	a5,a5,1
 8001c48:	050a                	slli	a0,a0,0x2
 8001c4a:	953e                	add	a0,a0,a5
 8001c4c:	4785                	li	a5,1
 8001c4e:	00f50023          	sb	a5,0(a0)
}
 8001c52:	8082                	ret

08001c54 <eclic_get_nlbits>:
void eclic_set_cliccfg (uint8_t cliccfg){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
}

uint8_t eclic_get_cliccfg (void){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8001c54:	d20007b7          	lui	a5,0xd2000
 8001c58:	0007c503          	lbu	a0,0(a5) # d2000000 <_sp+0xb1ff8000>

/* get nlbits */
uint8_t eclic_get_nlbits(void) {
  /* extract nlbits */
  uint8_t nlbits = eclic_get_cliccfg();
  nlbits = (nlbits & ECLIC_CFG_NLBITS_MASK) >> ECLIC_CFG_NLBITS_LSB;
 8001c5c:	8105                	srli	a0,a0,0x1
  return nlbits;
}
 8001c5e:	893d                	andi	a0,a0,15
 8001c60:	8082                	ret

08001c62 <eclic_set_irq_lvl_abs>:
  uint8_t lvl = intctrl << (8-nlbits);

  return lvl;
}

void eclic_set_irq_lvl_abs(uint32_t source, uint8_t lvl_abs) {
 8001c62:	1141                	addi	sp,sp,-16
 8001c64:	c422                	sw	s0,8(sp)
 8001c66:	c226                	sw	s1,4(sp)
 8001c68:	c606                	sw	ra,12(sp)
 8001c6a:	842a                	mv	s0,a0
 8001c6c:	84ae                	mv	s1,a1
  /* extract nlbits */
  uint8_t nlbits = eclic_get_nlbits();
 8001c6e:	00000097          	auipc	ra,0x0
 8001c72:	fe6080e7          	jalr	-26(ra) # 8001c54 <eclic_get_nlbits>
  if (nlbits > ECLICINTCTLBITS) {
    nlbits = ECLICINTCTLBITS;
  }

  /* shift lvl_abs into correct bit position */
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c76:	4791                	li	a5,4
 8001c78:	4711                	li	a4,4
 8001c7a:	00a7e363          	bltu	a5,a0,8001c80 <eclic_set_irq_lvl_abs+0x1e>
 8001c7e:	872a                	mv	a4,a0
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001c80:	d2001537          	lui	a0,0xd2001
 8001c84:	040a                	slli	s0,s0,0x2
 8001c86:	050d                	addi	a0,a0,3
 8001c88:	9522                	add	a0,a0,s0
 8001c8a:	00054783          	lbu	a5,0(a0) # d2001000 <_sp+0xb1ff9000>
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c8e:	0ff77693          	andi	a3,a4,255
 8001c92:	45a1                	li	a1,8
 
  /* write to clicintctrl */
  uint8_t current_intctrl = eclic_get_intctrl(source);
  /* shift intctrl left to mask off unused bits */
  current_intctrl = current_intctrl << nlbits;
 8001c94:	00e797b3          	sll	a5,a5,a4
  /* shift intctrl into correct bit position */
  current_intctrl = current_intctrl >> nlbits;
 8001c98:	0ff7f793          	andi	a5,a5,255
  uint8_t lvl = lvl_abs << (8-nlbits);
 8001c9c:	8d95                	sub	a1,a1,a3
 8001c9e:	00b494b3          	sll	s1,s1,a1
  current_intctrl = current_intctrl >> nlbits;
 8001ca2:	40e7d7b3          	sra	a5,a5,a4

  eclic_set_intctrl(source, (current_intctrl | lvl));
 8001ca6:	8fc5                	or	a5,a5,s1
 8001ca8:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001cac:	00f50023          	sb	a5,0(a0)
}
 8001cb0:	40b2                	lw	ra,12(sp)
 8001cb2:	4422                	lw	s0,8(sp)
 8001cb4:	4492                	lw	s1,4(sp)
 8001cb6:	0141                	addi	sp,sp,16
 8001cb8:	8082                	ret

08001cba <eclic_set_irq_priority>:

  return lvl_abs;
}

/* sets an interrupt priority based encoding of nlbits and ECLICINTCTLBITS */
uint8_t eclic_set_irq_priority(uint32_t source, uint8_t priority) {
 8001cba:	1101                	addi	sp,sp,-32
 8001cbc:	cc22                	sw	s0,24(sp)
 8001cbe:	c62e                	sw	a1,12(sp)
 8001cc0:	ce06                	sw	ra,28(sp)
 8001cc2:	842a                	mv	s0,a0
    /* extract nlbits */
    uint8_t nlbits = eclic_get_nlbits();
 8001cc4:	00000097          	auipc	ra,0x0
 8001cc8:	f90080e7          	jalr	-112(ra) # 8001c54 <eclic_get_nlbits>
    if (nlbits >= ECLICINTCTLBITS) {
 8001ccc:	478d                	li	a5,3
        nlbits = ECLICINTCTLBITS;
        return 0;
 8001cce:	4581                	li	a1,0
    if (nlbits >= ECLICINTCTLBITS) {
 8001cd0:	02a7e963          	bltu	a5,a0,8001d02 <eclic_set_irq_priority+0x48>
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8001cd4:	d2001737          	lui	a4,0xd2001
 8001cd8:	040a                	slli	s0,s0,0x2
 8001cda:	070d                	addi	a4,a4,3
 8001cdc:	9722                	add	a4,a4,s0
 8001cde:	00074783          	lbu	a5,0(a4) # d2001000 <_sp+0xb1ff9000>
    }

    /* shift priority into correct bit position */
    priority = priority << (8 - ECLICINTCTLBITS);
 8001ce2:	45b2                	lw	a1,12(sp)

    /* write to eclicintctrl */
    uint8_t current_intctrl = eclic_get_intctrl(source);
    /* shift intctrl right to mask off unused bits */
    current_intctrl = current_intctrl >> (8-nlbits);
 8001ce4:	46a1                	li	a3,8
 8001ce6:	40a68533          	sub	a0,a3,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001cea:	0592                	slli	a1,a1,0x4
    current_intctrl = current_intctrl >> (8-nlbits);
 8001cec:	40a7d7b3          	sra	a5,a5,a0
    priority = priority << (8 - ECLICINTCTLBITS);
 8001cf0:	0ff5f593          	andi	a1,a1,255
    /* shift intctrl into correct bit position */
    current_intctrl = current_intctrl << (8-nlbits);
 8001cf4:	00a797b3          	sll	a5,a5,a0

    eclic_set_intctrl(source, (current_intctrl | priority));
 8001cf8:	8fcd                	or	a5,a5,a1
 8001cfa:	0ff7f793          	andi	a5,a5,255
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8001cfe:	00f70023          	sb	a5,0(a4)

    return priority;
}
 8001d02:	40f2                	lw	ra,28(sp)
 8001d04:	4462                	lw	s0,24(sp)
 8001d06:	852e                	mv	a0,a1
 8001d08:	6105                	addi	sp,sp,32
 8001d0a:	8082                	ret

08001d0c <eclic_mode_enable>:
  uint32_t mtvec_value = read_csr(CSR_MTVEC);
  mtvec_value = mtvec_value & 0xFFFFFFC0;
  mtvec_value = mtvec_value | 0x00000003;
  write_csr(CSR_MTVEC,mtvec_value);
#elif defined ( __GNUC__ )
  uint32_t mtvec_value = read_csr(mtvec);
 8001d0c:	305027f3          	csrr	a5,mtvec
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 8001d10:	fc07f793          	andi	a5,a5,-64
  mtvec_value = mtvec_value | 0x00000003;
 8001d14:	0037e793          	ori	a5,a5,3
  write_csr(mtvec,mtvec_value);
 8001d18:	30579073          	csrw	mtvec,a5
#endif

}
 8001d1c:	8082                	ret

08001d1e <handle_nmi>:
#include "riscv_encoding.h"
#include "n200_func.h"

__attribute__((weak)) uintptr_t handle_nmi()
{
  write(1, "nmi\n", 5);
 8001d1e:	080005b7          	lui	a1,0x8000
{
 8001d22:	1141                	addi	sp,sp,-16
  write(1, "nmi\n", 5);
 8001d24:	4615                	li	a2,5
 8001d26:	2b458593          	addi	a1,a1,692 # 80002b4 <enable_mcycle_minstret+0x68>
 8001d2a:	4505                	li	a0,1
{
 8001d2c:	c606                	sw	ra,12(sp)
  write(1, "nmi\n", 5);
 8001d2e:	17fff097          	auipc	ra,0x17fff
 8001d32:	812080e7          	jalr	-2030(ra) # 20000540 <write>
  _exit(1);
 8001d36:	4505                	li	a0,1
 8001d38:	00000097          	auipc	ra,0x0
 8001d3c:	de2080e7          	jalr	-542(ra) # 8001b1a <_exit>

08001d40 <handle_trap>:
  return 0;
}


__attribute__((weak)) uintptr_t handle_trap(uintptr_t mcause, uintptr_t sp)
{
 8001d40:	1141                	addi	sp,sp,-16
  if((mcause & 0xFFF) == 0xFFF) {
 8001d42:	fff54793          	not	a5,a0
{
 8001d46:	c422                	sw	s0,8(sp)
 8001d48:	c606                	sw	ra,12(sp)
  if((mcause & 0xFFF) == 0xFFF) {
 8001d4a:	01479713          	slli	a4,a5,0x14
{
 8001d4e:	842a                	mv	s0,a0
  if((mcause & 0xFFF) == 0xFFF) {
 8001d50:	e709                	bnez	a4,8001d5a <handle_trap+0x1a>
      handle_nmi();
 8001d52:	00000097          	auipc	ra,0x0
 8001d56:	fcc080e7          	jalr	-52(ra) # 8001d1e <handle_nmi>
  }
  write(1, "trap\n", 5);
 8001d5a:	080005b7          	lui	a1,0x8000
 8001d5e:	4615                	li	a2,5
 8001d60:	2bc58593          	addi	a1,a1,700 # 80002bc <enable_mcycle_minstret+0x70>
 8001d64:	4505                	li	a0,1
 8001d66:	17ffe097          	auipc	ra,0x17ffe
 8001d6a:	7da080e7          	jalr	2010(ra) # 20000540 <write>
  //printf("In trap handler, the mcause is %d\n", mcause);
  //printf("In trap handler, the mepc is 0x%x\n", read_csr(mepc));
  //printf("In trap handler, the mtval is 0x%x\n", read_csr(mbadaddr));
  _exit(mcause);
 8001d6e:	8522                	mv	a0,s0
 8001d70:	00000097          	auipc	ra,0x0
 8001d74:	daa080e7          	jalr	-598(ra) # 8001b1a <_exit>

08001d78 <_init>:
#include "debugger.h"
#endif

extern uint32_t disable_mcycle_minstret();
void _init()
{
 8001d78:	1141                	addi	sp,sp,-16
 8001d7a:	c606                	sw	ra,12(sp)
	SystemInit();
 8001d7c:	00000097          	auipc	ra,0x0
 8001d80:	bb8080e7          	jalr	-1096(ra) # 8001934 <SystemInit>

	//ECLIC init
	eclic_init(ECLIC_NUM_INTERRUPTS);
 8001d84:	05700513          	li	a0,87
 8001d88:	00000097          	auipc	ra,0x0
 8001d8c:	e98080e7          	jalr	-360(ra) # 8001c20 <eclic_init>
	eclic_mode_enable();
 8001d90:	00000097          	auipc	ra,0x0
 8001d94:	f7c080e7          	jalr	-132(ra) # 8001d0c <eclic_mode_enable>
#ifdef USE_SOFTWARE_DEBUGGER
	dbg_init();
#endif
	

}
 8001d98:	40b2                	lw	ra,12(sp)
 8001d9a:	0141                	addi	sp,sp,16
	disable_mcycle_minstret();
 8001d9c:	ffffe317          	auipc	t1,0xffffe
 8001da0:	4aa30067          	jr	1194(t1) # 8000246 <disable_mcycle_minstret>

08001da4 <_fini>:

void _fini()
{
}
 8001da4:	8082                	ret

08001da6 <dma_config>:

    timer_enable(TIMER0);
}

void dma_config()
{
 8001da6:	7179                	addi	sp,sp,-48
	
    /* ADC_DMA_channel configuration */
    dma_parameter_struct dma_data_parameter;
    rcu_periph_clock_enable(RCU_DMA0); //Ändra till DMA1 om möjligt
 8001da8:	50000513          	li	a0,1280
{
 8001dac:	d606                	sw	ra,44(sp)
    rcu_periph_clock_enable(RCU_DMA0); //Ändra till DMA1 om möjligt
 8001dae:	fffff097          	auipc	ra,0xfffff
 8001db2:	2e2080e7          	jalr	738(ra) # 8001090 <rcu_periph_clock_enable>
    /* ADC DMA_channel configuration */
    dma_deinit(DMA0, DMA_CH0);
 8001db6:	4581                	li	a1,0
 8001db8:	40020537          	lui	a0,0x40020
 8001dbc:	fffff097          	auipc	ra,0xfffff
 8001dc0:	092080e7          	jalr	146(ra) # 8000e4e <dma_deinit>
    
    /* initialize DMA data mode */
    dma_data_parameter.periph_addr  = (uint32_t)(&ADC_RDATA(ADC0));
 8001dc4:	400127b7          	lui	a5,0x40012
 8001dc8:	44c78793          	addi	a5,a5,1100 # 4001244c <_sp+0x2000a44c>
 8001dcc:	c23e                	sw	a5,4(sp)
    dma_data_parameter.periph_inc   = DMA_PERIPH_INCREASE_DISABLE;
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
    dma_data_parameter.memory_inc   = DMA_MEMORY_INCREASE_ENABLE;
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
    dma_data_parameter.memory_width = DMA_MEMORY_WIDTH_16BIT;  
 8001dce:	40000713          	li	a4,1024
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001dd2:	200017b7          	lui	a5,0x20001
    dma_data_parameter.memory_width = DMA_MEMORY_WIDTH_16BIT;  
 8001dd6:	c83a                	sw	a4,16(sp)
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001dd8:	5e078793          	addi	a5,a5,1504 # 200015e0 <sample_buffer>
    dma_data_parameter.direction    = DMA_PERIPHERAL_TO_MEMORY;
    dma_data_parameter.number       = 8;
 8001ddc:	4721                	li	a4,8
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dde:	0050                	addi	a2,sp,4
    dma_data_parameter.memory_addr  = (uint32_t)(&sample_buffer);
 8001de0:	c63e                	sw	a5,12(sp)
    dma_data_parameter.number       = 8;
 8001de2:	ca3a                	sw	a4,20(sp)
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
 8001de4:	10000793          	li	a5,256
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
 8001de8:	6709                	lui	a4,0x2
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dea:	4581                	li	a1,0
 8001dec:	40020537          	lui	a0,0x40020
    dma_data_parameter.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;
 8001df0:	c43e                	sw	a5,8(sp)
    dma_data_parameter.priority     = DMA_PRIORITY_HIGH;
 8001df2:	cc3a                	sw	a4,24(sp)
    dma_data_parameter.periph_inc   = DMA_PERIPH_INCREASE_DISABLE;
 8001df4:	00f11e23          	sh	a5,28(sp)
    dma_data_parameter.direction    = DMA_PERIPHERAL_TO_MEMORY;
 8001df8:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH0, &dma_data_parameter);
 8001dfc:	fffff097          	auipc	ra,0xfffff
 8001e00:	096080e7          	jalr	150(ra) # 8000e92 <dma_init>
    dma_circulation_enable(DMA0, DMA_CH0);
 8001e04:	4581                	li	a1,0
 8001e06:	40020537          	lui	a0,0x40020
 8001e0a:	fffff097          	auipc	ra,0xfffff
 8001e0e:	114080e7          	jalr	276(ra) # 8000f1e <dma_circulation_enable>
    //dma_interrupt_enable(DMA0, DMA_CH0, DMA_INT_FLAG_FTF);
    /* enable DMA channel */
    dma_channel_enable(DMA0, DMA_CH0);
 8001e12:	4581                	li	a1,0
 8001e14:	40020537          	lui	a0,0x40020
 8001e18:	fffff097          	auipc	ra,0xfffff
 8001e1c:	152080e7          	jalr	338(ra) # 8000f6a <dma_channel_enable>
}
 8001e20:	50b2                	lw	ra,44(sp)
 8001e22:	6145                	addi	sp,sp,48
 8001e24:	8082                	ret

08001e26 <eclic_mtip_handler>:
       case USART0_IRQn  : pu0tbeisr=pISR;
   }
}

__attribute__( ( interrupt ) )
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8001e26:	7139                	addi	sp,sp,-64
 8001e28:	cc3e                	sw	a5,24(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8001e2a:	200007b7          	lui	a5,0x20000
 8001e2e:	5007a783          	lw	a5,1280(a5) # 20000500 <__bss_start>
void eclic_mtip_handler( void ) {               // c-wrapper saves environment...
 8001e32:	de06                	sw	ra,60(sp)
 8001e34:	dc16                	sw	t0,56(sp)
 8001e36:	da1a                	sw	t1,52(sp)
 8001e38:	d81e                	sw	t2,48(sp)
 8001e3a:	d62a                	sw	a0,44(sp)
 8001e3c:	d42e                	sw	a1,40(sp)
 8001e3e:	d232                	sw	a2,36(sp)
 8001e40:	d036                	sw	a3,32(sp)
 8001e42:	ce3a                	sw	a4,28(sp)
 8001e44:	ca42                	sw	a6,20(sp)
 8001e46:	c846                	sw	a7,16(sp)
 8001e48:	c672                	sw	t3,12(sp)
 8001e4a:	c476                	sw	t4,8(sp)
 8001e4c:	c27a                	sw	t5,4(sp)
 8001e4e:	c07e                	sw	t6,0(sp)
  (*pmtisr)();                                  // ...Call int's ISR...
 8001e50:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 8001e52:	50f2                	lw	ra,60(sp)
 8001e54:	52e2                	lw	t0,56(sp)
 8001e56:	5352                	lw	t1,52(sp)
 8001e58:	53c2                	lw	t2,48(sp)
 8001e5a:	5532                	lw	a0,44(sp)
 8001e5c:	55a2                	lw	a1,40(sp)
 8001e5e:	5612                	lw	a2,36(sp)
 8001e60:	5682                	lw	a3,32(sp)
 8001e62:	4772                	lw	a4,28(sp)
 8001e64:	47e2                	lw	a5,24(sp)
 8001e66:	4852                	lw	a6,20(sp)
 8001e68:	48c2                	lw	a7,16(sp)
 8001e6a:	4e32                	lw	t3,12(sp)
 8001e6c:	4ea2                	lw	t4,8(sp)
 8001e6e:	4f12                	lw	t5,4(sp)
 8001e70:	4f82                	lw	t6,0(sp)
 8001e72:	6121                	addi	sp,sp,64
 8001e74:	30200073          	mret

08001e78 <USART0_IRQHandler>:

__attribute__( ( interrupt ) )                  // !!! ALL USART0 INT GOES HERE !!!
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8001e78:	7139                	addi	sp,sp,-64
 8001e7a:	cc3e                	sw	a5,24(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8001e7c:	200007b7          	lui	a5,0x20000
 8001e80:	5047a783          	lw	a5,1284(a5) # 20000504 <pu0tbeisr>
void USART0_IRQHandler( void ) {                // c-wrapper saves environment...
 8001e84:	de06                	sw	ra,60(sp)
 8001e86:	dc16                	sw	t0,56(sp)
 8001e88:	da1a                	sw	t1,52(sp)
 8001e8a:	d81e                	sw	t2,48(sp)
 8001e8c:	d62a                	sw	a0,44(sp)
 8001e8e:	d42e                	sw	a1,40(sp)
 8001e90:	d232                	sw	a2,36(sp)
 8001e92:	d036                	sw	a3,32(sp)
 8001e94:	ce3a                	sw	a4,28(sp)
 8001e96:	ca42                	sw	a6,20(sp)
 8001e98:	c846                	sw	a7,16(sp)
 8001e9a:	c672                	sw	t3,12(sp)
 8001e9c:	c476                	sw	t4,8(sp)
 8001e9e:	c27a                	sw	t5,4(sp)
 8001ea0:	c07e                	sw	t6,0(sp)
  (*pu0tbeisr)();                               // ...Call int's ISR...
 8001ea2:	9782                	jalr	a5
}                                               // and restores environment (also (G)IE)!
 8001ea4:	50f2                	lw	ra,60(sp)
 8001ea6:	52e2                	lw	t0,56(sp)
 8001ea8:	5352                	lw	t1,52(sp)
 8001eaa:	53c2                	lw	t2,48(sp)
 8001eac:	5532                	lw	a0,44(sp)
 8001eae:	55a2                	lw	a1,40(sp)
 8001eb0:	5612                	lw	a2,36(sp)
 8001eb2:	5682                	lw	a3,32(sp)
 8001eb4:	4772                	lw	a4,28(sp)
 8001eb6:	47e2                	lw	a5,24(sp)
 8001eb8:	4852                	lw	a6,20(sp)
 8001eba:	48c2                	lw	a7,16(sp)
 8001ebc:	4e32                	lw	t3,12(sp)
 8001ebe:	4ea2                	lw	t4,8(sp)
 8001ec0:	4f12                	lw	t5,4(sp)
 8001ec2:	4f82                	lw	t6,0(sp)
 8001ec4:	6121                	addi	sp,sp,64
 8001ec6:	30200073          	mret

08001eca <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8001eca:	00354783          	lbu	a5,3(a0) # 40020003 <_sp+0x20018003>
 8001ece:	00254703          	lbu	a4,2(a0)
 8001ed2:	07a2                	slli	a5,a5,0x8
 8001ed4:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[1];
 8001ed6:	00154703          	lbu	a4,1(a0)
 8001eda:	07a2                	slli	a5,a5,0x8
	rv = rv << 8 | ptr[0];
 8001edc:	00054503          	lbu	a0,0(a0)
	rv = rv << 8 | ptr[1];
 8001ee0:	8fd9                	or	a5,a5,a4
	rv = rv << 8 | ptr[0];
 8001ee2:	07a2                	slli	a5,a5,0x8
	return rv;
}
 8001ee4:	8d5d                	or	a0,a0,a5
 8001ee6:	8082                	ret

08001ee8 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001ee8:	0085d793          	srli	a5,a1,0x8
 8001eec:	00b50023          	sb	a1,0(a0)
	*ptr++ = (BYTE)val; val >>= 8;
 8001ef0:	00f500a3          	sb	a5,1(a0)
 8001ef4:	0105d793          	srli	a5,a1,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 8001ef8:	81e1                	srli	a1,a1,0x18
 8001efa:	00f50123          	sb	a5,2(a0)
	*ptr++ = (BYTE)val;
 8001efe:	00b501a3          	sb	a1,3(a0)
}
 8001f02:	8082                	ret

08001f04 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001f04:	87aa                	mv	a5,a0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;
 8001f06:	962a                	add	a2,a2,a0

	do {
		r = *d++ - *s++;
 8001f08:	0785                	addi	a5,a5,1
 8001f0a:	0585                	addi	a1,a1,1
 8001f0c:	fff7c503          	lbu	a0,-1(a5)
 8001f10:	fff5c703          	lbu	a4,-1(a1)
 8001f14:	8d19                	sub	a0,a0,a4
	} while (--cnt && r == 0);
 8001f16:	00c78363          	beq	a5,a2,8001f1c <mem_cmp+0x18>
 8001f1a:	d57d                	beqz	a0,8001f08 <mem_cmp+0x4>

	return r;
}
 8001f1c:	8082                	ret

08001f1e <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f1e:	4958                	lw	a4,20(a0)
	clst -= 2;		/* Cluster number is origin from 2 */
 8001f20:	15f9                	addi	a1,a1,-2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f22:	1779                	addi	a4,a4,-2
 8001f24:	00e5f963          	bgeu	a1,a4,8001f36 <clst2sect+0x18>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001f28:	00a55783          	lhu	a5,10(a0)
 8001f2c:	5508                	lw	a0,40(a0)
 8001f2e:	02b787b3          	mul	a5,a5,a1
 8001f32:	953e                	add	a0,a0,a5
 8001f34:	8082                	ret
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f36:	4501                	li	a0,0
}
 8001f38:	8082                	ret

08001f3a <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8001f3a:	411c                	lw	a5,0(a0)
	if (!tp) return vol;	/* Invalid path name? */
 8001f3c:	c38d                	beqz	a5,8001f5e <get_ldnumber+0x24>
 8001f3e:	873e                	mv	a4,a5
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8001f40:	02000593          	li	a1,32
 8001f44:	03a00613          	li	a2,58
 8001f48:	0705                	addi	a4,a4,1
 8001f4a:	fff74683          	lbu	a3,-1(a4) # 1fff <__stack_size+0xfff>
 8001f4e:	02d5f263          	bgeu	a1,a3,8001f72 <get_ldnumber+0x38>
 8001f52:	fec69be3          	bne	a3,a2,8001f48 <get_ldnumber+0xe>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8001f56:	00278693          	addi	a3,a5,2
 8001f5a:	00d70463          	beq	a4,a3,8001f62 <get_ldnumber+0x28>
	if (!tp) return vol;	/* Invalid path name? */
 8001f5e:	57fd                	li	a5,-1
 8001f60:	a811                	j	8001f74 <get_ldnumber+0x3a>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8001f62:	0007c603          	lbu	a2,0(a5)
 8001f66:	03000693          	li	a3,48
	if (!tp) return vol;	/* Invalid path name? */
 8001f6a:	57fd                	li	a5,-1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8001f6c:	00d61463          	bne	a2,a3,8001f74 <get_ldnumber+0x3a>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 8001f70:	c118                	sw	a4,0(a0)
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8001f72:	4781                	li	a5,0
}
 8001f74:	853e                	mv	a0,a5
 8001f76:	8082                	ret

08001f78 <validate>:
)
{
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f78:	ed01                	bnez	a0,8001f90 <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f7a:	4781                	li	a5,0
	FRESULT res = FR_INVALID_OBJECT;
 8001f7c:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f7e:	c19c                	sw	a5,0(a1)
	return res;
}
 8001f80:	8082                	ret
	FRESULT res = FR_INVALID_OBJECT;
 8001f82:	4525                	li	a0,9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f84:	4781                	li	a5,0
}
 8001f86:	40f2                	lw	ra,28(sp)
 8001f88:	4462                	lw	s0,24(sp)
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001f8a:	c19c                	sw	a5,0(a1)
}
 8001f8c:	6105                	addi	sp,sp,32
 8001f8e:	8082                	ret
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f90:	411c                	lw	a5,0(a0)
{
 8001f92:	1101                	addi	sp,sp,-32
 8001f94:	cc22                	sw	s0,24(sp)
 8001f96:	ce06                	sw	ra,28(sp)
 8001f98:	842a                	mv	s0,a0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001f9a:	d7e5                	beqz	a5,8001f82 <validate+0xa>
 8001f9c:	0007c703          	lbu	a4,0(a5)
 8001fa0:	d36d                	beqz	a4,8001f82 <validate+0xa>
 8001fa2:	00455683          	lhu	a3,4(a0)
 8001fa6:	0067d703          	lhu	a4,6(a5)
 8001faa:	fce69ce3          	bne	a3,a4,8001f82 <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8001fae:	0017c503          	lbu	a0,1(a5)
 8001fb2:	c62e                	sw	a1,12(sp)
 8001fb4:	00002097          	auipc	ra,0x2
 8001fb8:	9e0080e7          	jalr	-1568(ra) # 8003994 <disk_status>
 8001fbc:	8905                	andi	a0,a0,1
 8001fbe:	45b2                	lw	a1,12(sp)
 8001fc0:	f169                	bnez	a0,8001f82 <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001fc2:	401c                	lw	a5,0(s0)
 8001fc4:	b7c9                	j	8001f86 <validate+0xe>

08001fc6 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 8001fc6:	4781                	li	a5,0
			*d++ = *s++;
 8001fc8:	00f58733          	add	a4,a1,a5
 8001fcc:	00074683          	lbu	a3,0(a4)
 8001fd0:	00f50733          	add	a4,a0,a5
 8001fd4:	0785                	addi	a5,a5,1
 8001fd6:	00d70023          	sb	a3,0(a4)
		} while (--cnt);
 8001fda:	fef617e3          	bne	a2,a5,8001fc8 <mem_cpy.part.0+0x2>
}
 8001fde:	8082                	ret

08001fe0 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8001fe0:	01b5c783          	lbu	a5,27(a1)
 8001fe4:	01a5c703          	lbu	a4,26(a1)
 8001fe8:	07a2                	slli	a5,a5,0x8
	cl = ld_word(dir + DIR_FstClusLO);
 8001fea:	8fd9                	or	a5,a5,a4
	if (fs->fs_type == FS_FAT32) {
 8001fec:	470d                	li	a4,3
 8001fee:	00e51a63          	bne	a0,a4,8002002 <ld_clust.isra.1+0x22>
	rv = rv << 8 | ptr[0];
 8001ff2:	0155c703          	lbu	a4,21(a1)
 8001ff6:	0145c683          	lbu	a3,20(a1)
 8001ffa:	0722                	slli	a4,a4,0x8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001ffc:	8f55                	or	a4,a4,a3
 8001ffe:	0742                	slli	a4,a4,0x10
 8002000:	8fd9                	or	a5,a5,a4
}
 8002002:	853e                	mv	a0,a5
 8002004:	8082                	ret

08002006 <sync_window.part.3>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002006:	1141                	addi	sp,sp,-16
 8002008:	c422                	sw	s0,8(sp)
 800200a:	c226                	sw	s1,4(sp)
 800200c:	c04a                	sw	s2,0(sp)
 800200e:	c606                	sw	ra,12(sp)
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002010:	03050913          	addi	s2,a0,48
 8002014:	5550                	lw	a2,44(a0)
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8002016:	842a                	mv	s0,a0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002018:	00154503          	lbu	a0,1(a0)
 800201c:	4685                	li	a3,1
 800201e:	85ca                	mv	a1,s2
 8002020:	00002097          	auipc	ra,0x2
 8002024:	a2a080e7          	jalr	-1494(ra) # 8003a4a <disk_write>
			res = FR_DISK_ERR;
 8002028:	4485                	li	s1,1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800202a:	e90d                	bnez	a0,800205c <sync_window.part.3+0x56>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800202c:	5450                	lw	a2,44(s0)
 800202e:	501c                	lw	a5,32(s0)
 8002030:	4c18                	lw	a4,24(s0)
			fs->wflag = 0;	/* Clear window dirty flag */
 8002032:	000401a3          	sb	zero,3(s0)
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002036:	40f607b3          	sub	a5,a2,a5
 800203a:	84aa                	mv	s1,a0
 800203c:	02e7f063          	bgeu	a5,a4,800205c <sync_window.part.3+0x56>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002040:	00244683          	lbu	a3,2(s0)
 8002044:	4789                	li	a5,2
 8002046:	00f69b63          	bne	a3,a5,800205c <sync_window.part.3+0x56>
 800204a:	00144503          	lbu	a0,1(s0)
 800204e:	4685                	li	a3,1
 8002050:	963a                	add	a2,a2,a4
 8002052:	85ca                	mv	a1,s2
 8002054:	00002097          	auipc	ra,0x2
 8002058:	9f6080e7          	jalr	-1546(ra) # 8003a4a <disk_write>
}
 800205c:	40b2                	lw	ra,12(sp)
 800205e:	4422                	lw	s0,8(sp)
 8002060:	8526                	mv	a0,s1
 8002062:	4902                	lw	s2,0(sp)
 8002064:	4492                	lw	s1,4(sp)
 8002066:	0141                	addi	sp,sp,16
 8002068:	8082                	ret

0800206a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800206a:	555c                	lw	a5,44(a0)
 800206c:	04b78463          	beq	a5,a1,80020b4 <move_window+0x4a>
{
 8002070:	1141                	addi	sp,sp,-16
 8002072:	c422                	sw	s0,8(sp)
 8002074:	c226                	sw	s1,4(sp)
 8002076:	c606                	sw	ra,12(sp)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002078:	00354783          	lbu	a5,3(a0)
 800207c:	842a                	mv	s0,a0
 800207e:	84ae                	mv	s1,a1
 8002080:	e385                	bnez	a5,80020a0 <move_window+0x36>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002082:	00144503          	lbu	a0,1(s0)
 8002086:	4685                	li	a3,1
 8002088:	8626                	mv	a2,s1
 800208a:	03040593          	addi	a1,s0,48
 800208e:	00002097          	auipc	ra,0x2
 8002092:	91a080e7          	jalr	-1766(ra) # 80039a8 <disk_read>
 8002096:	c119                	beqz	a0,800209c <move_window+0x32>
				res = FR_DISK_ERR;
 8002098:	4505                	li	a0,1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800209a:	54fd                	li	s1,-1
			fs->winsect = sector;
 800209c:	d444                	sw	s1,44(s0)
	return res;
 800209e:	a031                	j	80020aa <move_window+0x40>
 80020a0:	00000097          	auipc	ra,0x0
 80020a4:	f66080e7          	jalr	-154(ra) # 8002006 <sync_window.part.3>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020a8:	dd69                	beqz	a0,8002082 <move_window+0x18>
}
 80020aa:	40b2                	lw	ra,12(sp)
 80020ac:	4422                	lw	s0,8(sp)
 80020ae:	4492                	lw	s1,4(sp)
 80020b0:	0141                	addi	sp,sp,16
 80020b2:	8082                	ret
	FRESULT res = FR_OK;
 80020b4:	4501                	li	a0,0
}
 80020b6:	8082                	ret

080020b8 <check_fs>:
{
 80020b8:	1141                	addi	sp,sp,-16
 80020ba:	c422                	sw	s0,8(sp)
 80020bc:	c606                	sw	ra,12(sp)
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80020be:	57fd                	li	a5,-1
 80020c0:	d55c                	sw	a5,44(a0)
 80020c2:	000501a3          	sb	zero,3(a0)
{
 80020c6:	842a                	mv	s0,a0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80020c8:	00000097          	auipc	ra,0x0
 80020cc:	fa2080e7          	jalr	-94(ra) # 800206a <move_window>
 80020d0:	4791                	li	a5,4
 80020d2:	e53d                	bnez	a0,8002140 <check_fs+0x88>
	rv = rv << 8 | ptr[0];
 80020d4:	22f44703          	lbu	a4,559(s0)
 80020d8:	22e44783          	lbu	a5,558(s0)
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80020dc:	76ed                	lui	a3,0xffffb
	rv = rv << 8 | ptr[0];
 80020de:	0722                	slli	a4,a4,0x8
 80020e0:	8f5d                	or	a4,a4,a5
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80020e2:	0742                	slli	a4,a4,0x10
 80020e4:	8741                	srai	a4,a4,0x10
 80020e6:	a5568693          	addi	a3,a3,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80020ea:	478d                	li	a5,3
 80020ec:	04d71a63          	bne	a4,a3,8002140 <check_fs+0x88>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80020f0:	03044783          	lbu	a5,48(s0)
 80020f4:	0eb00713          	li	a4,235
 80020f8:	00e78963          	beq	a5,a4,800210a <check_fs+0x52>
 80020fc:	07e1                	addi	a5,a5,24
 80020fe:	0ff7f713          	andi	a4,a5,255
 8002102:	4685                	li	a3,1
	return 2;	/* Valid BS but not FAT */
 8002104:	4789                	li	a5,2
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002106:	02e6ed63          	bltu	a3,a4,8002140 <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800210a:	080005b7          	lui	a1,0x8000
 800210e:	460d                	li	a2,3
 8002110:	2c458593          	addi	a1,a1,708 # 80002c4 <enable_mcycle_minstret+0x78>
 8002114:	06640513          	addi	a0,s0,102
 8002118:	00000097          	auipc	ra,0x0
 800211c:	dec080e7          	jalr	-532(ra) # 8001f04 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002120:	4781                	li	a5,0
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002122:	cd19                	beqz	a0,8002140 <check_fs+0x88>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002124:	080005b7          	lui	a1,0x8000
 8002128:	4615                	li	a2,5
 800212a:	2c858593          	addi	a1,a1,712 # 80002c8 <enable_mcycle_minstret+0x7c>
 800212e:	08240513          	addi	a0,s0,130
 8002132:	00000097          	auipc	ra,0x0
 8002136:	dd2080e7          	jalr	-558(ra) # 8001f04 <mem_cmp>
 800213a:	00a037b3          	snez	a5,a0
 800213e:	0786                	slli	a5,a5,0x1
}
 8002140:	40b2                	lw	ra,12(sp)
 8002142:	4422                	lw	s0,8(sp)
 8002144:	853e                	mv	a0,a5
 8002146:	0141                	addi	sp,sp,16
 8002148:	8082                	ret

0800214a <find_volume>:
{
 800214a:	7139                	addi	sp,sp,-64
 800214c:	d84a                	sw	s2,48(sp)
 800214e:	de06                	sw	ra,60(sp)
 8002150:	dc22                	sw	s0,56(sp)
 8002152:	da26                	sw	s1,52(sp)
 8002154:	d64e                	sw	s3,44(sp)
 8002156:	d452                	sw	s4,40(sp)
 8002158:	d256                	sw	s5,36(sp)
 800215a:	d05a                	sw	s6,32(sp)
	*rfs = 0;
 800215c:	0005a023          	sw	zero,0(a1)
{
 8002160:	8932                	mv	s2,a2
	*rfs = 0;
 8002162:	c62e                	sw	a1,12(sp)
	vol = get_ldnumber(path);
 8002164:	00000097          	auipc	ra,0x0
 8002168:	dd6080e7          	jalr	-554(ra) # 8001f3a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800216c:	47ad                	li	a5,11
 800216e:	04054263          	bltz	a0,80021b2 <find_volume+0x68>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002172:	20000737          	lui	a4,0x20000
 8002176:	00251793          	slli	a5,a0,0x2
 800217a:	50870713          	addi	a4,a4,1288 # 20000508 <FatFs>
 800217e:	97ba                	add	a5,a5,a4
 8002180:	4380                	lw	s0,0(a5)
 8002182:	84aa                	mv	s1,a0
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002184:	47b1                	li	a5,12
 8002186:	c415                	beqz	s0,80021b2 <find_volume+0x68>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002188:	45b2                	lw	a1,12(sp)
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800218a:	0fe97913          	andi	s2,s2,254
	*rfs = fs;							/* Return pointer to the filesystem object */
 800218e:	c180                	sw	s0,0(a1)
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002190:	00044783          	lbu	a5,0(s0)
 8002194:	cb95                	beqz	a5,80021c8 <find_volume+0x7e>
		stat = disk_status(fs->pdrv);
 8002196:	00144503          	lbu	a0,1(s0)
 800219a:	00001097          	auipc	ra,0x1
 800219e:	7fa080e7          	jalr	2042(ra) # 8003994 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80021a2:	00157793          	andi	a5,a0,1
 80021a6:	e38d                	bnez	a5,80021c8 <find_volume+0x7e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80021a8:	00090563          	beqz	s2,80021b2 <find_volume+0x68>
 80021ac:	8911                	andi	a0,a0,4
 80021ae:	c111                	beqz	a0,80021b2 <find_volume+0x68>
				return FR_WRITE_PROTECTED;
 80021b0:	47a9                	li	a5,10
}
 80021b2:	50f2                	lw	ra,60(sp)
 80021b4:	5462                	lw	s0,56(sp)
 80021b6:	54d2                	lw	s1,52(sp)
 80021b8:	5942                	lw	s2,48(sp)
 80021ba:	59b2                	lw	s3,44(sp)
 80021bc:	5a22                	lw	s4,40(sp)
 80021be:	5a92                	lw	s5,36(sp)
 80021c0:	5b02                	lw	s6,32(sp)
 80021c2:	853e                	mv	a0,a5
 80021c4:	6121                	addi	sp,sp,64
 80021c6:	8082                	ret
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80021c8:	0ff4f513          	andi	a0,s1,255
	fs->fs_type = 0;					/* Clear the filesystem object */
 80021cc:	00040023          	sb	zero,0(s0)
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80021d0:	00a400a3          	sb	a0,1(s0)
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80021d4:	00001097          	auipc	ra,0x1
 80021d8:	544080e7          	jalr	1348(ra) # 8003718 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80021dc:	00157713          	andi	a4,a0,1
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80021e0:	478d                	li	a5,3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80021e2:	fb61                	bnez	a4,80021b2 <find_volume+0x68>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80021e4:	00090463          	beqz	s2,80021ec <find_volume+0xa2>
 80021e8:	8911                	andi	a0,a0,4
 80021ea:	f179                	bnez	a0,80021b0 <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80021ec:	4581                	li	a1,0
 80021ee:	8522                	mv	a0,s0
 80021f0:	00000097          	auipc	ra,0x0
 80021f4:	ec8080e7          	jalr	-312(ra) # 80020b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80021f8:	4789                	li	a5,2
 80021fa:	04f51f63          	bne	a0,a5,8002258 <find_volume+0x10e>
 80021fe:	0804                	addi	s1,sp,16
 8002200:	1f640913          	addi	s2,s0,502
 8002204:	23640a13          	addi	s4,s0,566
 8002208:	89a6                	mv	s3,s1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800220a:	ffc94783          	lbu	a5,-4(s2)
 800220e:	4501                	li	a0,0
 8002210:	c791                	beqz	a5,800221c <find_volume+0xd2>
 8002212:	854a                	mv	a0,s2
 8002214:	00000097          	auipc	ra,0x0
 8002218:	cb6080e7          	jalr	-842(ra) # 8001eca <ld_dword>
 800221c:	00a9a023          	sw	a0,0(s3)
 8002220:	0941                	addi	s2,s2,16
 8002222:	0991                	addi	s3,s3,4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002224:	ff2a13e3          	bne	s4,s2,800220a <find_volume+0xc0>
 8002228:	01048913          	addi	s2,s1,16
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800222c:	4985                	li	s3,1
			bsect = br[i];
 800222e:	0004aa03          	lw	s4,0(s1)
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002232:	450d                	li	a0,3
 8002234:	000a0a63          	beqz	s4,8002248 <find_volume+0xfe>
 8002238:	85d2                	mv	a1,s4
 800223a:	8522                	mv	a0,s0
 800223c:	00000097          	auipc	ra,0x0
 8002240:	e7c080e7          	jalr	-388(ra) # 80020b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002244:	02a9f363          	bgeu	s3,a0,800226a <find_volume+0x120>
 8002248:	0491                	addi	s1,s1,4
 800224a:	fe9912e3          	bne	s2,s1,800222e <find_volume+0xe4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800224e:	4711                	li	a4,4
 8002250:	4785                	li	a5,1
 8002252:	00e51a63          	bne	a0,a4,8002266 <find_volume+0x11c>
 8002256:	bfb1                	j	80021b2 <find_volume+0x68>
 8002258:	4711                	li	a4,4
 800225a:	4785                	li	a5,1
 800225c:	f4e50be3          	beq	a0,a4,80021b2 <find_volume+0x68>
	bsect = 0;
 8002260:	4a01                	li	s4,0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002262:	00a7f463          	bgeu	a5,a0,800226a <find_volume+0x120>
 8002266:	47b5                	li	a5,13
 8002268:	b7a9                	j	80021b2 <find_volume+0x68>
	rv = rv << 8 | ptr[0];
 800226a:	03c44783          	lbu	a5,60(s0)
 800226e:	03b44703          	lbu	a4,59(s0)
 8002272:	07a2                	slli	a5,a5,0x8
 8002274:	8fd9                	or	a5,a5,a4
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002276:	07c2                	slli	a5,a5,0x10
 8002278:	87c1                	srai	a5,a5,0x10
 800227a:	20000713          	li	a4,512
 800227e:	fee794e3          	bne	a5,a4,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 8002282:	04744983          	lbu	s3,71(s0)
 8002286:	04644783          	lbu	a5,70(s0)
 800228a:	09a2                	slli	s3,s3,0x8
 800228c:	00f9e9b3          	or	s3,s3,a5
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002290:	00099963          	bnez	s3,80022a2 <find_volume+0x158>
 8002294:	05440513          	addi	a0,s0,84
 8002298:	00000097          	auipc	ra,0x0
 800229c:	c32080e7          	jalr	-974(ra) # 8001eca <ld_dword>
 80022a0:	89aa                	mv	s3,a0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022a2:	04044483          	lbu	s1,64(s0)
		fs->fsize = fasize;
 80022a6:	01342c23          	sw	s3,24(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022aa:	4705                	li	a4,1
 80022ac:	fff48793          	addi	a5,s1,-1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022b0:	00940123          	sb	s1,2(s0)
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022b4:	0ff7f793          	andi	a5,a5,255
 80022b8:	faf767e3          	bltu	a4,a5,8002266 <find_volume+0x11c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80022bc:	03d44903          	lbu	s2,61(s0)
 80022c0:	01091793          	slli	a5,s2,0x10
 80022c4:	83c1                	srli	a5,a5,0x10
 80022c6:	00f41523          	sh	a5,10(s0)
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80022ca:	dfd1                	beqz	a5,8002266 <find_volume+0x11c>
 80022cc:	fff90793          	addi	a5,s2,-1
 80022d0:	0127f7b3          	and	a5,a5,s2
 80022d4:	fbc9                	bnez	a5,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80022d6:	04244783          	lbu	a5,66(s0)
 80022da:	04144a83          	lbu	s5,65(s0)
 80022de:	07a2                	slli	a5,a5,0x8
 80022e0:	0157e7b3          	or	a5,a5,s5
 80022e4:	01079a93          	slli	s5,a5,0x10
 80022e8:	410ada93          	srai	s5,s5,0x10
 80022ec:	010a9b13          	slli	s6,s5,0x10
 80022f0:	010b5b13          	srli	s6,s6,0x10
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80022f4:	01641423          	sh	s6,8(s0)
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80022f8:	00fb7793          	andi	a5,s6,15
 80022fc:	f7ad                	bnez	a5,8002266 <find_volume+0x11c>
	rv = rv << 8 | ptr[0];
 80022fe:	04444503          	lbu	a0,68(s0)
 8002302:	04344783          	lbu	a5,67(s0)
 8002306:	0522                	slli	a0,a0,0x8
 8002308:	8d5d                	or	a0,a0,a5
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800230a:	e519                	bnez	a0,8002318 <find_volume+0x1ce>
 800230c:	05040513          	addi	a0,s0,80
 8002310:	00000097          	auipc	ra,0x0
 8002314:	bba080e7          	jalr	-1094(ra) # 8001eca <ld_dword>
	rv = rv << 8 | ptr[0];
 8002318:	03f44783          	lbu	a5,63(s0)
 800231c:	03e44703          	lbu	a4,62(s0)
 8002320:	07a2                	slli	a5,a5,0x8
 8002322:	8fd9                	or	a5,a5,a4
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002324:	d3a9                	beqz	a5,8002266 <find_volume+0x11c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002326:	033486b3          	mul	a3,s1,s3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800232a:	004b5713          	srli	a4,s6,0x4
 800232e:	973e                	add	a4,a4,a5
 8002330:	9736                	add	a4,a4,a3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002332:	f2e56ae3          	bltu	a0,a4,8002266 <find_volume+0x11c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002336:	8d19                	sub	a0,a0,a4
 8002338:	032554b3          	divu	s1,a0,s2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800233c:	f32565e3          	bltu	a0,s2,8002266 <find_volume+0x11c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002340:	10000637          	lui	a2,0x10000
 8002344:	1655                	addi	a2,a2,-11
 8002346:	f29660e3          	bltu	a2,s1,8002266 <find_volume+0x11c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800234a:	6641                	lui	a2,0x10
 800234c:	1655                	addi	a2,a2,-11
 800234e:	12967963          	bgeu	a2,s1,8002480 <find_volume+0x336>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002352:	490d                	li	s2,3
		fs->database = bsect + sysect;					/* Data start sector */
 8002354:	9752                	add	a4,a4,s4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002356:	0489                	addi	s1,s1,2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002358:	97d2                	add	a5,a5,s4
		fs->database = bsect + sysect;					/* Data start sector */
 800235a:	d418                	sw	a4,40(s0)
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800235c:	c844                	sw	s1,20(s0)
		fs->volbase = bsect;							/* Volume start sector */
 800235e:	01442e23          	sw	s4,28(s0)
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002362:	d01c                	sw	a5,32(s0)
		if (fmt == FS_FAT32) {
 8002364:	470d                	li	a4,3
 8002366:	0ee91e63          	bne	s2,a4,8002462 <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 800236a:	05b44783          	lbu	a5,91(s0)
 800236e:	05a44703          	lbu	a4,90(s0)
 8002372:	07a2                	slli	a5,a5,0x8
 8002374:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002376:	00fae7b3          	or	a5,s5,a5
 800237a:	07c2                	slli	a5,a5,0x10
 800237c:	87c1                	srai	a5,a5,0x10
 800237e:	ee0794e3          	bnez	a5,8002266 <find_volume+0x11c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002382:	05c40513          	addi	a0,s0,92
 8002386:	00000097          	auipc	ra,0x0
 800238a:	b44080e7          	jalr	-1212(ra) # 8001eca <ld_dword>
 800238e:	d048                	sw	a0,36(s0)
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002390:	048a                	slli	s1,s1,0x2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002392:	1ff48493          	addi	s1,s1,511
 8002396:	80a5                	srli	s1,s1,0x9
 8002398:	ec99e7e3          	bltu	s3,s1,8002266 <find_volume+0x11c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800239c:	57fd                	li	a5,-1
 800239e:	c81c                	sw	a5,16(s0)
 80023a0:	c45c                	sw	a5,12(s0)
		fs->fsi_flag = 0x80;
 80023a2:	f8000793          	li	a5,-128
 80023a6:	00f40223          	sb	a5,4(s0)
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80023aa:	478d                	li	a5,3
 80023ac:	08f91a63          	bne	s2,a5,8002440 <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80023b0:	06144783          	lbu	a5,97(s0)
 80023b4:	06044703          	lbu	a4,96(s0)
 80023b8:	07a2                	slli	a5,a5,0x8
 80023ba:	8fd9                	or	a5,a5,a4
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80023bc:	07c2                	slli	a5,a5,0x10
 80023be:	87c1                	srai	a5,a5,0x10
 80023c0:	4705                	li	a4,1
 80023c2:	06e79f63          	bne	a5,a4,8002440 <find_volume+0x2f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80023c6:	001a0593          	addi	a1,s4,1
 80023ca:	8522                	mv	a0,s0
 80023cc:	00000097          	auipc	ra,0x0
 80023d0:	c9e080e7          	jalr	-866(ra) # 800206a <move_window>
 80023d4:	e535                	bnez	a0,8002440 <find_volume+0x2f6>
	rv = rv << 8 | ptr[0];
 80023d6:	22f44783          	lbu	a5,559(s0)
 80023da:	22e44703          	lbu	a4,558(s0)
			fs->fsi_flag = 0;
 80023de:	00040223          	sb	zero,4(s0)
	rv = rv << 8 | ptr[0];
 80023e2:	07a2                	slli	a5,a5,0x8
 80023e4:	8fd9                	or	a5,a5,a4
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80023e6:	07c2                	slli	a5,a5,0x10
 80023e8:	776d                	lui	a4,0xffffb
 80023ea:	87c1                	srai	a5,a5,0x10
 80023ec:	a5570713          	addi	a4,a4,-1451 # ffffaa55 <_sp+0xdfff2a55>
 80023f0:	04e79863          	bne	a5,a4,8002440 <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80023f4:	03040513          	addi	a0,s0,48
 80023f8:	00000097          	auipc	ra,0x0
 80023fc:	ad2080e7          	jalr	-1326(ra) # 8001eca <ld_dword>
 8002400:	416157b7          	lui	a5,0x41615
 8002404:	25278793          	addi	a5,a5,594 # 41615252 <_sp+0x2160d252>
 8002408:	02f51c63          	bne	a0,a5,8002440 <find_volume+0x2f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800240c:	21440513          	addi	a0,s0,532
 8002410:	00000097          	auipc	ra,0x0
 8002414:	aba080e7          	jalr	-1350(ra) # 8001eca <ld_dword>
 8002418:	614177b7          	lui	a5,0x61417
 800241c:	27278793          	addi	a5,a5,626 # 61417272 <_sp+0x4140f272>
 8002420:	02f51063          	bne	a0,a5,8002440 <find_volume+0x2f6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002424:	21840513          	addi	a0,s0,536
 8002428:	00000097          	auipc	ra,0x0
 800242c:	aa2080e7          	jalr	-1374(ra) # 8001eca <ld_dword>
 8002430:	c808                	sw	a0,16(s0)
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002432:	21c40513          	addi	a0,s0,540
 8002436:	00000097          	auipc	ra,0x0
 800243a:	a94080e7          	jalr	-1388(ra) # 8001eca <ld_dword>
 800243e:	c448                	sw	a0,12(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 8002440:	20000737          	lui	a4,0x20000
 8002444:	50c70713          	addi	a4,a4,1292 # 2000050c <Fsid>
 8002448:	00075783          	lhu	a5,0(a4)
	fs->fs_type = fmt;		/* FAT sub-type */
 800244c:	01240023          	sb	s2,0(s0)
	fs->id = ++Fsid;		/* Volume mount ID */
 8002450:	0785                	addi	a5,a5,1
 8002452:	07c2                	slli	a5,a5,0x10
 8002454:	83c1                	srli	a5,a5,0x10
 8002456:	00f71023          	sh	a5,0(a4)
 800245a:	00f41323          	sh	a5,6(s0)
	return FR_OK;
 800245e:	4781                	li	a5,0
 8002460:	bb89                	j	80021b2 <find_volume+0x68>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002462:	e00b02e3          	beqz	s6,8002266 <find_volume+0x11c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002466:	97b6                	add	a5,a5,a3
 8002468:	d05c                	sw	a5,36(s0)
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800246a:	4789                	li	a5,2
 800246c:	00f91463          	bne	s2,a5,8002474 <find_volume+0x32a>
 8002470:	0486                	slli	s1,s1,0x1
 8002472:	b705                	j	8002392 <find_volume+0x248>
 8002474:	02e48733          	mul	a4,s1,a4
 8002478:	8885                	andi	s1,s1,1
 800247a:	8305                	srli	a4,a4,0x1
 800247c:	94ba                	add	s1,s1,a4
 800247e:	bf11                	j	8002392 <find_volume+0x248>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002480:	6905                	lui	s2,0x1
 8002482:	1955                	addi	s2,s2,-11
 8002484:	00993933          	sltu	s2,s2,s1
 8002488:	0905                	addi	s2,s2,1
 800248a:	b5e9                	j	8002354 <find_volume+0x20a>

0800248c <put_fat>:
{
 800248c:	1101                	addi	sp,sp,-32
 800248e:	c64e                	sw	s3,12(sp)
 8002490:	c452                	sw	s4,8(sp)
 8002492:	ce06                	sw	ra,28(sp)
 8002494:	cc22                	sw	s0,24(sp)
 8002496:	ca26                	sw	s1,20(sp)
 8002498:	c84a                	sw	s2,16(sp)
 800249a:	c256                	sw	s5,4(sp)
 800249c:	c05a                	sw	s6,0(sp)
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800249e:	4a05                	li	s4,1
	FRESULT res = FR_INT_ERR;
 80024a0:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80024a2:	0aba7463          	bgeu	s4,a1,800254a <put_fat+0xbe>
 80024a6:	495c                	lw	a5,20(a0)
 80024a8:	892a                	mv	s2,a0
	FRESULT res = FR_INT_ERR;
 80024aa:	4989                	li	s3,2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80024ac:	08f5ff63          	bgeu	a1,a5,800254a <put_fat+0xbe>
		switch (fs->fs_type) {
 80024b0:	00054783          	lbu	a5,0(a0)
 80024b4:	4709                	li	a4,2
 80024b6:	84b2                	mv	s1,a2
 80024b8:	842e                	mv	s0,a1
 80024ba:	0ae78a63          	beq	a5,a4,800256e <put_fat+0xe2>
 80024be:	470d                	li	a4,3
 80024c0:	0ee78063          	beq	a5,a4,80025a0 <put_fat+0x114>
 80024c4:	09479363          	bne	a5,s4,800254a <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80024c8:	0015da13          	srli	s4,a1,0x1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024cc:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80024ce:	9a2e                	add	s4,s4,a1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024d0:	009a5593          	srli	a1,s4,0x9
 80024d4:	95be                	add	a1,a1,a5
 80024d6:	00000097          	auipc	ra,0x0
 80024da:	b94080e7          	jalr	-1132(ra) # 800206a <move_window>
 80024de:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80024e0:	e52d                	bnez	a0,800254a <put_fat+0xbe>
			p = fs->win + bc++ % SS(fs);
 80024e2:	03090a93          	addi	s5,s2,48 # 1030 <__stack_size+0x30>
 80024e6:	001a0b13          	addi	s6,s4,1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024ea:	8805                	andi	s0,s0,1
			p = fs->win + bc++ % SS(fs);
 80024ec:	1ffa7a13          	andi	s4,s4,511
 80024f0:	9a56                	add	s4,s4,s5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024f2:	0ff4f793          	andi	a5,s1,255
 80024f6:	cc09                	beqz	s0,8002510 <put_fat+0x84>
 80024f8:	000a4783          	lbu	a5,0(s4)
 80024fc:	6685                	lui	a3,0x1
 80024fe:	16c1                	addi	a3,a3,-16
 8002500:	00f7f713          	andi	a4,a5,15
 8002504:	00449793          	slli	a5,s1,0x4
 8002508:	8ff5                	and	a5,a5,a3
 800250a:	8fd9                	or	a5,a5,a4
 800250c:	0ff7f793          	andi	a5,a5,255
 8002510:	00fa0023          	sb	a5,0(s4)
			fs->wflag = 1;
 8002514:	4785                	li	a5,1
 8002516:	00f901a3          	sb	a5,3(s2)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800251a:	02092783          	lw	a5,32(s2)
 800251e:	009b5593          	srli	a1,s6,0x9
 8002522:	854a                	mv	a0,s2
 8002524:	95be                	add	a1,a1,a5
 8002526:	00000097          	auipc	ra,0x0
 800252a:	b44080e7          	jalr	-1212(ra) # 800206a <move_window>
 800252e:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 8002530:	ed09                	bnez	a0,800254a <put_fat+0xbe>
			p = fs->win + bc % SS(fs);
 8002532:	1ffb7b13          	andi	s6,s6,511
 8002536:	9ada                	add	s5,s5,s6
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002538:	c405                	beqz	s0,8002560 <put_fat+0xd4>
 800253a:	8091                	srli	s1,s1,0x4
 800253c:	0ff4f493          	andi	s1,s1,255
 8002540:	009a8023          	sb	s1,0(s5)
			fs->wflag = 1;
 8002544:	4785                	li	a5,1
 8002546:	00f901a3          	sb	a5,3(s2)
}
 800254a:	40f2                	lw	ra,28(sp)
 800254c:	4462                	lw	s0,24(sp)
 800254e:	854e                	mv	a0,s3
 8002550:	44d2                	lw	s1,20(sp)
 8002552:	4942                	lw	s2,16(sp)
 8002554:	49b2                	lw	s3,12(sp)
 8002556:	4a22                	lw	s4,8(sp)
 8002558:	4a92                	lw	s5,4(sp)
 800255a:	4b02                	lw	s6,0(sp)
 800255c:	6105                	addi	sp,sp,32
 800255e:	8082                	ret
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002560:	000ac783          	lbu	a5,0(s5)
 8002564:	80a1                	srli	s1,s1,0x8
 8002566:	88bd                	andi	s1,s1,15
 8002568:	9bc1                	andi	a5,a5,-16
 800256a:	8cdd                	or	s1,s1,a5
 800256c:	bfd1                	j	8002540 <put_fat+0xb4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800256e:	511c                	lw	a5,32(a0)
 8002570:	81a1                	srli	a1,a1,0x8
 8002572:	95be                	add	a1,a1,a5
 8002574:	00000097          	auipc	ra,0x0
 8002578:	af6080e7          	jalr	-1290(ra) # 800206a <move_window>
 800257c:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 800257e:	f571                	bnez	a0,800254a <put_fat+0xbe>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002580:	0406                	slli	s0,s0,0x1
 8002582:	03090793          	addi	a5,s2,48
 8002586:	1fe47413          	andi	s0,s0,510
 800258a:	943e                	add	s0,s0,a5
	*ptr++ = (BYTE)val; val >>= 8;
 800258c:	00940023          	sb	s1,0(s0)
 8002590:	04c2                	slli	s1,s1,0x10
 8002592:	80c1                	srli	s1,s1,0x10
 8002594:	80a1                	srli	s1,s1,0x8
	*ptr++ = (BYTE)val;
 8002596:	009400a3          	sb	s1,1(s0)
			fs->wflag = 1;
 800259a:	014901a3          	sb	s4,3(s2)
			break;
 800259e:	b775                	j	800254a <put_fat+0xbe>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025a0:	511c                	lw	a5,32(a0)
 80025a2:	819d                	srli	a1,a1,0x7
 80025a4:	95be                	add	a1,a1,a5
 80025a6:	00000097          	auipc	ra,0x0
 80025aa:	ac4080e7          	jalr	-1340(ra) # 800206a <move_window>
 80025ae:	89aa                	mv	s3,a0
			if (res != FR_OK) break;
 80025b0:	fd49                	bnez	a0,800254a <put_fat+0xbe>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80025b2:	040a                	slli	s0,s0,0x2
 80025b4:	03090793          	addi	a5,s2,48
 80025b8:	1fc47413          	andi	s0,s0,508
 80025bc:	943e                	add	s0,s0,a5
 80025be:	8522                	mv	a0,s0
 80025c0:	00000097          	auipc	ra,0x0
 80025c4:	90a080e7          	jalr	-1782(ra) # 8001eca <ld_dword>
 80025c8:	0492                	slli	s1,s1,0x4
 80025ca:	f00005b7          	lui	a1,0xf0000
 80025ce:	8091                	srli	s1,s1,0x4
 80025d0:	8de9                	and	a1,a1,a0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80025d2:	8dc5                	or	a1,a1,s1
 80025d4:	8522                	mv	a0,s0
 80025d6:	00000097          	auipc	ra,0x0
 80025da:	912080e7          	jalr	-1774(ra) # 8001ee8 <st_dword>
 80025de:	bf75                	j	800259a <put_fat+0x10e>

080025e0 <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80025e0:	4785                	li	a5,1
 80025e2:	0eb7f763          	bgeu	a5,a1,80026d0 <get_fat.isra.7+0xf0>
 80025e6:	4958                	lw	a4,20(a0)
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80025e8:	1101                	addi	sp,sp,-32
 80025ea:	cc22                	sw	s0,24(sp)
 80025ec:	ce06                	sw	ra,28(sp)
 80025ee:	ca26                	sw	s1,20(sp)
 80025f0:	c84a                	sw	s2,16(sp)
 80025f2:	c64e                	sw	s3,12(sp)
 80025f4:	842a                	mv	s0,a0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80025f6:	02e5fa63          	bgeu	a1,a4,800262a <get_fat.isra.7+0x4a>
		switch (fs->fs_type) {
 80025fa:	00054703          	lbu	a4,0(a0)
 80025fe:	4689                	li	a3,2
 8002600:	84ae                	mv	s1,a1
 8002602:	06d70c63          	beq	a4,a3,800267a <get_fat.isra.7+0x9a>
 8002606:	468d                	li	a3,3
 8002608:	08d70e63          	beq	a4,a3,80026a4 <get_fat.isra.7+0xc4>
 800260c:	00f71f63          	bne	a4,a5,800262a <get_fat.isra.7+0x4a>
			bc = (UINT)clst; bc += bc / 2;
 8002610:	0015d913          	srli	s2,a1,0x1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002614:	511c                	lw	a5,32(a0)
			bc = (UINT)clst; bc += bc / 2;
 8002616:	992e                	add	s2,s2,a1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002618:	00995593          	srli	a1,s2,0x9
 800261c:	95be                	add	a1,a1,a5
 800261e:	00000097          	auipc	ra,0x0
 8002622:	a4c080e7          	jalr	-1460(ra) # 800206a <move_window>
 8002626:	c911                	beqz	a0,800263a <get_fat.isra.7+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002628:	57fd                	li	a5,-1
}
 800262a:	40f2                	lw	ra,28(sp)
 800262c:	4462                	lw	s0,24(sp)
 800262e:	44d2                	lw	s1,20(sp)
 8002630:	4942                	lw	s2,16(sp)
 8002632:	49b2                	lw	s3,12(sp)
 8002634:	853e                	mv	a0,a5
 8002636:	6105                	addi	sp,sp,32
 8002638:	8082                	ret
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800263a:	501c                	lw	a5,32(s0)
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800263c:	00190993          	addi	s3,s2,1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002640:	0099d593          	srli	a1,s3,0x9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002644:	1ff97913          	andi	s2,s2,511
 8002648:	9922                	add	s2,s2,s0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800264a:	95be                	add	a1,a1,a5
 800264c:	8522                	mv	a0,s0
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800264e:	03094903          	lbu	s2,48(s2)
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002652:	00000097          	auipc	ra,0x0
 8002656:	a18080e7          	jalr	-1512(ra) # 800206a <move_window>
 800265a:	f579                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800265c:	1ff9f993          	andi	s3,s3,511
 8002660:	944e                	add	s0,s0,s3
 8002662:	03044783          	lbu	a5,48(s0)
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002666:	8885                	andi	s1,s1,1
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002668:	07a2                	slli	a5,a5,0x8
 800266a:	0127e7b3          	or	a5,a5,s2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800266e:	c099                	beqz	s1,8002674 <get_fat.isra.7+0x94>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8002670:	8391                	srli	a5,a5,0x4
			break;
 8002672:	bf65                	j	800262a <get_fat.isra.7+0x4a>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002674:	07d2                	slli	a5,a5,0x14
 8002676:	83d1                	srli	a5,a5,0x14
 8002678:	bf4d                	j	800262a <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800267a:	511c                	lw	a5,32(a0)
 800267c:	81a1                	srli	a1,a1,0x8
 800267e:	95be                	add	a1,a1,a5
 8002680:	00000097          	auipc	ra,0x0
 8002684:	9ea080e7          	jalr	-1558(ra) # 800206a <move_window>
 8002688:	f145                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800268a:	0486                	slli	s1,s1,0x1
 800268c:	03040413          	addi	s0,s0,48
 8002690:	1fe4f493          	andi	s1,s1,510
 8002694:	9426                	add	s0,s0,s1
	rv = rv << 8 | ptr[0];
 8002696:	00144783          	lbu	a5,1(s0)
 800269a:	00044703          	lbu	a4,0(s0)
 800269e:	07a2                	slli	a5,a5,0x8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80026a0:	8fd9                	or	a5,a5,a4
			break;
 80026a2:	b761                	j	800262a <get_fat.isra.7+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80026a4:	511c                	lw	a5,32(a0)
 80026a6:	819d                	srli	a1,a1,0x7
 80026a8:	95be                	add	a1,a1,a5
 80026aa:	00000097          	auipc	ra,0x0
 80026ae:	9c0080e7          	jalr	-1600(ra) # 800206a <move_window>
 80026b2:	f93d                	bnez	a0,8002628 <get_fat.isra.7+0x48>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80026b4:	00249513          	slli	a0,s1,0x2
 80026b8:	03040413          	addi	s0,s0,48
 80026bc:	1fc57513          	andi	a0,a0,508
 80026c0:	9522                	add	a0,a0,s0
 80026c2:	00000097          	auipc	ra,0x0
 80026c6:	808080e7          	jalr	-2040(ra) # 8001eca <ld_dword>
 80026ca:	00451793          	slli	a5,a0,0x4
 80026ce:	b74d                	j	8002670 <get_fat.isra.7+0x90>
		val = 1;	/* Internal error */
 80026d0:	4785                	li	a5,1
}
 80026d2:	853e                	mv	a0,a5
 80026d4:	8082                	ret

080026d6 <create_chain>:
{
 80026d6:	1101                	addi	sp,sp,-32
 80026d8:	ca26                	sw	s1,20(sp)
 80026da:	c64e                	sw	s3,12(sp)
 80026dc:	c452                	sw	s4,8(sp)
 80026de:	ce06                	sw	ra,28(sp)
 80026e0:	cc22                	sw	s0,24(sp)
 80026e2:	c84a                	sw	s2,16(sp)
 80026e4:	c256                	sw	s5,4(sp)
 80026e6:	c05a                	sw	s6,0(sp)
 80026e8:	8a2a                	mv	s4,a0
 80026ea:	89ae                	mv	s3,a1
	FATFS *fs = obj->fs;
 80026ec:	4104                	lw	s1,0(a0)
	if (clst == 0) {	/* Create a new chain */
 80026ee:	e991                	bnez	a1,8002702 <create_chain+0x2c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80026f0:	00c4a903          	lw	s2,12(s1)
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80026f4:	00090563          	beqz	s2,80026fe <create_chain+0x28>
 80026f8:	48dc                	lw	a5,20(s1)
 80026fa:	04f96063          	bltu	s2,a5,800273a <create_chain+0x64>
 80026fe:	4905                	li	s2,1
 8002700:	a82d                	j	800273a <create_chain+0x64>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002702:	8526                	mv	a0,s1
 8002704:	00000097          	auipc	ra,0x0
 8002708:	edc080e7          	jalr	-292(ra) # 80025e0 <get_fat.isra.7>
		if (cs < 2) return 1;				/* Test for insanity */
 800270c:	4785                	li	a5,1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800270e:	842a                	mv	s0,a0
		if (cs < 2) return 1;				/* Test for insanity */
 8002710:	00a7ee63          	bltu	a5,a0,800272c <create_chain+0x56>
 8002714:	4405                	li	s0,1
}
 8002716:	8522                	mv	a0,s0
 8002718:	40f2                	lw	ra,28(sp)
 800271a:	4462                	lw	s0,24(sp)
 800271c:	44d2                	lw	s1,20(sp)
 800271e:	4942                	lw	s2,16(sp)
 8002720:	49b2                	lw	s3,12(sp)
 8002722:	4a22                	lw	s4,8(sp)
 8002724:	4a92                	lw	s5,4(sp)
 8002726:	4b02                	lw	s6,0(sp)
 8002728:	6105                	addi	sp,sp,32
 800272a:	8082                	ret
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800272c:	57fd                	li	a5,-1
 800272e:	0cf50363          	beq	a0,a5,80027f4 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002732:	48dc                	lw	a5,20(s1)
 8002734:	894e                	mv	s2,s3
 8002736:	fef560e3          	bltu	a0,a5,8002716 <create_chain+0x40>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800273a:	489c                	lw	a5,16(s1)
 800273c:	e399                	bnez	a5,8002742 <create_chain+0x6c>
 800273e:	4401                	li	s0,0
 8002740:	bfd9                	j	8002716 <create_chain+0x40>
		if (scl == clst) {						/* Stretching an existing chain? */
 8002742:	03391d63          	bne	s2,s3,800277c <create_chain+0xa6>
			if (ncl >= fs->n_fatent) ncl = 2;
 8002746:	48dc                	lw	a5,20(s1)
 8002748:	00190413          	addi	s0,s2,1
 800274c:	00f46363          	bltu	s0,a5,8002752 <create_chain+0x7c>
 8002750:	4409                	li	s0,2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002752:	000a2503          	lw	a0,0(s4)
 8002756:	85a2                	mv	a1,s0
 8002758:	00000097          	auipc	ra,0x0
 800275c:	e88080e7          	jalr	-376(ra) # 80025e0 <get_fat.isra.7>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002760:	4705                	li	a4,1
 8002762:	fae509e3          	beq	a0,a4,8002714 <create_chain+0x3e>
 8002766:	57fd                	li	a5,-1
 8002768:	08f50663          	beq	a0,a5,80027f4 <create_chain+0x11e>
			if (cs != 0) {						/* Not free? */
 800276c:	c129                	beqz	a0,80027ae <create_chain+0xd8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800276e:	44dc                	lw	a5,12(s1)
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002770:	00f77663          	bgeu	a4,a5,800277c <create_chain+0xa6>
 8002774:	48d8                	lw	a4,20(s1)
 8002776:	00e7f363          	bgeu	a5,a4,800277c <create_chain+0xa6>
 800277a:	893e                	mv	s2,a5
 800277c:	844a                	mv	s0,s2
					if (ncl > scl) return 0;	/* No free cluster found? */
 800277e:	4a85                	li	s5,1
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002780:	5b7d                	li	s6,-1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002782:	48dc                	lw	a5,20(s1)
				ncl++;							/* Next cluster */
 8002784:	0405                	addi	s0,s0,1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002786:	00f46563          	bltu	s0,a5,8002790 <create_chain+0xba>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800278a:	fb2afae3          	bgeu	s5,s2,800273e <create_chain+0x68>
					ncl = 2;
 800278e:	4409                	li	s0,2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002790:	000a2503          	lw	a0,0(s4)
 8002794:	85a2                	mv	a1,s0
 8002796:	00000097          	auipc	ra,0x0
 800279a:	e4a080e7          	jalr	-438(ra) # 80025e0 <get_fat.isra.7>
				if (cs == 0) break;				/* Found a free cluster? */
 800279e:	c909                	beqz	a0,80027b0 <create_chain+0xda>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80027a0:	f7550ae3          	beq	a0,s5,8002714 <create_chain+0x3e>
 80027a4:	05650863          	beq	a0,s6,80027f4 <create_chain+0x11e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80027a8:	fd241de3          	bne	s0,s2,8002782 <create_chain+0xac>
 80027ac:	bf49                	j	800273e <create_chain+0x68>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80027ae:	d479                	beqz	s0,800277c <create_chain+0xa6>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80027b0:	567d                	li	a2,-1
 80027b2:	85a2                	mv	a1,s0
 80027b4:	8526                	mv	a0,s1
 80027b6:	00000097          	auipc	ra,0x0
 80027ba:	cd6080e7          	jalr	-810(ra) # 800248c <put_fat>
		if (res == FR_OK && clst != 0) {
 80027be:	e905                	bnez	a0,80027ee <create_chain+0x118>
 80027c0:	00099f63          	bnez	s3,80027de <create_chain+0x108>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027c4:	48d8                	lw	a4,20(s1)
 80027c6:	489c                	lw	a5,16(s1)
		fs->last_clst = ncl;
 80027c8:	c4c0                	sw	s0,12(s1)
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027ca:	1779                	addi	a4,a4,-2
 80027cc:	02f77663          	bgeu	a4,a5,80027f8 <create_chain+0x122>
		fs->fsi_flag |= 1;
 80027d0:	0044c783          	lbu	a5,4(s1)
 80027d4:	0017e793          	ori	a5,a5,1
 80027d8:	00f48223          	sb	a5,4(s1)
 80027dc:	bf2d                	j	8002716 <create_chain+0x40>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80027de:	8622                	mv	a2,s0
 80027e0:	85ce                	mv	a1,s3
 80027e2:	8526                	mv	a0,s1
 80027e4:	00000097          	auipc	ra,0x0
 80027e8:	ca8080e7          	jalr	-856(ra) # 800248c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80027ec:	dd61                	beqz	a0,80027c4 <create_chain+0xee>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80027ee:	4785                	li	a5,1
 80027f0:	f2f512e3          	bne	a0,a5,8002714 <create_chain+0x3e>
 80027f4:	547d                	li	s0,-1
 80027f6:	b705                	j	8002716 <create_chain+0x40>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80027f8:	17fd                	addi	a5,a5,-1
 80027fa:	c89c                	sw	a5,16(s1)
 80027fc:	bfd1                	j	80027d0 <create_chain+0xfa>

080027fe <dir_next>:
{
 80027fe:	7179                	addi	sp,sp,-48
 8002800:	cc52                	sw	s4,24(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002802:	01052a03          	lw	s4,16(a0)
{
 8002806:	d422                	sw	s0,40(sp)
 8002808:	d606                	sw	ra,44(sp)
 800280a:	d226                	sw	s1,36(sp)
 800280c:	d04a                	sw	s2,32(sp)
 800280e:	ce4e                	sw	s3,28(sp)
 8002810:	ca56                	sw	s5,20(sp)
 8002812:	c85a                	sw	s6,16(sp)
 8002814:	c65e                	sw	s7,12(sp)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002816:	020a0a13          	addi	s4,s4,32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800281a:	002007b7          	lui	a5,0x200
	FATFS *fs = dp->obj.fs;
 800281e:	4100                	lw	s0,0(a0)
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002820:	00fa6463          	bltu	s4,a5,8002828 <dir_next+0x2a>
 8002824:	00052c23          	sw	zero,24(a0)
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002828:	4d18                	lw	a4,24(a0)
 800282a:	4791                	li	a5,4
 800282c:	c705                	beqz	a4,8002854 <dir_next+0x56>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800282e:	1ffa7b13          	andi	s6,s4,511
 8002832:	8aae                	mv	s5,a1
 8002834:	84aa                	mv	s1,a0
 8002836:	0c0b1d63          	bnez	s6,8002910 <dir_next+0x112>
		if (dp->clust == 0) {	/* Static table */
 800283a:	494c                	lw	a1,20(a0)
		dp->sect++;				/* Next sector */
 800283c:	0705                	addi	a4,a4,1
 800283e:	cd18                	sw	a4,24(a0)
		if (dp->clust == 0) {	/* Static table */
 8002840:	e595                	bnez	a1,800286c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002842:	00845703          	lhu	a4,8(s0)
 8002846:	005a5793          	srli	a5,s4,0x5
 800284a:	0ce7e363          	bltu	a5,a4,8002910 <dir_next+0x112>
				dp->sect = 0; return FR_NO_FILE;
 800284e:	0004ac23          	sw	zero,24(s1)
 8002852:	4791                	li	a5,4
}
 8002854:	50b2                	lw	ra,44(sp)
 8002856:	5422                	lw	s0,40(sp)
 8002858:	5492                	lw	s1,36(sp)
 800285a:	5902                	lw	s2,32(sp)
 800285c:	49f2                	lw	s3,28(sp)
 800285e:	4a62                	lw	s4,24(sp)
 8002860:	4ad2                	lw	s5,20(sp)
 8002862:	4b42                	lw	s6,16(sp)
 8002864:	4bb2                	lw	s7,12(sp)
 8002866:	853e                	mv	a0,a5
 8002868:	6145                	addi	sp,sp,48
 800286a:	8082                	ret
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800286c:	00a45983          	lhu	s3,10(s0)
 8002870:	009a5793          	srli	a5,s4,0x9
 8002874:	19fd                	addi	s3,s3,-1
 8002876:	00f9f9b3          	and	s3,s3,a5
 800287a:	08099b63          	bnez	s3,8002910 <dir_next+0x112>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800287e:	8522                	mv	a0,s0
 8002880:	00000097          	auipc	ra,0x0
 8002884:	d60080e7          	jalr	-672(ra) # 80025e0 <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002888:	4b85                	li	s7,1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800288a:	892a                	mv	s2,a0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800288c:	00abe463          	bltu	s7,a0,8002894 <dir_next+0x96>
 8002890:	4789                	li	a5,2
 8002892:	b7c9                	j	8002854 <dir_next+0x56>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002894:	57fd                	li	a5,-1
 8002896:	00f51463          	bne	a0,a5,800289e <dir_next+0xa0>
 800289a:	4785                	li	a5,1
 800289c:	bf65                	j	8002854 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800289e:	485c                	lw	a5,20(s0)
 80028a0:	04f56f63          	bltu	a0,a5,80028fe <dir_next+0x100>
					if (!stretch) {								/* If no stretch, report EOT */
 80028a4:	fa0a85e3          	beqz	s5,800284e <dir_next+0x50>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80028a8:	48cc                	lw	a1,20(s1)
 80028aa:	8526                	mv	a0,s1
 80028ac:	00000097          	auipc	ra,0x0
 80028b0:	e2a080e7          	jalr	-470(ra) # 80026d6 <create_chain>
 80028b4:	892a                	mv	s2,a0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80028b6:	479d                	li	a5,7
 80028b8:	dd51                	beqz	a0,8002854 <dir_next+0x56>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80028ba:	fd750be3          	beq	a0,s7,8002890 <dir_next+0x92>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80028be:	57fd                	li	a5,-1
 80028c0:	fcf50de3          	beq	a0,a5,800289a <dir_next+0x9c>
	if (fs->wflag) {	/* Is the disk access window dirty */
 80028c4:	00344783          	lbu	a5,3(s0)
 80028c8:	efa1                	bnez	a5,8002920 <dir_next+0x122>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80028ca:	85ca                	mv	a1,s2
 80028cc:	8522                	mv	a0,s0
 80028ce:	fffff097          	auipc	ra,0xfffff
 80028d2:	650080e7          	jalr	1616(ra) # 8001f1e <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80028d6:	03040a93          	addi	s5,s0,48
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80028da:	8baa                	mv	s7,a0
	fs->winsect = sect;				/* Set window to top of the cluster */
 80028dc:	d448                	sw	a0,44(s0)
	BYTE *d = (BYTE*)dst;
 80028de:	23040713          	addi	a4,s0,560
 80028e2:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 80028e4:	0785                	addi	a5,a5,1
 80028e6:	fe078fa3          	sb	zero,-1(a5) # 1fffff <__stack_size+0x1fefff>
	} while (--cnt);
 80028ea:	fee79de3          	bne	a5,a4,80028e4 <dir_next+0xe6>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80028ee:	00a45783          	lhu	a5,10(s0)
 80028f2:	02f9ee63          	bltu	s3,a5,800292e <dir_next+0x130>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80028f6:	00a45783          	lhu	a5,10(s0)
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80028fa:	faf990e3          	bne	s3,a5,800289a <dir_next+0x9c>
				dp->clust = clst;		/* Initialize data for new cluster */
 80028fe:	0124aa23          	sw	s2,20(s1)
				dp->sect = clst2sect(fs, clst);
 8002902:	85ca                	mv	a1,s2
 8002904:	8522                	mv	a0,s0
 8002906:	fffff097          	auipc	ra,0xfffff
 800290a:	618080e7          	jalr	1560(ra) # 8001f1e <clst2sect>
 800290e:	cc88                	sw	a0,24(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002910:	03040413          	addi	s0,s0,48
 8002914:	945a                	add	s0,s0,s6
	dp->dptr = ofs;						/* Current entry */
 8002916:	0144a823          	sw	s4,16(s1)
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800291a:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 800291c:	4781                	li	a5,0
 800291e:	bf1d                	j	8002854 <dir_next+0x56>
 8002920:	8522                	mv	a0,s0
 8002922:	fffff097          	auipc	ra,0xfffff
 8002926:	6e4080e7          	jalr	1764(ra) # 8002006 <sync_window.part.3>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800292a:	f925                	bnez	a0,800289a <dir_next+0x9c>
 800292c:	bf79                	j	80028ca <dir_next+0xcc>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800292e:	00144503          	lbu	a0,1(s0)
 8002932:	4685                	li	a3,1
 8002934:	013b8633          	add	a2,s7,s3
 8002938:	85d6                	mv	a1,s5
 800293a:	00001097          	auipc	ra,0x1
 800293e:	110080e7          	jalr	272(ra) # 8003a4a <disk_write>
 8002942:	f955                	bnez	a0,80028f6 <dir_next+0xf8>
 8002944:	0985                	addi	s3,s3,1
 8002946:	b765                	j	80028ee <dir_next+0xf0>

08002948 <dir_sdi.constprop.9>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002948:	1101                	addi	sp,sp,-32
 800294a:	c84a                	sw	s2,16(sp)
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800294c:	00852903          	lw	s2,8(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002950:	cc22                	sw	s0,24(sp)
 8002952:	ca26                	sw	s1,20(sp)
 8002954:	ce06                	sw	ra,28(sp)
 8002956:	c64e                	sw	s3,12(sp)
 8002958:	c452                	sw	s4,8(sp)
	dp->dptr = ofs;				/* Set current offset */
 800295a:	00052823          	sw	zero,16(a0)
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800295e:	84aa                	mv	s1,a0
	FATFS *fs = dp->obj.fs;
 8002960:	4100                	lw	s0,0(a0)
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002962:	04091163          	bnez	s2,80029a4 <dir_sdi.constprop.9+0x5c>
 8002966:	00044703          	lbu	a4,0(s0)
 800296a:	4789                	li	a5,2
 800296c:	00e7f463          	bgeu	a5,a4,8002974 <dir_sdi.constprop.9+0x2c>
		clst = fs->dirbase;
 8002970:	505c                	lw	a5,36(s0)
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002972:	eb85                	bnez	a5,80029a2 <dir_sdi.constprop.9+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002974:	00845783          	lhu	a5,8(s0)
 8002978:	eb91                	bnez	a5,800298c <dir_sdi.constprop.9+0x44>
 800297a:	4509                	li	a0,2
}
 800297c:	40f2                	lw	ra,28(sp)
 800297e:	4462                	lw	s0,24(sp)
 8002980:	44d2                	lw	s1,20(sp)
 8002982:	4942                	lw	s2,16(sp)
 8002984:	49b2                	lw	s3,12(sp)
 8002986:	4a22                	lw	s4,8(sp)
 8002988:	6105                	addi	sp,sp,32
 800298a:	8082                	ret
		dp->sect = fs->dirbase;
 800298c:	505c                	lw	a5,36(s0)
 800298e:	cc9c                	sw	a5,24(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002990:	4c9c                	lw	a5,24(s1)
	dp->clust = clst;					/* Current cluster# */
 8002992:	0124aa23          	sw	s2,20(s1)
	if (dp->sect == 0) return FR_INT_ERR;
 8002996:	d3f5                	beqz	a5,800297a <dir_sdi.constprop.9+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002998:	03040413          	addi	s0,s0,48
 800299c:	ccc0                	sw	s0,28(s1)
	return FR_OK;
 800299e:	4501                	li	a0,0
 80029a0:	bff1                	j	800297c <dir_sdi.constprop.9+0x34>
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80029a2:	893e                	mv	s2,a5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80029a4:	00a45783          	lhu	a5,10(s0)
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029a8:	59fd                	li	s3,-1
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80029aa:	4a05                	li	s4,1
		while (ofs >= csz) {				/* Follow cluster chain */
 80029ac:	e385                	bnez	a5,80029cc <dir_sdi.constprop.9+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80029ae:	4088                	lw	a0,0(s1)
 80029b0:	85ca                	mv	a1,s2
 80029b2:	00000097          	auipc	ra,0x0
 80029b6:	c2e080e7          	jalr	-978(ra) # 80025e0 <get_fat.isra.7>
 80029ba:	892a                	mv	s2,a0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029bc:	03350063          	beq	a0,s3,80029dc <dir_sdi.constprop.9+0x94>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80029c0:	faaa7de3          	bgeu	s4,a0,800297a <dir_sdi.constprop.9+0x32>
 80029c4:	485c                	lw	a5,20(s0)
 80029c6:	fef564e3          	bltu	a0,a5,80029ae <dir_sdi.constprop.9+0x66>
 80029ca:	bf45                	j	800297a <dir_sdi.constprop.9+0x32>
		dp->sect = clst2sect(fs, clst);
 80029cc:	85ca                	mv	a1,s2
 80029ce:	8522                	mv	a0,s0
 80029d0:	fffff097          	auipc	ra,0xfffff
 80029d4:	54e080e7          	jalr	1358(ra) # 8001f1e <clst2sect>
 80029d8:	cc88                	sw	a0,24(s1)
 80029da:	bf5d                	j	8002990 <dir_sdi.constprop.9+0x48>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029dc:	4505                	li	a0,1
 80029de:	bf79                	j	800297c <dir_sdi.constprop.9+0x34>

080029e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80029e0:	7179                	addi	sp,sp,-48
 80029e2:	c62a                	sw	a0,12(sp)
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80029e4:	0868                	addi	a0,sp,28
{
 80029e6:	d606                	sw	ra,44(sp)
 80029e8:	c42e                	sw	a1,8(sp)
 80029ea:	c232                	sw	a2,4(sp)
	const TCHAR *rp = path;
 80029ec:	ce2e                	sw	a1,28(sp)
	vol = get_ldnumber(&rp);
 80029ee:	fffff097          	auipc	ra,0xfffff
 80029f2:	54c080e7          	jalr	1356(ra) # 8001f3a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80029f6:	04054163          	bltz	a0,8002a38 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80029fa:	200007b7          	lui	a5,0x20000
 80029fe:	50878713          	addi	a4,a5,1288 # 20000508 <FatFs>
 8002a02:	050a                	slli	a0,a0,0x2
 8002a04:	972a                	add	a4,a4,a0
 8002a06:	4318                	lw	a4,0(a4)

	if (cfs) {
 8002a08:	50878793          	addi	a5,a5,1288
 8002a0c:	4612                	lw	a2,4(sp)
 8002a0e:	c319                	beqz	a4,8002a14 <f_mount+0x34>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002a10:	00070023          	sb	zero,0(a4)
	}

	if (fs) {
 8002a14:	4732                	lw	a4,12(sp)
 8002a16:	c319                	beqz	a4,8002a1c <f_mount+0x3c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002a18:	00070023          	sb	zero,0(a4)
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002a1c:	97aa                	add	a5,a5,a0
 8002a1e:	c398                	sw	a4,0(a5)

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002a20:	4501                	li	a0,0
 8002a22:	ca01                	beqz	a2,8002a32 <f_mount+0x52>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002a24:	4601                	li	a2,0
 8002a26:	006c                	addi	a1,sp,12
 8002a28:	0028                	addi	a0,sp,8
 8002a2a:	fffff097          	auipc	ra,0xfffff
 8002a2e:	720080e7          	jalr	1824(ra) # 800214a <find_volume>
	LEAVE_FF(fs, res);
}
 8002a32:	50b2                	lw	ra,44(sp)
 8002a34:	6145                	addi	sp,sp,48
 8002a36:	8082                	ret
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a38:	452d                	li	a0,11
 8002a3a:	bfe5                	j	8002a32 <f_mount+0x52>

08002a3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002a3c:	7119                	addi	sp,sp,-128
 8002a3e:	d4d2                	sw	s4,104(sp)
 8002a40:	de86                	sw	ra,124(sp)
 8002a42:	dca2                	sw	s0,120(sp)
 8002a44:	daa6                	sw	s1,116(sp)
 8002a46:	d8ca                	sw	s2,112(sp)
 8002a48:	d6ce                	sw	s3,108(sp)
 8002a4a:	d2d6                	sw	s5,100(sp)
 8002a4c:	d0da                	sw	s6,96(sp)
 8002a4e:	cede                	sw	s7,92(sp)
 8002a50:	cce2                	sw	s8,88(sp)
 8002a52:	cae6                	sw	s9,84(sp)
 8002a54:	c8ea                	sw	s10,80(sp)
 8002a56:	c6ee                	sw	s11,76(sp)
 8002a58:	c62e                	sw	a1,12(sp)
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002a5a:	4a25                	li	s4,9
 8002a5c:	4a050a63          	beqz	a0,8002f10 <f_open+0x4d4>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002a60:	03f67993          	andi	s3,a2,63
 8002a64:	8932                	mv	s2,a2
 8002a66:	84aa                	mv	s1,a0
	res = find_volume(&path, &fs, mode);
 8002a68:	864e                	mv	a2,s3
 8002a6a:	080c                	addi	a1,sp,16
 8002a6c:	0068                	addi	a0,sp,12
 8002a6e:	fffff097          	auipc	ra,0xfffff
 8002a72:	6dc080e7          	jalr	1756(ra) # 800214a <find_volume>
 8002a76:	8a2a                	mv	s4,a0
	if (res == FR_OK) {
 8002a78:	842a                	mv	s0,a0
 8002a7a:	30051b63          	bnez	a0,8002d90 <f_open+0x354>
		dj.obj.fs = fs;
 8002a7e:	4ac2                	lw	s5,16(sp)
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002a80:	4d32                	lw	s10,12(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a82:	02f00693          	li	a3,47
		dj.obj.fs = fs;
 8002a86:	ca56                	sw	s5,20(sp)
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a88:	05c00713          	li	a4,92
 8002a8c:	000d4783          	lbu	a5,0(s10)
 8002a90:	0ed78d63          	beq	a5,a3,8002b8a <f_open+0x14e>
 8002a94:	0ee78b63          	beq	a5,a4,8002b8a <f_open+0x14e>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002a98:	ce02                	sw	zero,28(sp)
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002a9a:	000d4703          	lbu	a4,0(s10)
 8002a9e:	47fd                	li	a5,31
 8002aa0:	0ee7f763          	bgeu	a5,a4,8002b8e <f_open+0x152>
 8002aa4:	01f10c13          	addi	s8,sp,31
		*d++ = (BYTE)val;
 8002aa8:	02000b13          	li	s6,32
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002aac:	02f00b93          	li	s7,47
	if (c >= DbcTbl[0]) {
 8002ab0:	08000cb7          	lui	s9,0x8000
	mem_set(sfn, ' ', 11);
 8002ab4:	085c                	addi	a5,sp,20
		*d++ = (BYTE)val;
 8002ab6:	03678023          	sb	s6,32(a5)
 8002aba:	0785                	addi	a5,a5,1
	} while (--cnt);
 8002abc:	fefc1de3          	bne	s8,a5,8002ab6 <f_open+0x7a>
	si = i = 0; ni = 8;
 8002ac0:	4701                	li	a4,0
 8002ac2:	4601                	li	a2,0
 8002ac4:	45a1                	li	a1,8
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002ac6:	05c00513          	li	a0,92
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002aca:	02e00813          	li	a6,46
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002ace:	48ad                	li	a7,11
	if (c >= DbcTbl[0]) {
 8002ad0:	07d00313          	li	t1,125
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002ad4:	4e65                	li	t3,25
	if (c >= DbcTbl[4]) {
 8002ad6:	03f00e93          	li	t4,63
		if (c <= DbcTbl[5]) return 1;
 8002ada:	07e00f13          	li	t5,126
		c = (BYTE)p[si++];				/* Get a byte */
 8002ade:	00cd07b3          	add	a5,s10,a2
 8002ae2:	0007c783          	lbu	a5,0(a5)
 8002ae6:	00160693          	addi	a3,a2,1 # 10001 <__stack_size+0xf001>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002aea:	02fb7063          	bgeu	s6,a5,8002b0a <f_open+0xce>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002aee:	01778463          	beq	a5,s7,8002af6 <f_open+0xba>
 8002af2:	1aa79763          	bne	a5,a0,8002ca0 <f_open+0x264>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002af6:	05c00593          	li	a1,92
 8002afa:	00dd0633          	add	a2,s10,a3
 8002afe:	00064603          	lbu	a2,0(a2)
 8002b02:	19760d63          	beq	a2,s7,8002c9c <f_open+0x260>
 8002b06:	18b60b63          	beq	a2,a1,8002c9c <f_open+0x260>
	*path = p + si;						/* Return pointer to the next segment */
 8002b0a:	9d36                	add	s10,s10,a3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002b0c:	18070e63          	beqz	a4,8002ca8 <f_open+0x26c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002b10:	03414683          	lbu	a3,52(sp)
 8002b14:	0e500713          	li	a4,229
 8002b18:	00e69563          	bne	a3,a4,8002b22 <f_open+0xe6>
 8002b1c:	4715                	li	a4,5
 8002b1e:	02e10a23          	sb	a4,52(sp)
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b22:	4711                	li	a4,4
 8002b24:	00fb7363          	bgeu	s6,a5,8002b2a <f_open+0xee>
 8002b28:	4701                	li	a4,0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002b2a:	0848                	addi	a0,sp,20
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b2c:	02e10fa3          	sb	a4,63(sp)
	FATFS *fs = dp->obj.fs;
 8002b30:	4dd2                	lw	s11,20(sp)
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002b32:	00000097          	auipc	ra,0x0
 8002b36:	e16080e7          	jalr	-490(ra) # 8002948 <dir_sdi.constprop.9>
 8002b3a:	842a                	mv	s0,a0
	if (res != FR_OK) return res;
 8002b3c:	1e051663          	bnez	a0,8002d28 <f_open+0x2ec>
		res = move_window(fs, dp->sect);
 8002b40:	55b2                	lw	a1,44(sp)
 8002b42:	856e                	mv	a0,s11
 8002b44:	fffff097          	auipc	ra,0xfffff
 8002b48:	526080e7          	jalr	1318(ra) # 800206a <move_window>
 8002b4c:	842a                	mv	s0,a0
		if (res != FR_OK) break;
 8002b4e:	1c051d63          	bnez	a0,8002d28 <f_open+0x2ec>
		c = dp->dir[DIR_Name];
 8002b52:	5542                	lw	a0,48(sp)
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002b54:	00054783          	lbu	a5,0(a0)
 8002b58:	1c078763          	beqz	a5,8002d26 <f_open+0x2ea>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002b5c:	00b54783          	lbu	a5,11(a0)
 8002b60:	03f7f713          	andi	a4,a5,63
 8002b64:	00e10d23          	sb	a4,26(sp)
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002b68:	8ba1                	andi	a5,a5,8
 8002b6a:	eb89                	bnez	a5,8002b7c <f_open+0x140>
 8002b6c:	462d                	li	a2,11
 8002b6e:	184c                	addi	a1,sp,52
 8002b70:	fffff097          	auipc	ra,0xfffff
 8002b74:	394080e7          	jalr	916(ra) # 8001f04 <mem_cmp>
 8002b78:	1a050863          	beqz	a0,8002d28 <f_open+0x2ec>
		res = dir_next(dp, 0);	/* Next entry */
 8002b7c:	4581                	li	a1,0
 8002b7e:	0848                	addi	a0,sp,20
 8002b80:	00000097          	auipc	ra,0x0
 8002b84:	c7e080e7          	jalr	-898(ra) # 80027fe <dir_next>
 8002b88:	bf4d                	j	8002b3a <f_open+0xfe>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002b8a:	0d05                	addi	s10,s10,1
 8002b8c:	b701                	j	8002a8c <f_open+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002b8e:	f8000793          	li	a5,-128
		res = dir_sdi(dp, 0);
 8002b92:	0848                	addi	a0,sp,20
		dp->fn[NSFLAG] = NS_NONAME;
 8002b94:	02f10fa3          	sb	a5,63(sp)
		res = dir_sdi(dp, 0);
 8002b98:	00000097          	auipc	ra,0x0
 8002b9c:	db0080e7          	jalr	-592(ra) # 8002948 <dir_sdi.constprop.9>
 8002ba0:	842a                	mv	s0,a0
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002ba2:	1c050263          	beqz	a0,8002d66 <f_open+0x32a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002ba6:	01c97793          	andi	a5,s2,28
 8002baa:	28078563          	beqz	a5,8002e34 <f_open+0x3f8>
			if (res != FR_OK) {					/* No file, create new */
 8002bae:	1e040563          	beqz	s0,8002d98 <f_open+0x35c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002bb2:	4791                	li	a5,4
 8002bb4:	1cf41e63          	bne	s0,a5,8002d90 <f_open+0x354>
	res = dir_sdi(dp, 0);
 8002bb8:	0848                	addi	a0,sp,20
	FATFS *fs = dp->obj.fs;
 8002bba:	4952                	lw	s2,20(sp)
	res = dir_sdi(dp, 0);
 8002bbc:	00000097          	auipc	ra,0x0
 8002bc0:	d8c080e7          	jalr	-628(ra) # 8002948 <dir_sdi.constprop.9>
 8002bc4:	842a                	mv	s0,a0
	if (res == FR_OK) {
 8002bc6:	1c051163          	bnez	a0,8002d88 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002bca:	0e500a93          	li	s5,229
			res = move_window(fs, dp->sect);
 8002bce:	55b2                	lw	a1,44(sp)
 8002bd0:	854a                	mv	a0,s2
 8002bd2:	fffff097          	auipc	ra,0xfffff
 8002bd6:	498080e7          	jalr	1176(ra) # 800206a <move_window>
 8002bda:	842a                	mv	s0,a0
			if (res != FR_OK) break;
 8002bdc:	1a051663          	bnez	a0,8002d88 <f_open+0x34c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002be0:	57c2                	lw	a5,48(sp)
 8002be2:	0007c783          	lbu	a5,0(a5)
 8002be6:	19579663          	bne	a5,s5,8002d72 <f_open+0x336>
		res = move_window(fs, dp->sect);
 8002bea:	55b2                	lw	a1,44(sp)
 8002bec:	854a                	mv	a0,s2
 8002bee:	fffff097          	auipc	ra,0xfffff
 8002bf2:	47c080e7          	jalr	1148(ra) # 800206a <move_window>
 8002bf6:	842a                	mv	s0,a0
		if (res == FR_OK) {
 8002bf8:	18051c63          	bnez	a0,8002d90 <f_open+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002bfc:	57c2                	lw	a5,48(sp)
	BYTE *d = (BYTE*)dst;
 8002bfe:	02078713          	addi	a4,a5,32
		*d++ = (BYTE)val;
 8002c02:	0785                	addi	a5,a5,1
 8002c04:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002c08:	fef71de3          	bne	a4,a5,8002c02 <f_open+0x1c6>
	if (cnt != 0) {
 8002c0c:	5542                	lw	a0,48(sp)
 8002c0e:	462d                	li	a2,11
 8002c10:	184c                	addi	a1,sp,52
 8002c12:	fffff097          	auipc	ra,0xfffff
 8002c16:	3b4080e7          	jalr	948(ra) # 8001fc6 <mem_cpy.part.0>
			fs->wflag = 1;
 8002c1a:	4785                	li	a5,1
 8002c1c:	00f901a3          	sb	a5,3(s2)
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002c20:	0089e993          	ori	s3,s3,8
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8002c24:	47c2                	lw	a5,16(sp)
 8002c26:	5442                	lw	s0,48(sp)
 8002c28:	0007c503          	lbu	a0,0(a5)
 8002c2c:	85a2                	mv	a1,s0
 8002c2e:	fffff097          	auipc	ra,0xfffff
 8002c32:	3b2080e7          	jalr	946(ra) # 8001fe0 <ld_clust.isra.1>
 8002c36:	892a                	mv	s2,a0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8002c38:	00000097          	auipc	ra,0x0
 8002c3c:	730080e7          	jalr	1840(ra) # 8003368 <get_fattime>
 8002c40:	85aa                	mv	a1,a0
 8002c42:	00e40513          	addi	a0,s0,14
 8002c46:	fffff097          	auipc	ra,0xfffff
 8002c4a:	2a2080e7          	jalr	674(ra) # 8001ee8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002c4e:	57c2                	lw	a5,48(sp)
 8002c50:	02000713          	li	a4,32
	if (fs->fs_type == FS_FAT32) {
 8002c54:	468d                	li	a3,3
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002c56:	00e785a3          	sb	a4,11(a5)
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002c5a:	57c2                	lw	a5,48(sp)
 8002c5c:	4742                	lw	a4,16(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c5e:	00078d23          	sb	zero,26(a5)
	*ptr++ = (BYTE)val;
 8002c62:	00078da3          	sb	zero,27(a5)
	if (fs->fs_type == FS_FAT32) {
 8002c66:	00074603          	lbu	a2,0(a4)
 8002c6a:	00d61663          	bne	a2,a3,8002c76 <f_open+0x23a>
	*ptr++ = (BYTE)val; val >>= 8;
 8002c6e:	00078a23          	sb	zero,20(a5)
	*ptr++ = (BYTE)val;
 8002c72:	00078aa3          	sb	zero,21(a5)
					st_dword(dj.dir + DIR_FileSize, 0);
 8002c76:	57c2                	lw	a5,48(sp)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c78:	00078e23          	sb	zero,28(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c7c:	00078ea3          	sb	zero,29(a5)
	*ptr++ = (BYTE)val; val >>= 8;
 8002c80:	00078f23          	sb	zero,30(a5)
	*ptr++ = (BYTE)val;
 8002c84:	00078fa3          	sb	zero,31(a5)
					fs->wflag = 1;
 8002c88:	4785                	li	a5,1
 8002c8a:	00f701a3          	sb	a5,3(a4)
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8002c8e:	1c090063          	beqz	s2,8002e4e <f_open+0x412>
	FATFS *fs = obj->fs;
 8002c92:	4ad2                	lw	s5,20(sp)
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c94:	1127ef63          	bltu	a5,s2,8002db2 <f_open+0x376>
 8002c98:	4409                	li	s0,2
 8002c9a:	a8dd                	j	8002d90 <f_open+0x354>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002c9c:	0685                	addi	a3,a3,1
 8002c9e:	bdb1                	j	8002afa <f_open+0xbe>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002ca0:	2b078c63          	beq	a5,a6,8002f58 <f_open+0x51c>
 8002ca4:	00b76463          	bltu	a4,a1,8002cac <f_open+0x270>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002ca8:	4419                	li	s0,6
 8002caa:	bdf5                	j	8002ba6 <f_open+0x16a>
	if (c >= DbcTbl[0]) {
 8002cac:	07f78f93          	addi	t6,a5,127
 8002cb0:	0fffff93          	andi	t6,t6,255
 8002cb4:	05f36763          	bltu	t1,t6,8002d02 <f_open+0x2c6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002cb8:	96ea                	add	a3,a3,s10
 8002cba:	0006cf83          	lbu	t6,0(a3) # 1000 <__stack_size>
 8002cbe:	0609                	addi	a2,a2,2
	if (c >= DbcTbl[4]) {
 8002cc0:	fffef4e3          	bgeu	t4,t6,8002ca8 <f_open+0x26c>
		if (c <= DbcTbl[5]) return 1;
 8002cc4:	07fff693          	andi	a3,t6,127
 8002cc8:	fedf60e3          	bltu	t5,a3,8002ca8 <f_open+0x26c>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002ccc:	fff58693          	addi	a3,a1,-1 # efffffff <_sp+0xcfff7fff>
 8002cd0:	fcd77ce3          	bgeu	a4,a3,8002ca8 <f_open+0x26c>
			sfn[i++] = c;
 8002cd4:	0080                	addi	s0,sp,64
 8002cd6:	00170693          	addi	a3,a4,1
 8002cda:	00e402b3          	add	t0,s0,a4
 8002cde:	fef28a23          	sb	a5,-12(t0)
			sfn[i++] = d;
 8002ce2:	87b6                	mv	a5,a3
 8002ce4:	97a2                	add	a5,a5,s0
 8002ce6:	0709                	addi	a4,a4,2
 8002ce8:	fff78a23          	sb	t6,-12(a5)
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002cec:	86b2                	mv	a3,a2
			i = 8; ni = 11;				/* Enter file extension field */
 8002cee:	8636                	mv	a2,a3
 8002cf0:	b3fd                	j	8002ade <f_open+0xa2>
	while (*str && *str != chr) str++;
 8002cf2:	0605                	addi	a2,a2,1
 8002cf4:	00064f83          	lbu	t6,0(a2)
 8002cf8:	000f8863          	beqz	t6,8002d08 <f_open+0x2cc>
 8002cfc:	fff79be3          	bne	a5,t6,8002cf2 <f_open+0x2b6>
 8002d00:	b765                	j	8002ca8 <f_open+0x26c>
	if (c >= DbcTbl[0]) {
 8002d02:	2d0c8613          	addi	a2,s9,720 # 80002d0 <enable_mcycle_minstret+0x84>
 8002d06:	b7fd                	j	8002cf4 <f_open+0x2b8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002d08:	f9f78613          	addi	a2,a5,-97
 8002d0c:	0ff67613          	andi	a2,a2,255
 8002d10:	00ce6563          	bltu	t3,a2,8002d1a <f_open+0x2de>
 8002d14:	1781                	addi	a5,a5,-32
 8002d16:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
 8002d1a:	0090                	addi	a2,sp,64
 8002d1c:	963a                	add	a2,a2,a4
 8002d1e:	fef60a23          	sb	a5,-12(a2)
 8002d22:	0705                	addi	a4,a4,1
 8002d24:	b7e9                	j	8002cee <f_open+0x2b2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002d26:	4411                	li	s0,4
			ns = dp->fn[NSFLAG];
 8002d28:	03f14783          	lbu	a5,63(sp)
			if (res != FR_OK) {				/* Failed to find the object */
 8002d2c:	c809                	beqz	s0,8002d3e <f_open+0x302>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002d2e:	4711                	li	a4,4
 8002d30:	e6e41be3          	bne	s0,a4,8002ba6 <f_open+0x16a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002d34:	8b91                	andi	a5,a5,4
 8002d36:	e60798e3          	bnez	a5,8002ba6 <f_open+0x16a>
				res = FR_NO_PATH; break;
 8002d3a:	4415                	li	s0,5
 8002d3c:	b5ad                	j	8002ba6 <f_open+0x16a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002d3e:	8b91                	andi	a5,a5,4
 8002d40:	e39d                	bnez	a5,8002d66 <f_open+0x32a>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002d42:	01a14783          	lbu	a5,26(sp)
 8002d46:	8bc1                	andi	a5,a5,16
 8002d48:	dbed                	beqz	a5,8002d3a <f_open+0x2fe>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002d4a:	5792                	lw	a5,36(sp)
 8002d4c:	000ac503          	lbu	a0,0(s5)
 8002d50:	030a8593          	addi	a1,s5,48
 8002d54:	1ff7f793          	andi	a5,a5,511
 8002d58:	95be                	add	a1,a1,a5
 8002d5a:	fffff097          	auipc	ra,0xfffff
 8002d5e:	286080e7          	jalr	646(ra) # 8001fe0 <ld_clust.isra.1>
 8002d62:	ce2a                	sw	a0,28(sp)
 8002d64:	bb81                	j	8002ab4 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002d66:	03f10783          	lb	a5,63(sp)
		res = follow_path(&dj, path);	/* Follow the file path */
 8002d6a:	4401                	li	s0,0
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002d6c:	e207dde3          	bgez	a5,8002ba6 <f_open+0x16a>
 8002d70:	bf25                	j	8002ca8 <f_open+0x26c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002d72:	e6078ce3          	beqz	a5,8002bea <f_open+0x1ae>
			res = dir_next(dp, 1);
 8002d76:	4585                	li	a1,1
 8002d78:	0848                	addi	a0,sp,20
 8002d7a:	00000097          	auipc	ra,0x0
 8002d7e:	a84080e7          	jalr	-1404(ra) # 80027fe <dir_next>
 8002d82:	842a                	mv	s0,a0
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002d84:	e40505e3          	beqz	a0,8002bce <f_open+0x192>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002d88:	4791                	li	a5,4
 8002d8a:	00f41363          	bne	s0,a5,8002d90 <f_open+0x354>
 8002d8e:	441d                	li	s0,7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002d90:	0004a023          	sw	zero,0(s1)
 8002d94:	8a22                	mv	s4,s0
 8002d96:	aaad                	j	8002f10 <f_open+0x4d4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002d98:	01a14783          	lbu	a5,26(sp)
 8002d9c:	8bc5                	andi	a5,a5,17
 8002d9e:	fbe5                	bnez	a5,8002d8e <f_open+0x352>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002da0:	00497793          	andi	a5,s2,4
 8002da4:	1a079663          	bnez	a5,8002f50 <f_open+0x514>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002da8:	00897913          	andi	s2,s2,8
 8002dac:	0a090163          	beqz	s2,8002e4e <f_open+0x412>
 8002db0:	bd95                	j	8002c24 <f_open+0x1e8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002db2:	014aa783          	lw	a5,20(s5)
 8002db6:	eef971e3          	bgeu	s2,a5,8002c98 <f_open+0x25c>
						dw = fs->winsect;
 8002dba:	02c72b83          	lw	s7,44(a4)
 8002dbe:	844a                	mv	s0,s2
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002dc0:	4c05                	li	s8,1
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002dc2:	5cfd                	li	s9,-1
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002dc4:	4552                	lw	a0,20(sp)
 8002dc6:	85a2                	mv	a1,s0
 8002dc8:	00000097          	auipc	ra,0x0
 8002dcc:	818080e7          	jalr	-2024(ra) # 80025e0 <get_fat.isra.7>
 8002dd0:	8b2a                	mv	s6,a0
		if (nxt == 0) break;				/* Empty cluster? */
 8002dd2:	c521                	beqz	a0,8002e1a <f_open+0x3de>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002dd4:	ed8502e3          	beq	a0,s8,8002c98 <f_open+0x25c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002dd8:	01951463          	bne	a0,s9,8002de0 <f_open+0x3a4>
 8002ddc:	4405                	li	s0,1
 8002dde:	bf4d                	j	8002d90 <f_open+0x354>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002de0:	85a2                	mv	a1,s0
 8002de2:	4601                	li	a2,0
 8002de4:	8556                	mv	a0,s5
 8002de6:	fffff097          	auipc	ra,0xfffff
 8002dea:	6a6080e7          	jalr	1702(ra) # 800248c <put_fat>
 8002dee:	842a                	mv	s0,a0
			if (res != FR_OK) return res;
 8002df0:	f145                	bnez	a0,8002d90 <f_open+0x354>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002df2:	014aa703          	lw	a4,20(s5)
 8002df6:	010aa783          	lw	a5,16(s5)
 8002dfa:	ffe70693          	addi	a3,a4,-2
 8002dfe:	00d7fb63          	bgeu	a5,a3,8002e14 <f_open+0x3d8>
			fs->free_clst++;
 8002e02:	0785                	addi	a5,a5,1
 8002e04:	00faa823          	sw	a5,16(s5)
			fs->fsi_flag |= 1;
 8002e08:	004ac783          	lbu	a5,4(s5)
 8002e0c:	0017e793          	ori	a5,a5,1
 8002e10:	00fa8223          	sb	a5,4(s5)
		clst = nxt;					/* Next cluster */
 8002e14:	845a                	mv	s0,s6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002e16:	faeb67e3          	bltu	s6,a4,8002dc4 <f_open+0x388>
							res = move_window(fs, dw);
 8002e1a:	4542                	lw	a0,16(sp)
 8002e1c:	85de                	mv	a1,s7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e1e:	197d                	addi	s2,s2,-1
							res = move_window(fs, dw);
 8002e20:	fffff097          	auipc	ra,0xfffff
 8002e24:	24a080e7          	jalr	586(ra) # 800206a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e28:	47c2                	lw	a5,16(sp)
							res = move_window(fs, dw);
 8002e2a:	842a                	mv	s0,a0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002e2c:	0127a623          	sw	s2,12(a5)
		if (res == FR_OK) {
 8002e30:	cd19                	beqz	a0,8002e4e <f_open+0x412>
 8002e32:	bfb9                	j	8002d90 <f_open+0x354>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8002e34:	fc31                	bnez	s0,8002d90 <f_open+0x354>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8002e36:	01a14783          	lbu	a5,26(sp)
 8002e3a:	0107f713          	andi	a4,a5,16
 8002e3e:	10071b63          	bnez	a4,8002f54 <f_open+0x518>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8002e42:	00297913          	andi	s2,s2,2
 8002e46:	00090463          	beqz	s2,8002e4e <f_open+0x412>
 8002e4a:	8b85                	andi	a5,a5,1
 8002e4c:	f3a9                	bnez	a5,8002d8e <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8002e4e:	0089f793          	andi	a5,s3,8
 8002e52:	c399                	beqz	a5,8002e58 <f_open+0x41c>
 8002e54:	0409e993          	ori	s3,s3,64
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e58:	4442                	lw	s0,16(sp)
			fp->dir_ptr = dj.dir;
 8002e5a:	5942                	lw	s2,48(sp)
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8002e5c:	02848a93          	addi	s5,s1,40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e60:	545c                	lw	a5,44(s0)
			fp->dir_ptr = dj.dir;
 8002e62:	0324a223          	sw	s2,36(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002e66:	85ca                	mv	a1,s2
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002e68:	d09c                	sw	a5,32(s1)
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002e6a:	00044503          	lbu	a0,0(s0)
 8002e6e:	fffff097          	auipc	ra,0xfffff
 8002e72:	172080e7          	jalr	370(ra) # 8001fe0 <ld_clust.isra.1>
 8002e76:	c488                	sw	a0,8(s1)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002e78:	01c90513          	addi	a0,s2,28
 8002e7c:	fffff097          	auipc	ra,0xfffff
 8002e80:	04e080e7          	jalr	78(ra) # 8001eca <ld_dword>
			fp->obj.id = fs->id;
 8002e84:	00645783          	lhu	a5,6(s0)
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002e88:	c4c8                	sw	a0,12(s1)
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002e8a:	c080                	sw	s0,0(s1)
			fp->obj.id = fs->id;
 8002e8c:	00f49223          	sh	a5,4(s1)
			fp->flag = mode;		/* Set file access mode */
 8002e90:	01348823          	sb	s3,16(s1)
			fp->err = 0;			/* Clear error flag */
 8002e94:	000488a3          	sb	zero,17(s1)
			fp->sect = 0;			/* Invalidate current data sector */
 8002e98:	0004ae23          	sw	zero,28(s1)
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002e9c:	0004aa23          	sw	zero,20(s1)
	BYTE *d = (BYTE*)dst;
 8002ea0:	22848713          	addi	a4,s1,552
 8002ea4:	87d6                	mv	a5,s5
		*d++ = (BYTE)val;
 8002ea6:	0785                	addi	a5,a5,1
 8002ea8:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8002eac:	fee79de3          	bne	a5,a4,8002ea6 <f_open+0x46a>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002eb0:	0209f993          	andi	s3,s3,32
 8002eb4:	04098e63          	beqz	s3,8002f10 <f_open+0x4d4>
 8002eb8:	00c4a903          	lw	s2,12(s1)
 8002ebc:	04090a63          	beqz	s2,8002f10 <f_open+0x4d4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002ec0:	00a45403          	lhu	s0,10(s0)
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002ec4:	448c                	lw	a1,8(s1)
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002ec6:	0124aa23          	sw	s2,20(s1)
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002eca:	0426                	slli	s0,s0,0x9
					if (clst <= 1) res = FR_INT_ERR;
 8002ecc:	4985                	li	s3,1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002ece:	5b7d                	li	s6,-1
 8002ed0:	07246063          	bltu	s0,s2,8002f30 <f_open+0x4f4>
 8002ed4:	4401                	li	s0,0
				fp->clust = clst;
 8002ed6:	cc8c                	sw	a1,24(s1)
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002ed8:	ea041ce3          	bnez	s0,8002d90 <f_open+0x354>
 8002edc:	1ff97793          	andi	a5,s2,511
 8002ee0:	cb85                	beqz	a5,8002f10 <f_open+0x4d4>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8002ee2:	4442                	lw	s0,16(sp)
 8002ee4:	8522                	mv	a0,s0
 8002ee6:	fffff097          	auipc	ra,0xfffff
 8002eea:	038080e7          	jalr	56(ra) # 8001f1e <clst2sect>
 8002eee:	da0505e3          	beqz	a0,8002c98 <f_open+0x25c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002ef2:	00995913          	srli	s2,s2,0x9
 8002ef6:	00a90633          	add	a2,s2,a0
 8002efa:	ccd0                	sw	a2,28(s1)
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002efc:	00144503          	lbu	a0,1(s0)
 8002f00:	4685                	li	a3,1
 8002f02:	85d6                	mv	a1,s5
 8002f04:	00001097          	auipc	ra,0x1
 8002f08:	aa4080e7          	jalr	-1372(ra) # 80039a8 <disk_read>
 8002f0c:	ec0518e3          	bnez	a0,8002ddc <f_open+0x3a0>

	LEAVE_FF(fs, res);
}
 8002f10:	50f6                	lw	ra,124(sp)
 8002f12:	5466                	lw	s0,120(sp)
 8002f14:	8552                	mv	a0,s4
 8002f16:	54d6                	lw	s1,116(sp)
 8002f18:	5946                	lw	s2,112(sp)
 8002f1a:	59b6                	lw	s3,108(sp)
 8002f1c:	5a26                	lw	s4,104(sp)
 8002f1e:	5a96                	lw	s5,100(sp)
 8002f20:	5b06                	lw	s6,96(sp)
 8002f22:	4bf6                	lw	s7,92(sp)
 8002f24:	4c66                	lw	s8,88(sp)
 8002f26:	4cd6                	lw	s9,84(sp)
 8002f28:	4d46                	lw	s10,80(sp)
 8002f2a:	4db6                	lw	s11,76(sp)
 8002f2c:	6109                	addi	sp,sp,128
 8002f2e:	8082                	ret
					clst = get_fat(&fp->obj, clst);
 8002f30:	4088                	lw	a0,0(s1)
 8002f32:	40890933          	sub	s2,s2,s0
 8002f36:	fffff097          	auipc	ra,0xfffff
 8002f3a:	6aa080e7          	jalr	1706(ra) # 80025e0 <get_fat.isra.7>
 8002f3e:	85aa                	mv	a1,a0
					if (clst <= 1) res = FR_INT_ERR;
 8002f40:	00a9f663          	bgeu	s3,a0,8002f4c <f_open+0x510>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002f44:	f96516e3          	bne	a0,s6,8002ed0 <f_open+0x494>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002f48:	4405                	li	s0,1
 8002f4a:	b771                	j	8002ed6 <f_open+0x49a>
					if (clst <= 1) res = FR_INT_ERR;
 8002f4c:	4409                	li	s0,2
 8002f4e:	b761                	j	8002ed6 <f_open+0x49a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002f50:	4421                	li	s0,8
 8002f52:	bd3d                	j	8002d90 <f_open+0x354>
					res = FR_NO_FILE;
 8002f54:	4411                	li	s0,4
 8002f56:	bd2d                	j	8002d90 <f_open+0x354>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002f58:	d51588e3          	beq	a1,a7,8002ca8 <f_open+0x26c>
			i = 8; ni = 11;				/* Enter file extension field */
 8002f5c:	4721                	li	a4,8
 8002f5e:	45ad                	li	a1,11
 8002f60:	b379                	j	8002cee <f_open+0x2b2>

08002f62 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002f62:	711d                	addi	sp,sp,-96
 8002f64:	cca2                	sw	s0,88(sp)
 8002f66:	c8ca                	sw	s2,80(sp)
 8002f68:	c6ce                	sw	s3,76(sp)
 8002f6a:	c4d2                	sw	s4,72(sp)
 8002f6c:	c0da                	sw	s6,64(sp)
 8002f6e:	ce86                	sw	ra,92(sp)
 8002f70:	caa6                	sw	s1,84(sp)
 8002f72:	c2d6                	sw	s5,68(sp)
 8002f74:	de5e                	sw	s7,60(sp)
 8002f76:	dc62                	sw	s8,56(sp)
 8002f78:	da66                	sw	s9,52(sp)
 8002f7a:	d86a                	sw	s10,48(sp)
 8002f7c:	d66e                	sw	s11,44(sp)
 8002f7e:	8a2e                	mv	s4,a1
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8002f80:	0006a023          	sw	zero,0(a3)
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002f84:	086c                	addi	a1,sp,28
{
 8002f86:	842a                	mv	s0,a0
 8002f88:	8932                	mv	s2,a2
 8002f8a:	8b36                	mv	s6,a3
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002f8c:	fffff097          	auipc	ra,0xfffff
 8002f90:	fec080e7          	jalr	-20(ra) # 8001f78 <validate>
 8002f94:	89aa                	mv	s3,a0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002f96:	e539                	bnez	a0,8002fe4 <f_write+0x82>
 8002f98:	01144983          	lbu	s3,17(s0)
 8002f9c:	04099463          	bnez	s3,8002fe4 <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002fa0:	01044783          	lbu	a5,16(s0)
 8002fa4:	8b89                	andi	a5,a5,2
 8002fa6:	1c078063          	beqz	a5,8003166 <f_write+0x204>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8002faa:	485c                	lw	a5,20(s0)
 8002fac:	01278733          	add	a4,a5,s2
 8002fb0:	00f77463          	bgeu	a4,a5,8002fb8 <f_write+0x56>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8002fb4:	fff7c913          	not	s2,a5
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002fb8:	20000b93          	li	s7,512
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8002fbc:	02840a93          	addi	s5,s0,40
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8002fc0:	1ff00c13          	li	s8,511
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002fc4:	5cfd                	li	s9,-1
 8002fc6:	a239                	j	80030d4 <f_write+0x172>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002fc8:	4c0c                	lw	a1,24(s0)
 8002fca:	8522                	mv	a0,s0
 8002fcc:	fffff097          	auipc	ra,0xfffff
 8002fd0:	70a080e7          	jalr	1802(ra) # 80026d6 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002fd4:	12051663          	bnez	a0,8003100 <f_write+0x19e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8002fd8:	01044783          	lbu	a5,16(s0)
 8002fdc:	0407e793          	ori	a5,a5,64
 8002fe0:	00f40823          	sb	a5,16(s0)

	LEAVE_FF(fs, FR_OK);
}
 8002fe4:	40f6                	lw	ra,92(sp)
 8002fe6:	4466                	lw	s0,88(sp)
 8002fe8:	854e                	mv	a0,s3
 8002fea:	44d6                	lw	s1,84(sp)
 8002fec:	4946                	lw	s2,80(sp)
 8002fee:	49b6                	lw	s3,76(sp)
 8002ff0:	4a26                	lw	s4,72(sp)
 8002ff2:	4a96                	lw	s5,68(sp)
 8002ff4:	4b06                	lw	s6,64(sp)
 8002ff6:	5bf2                	lw	s7,60(sp)
 8002ff8:	5c62                	lw	s8,56(sp)
 8002ffa:	5cd2                	lw	s9,52(sp)
 8002ffc:	5d42                	lw	s10,48(sp)
 8002ffe:	5db2                	lw	s11,44(sp)
 8003000:	6125                	addi	sp,sp,96
 8003002:	8082                	ret
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003004:	01951763          	bne	a0,s9,8003012 <f_write+0xb0>
 8003008:	4785                	li	a5,1
 800300a:	00f408a3          	sb	a5,17(s0)
 800300e:	4985                	li	s3,1
 8003010:	bfd1                	j	8002fe4 <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003012:	441c                	lw	a5,8(s0)
				fp->clust = clst;			/* Update current cluster */
 8003014:	cc08                	sw	a0,24(s0)
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003016:	e391                	bnez	a5,800301a <f_write+0xb8>
 8003018:	c408                	sw	a0,8(s0)
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800301a:	01040783          	lb	a5,16(s0)
 800301e:	0207d363          	bgez	a5,8003044 <f_write+0xe2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003022:	47f2                	lw	a5,28(sp)
 8003024:	4c50                	lw	a2,28(s0)
 8003026:	4685                	li	a3,1
 8003028:	0017c503          	lbu	a0,1(a5)
 800302c:	85d6                	mv	a1,s5
 800302e:	00001097          	auipc	ra,0x1
 8003032:	a1c080e7          	jalr	-1508(ra) # 8003a4a <disk_write>
 8003036:	f969                	bnez	a0,8003008 <f_write+0xa6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003038:	01044783          	lbu	a5,16(s0)
 800303c:	07f7f793          	andi	a5,a5,127
 8003040:	00f40823          	sb	a5,16(s0)
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003044:	47f2                	lw	a5,28(sp)
 8003046:	4c0c                	lw	a1,24(s0)
 8003048:	853e                	mv	a0,a5
 800304a:	c63e                	sw	a5,12(sp)
 800304c:	fffff097          	auipc	ra,0xfffff
 8003050:	ed2080e7          	jalr	-302(ra) # 8001f1e <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003054:	c94d                	beqz	a0,8003106 <f_write+0x1a4>
			sect += csect;
 8003056:	00ad8d33          	add	s10,s11,a0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800305a:	47b2                	lw	a5,12(sp)
 800305c:	0b2c7a63          	bgeu	s8,s2,8003110 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003060:	00a7d703          	lhu	a4,10(a5)
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003064:	00995493          	srli	s1,s2,0x9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003068:	009d86b3          	add	a3,s11,s1
 800306c:	00d77463          	bgeu	a4,a3,8003074 <f_write+0x112>
					cc = fs->csize - csect;
 8003070:	41b704b3          	sub	s1,a4,s11
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003074:	0017c503          	lbu	a0,1(a5)
 8003078:	86a6                	mv	a3,s1
 800307a:	866a                	mv	a2,s10
 800307c:	85d2                	mv	a1,s4
 800307e:	00001097          	auipc	ra,0x1
 8003082:	9cc080e7          	jalr	-1588(ra) # 8003a4a <disk_write>
 8003086:	f149                	bnez	a0,8003008 <f_write+0xa6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003088:	4c4c                	lw	a1,28(s0)
 800308a:	41a58d33          	sub	s10,a1,s10
 800308e:	029d7263          	bgeu	s10,s1,80030b2 <f_write+0x150>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003092:	0d26                	slli	s10,s10,0x9
 8003094:	20000613          	li	a2,512
 8003098:	01aa05b3          	add	a1,s4,s10
 800309c:	8556                	mv	a0,s5
 800309e:	fffff097          	auipc	ra,0xfffff
 80030a2:	f28080e7          	jalr	-216(ra) # 8001fc6 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80030a6:	01044783          	lbu	a5,16(s0)
 80030aa:	07f7f793          	andi	a5,a5,127
 80030ae:	00f40823          	sb	a5,16(s0)
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80030b2:	04a6                	slli	s1,s1,0x9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80030b4:	000b2783          	lw	a5,0(s6)
 80030b8:	40990933          	sub	s2,s2,s1
 80030bc:	9a26                	add	s4,s4,s1
 80030be:	97a6                	add	a5,a5,s1
 80030c0:	00fb2023          	sw	a5,0(s6)
 80030c4:	485c                	lw	a5,20(s0)
 80030c6:	94be                	add	s1,s1,a5
 80030c8:	445c                	lw	a5,12(s0)
 80030ca:	c844                	sw	s1,20(s0)
 80030cc:	0097f363          	bgeu	a5,s1,80030d2 <f_write+0x170>
 80030d0:	87a6                	mv	a5,s1
 80030d2:	c45c                	sw	a5,12(s0)
	for ( ;  btw;							/* Repeat until all data written */
 80030d4:	f00902e3          	beqz	s2,8002fd8 <f_write+0x76>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80030d8:	485c                	lw	a5,20(s0)
 80030da:	1ff7f713          	andi	a4,a5,511
 80030de:	ef29                	bnez	a4,8003138 <f_write+0x1d6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80030e0:	4772                	lw	a4,28(sp)
 80030e2:	00a75d83          	lhu	s11,10(a4)
 80030e6:	0097d713          	srli	a4,a5,0x9
 80030ea:	1dfd                	addi	s11,s11,-1
 80030ec:	00edfdb3          	and	s11,s11,a4
			if (csect == 0) {				/* On the cluster boundary? */
 80030f0:	f20d95e3          	bnez	s11,800301a <f_write+0xb8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80030f4:	ec079ae3          	bnez	a5,8002fc8 <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80030f8:	4408                	lw	a0,8(s0)
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80030fa:	4581                	li	a1,0
					if (clst == 0) {		/* If no cluster is allocated, */
 80030fc:	ec0507e3          	beqz	a0,8002fca <f_write+0x68>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003100:	4785                	li	a5,1
 8003102:	f0f511e3          	bne	a0,a5,8003004 <f_write+0xa2>
 8003106:	4789                	li	a5,2
 8003108:	00f408a3          	sb	a5,17(s0)
 800310c:	4989                	li	s3,2
 800310e:	bdd9                	j	8002fe4 <f_write+0x82>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003110:	4c58                	lw	a4,28(s0)
 8003112:	03a70163          	beq	a4,s10,8003134 <f_write+0x1d2>
 8003116:	4454                	lw	a3,12(s0)
 8003118:	4858                	lw	a4,20(s0)
 800311a:	00d77d63          	bgeu	a4,a3,8003134 <f_write+0x1d2>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800311e:	0017c503          	lbu	a0,1(a5)
 8003122:	4685                	li	a3,1
 8003124:	866a                	mv	a2,s10
 8003126:	85d6                	mv	a1,s5
 8003128:	00001097          	auipc	ra,0x1
 800312c:	880080e7          	jalr	-1920(ra) # 80039a8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003130:	ec051ce3          	bnez	a0,8003008 <f_write+0xa6>
			fp->sect = sect;
 8003134:	01a42e23          	sw	s10,28(s0)
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003138:	4848                	lw	a0,20(s0)
 800313a:	84ca                	mv	s1,s2
 800313c:	1ff57513          	andi	a0,a0,511
 8003140:	40ab87b3          	sub	a5,s7,a0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003144:	0127f363          	bgeu	a5,s2,800314a <f_write+0x1e8>
 8003148:	84be                	mv	s1,a5
	if (cnt != 0) {
 800314a:	8626                	mv	a2,s1
 800314c:	85d2                	mv	a1,s4
 800314e:	9556                	add	a0,a0,s5
 8003150:	fffff097          	auipc	ra,0xfffff
 8003154:	e76080e7          	jalr	-394(ra) # 8001fc6 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8003158:	01044783          	lbu	a5,16(s0)
 800315c:	f807e793          	ori	a5,a5,-128
 8003160:	00f40823          	sb	a5,16(s0)
 8003164:	bf81                	j	80030b4 <f_write+0x152>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003166:	499d                	li	s3,7
 8003168:	bdb5                	j	8002fe4 <f_write+0x82>

0800316a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800316a:	1101                	addi	sp,sp,-32
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800316c:	006c                	addi	a1,sp,12
{
 800316e:	ca26                	sw	s1,20(sp)
 8003170:	ce06                	sw	ra,28(sp)
 8003172:	cc22                	sw	s0,24(sp)
 8003174:	c84a                	sw	s2,16(sp)
 8003176:	84aa                	mv	s1,a0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003178:	fffff097          	auipc	ra,0xfffff
 800317c:	e00080e7          	jalr	-512(ra) # 8001f78 <validate>
 8003180:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 8003182:	18051563          	bnez	a0,800330c <f_sync+0x1a2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003186:	0104c703          	lbu	a4,16(s1)
 800318a:	04077693          	andi	a3,a4,64
 800318e:	16068f63          	beqz	a3,800330c <f_sync+0x1a2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003192:	0762                	slli	a4,a4,0x18
 8003194:	8761                	srai	a4,a4,0x18
 8003196:	02075663          	bgez	a4,80031c2 <f_sync+0x58>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800319a:	47b2                	lw	a5,12(sp)
 800319c:	4cd0                	lw	a2,28(s1)
 800319e:	4685                	li	a3,1
 80031a0:	0017c503          	lbu	a0,1(a5)
 80031a4:	02848593          	addi	a1,s1,40
 80031a8:	00001097          	auipc	ra,0x1
 80031ac:	8a2080e7          	jalr	-1886(ra) # 8003a4a <disk_write>
 80031b0:	4785                	li	a5,1
 80031b2:	14051d63          	bnez	a0,800330c <f_sync+0x1a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80031b6:	0104c783          	lbu	a5,16(s1)
 80031ba:	07f7f793          	andi	a5,a5,127
 80031be:	00f48823          	sb	a5,16(s1)
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80031c2:	00000097          	auipc	ra,0x0
 80031c6:	1a6080e7          	jalr	422(ra) # 8003368 <get_fattime>
 80031ca:	892a                	mv	s2,a0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80031cc:	508c                	lw	a1,32(s1)
 80031ce:	4532                	lw	a0,12(sp)
 80031d0:	fffff097          	auipc	ra,0xfffff
 80031d4:	e9a080e7          	jalr	-358(ra) # 800206a <move_window>
 80031d8:	87aa                	mv	a5,a0
				if (res == FR_OK) {
 80031da:	12051963          	bnez	a0,800330c <f_sync+0x1a2>
					dir = fp->dir_ptr;
 80031de:	50c0                	lw	s0,36(s1)
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80031e0:	00b44783          	lbu	a5,11(s0)
 80031e4:	0207e793          	ori	a5,a5,32
 80031e8:	00f405a3          	sb	a5,11(s0)
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80031ec:	449c                	lw	a5,8(s1)
 80031ee:	4094                	lw	a3,0(s1)
	*ptr++ = (BYTE)val; val >>= 8;
 80031f0:	01079713          	slli	a4,a5,0x10
 80031f4:	8341                	srli	a4,a4,0x10
 80031f6:	8321                	srli	a4,a4,0x8
	*ptr++ = (BYTE)val;
 80031f8:	00e40da3          	sb	a4,27(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80031fc:	00f40d23          	sb	a5,26(s0)
	if (fs->fs_type == FS_FAT32) {
 8003200:	0006c683          	lbu	a3,0(a3)
 8003204:	470d                	li	a4,3
 8003206:	00e69863          	bne	a3,a4,8003216 <f_sync+0xac>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800320a:	83c1                	srli	a5,a5,0x10
	*ptr++ = (BYTE)val; val >>= 8;
 800320c:	00f40a23          	sb	a5,20(s0)
 8003210:	83a1                	srli	a5,a5,0x8
	*ptr++ = (BYTE)val;
 8003212:	00f40aa3          	sb	a5,21(s0)
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003216:	44cc                	lw	a1,12(s1)
 8003218:	01c40513          	addi	a0,s0,28
 800321c:	fffff097          	auipc	ra,0xfffff
 8003220:	ccc080e7          	jalr	-820(ra) # 8001ee8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003224:	85ca                	mv	a1,s2
 8003226:	01640513          	addi	a0,s0,22
 800322a:	fffff097          	auipc	ra,0xfffff
 800322e:	cbe080e7          	jalr	-834(ra) # 8001ee8 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8003232:	00040923          	sb	zero,18(s0)
	*ptr++ = (BYTE)val;
 8003236:	000409a3          	sb	zero,19(s0)
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800323a:	4432                	lw	s0,12(sp)
 800323c:	4905                	li	s2,1
 800323e:	012401a3          	sb	s2,3(s0)
	if (fs->wflag) {	/* Is the disk access window dirty */
 8003242:	8522                	mv	a0,s0
 8003244:	fffff097          	auipc	ra,0xfffff
 8003248:	dc2080e7          	jalr	-574(ra) # 8002006 <sync_window.part.3>
 800324c:	87aa                	mv	a5,a0
	if (res == FR_OK) {
 800324e:	e94d                	bnez	a0,8003300 <f_sync+0x196>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003250:	00044703          	lbu	a4,0(s0)
 8003254:	478d                	li	a5,3
 8003256:	08f71b63          	bne	a4,a5,80032ec <f_sync+0x182>
 800325a:	00444783          	lbu	a5,4(s0)
 800325e:	09279763          	bne	a5,s2,80032ec <f_sync+0x182>
			mem_set(fs->win, 0, sizeof fs->win);
 8003262:	03040913          	addi	s2,s0,48
	BYTE *d = (BYTE*)dst;
 8003266:	23040713          	addi	a4,s0,560
 800326a:	87ca                	mv	a5,s2
		*d++ = (BYTE)val;
 800326c:	0785                	addi	a5,a5,1
 800326e:	fe078fa3          	sb	zero,-1(a5)
	} while (--cnt);
 8003272:	fee79de3          	bne	a5,a4,800326c <f_sync+0x102>
	*ptr++ = (BYTE)val; val >>= 8;
 8003276:	05500793          	li	a5,85
 800327a:	22f40723          	sb	a5,558(s0)
	*ptr++ = (BYTE)val;
 800327e:	faa00793          	li	a5,-86
 8003282:	22f407a3          	sb	a5,559(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003286:	480c                	lw	a1,16(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003288:	05200793          	li	a5,82
	*ptr++ = (BYTE)val;
 800328c:	04100713          	li	a4,65
	*ptr++ = (BYTE)val; val >>= 8;
 8003290:	07200693          	li	a3,114
 8003294:	02f40823          	sb	a5,48(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 8003298:	02f408a3          	sb	a5,49(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 800329c:	06100793          	li	a5,97
 80032a0:	02f40923          	sb	a5,50(s0)
	*ptr++ = (BYTE)val;
 80032a4:	02e409a3          	sb	a4,51(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032a8:	20d40a23          	sb	a3,532(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032ac:	20d40aa3          	sb	a3,533(s0)
	*ptr++ = (BYTE)val; val >>= 8;
 80032b0:	20e40b23          	sb	a4,534(s0)
	*ptr++ = (BYTE)val;
 80032b4:	20f40ba3          	sb	a5,535(s0)
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80032b8:	21840513          	addi	a0,s0,536
 80032bc:	fffff097          	auipc	ra,0xfffff
 80032c0:	c2c080e7          	jalr	-980(ra) # 8001ee8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80032c4:	444c                	lw	a1,12(s0)
 80032c6:	21c40513          	addi	a0,s0,540
 80032ca:	fffff097          	auipc	ra,0xfffff
 80032ce:	c1e080e7          	jalr	-994(ra) # 8001ee8 <st_dword>
			fs->winsect = fs->volbase + 1;
 80032d2:	4c50                	lw	a2,28(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80032d4:	00144503          	lbu	a0,1(s0)
 80032d8:	4685                	li	a3,1
			fs->winsect = fs->volbase + 1;
 80032da:	0605                	addi	a2,a2,1
 80032dc:	d450                	sw	a2,44(s0)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80032de:	85ca                	mv	a1,s2
 80032e0:	00000097          	auipc	ra,0x0
 80032e4:	76a080e7          	jalr	1898(ra) # 8003a4a <disk_write>
			fs->fsi_flag = 0;
 80032e8:	00040223          	sb	zero,4(s0)
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80032ec:	00144503          	lbu	a0,1(s0)
 80032f0:	4601                	li	a2,0
 80032f2:	4581                	li	a1,0
 80032f4:	00001097          	auipc	ra,0x1
 80032f8:	85e080e7          	jalr	-1954(ra) # 8003b52 <disk_ioctl>
 80032fc:	00a037b3          	snez	a5,a0
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003300:	0104c703          	lbu	a4,16(s1)
 8003304:	fbf77713          	andi	a4,a4,-65
 8003308:	00e48823          	sb	a4,16(s1)
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800330c:	40f2                	lw	ra,28(sp)
 800330e:	4462                	lw	s0,24(sp)
 8003310:	44d2                	lw	s1,20(sp)
 8003312:	4942                	lw	s2,16(sp)
 8003314:	853e                	mv	a0,a5
 8003316:	6105                	addi	sp,sp,32
 8003318:	8082                	ret

0800331a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800331a:	1101                	addi	sp,sp,-32
 800331c:	cc22                	sw	s0,24(sp)
 800331e:	ce06                	sw	ra,28(sp)
 8003320:	842a                	mv	s0,a0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003322:	00000097          	auipc	ra,0x0
 8003326:	e48080e7          	jalr	-440(ra) # 800316a <f_sync>
	if (res == FR_OK)
 800332a:	e911                	bnez	a0,800333e <f_close+0x24>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800332c:	006c                	addi	a1,sp,12
 800332e:	8522                	mv	a0,s0
 8003330:	fffff097          	auipc	ra,0xfffff
 8003334:	c48080e7          	jalr	-952(ra) # 8001f78 <validate>
		if (res == FR_OK) {
 8003338:	e119                	bnez	a0,800333e <f_close+0x24>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800333a:	00042023          	sw	zero,0(s0)
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800333e:	40f2                	lw	ra,28(sp)
 8003340:	4462                	lw	s0,24(sp)
 8003342:	6105                	addi	sp,sp,32
 8003344:	8082                	ret

08003346 <set_fattime>:
#include "tf_card.h"

fat_time_t time = {.year = 2020, .month = 3, .day = 6, .hour = 0, .minute = 0};

void set_fattime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second){
    time.year = year;
 8003346:	20000837          	lui	a6,0x20000
 800334a:	4f080813          	addi	a6,a6,1264 # 200004f0 <time>
 800334e:	00a81023          	sh	a0,0(a6)
    time.month = month;
 8003352:	00b80123          	sb	a1,2(a6)
    time.day = day;
 8003356:	00c801a3          	sb	a2,3(a6)
    time.hour = hour;
 800335a:	00d80223          	sb	a3,4(a6)
    time.minute = minute;
 800335e:	00e802a3          	sb	a4,5(a6)
    time.second = second;
 8003362:	00f80323          	sb	a5,6(a6)
}
 8003366:	8082                	ret

08003368 <get_fattime>:

DWORD get_fattime (void){
	return
		(((uint8_t)(time.year - 1980))  << 25) |
		(time.month	                    << 21) |
 8003368:	20000737          	lui	a4,0x20000
 800336c:	4f070713          	addi	a4,a4,1264 # 200004f0 <time>
 8003370:	00274783          	lbu	a5,2(a4)
		(time.day	                    << 16) |
 8003374:	00374503          	lbu	a0,3(a4)
		(time.month	                    << 21) |
 8003378:	07d6                	slli	a5,a5,0x15
		(time.day	                    << 16) |
 800337a:	0542                	slli	a0,a0,0x10
		(time.hour	                    << 11) |
		(time.minute	                <<  5) |
 800337c:	8fc9                	or	a5,a5,a0
		(time.second	                <<  0);
 800337e:	00674503          	lbu	a0,6(a4)
		(time.minute	                <<  5) |
 8003382:	8fc9                	or	a5,a5,a0
		(time.hour	                    << 11) |
 8003384:	00474503          	lbu	a0,4(a4)
 8003388:	052e                	slli	a0,a0,0xb
		(time.minute	                <<  5) |
 800338a:	8fc9                	or	a5,a5,a0
 800338c:	00574503          	lbu	a0,5(a4)
 8003390:	0516                	slli	a0,a0,0x5
 8003392:	8fc9                	or	a5,a5,a0
		(((uint8_t)(time.year - 1980))  << 25) |
 8003394:	00074503          	lbu	a0,0(a4)
 8003398:	04450513          	addi	a0,a0,68
 800339c:	0566                	slli	a0,a0,0x19
 800339e:	8d5d                	or	a0,a0,a5
 80033a0:	8082                	ret

080033a2 <xchg_spi>:

/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
){
 80033a2:	1141                	addi	sp,sp,-16
 80033a4:	c422                	sw	s0,8(sp)
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80033a6:	40004437          	lui	s0,0x40004
){
 80033aa:	c226                	sw	s1,4(sp)
 80033ac:	c04a                	sw	s2,0(sp)
 80033ae:	c606                	sw	ra,12(sp)
 80033b0:	84aa                	mv	s1,a0
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));
 80033b2:	80040913          	addi	s2,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80033b6:	4589                	li	a1,2
 80033b8:	854a                	mv	a0,s2
 80033ba:	ffffe097          	auipc	ra,0xffffe
 80033be:	f08080e7          	jalr	-248(ra) # 80012c2 <spi_i2s_flag_get>
 80033c2:	d975                	beqz	a0,80033b6 <xchg_spi+0x14>
        spi_i2s_data_transmit(SPI1, dat);
 80033c4:	85a6                	mv	a1,s1
 80033c6:	80040513          	addi	a0,s0,-2048
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80033ca:	40004437          	lui	s0,0x40004
        spi_i2s_data_transmit(SPI1, dat);
 80033ce:	ffffe097          	auipc	ra,0xffffe
 80033d2:	edc080e7          	jalr	-292(ra) # 80012aa <spi_i2s_data_transmit>
	while(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));
 80033d6:	80040493          	addi	s1,s0,-2048 # 40003800 <_sp+0x1fffb800>
 80033da:	4585                	li	a1,1
 80033dc:	8526                	mv	a0,s1
 80033de:	ffffe097          	auipc	ra,0xffffe
 80033e2:	ee4080e7          	jalr	-284(ra) # 80012c2 <spi_i2s_flag_get>
 80033e6:	d975                	beqz	a0,80033da <xchg_spi+0x38>
        return(spi_i2s_data_receive(SPI1));     /* Return received byte */
 80033e8:	80040513          	addi	a0,s0,-2048
 80033ec:	ffffe097          	auipc	ra,0xffffe
 80033f0:	ec2080e7          	jalr	-318(ra) # 80012ae <spi_i2s_data_receive>
}
 80033f4:	40b2                	lw	ra,12(sp)
 80033f6:	4422                	lw	s0,8(sp)
 80033f8:	4492                	lw	s1,4(sp)
 80033fa:	4902                	lw	s2,0(sp)
 80033fc:	0ff57513          	andi	a0,a0,255
 8003400:	0141                	addi	sp,sp,16
 8003402:	8082                	ret

08003404 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void){
 8003404:	1141                	addi	sp,sp,-16
	CS_HIGH();		/* Set CS# high */
 8003406:	40011537          	lui	a0,0x40011
 800340a:	6591                	lui	a1,0x4
void deselect (void){
 800340c:	c606                	sw	ra,12(sp)
	CS_HIGH();		/* Set CS# high */
 800340e:	ffffe097          	auipc	ra,0xffffe
 8003412:	c70080e7          	jalr	-912(ra) # 800107e <gpio_bit_set>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
}
 8003416:	40b2                	lw	ra,12(sp)
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003418:	0ff00513          	li	a0,255
}
 800341c:	0141                	addi	sp,sp,16
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800341e:	00000317          	auipc	t1,0x0
 8003422:	f8430067          	jr	-124(t1) # 80033a2 <xchg_spi>

08003426 <wait_ready>:
){
 8003426:	7139                	addi	sp,sp,-64
 8003428:	da26                	sw	s1,52(sp)
 800342a:	d05a                	sw	s6,32(sp)
 800342c:	ce5e                	sw	s7,28(sp)
 800342e:	cc62                	sw	s8,24(sp)
 8003430:	ca66                	sw	s9,20(sp)
 8003432:	c86a                	sw	s10,16(sp)
 8003434:	de06                	sw	ra,60(sp)
 8003436:	dc22                	sw	s0,56(sp)
 8003438:	d84a                	sw	s2,48(sp)
 800343a:	d64e                	sw	s3,44(sp)
 800343c:	d452                	sw	s4,40(sp)
 800343e:	d256                	sw	s5,36(sp)
 8003440:	84aa                	mv	s1,a0
	start_mtime = get_timer_value();
 8003442:	ffffe097          	auipc	ra,0xffffe
 8003446:	7ce080e7          	jalr	1998(ra) # 8001c10 <get_timer_value>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800344a:	080007b7          	lui	a5,0x8000
 800344e:	2e07ab03          	lw	s6,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8003452:	2e47ab83          	lw	s7,740(a5)
	start_mtime = get_timer_value();
 8003456:	8caa                	mv	s9,a0
 8003458:	8d2e                	mv	s10,a1
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 800345a:	20000c37          	lui	s8,0x20000
		delta_mtime = get_timer_value();
 800345e:	ffffe097          	auipc	ra,0xffffe
 8003462:	7b2080e7          	jalr	1970(ra) # 8001c10 <get_timer_value>
		delta_mtime -=  start_mtime;
 8003466:	41950933          	sub	s2,a0,s9
 800346a:	01253533          	sltu	a0,a0,s2
 800346e:	41a585b3          	sub	a1,a1,s10
 8003472:	8d89                	sub	a1,a1,a0
		d = xchg_spi(0xFF);
 8003474:	0ff00513          	li	a0,255
		delta_mtime -=  start_mtime;
 8003478:	c62e                	sw	a1,12(sp)
		d = xchg_spi(0xFF);
 800347a:	00000097          	auipc	ra,0x0
 800347e:	f28080e7          	jalr	-216(ra) # 80033a2 <xchg_spi>
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003482:	0ff00793          	li	a5,255
		d = xchg_spi(0xFF);
 8003486:	842a                	mv	s0,a0
	}while((d != 0xFF) && (delta_mtime <(SystemCoreClock/4000.0 *wt )));
 8003488:	04f50f63          	beq	a0,a5,80034e6 <wait_ready+0xc0>
 800348c:	45b2                	lw	a1,12(sp)
 800348e:	854a                	mv	a0,s2
 8003490:	00004097          	auipc	ra,0x4
 8003494:	a56080e7          	jalr	-1450(ra) # 8006ee6 <__floatundidf>
 8003498:	892a                	mv	s2,a0
 800349a:	4e8c2503          	lw	a0,1256(s8) # 200004e8 <SystemCoreClock>
 800349e:	89ae                	mv	s3,a1
 80034a0:	00004097          	auipc	ra,0x4
 80034a4:	9f0080e7          	jalr	-1552(ra) # 8006e90 <__floatunsidf>
 80034a8:	865a                	mv	a2,s6
 80034aa:	86de                	mv	a3,s7
 80034ac:	00003097          	auipc	ra,0x3
 80034b0:	f4a080e7          	jalr	-182(ra) # 80063f6 <__divdf3>
 80034b4:	8a2a                	mv	s4,a0
 80034b6:	8526                	mv	a0,s1
 80034b8:	8aae                	mv	s5,a1
 80034ba:	00004097          	auipc	ra,0x4
 80034be:	9d6080e7          	jalr	-1578(ra) # 8006e90 <__floatunsidf>
 80034c2:	862a                	mv	a2,a0
 80034c4:	86ae                	mv	a3,a1
 80034c6:	8552                	mv	a0,s4
 80034c8:	85d6                	mv	a1,s5
 80034ca:	00003097          	auipc	ra,0x3
 80034ce:	516080e7          	jalr	1302(ra) # 80069e0 <__muldf3>
 80034d2:	862a                	mv	a2,a0
 80034d4:	86ae                	mv	a3,a1
 80034d6:	854a                	mv	a0,s2
 80034d8:	85ce                	mv	a1,s3
 80034da:	00003097          	auipc	ra,0x3
 80034de:	462080e7          	jalr	1122(ra) # 800693c <__ledf2>
 80034e2:	f6054ee3          	bltz	a0,800345e <wait_ready+0x38>
	return (d == 0xFF) ? 1 : 0; 
 80034e6:	f0140513          	addi	a0,s0,-255
}
 80034ea:	50f2                	lw	ra,60(sp)
 80034ec:	5462                	lw	s0,56(sp)
 80034ee:	54d2                	lw	s1,52(sp)
 80034f0:	5942                	lw	s2,48(sp)
 80034f2:	59b2                	lw	s3,44(sp)
 80034f4:	5a22                	lw	s4,40(sp)
 80034f6:	5a92                	lw	s5,36(sp)
 80034f8:	5b02                	lw	s6,32(sp)
 80034fa:	4bf2                	lw	s7,28(sp)
 80034fc:	4c62                	lw	s8,24(sp)
 80034fe:	4cd2                	lw	s9,20(sp)
 8003500:	4d42                	lw	s10,16(sp)
 8003502:	00153513          	seqz	a0,a0
 8003506:	6121                	addi	sp,sp,64
 8003508:	8082                	ret

0800350a <_select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int _select (void)	/* 1:OK, 0:Timeout */
{
 800350a:	1101                	addi	sp,sp,-32
	CS_LOW();		/* Set CS# low */
 800350c:	6591                	lui	a1,0x4
 800350e:	40011537          	lui	a0,0x40011
{
 8003512:	ce06                	sw	ra,28(sp)
	CS_LOW();		/* Set CS# low */
 8003514:	ffffe097          	auipc	ra,0xffffe
 8003518:	b6e080e7          	jalr	-1170(ra) # 8001082 <gpio_bit_reset>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800351c:	0ff00513          	li	a0,255
 8003520:	00000097          	auipc	ra,0x0
 8003524:	e82080e7          	jalr	-382(ra) # 80033a2 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003528:	1f400513          	li	a0,500
 800352c:	00000097          	auipc	ra,0x0
 8003530:	efa080e7          	jalr	-262(ra) # 8003426 <wait_ready>
 8003534:	c62a                	sw	a0,12(sp)
 8003536:	e909                	bnez	a0,8003548 <_select+0x3e>

	deselect();
 8003538:	00000097          	auipc	ra,0x0
 800353c:	ecc080e7          	jalr	-308(ra) # 8003404 <deselect>
	return 0;	/* Timeout */
 8003540:	4532                	lw	a0,12(sp)
}
 8003542:	40f2                	lw	ra,28(sp)
 8003544:	6105                	addi	sp,sp,32
 8003546:	8082                	ret
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003548:	4505                	li	a0,1
 800354a:	bfe5                	j	8003542 <_select+0x38>

0800354c <send_cmd>:

static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
){
 800354c:	1141                	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800354e:	01851793          	slli	a5,a0,0x18
){
 8003552:	c422                	sw	s0,8(sp)
 8003554:	c226                	sw	s1,4(sp)
 8003556:	c606                	sw	ra,12(sp)
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003558:	87e1                	srai	a5,a5,0x18
){
 800355a:	842a                	mv	s0,a0
 800355c:	84ae                	mv	s1,a1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800355e:	0007df63          	bgez	a5,800357c <send_cmd+0x30>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8003562:	4581                	li	a1,0
 8003564:	03700513          	li	a0,55
 8003568:	00000097          	auipc	ra,0x0
 800356c:	fe4080e7          	jalr	-28(ra) # 800354c <send_cmd>
		if (res > 1) return res;
 8003570:	4705                	li	a4,1
		res = send_cmd(CMD55, 0);
 8003572:	87aa                	mv	a5,a0
		if (res > 1) return res;
 8003574:	0aa76c63          	bltu	a4,a0,800362c <send_cmd+0xe0>
		cmd &= 0x7F;
 8003578:	07f47413          	andi	s0,s0,127
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800357c:	47b1                	li	a5,12
 800357e:	08f41c63          	bne	s0,a5,8003616 <send_cmd+0xca>
		deselect();
		if (!_select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003582:	04046513          	ori	a0,s0,64
 8003586:	00000097          	auipc	ra,0x0
 800358a:	e1c080e7          	jalr	-484(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800358e:	0184d513          	srli	a0,s1,0x18
 8003592:	00000097          	auipc	ra,0x0
 8003596:	e10080e7          	jalr	-496(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800359a:	0104d513          	srli	a0,s1,0x10
 800359e:	0ff57513          	andi	a0,a0,255
 80035a2:	00000097          	auipc	ra,0x0
 80035a6:	e00080e7          	jalr	-512(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80035aa:	0084d513          	srli	a0,s1,0x8
 80035ae:	0ff57513          	andi	a0,a0,255
 80035b2:	00000097          	auipc	ra,0x0
 80035b6:	df0080e7          	jalr	-528(ra) # 80033a2 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80035ba:	0ff4f513          	andi	a0,s1,255
 80035be:	00000097          	auipc	ra,0x0
 80035c2:	de4080e7          	jalr	-540(ra) # 80033a2 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80035c6:	09500513          	li	a0,149
 80035ca:	c419                	beqz	s0,80035d8 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035cc:	47a1                	li	a5,8
	n = 0x01;							/* Dummy CRC + Stop */
 80035ce:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035d0:	00f41463          	bne	s0,a5,80035d8 <send_cmd+0x8c>
 80035d4:	08700513          	li	a0,135
	xchg_spi(n);
 80035d8:	00000097          	auipc	ra,0x0
 80035dc:	dca080e7          	jalr	-566(ra) # 80033a2 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80035e0:	47b1                	li	a5,12
 80035e2:	00f41863          	bne	s0,a5,80035f2 <send_cmd+0xa6>
 80035e6:	0ff00513          	li	a0,255
 80035ea:	00000097          	auipc	ra,0x0
 80035ee:	db8080e7          	jalr	-584(ra) # 80033a2 <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80035f2:	4429                	li	s0,10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 80035f4:	0ff00513          	li	a0,255
 80035f8:	00000097          	auipc	ra,0x0
 80035fc:	daa080e7          	jalr	-598(ra) # 80033a2 <xchg_spi>
	} while ((res & 0x80) && --n);
 8003600:	01851713          	slli	a4,a0,0x18
 8003604:	8761                	srai	a4,a4,0x18
		res = xchg_spi(0xFF);
 8003606:	87aa                	mv	a5,a0
	} while ((res & 0x80) && --n);
 8003608:	02075263          	bgez	a4,800362c <send_cmd+0xe0>
 800360c:	147d                	addi	s0,s0,-1
 800360e:	0ff47413          	andi	s0,s0,255
 8003612:	f06d                	bnez	s0,80035f4 <send_cmd+0xa8>
 8003614:	a821                	j	800362c <send_cmd+0xe0>
		deselect();
 8003616:	00000097          	auipc	ra,0x0
 800361a:	dee080e7          	jalr	-530(ra) # 8003404 <deselect>
		if (!_select()) return 0xFF;
 800361e:	00000097          	auipc	ra,0x0
 8003622:	eec080e7          	jalr	-276(ra) # 800350a <_select>
 8003626:	0ff00793          	li	a5,255
 800362a:	fd21                	bnez	a0,8003582 <send_cmd+0x36>

	return res;							/* Return received response */
}
 800362c:	40b2                	lw	ra,12(sp)
 800362e:	4422                	lw	s0,8(sp)
 8003630:	4492                	lw	s1,4(sp)
 8003632:	853e                	mv	a0,a5
 8003634:	0141                	addi	sp,sp,16
 8003636:	8082                	ret

08003638 <rcvr_datablock>:
){
 8003638:	1141                	addi	sp,sp,-16
 800363a:	c422                	sw	s0,8(sp)
 800363c:	842a                	mv	s0,a0
	tf_start_timer(200);
 800363e:	0c800513          	li	a0,200
){
 8003642:	c226                	sw	s1,4(sp)
 8003644:	c606                	sw	ra,12(sp)
 8003646:	84ae                	mv	s1,a1
	tf_start_timer(200);
 8003648:	00000097          	auipc	ra,0x0
 800364c:	728080e7          	jalr	1832(ra) # 8003d70 <tf_start_timer>
		token = xchg_spi(0xFF);
 8003650:	0ff00513          	li	a0,255
 8003654:	00000097          	auipc	ra,0x0
 8003658:	d4e080e7          	jalr	-690(ra) # 80033a2 <xchg_spi>
	} while ((token == 0xFF) && tf_timer_done());
 800365c:	0ff00793          	li	a5,255
 8003660:	00f51d63          	bne	a0,a5,800367a <rcvr_datablock+0x42>
 8003664:	00000097          	auipc	ra,0x0
 8003668:	766080e7          	jalr	1894(ra) # 8003dca <tf_timer_done>
 800366c:	f175                	bnez	a0,8003650 <rcvr_datablock+0x18>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800366e:	4501                	li	a0,0
}
 8003670:	40b2                	lw	ra,12(sp)
 8003672:	4422                	lw	s0,8(sp)
 8003674:	4492                	lw	s1,4(sp)
 8003676:	0141                	addi	sp,sp,16
 8003678:	8082                	ret
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800367a:	0fe00793          	li	a5,254
 800367e:	fef518e3          	bne	a0,a5,800366e <rcvr_datablock+0x36>
 8003682:	0485                	addi	s1,s1,1
 8003684:	94a2                	add	s1,s1,s0
		*buff = xchg_spi(0xff);
 8003686:	0ff00513          	li	a0,255
 800368a:	00000097          	auipc	ra,0x0
 800368e:	d18080e7          	jalr	-744(ra) # 80033a2 <xchg_spi>
 8003692:	00a40023          	sb	a0,0(s0)
		buff++;
 8003696:	0405                	addi	s0,s0,1
	} while (btr--);
 8003698:	fe8497e3          	bne	s1,s0,8003686 <rcvr_datablock+0x4e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800369c:	0ff00513          	li	a0,255
 80036a0:	00000097          	auipc	ra,0x0
 80036a4:	d02080e7          	jalr	-766(ra) # 80033a2 <xchg_spi>
 80036a8:	0ff00513          	li	a0,255
 80036ac:	00000097          	auipc	ra,0x0
 80036b0:	cf6080e7          	jalr	-778(ra) # 80033a2 <xchg_spi>
 80036b4:	4505                	li	a0,1
 80036b6:	bf6d                	j	8003670 <rcvr_datablock+0x38>

080036b8 <xmit_datablock.part.1>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 80036b8:	1141                	addi	sp,sp,-16
 80036ba:	c422                	sw	s0,8(sp)
 80036bc:	c226                	sw	s1,4(sp)
 80036be:	c04a                	sw	s2,0(sp)
 80036c0:	c606                	sw	ra,12(sp)
 80036c2:	892a                	mv	s2,a0
	for(UINT i=0; i<btx; i++) {
 80036c4:	4401                	li	s0,0
 80036c6:	20000493          	li	s1,512
		xchg_spi(*(buff+i));
 80036ca:	008907b3          	add	a5,s2,s0
 80036ce:	0007c503          	lbu	a0,0(a5)
	for(UINT i=0; i<btx; i++) {
 80036d2:	0405                	addi	s0,s0,1
		xchg_spi(*(buff+i));
 80036d4:	00000097          	auipc	ra,0x0
 80036d8:	cce080e7          	jalr	-818(ra) # 80033a2 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80036dc:	fe9417e3          	bne	s0,s1,80036ca <xmit_datablock.part.1+0x12>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80036e0:	0ff00513          	li	a0,255
 80036e4:	00000097          	auipc	ra,0x0
 80036e8:	cbe080e7          	jalr	-834(ra) # 80033a2 <xchg_spi>
 80036ec:	0ff00513          	li	a0,255
 80036f0:	00000097          	auipc	ra,0x0
 80036f4:	cb2080e7          	jalr	-846(ra) # 80033a2 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80036f8:	0ff00513          	li	a0,255
 80036fc:	00000097          	auipc	ra,0x0
 8003700:	ca6080e7          	jalr	-858(ra) # 80033a2 <xchg_spi>
}
 8003704:	40b2                	lw	ra,12(sp)
 8003706:	4422                	lw	s0,8(sp)
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003708:	897d                	andi	a0,a0,31
 800370a:	156d                	addi	a0,a0,-5
}
 800370c:	4492                	lw	s1,4(sp)
 800370e:	4902                	lw	s2,0(sp)
 8003710:	00153513          	seqz	a0,a0
 8003714:	0141                	addi	sp,sp,16
 8003716:	8082                	ret

08003718 <disk_initialize>:

DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003718:	26051c63          	bnez	a0,8003990 <disk_initialize+0x278>
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 800371c:	7179                	addi	sp,sp,-48
    rcu_periph_clock_enable(RCU_GPIOB);
 800371e:	60300513          	li	a0,1539
DSTATUS disk_initialize (BYTE drv/* Physical drive number (0) */){
 8003722:	d606                	sw	ra,44(sp)
 8003724:	d422                	sw	s0,40(sp)
 8003726:	d226                	sw	s1,36(sp)
 8003728:	d04a                	sw	s2,32(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 800372a:	ffffe097          	auipc	ra,0xffffe
 800372e:	966080e7          	jalr	-1690(ra) # 8001090 <rcu_periph_clock_enable>
	rcu_periph_clock_enable(RCU_GPIOC);
 8003732:	60400513          	li	a0,1540
 8003736:	ffffe097          	auipc	ra,0xffffe
 800373a:	95a080e7          	jalr	-1702(ra) # 8001090 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_SPI1);
 800373e:	70e00513          	li	a0,1806
 8003742:	ffffe097          	auipc	ra,0xffffe
 8003746:	94e080e7          	jalr	-1714(ra) # 8001090 <rcu_periph_clock_enable>
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_13 | GPIO_PIN_15);
 800374a:	40011437          	lui	s0,0x40011
 800374e:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 8003752:	66a9                	lui	a3,0xa
 8003754:	460d                	li	a2,3
 8003756:	45e1                	li	a1,24
 8003758:	ffffe097          	auipc	ra,0xffffe
 800375c:	882080e7          	jalr	-1918(ra) # 8000fda <gpio_init>
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 8003760:	c0040513          	addi	a0,s0,-1024
 8003764:	6691                	lui	a3,0x4
 8003766:	460d                	li	a2,3
 8003768:	4591                	li	a1,4
 800376a:	ffffe097          	auipc	ra,0xffffe
 800376e:	870080e7          	jalr	-1936(ra) # 8000fda <gpio_init>
    gpio_init(GPIOC, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_14);
 8003772:	6691                	lui	a3,0x4
 8003774:	460d                	li	a2,3
 8003776:	45c1                	li	a1,16
 8003778:	40011537          	lui	a0,0x40011
 800377c:	ffffe097          	auipc	ra,0xffffe
 8003780:	85e080e7          	jalr	-1954(ra) # 8000fda <gpio_init>
    CS_HIGH();
 8003784:	6591                	lui	a1,0x4
 8003786:	40011537          	lui	a0,0x40011
 800378a:	ffffe097          	auipc	ra,0xffffe
 800378e:	8f4080e7          	jalr	-1804(ra) # 800107e <gpio_bit_set>
    spi_init_struct.device_mode          = SPI_MASTER;
 8003792:	10400793          	li	a5,260
 8003796:	c23e                	sw	a5,4(sp)
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 8003798:	478d                	li	a5,3
    spi_init(SPI1, &spi_init_struct);
 800379a:	400044b7          	lui	s1,0x40004
    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;
 800379e:	cc3e                	sw	a5,24(sp)
    spi_init_struct.nss                  = SPI_NSS_SOFT;
 80037a0:	20000793          	li	a5,512
 80037a4:	c83e                	sw	a5,16(sp)
    spi_init(SPI1, &spi_init_struct);
 80037a6:	004c                	addi	a1,sp,4
    spi_init_struct.prescale             = SPI_PSC_64;
 80037a8:	02800793          	li	a5,40
    spi_init(SPI1, &spi_init_struct);
 80037ac:	80048513          	addi	a0,s1,-2048 # 40003800 <_sp+0x1fffb800>
    spi_init_struct.prescale             = SPI_PSC_64;
 80037b0:	ce3e                	sw	a5,28(sp)
    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;
 80037b2:	c402                	sw	zero,8(sp)
    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;
 80037b4:	c602                	sw	zero,12(sp)
    spi_init_struct.endian               = SPI_ENDIAN_MSB;
 80037b6:	ca02                	sw	zero,20(sp)
    spi_init(SPI1, &spi_init_struct);
 80037b8:	ffffe097          	auipc	ra,0xffffe
 80037bc:	ab2080e7          	jalr	-1358(ra) # 800126a <spi_init>
    spi_crc_polynomial_set(SPI1,7);
 80037c0:	459d                	li	a1,7
 80037c2:	80048513          	addi	a0,s1,-2048
 80037c6:	ffffe097          	auipc	ra,0xffffe
 80037ca:	af0080e7          	jalr	-1296(ra) # 80012b6 <spi_crc_polynomial_set>
    spi_enable(SPI1);
 80037ce:	80048513          	addi	a0,s1,-2048
 80037d2:	ffffe097          	auipc	ra,0xffffe
 80037d6:	ace080e7          	jalr	-1330(ra) # 80012a0 <spi_enable>
	init_spi();							/* Initialize SPI */
    delay_1ms(10);
 80037da:	4529                	li	a0,10
 80037dc:	00000097          	auipc	ra,0x0
 80037e0:	62c080e7          	jalr	1580(ra) # 8003e08 <delay_1ms>
    //init_timer2();

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80037e4:	20000437          	lui	s0,0x20000
 80037e8:	4f840713          	addi	a4,s0,1272 # 200004f8 <Stat>
 80037ec:	00074783          	lbu	a5,0(a4)
 80037f0:	4f840413          	addi	s0,s0,1272
 80037f4:	8b89                	andi	a5,a5,2
 80037f6:	cb99                	beqz	a5,800380c <disk_initialize+0xf4>
 80037f8:	00074503          	lbu	a0,0(a4)
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
}
 80037fc:	50b2                	lw	ra,44(sp)
 80037fe:	5422                	lw	s0,40(sp)
 8003800:	5492                	lw	s1,36(sp)
 8003802:	5902                	lw	s2,32(sp)
	return Stat;
 8003804:	0ff57513          	andi	a0,a0,255
}
 8003808:	6145                	addi	sp,sp,48
 800380a:	8082                	ret
	FCLK_SLOW();
 800380c:	8004a783          	lw	a5,-2048(s1)
	CS_LOW();
 8003810:	6591                	lui	a1,0x4
 8003812:	40011537          	lui	a0,0x40011
	FCLK_SLOW();
 8003816:	fc77f793          	andi	a5,a5,-57
 800381a:	0287e793          	ori	a5,a5,40
 800381e:	80f4a023          	sw	a5,-2048(s1)
	CS_LOW();
 8003822:	ffffe097          	auipc	ra,0xffffe
 8003826:	860080e7          	jalr	-1952(ra) # 8001082 <gpio_bit_reset>
 800382a:	44a9                	li	s1,10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800382c:	14fd                	addi	s1,s1,-1
 800382e:	0ff00513          	li	a0,255
 8003832:	0ff4f493          	andi	s1,s1,255
 8003836:	00000097          	auipc	ra,0x0
 800383a:	b6c080e7          	jalr	-1172(ra) # 80033a2 <xchg_spi>
 800383e:	f4fd                	bnez	s1,800382c <disk_initialize+0x114>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003840:	4581                	li	a1,0
 8003842:	4501                	li	a0,0
 8003844:	00000097          	auipc	ra,0x0
 8003848:	d08080e7          	jalr	-760(ra) # 800354c <send_cmd>
 800384c:	4785                	li	a5,1
 800384e:	892a                	mv	s2,a0
 8003850:	12f51e63          	bne	a0,a5,800398c <disk_initialize+0x274>
		tf_start_timer(1000);						/* Initialization timeout = 1 sec */
 8003854:	3e800513          	li	a0,1000
 8003858:	00000097          	auipc	ra,0x0
 800385c:	518080e7          	jalr	1304(ra) # 8003d70 <tf_start_timer>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003860:	1aa00593          	li	a1,426
 8003864:	4521                	li	a0,8
 8003866:	00000097          	auipc	ra,0x0
 800386a:	ce6080e7          	jalr	-794(ra) # 800354c <send_cmd>
 800386e:	0d251963          	bne	a0,s2,8003940 <disk_initialize+0x228>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003872:	4911                	li	s2,4
 8003874:	0ff00513          	li	a0,255
 8003878:	00000097          	auipc	ra,0x0
 800387c:	b2a080e7          	jalr	-1238(ra) # 80033a2 <xchg_spi>
 8003880:	005c                	addi	a5,sp,4
 8003882:	97a6                	add	a5,a5,s1
 8003884:	00a78023          	sb	a0,0(a5)
 8003888:	0485                	addi	s1,s1,1
 800388a:	ff2495e3          	bne	s1,s2,8003874 <disk_initialize+0x15c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800388e:	00614703          	lbu	a4,6(sp)
 8003892:	4785                	li	a5,1
 8003894:	0ef71c63          	bne	a4,a5,800398c <disk_initialize+0x274>
 8003898:	00714703          	lbu	a4,7(sp)
 800389c:	0aa00793          	li	a5,170
 80038a0:	0ef71663          	bne	a4,a5,800398c <disk_initialize+0x274>
				while (tf_timer_done() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80038a4:	00000097          	auipc	ra,0x0
 80038a8:	526080e7          	jalr	1318(ra) # 8003dca <tf_timer_done>
 80038ac:	c911                	beqz	a0,80038c0 <disk_initialize+0x1a8>
 80038ae:	400005b7          	lui	a1,0x40000
 80038b2:	0a900513          	li	a0,169
 80038b6:	00000097          	auipc	ra,0x0
 80038ba:	c96080e7          	jalr	-874(ra) # 800354c <send_cmd>
 80038be:	f17d                	bnez	a0,80038a4 <disk_initialize+0x18c>
				if (tf_timer_done() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80038c0:	00000097          	auipc	ra,0x0
 80038c4:	50a080e7          	jalr	1290(ra) # 8003dca <tf_timer_done>
 80038c8:	c171                	beqz	a0,800398c <disk_initialize+0x274>
 80038ca:	4581                	li	a1,0
 80038cc:	03a00513          	li	a0,58
 80038d0:	00000097          	auipc	ra,0x0
 80038d4:	c7c080e7          	jalr	-900(ra) # 800354c <send_cmd>
 80038d8:	e955                	bnez	a0,800398c <disk_initialize+0x274>
 80038da:	4481                	li	s1,0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80038dc:	4911                	li	s2,4
 80038de:	0ff00513          	li	a0,255
 80038e2:	00000097          	auipc	ra,0x0
 80038e6:	ac0080e7          	jalr	-1344(ra) # 80033a2 <xchg_spi>
 80038ea:	005c                	addi	a5,sp,4
 80038ec:	97a6                	add	a5,a5,s1
 80038ee:	00a78023          	sb	a0,0(a5)
 80038f2:	0485                	addi	s1,s1,1
 80038f4:	ff2495e3          	bne	s1,s2,80038de <disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80038f8:	00414783          	lbu	a5,4(sp)
 80038fc:	44b1                	li	s1,12
 80038fe:	0407f793          	andi	a5,a5,64
 8003902:	e391                	bnez	a5,8003906 <disk_initialize+0x1ee>
 8003904:	4491                	li	s1,4
	CardType = ty;	/* Card type */
 8003906:	200007b7          	lui	a5,0x20000
 800390a:	50978723          	sb	s1,1294(a5) # 2000050e <CardType>
	deselect();
 800390e:	00000097          	auipc	ra,0x0
 8003912:	af6080e7          	jalr	-1290(ra) # 8003404 <deselect>
		Stat = STA_NOINIT;
 8003916:	4785                	li	a5,1
	if (ty) {			/* OK */
 8003918:	cc99                	beqz	s1,8003936 <disk_initialize+0x21e>
		FCLK_FAST();			/* Set fast clock */
 800391a:	40004737          	lui	a4,0x40004
 800391e:	80072783          	lw	a5,-2048(a4) # 40003800 <_sp+0x1fffb800>
 8003922:	fc77f793          	andi	a5,a5,-57
 8003926:	0287e793          	ori	a5,a5,40
 800392a:	80f72023          	sw	a5,-2048(a4)
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800392e:	00044783          	lbu	a5,0(s0)
 8003932:	0fe7f793          	andi	a5,a5,254
		Stat = STA_NOINIT;
 8003936:	00f40023          	sb	a5,0(s0)
	return Stat;
 800393a:	00044503          	lbu	a0,0(s0)
 800393e:	bd7d                	j	80037fc <disk_initialize+0xe4>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003940:	4581                	li	a1,0
 8003942:	0a900513          	li	a0,169
 8003946:	00000097          	auipc	ra,0x0
 800394a:	c06080e7          	jalr	-1018(ra) # 800354c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800394e:	4485                	li	s1,1
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003950:	00a96563          	bltu	s2,a0,800395a <disk_initialize+0x242>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003954:	4489                	li	s1,2
 8003956:	0a900913          	li	s2,169
			while (tf_timer_done() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800395a:	00000097          	auipc	ra,0x0
 800395e:	470080e7          	jalr	1136(ra) # 8003dca <tf_timer_done>
 8003962:	c901                	beqz	a0,8003972 <disk_initialize+0x25a>
 8003964:	4581                	li	a1,0
 8003966:	854a                	mv	a0,s2
 8003968:	00000097          	auipc	ra,0x0
 800396c:	be4080e7          	jalr	-1052(ra) # 800354c <send_cmd>
 8003970:	f56d                	bnez	a0,800395a <disk_initialize+0x242>
			if (!tf_timer_done() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003972:	00000097          	auipc	ra,0x0
 8003976:	458080e7          	jalr	1112(ra) # 8003dca <tf_timer_done>
 800397a:	c909                	beqz	a0,800398c <disk_initialize+0x274>
 800397c:	20000593          	li	a1,512
 8003980:	4541                	li	a0,16
 8003982:	00000097          	auipc	ra,0x0
 8003986:	bca080e7          	jalr	-1078(ra) # 800354c <send_cmd>
 800398a:	dd35                	beqz	a0,8003906 <disk_initialize+0x1ee>
				ty = 0;
 800398c:	4481                	li	s1,0
 800398e:	bfa5                	j	8003906 <disk_initialize+0x1ee>
	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8003990:	4505                	li	a0,1
}
 8003992:	8082                	ret

08003994 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
){
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003994:	e901                	bnez	a0,80039a4 <disk_status+0x10>

	return Stat;	/* Return disk status */
 8003996:	200007b7          	lui	a5,0x20000
 800399a:	4f87c503          	lbu	a0,1272(a5) # 200004f8 <Stat>
 800399e:	0ff57513          	andi	a0,a0,255
 80039a2:	8082                	ret
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80039a4:	4505                	li	a0,1
}
 80039a6:	8082                	ret

080039a8 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80039a8:	ed59                	bnez	a0,8003a46 <disk_read+0x9e>
){
 80039aa:	1141                	addi	sp,sp,-16
 80039ac:	c422                	sw	s0,8(sp)
 80039ae:	c606                	sw	ra,12(sp)
 80039b0:	c226                	sw	s1,4(sp)
 80039b2:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80039b4:	4511                	li	a0,4
 80039b6:	cab1                	beqz	a3,8003a0a <disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80039b8:	200007b7          	lui	a5,0x20000
 80039bc:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 80039c0:	450d                	li	a0,3
 80039c2:	8b85                	andi	a5,a5,1
 80039c4:	e3b9                	bnez	a5,8003a0a <disk_read+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80039c6:	200007b7          	lui	a5,0x20000
 80039ca:	50e7c783          	lbu	a5,1294(a5) # 2000050e <CardType>
 80039ce:	84ae                	mv	s1,a1
 80039d0:	85b2                	mv	a1,a2
 80039d2:	8ba1                	andi	a5,a5,8
 80039d4:	e399                	bnez	a5,80039da <disk_read+0x32>
 80039d6:	00961593          	slli	a1,a2,0x9

	if (count == 1) {	/* Single sector read */
 80039da:	4785                	li	a5,1
 80039dc:	02f41c63          	bne	s0,a5,8003a14 <disk_read+0x6c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80039e0:	4545                	li	a0,17
 80039e2:	00000097          	auipc	ra,0x0
 80039e6:	b6a080e7          	jalr	-1174(ra) # 800354c <send_cmd>
 80039ea:	e911                	bnez	a0,80039fe <disk_read+0x56>
			&& rcvr_datablock(buff, 512)) {
 80039ec:	20000593          	li	a1,512
 80039f0:	8526                	mv	a0,s1
 80039f2:	00000097          	auipc	ra,0x0
 80039f6:	c46080e7          	jalr	-954(ra) # 8003638 <rcvr_datablock>
 80039fa:	00153413          	seqz	s0,a0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
 80039fe:	00000097          	auipc	ra,0x0
 8003a02:	a06080e7          	jalr	-1530(ra) # 8003404 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003a06:	00803533          	snez	a0,s0
}
 8003a0a:	40b2                	lw	ra,12(sp)
 8003a0c:	4422                	lw	s0,8(sp)
 8003a0e:	4492                	lw	s1,4(sp)
 8003a10:	0141                	addi	sp,sp,16
 8003a12:	8082                	ret
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003a14:	4549                	li	a0,18
 8003a16:	00000097          	auipc	ra,0x0
 8003a1a:	b36080e7          	jalr	-1226(ra) # 800354c <send_cmd>
 8003a1e:	f165                	bnez	a0,80039fe <disk_read+0x56>
				if (!rcvr_datablock(buff, 512)) break;
 8003a20:	20000593          	li	a1,512
 8003a24:	8526                	mv	a0,s1
 8003a26:	00000097          	auipc	ra,0x0
 8003a2a:	c12080e7          	jalr	-1006(ra) # 8003638 <rcvr_datablock>
 8003a2e:	c509                	beqz	a0,8003a38 <disk_read+0x90>
			} while (--count);
 8003a30:	147d                	addi	s0,s0,-1
				buff += 512;
 8003a32:	20048493          	addi	s1,s1,512
			} while (--count);
 8003a36:	f46d                	bnez	s0,8003a20 <disk_read+0x78>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003a38:	4581                	li	a1,0
 8003a3a:	4531                	li	a0,12
 8003a3c:	00000097          	auipc	ra,0x0
 8003a40:	b10080e7          	jalr	-1264(ra) # 800354c <send_cmd>
 8003a44:	bf6d                	j	80039fe <disk_read+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a46:	4511                	li	a0,4
}
 8003a48:	8082                	ret

08003a4a <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
){
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a4a:	10051263          	bnez	a0,8003b4e <disk_write+0x104>
){
 8003a4e:	1101                	addi	sp,sp,-32
 8003a50:	cc22                	sw	s0,24(sp)
 8003a52:	ce06                	sw	ra,28(sp)
 8003a54:	ca26                	sw	s1,20(sp)
 8003a56:	8436                	mv	s0,a3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a58:	4511                	li	a0,4
 8003a5a:	caa9                	beqz	a3,8003aac <disk_write+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003a5c:	200007b7          	lui	a5,0x20000
 8003a60:	4f878793          	addi	a5,a5,1272 # 200004f8 <Stat>
 8003a64:	0007c703          	lbu	a4,0(a5)
 8003a68:	450d                	li	a0,3
 8003a6a:	8b05                	andi	a4,a4,1
 8003a6c:	e321                	bnez	a4,8003aac <disk_write+0x62>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003a6e:	0007c783          	lbu	a5,0(a5)
 8003a72:	4509                	li	a0,2
 8003a74:	8b91                	andi	a5,a5,4
 8003a76:	eb9d                	bnez	a5,8003aac <disk_write+0x62>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003a78:	200007b7          	lui	a5,0x20000
 8003a7c:	50e7c783          	lbu	a5,1294(a5) # 2000050e <CardType>
 8003a80:	84ae                	mv	s1,a1
 8003a82:	0087f713          	andi	a4,a5,8
 8003a86:	e311                	bnez	a4,8003a8a <disk_write+0x40>
 8003a88:	0626                	slli	a2,a2,0x9

	if (count == 1) {	/* Single sector write */
 8003a8a:	4705                	li	a4,1
 8003a8c:	04e41a63          	bne	s0,a4,8003ae0 <disk_write+0x96>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003a90:	85b2                	mv	a1,a2
 8003a92:	4561                	li	a0,24
 8003a94:	00000097          	auipc	ra,0x0
 8003a98:	ab8080e7          	jalr	-1352(ra) # 800354c <send_cmd>
 8003a9c:	cd09                	beqz	a0,8003ab6 <disk_write+0x6c>
){
 8003a9e:	4405                	li	s0,1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
 8003aa0:	00000097          	auipc	ra,0x0
 8003aa4:	964080e7          	jalr	-1692(ra) # 8003404 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003aa8:	00803533          	snez	a0,s0
}
 8003aac:	40f2                	lw	ra,28(sp)
 8003aae:	4462                	lw	s0,24(sp)
 8003ab0:	44d2                	lw	s1,20(sp)
 8003ab2:	6105                	addi	sp,sp,32
 8003ab4:	8082                	ret
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003ab6:	1f400513          	li	a0,500
 8003aba:	00000097          	auipc	ra,0x0
 8003abe:	96c080e7          	jalr	-1684(ra) # 8003426 <wait_ready>
 8003ac2:	dd71                	beqz	a0,8003a9e <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003ac4:	0fe00513          	li	a0,254
 8003ac8:	00000097          	auipc	ra,0x0
 8003acc:	8da080e7          	jalr	-1830(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ad0:	8526                	mv	a0,s1
 8003ad2:	00000097          	auipc	ra,0x0
 8003ad6:	be6080e7          	jalr	-1050(ra) # 80036b8 <xmit_datablock.part.1>
			&& xmit_datablock(buff, 0xFE)) {
 8003ada:	00153413          	seqz	s0,a0
 8003ade:	b7c9                	j	8003aa0 <disk_write+0x56>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ae0:	8b99                	andi	a5,a5,6
 8003ae2:	cb91                	beqz	a5,8003af6 <disk_write+0xac>
 8003ae4:	85a2                	mv	a1,s0
 8003ae6:	09700513          	li	a0,151
 8003aea:	c632                	sw	a2,12(sp)
 8003aec:	00000097          	auipc	ra,0x0
 8003af0:	a60080e7          	jalr	-1440(ra) # 800354c <send_cmd>
 8003af4:	4632                	lw	a2,12(sp)
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003af6:	85b2                	mv	a1,a2
 8003af8:	4565                	li	a0,25
 8003afa:	00000097          	auipc	ra,0x0
 8003afe:	a52080e7          	jalr	-1454(ra) # 800354c <send_cmd>
 8003b02:	fd59                	bnez	a0,8003aa0 <disk_write+0x56>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003b04:	1f400513          	li	a0,500
 8003b08:	00000097          	auipc	ra,0x0
 8003b0c:	91e080e7          	jalr	-1762(ra) # 8003426 <wait_ready>
 8003b10:	c10d                	beqz	a0,8003b32 <disk_write+0xe8>
	xchg_spi(token);					/* Send token */
 8003b12:	0fc00513          	li	a0,252
 8003b16:	00000097          	auipc	ra,0x0
 8003b1a:	88c080e7          	jalr	-1908(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b1e:	8526                	mv	a0,s1
 8003b20:	00000097          	auipc	ra,0x0
 8003b24:	b98080e7          	jalr	-1128(ra) # 80036b8 <xmit_datablock.part.1>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003b28:	c509                	beqz	a0,8003b32 <disk_write+0xe8>
			} while (--count);
 8003b2a:	147d                	addi	s0,s0,-1
				buff += 512;
 8003b2c:	20048493          	addi	s1,s1,512
			} while (--count);
 8003b30:	f871                	bnez	s0,8003b04 <disk_write+0xba>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003b32:	1f400513          	li	a0,500
 8003b36:	00000097          	auipc	ra,0x0
 8003b3a:	8f0080e7          	jalr	-1808(ra) # 8003426 <wait_ready>
 8003b3e:	d125                	beqz	a0,8003a9e <disk_write+0x54>
	xchg_spi(token);					/* Send token */
 8003b40:	0fd00513          	li	a0,253
 8003b44:	00000097          	auipc	ra,0x0
 8003b48:	85e080e7          	jalr	-1954(ra) # 80033a2 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b4c:	bf91                	j	8003aa0 <disk_write+0x56>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b4e:	4511                	li	a0,4
}
 8003b50:	8082                	ret

08003b52 <disk_ioctl>:

DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
){
 8003b52:	1101                	addi	sp,sp,-32
 8003b54:	ca26                	sw	s1,20(sp)
 8003b56:	ce06                	sw	ra,28(sp)
 8003b58:	cc22                	sw	s0,24(sp)
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003b5a:	4491                	li	s1,4
 8003b5c:	e90d                	bnez	a0,8003b8e <disk_ioctl+0x3c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003b5e:	200007b7          	lui	a5,0x20000
 8003b62:	4f87c783          	lbu	a5,1272(a5) # 200004f8 <Stat>
 8003b66:	448d                	li	s1,3
 8003b68:	8b85                	andi	a5,a5,1
 8003b6a:	e395                	bnez	a5,8003b8e <disk_ioctl+0x3c>

	res = RES_ERROR;

	switch (cmd) {
 8003b6c:	4785                	li	a5,1
 8003b6e:	8432                	mv	s0,a2
 8003b70:	84ae                	mv	s1,a1
 8003b72:	02f58b63          	beq	a1,a5,8003ba8 <disk_ioctl+0x56>
 8003b76:	c195                	beqz	a1,8003b9a <disk_ioctl+0x48>
 8003b78:	478d                	li	a5,3
 8003b7a:	0af58863          	beq	a1,a5,8003c2a <disk_ioctl+0xd8>
 8003b7e:	4791                	li	a5,4
 8003b80:	16f58363          	beq	a1,a5,8003ce6 <disk_ioctl+0x194>
			res = RES_OK;	/* FatFs does not check result of this command */
		}
		break;

	default:
		res = RES_PARERR;
 8003b84:	4491                	li	s1,4
	}

	deselect();
 8003b86:	00000097          	auipc	ra,0x0
 8003b8a:	87e080e7          	jalr	-1922(ra) # 8003404 <deselect>

	return res;
}
 8003b8e:	40f2                	lw	ra,28(sp)
 8003b90:	4462                	lw	s0,24(sp)
 8003b92:	8526                	mv	a0,s1
 8003b94:	44d2                	lw	s1,20(sp)
 8003b96:	6105                	addi	sp,sp,32
 8003b98:	8082                	ret
		if (_select()) res = RES_OK;
 8003b9a:	00000097          	auipc	ra,0x0
 8003b9e:	970080e7          	jalr	-1680(ra) # 800350a <_select>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003ba2:	00153493          	seqz	s1,a0
 8003ba6:	b7c5                	j	8003b86 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003ba8:	4581                	li	a1,0
 8003baa:	4525                	li	a0,9
 8003bac:	00000097          	auipc	ra,0x0
 8003bb0:	9a0080e7          	jalr	-1632(ra) # 800354c <send_cmd>
 8003bb4:	c119                	beqz	a0,8003bba <disk_ioctl+0x68>
	res = RES_ERROR;
 8003bb6:	4485                	li	s1,1
 8003bb8:	b7f9                	j	8003b86 <disk_ioctl+0x34>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003bba:	45c1                	li	a1,16
 8003bbc:	850a                	mv	a0,sp
 8003bbe:	00000097          	auipc	ra,0x0
 8003bc2:	a7a080e7          	jalr	-1414(ra) # 8003638 <rcvr_datablock>
 8003bc6:	d965                	beqz	a0,8003bb6 <disk_ioctl+0x64>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003bc8:	00014603          	lbu	a2,0(sp)
 8003bcc:	00814783          	lbu	a5,8(sp)
 8003bd0:	00914683          	lbu	a3,9(sp)
 8003bd4:	8219                	srli	a2,a2,0x6
 8003bd6:	00714703          	lbu	a4,7(sp)
 8003bda:	00961e63          	bne	a2,s1,8003bf6 <disk_ioctl+0xa4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003bde:	07a2                	slli	a5,a5,0x8
 8003be0:	97b6                	add	a5,a5,a3
 8003be2:	0742                	slli	a4,a4,0x10
 8003be4:	003f06b7          	lui	a3,0x3f0
 8003be8:	8f75                	and	a4,a4,a3
 8003bea:	0705                	addi	a4,a4,1
 8003bec:	97ba                	add	a5,a5,a4
				*(DWORD*)buff = csize << 10;
 8003bee:	07aa                	slli	a5,a5,0xa
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003bf0:	c01c                	sw	a5,0(s0)
				res = RES_OK;
 8003bf2:	4481                	li	s1,0
 8003bf4:	bf49                	j	8003b86 <disk_ioctl+0x34>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003bf6:	070a                	slli	a4,a4,0x2
 8003bf8:	8399                	srli	a5,a5,0x6
 8003bfa:	97ba                	add	a5,a5,a4
 8003bfc:	00614703          	lbu	a4,6(sp)
 8003c00:	6605                	lui	a2,0x1
 8003c02:	c0060613          	addi	a2,a2,-1024 # c00 <__dbg_stack_size+0xc00>
 8003c06:	072a                	slli	a4,a4,0xa
 8003c08:	8f71                	and	a4,a4,a2
 8003c0a:	97ba                	add	a5,a5,a4
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003c0c:	00a14603          	lbu	a2,10(sp)
 8003c10:	00514703          	lbu	a4,5(sp)
 8003c14:	0686                	slli	a3,a3,0x1
 8003c16:	821d                	srli	a2,a2,0x7
 8003c18:	8b3d                	andi	a4,a4,15
 8003c1a:	9732                	add	a4,a4,a2
 8003c1c:	8a99                	andi	a3,a3,6
				*(DWORD*)buff = csize << (n - 9);
 8003c1e:	9736                	add	a4,a4,a3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003c20:	0785                	addi	a5,a5,1
				*(DWORD*)buff = csize << (n - 9);
 8003c22:	1765                	addi	a4,a4,-7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003c24:	00e797b3          	sll	a5,a5,a4
 8003c28:	b7e1                	j	8003bf0 <disk_ioctl+0x9e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c2a:	200004b7          	lui	s1,0x20000
 8003c2e:	50e48493          	addi	s1,s1,1294 # 2000050e <CardType>
 8003c32:	0004c783          	lbu	a5,0(s1)
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c36:	4581                	li	a1,0
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c38:	8b91                	andi	a5,a5,4
 8003c3a:	cbb1                	beqz	a5,8003c8e <disk_ioctl+0x13c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c3c:	08d00513          	li	a0,141
 8003c40:	00000097          	auipc	ra,0x0
 8003c44:	90c080e7          	jalr	-1780(ra) # 800354c <send_cmd>
 8003c48:	f53d                	bnez	a0,8003bb6 <disk_ioctl+0x64>
				xchg_spi(0xFF);
 8003c4a:	0ff00513          	li	a0,255
 8003c4e:	fffff097          	auipc	ra,0xfffff
 8003c52:	754080e7          	jalr	1876(ra) # 80033a2 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003c56:	45c1                	li	a1,16
 8003c58:	850a                	mv	a0,sp
 8003c5a:	00000097          	auipc	ra,0x0
 8003c5e:	9de080e7          	jalr	-1570(ra) # 8003638 <rcvr_datablock>
 8003c62:	d931                	beqz	a0,8003bb6 <disk_ioctl+0x64>
 8003c64:	03000493          	li	s1,48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003c68:	14fd                	addi	s1,s1,-1
 8003c6a:	0ff00513          	li	a0,255
 8003c6e:	0ff4f493          	andi	s1,s1,255
 8003c72:	fffff097          	auipc	ra,0xfffff
 8003c76:	730080e7          	jalr	1840(ra) # 80033a2 <xchg_spi>
 8003c7a:	f4fd                	bnez	s1,8003c68 <disk_ioctl+0x116>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003c7c:	00a14783          	lbu	a5,10(sp)
 8003c80:	0047d713          	srli	a4,a5,0x4
 8003c84:	47c1                	li	a5,16
 8003c86:	00e797b3          	sll	a5,a5,a4
 8003c8a:	c01c                	sw	a5,0(s0)
					res = RES_OK;
 8003c8c:	bded                	j	8003b86 <disk_ioctl+0x34>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003c8e:	4525                	li	a0,9
 8003c90:	00000097          	auipc	ra,0x0
 8003c94:	8bc080e7          	jalr	-1860(ra) # 800354c <send_cmd>
 8003c98:	fd19                	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003c9a:	45c1                	li	a1,16
 8003c9c:	850a                	mv	a0,sp
 8003c9e:	00000097          	auipc	ra,0x0
 8003ca2:	99a080e7          	jalr	-1638(ra) # 8003638 <rcvr_datablock>
 8003ca6:	d901                	beqz	a0,8003bb6 <disk_ioctl+0x64>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ca8:	0004c703          	lbu	a4,0(s1)
 8003cac:	00a14783          	lbu	a5,10(sp)
 8003cb0:	00b14683          	lbu	a3,11(sp)
 8003cb4:	8b09                	andi	a4,a4,2
 8003cb6:	cf01                	beqz	a4,8003cce <disk_ioctl+0x17c>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003cb8:	00d14703          	lbu	a4,13(sp)
 8003cbc:	0786                	slli	a5,a5,0x1
 8003cbe:	07e7f793          	andi	a5,a5,126
 8003cc2:	829d                	srli	a3,a3,0x7
 8003cc4:	97b6                	add	a5,a5,a3
 8003cc6:	8319                	srli	a4,a4,0x6
 8003cc8:	0785                	addi	a5,a5,1
 8003cca:	177d                	addi	a4,a4,-1
 8003ccc:	bfa1                	j	8003c24 <disk_ioctl+0xd2>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003cce:	00369713          	slli	a4,a3,0x3
 8003cd2:	8b61                	andi	a4,a4,24
 8003cd4:	8295                	srli	a3,a3,0x5
 8003cd6:	8789                	srai	a5,a5,0x2
 8003cd8:	9736                	add	a4,a4,a3
 8003cda:	8bfd                	andi	a5,a5,31
 8003cdc:	0705                	addi	a4,a4,1
 8003cde:	0785                	addi	a5,a5,1
 8003ce0:	02f707b3          	mul	a5,a4,a5
 8003ce4:	b731                	j	8003bf0 <disk_ioctl+0x9e>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ce6:	200004b7          	lui	s1,0x20000
 8003cea:	50e48493          	addi	s1,s1,1294 # 2000050e <CardType>
 8003cee:	0004c783          	lbu	a5,0(s1)
 8003cf2:	8b99                	andi	a5,a5,6
 8003cf4:	ec0781e3          	beqz	a5,8003bb6 <disk_ioctl+0x64>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003cf8:	860a                	mv	a2,sp
 8003cfa:	45ad                	li	a1,11
 8003cfc:	00000097          	auipc	ra,0x0
 8003d00:	e56080e7          	jalr	-426(ra) # 8003b52 <disk_ioctl>
 8003d04:	ea0519e3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003d08:	00014783          	lbu	a5,0(sp)
 8003d0c:	00a14703          	lbu	a4,10(sp)
 8003d10:	8399                	srli	a5,a5,0x6
 8003d12:	04077713          	andi	a4,a4,64
 8003d16:	8fd9                	or	a5,a5,a4
 8003d18:	e8078fe3          	beqz	a5,8003bb6 <disk_ioctl+0x64>
		if (!(CardType & CT_BLOCK)) {
 8003d1c:	0004c783          	lbu	a5,0(s1)
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003d20:	400c                	lw	a1,0(s0)
 8003d22:	4040                	lw	s0,4(s0)
		if (!(CardType & CT_BLOCK)) {
 8003d24:	8ba1                	andi	a5,a5,8
 8003d26:	e399                	bnez	a5,8003d2c <disk_ioctl+0x1da>
			st *= 512; ed *= 512;
 8003d28:	05a6                	slli	a1,a1,0x9
 8003d2a:	0426                	slli	s0,s0,0x9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d2c:	02000513          	li	a0,32
 8003d30:	00000097          	auipc	ra,0x0
 8003d34:	81c080e7          	jalr	-2020(ra) # 800354c <send_cmd>
 8003d38:	e6051fe3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d3c:	85a2                	mv	a1,s0
 8003d3e:	02100513          	li	a0,33
 8003d42:	00000097          	auipc	ra,0x0
 8003d46:	80a080e7          	jalr	-2038(ra) # 800354c <send_cmd>
 8003d4a:	e60516e3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d4e:	4581                	li	a1,0
 8003d50:	02600513          	li	a0,38
 8003d54:	fffff097          	auipc	ra,0xfffff
 8003d58:	7f8080e7          	jalr	2040(ra) # 800354c <send_cmd>
 8003d5c:	e4051de3          	bnez	a0,8003bb6 <disk_ioctl+0x64>
 8003d60:	651d                	lui	a0,0x7
 8003d62:	53050513          	addi	a0,a0,1328 # 7530 <__stack_size+0x6530>
 8003d66:	fffff097          	auipc	ra,0xfffff
 8003d6a:	6c0080e7          	jalr	1728(ra) # 8003426 <wait_ready>
 8003d6e:	bd15                	j	8003ba2 <disk_ioctl+0x50>

08003d70 <tf_start_timer>:


volatile uint64_t tf_current_time = 0;
volatile uint64_t tf_delay_until = 0;

void tf_start_timer(int32_t millis){
 8003d70:	1141                	addi	sp,sp,-16
 8003d72:	c422                	sw	s0,8(sp)
 8003d74:	c606                	sw	ra,12(sp)
 8003d76:	842a                	mv	s0,a0
    tf_current_time = get_timer_value();
 8003d78:	ffffe097          	auipc	ra,0xffffe
 8003d7c:	e98080e7          	jalr	-360(ra) # 8001c10 <get_timer_value>
 8003d80:	200007b7          	lui	a5,0x20000
 8003d84:	51078793          	addi	a5,a5,1296 # 20000510 <tf_current_time>
 8003d88:	c388                	sw	a0,0(a5)
 8003d8a:	c3cc                	sw	a1,4(a5)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003d8c:	0007a803          	lw	a6,0(a5)
 8003d90:	0047a883          	lw	a7,4(a5)
 8003d94:	200007b7          	lui	a5,0x20000
 8003d98:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8003d9c:	6785                	lui	a5,0x1
 8003d9e:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 8003da2:	02f55533          	divu	a0,a0,a5
 8003da6:	200006b7          	lui	a3,0x20000
}
 8003daa:	40b2                	lw	ra,12(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003dac:	02850533          	mul	a0,a0,s0
}
 8003db0:	4422                	lw	s0,8(sp)
    tf_delay_until = tf_current_time + ((SystemCoreClock/4000)*millis);
 8003db2:	01050633          	add	a2,a0,a6
 8003db6:	00a63533          	sltu	a0,a2,a0
 8003dba:	50c6ac23          	sw	a2,1304(a3) # 20000518 <tf_delay_until>
 8003dbe:	011507b3          	add	a5,a0,a7
 8003dc2:	50f6ae23          	sw	a5,1308(a3)
}
 8003dc6:	0141                	addi	sp,sp,16
 8003dc8:	8082                	ret

08003dca <tf_timer_done>:
uint32_t tf_timer_done(void){
 8003dca:	1141                	addi	sp,sp,-16
 8003dcc:	c606                	sw	ra,12(sp)
    
    tf_current_time = get_timer_value();
 8003dce:	ffffe097          	auipc	ra,0xffffe
 8003dd2:	e42080e7          	jalr	-446(ra) # 8001c10 <get_timer_value>
 8003dd6:	200007b7          	lui	a5,0x20000
 8003dda:	51078793          	addi	a5,a5,1296 # 20000510 <tf_current_time>
 8003dde:	c388                	sw	a0,0(a5)
 8003de0:	c3cc                	sw	a1,4(a5)
    //if(tf_delay_start > tf_delay_until) return tf_delay_start > current_time && current_time > tf_delay_until ? 0 : 1; //On overflow
    if(tf_current_time > tf_delay_until) return 0;   //No overflow
 8003de2:	200006b7          	lui	a3,0x20000
 8003de6:	4398                	lw	a4,0(a5)
 8003de8:	43dc                	lw	a5,4(a5)
 8003dea:	5186a603          	lw	a2,1304(a3) # 20000518 <tf_delay_until>
 8003dee:	51c6a683          	lw	a3,1308(a3)
 8003df2:	00f6e763          	bltu	a3,a5,8003e00 <tf_timer_done+0x36>
 8003df6:	4505                	li	a0,1
 8003df8:	00d79563          	bne	a5,a3,8003e02 <tf_timer_done+0x38>
 8003dfc:	00e67363          	bgeu	a2,a4,8003e02 <tf_timer_done+0x38>
 8003e00:	4501                	li	a0,0
    return 1;
 8003e02:	40b2                	lw	ra,12(sp)
 8003e04:	0141                	addi	sp,sp,16
 8003e06:	8082                	ret

08003e08 <delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void delay_1ms(uint32_t count)
{
 8003e08:	7179                	addi	sp,sp,-48
 8003e0a:	d04a                	sw	s2,32(sp)
 8003e0c:	ce4e                	sw	s3,28(sp)
 8003e0e:	c85a                	sw	s6,16(sp)
 8003e10:	d606                	sw	ra,44(sp)
 8003e12:	d422                	sw	s0,40(sp)
 8003e14:	d226                	sw	s1,36(sp)
 8003e16:	cc52                	sw	s4,24(sp)
 8003e18:	ca56                	sw	s5,20(sp)
 8003e1a:	c65e                	sw	s7,12(sp)
 8003e1c:	c462                	sw	s8,8(sp)
 8003e1e:	c266                	sw	s9,4(sp)
 8003e20:	8b2a                	mv	s6,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8003e22:	ffffe097          	auipc	ra,0xffffe
 8003e26:	dee080e7          	jalr	-530(ra) # 8001c10 <get_timer_value>
 8003e2a:	89aa                	mv	s3,a0
 8003e2c:	892e                	mv	s2,a1
	do {
	start_mtime = get_timer_value();
 8003e2e:	ffffe097          	auipc	ra,0xffffe
 8003e32:	de2080e7          	jalr	-542(ra) # 8001c10 <get_timer_value>
 8003e36:	84aa                	mv	s1,a0
 8003e38:	842e                	mv	s0,a1
	} while (start_mtime == tmp);
 8003e3a:	00a99463          	bne	s3,a0,8003e42 <delay_1ms+0x3a>
 8003e3e:	feb908e3          	beq	s2,a1,8003e2e <delay_1ms+0x26>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8003e42:	080007b7          	lui	a5,0x8000
 8003e46:	2e07a903          	lw	s2,736(a5) # 80002e0 <enable_mcycle_minstret+0x94>
 8003e4a:	2e47a983          	lw	s3,740(a5)
 8003e4e:	20000bb7          	lui	s7,0x20000
	delta_mtime = get_timer_value() - start_mtime;
 8003e52:	ffffe097          	auipc	ra,0xffffe
 8003e56:	dbe080e7          	jalr	-578(ra) # 8001c10 <get_timer_value>
 8003e5a:	87aa                	mv	a5,a0
 8003e5c:	8d05                	sub	a0,a0,s1
 8003e5e:	00a7b7b3          	sltu	a5,a5,a0
 8003e62:	8d81                	sub	a1,a1,s0
	}while(delta_mtime <(SystemCoreClock/4000.0 *count ));
 8003e64:	8d9d                	sub	a1,a1,a5
 8003e66:	00003097          	auipc	ra,0x3
 8003e6a:	080080e7          	jalr	128(ra) # 8006ee6 <__floatundidf>
 8003e6e:	8a2a                	mv	s4,a0
 8003e70:	4e8ba503          	lw	a0,1256(s7) # 200004e8 <SystemCoreClock>
 8003e74:	8aae                	mv	s5,a1
 8003e76:	00003097          	auipc	ra,0x3
 8003e7a:	01a080e7          	jalr	26(ra) # 8006e90 <__floatunsidf>
 8003e7e:	864a                	mv	a2,s2
 8003e80:	86ce                	mv	a3,s3
 8003e82:	00002097          	auipc	ra,0x2
 8003e86:	574080e7          	jalr	1396(ra) # 80063f6 <__divdf3>
 8003e8a:	8c2a                	mv	s8,a0
 8003e8c:	855a                	mv	a0,s6
 8003e8e:	8cae                	mv	s9,a1
 8003e90:	00003097          	auipc	ra,0x3
 8003e94:	000080e7          	jalr	ra # 8006e90 <__floatunsidf>
 8003e98:	862a                	mv	a2,a0
 8003e9a:	86ae                	mv	a3,a1
 8003e9c:	8562                	mv	a0,s8
 8003e9e:	85e6                	mv	a1,s9
 8003ea0:	00003097          	auipc	ra,0x3
 8003ea4:	b40080e7          	jalr	-1216(ra) # 80069e0 <__muldf3>
 8003ea8:	862a                	mv	a2,a0
 8003eaa:	86ae                	mv	a3,a1
 8003eac:	8552                	mv	a0,s4
 8003eae:	85d6                	mv	a1,s5
 8003eb0:	00003097          	auipc	ra,0x3
 8003eb4:	a8c080e7          	jalr	-1396(ra) # 800693c <__ledf2>
 8003eb8:	f8054de3          	bltz	a0,8003e52 <delay_1ms+0x4a>
}
 8003ebc:	50b2                	lw	ra,44(sp)
 8003ebe:	5422                	lw	s0,40(sp)
 8003ec0:	5492                	lw	s1,36(sp)
 8003ec2:	5902                	lw	s2,32(sp)
 8003ec4:	49f2                	lw	s3,28(sp)
 8003ec6:	4a62                	lw	s4,24(sp)
 8003ec8:	4ad2                	lw	s5,20(sp)
 8003eca:	4b42                	lw	s6,16(sp)
 8003ecc:	4bb2                	lw	s7,12(sp)
 8003ece:	4c22                	lw	s8,8(sp)
 8003ed0:	4c92                	lw	s9,4(sp)
 8003ed2:	6145                	addi	sp,sp,48
 8003ed4:	8082                	ret

08003ed6 <usb_txfifo_write>:
                             uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8003ed6:	0671                	addi	a2,a2,28
 8003ed8:	060a                	slli	a2,a2,0x2
 8003eda:	962a                	add	a2,a2,a0
    uint32_t word_count = (byte_count + 3U) / 4U;
 8003edc:	068d                	addi	a3,a3,3
 8003ede:	8289                	srli	a3,a3,0x2
    __IO uint32_t *fifo = usb_regs->DFIFO[fifo_num];
 8003ee0:	4650                	lw	a2,12(a2)

    while (word_count-- > 0) {
 8003ee2:	068a                	slli	a3,a3,0x2
 8003ee4:	96ae                	add	a3,a3,a1
 8003ee6:	00b69463          	bne	a3,a1,8003eee <usb_txfifo_write+0x18>

        src_buf += 4U;
    }

    return USB_OK;
}
 8003eea:	4501                	li	a0,0
 8003eec:	8082                	ret
        word = src_buf[0] | (src_buf[1] << 8) | (src_buf[2] << 16) | (src_buf[3] << 24);
 8003eee:	0015c703          	lbu	a4,1(a1) # 40000001 <_sp+0x1fff8001>
 8003ef2:	0005c783          	lbu	a5,0(a1)
        src_buf += 4U;
 8003ef6:	0591                	addi	a1,a1,4
 8003ef8:	0722                	slli	a4,a4,0x8
 8003efa:	8f5d                	or	a4,a4,a5
 8003efc:	ffe5c783          	lbu	a5,-2(a1)
 8003f00:	07c2                	slli	a5,a5,0x10
 8003f02:	8f5d                	or	a4,a4,a5
 8003f04:	fff5c783          	lbu	a5,-1(a1)
 8003f08:	07e2                	slli	a5,a5,0x18
 8003f0a:	8fd9                	or	a5,a5,a4
        *fifo = word;
 8003f0c:	c21c                	sw	a5,0(a2)
        src_buf += 4U;
 8003f0e:	bfe1                	j	8003ee6 <usb_txfifo_write+0x10>

08003f10 <usb_rxfifo_read>:
    \param[out] none
    \retval     void type pointer
*/
void *usb_rxfifo_read (usb_core_regs *usb_regs, uint8_t *dest_buf, uint16_t byte_count)
{
    uint32_t word_count = (byte_count + 3U) / 4U;
 8003f10:	060d                	addi	a2,a2,3
 8003f12:	8209                	srli	a2,a2,0x2
    uint32_t word;

    __IO uint32_t *fifo = usb_regs->DFIFO[0];
 8003f14:	5d78                	lw	a4,124(a0)

    while (word_count-- > 0) {
 8003f16:	060a                	slli	a2,a2,0x2
 8003f18:	962e                	add	a2,a2,a1
 8003f1a:	00c59463          	bne	a1,a2,8003f22 <usb_rxfifo_read+0x12>

        dest_buf += 4U;
    }

    return ((void *)dest_buf);
}
 8003f1e:	852e                	mv	a0,a1
 8003f20:	8082                	ret
        word = *fifo;
 8003f22:	431c                	lw	a5,0(a4)
        dest_buf += 4U;
 8003f24:	0591                	addi	a1,a1,4
        dest_buf[1] = (word >> 8) & 0xff;
 8003f26:	0087d693          	srli	a3,a5,0x8
        dest_buf[0] = word & 0xff;
 8003f2a:	fef58e23          	sb	a5,-4(a1)
        dest_buf[1] = (word >> 8) & 0xff;
 8003f2e:	fed58ea3          	sb	a3,-3(a1)
        dest_buf[2] = (word >> 16) & 0xff;
 8003f32:	0107d693          	srli	a3,a5,0x10
        dest_buf[3] = (word >> 24) & 0xff;
 8003f36:	83e1                	srli	a5,a5,0x18
        dest_buf[2] = (word >> 16) & 0xff;
 8003f38:	fed58f23          	sb	a3,-2(a1)
        dest_buf[3] = (word >> 24) & 0xff;
 8003f3c:	fef58fa3          	sb	a5,-1(a1)
        dest_buf += 4U;
 8003f40:	bfe9                	j	8003f1a <usb_rxfifo_read+0xa>

08003f42 <usb_txfifo_flush>:
    \param[out] none
    \retval     operation status
*/
usb_status usb_txfifo_flush (usb_core_regs *usb_regs, uint8_t fifo_num)
{
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f42:	4118                	lw	a4,0(a0)
{
 8003f44:	1141                	addi	sp,sp,-16
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f46:	059a                	slli	a1,a1,0x6
{
 8003f48:	c606                	sw	ra,12(sp)
    usb_regs->gr->GRSTCTL = ((uint32_t)fifo_num << 6U) | GRSTCTL_TXFF;
 8003f4a:	0205e593          	ori	a1,a1,32
 8003f4e:	cb0c                	sw	a1,16(a4)

    /* wait for Tx FIFO flush bit is set */
    while (usb_regs->gr->GRSTCTL & GRSTCTL_TXFF);
 8003f50:	4b1c                	lw	a5,16(a4)
 8003f52:	0207f793          	andi	a5,a5,32
 8003f56:	ffed                	bnez	a5,8003f50 <usb_txfifo_flush+0xe>

    /* wait for 3 PHY clocks*/
    usb_udelay(3);
 8003f58:	450d                	li	a0,3
 8003f5a:	00001097          	auipc	ra,0x1
 8003f5e:	928080e7          	jalr	-1752(ra) # 8004882 <usb_udelay>

    return USB_OK;
}
 8003f62:	40b2                	lw	ra,12(sp)
 8003f64:	4501                	li	a0,0
 8003f66:	0141                	addi	sp,sp,16
 8003f68:	8082                	ret

08003f6a <usb_devaddr_set>:
    \param[out] none
    \retval     operation status
*/
void usb_devaddr_set (usb_core_driver *udev, uint8_t dev_addr)
{
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8003f6a:	455c                	lw	a5,12(a0)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8003f6c:	0592                	slli	a1,a1,0x4
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 8003f6e:	4398                	lw	a4,0(a5)
 8003f70:	80f77713          	andi	a4,a4,-2033
 8003f74:	c398                	sw	a4,0(a5)
    udev->regs.dr->DCFG |= dev_addr << 4;
 8003f76:	4398                	lw	a4,0(a5)
 8003f78:	8dd9                	or	a1,a1,a4
 8003f7a:	c38c                	sw	a1,0(a5)
}
 8003f7c:	8082                	ret

08003f7e <usb_transc_active>:
    __IO uint32_t *reg_addr = NULL;

    __IO uint32_t epinten = 0U;

    /* get the endpoint number */
    uint8_t ep_num = transc->ep_addr.num;
 8003f7e:	4198                	lw	a4,0(a1)

    /* enable endpoint interrupt number */
    if (transc->ep_addr.dir) {
 8003f80:	00058783          	lb	a5,0(a1)
{
 8003f84:	1141                	addi	sp,sp,-16
    __IO uint32_t epinten = 0U;
 8003f86:	c602                	sw	zero,12(sp)
    uint8_t ep_num = transc->ep_addr.num;
 8003f88:	8b3d                	andi	a4,a4,15
    if (transc->ep_addr.dir) {
 8003f8a:	0607d963          	bgez	a5,8003ffc <usb_transc_active+0x7e>
        reg_addr = &udev->regs.er_in[ep_num]->DIEPCTL;
 8003f8e:	00271793          	slli	a5,a4,0x2
 8003f92:	97aa                	add	a5,a5,a0
 8003f94:	4bdc                	lw	a5,20(a5)

        epinten = 1 << ep_num;
 8003f96:	4685                	li	a3,1
 8003f98:	00e696b3          	sll	a3,a3,a4
    } else {
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;

        epinten = 1 << (16 + ep_num);
 8003f9c:	c636                	sw	a3,12(sp)
    }

    /* if the endpoint is not active, need change the endpoint control register */
    if (!(*reg_addr & DEPCTL_EPACT)) {
 8003f9e:	4394                	lw	a3,0(a5)
 8003fa0:	4550                	lw	a2,12(a0)
 8003fa2:	01069513          	slli	a0,a3,0x10
 8003fa6:	04054463          	bltz	a0,8003fee <usb_transc_active+0x70>
        *reg_addr &= ~(DEPCTL_MPL | DEPCTL_EPTYPE | DIEPCTL_TXFNUM);
 8003faa:	4394                	lw	a3,0(a5)
 8003fac:	fc340537          	lui	a0,0xfc340
 8003fb0:	80050513          	addi	a0,a0,-2048 # fc33f800 <_sp+0xdc337800>
 8003fb4:	8ee9                	and	a3,a3,a0
 8003fb6:	c394                	sw	a3,0(a5)

        /* set endpoint maximum packet length */
        if (0U == ep_num) {
 8003fb8:	ef29                	bnez	a4,8004012 <usb_transc_active+0x94>
            *reg_addr |= EP0_MAXLEN[udev->regs.dr->DSTAT & DSTAT_ES];
 8003fba:	4614                	lw	a3,8(a2)
 8003fbc:	0007a803          	lw	a6,0(a5)
 8003fc0:	0066f513          	andi	a0,a3,6
 8003fc4:	080086b7          	lui	a3,0x8008
 8003fc8:	dcc68693          	addi	a3,a3,-564 # 8007dcc <EP0_MAXLEN>
 8003fcc:	96aa                	add	a3,a3,a0
 8003fce:	0006c683          	lbu	a3,0(a3)
 8003fd2:	0106e6b3          	or	a3,a3,a6
        } else {
            *reg_addr |= transc->max_len;
 8003fd6:	c394                	sw	a3,0(a5)
        }

        /* activate endpoint */
        *reg_addr |= (transc->ep_type << 18) | (ep_num << 22) | DEPCTL_SD0PID | DEPCTL_EPACT;
 8003fd8:	0015c683          	lbu	a3,1(a1)
 8003fdc:	4388                	lw	a0,0(a5)
 8003fde:	075a                	slli	a4,a4,0x16
 8003fe0:	06ca                	slli	a3,a3,0x12
 8003fe2:	8f55                	or	a4,a4,a3
 8003fe4:	8f49                	or	a4,a4,a0
 8003fe6:	100086b7          	lui	a3,0x10008
 8003fea:	8f55                	or	a4,a4,a3
 8003fec:	c398                	sw	a4,0(a5)
    }
    else
#endif
    {
        /* enable the interrupts for this endpoint */
        udev->regs.dr->DAEPINTEN |= epinten;
 8003fee:	4732                	lw	a4,12(sp)
 8003ff0:	4e5c                	lw	a5,28(a2)
    }

    return USB_OK;
}
 8003ff2:	4501                	li	a0,0
        udev->regs.dr->DAEPINTEN |= epinten;
 8003ff4:	8fd9                	or	a5,a5,a4
 8003ff6:	ce5c                	sw	a5,28(a2)
}
 8003ff8:	0141                	addi	sp,sp,16
 8003ffa:	8082                	ret
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 8003ffc:	00870793          	addi	a5,a4,8
 8004000:	078a                	slli	a5,a5,0x2
 8004002:	97aa                	add	a5,a5,a0
        epinten = 1 << (16 + ep_num);
 8004004:	01070613          	addi	a2,a4,16
 8004008:	4685                	li	a3,1
        reg_addr = &udev->regs.er_out[ep_num]->DOEPCTL;
 800400a:	47dc                	lw	a5,12(a5)
        epinten = 1 << (16 + ep_num);
 800400c:	00c696b3          	sll	a3,a3,a2
 8004010:	b771                	j	8003f9c <usb_transc_active+0x1e>
            *reg_addr |= transc->max_len;
 8004012:	4388                	lw	a0,0(a5)
 8004014:	0045d683          	lhu	a3,4(a1)
 8004018:	8ec9                	or	a3,a3,a0
 800401a:	bf75                	j	8003fd6 <usb_transc_active+0x58>

0800401c <usb_transc_inxfer>:
*/
usb_status usb_transc_inxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 800401c:	4190                	lw	a2,0(a1)
{
 800401e:	1101                	addi	sp,sp,-32

    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004020:	e00006b7          	lui	a3,0xe0000
    uint8_t ep_num = transc->ep_addr.num;
 8004024:	8a3d                	andi	a2,a2,15
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 8004026:	00261793          	slli	a5,a2,0x2
 800402a:	97aa                	add	a5,a5,a0
 800402c:	4bd8                	lw	a4,20(a5)
{
 800402e:	ce06                	sw	ra,28(sp)
    __IO uint32_t epctl = udev->regs.er_in[ep_num]->DIEPCTL;
 8004030:	431c                	lw	a5,0(a4)
 8004032:	c43e                	sw	a5,8(sp)
    __IO uint32_t eplen = udev->regs.er_in[ep_num]->DIEPLEN;
 8004034:	4b1c                	lw	a5,16(a4)
 8004036:	c63e                	sw	a5,12(sp)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004038:	47b2                	lw	a5,12(sp)
 800403a:	8ff5                	and	a5,a5,a3
 800403c:	c63e                	sw	a5,12(sp)

    /* zero length packet or endpoint 0 */
    if (0U == transc->xfer_len) {
 800403e:	45dc                	lw	a5,12(a1)
 8004040:	e7a5                	bnez	a5,80040a8 <usb_transc_inxfer+0x8c>
        /* set transfer packet count to 1 */
        eplen |= 1 << 19;
 8004042:	47b2                	lw	a5,12(sp)
 8004044:	000806b7          	lui	a3,0x80

        /* set endpoint transfer length */
        eplen |= transc->xfer_len;

        if (transc->ep_type == USB_EPTYPE_ISOC) {
            eplen |= DIEPLEN_MCNT;
 8004048:	8fd5                	or	a5,a5,a3
 800404a:	c63e                	sw	a5,12(sp)
        }
    }

    udev->regs.er_in[ep_num]->DIEPLEN = eplen;
 800404c:	47b2                	lw	a5,12(sp)
 800404e:	cb1c                	sw	a5,16(a4)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004050:	00454683          	lbu	a3,4(a0)
 8004054:	4785                	li	a5,1
 8004056:	00f69463          	bne	a3,a5,800405e <usb_transc_inxfer+0x42>
        udev->regs.er_in[ep_num]->DIEPDMAADDR = transc->dma_addr;
 800405a:	4d9c                	lw	a5,24(a1)
 800405c:	cb5c                	sw	a5,20(a4)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 800405e:	0015c803          	lbu	a6,1(a1)
 8004062:	4785                	li	a5,1
 8004064:	00f81c63          	bne	a6,a5,800407c <usb_transc_inxfer+0x60>
        if (((udev->regs.dr->DSTAT & DSTAT_FNRSOF) >> 8) & 0x1) {
 8004068:	455c                	lw	a5,12(a0)
 800406a:	479c                	lw	a5,8(a5)
 800406c:	1007f793          	andi	a5,a5,256
 8004070:	cfb5                	beqz	a5,80040ec <usb_transc_inxfer+0xd0>
            epctl |= DEPCTL_SD1PID;
 8004072:	47a2                	lw	a5,8(sp)
 8004074:	200006b7          	lui	a3,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004078:	8fd5                	or	a5,a5,a3
 800407a:	c43e                	sw	a5,8(sp)
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_CNAK | DEPCTL_EPEN;
 800407c:	47a2                	lw	a5,8(sp)
 800407e:	840006b7          	lui	a3,0x84000
 8004082:	8fd5                	or	a5,a5,a3
 8004084:	c43e                	sw	a5,8(sp)

    udev->regs.er_in[ep_num]->DIEPCTL = epctl;
 8004086:	47a2                	lw	a5,8(sp)
 8004088:	45d4                	lw	a3,12(a1)
 800408a:	c31c                	sw	a5,0(a4)

    if (transc->ep_type != USB_EPTYPE_ISOC) {
 800408c:	4785                	li	a5,1
 800408e:	06f80363          	beq	a6,a5,80040f4 <usb_transc_inxfer+0xd8>
        /* enable the Tx FIFO empty interrupt for this endpoint */
        if (transc->xfer_len > 0) {
 8004092:	c699                	beqz	a3,80040a0 <usb_transc_inxfer+0x84>
            udev->regs.dr->DIEPFEINTEN |= 1 << ep_num;
 8004094:	4558                	lw	a4,12(a0)
 8004096:	00c79633          	sll	a2,a5,a2
 800409a:	5b54                	lw	a3,52(a4)
 800409c:	8e55                	or	a2,a2,a3
 800409e:	db50                	sw	a2,52(a4)
    } else {
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
    }

    return status;
}
 80040a0:	40f2                	lw	ra,28(sp)
 80040a2:	4501                	li	a0,0
 80040a4:	6105                	addi	sp,sp,32
 80040a6:	8082                	ret
        if (0U == ep_num) {
 80040a8:	0045d683          	lhu	a3,4(a1)
 80040ac:	e61d                	bnez	a2,80040da <usb_transc_inxfer+0xbe>
            transc->xfer_len = USB_MIN(transc->xfer_len, transc->max_len);
 80040ae:	00f6f363          	bgeu	a3,a5,80040b4 <usb_transc_inxfer+0x98>
 80040b2:	87b6                	mv	a5,a3
 80040b4:	c5dc                	sw	a5,12(a1)
            eplen |= 1 << 19;
 80040b6:	47b2                	lw	a5,12(sp)
 80040b8:	000806b7          	lui	a3,0x80
 80040bc:	8fd5                	or	a5,a5,a3
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 80040be:	c63e                	sw	a5,12(sp)
        eplen |= transc->xfer_len;
 80040c0:	47b2                	lw	a5,12(sp)
 80040c2:	45d4                	lw	a3,12(a1)
 80040c4:	8fd5                	or	a5,a5,a3
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 80040c6:	0015c683          	lbu	a3,1(a1)
        eplen |= transc->xfer_len;
 80040ca:	c63e                	sw	a5,12(sp)
        if (transc->ep_type == USB_EPTYPE_ISOC) {
 80040cc:	4785                	li	a5,1
 80040ce:	f6f69fe3          	bne	a3,a5,800404c <usb_transc_inxfer+0x30>
            eplen |= DIEPLEN_MCNT;
 80040d2:	47b2                	lw	a5,12(sp)
 80040d4:	600006b7          	lui	a3,0x60000
 80040d8:	bf85                	j	8004048 <usb_transc_inxfer+0x2c>
            eplen |= ((transc->xfer_len - 1 + transc->max_len) / transc->max_len) << 19;
 80040da:	17fd                	addi	a5,a5,-1
 80040dc:	97b6                	add	a5,a5,a3
 80040de:	02d7d7b3          	divu	a5,a5,a3
 80040e2:	4832                	lw	a6,12(sp)
 80040e4:	07ce                	slli	a5,a5,0x13
 80040e6:	0107e7b3          	or	a5,a5,a6
 80040ea:	bfd1                	j	80040be <usb_transc_inxfer+0xa2>
            epctl |= DEPCTL_SD0PID;
 80040ec:	47a2                	lw	a5,8(sp)
 80040ee:	100006b7          	lui	a3,0x10000
 80040f2:	b759                	j	8004078 <usb_transc_inxfer+0x5c>
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, transc->xfer_len);
 80040f4:	458c                	lw	a1,8(a1)
 80040f6:	06c2                	slli	a3,a3,0x10
 80040f8:	82c1                	srli	a3,a3,0x10
 80040fa:	0521                	addi	a0,a0,8
 80040fc:	00000097          	auipc	ra,0x0
 8004100:	dda080e7          	jalr	-550(ra) # 8003ed6 <usb_txfifo_write>
 8004104:	bf71                	j	80040a0 <usb_transc_inxfer+0x84>

08004106 <usb_transc_outxfer>:
*/
usb_status usb_transc_outxfer (usb_core_driver *udev, usb_transc *transc)
{
    usb_status status = USB_OK;

    uint8_t ep_num = transc->ep_addr.num;
 8004106:	4198                	lw	a4,0(a1)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;

    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);

    /* zero length packet or endpoint 0 */
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004108:	45d4                	lw	a3,12(a1)
    uint8_t ep_num = transc->ep_addr.num;
 800410a:	8b3d                	andi	a4,a4,15
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 800410c:	00870793          	addi	a5,a4,8
 8004110:	078a                	slli	a5,a5,0x2
 8004112:	97aa                	add	a5,a5,a0
 8004114:	00c7a883          	lw	a7,12(a5)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004118:	e00007b7          	lui	a5,0xe0000
    uint32_t epctl = udev->regs.er_out[ep_num]->DOEPCTL;
 800411c:	0008a603          	lw	a2,0(a7)
    uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 8004120:	0108a803          	lw	a6,16(a7)
    eplen &= ~(DEPLEN_TLEN | DEPLEN_PCNT);
 8004124:	00f87833          	and	a6,a6,a5
    if ((0U == transc->xfer_len) || (0U == ep_num)) {
 8004128:	0045d783          	lhu	a5,4(a1)
 800412c:	c291                	beqz	a3,8004130 <usb_transc_outxfer+0x2a>
 800412e:	e339                	bnez	a4,8004174 <usb_transc_outxfer+0x6e>
        /* set the transfer length to max packet size */
        eplen |= transc->max_len;
 8004130:	00f86833          	or	a6,a6,a5

        /* set the transfer packet count to 1 */
        eplen |= 1U << 19;
 8004134:	000807b7          	lui	a5,0x80
         * xfersize = N * maxpacket
         */
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;

        eplen |= packet_count << 19;
        eplen |= packet_count * transc->max_len;
 8004138:	0107e7b3          	or	a5,a5,a6
    }

    udev->regs.er_out[ep_num]->DOEPLEN = eplen;
 800413c:	00f8a823          	sw	a5,16(a7)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004140:	00454703          	lbu	a4,4(a0)
 8004144:	4785                	li	a5,1
 8004146:	00f71563          	bne	a4,a5,8004150 <usb_transc_outxfer+0x4a>
        udev->regs.er_out[ep_num]->DOEPDMAADDR = transc->dma_addr;
 800414a:	4d9c                	lw	a5,24(a1)
 800414c:	00f8aa23          	sw	a5,20(a7)
    }

    if (transc->ep_type == USB_EPTYPE_ISOC) {
 8004150:	0015c703          	lbu	a4,1(a1)
 8004154:	4785                	li	a5,1
 8004156:	00f71863          	bne	a4,a5,8004166 <usb_transc_outxfer+0x60>
        if (transc->frame_num) {
 800415a:	0035c783          	lbu	a5,3(a1)
 800415e:	c79d                	beqz	a5,800418c <usb_transc_outxfer+0x86>
            epctl |= DEPCTL_SD1PID;
 8004160:	200007b7          	lui	a5,0x20000
        } else {
            epctl |= DEPCTL_SD0PID;
 8004164:	8e5d                	or	a2,a2,a5
        }
    }

    /* enable the endpoint and clear the NAK */
    epctl |= DEPCTL_EPEN | DEPCTL_CNAK;
 8004166:	840007b7          	lui	a5,0x84000
 800416a:	8e5d                	or	a2,a2,a5

    udev->regs.er_out[ep_num]->DOEPCTL = epctl;
 800416c:	00c8a023          	sw	a2,0(a7)

    return status;
}
 8004170:	4501                	li	a0,0
 8004172:	8082                	ret
        uint32_t packet_count = (transc->xfer_len + transc->max_len - 1) / transc->max_len;
 8004174:	fff68713          	addi	a4,a3,-1 # fffffff <__fini_array_end+0x7ff8227>
 8004178:	973e                	add	a4,a4,a5
 800417a:	02f75733          	divu	a4,a4,a5
        eplen |= packet_count << 19;
 800417e:	01371693          	slli	a3,a4,0x13
 8004182:	0106e833          	or	a6,a3,a6
        eplen |= packet_count * transc->max_len;
 8004186:	02f707b3          	mul	a5,a4,a5
 800418a:	b77d                	j	8004138 <usb_transc_outxfer+0x32>
            epctl |= DEPCTL_SD0PID;
 800418c:	100007b7          	lui	a5,0x10000
 8004190:	bfd1                	j	8004164 <usb_transc_outxfer+0x5e>

08004192 <usb_transc_stall>:
*/
usb_status usb_transc_stall (usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 8004192:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 8004194:	00058703          	lb	a4,0(a1)
 8004198:	8bbd                	andi	a5,a5,15
 800419a:	02075463          	bgez	a4,80041c2 <usb_transc_stall+0x30>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 800419e:	078a                	slli	a5,a5,0x2
 80041a0:	97aa                	add	a5,a5,a0
 80041a2:	4bdc                	lw	a5,20(a5)

        /* set the endpoint disable bit */
        if (*reg_addr & DEPCTL_EPEN) {
 80041a4:	4398                	lw	a4,0(a5)
 80041a6:	00075763          	bgez	a4,80041b4 <usb_transc_stall+0x22>
            *reg_addr |= DEPCTL_EPD;
 80041aa:	4398                	lw	a4,0(a5)
 80041ac:	400006b7          	lui	a3,0x40000
 80041b0:	8f55                	or	a4,a4,a3
 80041b2:	c398                	sw	a4,0(a5)
        /* set the endpoint stall bit */
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
    }

    /* set the endpoint stall bit */
    *reg_addr |= DEPCTL_STALL;
 80041b4:	4398                	lw	a4,0(a5)
 80041b6:	002006b7          	lui	a3,0x200

    return USB_OK;
}
 80041ba:	4501                	li	a0,0
    *reg_addr |= DEPCTL_STALL;
 80041bc:	8f55                	or	a4,a4,a3
 80041be:	c398                	sw	a4,0(a5)
}
 80041c0:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 80041c2:	07a1                	addi	a5,a5,8
 80041c4:	078a                	slli	a5,a5,0x2
 80041c6:	97aa                	add	a5,a5,a0
 80041c8:	47dc                	lw	a5,12(a5)
 80041ca:	b7ed                	j	80041b4 <usb_transc_stall+0x22>

080041cc <usb_transc_clrstall>:
*/
usb_status usb_transc_clrstall(usb_core_driver *udev, usb_transc *transc)
{
    __IO uint32_t *reg_addr = NULL;

    uint8_t ep_num = transc->ep_addr.num;
 80041cc:	419c                	lw	a5,0(a1)

    if (transc->ep_addr.dir) {
 80041ce:	00058703          	lb	a4,0(a1)
 80041d2:	8bbd                	andi	a5,a5,15
 80041d4:	02075a63          	bgez	a4,8004208 <usb_transc_clrstall+0x3c>
        reg_addr = &(udev->regs.er_in[ep_num]->DIEPCTL);
 80041d8:	078a                	slli	a5,a5,0x2
 80041da:	97aa                	add	a5,a5,a0
 80041dc:	4bdc                	lw	a5,20(a5)
    } else {
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 80041de:	4398                	lw	a4,0(a5)
    }

    /* clear the endpoint stall bits */
    *reg_addr &= ~DEPCTL_STALL;
 80041e0:	ffe006b7          	lui	a3,0xffe00
 80041e4:	16fd                	addi	a3,a3,-1
 80041e6:	8f75                	and	a4,a4,a3
 80041e8:	c398                	sw	a4,0(a5)

    /* reset data PID of the periodic endpoints */
    if ((transc->ep_type == USB_EPTYPE_INTR) || (transc->ep_type == USB_EPTYPE_BULK)) {
 80041ea:	0015c703          	lbu	a4,1(a1)
 80041ee:	4685                	li	a3,1
 80041f0:	1779                	addi	a4,a4,-2
 80041f2:	0ff77713          	andi	a4,a4,255
 80041f6:	00e6e763          	bltu	a3,a4,8004204 <usb_transc_clrstall+0x38>
        *reg_addr |= DEPCTL_SD0PID;
 80041fa:	4398                	lw	a4,0(a5)
 80041fc:	100006b7          	lui	a3,0x10000
 8004200:	8f55                	or	a4,a4,a3
 8004202:	c398                	sw	a4,0(a5)
    }

    return USB_OK;
}
 8004204:	4501                	li	a0,0
 8004206:	8082                	ret
        reg_addr = &(udev->regs.er_out[ep_num]->DOEPCTL);
 8004208:	07a1                	addi	a5,a5,8
 800420a:	078a                	slli	a5,a5,0x2
 800420c:	97aa                	add	a5,a5,a0
 800420e:	47dc                	lw	a5,12(a5)
 8004210:	b7f9                	j	80041de <usb_transc_clrstall+0x12>

08004212 <usb_oepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004212:	455c                	lw	a5,12(a0)
 8004214:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004216:	4fdc                	lw	a5,28(a5)
 8004218:	8d7d                	and	a0,a0,a5

    return (value & DAEPINT_OEPITB) >> 16;
 800421a:	8141                	srli	a0,a0,0x10
}
 800421c:	03f57513          	andi	a0,a0,63
 8004220:	8082                	ret

08004222 <usb_oepintr_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_oepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = udev->regs.er_out[ep_num]->DOEPINTF;
 8004222:	05a1                	addi	a1,a1,8
 8004224:	058a                	slli	a1,a1,0x2
 8004226:	95aa                	add	a1,a1,a0
 8004228:	45dc                	lw	a5,12(a1)
 800422a:	4798                	lw	a4,8(a5)

    value &= udev->regs.dr->DOEPINTEN;
 800422c:	455c                	lw	a5,12(a0)
 800422e:	4bc8                	lw	a0,20(a5)

    return value;
}
 8004230:	8d79                	and	a0,a0,a4
 8004232:	8082                	ret

08004234 <usb_iepintnum_read>:
    \param[out] none
    \retval     none
*/
uint32_t usb_iepintnum_read (usb_core_driver *udev)
{
    uint32_t value = udev->regs.dr->DAEPINT;
 8004234:	455c                	lw	a5,12(a0)
 8004236:	4f88                	lw	a0,24(a5)

    value &= udev->regs.dr->DAEPINTEN;
 8004238:	4fdc                	lw	a5,28(a5)
 800423a:	8d7d                	and	a0,a0,a5
    
    return value & DAEPINT_IEPITB;
}
 800423c:	03f57513          	andi	a0,a0,63
 8004240:	8082                	ret

08004242 <usb_iepintr_read>:
*/
uint32_t usb_iepintr_read (usb_core_driver *udev, uint8_t ep_num)
{
    uint32_t value = 0U, fifoemptymask = 0U, commonintmask = 0U;

    commonintmask = udev->regs.dr->DIEPINTEN;
 8004242:	4558                	lw	a4,12(a0)
 8004244:	4b14                	lw	a3,16(a4)
    fifoemptymask = udev->regs.dr->DIEPFEINTEN;
 8004246:	5b5c                	lw	a5,52(a4)

    /* check FIFO empty interrupt enable bit */
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;

    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004248:	00259713          	slli	a4,a1,0x2
 800424c:	953a                	add	a0,a0,a4
 800424e:	4958                	lw	a4,20(a0)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004250:	00b7d7b3          	srl	a5,a5,a1
 8004254:	079e                	slli	a5,a5,0x7
    value = udev->regs.er_in[ep_num]->DIEPINTF & commonintmask;
 8004256:	4708                	lw	a0,8(a4)
    commonintmask |= ((fifoemptymask >> ep_num) & 0x1U) << 7;
 8004258:	0ff7f793          	andi	a5,a5,255
 800425c:	8fd5                	or	a5,a5,a3

    return value;
}
 800425e:	8d7d                	and	a0,a0,a5
 8004260:	8082                	ret

08004262 <usb_ctlep_startout>:
    \retval     none
*/
void usb_ctlep_startout (usb_core_driver *udev)
{
    /* set OUT endpoint 0 receive length to 24 bytes, 1 packet and 3 setup packets */
    udev->regs.er_out[0]->DOEPLEN = DOEP0_TLEN(8U * 3U) | DOEP0_PCNT(1U) | DOEP0_STPCNT(3U);
 8004262:	555c                	lw	a5,44(a0)
 8004264:	60080737          	lui	a4,0x60080
 8004268:	0761                	addi	a4,a4,24
 800426a:	cb98                	sw	a4,16(a5)

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 800426c:	00454683          	lbu	a3,4(a0)
 8004270:	4705                	li	a4,1
 8004272:	00e69a63          	bne	a3,a4,8004286 <usb_ctlep_startout+0x24>
        udev->regs.er_out[0]->DOEPDMAADDR = (uint32_t)&udev->dev.control.req;
 8004276:	42450513          	addi	a0,a0,1060
 800427a:	cbc8                	sw	a0,20(a5)

        /* endpoint enable */
        udev->regs.er_out[0]->DOEPCTL |= DEPCTL_EPACT | DEPCTL_EPEN;
 800427c:	4398                	lw	a4,0(a5)
 800427e:	800086b7          	lui	a3,0x80008
 8004282:	8f55                	or	a4,a4,a3
 8004284:	c398                	sw	a4,0(a5)
    }
}
 8004286:	8082                	ret

08004288 <usb_clock_active>:
    \param[out] none
    \retval     none
*/
void usb_clock_active (usb_core_driver *udev)
{
    if (udev->bp.low_power) {
 8004288:	00754783          	lbu	a5,7(a0)
 800428c:	cb91                	beqz	a5,80042a0 <usb_clock_active+0x18>
        if (udev->regs.dr->DSTAT & DSTAT_SPST) {
 800428e:	455c                	lw	a5,12(a0)
 8004290:	479c                	lw	a5,8(a5)
 8004292:	8b85                	andi	a5,a5,1
 8004294:	c791                	beqz	a5,80042a0 <usb_clock_active+0x18>
            /* un-gate USB Core clock */
            *udev->regs.PWRCLKCTL &= ~(PWRCLKCTL_SHCLK | PWRCLKCTL_SUCLK);
 8004296:	0c052703          	lw	a4,192(a0)
 800429a:	431c                	lw	a5,0(a4)
 800429c:	9bf1                	andi	a5,a5,-4
 800429e:	c31c                	sw	a5,0(a4)
        }
    }
}
 80042a0:	8082                	ret

080042a2 <usbd_isr>:
    \param[out] none
    \retval     none
*/
void usbd_isr (usb_core_driver *udev)
{
    if (HOST_MODE != (udev->regs.gr->GINTF & GINTF_COPM)) {
 80042a2:	451c                	lw	a5,8(a0)
 80042a4:	4bd8                	lw	a4,20(a5)
 80042a6:	8b05                	andi	a4,a4,1
 80042a8:	12071c63          	bnez	a4,80043e0 <usbd_isr+0x13e>
{
 80042ac:	1141                	addi	sp,sp,-16
 80042ae:	c226                	sw	s1,4(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 80042b0:	4bc4                	lw	s1,20(a5)
 80042b2:	4f9c                	lw	a5,24(a5)
{
 80042b4:	c606                	sw	ra,12(sp)
 80042b6:	c422                	sw	s0,8(sp)
 80042b8:	c04a                	sw	s2,0(sp)
        uint32_t intr = udev->regs.gr->GINTF & udev->regs.gr->GINTEN;
 80042ba:	8cfd                	and	s1,s1,a5

        /* there are no interrupts, avoid spurious interrupt */
        if (!intr) {
 80042bc:	10048c63          	beqz	s1,80043d4 <usbd_isr+0x132>
            return;
        }

        /* OUT endpoints interrupts */
        if (intr & GINTF_OEPIF) {
 80042c0:	00c49793          	slli	a5,s1,0xc
 80042c4:	842a                	mv	s0,a0
 80042c6:	0007d663          	bgez	a5,80042d2 <usbd_isr+0x30>
            usbd_int_epout (udev);
 80042ca:	00000097          	auipc	ra,0x0
 80042ce:	118080e7          	jalr	280(ra) # 80043e2 <usbd_int_epout>
        }

        /* IN endpoints interrupts */
        if (intr & GINTF_IEPIF) {
 80042d2:	00d49793          	slli	a5,s1,0xd
 80042d6:	0007d763          	bgez	a5,80042e4 <usbd_isr+0x42>
            usbd_int_epin (udev);
 80042da:	8522                	mv	a0,s0
 80042dc:	00000097          	auipc	ra,0x0
 80042e0:	204080e7          	jalr	516(ra) # 80044e0 <usbd_int_epin>
        }

        /* suspend interrupt */
        if (intr & GINTF_SP) {
 80042e4:	6785                	lui	a5,0x1
 80042e6:	80078793          	addi	a5,a5,-2048 # 800 <__dbg_stack_size+0x800>
 80042ea:	00f4f733          	and	a4,s1,a5
 80042ee:	c319                	beqz	a4,80042f4 <usbd_isr+0x52>
        /* enter DEEP_SLEEP mode with LDO in low power mode */
   //     pmu_to_deepsleepmode(PMU_LDO_LOWPOWER, WFI_CMD);
    //}

    /* clear interrupt */
    udev->regs.gr->GINTF = GINTF_SP;
 80042f0:	4418                	lw	a4,8(s0)
 80042f2:	cb5c                	sw	a5,20(a4)
        if (intr & GINTF_WKUPIF) {
 80042f4:	0004dc63          	bgez	s1,800430c <usbd_isr+0x6a>
            udev->dev.cur_status = udev->dev.backup_status;
 80042f8:	0c744783          	lbu	a5,199(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 80042fc:	80000737          	lui	a4,0x80000
            udev->dev.cur_status = udev->dev.backup_status;
 8004300:	0ff7f793          	andi	a5,a5,255
 8004304:	0cf40323          	sb	a5,198(s0)
            udev->regs.gr->GINTF = GINTF_WKUPIF;
 8004308:	441c                	lw	a5,8(s0)
 800430a:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_MFIF) {
 800430c:	0024f793          	andi	a5,s1,2
 8004310:	c781                	beqz	a5,8004318 <usbd_isr+0x76>
            udev->regs.gr->GINTF = GINTF_MFIF;
 8004312:	441c                	lw	a5,8(s0)
 8004314:	4709                	li	a4,2
 8004316:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_SOF) {
 8004318:	0084f793          	andi	a5,s1,8
 800431c:	c7b1                	beqz	a5,8004368 <usbd_isr+0xc6>
            if (udev->dev.class_core->SOF) {
 800431e:	43042783          	lw	a5,1072(s0)
 8004322:	4f9c                	lw	a5,24(a5)
 8004324:	c399                	beqz	a5,800432a <usbd_isr+0x88>
                udev->dev.class_core->SOF(udev); 
 8004326:	8522                	mv	a0,s0
 8004328:	9782                	jalr	a5
            if (0U != setupc_flag) {
 800432a:	20000937          	lui	s2,0x20000
 800432e:	52090913          	addi	s2,s2,1312 # 20000520 <setupc_flag>
 8004332:	00094783          	lbu	a5,0(s2)
 8004336:	0ff7f793          	andi	a5,a5,255
 800433a:	c785                	beqz	a5,8004362 <usbd_isr+0xc0>
                setupc_flag ++;
 800433c:	00094783          	lbu	a5,0(s2)
                if (setupc_flag >= 3U) {
 8004340:	4709                	li	a4,2
                setupc_flag ++;
 8004342:	0785                	addi	a5,a5,1
 8004344:	0ff7f793          	andi	a5,a5,255
 8004348:	00f90023          	sb	a5,0(s2)
                if (setupc_flag >= 3U) {
 800434c:	00094783          	lbu	a5,0(s2)
 8004350:	00f77963          	bgeu	a4,a5,8004362 <usbd_isr+0xc0>
                    usbd_setup_transc (udev);
 8004354:	8522                	mv	a0,s0
 8004356:	00001097          	auipc	ra,0x1
 800435a:	e62080e7          	jalr	-414(ra) # 80051b8 <usbd_setup_transc>
                    setupc_flag = 0U;
 800435e:	00090023          	sb	zero,0(s2)
            udev->regs.gr->GINTF = GINTF_SOF;
 8004362:	441c                	lw	a5,8(s0)
 8004364:	4721                	li	a4,8
 8004366:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_RXFNEIF) {
 8004368:	0104f793          	andi	a5,s1,16
 800436c:	c791                	beqz	a5,8004378 <usbd_isr+0xd6>
            usbd_int_rxfifo (udev);
 800436e:	8522                	mv	a0,s0
 8004370:	00000097          	auipc	ra,0x0
 8004374:	22c080e7          	jalr	556(ra) # 800459c <usbd_int_rxfifo>
        if (intr & GINTF_RST) {
 8004378:	01349793          	slli	a5,s1,0x13
 800437c:	0007d763          	bgez	a5,800438a <usbd_isr+0xe8>
            usbd_int_reset (udev);
 8004380:	8522                	mv	a0,s0
 8004382:	00000097          	auipc	ra,0x0
 8004386:	2e0080e7          	jalr	736(ra) # 8004662 <usbd_int_reset>
        if (intr & GINTF_ENUMFIF) {
 800438a:	01249793          	slli	a5,s1,0x12
 800438e:	0007d763          	bgez	a5,800439c <usbd_isr+0xfa>
            usbd_int_enumfinish (udev);
 8004392:	8522                	mv	a0,s0
 8004394:	00000097          	auipc	ra,0x0
 8004398:	3a0080e7          	jalr	928(ra) # 8004734 <usbd_int_enumfinish>
        if (intr & GINTF_ISOINCIF) {
 800439c:	00b49793          	slli	a5,s1,0xb
 80043a0:	0007dc63          	bgez	a5,80043b8 <usbd_isr+0x116>
            if (NULL != udev->dev.class_core->incomplete_isoc_in) {
 80043a4:	43042783          	lw	a5,1072(s0)
 80043a8:	4fdc                	lw	a5,28(a5)
 80043aa:	c399                	beqz	a5,80043b0 <usbd_isr+0x10e>
                udev->dev.class_core->incomplete_isoc_in(udev);
 80043ac:	8522                	mv	a0,s0
 80043ae:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOINCIF;
 80043b0:	441c                	lw	a5,8(s0)
 80043b2:	00100737          	lui	a4,0x100
 80043b6:	cbd8                	sw	a4,20(a5)
        if (intr & GINTF_ISOONCIF) {
 80043b8:	00a49793          	slli	a5,s1,0xa
 80043bc:	0007dc63          	bgez	a5,80043d4 <usbd_isr+0x132>
            if (NULL != udev->dev.class_core->incomplete_isoc_out) {
 80043c0:	43042783          	lw	a5,1072(s0)
 80043c4:	539c                	lw	a5,32(a5)
 80043c6:	c399                	beqz	a5,80043cc <usbd_isr+0x12a>
                udev->dev.class_core->incomplete_isoc_out(udev);
 80043c8:	8522                	mv	a0,s0
 80043ca:	9782                	jalr	a5
            udev->regs.gr->GINTF = GINTF_ISOONCIF;
 80043cc:	441c                	lw	a5,8(s0)
 80043ce:	00200737          	lui	a4,0x200
 80043d2:	cbd8                	sw	a4,20(a5)
}
 80043d4:	40b2                	lw	ra,12(sp)
 80043d6:	4422                	lw	s0,8(sp)
 80043d8:	4492                	lw	s1,4(sp)
 80043da:	4902                	lw	s2,0(sp)
 80043dc:	0141                	addi	sp,sp,16
 80043de:	8082                	ret
 80043e0:	8082                	ret

080043e2 <usbd_int_epout>:
{
 80043e2:	7139                	addi	sp,sp,-64
 80043e4:	dc22                	sw	s0,56(sp)
 80043e6:	da26                	sw	s1,52(sp)
 80043e8:	d84a                	sw	s2,48(sp)
 80043ea:	d64e                	sw	s3,44(sp)
 80043ec:	d452                	sw	s4,40(sp)
 80043ee:	d256                	sw	s5,36(sp)
 80043f0:	d05a                	sw	s6,32(sp)
 80043f2:	ce5e                	sw	s7,28(sp)
 80043f4:	cc62                	sw	s8,24(sp)
 80043f6:	de06                	sw	ra,60(sp)
 80043f8:	ca66                	sw	s9,20(sp)
 80043fa:	842a                	mv	s0,a0
                                                                (eplen & DEPLEN_TLEN);
 80043fc:	00080a37          	lui	s4,0x80
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004400:	00000097          	auipc	ra,0x0
 8004404:	e12080e7          	jalr	-494(ra) # 8004212 <usb_oepintnum_read>
 8004408:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 800440a:	4481                	li	s1,0
                if ((0U == ep_num) && (0U != setupc_flag)) {
 800440c:	20000ab7          	lui	s5,0x20000
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 8004410:	4b21                	li	s6,8
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004412:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 8004414:	4b99                	li	s7,6
 8004416:	4c61                	li	s8,24
                                                                (eplen & DEPLEN_TLEN);
 8004418:	1a7d                	addi	s4,s4,-1
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 800441a:	02091063          	bnez	s2,800443a <usbd_int_epout+0x58>
}
 800441e:	50f2                	lw	ra,60(sp)
 8004420:	5462                	lw	s0,56(sp)
 8004422:	54d2                	lw	s1,52(sp)
 8004424:	5942                	lw	s2,48(sp)
 8004426:	59b2                	lw	s3,44(sp)
 8004428:	5a22                	lw	s4,40(sp)
 800442a:	5a92                	lw	s5,36(sp)
 800442c:	5b02                	lw	s6,32(sp)
 800442e:	4bf2                	lw	s7,28(sp)
 8004430:	4c62                	lw	s8,24(sp)
 8004432:	4cd2                	lw	s9,20(sp)
 8004434:	4505                	li	a0,1
 8004436:	6121                	addi	sp,sp,64
 8004438:	8082                	ret
        if (epintnum & 0x1) {
 800443a:	00197793          	andi	a5,s2,1
 800443e:	cfc9                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
            __IO uint32_t oepintr = usb_oepintr_read (udev, ep_num);
 8004440:	0ff4fc93          	andi	s9,s1,255
 8004444:	85e6                	mv	a1,s9
 8004446:	8522                	mv	a0,s0
 8004448:	00000097          	auipc	ra,0x0
 800444c:	dda080e7          	jalr	-550(ra) # 8004222 <usb_oepintr_read>
 8004450:	c42a                	sw	a0,8(sp)
            if (oepintr & DOEPINTF_TF) {
 8004452:	47a2                	lw	a5,8(sp)
 8004454:	8b85                	andi	a5,a5,1
 8004456:	cfa1                	beqz	a5,80044ae <usbd_int_epout+0xcc>
                udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_TF;
 8004458:	00249793          	slli	a5,s1,0x2
 800445c:	97a2                	add	a5,a5,s0
 800445e:	57d8                	lw	a4,44(a5)
 8004460:	01372423          	sw	s3,8(a4) # 200008 <__stack_size+0x1ff008>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004464:	00444683          	lbu	a3,4(s0)
 8004468:	01369f63          	bne	a3,s3,8004486 <usbd_int_epout+0xa4>
                    __IO uint32_t eplen = udev->regs.er_out[ep_num]->DOEPLEN;
 800446c:	4b18                	lw	a4,16(a4)
 800446e:	c63a                	sw	a4,12(sp)
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 8004470:	03848733          	mul	a4,s1,s8
                                                                (eplen & DEPLEN_TLEN);
 8004474:	46b2                	lw	a3,12(sp)
 8004476:	0146f6b3          	and	a3,a3,s4
 800447a:	97ba                	add	a5,a5,a4
                    udev->dev.transc_out[ep_num].xfer_count = udev->dev.transc_out[ep_num].max_len - \
 800447c:	2707d703          	lhu	a4,624(a5)
 8004480:	8f15                	sub	a4,a4,a3
 8004482:	26e7ae23          	sw	a4,636(a5)
                usbd_out_transc (udev, ep_num);
 8004486:	85e6                	mv	a1,s9
 8004488:	8522                	mv	a0,s0
 800448a:	00001097          	auipc	ra,0x1
 800448e:	dc2080e7          	jalr	-574(ra) # 800524c <usbd_out_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004492:	00444783          	lbu	a5,4(s0)
 8004496:	01379c63          	bne	a5,s3,80044ae <usbd_int_epout+0xcc>
                    if ((0U == ep_num) && (USB_CTL_STATUS_OUT == udev->dev.control.ctl_state)) {
 800449a:	e891                	bnez	s1,80044ae <usbd_int_epout+0xcc>
 800449c:	42c44783          	lbu	a5,1068(s0)
 80044a0:	01779763          	bne	a5,s7,80044ae <usbd_int_epout+0xcc>
                        usb_ctlep_startout (udev);
 80044a4:	8522                	mv	a0,s0
 80044a6:	00000097          	auipc	ra,0x0
 80044aa:	dbc080e7          	jalr	-580(ra) # 8004262 <usb_ctlep_startout>
            if (oepintr & DOEPINTF_STPF) {
 80044ae:	47a2                	lw	a5,8(sp)
 80044b0:	8ba1                	andi	a5,a5,8
 80044b2:	c39d                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
                if ((0U == ep_num) && (0U != setupc_flag)) {
 80044b4:	e095                	bnez	s1,80044d8 <usbd_int_epout+0xf6>
 80044b6:	520a8c93          	addi	s9,s5,1312 # 20000520 <setupc_flag>
 80044ba:	000cc783          	lbu	a5,0(s9)
 80044be:	0ff7f793          	andi	a5,a5,255
 80044c2:	cb99                	beqz	a5,80044d8 <usbd_int_epout+0xf6>
                    usbd_setup_transc (udev);
 80044c4:	8522                	mv	a0,s0
 80044c6:	00001097          	auipc	ra,0x1
 80044ca:	cf2080e7          	jalr	-782(ra) # 80051b8 <usbd_setup_transc>
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 80044ce:	545c                	lw	a5,44(s0)
                    setupc_flag = 0U;
 80044d0:	000c8023          	sb	zero,0(s9)
                    udev->regs.er_out[ep_num]->DOEPINTF = DOEPINTF_STPF;
 80044d4:	0167a423          	sw	s6,8(a5)
    for (epintnum = usb_oepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 80044d8:	00195913          	srli	s2,s2,0x1
 80044dc:	0485                	addi	s1,s1,1
 80044de:	bf35                	j	800441a <usbd_int_epout+0x38>

080044e0 <usbd_int_epin>:
{
 80044e0:	7179                	addi	sp,sp,-48
 80044e2:	d422                	sw	s0,40(sp)
 80044e4:	d226                	sw	s1,36(sp)
 80044e6:	d04a                	sw	s2,32(sp)
 80044e8:	ce4e                	sw	s3,28(sp)
 80044ea:	cc52                	sw	s4,24(sp)
 80044ec:	ca56                	sw	s5,20(sp)
 80044ee:	d606                	sw	ra,44(sp)
 80044f0:	c85a                	sw	s6,16(sp)
 80044f2:	842a                	mv	s0,a0
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 80044f4:	00000097          	auipc	ra,0x0
 80044f8:	d40080e7          	jalr	-704(ra) # 8004234 <usb_iepintnum_read>
 80044fc:	892a                	mv	s2,a0
    uint32_t ep_num = 0U;
 80044fe:	4481                	li	s1,0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004500:	08000a13          	li	s4,128
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004504:	4985                	li	s3,1
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004506:	4a95                	li	s5,5
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004508:	00091d63          	bnez	s2,8004522 <usbd_int_epin+0x42>
}
 800450c:	50b2                	lw	ra,44(sp)
 800450e:	5422                	lw	s0,40(sp)
 8004510:	5492                	lw	s1,36(sp)
 8004512:	5902                	lw	s2,32(sp)
 8004514:	49f2                	lw	s3,28(sp)
 8004516:	4a62                	lw	s4,24(sp)
 8004518:	4ad2                	lw	s5,20(sp)
 800451a:	4b42                	lw	s6,16(sp)
 800451c:	4505                	li	a0,1
 800451e:	6145                	addi	sp,sp,48
 8004520:	8082                	ret
        if (epintnum & 0x1U) {
 8004522:	00197793          	andi	a5,s2,1
 8004526:	c7bd                	beqz	a5,8004594 <usbd_int_epin+0xb4>
            __IO uint32_t iepintr = usb_iepintr_read (udev, ep_num);
 8004528:	0ff4fb13          	andi	s6,s1,255
 800452c:	85da                	mv	a1,s6
 800452e:	8522                	mv	a0,s0
 8004530:	00000097          	auipc	ra,0x0
 8004534:	d12080e7          	jalr	-750(ra) # 8004242 <usb_iepintr_read>
 8004538:	c62a                	sw	a0,12(sp)
            if (iepintr & DIEPINTF_TF) {
 800453a:	47b2                	lw	a5,12(sp)
 800453c:	8b85                	andi	a5,a5,1
 800453e:	cb9d                	beqz	a5,8004574 <usbd_int_epin+0x94>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 8004540:	00249793          	slli	a5,s1,0x2
 8004544:	97a2                	add	a5,a5,s0
 8004546:	4bdc                	lw	a5,20(a5)
                usbd_in_transc (udev, ep_num);
 8004548:	85da                	mv	a1,s6
 800454a:	8522                	mv	a0,s0
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TF;
 800454c:	0137a423          	sw	s3,8(a5)
                usbd_in_transc (udev, ep_num);
 8004550:	00001097          	auipc	ra,0x1
 8004554:	de2080e7          	jalr	-542(ra) # 8005332 <usbd_in_transc>
                if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004558:	00444783          	lbu	a5,4(s0)
 800455c:	01379c63          	bne	a5,s3,8004574 <usbd_int_epin+0x94>
                    if ((0U == ep_num) && (USB_CTL_STATUS_IN == udev->dev.control.ctl_state)) {
 8004560:	e891                	bnez	s1,8004574 <usbd_int_epin+0x94>
 8004562:	42c44783          	lbu	a5,1068(s0)
 8004566:	01579763          	bne	a5,s5,8004574 <usbd_int_epin+0x94>
                        usb_ctlep_startout (udev);
 800456a:	8522                	mv	a0,s0
 800456c:	00000097          	auipc	ra,0x0
 8004570:	cf6080e7          	jalr	-778(ra) # 8004262 <usb_ctlep_startout>
            if (iepintr & DIEPINTF_TXFE) {
 8004574:	47b2                	lw	a5,12(sp)
 8004576:	0807f793          	andi	a5,a5,128
 800457a:	cf89                	beqz	a5,8004594 <usbd_int_epin+0xb4>
                usbd_emptytxfifo_write (udev, ep_num);
 800457c:	85a6                	mv	a1,s1
 800457e:	8522                	mv	a0,s0
 8004580:	00000097          	auipc	ra,0x0
 8004584:	21c080e7          	jalr	540(ra) # 800479c <usbd_emptytxfifo_write>
                udev->regs.er_in[ep_num]->DIEPINTF = DIEPINTF_TXFE;
 8004588:	00249793          	slli	a5,s1,0x2
 800458c:	97a2                	add	a5,a5,s0
 800458e:	4bdc                	lw	a5,20(a5)
 8004590:	0147a423          	sw	s4,8(a5)
    for (epintnum = usb_iepintnum_read (udev); epintnum; epintnum >>= 1, ep_num++) {
 8004594:	00195913          	srli	s2,s2,0x1
 8004598:	0485                	addi	s1,s1,1
 800459a:	b7bd                	j	8004508 <usbd_int_epin+0x28>

0800459c <usbd_int_rxfifo>:
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 800459c:	451c                	lw	a5,8(a0)
{
 800459e:	1101                	addi	sp,sp,-32
    __IO uint32_t devrxstat = 0;
 80045a0:	c602                	sw	zero,12(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045a2:	4f98                	lw	a4,24(a5)
{
 80045a4:	cc22                	sw	s0,24(sp)
 80045a6:	ca26                	sw	s1,20(sp)
 80045a8:	c84a                	sw	s2,16(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045aa:	9b3d                	andi	a4,a4,-17
{
 80045ac:	ce06                	sw	ra,28(sp)
    udev->regs.gr->GINTEN &= ~GINTEN_RXFNEIE;
 80045ae:	cf98                	sw	a4,24(a5)
    devrxstat = udev->regs.gr->GRSTATP;
 80045b0:	539c                	lw	a5,32(a5)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045b2:	4689                	li	a3,2
{
 80045b4:	892a                	mv	s2,a0
    devrxstat = udev->regs.gr->GRSTATP;
 80045b6:	c63e                	sw	a5,12(sp)
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 80045b8:	4432                	lw	s0,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045ba:	44b2                	lw	s1,12(sp)
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 80045bc:	4732                	lw	a4,12(sp)
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045be:	47b2                	lw	a5,12(sp)
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045c0:	8091                	srli	s1,s1,0x4
    transc = &udev->dev.transc_out[devrxstat & GRSTATRP_EPNUM];
 80045c2:	883d                	andi	s0,s0,15
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045c4:	83c5                	srli	a5,a5,0x11
 80045c6:	8bbd                	andi	a5,a5,15
    bcount = (devrxstat & GRSTATRP_BCOUNT) >> 4;
 80045c8:	7ff4f493          	andi	s1,s1,2047
    switch ((devrxstat & GRSTATRP_RPCKST) >> 17) {
 80045cc:	02d78263          	beq	a5,a3,80045f0 <usbd_int_rxfifo+0x54>
 80045d0:	4699                	li	a3,6
 80045d2:	04d78763          	beq	a5,a3,8004620 <usbd_int_rxfifo+0x84>
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045d6:	00892703          	lw	a4,8(s2)
}
 80045da:	40f2                	lw	ra,28(sp)
 80045dc:	4462                	lw	s0,24(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045de:	4f1c                	lw	a5,24(a4)
}
 80045e0:	44d2                	lw	s1,20(sp)
 80045e2:	4942                	lw	s2,16(sp)
    udev->regs.gr->GINTEN |= GINTEN_RXFNEIE;
 80045e4:	0107e793          	ori	a5,a5,16
 80045e8:	cf1c                	sw	a5,24(a4)
}
 80045ea:	4505                	li	a0,1
 80045ec:	6105                	addi	sp,sp,32
 80045ee:	8082                	ret
            if (bcount > 0) {
 80045f0:	d0fd                	beqz	s1,80045d6 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, transc->xfer_buf, bcount);
 80045f2:	47f1                	li	a5,28
 80045f4:	02f40433          	mul	s0,s0,a5
 80045f8:	8626                	mv	a2,s1
 80045fa:	942a                	add	s0,s0,a0
 80045fc:	27442583          	lw	a1,628(s0)
 8004600:	0521                	addi	a0,a0,8
 8004602:	00000097          	auipc	ra,0x0
 8004606:	90e080e7          	jalr	-1778(ra) # 8003f10 <usb_rxfifo_read>
                transc->xfer_buf += bcount;
 800460a:	27442783          	lw	a5,628(s0)
 800460e:	97a6                	add	a5,a5,s1
 8004610:	26f42a23          	sw	a5,628(s0)
                transc->xfer_count += bcount;
 8004614:	27c42783          	lw	a5,636(s0)
 8004618:	94be                	add	s1,s1,a5
 800461a:	26942e23          	sw	s1,636(s0)
 800461e:	bf65                	j	80045d6 <usbd_int_rxfifo+0x3a>
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 8004620:	47f1                	li	a5,28
 8004622:	02f40433          	mul	s0,s0,a5
    data_PID = (devrxstat & GRSTATRP_DPID) >> 15;
 8004626:	833d                	srli	a4,a4,0xf
 8004628:	8b0d                	andi	a4,a4,3
            if ((transc->ep_addr.num == 0) && (bcount == 8) && (data_PID == DPID_DATA0)) {
 800462a:	942a                	add	s0,s0,a0
 800462c:	26c44783          	lbu	a5,620(s0)
 8004630:	8bbd                	andi	a5,a5,15
 8004632:	8fd9                	or	a5,a5,a4
 8004634:	f3cd                	bnez	a5,80045d6 <usbd_int_rxfifo+0x3a>
 8004636:	47a1                	li	a5,8
 8004638:	f8f49fe3          	bne	s1,a5,80045d6 <usbd_int_rxfifo+0x3a>
                usb_rxfifo_read (&udev->regs, (uint8_t *)&udev->dev.control.req, bcount);
 800463c:	42450593          	addi	a1,a0,1060
 8004640:	4621                	li	a2,8
 8004642:	0521                	addi	a0,a0,8
 8004644:	00000097          	auipc	ra,0x0
 8004648:	8cc080e7          	jalr	-1844(ra) # 8003f10 <usb_rxfifo_read>
                transc->xfer_count += bcount;
 800464c:	27c42783          	lw	a5,636(s0)
                setupc_flag = 1;
 8004650:	4705                	li	a4,1
                transc->xfer_count += bcount;
 8004652:	07a1                	addi	a5,a5,8
 8004654:	26f42e23          	sw	a5,636(s0)
                setupc_flag = 1;
 8004658:	200007b7          	lui	a5,0x20000
 800465c:	52e78023          	sb	a4,1312(a5) # 20000520 <setupc_flag>
 8004660:	bf9d                	j	80045d6 <usbd_int_rxfifo+0x3a>

08004662 <usbd_int_reset>:
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004662:	4558                	lw	a4,12(a0)
{
 8004664:	1141                	addi	sp,sp,-16
 8004666:	c422                	sw	s0,8(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004668:	435c                	lw	a5,4(a4)
{
 800466a:	c606                	sw	ra,12(sp)
 800466c:	c226                	sw	s1,4(sp)
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 800466e:	9bf9                	andi	a5,a5,-2
{
 8004670:	c04a                	sw	s2,0(sp)
 8004672:	842a                	mv	s0,a0
    udev->regs.dr->DCTL &= ~DCTL_RWKUP;
 8004674:	c35c                	sw	a5,4(a4)
    usb_txfifo_flush (&udev->regs, 0);
 8004676:	4581                	li	a1,0
 8004678:	0521                	addi	a0,a0,8
 800467a:	00000097          	auipc	ra,0x0
 800467e:	8c8080e7          	jalr	-1848(ra) # 8003f42 <usb_txfifo_flush>
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004682:	00344603          	lbu	a2,3(s0)
 8004686:	01440793          	addi	a5,s0,20
 800468a:	4701                	li	a4,0
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800468c:	0ff00693          	li	a3,255
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004690:	08c76b63          	bltu	a4,a2,8004726 <usbd_int_reset+0xc4>
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 8004694:	445c                	lw	a5,12(s0)
 8004696:	577d                	li	a4,-1
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 8004698:	4485                	li	s1,1
    udev->regs.dr->DAEPINT = 0xFFFFFFFFU;
 800469a:	cf98                	sw	a4,24(a5)
    udev->regs.dr->DAEPINTEN = 1U | (1U << 16);
 800469c:	6741                	lui	a4,0x10
 800469e:	0705                	addi	a4,a4,1
 80046a0:	cfd8                	sw	a4,28(a5)
    udev->regs.dr->DOEPINTEN = DOEPINTEN_STPFEN | DOEPINTEN_TFEN;
 80046a2:	4725                	li	a4,9
 80046a4:	cbd8                	sw	a4,20(a5)
    udev->regs.dr->DIEPINTEN = DIEPINTEN_TFEN;
 80046a6:	cb84                	sw	s1,16(a5)
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 80046a8:	4398                	lw	a4,0(a5)
    usb_ctlep_startout (udev);
 80046aa:	8522                	mv	a0,s0
    udev->dev.transc_out[0] = (usb_transc) {
 80046ac:	04000913          	li	s2,64
    udev->regs.dr->DCFG &= ~DCFG_DAR;
 80046b0:	80f77713          	andi	a4,a4,-2033
 80046b4:	c398                	sw	a4,0(a5)
    udev->dev.dev_addr = 0U;
 80046b6:	0c0402a3          	sb	zero,197(s0)
    usb_ctlep_startout (udev);
 80046ba:	00000097          	auipc	ra,0x0
 80046be:	ba8080e7          	jalr	-1112(ra) # 8004262 <usb_ctlep_startout>
    udev->regs.gr->GINTF = GINTF_RST;
 80046c2:	441c                	lw	a5,8(s0)
 80046c4:	6705                	lui	a4,0x1
    udev->dev.transc_out[0] = (usb_transc) {
 80046c6:	4671                	li	a2,28
    udev->regs.gr->GINTF = GINTF_RST;
 80046c8:	cbd8                	sw	a4,20(a5)
    udev->dev.transc_out[0] = (usb_transc) {
 80046ca:	26c40793          	addi	a5,s0,620
 80046ce:	853e                	mv	a0,a5
 80046d0:	4581                	li	a1,0
 80046d2:	00003097          	auipc	ra,0x3
 80046d6:	b08080e7          	jalr	-1272(ra) # 80071da <memset>
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 80046da:	85aa                	mv	a1,a0
    udev->dev.transc_out[0] = (usb_transc) {
 80046dc:	27241823          	sh	s2,624(s0)
    usb_transc_active (udev, &udev->dev.transc_out[0]);
 80046e0:	8522                	mv	a0,s0
 80046e2:	00000097          	auipc	ra,0x0
 80046e6:	89c080e7          	jalr	-1892(ra) # 8003f7e <usb_transc_active>
    udev->dev.transc_in[0] = (usb_transc) {
 80046ea:	0c840793          	addi	a5,s0,200
 80046ee:	4671                	li	a2,28
 80046f0:	4581                	li	a1,0
 80046f2:	853e                	mv	a0,a5
 80046f4:	00003097          	auipc	ra,0x3
 80046f8:	ae6080e7          	jalr	-1306(ra) # 80071da <memset>
 80046fc:	f8000713          	li	a4,-128
 8004700:	0d241623          	sh	s2,204(s0)
 8004704:	0ce40423          	sb	a4,200(s0)
    usb_transc_active (udev, &udev->dev.transc_in[0]);
 8004708:	85aa                	mv	a1,a0
 800470a:	8522                	mv	a0,s0
 800470c:	00000097          	auipc	ra,0x0
 8004710:	872080e7          	jalr	-1934(ra) # 8003f7e <usb_transc_active>
}
 8004714:	40b2                	lw	ra,12(sp)
    udev->dev.cur_status = USBD_DEFAULT;
 8004716:	0c940323          	sb	s1,198(s0)
}
 800471a:	4422                	lw	s0,8(sp)
 800471c:	4492                	lw	s1,4(sp)
 800471e:	4902                	lw	s2,0(sp)
 8004720:	4505                	li	a0,1
 8004722:	0141                	addi	sp,sp,16
 8004724:	8082                	ret
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 8004726:	438c                	lw	a1,0(a5)
    for (i = 0; i < udev->bp.num_ep; i++) {
 8004728:	0705                	addi	a4,a4,1
 800472a:	0791                	addi	a5,a5,4
        udev->regs.er_in[i]->DIEPINTF = 0xFFU;
 800472c:	c594                	sw	a3,8(a1)
        udev->regs.er_out[i]->DOEPINTF = 0xFFU;
 800472e:	4bcc                	lw	a1,20(a5)
 8004730:	c594                	sw	a3,8(a1)
 8004732:	bfb9                	j	8004690 <usbd_int_reset+0x2e>

08004734 <usbd_int_enumfinish>:
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 8004734:	455c                	lw	a5,12(a0)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 8004736:	7671                	lui	a2,0xffffc
 8004738:	3ff60613          	addi	a2,a2,1023 # ffffc3ff <_sp+0xdfff43ff>
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 800473c:	4798                	lw	a4,8(a5)
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 800473e:	43d4                	lw	a3,4(a5)
    uint8_t enum_speed = (uint8_t)((udev->regs.dr->DSTAT & DSTAT_ES) >> 1U);
 8004740:	8305                	srli	a4,a4,0x1
    udev->regs.dr->DCTL &= ~DCTL_CGINAK;
 8004742:	eff6f693          	andi	a3,a3,-257
 8004746:	c3d4                	sw	a3,4(a5)
    udev->regs.dr->DCTL |= DCTL_CGINAK;
 8004748:	43d4                	lw	a3,4(a5)
 800474a:	1006e693          	ori	a3,a3,256
 800474e:	c3d4                	sw	a3,4(a5)
    udev->regs.gr->GUSBCS &= ~GUSBCS_UTT;
 8004750:	451c                	lw	a5,8(a0)
 8004752:	47d4                	lw	a3,12(a5)
 8004754:	8ef1                	and	a3,a3,a2
 8004756:	c7d4                	sw	a3,12(a5)
    if (USB_SPEED[enum_speed] == USB_SPEED_HIGH) {
 8004758:	00377693          	andi	a3,a4,3
 800475c:	08008737          	lui	a4,0x8008
 8004760:	dd070713          	addi	a4,a4,-560 # 8007dd0 <USB_SPEED>
 8004764:	9736                	add	a4,a4,a3
 8004766:	00074703          	lbu	a4,0(a4)
 800476a:	468d                	li	a3,3
 800476c:	00d71e63          	bne	a4,a3,8004788 <usbd_int_enumfinish+0x54>
        udev->bp.core_speed = USB_SPEED_HIGH;
 8004770:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x09 << 10;
 8004774:	47d8                	lw	a4,12(a5)
 8004776:	6689                	lui	a3,0x2
 8004778:	40068693          	addi	a3,a3,1024 # 2400 <__stack_size+0x1400>
 800477c:	8f55                	or	a4,a4,a3
 800477e:	c7d8                	sw	a4,12(a5)
    udev->regs.gr->GINTF = GINTF_ENUMFIF;
 8004780:	6709                	lui	a4,0x2
 8004782:	cbd8                	sw	a4,20(a5)
}
 8004784:	4505                	li	a0,1
 8004786:	8082                	ret
        udev->bp.core_speed = USB_SPEED_FULL;
 8004788:	4709                	li	a4,2
 800478a:	00e500a3          	sb	a4,1(a0)
        udev->regs.gr->GUSBCS |= 0x05 << 10;
 800478e:	47d8                	lw	a4,12(a5)
 8004790:	6685                	lui	a3,0x1
 8004792:	40068693          	addi	a3,a3,1024 # 1400 <__stack_size+0x400>
 8004796:	8f55                	or	a4,a4,a3
 8004798:	c7d8                	sw	a4,12(a5)
 800479a:	b7dd                	j	8004780 <usbd_int_enumfinish+0x4c>

0800479c <usbd_emptytxfifo_write>:
    uint32_t len = 0;
    uint32_t word_count = 0;

    transc = &udev->dev.transc_in[ep_num];

    len = transc->xfer_len - transc->xfer_count;
 800479c:	47f1                	li	a5,28
 800479e:	02f587b3          	mul	a5,a1,a5
{
 80047a2:	7179                	addi	sp,sp,-48
 80047a4:	ce4e                	sw	s3,28(sp)
 80047a6:	d606                	sw	ra,44(sp)
 80047a8:	d422                	sw	s0,40(sp)
 80047aa:	d226                	sw	s1,36(sp)
 80047ac:	d04a                	sw	s2,32(sp)
 80047ae:	cc52                	sw	s4,24(sp)
 80047b0:	ca56                	sw	s5,20(sp)
 80047b2:	c85a                	sw	s6,16(sp)
    len = transc->xfer_len - transc->xfer_count;
 80047b4:	97aa                	add	a5,a5,a0
 80047b6:	0d47a703          	lw	a4,212(a5)
 80047ba:	0d87a683          	lw	a3,216(a5)

    /* get the data length to write */
    if (len > transc->max_len) {
 80047be:	0cc7d783          	lhu	a5,204(a5)
{
 80047c2:	c65e                	sw	s7,12(sp)
 80047c4:	c462                	sw	s8,8(sp)
    len = transc->xfer_len - transc->xfer_count;
 80047c6:	8f15                	sub	a4,a4,a3
{
 80047c8:	89aa                	mv	s3,a0
        len = transc->max_len;
    }

    word_count = (len + 3) / 4;
 80047ca:	00f77363          	bgeu	a4,a5,80047d0 <usbd_emptytxfifo_write+0x34>
 80047ce:	87ba                	mv	a5,a4

    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
        (transc->xfer_count < transc->xfer_len)) {
 80047d0:	4471                	li	s0,28
 80047d2:	02858433          	mul	s0,a1,s0
        transc->xfer_buf += len;
        transc->xfer_count += len;

        if (transc->xfer_count == transc->xfer_len) {
            /* disable the device endpoint FIFO empty interrupt */
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047d6:	4a85                	li	s5,1
    word_count = (len + 3) / 4;
 80047d8:	078d                	addi	a5,a5,3
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047da:	00ba9ab3          	sll	s5,s5,a1
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047de:	00259b13          	slli	s6,a1,0x2
 80047e2:	6bc1                	lui	s7,0x10
    word_count = (len + 3) / 4;
 80047e4:	0027da13          	srli	s4,a5,0x2
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 80047e8:	fffaca93          	not	s5,s5
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047ec:	9b4e                	add	s6,s6,s3
 80047ee:	1bfd                	addi	s7,s7,-1
        (transc->xfer_count < transc->xfer_len)) {
 80047f0:	944e                	add	s0,s0,s3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 80047f2:	0ff5f913          	andi	s2,a1,255
 80047f6:	00898c13          	addi	s8,s3,8
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 80047fa:	014b2783          	lw	a5,20(s6)
 80047fe:	4f98                	lw	a4,24(a5)
 8004800:	01777733          	and	a4,a4,s7
 8004804:	00ea7863          	bgeu	s4,a4,8004814 <usbd_emptytxfifo_write+0x78>
        (transc->xfer_count < transc->xfer_len)) {
 8004808:	0d842703          	lw	a4,216(s0)
 800480c:	0d442783          	lw	a5,212(s0)
    while (((udev->regs.er_in[ep_num]->DIEPTFSTAT & DIEPTFSTAT_IEPTFS) > word_count) && \
 8004810:	00f76f63          	bltu	a4,a5,800482e <usbd_emptytxfifo_write+0x92>
        }
    }

    return 1;
}
 8004814:	50b2                	lw	ra,44(sp)
 8004816:	5422                	lw	s0,40(sp)
 8004818:	5492                	lw	s1,36(sp)
 800481a:	5902                	lw	s2,32(sp)
 800481c:	49f2                	lw	s3,28(sp)
 800481e:	4a62                	lw	s4,24(sp)
 8004820:	4ad2                	lw	s5,20(sp)
 8004822:	4b42                	lw	s6,16(sp)
 8004824:	4bb2                	lw	s7,12(sp)
 8004826:	4c22                	lw	s8,8(sp)
 8004828:	4505                	li	a0,1
 800482a:	6145                	addi	sp,sp,48
 800482c:	8082                	ret
        if (len > transc->max_len) {
 800482e:	0cc45483          	lhu	s1,204(s0)
        len = transc->xfer_len - transc->xfer_count;
 8004832:	8f99                	sub	a5,a5,a4
        if (len > transc->max_len) {
 8004834:	0097f363          	bgeu	a5,s1,800483a <usbd_emptytxfifo_write+0x9e>
 8004838:	84be                	mv	s1,a5
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 800483a:	0d042583          	lw	a1,208(s0)
 800483e:	01049693          	slli	a3,s1,0x10
        word_count = (len + 3) / 4;
 8004842:	00348793          	addi	a5,s1,3
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8004846:	82c1                	srli	a3,a3,0x10
 8004848:	864a                	mv	a2,s2
 800484a:	8562                	mv	a0,s8
        word_count = (len + 3) / 4;
 800484c:	0027da13          	srli	s4,a5,0x2
        usb_txfifo_write (&udev->regs, transc->xfer_buf, ep_num, len);
 8004850:	fffff097          	auipc	ra,0xfffff
 8004854:	686080e7          	jalr	1670(ra) # 8003ed6 <usb_txfifo_write>
        transc->xfer_count += len;
 8004858:	0d842783          	lw	a5,216(s0)
        transc->xfer_buf += len;
 800485c:	0d042703          	lw	a4,208(s0)
 8004860:	9726                	add	a4,a4,s1
        transc->xfer_count += len;
 8004862:	94be                	add	s1,s1,a5
        if (transc->xfer_count == transc->xfer_len) {
 8004864:	0d442783          	lw	a5,212(s0)
        transc->xfer_buf += len;
 8004868:	0ce42823          	sw	a4,208(s0)
        transc->xfer_count += len;
 800486c:	0c942c23          	sw	s1,216(s0)
        if (transc->xfer_count == transc->xfer_len) {
 8004870:	f8f495e3          	bne	s1,a5,80047fa <usbd_emptytxfifo_write+0x5e>
            udev->regs.dr->DIEPFEINTEN &= ~(0x01 << ep_num);
 8004874:	00c9a783          	lw	a5,12(s3)
 8004878:	5bd8                	lw	a4,52(a5)
 800487a:	01577733          	and	a4,a4,s5
 800487e:	dbd8                	sw	a4,52(a5)
 8004880:	bfad                	j	80047fa <usbd_emptytxfifo_write+0x5e>

08004882 <usb_udelay>:
    \retval     none
*/
static void hw_delay(uint32_t ntime, uint8_t unit)
{
    if(unit == TIM_USEC_DELAY){
        usb_delay_1us(ntime);
 8004882:	00000317          	auipc	t1,0x0
 8004886:	0e030067          	jr	224(t1) # 8004962 <usb_delay_1us>

0800488a <USBFS_IRQHandler>:
    \retval     none
*/
void USBFS_IRQHandler (void)
{ 
    //DEBUG_PIN_ON();
    usbd_isr (&USB_OTG_dev);
 800488a:	20000537          	lui	a0,0x20000
 800488e:	04450513          	addi	a0,a0,68 # 20000044 <USB_OTG_dev>
 8004892:	00000317          	auipc	t1,0x0
 8004896:	a1030067          	jr	-1520(t1) # 80042a2 <usbd_isr>

0800489a <USBFS_WKUP_IRQHandler>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void USBFS_WKUP_IRQHandler(void)
{
 800489a:	1141                	addi	sp,sp,-16
 800489c:	c422                	sw	s0,8(sp)
    //DEBUG_PIN_ON();
    if (USB_OTG_dev.bp.low_power) {
 800489e:	20000437          	lui	s0,0x20000
{
 80048a2:	c606                	sw	ra,12(sp)
    if (USB_OTG_dev.bp.low_power) {
 80048a4:	04440793          	addi	a5,s0,68 # 20000044 <USB_OTG_dev>
 80048a8:	0077c783          	lbu	a5,7(a5)
 80048ac:	cb8d                	beqz	a5,80048de <USBFS_WKUP_IRQHandler+0x44>
        //SystemInit();
        set_usb_clock_96m_hxtal();
 80048ae:	00000097          	auipc	ra,0x0
 80048b2:	128080e7          	jalr	296(ra) # 80049d6 <set_usb_clock_96m_hxtal>
        rcu_usb_clock_config(usbfs_prescaler);
 80048b6:	200007b7          	lui	a5,0x20000
 80048ba:	5247a503          	lw	a0,1316(a5) # 20000524 <usbfs_prescaler>
 80048be:	ffffd097          	auipc	ra,0xffffd
 80048c2:	85e080e7          	jalr	-1954(ra) # 800111c <rcu_usb_clock_config>

        rcu_periph_clock_enable(RCU_USBFS);
 80048c6:	50c00513          	li	a0,1292
 80048ca:	ffffc097          	auipc	ra,0xffffc
 80048ce:	7c6080e7          	jalr	1990(ra) # 8001090 <rcu_periph_clock_enable>

        usb_clock_active(&USB_OTG_dev);
 80048d2:	04440513          	addi	a0,s0,68
 80048d6:	00000097          	auipc	ra,0x0
 80048da:	9b2080e7          	jalr	-1614(ra) # 8004288 <usb_clock_active>
    }

    exti_interrupt_flag_clear(EXTI_18);
}
 80048de:	4422                	lw	s0,8(sp)
 80048e0:	40b2                	lw	ra,12(sp)
    exti_interrupt_flag_clear(EXTI_18);
 80048e2:	00040537          	lui	a0,0x40
}
 80048e6:	0141                	addi	sp,sp,16
    exti_interrupt_flag_clear(EXTI_18);
 80048e8:	ffffc317          	auipc	t1,0xffffc
 80048ec:	6e830067          	jr	1768(t1) # 8000fd0 <exti_interrupt_flag_clear>

080048f0 <usb_delay_1ms>:
    \param[in]  count: count in milliseconds
    \param[out] none
    \retval     none
*/
void usb_delay_1ms(uint32_t count)
{
 80048f0:	1101                	addi	sp,sp,-32
 80048f2:	cc22                	sw	s0,24(sp)
 80048f4:	c64e                	sw	s3,12(sp)
 80048f6:	c452                	sw	s4,8(sp)
 80048f8:	ce06                	sw	ra,28(sp)
 80048fa:	ca26                	sw	s1,20(sp)
 80048fc:	c84a                	sw	s2,16(sp)
 80048fe:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8004900:	ffffd097          	auipc	ra,0xffffd
 8004904:	310080e7          	jalr	784(ra) # 8001c10 <get_timer_value>
 8004908:	8a2a                	mv	s4,a0
 800490a:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800490c:	ffffd097          	auipc	ra,0xffffd
 8004910:	304080e7          	jalr	772(ra) # 8001c10 <get_timer_value>
 8004914:	84aa                	mv	s1,a0
 8004916:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 8004918:	00aa1463          	bne	s4,a0,8004920 <usb_delay_1ms+0x30>
 800491c:	feb408e3          	beq	s0,a1,800490c <usb_delay_1ms+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004920:	6405                	lui	s0,0x1
 8004922:	20000a37          	lui	s4,0x20000
 8004926:	fa040413          	addi	s0,s0,-96 # fa0 <__dbg_stack_size+0xfa0>
	delta_mtime = get_timer_value() - start_mtime;
 800492a:	ffffd097          	auipc	ra,0xffffd
 800492e:	2e6080e7          	jalr	742(ra) # 8001c10 <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004932:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 8004936:	40950733          	sub	a4,a0,s1
 800493a:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 800493e:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 8004942:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000 *count ));
 8004946:	033787b3          	mul	a5,a5,s3
 800494a:	00a59463          	bne	a1,a0,8004952 <usb_delay_1ms+0x62>
 800494e:	fcf76ee3          	bltu	a4,a5,800492a <usb_delay_1ms+0x3a>
}
 8004952:	40f2                	lw	ra,28(sp)
 8004954:	4462                	lw	s0,24(sp)
 8004956:	44d2                	lw	s1,20(sp)
 8004958:	4942                	lw	s2,16(sp)
 800495a:	49b2                	lw	s3,12(sp)
 800495c:	4a22                	lw	s4,8(sp)
 800495e:	6105                	addi	sp,sp,32
 8004960:	8082                	ret

08004962 <usb_delay_1us>:

void usb_delay_1us(uint32_t count)
{
 8004962:	1101                	addi	sp,sp,-32
 8004964:	cc22                	sw	s0,24(sp)
 8004966:	c64e                	sw	s3,12(sp)
 8004968:	c452                	sw	s4,8(sp)
 800496a:	ce06                	sw	ra,28(sp)
 800496c:	ca26                	sw	s1,20(sp)
 800496e:	c84a                	sw	s2,16(sp)
 8004970:	89aa                	mv	s3,a0
	uint64_t start_mtime, delta_mtime;

	// Don't start measuruing until we see an mtime tick
	uint64_t tmp = get_timer_value();
 8004972:	ffffd097          	auipc	ra,0xffffd
 8004976:	29e080e7          	jalr	670(ra) # 8001c10 <get_timer_value>
 800497a:	8a2a                	mv	s4,a0
 800497c:	842e                	mv	s0,a1
	do {
	start_mtime = get_timer_value();
 800497e:	ffffd097          	auipc	ra,0xffffd
 8004982:	292080e7          	jalr	658(ra) # 8001c10 <get_timer_value>
 8004986:	84aa                	mv	s1,a0
 8004988:	892e                	mv	s2,a1
	} while (start_mtime == tmp);
 800498a:	00aa1463          	bne	s4,a0,8004992 <usb_delay_1us+0x30>
 800498e:	feb408e3          	beq	s0,a1,800497e <usb_delay_1us+0x1c>

	do {
	delta_mtime = get_timer_value() - start_mtime;
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 8004992:	003d1437          	lui	s0,0x3d1
 8004996:	20000a37          	lui	s4,0x20000
 800499a:	90040413          	addi	s0,s0,-1792 # 3d0900 <__stack_size+0x3cf900>
	delta_mtime = get_timer_value() - start_mtime;
 800499e:	ffffd097          	auipc	ra,0xffffd
 80049a2:	272080e7          	jalr	626(ra) # 8001c10 <get_timer_value>
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049a6:	4e8a2783          	lw	a5,1256(s4) # 200004e8 <SystemCoreClock>
	delta_mtime = get_timer_value() - start_mtime;
 80049aa:	40950733          	sub	a4,a0,s1
 80049ae:	00e53533          	sltu	a0,a0,a4
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049b2:	0287d7b3          	divu	a5,a5,s0
	delta_mtime = get_timer_value() - start_mtime;
 80049b6:	412585b3          	sub	a1,a1,s2
	}while(delta_mtime <(SystemCoreClock/4000000 *count ));
 80049ba:	033787b3          	mul	a5,a5,s3
 80049be:	00a59463          	bne	a1,a0,80049c6 <usb_delay_1us+0x64>
 80049c2:	fcf76ee3          	bltu	a4,a5,800499e <usb_delay_1us+0x3c>
 80049c6:	40f2                	lw	ra,28(sp)
 80049c8:	4462                	lw	s0,24(sp)
 80049ca:	44d2                	lw	s1,20(sp)
 80049cc:	4942                	lw	s2,16(sp)
 80049ce:	49b2                	lw	s3,12(sp)
 80049d0:	4a22                	lw	s4,8(sp)
 80049d2:	6105                	addi	sp,sp,32
 80049d4:	8082                	ret

080049d6 <set_usb_clock_96m_hxtal>:

void set_usb_clock_96m_hxtal(void){

    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 80049d6:	400217b7          	lui	a5,0x40021
 80049da:	4398                	lw	a4,0(a5)
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 80049dc:	e0ff06b7          	lui	a3,0xe0ff0
 80049e0:	06b1                	addi	a3,a3,12
    RCU_CTL |= RCU_CTL_IRC8MEN;
 80049e2:	00176713          	ori	a4,a4,1
 80049e6:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 80049e8:	43d8                	lw	a4,4(a5)
 80049ea:	8f75                	and	a4,a4,a3
 80049ec:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 80049ee:	4398                	lw	a4,0(a5)
 80049f0:	fef706b7          	lui	a3,0xfef70
 80049f4:	16fd                	addi	a3,a3,-1
 80049f6:	8f75                	and	a4,a4,a3
 80049f8:	c398                	sw	a4,0(a5)

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 80049fa:	4398                	lw	a4,0(a5)
 80049fc:	fffc06b7          	lui	a3,0xfffc0
 8004a00:	16fd                	addi	a3,a3,-1
 8004a02:	8f75                	and	a4,a4,a3
 8004a04:	c398                	sw	a4,0(a5)

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8004a06:	43d8                	lw	a4,4(a5)
 8004a08:	df0106b7          	lui	a3,0xdf010
 8004a0c:	16fd                	addi	a3,a3,-1
 8004a0e:	8f75                	and	a4,a4,a3
 8004a10:	c3d8                	sw	a4,4(a5)
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 8004a12:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001902c>

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8004a16:	4398                	lw	a4,0(a5)
 8004a18:	eaf706b7          	lui	a3,0xeaf70
 8004a1c:	16fd                	addi	a3,a3,-1
 8004a1e:	8f75                	and	a4,a4,a3
 8004a20:	c398                	sw	a4,0(a5)
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 8004a22:	00ff0737          	lui	a4,0xff0
 8004a26:	c798                	sw	a4,8(a5)

    uint32_t timeout = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8004a28:	4394                	lw	a3,0(a5)
 8004a2a:	6741                	lui	a4,0x10
 8004a2c:	8ed9                	or	a3,a3,a4
 8004a2e:	c394                	sw	a3,0(a5)
 8004a30:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xefff>

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8004a34:	40021737          	lui	a4,0x40021
 8004a38:	4314                	lw	a3,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8004a3a:	00e69613          	slli	a2,a3,0xe
 8004a3e:	00064463          	bltz	a2,8004a46 <set_usb_clock_96m_hxtal+0x70>
 8004a42:	17fd                	addi	a5,a5,-1
 8004a44:	fbf5                	bnez	a5,8004a38 <set_usb_clock_96m_hxtal+0x62>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8004a46:	400217b7          	lui	a5,0x40021
 8004a4a:	4398                	lw	a4,0(a5)
 8004a4c:	00e71693          	slli	a3,a4,0xe
 8004a50:	0006c363          	bltz	a3,8004a56 <set_usb_clock_96m_hxtal+0x80>
        while(1){
        }
 8004a54:	a001                	j	8004a54 <set_usb_clock_96m_hxtal+0x7e>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8004a56:	43d8                	lw	a4,4(a5)
        while((RCU_CTL & RCU_CTL_PLL1STB) == 0){
        }

    }else if(HXTAL_VALUE==8000000){
        /* CK_PLL = (CK_PREDIV0) * 24 = 96 MHz */
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8004a58:	dfc406b7          	lui	a3,0xdfc40
 8004a5c:	16fd                	addi	a3,a3,-1
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8004a5e:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8004a60:	43d8                	lw	a4,4(a5)
 8004a62:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8004a64:	43d8                	lw	a4,4(a5)
 8004a66:	40076713          	ori	a4,a4,1024
 8004a6a:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 8004a6c:	43d8                	lw	a4,4(a5)
 8004a6e:	8f75                	and	a4,a4,a3
 8004a70:	c3d8                	sw	a4,4(a5)
        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL24);
 8004a72:	43d8                	lw	a4,4(a5)
 8004a74:	201d06b7          	lui	a3,0x201d0
 8004a78:	8f55                	or	a4,a4,a3
 8004a7a:	c3d8                	sw	a4,4(a5)

		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8004a7c:	57d8                	lw	a4,44(a5)
 8004a7e:	76bd                	lui	a3,0xfffef
 8004a80:	8f75                	and	a4,a4,a3
 8004a82:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8004a84:	57d8                	lw	a4,44(a5)
    }

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8004a86:	010006b7          	lui	a3,0x1000
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 );
 8004a8a:	00176713          	ori	a4,a4,1
 8004a8e:	d7d8                	sw	a4,44(a5)
    RCU_CTL |= RCU_CTL_PLLEN;
 8004a90:	4398                	lw	a4,0(a5)
 8004a92:	8f55                	or	a4,a4,a3
 8004a94:	c398                	sw	a4,0(a5)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8004a96:	400217b7          	lui	a5,0x40021
 8004a9a:	4398                	lw	a4,0(a5)
 8004a9c:	00671693          	slli	a3,a4,0x6
 8004aa0:	fe06dde3          	bgez	a3,8004a9a <set_usb_clock_96m_hxtal+0xc4>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8004aa4:	43d8                	lw	a4,4(a5)
 8004aa6:	9b71                	andi	a4,a4,-4
 8004aa8:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8004aaa:	43d8                	lw	a4,4(a5)
 8004aac:	00276713          	ori	a4,a4,2
 8004ab0:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 8004ab2:	40021737          	lui	a4,0x40021
 8004ab6:	435c                	lw	a5,4(a4)
 8004ab8:	8ba1                	andi	a5,a5,8
 8004aba:	dff5                	beqz	a5,8004ab6 <set_usb_clock_96m_hxtal+0xe0>
    }
    //SystemCoreClock = 96000000;
    SystemCoreClockUpdate();
 8004abc:	ffffd317          	auipc	t1,0xffffd
 8004ac0:	f9430067          	jr	-108(t1) # 8001a50 <SystemCoreClockUpdate>

08004ac4 <usbd_ep_recev>:
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_recev (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004ac4:	07f5f793          	andi	a5,a1,127
 8004ac8:	45f1                	li	a1,28
 8004aca:	02b787b3          	mul	a5,a5,a1
{
 8004ace:	1141                	addi	sp,sp,-16
 8004ad0:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ad2:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004ad4:	26c78593          	addi	a1,a5,620 # 4002126c <_sp+0x2001926c>
    transc->xfer_buf = pbuf;
 8004ad8:	97aa                	add	a5,a5,a0
 8004ada:	26c7aa23          	sw	a2,628(a5)
    transc->xfer_len = len;
 8004ade:	26d7ac23          	sw	a3,632(a5)
    transc->xfer_count = 0;
 8004ae2:	2607ae23          	sw	zero,636(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004ae6:	00454683          	lbu	a3,4(a0) # 40004 <__stack_size+0x3f004>
    usb_transc *transc = &udev->dev.transc_out[EP_ID(ep_addr)];
 8004aea:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004aec:	00e69463          	bne	a3,a4,8004af4 <usbd_ep_recev+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 8004af0:	28c7a223          	sw	a2,644(a5)
    }

    /* start the transfer */
    usb_transc_outxfer (udev, transc);
 8004af4:	fffff097          	auipc	ra,0xfffff
 8004af8:	612080e7          	jalr	1554(ra) # 8004106 <usb_transc_outxfer>

    return 0;
}
 8004afc:	40b2                	lw	ra,12(sp)
 8004afe:	4501                	li	a0,0
 8004b00:	0141                	addi	sp,sp,16
 8004b02:	8082                	ret

08004b04 <usbd_ep_send>:
    \param[out] none
    \retval     none
*/
uint32_t  usbd_ep_send (usb_core_driver *udev, uint8_t ep_addr, uint8_t *pbuf, uint16_t len)
{
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b04:	07f5f793          	andi	a5,a1,127
 8004b08:	45f1                	li	a1,28
 8004b0a:	02b787b3          	mul	a5,a5,a1
{
 8004b0e:	1141                	addi	sp,sp,-16
 8004b10:	c606                	sw	ra,12(sp)
    /* setup the transfer */
    transc->xfer_buf = pbuf;
    transc->xfer_len = len;
    transc->xfer_count = 0;

    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b12:	4705                	li	a4,1
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b14:	0c878593          	addi	a1,a5,200
    transc->xfer_buf = pbuf;
 8004b18:	97aa                	add	a5,a5,a0
 8004b1a:	0cc7a823          	sw	a2,208(a5)
    transc->xfer_len = len;
 8004b1e:	0cd7aa23          	sw	a3,212(a5)
    transc->xfer_count = 0;
 8004b22:	0c07ac23          	sw	zero,216(a5)
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b26:	00454683          	lbu	a3,4(a0)
    usb_transc *transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b2a:	95aa                	add	a1,a1,a0
    if (USB_USE_DMA == udev->bp.transfer_mode) {
 8004b2c:	00e69463          	bne	a3,a4,8004b34 <usbd_ep_send+0x30>
        transc->dma_addr = (uint32_t)pbuf;
 8004b30:	0ec7a023          	sw	a2,224(a5)
    }

    /* start the transfer */
    usb_transc_inxfer (udev, transc);
 8004b34:	fffff097          	auipc	ra,0xfffff
 8004b38:	4e8080e7          	jalr	1256(ra) # 800401c <usb_transc_inxfer>

    return 0;
}
 8004b3c:	40b2                	lw	ra,12(sp)
 8004b3e:	4501                	li	a0,0
 8004b40:	0141                	addi	sp,sp,16
 8004b42:	8082                	ret

08004b44 <usbd_ep_stall>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall (usb_core_driver *udev, uint8_t ep_addr)
{
 8004b44:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8004b46:	01859793          	slli	a5,a1,0x18
{
 8004b4a:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 8004b4c:	87e1                	srai	a5,a5,0x18
 8004b4e:	0207d563          	bgez	a5,8004b78 <usbd_ep_stall+0x34>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b52:	07f5f593          	andi	a1,a1,127
 8004b56:	47f1                	li	a5,28
 8004b58:	02f585b3          	mul	a1,a1,a5
 8004b5c:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 8004b60:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 1;
 8004b62:	4785                	li	a5,1
 8004b64:	00f58123          	sb	a5,2(a1)

    usb_transc_stall (udev, transc);
 8004b68:	fffff097          	auipc	ra,0xfffff
 8004b6c:	62a080e7          	jalr	1578(ra) # 8004192 <usb_transc_stall>

    return (0);
}
 8004b70:	40b2                	lw	ra,12(sp)
 8004b72:	4501                	li	a0,0
 8004b74:	0141                	addi	sp,sp,16
 8004b76:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8004b78:	47f1                	li	a5,28
 8004b7a:	02f585b3          	mul	a1,a1,a5
 8004b7e:	26c58593          	addi	a1,a1,620
 8004b82:	bff9                	j	8004b60 <usbd_ep_stall+0x1c>

08004b84 <usbd_ep_stall_clear>:
                    bit7: endpoint direction which can be IN(1) or OUT(0)
    \param[out] none
    \retval     none
*/
uint32_t usbd_ep_stall_clear (usb_core_driver *udev, uint8_t ep_addr)
{
 8004b84:	1141                	addi	sp,sp,-16
    usb_transc *transc = NULL;

    if (EP_DIR(ep_addr)) {
 8004b86:	01859793          	slli	a5,a1,0x18
{
 8004b8a:	c606                	sw	ra,12(sp)
    if (EP_DIR(ep_addr)) {
 8004b8c:	87e1                	srai	a5,a5,0x18
 8004b8e:	0207d463          	bgez	a5,8004bb6 <usbd_ep_stall_clear+0x32>
        transc = &udev->dev.transc_in[EP_ID(ep_addr)];
 8004b92:	07f5f593          	andi	a1,a1,127
 8004b96:	47f1                	li	a5,28
 8004b98:	02f585b3          	mul	a1,a1,a5
 8004b9c:	0c858593          	addi	a1,a1,200
    } else {
        transc = &udev->dev.transc_out[ep_addr];
 8004ba0:	95aa                	add	a1,a1,a0
    }

    transc->ep_stall = 0;
 8004ba2:	00058123          	sb	zero,2(a1)

    usb_transc_clrstall (udev, transc);
 8004ba6:	fffff097          	auipc	ra,0xfffff
 8004baa:	626080e7          	jalr	1574(ra) # 80041cc <usb_transc_clrstall>

    return (0);
}
 8004bae:	40b2                	lw	ra,12(sp)
 8004bb0:	4501                	li	a0,0
 8004bb2:	0141                	addi	sp,sp,16
 8004bb4:	8082                	ret
        transc = &udev->dev.transc_out[ep_addr];
 8004bb6:	47f1                	li	a5,28
 8004bb8:	02f585b3          	mul	a1,a1,a5
 8004bbc:	26c58593          	addi	a1,a1,620
 8004bc0:	b7c5                	j	8004ba0 <usbd_ep_stall_clear+0x1c>

08004bc2 <usbd_addr_set>:
    \param[out] none
    \retval     none
*/
void  usbd_addr_set (usb_core_driver *udev, uint8_t addr)
{
    usb_devaddr_set(udev, addr);
 8004bc2:	fffff317          	auipc	t1,0xfffff
 8004bc6:	3a830067          	jr	936(t1) # 8003f6a <usb_devaddr_set>

08004bca <_usb_std_reserved>:
static usb_reqsta _usb_std_reserved (usb_core_driver *udev, usb_req *req)
{
    /* no operation... */

    return REQ_NOTSUPP;
}
 8004bca:	4505                	li	a0,1
 8004bcc:	8082                	ret

08004bce <_usb_dev_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_dev_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.dev_desc[0];
 8004bce:	41452503          	lw	a0,1044(a0)
 8004bd2:	00054783          	lbu	a5,0(a0)
 8004bd6:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.dev_desc;
}
 8004bda:	8082                	ret

08004bdc <_usb_config_desc_get>:
    \param[out] len: data length pointer
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_config_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    *len = udev->dev.desc.config_desc[2];
 8004bdc:	41852503          	lw	a0,1048(a0)
 8004be0:	00254783          	lbu	a5,2(a0)
 8004be4:	00f61023          	sh	a5,0(a2)

    return udev->dev.desc.config_desc;
}
 8004be8:	8082                	ret

08004bea <_usb_str_desc_get>:
    \param[out] len: pointer to string length
    \retval     descriptor buffer pointer
*/
static uint8_t* _usb_str_desc_get (usb_core_driver *udev, uint8_t index, uint16_t *len)
{
    uint8_t *desc = udev->dev.desc.strings[index];
 8004bea:	42052783          	lw	a5,1056(a0)
 8004bee:	058a                	slli	a1,a1,0x2
 8004bf0:	97ae                	add	a5,a5,a1
 8004bf2:	4388                	lw	a0,0(a5)

    *len = desc[0];
 8004bf4:	00054783          	lbu	a5,0(a0)
 8004bf8:	00f61023          	sh	a5,0(a2)

    return desc;
}
 8004bfc:	8082                	ret

08004bfe <_usb_std_getdescriptor>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getdescriptor (usb_core_driver *udev, usb_req *req)
{
 8004bfe:	1141                	addi	sp,sp,-16
 8004c00:	c422                	sw	s0,8(sp)
 8004c02:	c226                	sw	s1,4(sp)
 8004c04:	c606                	sw	ra,12(sp)
 8004c06:	0005c783          	lbu	a5,0(a1)
 8004c0a:	842a                	mv	s0,a0
 8004c0c:	84ae                	mv	s1,a1
 8004c0e:	8b8d                	andi	a5,a5,3
    uint8_t desc_index = 0;

    usb_transc *transc = &udev->dev.transc_in[0];

    /* get device standard descriptor */
    switch (req->bmRequestType & USB_RECPTYPE_MASK) {
 8004c10:	cf8d                	beqz	a5,8004c4a <_usb_std_getdescriptor+0x4c>
 8004c12:	4705                	li	a4,1
 8004c14:	0ce78563          	beq	a5,a4,8004cde <_usb_std_getdescriptor+0xe0>

    default:
        break;
    }

    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 8004c18:	0dc42703          	lw	a4,220(s0)
        }

        return REQ_SUPP;
    }

    return REQ_NOTSUPP;
 8004c1c:	4505                	li	a0,1
    if ((0U != transc->remain_len) && (0U != req->wLength)) {
 8004c1e:	c761                	beqz	a4,8004ce6 <_usb_std_getdescriptor+0xe8>
 8004c20:	0074c783          	lbu	a5,7(s1)
 8004c24:	0064c683          	lbu	a3,6(s1)
 8004c28:	07a2                	slli	a5,a5,0x8
 8004c2a:	8fd5                	or	a5,a5,a3
 8004c2c:	cfcd                	beqz	a5,8004ce6 <_usb_std_getdescriptor+0xe8>
        if (transc->remain_len < req->wLength) {
 8004c2e:	0cf77163          	bgeu	a4,a5,8004cf0 <_usb_std_getdescriptor+0xf2>
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 8004c32:	0cc45783          	lhu	a5,204(s0)
        return REQ_SUPP;
 8004c36:	4501                	li	a0,0
            if ((transc->remain_len >= transc->max_len) && (0U == (transc->remain_len % transc->max_len))) {
 8004c38:	0af76763          	bltu	a4,a5,8004ce6 <_usb_std_getdescriptor+0xe8>
 8004c3c:	02f77533          	remu	a0,a4,a5
 8004c40:	e955                	bnez	a0,8004cf4 <_usb_std_getdescriptor+0xf6>
                udev->dev.control.ctl_zlp = 1;
 8004c42:	4785                	li	a5,1
 8004c44:	42f406a3          	sb	a5,1069(s0)
 8004c48:	a879                	j	8004ce6 <_usb_std_getdescriptor+0xe8>
        desc_type = BYTE_HIGH(req->wValue);
 8004c4a:	0025c783          	lbu	a5,2(a1)
 8004c4e:	0035c583          	lbu	a1,3(a1)
 8004c52:	4709                	li	a4,2
 8004c54:	05a2                	slli	a1,a1,0x8
 8004c56:	8ddd                	or	a1,a1,a5
 8004c58:	0085d793          	srli	a5,a1,0x8
        desc_index = BYTE_LOW(req->wValue);
 8004c5c:	0ff5f593          	andi	a1,a1,255
        switch (desc_type) {
 8004c60:	04e78c63          	beq	a5,a4,8004cb8 <_usb_std_getdescriptor+0xba>
 8004c64:	02f76b63          	bltu	a4,a5,8004c9a <_usb_std_getdescriptor+0x9c>
 8004c68:	4705                	li	a4,1
 8004c6a:	fae797e3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004c6e:	0dc50613          	addi	a2,a0,220
 8004c72:	00000097          	auipc	ra,0x0
 8004c76:	f5c080e7          	jalr	-164(ra) # 8004bce <_usb_dev_desc_get>
 8004c7a:	0ca42823          	sw	a0,208(s0)
            if (64U == req->wLength) {
 8004c7e:	0074c783          	lbu	a5,7(s1)
 8004c82:	0064c703          	lbu	a4,6(s1)
 8004c86:	07a2                	slli	a5,a5,0x8
 8004c88:	8fd9                	or	a5,a5,a4
 8004c8a:	04000713          	li	a4,64
 8004c8e:	f8e795e3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
                transc->remain_len = 8U;
 8004c92:	47a1                	li	a5,8
 8004c94:	0cf42e23          	sw	a5,220(s0)
 8004c98:	b741                	j	8004c18 <_usb_std_getdescriptor+0x1a>
 8004c9a:	470d                	li	a4,3
 8004c9c:	02e78763          	beq	a5,a4,8004cca <_usb_std_getdescriptor+0xcc>
 8004ca0:	473d                	li	a4,15
 8004ca2:	f6e79be3          	bne	a5,a4,8004c18 <_usb_std_getdescriptor+0x1a>
    *len = udev->dev.desc.bos_desc[2];
 8004ca6:	41c52783          	lw	a5,1052(a0)
 8004caa:	0027c703          	lbu	a4,2(a5)
            transc->xfer_buf = _usb_bos_desc_get(udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cae:	0cf52823          	sw	a5,208(a0)
    *len = udev->dev.desc.bos_desc[2];
 8004cb2:	0ce51e23          	sh	a4,220(a0)
            break;
 8004cb6:	b78d                	j	8004c18 <_usb_std_getdescriptor+0x1a>
            transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cb8:	0dc50613          	addi	a2,a0,220
 8004cbc:	00000097          	auipc	ra,0x0
 8004cc0:	f20080e7          	jalr	-224(ra) # 8004bdc <_usb_config_desc_get>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cc4:	0ca42823          	sw	a0,208(s0)
 8004cc8:	bf81                	j	8004c18 <_usb_std_getdescriptor+0x1a>
            if (desc_index < STR_IDX_MAX) {
 8004cca:	4795                	li	a5,5
 8004ccc:	f4b7e6e3          	bltu	a5,a1,8004c18 <_usb_std_getdescriptor+0x1a>
                transc->xfer_buf = std_desc_get[desc_type - 1U](udev, desc_index, (uint16_t *)&(transc->remain_len));
 8004cd0:	0dc50613          	addi	a2,a0,220
 8004cd4:	00000097          	auipc	ra,0x0
 8004cd8:	f16080e7          	jalr	-234(ra) # 8004bea <_usb_str_desc_get>
 8004cdc:	b7e5                	j	8004cc4 <_usb_std_getdescriptor+0xc6>
        return (usb_reqsta)(udev->dev.class_core->req_proc(udev, req));
 8004cde:	43052783          	lw	a5,1072(a0)
 8004ce2:	47dc                	lw	a5,12(a5)
 8004ce4:	9782                	jalr	a5
}
 8004ce6:	40b2                	lw	ra,12(sp)
 8004ce8:	4422                	lw	s0,8(sp)
 8004cea:	4492                	lw	s1,4(sp)
 8004cec:	0141                	addi	sp,sp,16
 8004cee:	8082                	ret
            transc->remain_len = req->wLength;
 8004cf0:	0cf42e23          	sw	a5,220(s0)
        return REQ_SUPP;
 8004cf4:	4501                	li	a0,0
 8004cf6:	bfc5                	j	8004ce6 <_usb_std_getdescriptor+0xe8>

08004cf8 <_usb_std_setconfiguration>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setconfiguration (usb_core_driver *udev, usb_req *req)
{
 8004cf8:	1141                	addi	sp,sp,-16
 8004cfa:	c04a                	sw	s2,0(sp)
 8004cfc:	c606                	sw	ra,12(sp)
 8004cfe:	c422                	sw	s0,8(sp)
 8004d00:	c226                	sw	s1,4(sp)
    static uint8_t config;

    config = (uint8_t)(req->wValue);
 8004d02:	0025c783          	lbu	a5,2(a1)
 8004d06:	20000937          	lui	s2,0x20000
 8004d0a:	52890913          	addi	s2,s2,1320 # 20000528 <config.4766>
 8004d0e:	00f90023          	sb	a5,0(s2)

    if (config <= USBD_CFG_MAX_NUM) {
 8004d12:	4685                	li	a3,1
 8004d14:	00f6ed63          	bltu	a3,a5,8004d2e <_usb_std_setconfiguration+0x36>
        switch (udev->dev.cur_status) {
 8004d18:	0c654703          	lbu	a4,198(a0)
 8004d1c:	4489                	li	s1,2
 8004d1e:	842a                	mv	s0,a0
 8004d20:	0ff77713          	andi	a4,a4,255
 8004d24:	00970763          	beq	a4,s1,8004d32 <_usb_std_setconfiguration+0x3a>
 8004d28:	460d                	li	a2,3
 8004d2a:	02c70963          	beq	a4,a2,8004d5c <_usb_std_setconfiguration+0x64>
        default:
            break;
        }
    }

    return REQ_NOTSUPP;
 8004d2e:	4485                	li	s1,1
 8004d30:	a839                	j	8004d4e <_usb_std_setconfiguration+0x56>
            return REQ_SUPP;
 8004d32:	4481                	li	s1,0
            if (config){
 8004d34:	cf89                	beqz	a5,8004d4e <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->init(udev, config);
 8004d36:	43052783          	lw	a5,1072(a0)
 8004d3a:	4585                	li	a1,1
 8004d3c:	43dc                	lw	a5,4(a5)
 8004d3e:	9782                	jalr	a5
                udev->dev.config = config;
 8004d40:	00094783          	lbu	a5,0(s2)
 8004d44:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_CONFIGURED;
 8004d48:	478d                	li	a5,3
 8004d4a:	0cf40323          	sb	a5,198(s0)
}
 8004d4e:	40b2                	lw	ra,12(sp)
 8004d50:	4422                	lw	s0,8(sp)
 8004d52:	8526                	mv	a0,s1
 8004d54:	4902                	lw	s2,0(sp)
 8004d56:	4492                	lw	s1,4(sp)
 8004d58:	0141                	addi	sp,sp,16
 8004d5a:	8082                	ret
            if (USB_DEFAULT_CONFIG == config) {
 8004d5c:	ef91                	bnez	a5,8004d78 <_usb_std_setconfiguration+0x80>
                udev->dev.class_core->deinit(udev, config);
 8004d5e:	43052783          	lw	a5,1072(a0)
 8004d62:	4581                	li	a1,0
 8004d64:	479c                	lw	a5,8(a5)
 8004d66:	9782                	jalr	a5
                udev->dev.config = config;
 8004d68:	00094783          	lbu	a5,0(s2)
                udev->dev.cur_status = USBD_ADDRESSED;
 8004d6c:	0c940323          	sb	s1,198(s0)
            return REQ_SUPP;
 8004d70:	4481                	li	s1,0
                udev->dev.config = config;
 8004d72:	0cf40223          	sb	a5,196(s0)
                udev->dev.cur_status = USBD_ADDRESSED;
 8004d76:	bfe1                	j	8004d4e <_usb_std_setconfiguration+0x56>
            } else if (config != udev->dev.config) {
 8004d78:	0c454783          	lbu	a5,196(a0)
            return REQ_SUPP;
 8004d7c:	4481                	li	s1,0
            } else if (config != udev->dev.config) {
 8004d7e:	fcd788e3          	beq	a5,a3,8004d4e <_usb_std_setconfiguration+0x56>
                udev->dev.class_core->deinit(udev, config);
 8004d82:	43052783          	lw	a5,1072(a0)
 8004d86:	4585                	li	a1,1
 8004d88:	479c                	lw	a5,8(a5)
 8004d8a:	9782                	jalr	a5
                udev->dev.config = config;
 8004d8c:	00094583          	lbu	a1,0(s2)
                udev->dev.class_core->init(udev, config);
 8004d90:	43042783          	lw	a5,1072(s0)
 8004d94:	8522                	mv	a0,s0
                udev->dev.config = config;
 8004d96:	0cb40223          	sb	a1,196(s0)
                udev->dev.class_core->init(udev, config);
 8004d9a:	43dc                	lw	a5,4(a5)
 8004d9c:	9782                	jalr	a5
 8004d9e:	bf45                	j	8004d4e <_usb_std_setconfiguration+0x56>

08004da0 <_usb_std_getstatus>:
    uint8_t recp = BYTE_LOW(req->wIndex);
 8004da0:	0055c683          	lbu	a3,5(a1)
 8004da4:	0045c703          	lbu	a4,4(a1)
 8004da8:	0005c603          	lbu	a2,0(a1)
 8004dac:	06a2                	slli	a3,a3,0x8
 8004dae:	8ed9                	or	a3,a3,a4
 8004db0:	8a0d                	andi	a2,a2,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8004db2:	4585                	li	a1,1
{
 8004db4:	87aa                	mv	a5,a0
    uint8_t recp = BYTE_LOW(req->wIndex);
 8004db6:	0ff6f713          	andi	a4,a3,255
    switch(req->bmRequestType & USB_RECPTYPE_MASK) {
 8004dba:	04b60363          	beq	a2,a1,8004e00 <_usb_std_getstatus+0x60>
 8004dbe:	c611                	beqz	a2,8004dca <_usb_std_getstatus+0x2a>
 8004dc0:	4589                	li	a1,2
 8004dc2:	06b60263          	beq	a2,a1,8004e26 <_usb_std_getstatus+0x86>
    return REQ_NOTSUPP;
 8004dc6:	4505                	li	a0,1
 8004dc8:	8082                	ret
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004dca:	0c654703          	lbu	a4,198(a0)
 8004dce:	4689                	li	a3,2
 8004dd0:	00e68863          	beq	a3,a4,8004de0 <_usb_std_getstatus+0x40>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8004dd4:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004dd8:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004dda:	4505                	li	a0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004ddc:	04e69463          	bne	a3,a4,8004e24 <_usb_std_getstatus+0x84>
                if (udev->dev.pm.dev_remote_wakeup) {
 8004de0:	4127c683          	lbu	a3,1042(a5)
                if (udev->dev.pm.power_mode) {
 8004de4:	4107c703          	lbu	a4,1040(a5)
                if (udev->dev.pm.dev_remote_wakeup) {
 8004de8:	c689                	beqz	a3,8004df2 <_usb_std_getstatus+0x52>
                if (udev->dev.pm.power_mode) {
 8004dea:	00e036b3          	snez	a3,a4
                    status[0] |= USB_STATUS_REMOTE_WAKEUP;
 8004dee:	0026e693          	ori	a3,a3,2
 8004df2:	20000737          	lui	a4,0x20000
 8004df6:	52c70713          	addi	a4,a4,1324 # 2000052c <status.4696>
 8004dfa:	00d70023          	sb	a3,0(a4)
 8004dfe:	a829                	j	8004e18 <_usb_std_getstatus+0x78>
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 8004e00:	0c654683          	lbu	a3,198(a0)
 8004e04:	460d                	li	a2,3
    return REQ_NOTSUPP;
 8004e06:	4505                	li	a0,1
            if ((USBD_CONFIGURED == udev->dev.cur_status) && (recp <= USBD_ITF_MAX_NUM)) {
 8004e08:	00d61e63          	bne	a2,a3,8004e24 <_usb_std_getstatus+0x84>
 8004e0c:	00e56c63          	bltu	a0,a4,8004e24 <_usb_std_getstatus+0x84>
                transc->xfer_buf = status;
 8004e10:	20000737          	lui	a4,0x20000
 8004e14:	52c70713          	addi	a4,a4,1324 # 2000052c <status.4696>
                transc->xfer_buf = status;
 8004e18:	0ce7a823          	sw	a4,208(a5)
                transc->remain_len = 2U;
 8004e1c:	4709                	li	a4,2
 8004e1e:	0ce7ae23          	sw	a4,220(a5)
                return REQ_SUPP;
 8004e22:	4501                	li	a0,0
}
 8004e24:	8082                	ret
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004e26:	0c654603          	lbu	a2,198(a0)
 8004e2a:	458d                	li	a1,3
    return REQ_NOTSUPP;
 8004e2c:	4505                	li	a0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004e2e:	fec59be3          	bne	a1,a2,8004e24 <_usb_std_getstatus+0x84>
                if (0x80U == (recp & 0x80U)) {
 8004e32:	06e2                	slli	a3,a3,0x18
 8004e34:	86e1                	srai	a3,a3,0x18
 8004e36:	0006db63          	bgez	a3,8004e4c <_usb_std_getstatus+0xac>
                    status[0] = udev->dev.transc_in[EP_ID(recp)].ep_stall;
 8004e3a:	46f1                	li	a3,28
 8004e3c:	07f77713          	andi	a4,a4,127
 8004e40:	02d70733          	mul	a4,a4,a3
 8004e44:	973e                	add	a4,a4,a5
 8004e46:	0ca74683          	lbu	a3,202(a4)
 8004e4a:	b765                	j	8004df2 <_usb_std_getstatus+0x52>
                    status[0] = udev->dev.transc_out[recp].ep_stall;
 8004e4c:	46f1                	li	a3,28
 8004e4e:	02d70733          	mul	a4,a4,a3
 8004e52:	973e                	add	a4,a4,a5
 8004e54:	26e74683          	lbu	a3,622(a4)
 8004e58:	bf69                	j	8004df2 <_usb_std_getstatus+0x52>

08004e5a <_usb_std_getconfiguration>:
    switch (udev->dev.cur_status) {
 8004e5a:	0c654703          	lbu	a4,198(a0)
 8004e5e:	4689                	li	a3,2
{
 8004e60:	87aa                	mv	a5,a0
    switch (udev->dev.cur_status) {
 8004e62:	0ff77713          	andi	a4,a4,255
 8004e66:	00d70763          	beq	a4,a3,8004e74 <_usb_std_getconfiguration+0x1a>
 8004e6a:	468d                	li	a3,3
 8004e6c:	02d70163          	beq	a4,a3,8004e8e <_usb_std_getconfiguration+0x34>
    return REQ_NOTSUPP;
 8004e70:	4505                	li	a0,1
}
 8004e72:	8082                	ret
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8004e74:	0c454703          	lbu	a4,196(a0)
    return REQ_NOTSUPP;
 8004e78:	4505                	li	a0,1
        if (USB_DEFAULT_CONFIG == udev->dev.config) {
 8004e7a:	ff65                	bnez	a4,8004e72 <_usb_std_getconfiguration+0x18>
            transc->xfer_buf = &(udev->dev.config);
 8004e7c:	0c478713          	addi	a4,a5,196
 8004e80:	0ce7a823          	sw	a4,208(a5)
            transc->remain_len = 1U;
 8004e84:	4705                	li	a4,1
 8004e86:	0ce7ae23          	sw	a4,220(a5)
            return REQ_SUPP;
 8004e8a:	4501                	li	a0,0
 8004e8c:	8082                	ret
        if (udev->dev.config != USB_DEFAULT_CONFIG) {
 8004e8e:	0c454703          	lbu	a4,196(a0)
 8004e92:	df79                	beqz	a4,8004e70 <_usb_std_getconfiguration+0x16>
 8004e94:	b7e5                	j	8004e7c <_usb_std_getconfiguration+0x22>

08004e96 <_usb_std_getinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_getinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8004e96:	0c654783          	lbu	a5,198(a0)
 8004e9a:	470d                	li	a4,3
 8004e9c:	02f71163          	bne	a4,a5,8004ebe <_usb_std_getinterface+0x28>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ea0:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8004ea4:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ea6:	00e7ea63          	bltu	a5,a4,8004eba <_usb_std_getinterface+0x24>
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8004eaa:	43052703          	lw	a4,1072(a0)
            transc->remain_len = 1U;
 8004eae:	0cf52e23          	sw	a5,220(a0)
            return REQ_SUPP;
 8004eb2:	4781                	li	a5,0
            transc->xfer_buf = &(udev->dev.class_core->alter_set);
 8004eb4:	0705                	addi	a4,a4,1
 8004eb6:	0ce52823          	sw	a4,208(a0)
}
 8004eba:	853e                	mv	a0,a5
 8004ebc:	8082                	ret
    return REQ_NOTSUPP;
 8004ebe:	4785                	li	a5,1
 8004ec0:	bfed                	j	8004eba <_usb_std_getinterface+0x24>

08004ec2 <_usb_std_setinterface>:
    \param[out] none
    \retval     USB device request status
*/
static usb_reqsta _usb_std_setinterface (usb_core_driver *udev, usb_req *req)
{
    switch (udev->dev.cur_status) {
 8004ec2:	0c654783          	lbu	a5,198(a0)
 8004ec6:	470d                	li	a4,3
 8004ec8:	02f71063          	bne	a4,a5,8004ee8 <_usb_std_setinterface+0x26>

    case USBD_ADDRESSED:
        break;

    case USBD_CONFIGURED:
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ecc:	0045c703          	lbu	a4,4(a1)

    default:
        break;
    }

    return REQ_NOTSUPP;
 8004ed0:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8004ed2:	00e7e963          	bltu	a5,a4,8004ee4 <_usb_std_setinterface+0x22>
            udev->dev.class_core->alter_set = req->wValue;
 8004ed6:	43052783          	lw	a5,1072(a0)
 8004eda:	0025c703          	lbu	a4,2(a1)
 8004ede:	00e780a3          	sb	a4,1(a5)
            return REQ_SUPP;
 8004ee2:	4781                	li	a5,0
}
 8004ee4:	853e                	mv	a0,a5
 8004ee6:	8082                	ret
    return REQ_NOTSUPP;
 8004ee8:	4785                	li	a5,1
 8004eea:	bfed                	j	8004ee4 <_usb_std_setinterface+0x22>

08004eec <_usb_std_setaddress>:
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 8004eec:	0055c703          	lbu	a4,5(a1)
 8004ef0:	0045c683          	lbu	a3,4(a1)
 8004ef4:	0722                	slli	a4,a4,0x8
 8004ef6:	8f55                	or	a4,a4,a3
 8004ef8:	cb01                	beqz	a4,8004f08 <_usb_std_setaddress+0x1c>
    return REQ_NOTSUPP;
 8004efa:	4505                	li	a0,1
}
 8004efc:	8082                	ret
    return REQ_NOTSUPP;
 8004efe:	4505                	li	a0,1
}
 8004f00:	40b2                	lw	ra,12(sp)
 8004f02:	4422                	lw	s0,8(sp)
 8004f04:	0141                	addi	sp,sp,16
 8004f06:	8082                	ret
    if ((0U == req->wIndex) && (0U == req->wLength)) {
 8004f08:	0075c703          	lbu	a4,7(a1)
 8004f0c:	0065c683          	lbu	a3,6(a1)
 8004f10:	0722                	slli	a4,a4,0x8
 8004f12:	8f55                	or	a4,a4,a3
 8004f14:	f37d                	bnez	a4,8004efa <_usb_std_setaddress+0xe>
{
 8004f16:	1141                	addi	sp,sp,-16
 8004f18:	c422                	sw	s0,8(sp)
 8004f1a:	c606                	sw	ra,12(sp)
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f1c:	0025c583          	lbu	a1,2(a1)
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 8004f20:	0c654703          	lbu	a4,198(a0)
 8004f24:	468d                	li	a3,3
        udev->dev.dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f26:	07f5f593          	andi	a1,a1,127
 8004f2a:	0cb502a3          	sb	a1,197(a0)
 8004f2e:	842a                	mv	s0,a0
        if (udev->dev.cur_status != USBD_CONFIGURED) {
 8004f30:	fce687e3          	beq	a3,a4,8004efe <_usb_std_setaddress+0x12>
            usbd_addr_set (udev, udev->dev.dev_addr);
 8004f34:	00000097          	auipc	ra,0x0
 8004f38:	c8e080e7          	jalr	-882(ra) # 8004bc2 <usbd_addr_set>
            if (udev->dev.dev_addr) {
 8004f3c:	0c544783          	lbu	a5,197(s0)
 8004f40:	c791                	beqz	a5,8004f4c <_usb_std_setaddress+0x60>
                udev->dev.cur_status = USBD_ADDRESSED;
 8004f42:	4789                	li	a5,2
                udev->dev.cur_status = USBD_DEFAULT;
 8004f44:	0cf40323          	sb	a5,198(s0)
            return REQ_SUPP;
 8004f48:	4501                	li	a0,0
 8004f4a:	bf5d                	j	8004f00 <_usb_std_setaddress+0x14>
                udev->dev.cur_status = USBD_DEFAULT;
 8004f4c:	4785                	li	a5,1
 8004f4e:	bfdd                	j	8004f44 <_usb_std_setaddress+0x58>

08004f50 <_usb_std_setfeature>:
{
 8004f50:	1141                	addi	sp,sp,-16
 8004f52:	c606                	sw	ra,12(sp)
 8004f54:	c422                	sw	s0,8(sp)
 8004f56:	0005c783          	lbu	a5,0(a1)
 8004f5a:	872a                	mv	a4,a0
 8004f5c:	8b8d                	andi	a5,a5,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004f5e:	cf8d                	beqz	a5,8004f98 <_usb_std_setfeature+0x48>
 8004f60:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8004f62:	4405                	li	s0,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004f64:	06d79163          	bne	a5,a3,8004fc6 <_usb_std_setfeature+0x76>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004f68:	0c654783          	lbu	a5,198(a0)
 8004f6c:	470d                	li	a4,3
    return REQ_NOTSUPP;
 8004f6e:	4405                	li	s0,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004f70:	04f71b63          	bne	a4,a5,8004fc6 <_usb_std_setfeature+0x76>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f74:	0035c783          	lbu	a5,3(a1)
 8004f78:	0025c703          	lbu	a4,2(a1)
                return REQ_SUPP;
 8004f7c:	4401                	li	s0,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f7e:	07a2                	slli	a5,a5,0x8
 8004f80:	8fd9                	or	a5,a5,a4
 8004f82:	e3b1                	bnez	a5,8004fc6 <_usb_std_setfeature+0x76>
            ep = BYTE_LOW(req->wIndex);
 8004f84:	0045c583          	lbu	a1,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004f88:	07f5f793          	andi	a5,a1,127
 8004f8c:	cf8d                	beqz	a5,8004fc6 <_usb_std_setfeature+0x76>
                    usbd_ep_stall (udev, ep);
 8004f8e:	00000097          	auipc	ra,0x0
 8004f92:	bb6080e7          	jalr	-1098(ra) # 8004b44 <usbd_ep_stall>
 8004f96:	a805                	j	8004fc6 <_usb_std_setfeature+0x76>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004f98:	0c654783          	lbu	a5,198(a0)
 8004f9c:	4689                	li	a3,2
 8004f9e:	00f68863          	beq	a3,a5,8004fae <_usb_std_setfeature+0x5e>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8004fa2:	0c654783          	lbu	a5,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004fa6:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004fa8:	4405                	li	s0,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 8004faa:	00f69e63          	bne	a3,a5,8004fc6 <_usb_std_setfeature+0x76>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8004fae:	0035c783          	lbu	a5,3(a1)
 8004fb2:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8004fb6:	4401                	li	s0,0
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8004fb8:	07a2                	slli	a5,a5,0x8
 8004fba:	8fd5                	or	a5,a5,a3
 8004fbc:	4685                	li	a3,1
 8004fbe:	00d79463          	bne	a5,a3,8004fc6 <_usb_std_setfeature+0x76>
                    udev->dev.pm.dev_remote_wakeup = 1U;
 8004fc2:	40f70923          	sb	a5,1042(a4)
}
 8004fc6:	8522                	mv	a0,s0
 8004fc8:	40b2                	lw	ra,12(sp)
 8004fca:	4422                	lw	s0,8(sp)
 8004fcc:	0141                	addi	sp,sp,16
 8004fce:	8082                	ret

08004fd0 <_usb_std_clearfeature>:
{
 8004fd0:	1141                	addi	sp,sp,-16
 8004fd2:	c226                	sw	s1,4(sp)
 8004fd4:	c606                	sw	ra,12(sp)
 8004fd6:	c422                	sw	s0,8(sp)
 8004fd8:	c04a                	sw	s2,0(sp)
 8004fda:	0005c703          	lbu	a4,0(a1)
 8004fde:	84aa                	mv	s1,a0
 8004fe0:	8b0d                	andi	a4,a4,3
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004fe2:	c729                	beqz	a4,800502c <_usb_std_clearfeature+0x5c>
 8004fe4:	4689                	li	a3,2
    return REQ_NOTSUPP;
 8004fe6:	4905                	li	s2,1
    switch(req->bmRequestType & USB_RECPTYPE_MASK)
 8004fe8:	06d71963          	bne	a4,a3,800505a <_usb_std_clearfeature+0x8a>
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004fec:	0c654703          	lbu	a4,198(a0)
 8004ff0:	468d                	li	a3,3
    return REQ_NOTSUPP;
 8004ff2:	4905                	li	s2,1
            if (USBD_CONFIGURED == udev->dev.cur_status) {
 8004ff4:	06e69363          	bne	a3,a4,800505a <_usb_std_clearfeature+0x8a>
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8004ff8:	0035c703          	lbu	a4,3(a1)
 8004ffc:	0025c683          	lbu	a3,2(a1)
                return REQ_SUPP;
 8005000:	4901                	li	s2,0
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 8005002:	0722                	slli	a4,a4,0x8
 8005004:	8f55                	or	a4,a4,a3
 8005006:	eb31                	bnez	a4,800505a <_usb_std_clearfeature+0x8a>
            ep = BYTE_LOW(req->wIndex);
 8005008:	0045c703          	lbu	a4,4(a1)
                if ((USB_FEATURE_EP_HALT == req->wValue) && (!CTL_EP(ep))) {
 800500c:	07f77693          	andi	a3,a4,127
 8005010:	c6a9                	beqz	a3,800505a <_usb_std_clearfeature+0x8a>
 8005012:	842e                	mv	s0,a1
                    usbd_ep_stall_clear (udev, ep);
 8005014:	85ba                	mv	a1,a4
 8005016:	00000097          	auipc	ra,0x0
 800501a:	b6e080e7          	jalr	-1170(ra) # 8004b84 <usbd_ep_stall_clear>
                    udev->dev.class_core->req_proc (udev, req);
 800501e:	4304a783          	lw	a5,1072(s1)
 8005022:	85a2                	mv	a1,s0
 8005024:	8526                	mv	a0,s1
 8005026:	47dc                	lw	a5,12(a5)
 8005028:	9782                	jalr	a5
 800502a:	a805                	j	800505a <_usb_std_clearfeature+0x8a>
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800502c:	0c654703          	lbu	a4,198(a0)
 8005030:	4689                	li	a3,2
 8005032:	00e68863          	beq	a3,a4,8005042 <_usb_std_clearfeature+0x72>
                (USBD_CONFIGURED == udev->dev.cur_status)) {
 8005036:	0c654703          	lbu	a4,198(a0)
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800503a:	468d                	li	a3,3
    return REQ_NOTSUPP;
 800503c:	4905                	li	s2,1
            if ((USBD_ADDRESSED == udev->dev.cur_status) || \
 800503e:	00e69e63          	bne	a3,a4,800505a <_usb_std_clearfeature+0x8a>
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 8005042:	0035c703          	lbu	a4,3(a1)
 8005046:	0025c683          	lbu	a3,2(a1)
    return REQ_NOTSUPP;
 800504a:	4905                	li	s2,1
                if (USB_FEATURE_REMOTE_WAKEUP == req->wValue) {
 800504c:	0722                	slli	a4,a4,0x8
 800504e:	8f55                	or	a4,a4,a3
 8005050:	01271563          	bne	a4,s2,800505a <_usb_std_clearfeature+0x8a>
                    udev->dev.pm.dev_remote_wakeup = 0U;
 8005054:	40048923          	sb	zero,1042(s1)
                    return REQ_SUPP;
 8005058:	4901                	li	s2,0
}
 800505a:	40b2                	lw	ra,12(sp)
 800505c:	4422                	lw	s0,8(sp)
 800505e:	854a                	mv	a0,s2
 8005060:	4492                	lw	s1,4(sp)
 8005062:	4902                	lw	s2,0(sp)
 8005064:	0141                	addi	sp,sp,16
 8005066:	8082                	ret

08005068 <_usb_std_setdescriptor>:
 8005068:	4501                	li	a0,0
 800506a:	8082                	ret

0800506c <_usb_std_synchframe>:
 800506c:	4501                	li	a0,0
 800506e:	8082                	ret

08005070 <usbd_standard_request>:
    return (*_std_dev_req[req->bRequest])(udev, req);
 8005070:	0015c783          	lbu	a5,1(a1)
 8005074:	00279713          	slli	a4,a5,0x2
 8005078:	080007b7          	lui	a5,0x8000
 800507c:	39078793          	addi	a5,a5,912 # 8000390 <_std_dev_req>
 8005080:	97ba                	add	a5,a5,a4
 8005082:	0007a303          	lw	t1,0(a5)
 8005086:	8302                	jr	t1

08005088 <usbd_class_request>:
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005088:	0c654683          	lbu	a3,198(a0)
 800508c:	460d                	li	a2,3
    return REQ_NOTSUPP;
 800508e:	4785                	li	a5,1
    if (USBD_CONFIGURED == udev->dev.cur_status) {
 8005090:	02d61063          	bne	a2,a3,80050b0 <usbd_class_request+0x28>
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 8005094:	0045c683          	lbu	a3,4(a1)
    return REQ_NOTSUPP;
 8005098:	4785                	li	a5,1
        if (BYTE_LOW(req->wIndex) <= USBD_ITF_MAX_NUM) {
 800509a:	00d7eb63          	bltu	a5,a3,80050b0 <usbd_class_request+0x28>
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 800509e:	43052783          	lw	a5,1072(a0)
{
 80050a2:	1141                	addi	sp,sp,-16
 80050a4:	c606                	sw	ra,12(sp)
            return (usb_reqsta)udev->dev.class_core->req_proc(udev, req);
 80050a6:	47dc                	lw	a5,12(a5)
 80050a8:	9782                	jalr	a5
}
 80050aa:	40b2                	lw	ra,12(sp)
 80050ac:	0141                	addi	sp,sp,16
 80050ae:	8082                	ret
 80050b0:	853e                	mv	a0,a5
 80050b2:	8082                	ret

080050b4 <usbd_vendor_request>:
}
 80050b4:	4501                	li	a0,0
 80050b6:	8082                	ret

080050b8 <usbd_enum_error>:
    \param[in]  req: pointer to USB device request
    \param[out] none
    \retval     none
*/
void usbd_enum_error (usb_core_driver *udev, usb_req *req)
{
 80050b8:	1141                	addi	sp,sp,-16
    usbd_ep_stall (udev, 0x80);
 80050ba:	08000593          	li	a1,128
{
 80050be:	c606                	sw	ra,12(sp)
 80050c0:	c422                	sw	s0,8(sp)
 80050c2:	842a                	mv	s0,a0
    usbd_ep_stall (udev, 0x80);
 80050c4:	00000097          	auipc	ra,0x0
 80050c8:	a80080e7          	jalr	-1408(ra) # 8004b44 <usbd_ep_stall>
    usbd_ep_stall (udev, 0x00);
 80050cc:	8522                	mv	a0,s0
 80050ce:	4581                	li	a1,0
 80050d0:	00000097          	auipc	ra,0x0
 80050d4:	a74080e7          	jalr	-1420(ra) # 8004b44 <usbd_ep_stall>

    usb_ctlep_startout(udev);
 80050d8:	8522                	mv	a0,s0
}
 80050da:	4422                	lw	s0,8(sp)
 80050dc:	40b2                	lw	ra,12(sp)
 80050de:	0141                	addi	sp,sp,16
    usb_ctlep_startout(udev);
 80050e0:	fffff317          	auipc	t1,0xfffff
 80050e4:	18230067          	jr	386(t1) # 8004262 <usb_ctlep_startout>

080050e8 <usbd_ctl_send>:
*/
usbd_status usbd_ctl_send (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_in[0];

    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050e8:	0dc55683          	lhu	a3,220(a0)
 80050ec:	0d052603          	lw	a2,208(a0)
{
 80050f0:	1141                	addi	sp,sp,-16
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050f2:	4581                	li	a1,0
{
 80050f4:	c422                	sw	s0,8(sp)
 80050f6:	c606                	sw	ra,12(sp)
 80050f8:	842a                	mv	s0,a0
    usbd_ep_send(udev, 0U, transc->xfer_buf, transc->remain_len);
 80050fa:	00000097          	auipc	ra,0x0
 80050fe:	a0a080e7          	jalr	-1526(ra) # 8004b04 <usbd_ep_send>

    if (transc->remain_len > transc->max_len) {
 8005102:	0cc45703          	lhu	a4,204(s0)
 8005106:	0dc42683          	lw	a3,220(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_IN;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_IN;
 800510a:	4789                	li	a5,2
    if (transc->remain_len > transc->max_len) {
 800510c:	00d77363          	bgeu	a4,a3,8005112 <usbd_ctl_send+0x2a>
 8005110:	4785                	li	a5,1
 8005112:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 8005116:	40b2                	lw	ra,12(sp)
 8005118:	4422                	lw	s0,8(sp)
 800511a:	4501                	li	a0,0
 800511c:	0141                	addi	sp,sp,16
 800511e:	8082                	ret

08005120 <usbd_ctl_recev>:
*/
usbd_status  usbd_ctl_recev (usb_core_driver *udev)
{
    usb_transc *transc = &udev->dev.transc_out[0];

    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005120:	28055683          	lhu	a3,640(a0)
 8005124:	27452603          	lw	a2,628(a0)
{
 8005128:	1141                	addi	sp,sp,-16
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 800512a:	4581                	li	a1,0
{
 800512c:	c422                	sw	s0,8(sp)
 800512e:	c606                	sw	ra,12(sp)
 8005130:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0U, transc->xfer_buf, transc->remain_len);
 8005132:	00000097          	auipc	ra,0x0
 8005136:	992080e7          	jalr	-1646(ra) # 8004ac4 <usbd_ep_recev>

    if (transc->remain_len > transc->max_len) {
 800513a:	27045703          	lhu	a4,624(s0)
 800513e:	28042683          	lw	a3,640(s0)
        udev->dev.control.ctl_state = USB_CTL_DATA_OUT;
    } else {
        udev->dev.control.ctl_state = USB_CTL_LAST_DATA_OUT;
 8005142:	4791                	li	a5,4
    if (transc->remain_len > transc->max_len) {
 8005144:	00d77363          	bgeu	a4,a3,800514a <usbd_ctl_recev+0x2a>
 8005148:	478d                	li	a5,3
 800514a:	42f40623          	sb	a5,1068(s0)
    }

    return USBD_OK;
}
 800514e:	40b2                	lw	ra,12(sp)
 8005150:	4422                	lw	s0,8(sp)
 8005152:	4501                	li	a0,0
 8005154:	0141                	addi	sp,sp,16
 8005156:	8082                	ret

08005158 <usbd_ctl_status_send>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status  usbd_ctl_status_send (usb_core_driver *udev)
{
 8005158:	1141                	addi	sp,sp,-16
 800515a:	c606                	sw	ra,12(sp)
 800515c:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_IN;
 800515e:	4795                	li	a5,5
 8005160:	42f50623          	sb	a5,1068(a0)

    usbd_ep_send (udev, 0U, NULL, 0U);
 8005164:	4681                	li	a3,0
 8005166:	4601                	li	a2,0
 8005168:	4581                	li	a1,0
{
 800516a:	842a                	mv	s0,a0
    usbd_ep_send (udev, 0U, NULL, 0U);
 800516c:	00000097          	auipc	ra,0x0
 8005170:	998080e7          	jalr	-1640(ra) # 8004b04 <usbd_ep_send>

    usb_ctlep_startout(udev);
 8005174:	8522                	mv	a0,s0
 8005176:	fffff097          	auipc	ra,0xfffff
 800517a:	0ec080e7          	jalr	236(ra) # 8004262 <usb_ctlep_startout>

    return USBD_OK;
}
 800517e:	40b2                	lw	ra,12(sp)
 8005180:	4422                	lw	s0,8(sp)
 8005182:	4501                	li	a0,0
 8005184:	0141                	addi	sp,sp,16
 8005186:	8082                	ret

08005188 <usbd_ctl_status_recev>:
    \param[in]  udev: pointer to USB device instance
    \param[out] none
    \retval     USB device operation cur_status
*/
usbd_status usbd_ctl_status_recev (usb_core_driver *udev)
{
 8005188:	1141                	addi	sp,sp,-16
 800518a:	c606                	sw	ra,12(sp)
 800518c:	c422                	sw	s0,8(sp)
    udev->dev.control.ctl_state = USB_CTL_STATUS_OUT;
 800518e:	4799                	li	a5,6
 8005190:	42f50623          	sb	a5,1068(a0)

    usbd_ep_recev (udev, 0, NULL, 0);
 8005194:	4681                	li	a3,0
 8005196:	4601                	li	a2,0
 8005198:	4581                	li	a1,0
{
 800519a:	842a                	mv	s0,a0
    usbd_ep_recev (udev, 0, NULL, 0);
 800519c:	00000097          	auipc	ra,0x0
 80051a0:	928080e7          	jalr	-1752(ra) # 8004ac4 <usbd_ep_recev>

    usb_ctlep_startout(udev);
 80051a4:	8522                	mv	a0,s0
 80051a6:	fffff097          	auipc	ra,0xfffff
 80051aa:	0bc080e7          	jalr	188(ra) # 8004262 <usb_ctlep_startout>

    return USBD_OK;
}
 80051ae:	40b2                	lw	ra,12(sp)
 80051b0:	4422                	lw	s0,8(sp)
 80051b2:	4501                	li	a0,0
 80051b4:	0141                	addi	sp,sp,16
 80051b6:	8082                	ret

080051b8 <usbd_setup_transc>:
*/
uint8_t usbd_setup_transc (usb_core_driver *udev)
{
    usb_reqsta reqstat = REQ_NOTSUPP;

    usb_req req = udev->dev.control.req;
 80051b8:	42452783          	lw	a5,1060(a0)
 80051bc:	42852703          	lw	a4,1064(a0)
{
 80051c0:	1101                	addi	sp,sp,-32
 80051c2:	cc22                	sw	s0,24(sp)
    usb_req req = udev->dev.control.req;
 80051c4:	c43e                	sw	a5,8(sp)
 80051c6:	c63a                	sw	a4,12(sp)
{
 80051c8:	ce06                	sw	ra,28(sp)
 80051ca:	0607f793          	andi	a5,a5,96

    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 80051ce:	02000713          	li	a4,32
{
 80051d2:	842a                	mv	s0,a0
    switch (req.bmRequestType & USB_REQTYPE_MASK) {
 80051d4:	02e78a63          	beq	a5,a4,8005208 <usbd_setup_transc+0x50>
 80051d8:	04000713          	li	a4,64
 80051dc:	02e78c63          	beq	a5,a4,8005214 <usbd_setup_transc+0x5c>
 80051e0:	efb9                	bnez	a5,800523e <usbd_setup_transc+0x86>
    /* standard device request */
    case USB_REQTYPE_STRD:
        reqstat = usbd_standard_request (udev, &req);
 80051e2:	002c                	addi	a1,sp,8
 80051e4:	00000097          	auipc	ra,0x0
 80051e8:	e8c080e7          	jalr	-372(ra) # 8005070 <usbd_standard_request>

    default:
        break;
    }

    if (REQ_SUPP == reqstat) {
 80051ec:	e929                	bnez	a0,800523e <usbd_setup_transc+0x86>
        if (req.wLength == 0) {
 80051ee:	00e15783          	lhu	a5,14(sp)
 80051f2:	e79d                	bnez	a5,8005220 <usbd_setup_transc+0x68>
            usbd_ctl_status_send (udev);
 80051f4:	8522                	mv	a0,s0
 80051f6:	00000097          	auipc	ra,0x0
 80051fa:	f62080e7          	jalr	-158(ra) # 8005158 <usbd_ctl_status_send>
    } else {
        usbd_enum_error (udev, &req);
    }

    return USBD_OK;
}
 80051fe:	40f2                	lw	ra,28(sp)
 8005200:	4462                	lw	s0,24(sp)
 8005202:	4501                	li	a0,0
 8005204:	6105                	addi	sp,sp,32
 8005206:	8082                	ret
        reqstat = usbd_class_request (udev, &req);
 8005208:	002c                	addi	a1,sp,8
 800520a:	00000097          	auipc	ra,0x0
 800520e:	e7e080e7          	jalr	-386(ra) # 8005088 <usbd_class_request>
        break;
 8005212:	bfe9                	j	80051ec <usbd_setup_transc+0x34>
        reqstat = usbd_vendor_request (udev, &req);
 8005214:	002c                	addi	a1,sp,8
 8005216:	00000097          	auipc	ra,0x0
 800521a:	e9e080e7          	jalr	-354(ra) # 80050b4 <usbd_vendor_request>
        break;
 800521e:	b7f9                	j	80051ec <usbd_setup_transc+0x34>
            if (req.bmRequestType & 0x80) {
 8005220:	00810783          	lb	a5,8(sp)
                usbd_ctl_send (udev);
 8005224:	8522                	mv	a0,s0
            if (req.bmRequestType & 0x80) {
 8005226:	0007d763          	bgez	a5,8005234 <usbd_setup_transc+0x7c>
                usbd_ctl_send (udev);
 800522a:	00000097          	auipc	ra,0x0
 800522e:	ebe080e7          	jalr	-322(ra) # 80050e8 <usbd_ctl_send>
 8005232:	b7f1                	j	80051fe <usbd_setup_transc+0x46>
                usbd_ctl_recev (udev);
 8005234:	00000097          	auipc	ra,0x0
 8005238:	eec080e7          	jalr	-276(ra) # 8005120 <usbd_ctl_recev>
 800523c:	b7c9                	j	80051fe <usbd_setup_transc+0x46>
        usbd_enum_error (udev, &req);
 800523e:	002c                	addi	a1,sp,8
 8005240:	8522                	mv	a0,s0
 8005242:	00000097          	auipc	ra,0x0
 8005246:	e76080e7          	jalr	-394(ra) # 80050b8 <usbd_enum_error>
 800524a:	bf55                	j	80051fe <usbd_setup_transc+0x46>

0800524c <usbd_out_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_out_transc (usb_core_driver *udev, uint8_t ep_num)
{
 800524c:	7179                	addi	sp,sp,-48
 800524e:	d606                	sw	ra,44(sp)
 8005250:	d422                	sw	s0,40(sp)
 8005252:	1800                	addi	s0,sp,48
 8005254:	fca42e23          	sw	a0,-36(s0)
 8005258:	87ae                	mv	a5,a1
 800525a:	fcf40da3          	sb	a5,-37(s0)
    if (ep_num == 0) {
 800525e:	fdb44783          	lbu	a5,-37(s0)
 8005262:	ebc1                	bnez	a5,80052f2 <usbd_out_transc+0xa6>
        usb_transc *transc = &udev->dev.transc_out[0];
 8005264:	fdc42783          	lw	a5,-36(s0)
 8005268:	26c78793          	addi	a5,a5,620
 800526c:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005270:	fdc42783          	lw	a5,-36(s0)
 8005274:	42c7c783          	lbu	a5,1068(a5)
 8005278:	470d                	li	a4,3
 800527a:	00e78663          	beq	a5,a4,8005286 <usbd_out_transc+0x3a>
 800527e:	4711                	li	a4,4
 8005280:	02e78663          	beq	a5,a4,80052ac <usbd_out_transc+0x60>

            usbd_ctl_status_send (udev);
            break;

        default:
            break;
 8005284:	a04d                	j	8005326 <usbd_out_transc+0xda>
            transc->remain_len -= transc->max_len;
 8005286:	fec42783          	lw	a5,-20(s0)
 800528a:	4bdc                	lw	a5,20(a5)
 800528c:	fec42703          	lw	a4,-20(s0)
 8005290:	00475703          	lhu	a4,4(a4)
 8005294:	40e78733          	sub	a4,a5,a4
 8005298:	fec42783          	lw	a5,-20(s0)
 800529c:	cbd8                	sw	a4,20(a5)
            usbd_ctl_recev (udev);
 800529e:	fdc42503          	lw	a0,-36(s0)
 80052a2:	00000097          	auipc	ra,0x0
 80052a6:	e7e080e7          	jalr	-386(ra) # 8005120 <usbd_ctl_recev>
            break;
 80052aa:	a8b5                	j	8005326 <usbd_out_transc+0xda>
            if (udev->dev.cur_status == USBD_CONFIGURED) {
 80052ac:	fdc42783          	lw	a5,-36(s0)
 80052b0:	0c67c783          	lbu	a5,198(a5)
 80052b4:	0ff7f713          	andi	a4,a5,255
 80052b8:	478d                	li	a5,3
 80052ba:	02f71163          	bne	a4,a5,80052dc <usbd_out_transc+0x90>
                if (udev->dev.class_core->data_out != NULL) {
 80052be:	fdc42783          	lw	a5,-36(s0)
 80052c2:	4307a783          	lw	a5,1072(a5)
 80052c6:	4bdc                	lw	a5,20(a5)
 80052c8:	cb91                	beqz	a5,80052dc <usbd_out_transc+0x90>
                    udev->dev.class_core->data_out (udev, 0U);
 80052ca:	fdc42783          	lw	a5,-36(s0)
 80052ce:	4307a783          	lw	a5,1072(a5)
 80052d2:	4bdc                	lw	a5,20(a5)
 80052d4:	4581                	li	a1,0
 80052d6:	fdc42503          	lw	a0,-36(s0)
 80052da:	9782                	jalr	a5
            transc->remain_len = 0U;
 80052dc:	fec42783          	lw	a5,-20(s0)
 80052e0:	0007aa23          	sw	zero,20(a5)
            usbd_ctl_status_send (udev);
 80052e4:	fdc42503          	lw	a0,-36(s0)
 80052e8:	00000097          	auipc	ra,0x0
 80052ec:	e70080e7          	jalr	-400(ra) # 8005158 <usbd_ctl_status_send>
            break;
 80052f0:	a81d                	j	8005326 <usbd_out_transc+0xda>
        }
    } else if ((udev->dev.class_core->data_out != NULL) && (udev->dev.cur_status == USBD_CONFIGURED)) {
 80052f2:	fdc42783          	lw	a5,-36(s0)
 80052f6:	4307a783          	lw	a5,1072(a5)
 80052fa:	4bdc                	lw	a5,20(a5)
 80052fc:	c78d                	beqz	a5,8005326 <usbd_out_transc+0xda>
 80052fe:	fdc42783          	lw	a5,-36(s0)
 8005302:	0c67c783          	lbu	a5,198(a5)
 8005306:	0ff7f713          	andi	a4,a5,255
 800530a:	478d                	li	a5,3
 800530c:	00f71d63          	bne	a4,a5,8005326 <usbd_out_transc+0xda>
        udev->dev.class_core->data_out (udev, ep_num);
 8005310:	fdc42783          	lw	a5,-36(s0)
 8005314:	4307a783          	lw	a5,1072(a5)
 8005318:	4bd8                	lw	a4,20(a5)
 800531a:	fdb44783          	lbu	a5,-37(s0)
 800531e:	85be                	mv	a1,a5
 8005320:	fdc42503          	lw	a0,-36(s0)
 8005324:	9702                	jalr	a4
    }

    return USBD_OK;
 8005326:	4781                	li	a5,0
}
 8005328:	853e                	mv	a0,a5
 800532a:	50b2                	lw	ra,44(sp)
 800532c:	5422                	lw	s0,40(sp)
 800532e:	6145                	addi	sp,sp,48
 8005330:	8082                	ret

08005332 <usbd_in_transc>:
    \param[in]  ep_num: endpoint identifier(0..7)
    \param[out] none
    \retval     USB device operation cur_status
*/
uint8_t usbd_in_transc (usb_core_driver *udev, uint8_t ep_num)
{
 8005332:	7179                	addi	sp,sp,-48
 8005334:	d606                	sw	ra,44(sp)
 8005336:	d422                	sw	s0,40(sp)
 8005338:	1800                	addi	s0,sp,48
 800533a:	fca42e23          	sw	a0,-36(s0)
 800533e:	87ae                	mv	a5,a1
 8005340:	fcf40da3          	sb	a5,-37(s0)
    if (0U == ep_num) {
 8005344:	fdb44783          	lbu	a5,-37(s0)
 8005348:	ebdd                	bnez	a5,80053fe <usbd_in_transc+0xcc>
        usb_transc *transc = &udev->dev.transc_in[0];
 800534a:	fdc42783          	lw	a5,-36(s0)
 800534e:	0c878793          	addi	a5,a5,200
 8005352:	fef42623          	sw	a5,-20(s0)

        switch (udev->dev.control.ctl_state) {
 8005356:	fdc42783          	lw	a5,-36(s0)
 800535a:	42c7c783          	lbu	a5,1068(a5)
 800535e:	4705                	li	a4,1
 8005360:	00e78663          	beq	a5,a4,800536c <usbd_in_transc+0x3a>
 8005364:	4709                	li	a4,2
 8005366:	02e78663          	beq	a5,a4,8005392 <usbd_in_transc+0x60>
                usbd_ctl_status_recev (udev);
            }
            break;

        default:
            break;
 800536a:	a0e1                	j	8005432 <usbd_in_transc+0x100>
            transc->remain_len -= transc->max_len;
 800536c:	fec42783          	lw	a5,-20(s0)
 8005370:	4bdc                	lw	a5,20(a5)
 8005372:	fec42703          	lw	a4,-20(s0)
 8005376:	00475703          	lhu	a4,4(a4)
 800537a:	40e78733          	sub	a4,a5,a4
 800537e:	fec42783          	lw	a5,-20(s0)
 8005382:	cbd8                	sw	a4,20(a5)
            usbd_ctl_send (udev);
 8005384:	fdc42503          	lw	a0,-36(s0)
 8005388:	00000097          	auipc	ra,0x0
 800538c:	d60080e7          	jalr	-672(ra) # 80050e8 <usbd_ctl_send>
            break;
 8005390:	a04d                	j	8005432 <usbd_in_transc+0x100>
            if (udev->dev.control.ctl_zlp) {
 8005392:	fdc42783          	lw	a5,-36(s0)
 8005396:	42d7c783          	lbu	a5,1069(a5)
 800539a:	cf99                	beqz	a5,80053b8 <usbd_in_transc+0x86>
                usbd_ep_send (udev, 0U, NULL, 0U);
 800539c:	4681                	li	a3,0
 800539e:	4601                	li	a2,0
 80053a0:	4581                	li	a1,0
 80053a2:	fdc42503          	lw	a0,-36(s0)
 80053a6:	fffff097          	auipc	ra,0xfffff
 80053aa:	75e080e7          	jalr	1886(ra) # 8004b04 <usbd_ep_send>
                udev->dev.control.ctl_zlp = 0U;
 80053ae:	fdc42783          	lw	a5,-36(s0)
 80053b2:	420786a3          	sb	zero,1069(a5)
            break;
 80053b6:	a8b5                	j	8005432 <usbd_in_transc+0x100>
                if (udev->dev.cur_status == USBD_CONFIGURED) {
 80053b8:	fdc42783          	lw	a5,-36(s0)
 80053bc:	0c67c783          	lbu	a5,198(a5)
 80053c0:	0ff7f713          	andi	a4,a5,255
 80053c4:	478d                	li	a5,3
 80053c6:	02f71163          	bne	a4,a5,80053e8 <usbd_in_transc+0xb6>
                    if (udev->dev.class_core->data_in != NULL) {
 80053ca:	fdc42783          	lw	a5,-36(s0)
 80053ce:	4307a783          	lw	a5,1072(a5)
 80053d2:	4b9c                	lw	a5,16(a5)
 80053d4:	cb91                	beqz	a5,80053e8 <usbd_in_transc+0xb6>
                        udev->dev.class_core->data_in (udev, 0U);
 80053d6:	fdc42783          	lw	a5,-36(s0)
 80053da:	4307a783          	lw	a5,1072(a5)
 80053de:	4b9c                	lw	a5,16(a5)
 80053e0:	4581                	li	a1,0
 80053e2:	fdc42503          	lw	a0,-36(s0)
 80053e6:	9782                	jalr	a5
                transc->remain_len = 0U;
 80053e8:	fec42783          	lw	a5,-20(s0)
 80053ec:	0007aa23          	sw	zero,20(a5)
                usbd_ctl_status_recev (udev);
 80053f0:	fdc42503          	lw	a0,-36(s0)
 80053f4:	00000097          	auipc	ra,0x0
 80053f8:	d94080e7          	jalr	-620(ra) # 8005188 <usbd_ctl_status_recev>
            break;
 80053fc:	a81d                	j	8005432 <usbd_in_transc+0x100>
        }
    } else {
        if ((udev->dev.cur_status == USBD_CONFIGURED) && (udev->dev.class_core->data_in != NULL)) {
 80053fe:	fdc42783          	lw	a5,-36(s0)
 8005402:	0c67c783          	lbu	a5,198(a5)
 8005406:	0ff7f713          	andi	a4,a5,255
 800540a:	478d                	li	a5,3
 800540c:	02f71363          	bne	a4,a5,8005432 <usbd_in_transc+0x100>
 8005410:	fdc42783          	lw	a5,-36(s0)
 8005414:	4307a783          	lw	a5,1072(a5)
 8005418:	4b9c                	lw	a5,16(a5)
 800541a:	cf81                	beqz	a5,8005432 <usbd_in_transc+0x100>
            udev->dev.class_core->data_in (udev, ep_num);
 800541c:	fdc42783          	lw	a5,-36(s0)
 8005420:	4307a783          	lw	a5,1072(a5)
 8005424:	4b98                	lw	a4,16(a5)
 8005426:	fdb44783          	lbu	a5,-37(s0)
 800542a:	85be                	mv	a1,a5
 800542c:	fdc42503          	lw	a0,-36(s0)
 8005430:	9702                	jalr	a4
        }
    }

    return USBD_OK;
 8005432:	4781                	li	a5,0
}
 8005434:	853e                	mv	a0,a5
 8005436:	50b2                	lw	ra,44(sp)
 8005438:	5422                	lw	s0,40(sp)
 800543a:	6145                	addi	sp,sp,48
 800543c:	8082                	ret

0800543e <init_ADC_A0_A7>:
#include "adc.h"
#include "gd32vf103.h"
#include "systick.h"

void init_ADC_A0_A7(){
 800543e:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_ADC0);
 8005440:	60900513          	li	a0,1545
void init_ADC_A0_A7(){
 8005444:	c606                	sw	ra,12(sp)
 8005446:	c422                	sw	s0,8(sp)
    rcu_periph_clock_enable(RCU_ADC0);
 8005448:	ffffc097          	auipc	ra,0xffffc
 800544c:	c48080e7          	jalr	-952(ra) # 8001090 <rcu_periph_clock_enable>
    /* enable GPIOA clock */
    rcu_periph_clock_enable(RCU_GPIOA);
 8005450:	60200513          	li	a0,1538
 8005454:	ffffc097          	auipc	ra,0xffffc
 8005458:	c3c080e7          	jalr	-964(ra) # 8001090 <rcu_periph_clock_enable>
    /* Initialize the GPIO that will be used for ADC. A0-A7 and B0-B1 are connected to an ADC-channel each. */
    gpio_init(GPIOA, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800545c:	40011437          	lui	s0,0x40011
 8005460:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 8005464:	46bd                	li	a3,15
 8005466:	460d                	li	a2,3
 8005468:	4581                	li	a1,0
 800546a:	ffffc097          	auipc	ra,0xffffc
 800546e:	b70080e7          	jalr	-1168(ra) # 8000fda <gpio_init>
    gpio_init(GPIOA, GPIO_MODE_AIN, GPIO_OSPEED_50MHZ, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7); 
 8005472:	0f000693          	li	a3,240
 8005476:	460d                	li	a2,3
 8005478:	4581                	li	a1,0
 800547a:	80040513          	addi	a0,s0,-2048
 800547e:	ffffc097          	auipc	ra,0xffffc
 8005482:	b5c080e7          	jalr	-1188(ra) # 8000fda <gpio_init>
    /* enable ADC clock */
    rcu_periph_clock_enable(RCU_ADC0);
 8005486:	60900513          	li	a0,1545
 800548a:	ffffc097          	auipc	ra,0xffffc
 800548e:	c06080e7          	jalr	-1018(ra) # 8001090 <rcu_periph_clock_enable>

    /* Select the clock frequency that will be used for the ADC core. Refer to README for more info on what to select. */
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8005492:	450d                	li	a0,3

    /* Reset ADC1 configuration. GD32VF103 has two internal ADCs (ADC0, ADC1). */
    adc_deinit(ADC0);
 8005494:	40012437          	lui	s0,0x40012
    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV8);
 8005498:	ffffc097          	auipc	ra,0xffffc
 800549c:	c44080e7          	jalr	-956(ra) # 80010dc <rcu_adc_clock_config>
    adc_deinit(ADC0);
 80054a0:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 80054a4:	ffffb097          	auipc	ra,0xffffb
 80054a8:	6f2080e7          	jalr	1778(ra) # 8000b96 <adc_deinit>

    /* Set the ADCs to work independently. Refer to the manual for the different parallel modes available. */
    adc_mode_config(ADC_MODE_FREE);
 80054ac:	4501                	li	a0,0
 80054ae:	ffffb097          	auipc	ra,0xffffb
 80054b2:	738080e7          	jalr	1848(ra) # 8000be6 <adc_mode_config>
       an external trigger. */
    /*  adc_special_function_config(0, ADC_CONTINUOUS_MODE, ENABLE);
        adc_special_function_config(0, ADC_SCAN_MODE, ENABLE); */

    /* Sets where padding is applied to the measurement. Data alignment right puts padding bits above MSB */
    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);
 80054b6:	40040513          	addi	a0,s0,1024
 80054ba:	4581                	li	a1,0
 80054bc:	ffffb097          	auipc	ra,0xffffb
 80054c0:	74a080e7          	jalr	1866(ra) # 8000c06 <adc_data_alignment_config>

    /* Selects how many channels to convert each time. This can be used to "queue" multiple channels. Here just one channel is selected. */
    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, 8);
 80054c4:	40040513          	addi	a0,s0,1024
 80054c8:	4621                	li	a2,8
 80054ca:	4585                	li	a1,1
 80054cc:	ffffb097          	auipc	ra,0xffffb
 80054d0:	7d6080e7          	jalr	2006(ra) # 8000ca2 <adc_channel_length_config>

    /* Set the channel as the first "queued" conversion each time the ADC is activated. */
    adc_regular_channel_config(ADC0, 0, ADC_CHANNEL_0, ADC_SAMPLETIME_13POINT5);
 80054d4:	40040513          	addi	a0,s0,1024
 80054d8:	4689                	li	a3,2
 80054da:	4601                	li	a2,0
 80054dc:	4581                	li	a1,0
 80054de:	ffffc097          	auipc	ra,0xffffc
 80054e2:	80e080e7          	jalr	-2034(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 1, ADC_CHANNEL_1, ADC_SAMPLETIME_13POINT5);
 80054e6:	40040513          	addi	a0,s0,1024
 80054ea:	4689                	li	a3,2
 80054ec:	4605                	li	a2,1
 80054ee:	4585                	li	a1,1
 80054f0:	ffffb097          	auipc	ra,0xffffb
 80054f4:	7fc080e7          	jalr	2044(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 2, ADC_CHANNEL_2, ADC_SAMPLETIME_13POINT5);
 80054f8:	40040513          	addi	a0,s0,1024
 80054fc:	4689                	li	a3,2
 80054fe:	4609                	li	a2,2
 8005500:	4589                	li	a1,2
 8005502:	ffffb097          	auipc	ra,0xffffb
 8005506:	7ea080e7          	jalr	2026(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 3, ADC_CHANNEL_3, ADC_SAMPLETIME_13POINT5);
 800550a:	40040513          	addi	a0,s0,1024
 800550e:	4689                	li	a3,2
 8005510:	460d                	li	a2,3
 8005512:	458d                	li	a1,3
 8005514:	ffffb097          	auipc	ra,0xffffb
 8005518:	7d8080e7          	jalr	2008(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 4, ADC_CHANNEL_4, ADC_SAMPLETIME_13POINT5);
 800551c:	40040513          	addi	a0,s0,1024
 8005520:	4689                	li	a3,2
 8005522:	4611                	li	a2,4
 8005524:	4591                	li	a1,4
 8005526:	ffffb097          	auipc	ra,0xffffb
 800552a:	7c6080e7          	jalr	1990(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 5, ADC_CHANNEL_5, ADC_SAMPLETIME_13POINT5);
 800552e:	40040513          	addi	a0,s0,1024
 8005532:	4689                	li	a3,2
 8005534:	4615                	li	a2,5
 8005536:	4595                	li	a1,5
 8005538:	ffffb097          	auipc	ra,0xffffb
 800553c:	7b4080e7          	jalr	1972(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 6, ADC_CHANNEL_6, ADC_SAMPLETIME_13POINT5);
 8005540:	40040513          	addi	a0,s0,1024
 8005544:	4689                	li	a3,2
 8005546:	4619                	li	a2,6
 8005548:	4599                	li	a1,6
 800554a:	ffffb097          	auipc	ra,0xffffb
 800554e:	7a2080e7          	jalr	1954(ra) # 8000cec <adc_regular_channel_config>
    adc_regular_channel_config(ADC0, 7, ADC_CHANNEL_7, ADC_SAMPLETIME_13POINT5);
 8005552:	4689                	li	a3,2
 8005554:	40040513          	addi	a0,s0,1024
 8005558:	461d                	li	a2,7
 800555a:	459d                	li	a1,7
 800555c:	ffffb097          	auipc	ra,0xffffb
 8005560:	790080e7          	jalr	1936(ra) # 8000cec <adc_regular_channel_config>

    /* Since we are using continious conversion we do not want to use an external trigger. */
    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_EXTTRIG_REGULAR_NONE);
 8005564:	40040513          	addi	a0,s0,1024
 8005568:	000e0637          	lui	a2,0xe0
 800556c:	4585                	li	a1,1
 800556e:	ffffc097          	auipc	ra,0xffffc
 8005572:	83c080e7          	jalr	-1988(ra) # 8000daa <adc_external_trigger_source_config>
    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);
 8005576:	40040513          	addi	a0,s0,1024
 800557a:	4605                	li	a2,1
 800557c:	4585                	li	a1,1
 800557e:	ffffc097          	auipc	ra,0xffffc
 8005582:	860080e7          	jalr	-1952(ra) # 8000dde <adc_external_trigger_config>

    adc_discontinuous_mode_config(ADC0,ADC_REGULAR_CHANNEL,8);
 8005586:	4585                	li	a1,1
 8005588:	4621                	li	a2,8
 800558a:	40040513          	addi	a0,s0,1024
 800558e:	ffffb097          	auipc	ra,0xffffb
 8005592:	6ce080e7          	jalr	1742(ra) # 8000c5c <adc_discontinuous_mode_config>
    /* Enable ADC.*/
    adc_enable(ADC0);
 8005596:	40040513          	addi	a0,s0,1024
 800559a:	ffffb097          	auipc	ra,0xffffb
 800559e:	686080e7          	jalr	1670(ra) # 8000c20 <adc_enable>

    /* Let ADC stabilize */
    delay_1ms(1);
 80055a2:	4505                	li	a0,1
 80055a4:	fffff097          	auipc	ra,0xfffff
 80055a8:	864080e7          	jalr	-1948(ra) # 8003e08 <delay_1ms>

    /* Calibrates the ADC against an internal source. */
    adc_calibration_enable(ADC0);
 80055ac:	40040513          	addi	a0,s0,1024
 80055b0:	ffffb097          	auipc	ra,0xffffb
 80055b4:	680080e7          	jalr	1664(ra) # 8000c30 <adc_calibration_enable>
    adc_dma_mode_enable(ADC0);
 80055b8:	40040513          	addi	a0,s0,1024
 80055bc:	ffffb097          	auipc	ra,0xffffb
 80055c0:	696080e7          	jalr	1686(ra) # 8000c52 <adc_dma_mode_enable>

    delay_1ms(1);
 80055c4:	4505                	li	a0,1
 80055c6:	fffff097          	auipc	ra,0xfffff
 80055ca:	842080e7          	jalr	-1982(ra) # 8003e08 <delay_1ms>

    /* Start converting */
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055ce:	40040513          	addi	a0,s0,1024
 80055d2:	4422                	lw	s0,8(sp)
 80055d4:	40b2                	lw	ra,12(sp)
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055d6:	4585                	li	a1,1
 80055d8:	0141                	addi	sp,sp,16
    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 80055da:	ffffc317          	auipc	t1,0xffffc
 80055de:	83e30067          	jr	-1986(t1) # 8000e18 <adc_software_trigger_enable>

080055e2 <write_handle_raw>:
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 80055e2:	7151                	addi	sp,sp,-240
 80055e4:	d5a2                	sw	s0,232(sp)
 80055e6:	d1ca                	sw	s2,224(sp)
 80055e8:	c62a                	sw	a0,12(sp)
 80055ea:	892e                	mv	s2,a1
 80055ec:	8432                	mv	s0,a2
	uint8_t string_buffer[128] = {'\0'};
 80055ee:	4581                	li	a1,0
 80055f0:	08000613          	li	a2,128
 80055f4:	1088                	addi	a0,sp,96
void write_handle_raw(uint16_t handle, uint8_t* byte_data, uint8_t size){
 80055f6:	d786                	sw	ra,236(sp)
 80055f8:	d3a6                	sw	s1,228(sp)
	uint8_t string_buffer[128] = {'\0'};
 80055fa:	00002097          	auipc	ra,0x2
 80055fe:	be0080e7          	jalr	-1056(ra) # 80071da <memset>
	uint8_t data_buffer[(20*2)+15] = {'\0'};
 8005602:	03700613          	li	a2,55
 8005606:	4581                	li	a1,0
 8005608:	1028                	addi	a0,sp,40
 800560a:	00002097          	auipc	ra,0x2
 800560e:	bd0080e7          	jalr	-1072(ra) # 80071da <memset>
	const uint8_t lut_hex[] = "0123456789ABCDEF";
 8005612:	080004b7          	lui	s1,0x8000
 8005616:	3c848593          	addi	a1,s1,968 # 80003c8 <_std_dev_req+0x38>
 800561a:	4645                	li	a2,17
 800561c:	03058593          	addi	a1,a1,48
 8005620:	0848                	addi	a0,sp,20
 8005622:	00002097          	auipc	ra,0x2
 8005626:	ba2080e7          	jalr	-1118(ra) # 80071c4 <memcpy>
	for(int i = 0; i < size; i++){
 800562a:	46b2                	lw	a3,12(sp)
 800562c:	1030                	addi	a2,sp,40
 800562e:	4701                	li	a4,0
 8005630:	3c848593          	addi	a1,s1,968
 8005634:	04874463          	blt	a4,s0,800567c <write_handle_raw+0x9a>
	data_buffer[size*2] = '\0';
 8005638:	119c                	addi	a5,sp,224
 800563a:	0406                	slli	s0,s0,0x1
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 800563c:	08000637          	lui	a2,0x8000
	data_buffer[size*2] = '\0';
 8005640:	943e                	add	s0,s0,a5
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005642:	1038                	addi	a4,sp,40
 8005644:	40c60613          	addi	a2,a2,1036 # 800040c <_std_dev_req+0x7c>
 8005648:	04c58593          	addi	a1,a1,76
 800564c:	1088                	addi	a0,sp,96
	data_buffer[size*2] = '\0';
 800564e:	f4040423          	sb	zero,-184(s0)
	sprintf(string_buffer, "%s%.4x,%s\r\n", "SHW,", handle, data_buffer);
 8005652:	00002097          	auipc	ra,0x2
 8005656:	b98080e7          	jalr	-1128(ra) # 80071ea <siprintf>
	lio_send_bt(string_buffer, strlen(string_buffer));
 800565a:	1088                	addi	a0,sp,96
 800565c:	00002097          	auipc	ra,0x2
 8005660:	bf4080e7          	jalr	-1036(ra) # 8007250 <strlen>
 8005664:	85aa                	mv	a1,a0
 8005666:	1088                	addi	a0,sp,96
 8005668:	00001097          	auipc	ra,0x1
 800566c:	be6080e7          	jalr	-1050(ra) # 800624e <lio_send_bt>
}
 8005670:	50be                	lw	ra,236(sp)
 8005672:	542e                	lw	s0,232(sp)
 8005674:	549e                	lw	s1,228(sp)
 8005676:	590e                	lw	s2,224(sp)
 8005678:	616d                	addi	sp,sp,240
 800567a:	8082                	ret
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800567c:	00e907b3          	add	a5,s2,a4
 8005680:	0007c783          	lbu	a5,0(a5)
 8005684:	1184                	addi	s1,sp,224
	for(int i = 0; i < size; i++){
 8005686:	0705                	addi	a4,a4,1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005688:	0047d513          	srli	a0,a5,0x4
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 800568c:	8bbd                	andi	a5,a5,15
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800568e:	9526                	add	a0,a0,s1
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005690:	97a6                	add	a5,a5,s1
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 8005692:	f3454503          	lbu	a0,-204(a0)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 8005696:	f347c783          	lbu	a5,-204(a5)
 800569a:	0609                	addi	a2,a2,2
		data_buffer[i*2] = lut_hex[byte_data[i] / 16];
 800569c:	fea60f23          	sb	a0,-2(a2)
		data_buffer[(i*2)+1] = lut_hex[byte_data[i] % 16];
 80056a0:	fef60fa3          	sb	a5,-1(a2)
 80056a4:	bf41                	j	8005634 <write_handle_raw+0x52>

080056a6 <send_data_to_phone>:
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 80056a6:	00859793          	slli	a5,a1,0x8
 80056aa:	05c2                	slli	a1,a1,0x10
 80056ac:	81c1                	srli	a1,a1,0x10
 80056ae:	81a1                	srli	a1,a1,0x8
void send_data_to_phone(uint16_t handle, int16_t value){
 80056b0:	1101                	addi	sp,sp,-32
    bytes[0] = (uint8_t)((value >> 8) & 0xFF);  // Extract high byte 
 80056b2:	8ddd                	or	a1,a1,a5
 80056b4:	00b11623          	sh	a1,12(sp)
    write_handle_raw(handle,bytes,2);
 80056b8:	4609                	li	a2,2
 80056ba:	006c                	addi	a1,sp,12
void send_data_to_phone(uint16_t handle, int16_t value){
 80056bc:	ce06                	sw	ra,28(sp)
    write_handle_raw(handle,bytes,2);
 80056be:	00000097          	auipc	ra,0x0
 80056c2:	f24080e7          	jalr	-220(ra) # 80055e2 <write_handle_raw>
}
 80056c6:	40f2                	lw	ra,28(sp)
 80056c8:	6105                	addi	sp,sp,32
 80056ca:	8082                	ret

080056cc <stagger_data_to_phone>:
    int index = (seconds - 1) % 8;
 80056cc:	47a1                	li	a5,8
 80056ce:	157d                	addi	a0,a0,-1
 80056d0:	02f56533          	rem	a0,a0,a5
    value = (int16_t)sample_buffer[index];
 80056d4:	20001737          	lui	a4,0x20001
    send_data_to_phone(finapressHandles[index], value);
 80056d8:	200007b7          	lui	a5,0x20000
    value = (int16_t)sample_buffer[index];
 80056dc:	5e070713          	addi	a4,a4,1504 # 200015e0 <sample_buffer>
    send_data_to_phone(finapressHandles[index], value);
 80056e0:	47878793          	addi	a5,a5,1144 # 20000478 <finapressHandles>
    value = (int16_t)sample_buffer[index];
 80056e4:	0506                	slli	a0,a0,0x1
 80056e6:	972a                	add	a4,a4,a0
    send_data_to_phone(finapressHandles[index], value);
 80056e8:	953e                	add	a0,a0,a5
 80056ea:	00071583          	lh	a1,0(a4)
 80056ee:	00055503          	lhu	a0,0(a0)
 80056f2:	00000317          	auipc	t1,0x0
 80056f6:	fb430067          	jr	-76(t1) # 80056a6 <send_data_to_phone>

080056fa <reboot_BT>:
    lio_send_bt("R,1\r",4);//reboot bluetooth
 80056fa:	08000537          	lui	a0,0x8000
void reboot_BT(){
 80056fe:	1141                	addi	sp,sp,-16
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005700:	4591                	li	a1,4
 8005702:	42050513          	addi	a0,a0,1056 # 8000420 <_std_dev_req+0x90>
void reboot_BT(){
 8005706:	c606                	sw	ra,12(sp)
    lio_send_bt("R,1\r",4);//reboot bluetooth
 8005708:	00001097          	auipc	ra,0x1
 800570c:	b46080e7          	jalr	-1210(ra) # 800624e <lio_send_bt>
}
 8005710:	40b2                	lw	ra,12(sp)
    delay_1ms(50);
 8005712:	03200513          	li	a0,50
}
 8005716:	0141                	addi	sp,sp,16
    delay_1ms(50);
 8005718:	ffffe317          	auipc	t1,0xffffe
 800571c:	6f030067          	jr	1776(t1) # 8003e08 <delay_1ms>

08005720 <TIMER1_IRQHandler>:
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005720:	40012537          	lui	a0,0x40012
void TIMER1_IRQHandler(void){
 8005724:	712d                	addi	sp,sp,-288
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005726:	4589                	li	a1,2
 8005728:	40050513          	addi	a0,a0,1024 # 40012400 <_sp+0x2000a400>
void TIMER1_IRQHandler(void){
 800572c:	10112e23          	sw	ra,284(sp)
 8005730:	10812c23          	sw	s0,280(sp)
 8005734:	10912a23          	sw	s1,276(sp)
    if(!adc_flag_get(ADC0,ADC_FLAG_EOC)){
 8005738:	ffffb097          	auipc	ra,0xffffb
 800573c:	700080e7          	jalr	1792(ra) # 8000e38 <adc_flag_get>
 8005740:	18051163          	bnez	a0,80058c2 <TIMER1_IRQHandler+0x1a2>
 8005744:	842a                	mv	s0,a0
        char str_buf[256] = {'\0'};
 8005746:	10000613          	li	a2,256
 800574a:	4581                	li	a1,0
 800574c:	0808                	addi	a0,sp,16
        uint16_t data_Buffer[8] = {0};
 800574e:	c002                	sw	zero,0(sp)
 8005750:	c202                	sw	zero,4(sp)
 8005752:	c402                	sw	zero,8(sp)
 8005754:	c602                	sw	zero,12(sp)
        char str_buf[256] = {'\0'};
 8005756:	00002097          	auipc	ra,0x2
 800575a:	a84080e7          	jalr	-1404(ra) # 80071da <memset>
            data_Buffer[i] = sample_buffer[i];
 800575e:	200017b7          	lui	a5,0x20001
 8005762:	5e078793          	addi	a5,a5,1504 # 200015e0 <sample_buffer>
        for (int i = 0; i < 8; i++){
 8005766:	4741                	li	a4,16
            data_Buffer[i] = sample_buffer[i];
 8005768:	00f40633          	add	a2,s0,a5
 800576c:	00065603          	lhu	a2,0(a2)
 8005770:	008106b3          	add	a3,sp,s0
 8005774:	0409                	addi	s0,s0,2
 8005776:	00c69023          	sh	a2,0(a3) # 1000000 <__stack_size+0xfff000>
        for (int i = 0; i < 8; i++){
 800577a:	fee417e3          	bne	s0,a4,8005768 <TIMER1_IRQHandler+0x48>
        adc_flag_clear(ADC0, ADC_FLAG_EOC); 
 800577e:	40012437          	lui	s0,0x40012
 8005782:	4589                	li	a1,2
 8005784:	40040513          	addi	a0,s0,1024 # 40012400 <_sp+0x2000a400>
 8005788:	ffffb097          	auipc	ra,0xffffb
 800578c:	6ba080e7          	jalr	1722(ra) # 8000e42 <adc_flag_clear>
        adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);
 8005790:	4585                	li	a1,1
 8005792:	40040513          	addi	a0,s0,1024
 8005796:	ffffb097          	auipc	ra,0xffffb
 800579a:	682080e7          	jalr	1666(ra) # 8000e18 <adc_software_trigger_enable>
        if (SET == timer_interrupt_flag_get(TIMER1, TIMER_INT_CH0)){
 800579e:	4589                	li	a1,2
 80057a0:	40000537          	lui	a0,0x40000
 80057a4:	ffffc097          	auipc	ra,0xffffc
 80057a8:	fe6080e7          	jalr	-26(ra) # 800178a <timer_interrupt_flag_get>
 80057ac:	4785                	li	a5,1
 80057ae:	10f51a63          	bne	a0,a5,80058c2 <TIMER1_IRQHandler+0x1a2>
            millisec++; // Add one each time an interrupt happens
 80057b2:	200004b7          	lui	s1,0x20000
 80057b6:	53048793          	addi	a5,s1,1328 # 20000530 <millisec>
 80057ba:	4398                	lw	a4,0(a5)
 80057bc:	20000437          	lui	s0,0x20000
 80057c0:	53048493          	addi	s1,s1,1328
 80057c4:	0705                	addi	a4,a4,1
 80057c6:	c398                	sw	a4,0(a5)
            if (millisec == 1000){
 80057c8:	4398                	lw	a4,0(a5)
 80057ca:	3e800793          	li	a5,1000
 80057ce:	53840413          	addi	s0,s0,1336 # 20000538 <seconds>
 80057d2:	00f71763          	bne	a4,a5,80057e0 <TIMER1_IRQHandler+0xc0>
                millisec = 0;
 80057d6:	0004a023          	sw	zero,0(s1)
                seconds++;
 80057da:	401c                	lw	a5,0(s0)
 80057dc:	0785                	addi	a5,a5,1
 80057de:	c01c                	sw	a5,0(s0)
            if(millisec == 800){
 80057e0:	4098                	lw	a4,0(s1)
 80057e2:	32000793          	li	a5,800
 80057e6:	00f71963          	bne	a4,a5,80057f8 <TIMER1_IRQHandler+0xd8>
                stagger_data_to_phone(seconds);
 80057ea:	4008                	lw	a0,0(s0)
 80057ec:	0542                	slli	a0,a0,0x10
 80057ee:	8541                	srai	a0,a0,0x10
 80057f0:	00000097          	auipc	ra,0x0
 80057f4:	edc080e7          	jalr	-292(ra) # 80056cc <stagger_data_to_phone>
            if (seconds == 60){
 80057f8:	4014                	lw	a3,0(s0)
 80057fa:	200007b7          	lui	a5,0x20000
 80057fe:	03c00713          	li	a4,60
 8005802:	53478793          	addi	a5,a5,1332 # 20000534 <minutes>
 8005806:	00e69763          	bne	a3,a4,8005814 <TIMER1_IRQHandler+0xf4>
                seconds = 0;
 800580a:	00042023          	sw	zero,0(s0)
                minutes++;
 800580e:	4398                	lw	a4,0(a5)
 8005810:	0705                	addi	a4,a4,1
 8005812:	c398                	sw	a4,0(a5)
            formatTime(str_buf, minutes, seconds, millisec);
 8005814:	438c                	lw	a1,0(a5)
 8005816:	4010                	lw	a2,0(s0)
 8005818:	4094                	lw	a3,0(s1)
 800581a:	0808                	addi	a0,sp,16
 800581c:	00000097          	auipc	ra,0x0
 8005820:	22a080e7          	jalr	554(ra) # 8005a46 <formatTime>
            append_int_to_string(str_buf, data_Buffer[0]);
 8005824:	00015583          	lhu	a1,0(sp)
 8005828:	0808                	addi	a0,sp,16
 800582a:	00000097          	auipc	ra,0x0
 800582e:	320080e7          	jalr	800(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[1]);
 8005832:	00215583          	lhu	a1,2(sp)
 8005836:	0808                	addi	a0,sp,16
 8005838:	00000097          	auipc	ra,0x0
 800583c:	312080e7          	jalr	786(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[2]);
 8005840:	00415583          	lhu	a1,4(sp)
 8005844:	0808                	addi	a0,sp,16
 8005846:	00000097          	auipc	ra,0x0
 800584a:	304080e7          	jalr	772(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[3]);
 800584e:	00615583          	lhu	a1,6(sp)
 8005852:	0808                	addi	a0,sp,16
 8005854:	00000097          	auipc	ra,0x0
 8005858:	2f6080e7          	jalr	758(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[4]);
 800585c:	00815583          	lhu	a1,8(sp)
 8005860:	0808                	addi	a0,sp,16
 8005862:	00000097          	auipc	ra,0x0
 8005866:	2e8080e7          	jalr	744(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[5]);
 800586a:	00a15583          	lhu	a1,10(sp)
 800586e:	0808                	addi	a0,sp,16
 8005870:	00000097          	auipc	ra,0x0
 8005874:	2da080e7          	jalr	730(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[6]);
 8005878:	00c15583          	lhu	a1,12(sp)
 800587c:	0808                	addi	a0,sp,16
 800587e:	00000097          	auipc	ra,0x0
 8005882:	2cc080e7          	jalr	716(ra) # 8005b4a <append_int_to_string>
            append_int_to_string(str_buf, data_Buffer[7]);
 8005886:	00e15583          	lhu	a1,14(sp)
 800588a:	0808                	addi	a0,sp,16
 800588c:	00000097          	auipc	ra,0x0
 8005890:	2be080e7          	jalr	702(ra) # 8005b4a <append_int_to_string>
            append_newLine(str_buf, strlen(str_buf));
 8005894:	0808                	addi	a0,sp,16
 8005896:	00002097          	auipc	ra,0x2
 800589a:	9ba080e7          	jalr	-1606(ra) # 8007250 <strlen>
 800589e:	85aa                	mv	a1,a0
 80058a0:	0808                	addi	a0,sp,16
 80058a2:	00000097          	auipc	ra,0x0
 80058a6:	2d8080e7          	jalr	728(ra) # 8005b7a <append_newLine>
            enqueue_string(str_buf);
 80058aa:	0808                	addi	a0,sp,16
 80058ac:	00000097          	auipc	ra,0x0
 80058b0:	35e080e7          	jalr	862(ra) # 8005c0a <enqueue_string>
            timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 80058b4:	4589                	li	a1,2
 80058b6:	40000537          	lui	a0,0x40000
 80058ba:	ffffc097          	auipc	ra,0xffffc
 80058be:	ee2080e7          	jalr	-286(ra) # 800179c <timer_interrupt_flag_clear>
}
 80058c2:	11c12083          	lw	ra,284(sp)
 80058c6:	11812403          	lw	s0,280(sp)
 80058ca:	11412483          	lw	s1,276(sp)
 80058ce:	6115                	addi	sp,sp,288
 80058d0:	8082                	ret

080058d2 <ledInit>:
                break;
        }
    }
}

void ledInit (void){
 80058d2:	1141                	addi	sp,sp,-16
    rcu_periph_clock_enable(RCU_GPIOB);
 80058d4:	60300513          	li	a0,1539
void ledInit (void){
 80058d8:	c606                	sw	ra,12(sp)
    rcu_periph_clock_enable(RCU_GPIOB);
 80058da:	ffffb097          	auipc	ra,0xffffb
 80058de:	7b6080e7          	jalr	1974(ra) # 8001090 <rcu_periph_clock_enable>
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
}
 80058e2:	40b2                	lw	ra,12(sp)
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80058e4:	40011537          	lui	a0,0x40011
 80058e8:	469d                	li	a3,7
 80058ea:	460d                	li	a2,3
 80058ec:	45c1                	li	a1,16
 80058ee:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
}
 80058f2:	0141                	addi	sp,sp,16
	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80058f4:	ffffb317          	auipc	t1,0xffffb
 80058f8:	6e630067          	jr	1766(t1) # 8000fda <gpio_init>

080058fc <led_on_B1>:

void led_on_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 1);
 80058fc:	40011537          	lui	a0,0x40011
 8005900:	4605                	li	a2,1
 8005902:	4589                	li	a1,2
 8005904:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005908:	ffffb317          	auipc	t1,0xffffb
 800590c:	77e30067          	jr	1918(t1) # 8001086 <gpio_bit_write>

08005910 <led_off_B1>:
}
void led_off_B1(){
    gpio_bit_write(GPIOB, GPIO_PIN_1, 0);
 8005910:	40011537          	lui	a0,0x40011
 8005914:	4601                	li	a2,0
 8005916:	4589                	li	a1,2
 8005918:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 800591c:	ffffb317          	auipc	t1,0xffffb
 8005920:	76a30067          	jr	1898(t1) # 8001086 <gpio_bit_write>

08005924 <led_on_B0>:
void led_off_b2(){
    gpio_bit_write(GPIOB, GPIO_PIN_2, 0);
}

void led_on_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 1);
 8005924:	40011537          	lui	a0,0x40011
 8005928:	4605                	li	a2,1
 800592a:	4585                	li	a1,1
 800592c:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005930:	ffffb317          	auipc	t1,0xffffb
 8005934:	75630067          	jr	1878(t1) # 8001086 <gpio_bit_write>

08005938 <led_off_B0>:
}
void led_off_B0(){
    gpio_bit_write(GPIOB, GPIO_PIN_0, 0);
 8005938:	40011537          	lui	a0,0x40011
 800593c:	4601                	li	a2,0
 800593e:	4585                	li	a1,1
 8005940:	c0050513          	addi	a0,a0,-1024 # 40010c00 <_sp+0x20008c00>
 8005944:	ffffb317          	auipc	t1,0xffffb
 8005948:	74230067          	jr	1858(t1) # 8001086 <gpio_bit_write>

0800594c <timer_interrupt_config>:
}

void timer_interrupt_config(){
 800594c:	7179                	addi	sp,sp,-48
    timer_oc_parameter_struct timer_ocinitpara;
    timer_parameter_struct timer_initpara;

    eclic_irq_enable(TIMER1_IRQn, 1, 0);
 800594e:	4601                	li	a2,0
 8005950:	4585                	li	a1,1
 8005952:	02f00513          	li	a0,47
void timer_interrupt_config(){
 8005956:	d606                	sw	ra,44(sp)
 8005958:	d422                	sw	s0,40(sp)
 800595a:	d226                	sw	s1,36(sp)
    eclic_irq_enable(TIMER1_IRQn, 1, 0);
 800595c:	ffffb097          	auipc	ra,0xffffb
 8005960:	640080e7          	jalr	1600(ra) # 8000f9c <eclic_irq_enable>

    rcu_periph_clock_enable(RCU_TIMER1);
 8005964:	70000513          	li	a0,1792
 8005968:	ffffb097          	auipc	ra,0xffffb
 800596c:	728080e7          	jalr	1832(ra) # 8001090 <rcu_periph_clock_enable>

    timer_deinit(TIMER1);
 8005970:	40000537          	lui	a0,0x40000
 8005974:	ffffc097          	auipc	ra,0xffffc
 8005978:	958080e7          	jalr	-1704(ra) # 80012cc <timer_deinit>

    timer_struct_para_init(&timer_initpara);
 800597c:	0808                	addi	a0,sp,16
 800597e:	ffffc097          	auipc	ra,0xffffc
 8005982:	a20080e7          	jalr	-1504(ra) # 800139e <timer_struct_para_init>
    /* TIMER1 configuration */
    /* Frequency = core clock / ((1+prescaler)*period) = 108MHz / (2*54000) = 1KHz */
    timer_initpara.prescaler = 1;
    timer_initpara.alignedmode = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection = TIMER_COUNTER_UP;
    timer_initpara.period = SystemCoreClock/2000;
 8005986:	20000437          	lui	s0,0x20000
 800598a:	4e842783          	lw	a5,1256(s0) # 200004e8 <SystemCoreClock>
 800598e:	7d000713          	li	a4,2000
    timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
    timer_init(TIMER1, &timer_initpara);
 8005992:	080c                	addi	a1,sp,16
    timer_initpara.period = SystemCoreClock/2000;
 8005994:	02e7d7b3          	divu	a5,a5,a4
    timer_initpara.prescaler = 1;
 8005998:	4485                	li	s1,1
    timer_init(TIMER1, &timer_initpara);
 800599a:	40000537          	lui	a0,0x40000
    timer_initpara.prescaler = 1;
 800599e:	c826                	sw	s1,16(sp)
    timer_initpara.counterdirection = TIMER_COUNTER_UP;
 80059a0:	00011a23          	sh	zero,20(sp)
    timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
 80059a4:	00011e23          	sh	zero,28(sp)
    timer_initpara.period = SystemCoreClock/2000;
 80059a8:	cc3e                	sw	a5,24(sp)
    timer_init(TIMER1, &timer_initpara);
 80059aa:	ffffc097          	auipc	ra,0xffffc
 80059ae:	a0c080e7          	jalr	-1524(ra) # 80013b6 <timer_init>

    timer_channel_output_struct_para_init(&timer_ocinitpara);
 80059b2:	0048                	addi	a0,sp,4
 80059b4:	ffffc097          	auipc	ra,0xffffc
 80059b8:	a9a080e7          	jalr	-1382(ra) # 800144e <timer_channel_output_struct_para_init>

    timer_ocinitpara.outputstate = TIMER_CCX_ENABLE;
    timer_ocinitpara.ocpolarity = TIMER_OC_POLARITY_HIGH;
    timer_ocinitpara.ocidlestate = TIMER_OC_IDLE_STATE_LOW;
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 80059bc:	0050                	addi	a2,sp,4
 80059be:	4581                	li	a1,0
 80059c0:	40000537          	lui	a0,0x40000
    timer_ocinitpara.outputstate = TIMER_CCX_ENABLE;
 80059c4:	00911223          	sh	s1,4(sp)
    timer_ocinitpara.ocpolarity = TIMER_OC_POLARITY_HIGH;
 80059c8:	00011423          	sh	zero,8(sp)
    timer_ocinitpara.ocidlestate = TIMER_OC_IDLE_STATE_LOW;
 80059cc:	00011623          	sh	zero,12(sp)
    timer_channel_output_config(TIMER1, TIMER_CH_0, &timer_ocinitpara);
 80059d0:	ffffc097          	auipc	ra,0xffffc
 80059d4:	a98080e7          	jalr	-1384(ra) # 8001468 <timer_channel_output_config>

    timer_channel_output_pulse_value_config(TIMER1, TIMER_CH_0, SystemCoreClock / 4000);
 80059d8:	4e842603          	lw	a2,1256(s0)
 80059dc:	6785                	lui	a5,0x1
 80059de:	fa078793          	addi	a5,a5,-96 # fa0 <__dbg_stack_size+0xfa0>
 80059e2:	02f65633          	divu	a2,a2,a5
 80059e6:	4581                	li	a1,0
 80059e8:	40000537          	lui	a0,0x40000
 80059ec:	ffffc097          	auipc	ra,0xffffc
 80059f0:	d0e080e7          	jalr	-754(ra) # 80016fa <timer_channel_output_pulse_value_config>
    timer_channel_output_mode_config(TIMER1, TIMER_CH_0, TIMER_OC_MODE_TIMING);
 80059f4:	4601                	li	a2,0
 80059f6:	4581                	li	a1,0
 80059f8:	40000537          	lui	a0,0x40000
 80059fc:	ffffc097          	auipc	ra,0xffffc
 8005a00:	ca8080e7          	jalr	-856(ra) # 80016a4 <timer_channel_output_mode_config>
    timer_channel_output_shadow_config(TIMER1, TIMER_CH_0, TIMER_OC_SHADOW_DISABLE);
 8005a04:	4601                	li	a2,0
 8005a06:	4581                	li	a1,0
 8005a08:	40000537          	lui	a0,0x40000
 8005a0c:	ffffc097          	auipc	ra,0xffffc
 8005a10:	d14080e7          	jalr	-748(ra) # 8001720 <timer_channel_output_shadow_config>

    timer_interrupt_enable(TIMER1, TIMER_INT_CH0);
 8005a14:	4589                	li	a1,2
 8005a16:	40000537          	lui	a0,0x40000
 8005a1a:	ffffc097          	auipc	ra,0xffffc
 8005a1e:	d5c080e7          	jalr	-676(ra) # 8001776 <timer_interrupt_enable>
    /* Make sure interrupt flag is clear */
    timer_interrupt_flag_clear(TIMER1, TIMER_INT_CH0);
 8005a22:	4589                	li	a1,2
 8005a24:	40000537          	lui	a0,0x40000
 8005a28:	ffffc097          	auipc	ra,0xffffc
 8005a2c:	d74080e7          	jalr	-652(ra) # 800179c <timer_interrupt_flag_clear>
    timer_enable(TIMER1);
 8005a30:	40000537          	lui	a0,0x40000
 8005a34:	ffffc097          	auipc	ra,0xffffc
 8005a38:	a10080e7          	jalr	-1520(ra) # 8001444 <timer_enable>
}
 8005a3c:	50b2                	lw	ra,44(sp)
 8005a3e:	5422                	lw	s0,40(sp)
 8005a40:	5492                	lw	s1,36(sp)
 8005a42:	6145                	addi	sp,sp,48
 8005a44:	8082                	ret

08005a46 <formatTime>:

void formatTime(char *output, int minutes, int seconds, int milliseconds) {
    // Format minutes
    output[0] = (minutes / 10) + '0';
 8005a46:	47a9                	li	a5,10
 8005a48:	02f5c733          	div	a4,a1,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
    output[8] = (milliseconds % 10) + '0';

    // Add a semicolon and null terminator
    output[9] = ';';
    output[10] = '\0';
 8005a4c:	00050523          	sb	zero,10(a0) # 4000000a <_sp+0x1fff800a>
    output[0] = (minutes / 10) + '0';
 8005a50:	03070713          	addi	a4,a4,48
 8005a54:	00e50023          	sb	a4,0(a0)
    output[3] = (seconds / 10) + '0';
 8005a58:	02f64733          	div	a4,a2,a5
 8005a5c:	03070713          	addi	a4,a4,48
 8005a60:	00e501a3          	sb	a4,3(a0)
    output[6] = ((milliseconds / 100) % 10) + '0';
 8005a64:	06400713          	li	a4,100
 8005a68:	02e6c733          	div	a4,a3,a4
 8005a6c:	02f76733          	rem	a4,a4,a5
 8005a70:	03070713          	addi	a4,a4,48
 8005a74:	00e50323          	sb	a4,6(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005a78:	02f6c733          	div	a4,a3,a5
    output[1] = (minutes % 10) + '0';
 8005a7c:	02f5e5b3          	rem	a1,a1,a5
    output[4] = (seconds % 10) + '0';
 8005a80:	02f66633          	rem	a2,a2,a5
    output[1] = (minutes % 10) + '0';
 8005a84:	03058593          	addi	a1,a1,48
 8005a88:	00b500a3          	sb	a1,1(a0)
    output[2] = '.';
 8005a8c:	02e00593          	li	a1,46
 8005a90:	00b50123          	sb	a1,2(a0)
    output[5] = '.';
 8005a94:	00b502a3          	sb	a1,5(a0)
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005a98:	02f76733          	rem	a4,a4,a5
    output[4] = (seconds % 10) + '0';
 8005a9c:	03060613          	addi	a2,a2,48
 8005aa0:	00c50223          	sb	a2,4(a0)
    output[8] = (milliseconds % 10) + '0';
 8005aa4:	02f6e6b3          	rem	a3,a3,a5
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005aa8:	03070713          	addi	a4,a4,48
    output[9] = ';';
 8005aac:	03b00793          	li	a5,59
    output[7] = ((milliseconds / 10) % 10) + '0';
 8005ab0:	00e503a3          	sb	a4,7(a0)
    output[9] = ';';
 8005ab4:	00f504a3          	sb	a5,9(a0)
    output[8] = (milliseconds % 10) + '0';
 8005ab8:	03068693          	addi	a3,a3,48
 8005abc:	00d50423          	sb	a3,8(a0)
}
 8005ac0:	8082                	ret

08005ac2 <int_to_string>:

int int_to_string(char *string, int integer){
 8005ac2:	87aa                	mv	a5,a0
    int i = 0;
    int divider = 1000;
    if(integer < 0){
 8005ac4:	0605d363          	bgez	a1,8005b2a <int_to_string+0x68>
        string[i++] = '-';
 8005ac8:	02d00713          	li	a4,45
 8005acc:	00e50023          	sb	a4,0(a0)
        integer = -integer;
 8005ad0:	40b005b3          	neg	a1,a1
        string[i++] = '-';
 8005ad4:	4705                	li	a4,1
    int divider = 1000;
 8005ad6:	3e800693          	li	a3,1000
        string[i++] = ';';
        string[i] = '\0';
        return i;
    }
    int og_num = integer;
    while (integer >= divider * 10) {
 8005ada:	4529                	li	a0,10
 8005adc:	02a68633          	mul	a2,a3,a0
 8005ae0:	06c5d363          	bge	a1,a2,8005b46 <int_to_string+0x84>
 8005ae4:	852e                	mv	a0,a1
        divider *= 10; 
    }

    while(divider){
        char digit = (integer/divider)+ '0';
        if(digit != '0' || og_num > integer){
 8005ae6:	03000893          	li	a7,48
            string[i++] = digit; 
        }
        
        integer %= divider;
        divider /= 10;
 8005aea:	4829                	li	a6,10
        char digit = (integer/divider)+ '0';
 8005aec:	02d54633          	div	a2,a0,a3
 8005af0:	03060613          	addi	a2,a2,48
 8005af4:	0ff67613          	andi	a2,a2,255
        if(digit != '0' || og_num > integer){
 8005af8:	01161463          	bne	a2,a7,8005b00 <int_to_string+0x3e>
 8005afc:	00b55763          	bge	a0,a1,8005b0a <int_to_string+0x48>
            string[i++] = digit; 
 8005b00:	00e78333          	add	t1,a5,a4
 8005b04:	00c30023          	sb	a2,0(t1)
 8005b08:	0705                	addi	a4,a4,1
        integer %= divider;
 8005b0a:	02d56533          	rem	a0,a0,a3
        divider /= 10;
 8005b0e:	0306c6b3          	div	a3,a3,a6
    while(divider){
 8005b12:	fee9                	bnez	a3,8005aec <int_to_string+0x2a>
    }
    string[i++] = ';';
 8005b14:	00170513          	addi	a0,a4,1
 8005b18:	03b00693          	li	a3,59
 8005b1c:	973e                	add	a4,a4,a5
 8005b1e:	00d70023          	sb	a3,0(a4)
    string[i] = '\0';
 8005b22:	97aa                	add	a5,a5,a0
 8005b24:	00078023          	sb	zero,0(a5)
    return i;
}
 8005b28:	8082                	ret
    int i = 0;
 8005b2a:	4701                	li	a4,0
    }else if(integer == 0){
 8005b2c:	f5cd                	bnez	a1,8005ad6 <int_to_string+0x14>
        string[i++] = '0';
 8005b2e:	03000713          	li	a4,48
 8005b32:	00e50023          	sb	a4,0(a0)
        string[i++] = ';';
 8005b36:	03b00713          	li	a4,59
 8005b3a:	00e500a3          	sb	a4,1(a0)
        string[i] = '\0';
 8005b3e:	00050123          	sb	zero,2(a0)
        return i;
 8005b42:	4509                	li	a0,2
 8005b44:	8082                	ret
 8005b46:	86b2                	mv	a3,a2
 8005b48:	bf51                	j	8005adc <int_to_string+0x1a>

08005b4a <append_int_to_string>:

int append_int_to_string(char *string, int integer){
 8005b4a:	7179                	addi	sp,sp,-48
 8005b4c:	d422                	sw	s0,40(sp)
 8005b4e:	842a                	mv	s0,a0
    char temp[20] = {'\0'};
    int_to_string(temp, integer);
 8005b50:	0068                	addi	a0,sp,12
int append_int_to_string(char *string, int integer){
 8005b52:	d606                	sw	ra,44(sp)
    char temp[20] = {'\0'};
 8005b54:	c602                	sw	zero,12(sp)
 8005b56:	c802                	sw	zero,16(sp)
 8005b58:	ca02                	sw	zero,20(sp)
 8005b5a:	cc02                	sw	zero,24(sp)
 8005b5c:	ce02                	sw	zero,28(sp)
    int_to_string(temp, integer);
 8005b5e:	00000097          	auipc	ra,0x0
 8005b62:	f64080e7          	jalr	-156(ra) # 8005ac2 <int_to_string>
    int len = fuseStrings(string, temp);
 8005b66:	006c                	addi	a1,sp,12
 8005b68:	8522                	mv	a0,s0
 8005b6a:	00000097          	auipc	ra,0x0
 8005b6e:	118080e7          	jalr	280(ra) # 8005c82 <fuseStrings>
    return len;
}
 8005b72:	50b2                	lw	ra,44(sp)
 8005b74:	5422                	lw	s0,40(sp)
 8005b76:	6145                	addi	sp,sp,48
 8005b78:	8082                	ret

08005b7a <append_newLine>:

void append_newLine(char *string, int length) {
    string[length-1] = '\n';
 8005b7a:	95aa                	add	a1,a1,a0
 8005b7c:	47a9                	li	a5,10
 8005b7e:	fef58fa3          	sb	a5,-1(a1)
    string[length] = '\0'; // Add a null terminator at the new end
 8005b82:	00058023          	sb	zero,0(a1)
}
 8005b86:	8082                	ret

08005b88 <millis>:

int millis(void) {
 8005b88:	1141                	addi	sp,sp,-16
 8005b8a:	c606                	sw	ra,12(sp)
 8005b8c:	c422                	sw	s0,8(sp)
 8005b8e:	c226                	sw	s1,4(sp)
    uint64_t mtime = get_timer_value();
 8005b90:	ffffc097          	auipc	ra,0xffffc
 8005b94:	080080e7          	jalr	128(ra) # 8001c10 <get_timer_value>
    return ((mtime * 4000.0) / SystemCoreClock); // Adjusted for seconds and milliseconds
 8005b98:	00001097          	auipc	ra,0x1
 8005b9c:	34e080e7          	jalr	846(ra) # 8006ee6 <__floatundidf>
 8005ba0:	080007b7          	lui	a5,0x8000
 8005ba4:	4987a603          	lw	a2,1176(a5) # 8000498 <_std_dev_req+0x108>
 8005ba8:	49c7a683          	lw	a3,1180(a5)
 8005bac:	00001097          	auipc	ra,0x1
 8005bb0:	e34080e7          	jalr	-460(ra) # 80069e0 <__muldf3>
 8005bb4:	200007b7          	lui	a5,0x20000
 8005bb8:	842a                	mv	s0,a0
 8005bba:	4e87a503          	lw	a0,1256(a5) # 200004e8 <SystemCoreClock>
 8005bbe:	84ae                	mv	s1,a1
 8005bc0:	00001097          	auipc	ra,0x1
 8005bc4:	2d0080e7          	jalr	720(ra) # 8006e90 <__floatunsidf>
 8005bc8:	862a                	mv	a2,a0
 8005bca:	86ae                	mv	a3,a1
 8005bcc:	8522                	mv	a0,s0
 8005bce:	85a6                	mv	a1,s1
 8005bd0:	00001097          	auipc	ra,0x1
 8005bd4:	826080e7          	jalr	-2010(ra) # 80063f6 <__divdf3>
 8005bd8:	00001097          	auipc	ra,0x1
 8005bdc:	254080e7          	jalr	596(ra) # 8006e2c <__fixdfsi>
 8005be0:	40b2                	lw	ra,12(sp)
 8005be2:	4422                	lw	s0,8(sp)
 8005be4:	4492                	lw	s1,4(sp)
 8005be6:	0141                	addi	sp,sp,16
 8005be8:	8082                	ret

08005bea <init_q>:
#include "queue.h"

Buf_queue w;

void init_q(void){
    w.memorySize  = STRING_QUEUE_SIZE;
 8005bea:	200057b7          	lui	a5,0x20005
 8005bee:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
 8005bf2:	02000713          	li	a4,32
 8005bf6:	c398                	sw	a4,0(a5)
    w.size        = SIZE_INIT;
 8005bf8:	0007a223          	sw	zero,4(a5)
    w.head        = HEAD_INIT;
 8005bfc:	0007a423          	sw	zero,8(a5)
    w.tail        = TAIL_INIT;
 8005c00:	0007a623          	sw	zero,12(a5)
    w.tail_string = TAIL_INIT;
 8005c04:	0007a823          	sw	zero,16(a5)
}
 8005c08:	8082                	ret

08005c0a <enqueue_string>:

int enqueue_string(char *string) {
    // Check if the queue is already full.
    if (w.size == w.memorySize) {
 8005c0a:	200017b7          	lui	a5,0x20001
 8005c0e:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005c12:	6691                	lui	a3,0x4
 8005c14:	9736                	add	a4,a4,a3
 8005c16:	00072883          	lw	a7,0(a4)
 8005c1a:	4358                	lw	a4,4(a4)
 8005c1c:	5f078593          	addi	a1,a5,1520
 8005c20:	200057b7          	lui	a5,0x20005
 8005c24:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
        w.buf[w.tail][w.tail_string] = *string;
        string++; // Move to the next character in 'string'.
        w.tail_string++; // Move to the next position in the current buffer.

        // If the current buffer is full (512 characters), wrap around to the next buffer.
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8005c28:	1ff00e13          	li	t3,511
    if (w.size == w.memorySize) {
 8005c2c:	03171c63          	bne	a4,a7,8005c64 <enqueue_string+0x5a>
        return 0; // Return 0 to indicate that the queue is full.
 8005c30:	4501                	li	a0,0
 8005c32:	8082                	ret
        w.buf[w.tail][w.tail_string] = *string;
 8005c34:	47d8                	lw	a4,12(a5)
 8005c36:	4b94                	lw	a3,16(a5)
        string++; // Move to the next character in 'string'.
 8005c38:	0505                	addi	a0,a0,1
        w.buf[w.tail][w.tail_string] = *string;
 8005c3a:	00971813          	slli	a6,a4,0x9
 8005c3e:	982e                	add	a6,a6,a1
 8005c40:	00d80eb3          	add	t4,a6,a3
        w.tail_string++; // Move to the next position in the current buffer.
 8005c44:	0685                	addi	a3,a3,1
        w.buf[w.tail][w.tail_string] = *string;
 8005c46:	006e8023          	sb	t1,0(t4)
        w.tail_string++; // Move to the next position in the current buffer.
 8005c4a:	cb94                	sw	a3,16(a5)
        if (w.tail_string == MAX_STRING_SIZE - 1) {
 8005c4c:	01c69c63          	bne	a3,t3,8005c64 <enqueue_string+0x5a>
            w.buf[w.tail][w.tail_string] = '\0';
            w.tail_string = 0; // Reset the buffer position.
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8005c50:	0705                	addi	a4,a4,1
 8005c52:	03176733          	rem	a4,a4,a7
            w.size++; // Increment the size of the queue.
 8005c56:	0605                	addi	a2,a2,1
            w.buf[w.tail][w.tail_string] = '\0';
 8005c58:	1e080fa3          	sb	zero,511(a6)
            w.tail_string = 0; // Reset the buffer position.
 8005c5c:	0007a823          	sw	zero,16(a5)
            w.size++; // Increment the size of the queue.
 8005c60:	c3d0                	sw	a2,4(a5)
            w.tail = (w.tail + 1) % w.memorySize; // Move to the next buffer.
 8005c62:	c7d8                	sw	a4,12(a5)
    while (*string != '\0' && w.size != w.memorySize) {
 8005c64:	00054303          	lbu	t1,0(a0)
 8005c68:	00030563          	beqz	t1,8005c72 <enqueue_string+0x68>
 8005c6c:	43d0                	lw	a2,4(a5)
 8005c6e:	fcc893e3          	bne	a7,a2,8005c34 <enqueue_string+0x2a>
        }
    }

    return 1; // Return 1 to indicate successful enqueuing.
 8005c72:	4505                	li	a0,1
}
 8005c74:	8082                	ret

08005c76 <queue_str_len>:
    return str_len; // Return the length of the concatenated string.
}

int queue_str_len(void) {
    return w.size; // Return the size of the queue.
}
 8005c76:	200057b7          	lui	a5,0x20005
 8005c7a:	5f078793          	addi	a5,a5,1520 # 200055f0 <w+0x4000>
 8005c7e:	43c8                	lw	a0,4(a5)
 8005c80:	8082                	ret

08005c82 <fuseStrings>:
}

int fuseStrings(char *str1, const char *str2) {
    char *start = str1;  // Save the starting position of str1
    // Find the end of the first string
    while (*str1 != '\0') {
 8005c82:	87aa                	mv	a5,a0
 8005c84:	0007c703          	lbu	a4,0(a5)
 8005c88:	eb09                	bnez	a4,8005c9a <fuseStrings+0x18>
        str1++;
    }
    // Copy characters from the second string to the end of the first string
    while (*str2 != '\0') {
 8005c8a:	0005c703          	lbu	a4,0(a1)
 8005c8e:	eb01                	bnez	a4,8005c9e <fuseStrings+0x1c>
        *str1 = *str2;
        str1++;
        str2++;
    }
    // Add the null terminator to mark the end of the concatenated string
    *str1 = '\0';
 8005c90:	00078023          	sb	zero,0(a5)
    // Calculate and return the length of the concatenated string
    return str1 - start;
}
 8005c94:	40a78533          	sub	a0,a5,a0
 8005c98:	8082                	ret
        str1++;
 8005c9a:	0785                	addi	a5,a5,1
 8005c9c:	b7e5                	j	8005c84 <fuseStrings+0x2>
        *str1 = *str2;
 8005c9e:	00e78023          	sb	a4,0(a5)
        str2++;
 8005ca2:	0585                	addi	a1,a1,1
        str1++;
 8005ca4:	0785                	addi	a5,a5,1
        str2++;
 8005ca6:	b7d5                	j	8005c8a <fuseStrings+0x8>

08005ca8 <dequeue_string>:
    if (w.size == 0) {
 8005ca8:	200017b7          	lui	a5,0x20001
 8005cac:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005cb0:	6691                	lui	a3,0x4
int dequeue_string(char *string, int num_of_blocks) {
 8005cb2:	1101                	addi	sp,sp,-32
    if (w.size == 0) {
 8005cb4:	9736                	add	a4,a4,a3
int dequeue_string(char *string, int num_of_blocks) {
 8005cb6:	ca26                	sw	s1,20(sp)
    if (w.size == 0) {
 8005cb8:	4344                	lw	s1,4(a4)
int dequeue_string(char *string, int num_of_blocks) {
 8005cba:	ce06                	sw	ra,28(sp)
 8005cbc:	cc22                	sw	s0,24(sp)
 8005cbe:	c84a                	sw	s2,16(sp)
 8005cc0:	c64e                	sw	s3,12(sp)
 8005cc2:	c452                	sw	s4,8(sp)
 8005cc4:	c256                	sw	s5,4(sp)
    if (w.size == 0) {
 8005cc6:	cc99                	beqz	s1,8005ce4 <dequeue_string+0x3c>
    } else if (num_of_blocks > w.size) {
 8005cc8:	04b4cc63          	blt	s1,a1,8005d20 <dequeue_string+0x78>
 8005ccc:	20005437          	lui	s0,0x20005
 8005cd0:	5f078993          	addi	s3,a5,1520
 8005cd4:	5f040413          	addi	s0,s0,1520 # 200055f0 <w+0x4000>
 8005cd8:	892e                	mv	s2,a1
 8005cda:	8aaa                	mv	s5,a0
    int blocks_dequeued = 0; // Track the number of blocks dequeued
 8005cdc:	4a01                	li	s4,0
    int str_len = 0;
 8005cde:	4481                	li	s1,0
    while (blocks_dequeued < num_of_blocks) {
 8005ce0:	012a4c63          	blt	s4,s2,8005cf8 <dequeue_string+0x50>
}
 8005ce4:	40f2                	lw	ra,28(sp)
 8005ce6:	4462                	lw	s0,24(sp)
 8005ce8:	8526                	mv	a0,s1
 8005cea:	4942                	lw	s2,16(sp)
 8005cec:	44d2                	lw	s1,20(sp)
 8005cee:	49b2                	lw	s3,12(sp)
 8005cf0:	4a22                	lw	s4,8(sp)
 8005cf2:	4a92                	lw	s5,4(sp)
 8005cf4:	6105                	addi	sp,sp,32
 8005cf6:	8082                	ret
        str_len += fuseStrings(string, w.buf[w.head]);
 8005cf8:	440c                	lw	a1,8(s0)
 8005cfa:	8556                	mv	a0,s5
        blocks_dequeued++; // Increment the number of blocks dequeued.
 8005cfc:	0a05                	addi	s4,s4,1
        str_len += fuseStrings(string, w.buf[w.head]);
 8005cfe:	05a6                	slli	a1,a1,0x9
 8005d00:	95ce                	add	a1,a1,s3
 8005d02:	00000097          	auipc	ra,0x0
 8005d06:	f80080e7          	jalr	-128(ra) # 8005c82 <fuseStrings>
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 8005d0a:	441c                	lw	a5,8(s0)
 8005d0c:	4018                	lw	a4,0(s0)
        str_len += fuseStrings(string, w.buf[w.head]);
 8005d0e:	94aa                	add	s1,s1,a0
        w.head = (w.head + 1) % w.memorySize; // Move to the next element in the queue.
 8005d10:	0785                	addi	a5,a5,1
 8005d12:	02e7e7b3          	rem	a5,a5,a4
 8005d16:	c41c                	sw	a5,8(s0)
        w.size--; // Decrement the size of the queue.
 8005d18:	405c                	lw	a5,4(s0)
 8005d1a:	17fd                	addi	a5,a5,-1
 8005d1c:	c05c                	sw	a5,4(s0)
        blocks_dequeued++; // Increment the number of blocks dequeued.
 8005d1e:	b7c9                	j	8005ce0 <dequeue_string+0x38>
        return -1; // Return -1 to indicate that there are not enough blocks in the queue.
 8005d20:	54fd                	li	s1,-1
 8005d22:	b7c9                	j	8005ce4 <dequeue_string+0x3c>

08005d24 <empty_string_queue>:
int empty_string_queue(char *dest, int max_block_size){
 8005d24:	1101                	addi	sp,sp,-32
 8005d26:	ca26                	sw	s1,20(sp)
 8005d28:	c84a                	sw	s2,16(sp)
 8005d2a:	c64e                	sw	s3,12(sp)
 8005d2c:	892a                	mv	s2,a0
 8005d2e:	ce06                	sw	ra,28(sp)
 8005d30:	cc22                	sw	s0,24(sp)
 8005d32:	89ae                	mv	s3,a1
    for(int i = max_block_size; i > 0; i--){
 8005d34:	84ae                	mv	s1,a1
    int str_len = 0;
 8005d36:	4501                	li	a0,0
    for(int i = max_block_size; i > 0; i--){
 8005d38:	04904263          	bgtz	s1,8005d7c <empty_string_queue+0x58>
    int blocks_dequeued = 0;
 8005d3c:	4481                	li	s1,0
    if(w.size == 0 && blocks_dequeued < max_block_size){
 8005d3e:	200015b7          	lui	a1,0x20001
 8005d42:	5f058593          	addi	a1,a1,1520 # 200015f0 <w>
 8005d46:	6411                	lui	s0,0x4
 8005d48:	942e                	add	s0,s0,a1
 8005d4a:	405c                	lw	a5,4(s0)
 8005d4c:	e38d                	bnez	a5,8005d6e <empty_string_queue+0x4a>
 8005d4e:	0334d063          	bge	s1,s3,8005d6e <empty_string_queue+0x4a>
        w.buf[w.head][w.tail_string] = '\0';
 8005d52:	4418                	lw	a4,8(s0)
 8005d54:	481c                	lw	a5,16(s0)
        str_len = fuseStrings(dest, w.buf[w.head]);
 8005d56:	854a                	mv	a0,s2
        w.buf[w.head][w.tail_string] = '\0';
 8005d58:	0726                	slli	a4,a4,0x9
 8005d5a:	95ba                	add	a1,a1,a4
 8005d5c:	97ae                	add	a5,a5,a1
 8005d5e:	00078023          	sb	zero,0(a5)
        str_len = fuseStrings(dest, w.buf[w.head]);
 8005d62:	00000097          	auipc	ra,0x0
 8005d66:	f20080e7          	jalr	-224(ra) # 8005c82 <fuseStrings>
        w.tail_string = 0;
 8005d6a:	00042823          	sw	zero,16(s0) # 4010 <__stack_size+0x3010>
}
 8005d6e:	40f2                	lw	ra,28(sp)
 8005d70:	4462                	lw	s0,24(sp)
 8005d72:	44d2                	lw	s1,20(sp)
 8005d74:	4942                	lw	s2,16(sp)
 8005d76:	49b2                	lw	s3,12(sp)
 8005d78:	6105                	addi	sp,sp,32
 8005d7a:	8082                	ret
        str_len = dequeue_string(dest,i);
 8005d7c:	85a6                	mv	a1,s1
 8005d7e:	854a                	mv	a0,s2
 8005d80:	00000097          	auipc	ra,0x0
 8005d84:	f28080e7          	jalr	-216(ra) # 8005ca8 <dequeue_string>
        if(str_len > 0){
 8005d88:	faa04be3          	bgtz	a0,8005d3e <empty_string_queue+0x1a>
    for(int i = max_block_size; i > 0; i--){
 8005d8c:	14fd                	addi	s1,s1,-1
 8005d8e:	b76d                	j	8005d38 <empty_string_queue+0x14>

08005d90 <clear_queues>:

void clear_queues(void) {
    // Reset the main queue (w)
    w.size = SIZE_INIT;
 8005d90:	200017b7          	lui	a5,0x20001
 8005d94:	5f078713          	addi	a4,a5,1520 # 200015f0 <w>
 8005d98:	6691                	lui	a3,0x4
 8005d9a:	9736                	add	a4,a4,a3
 8005d9c:	00072223          	sw	zero,4(a4)
    w.head = HEAD_INIT;
 8005da0:	00072423          	sw	zero,8(a4)
    w.tail = TAIL_INIT;
 8005da4:	00072623          	sw	zero,12(a4)

    // Reset the string queue (w)
    w.size = SIZE_INIT;
    w.head = HEAD_INIT;
    w.tail = TAIL_INIT;
    w.tail_string = TAIL_INIT;
 8005da8:	00072823          	sw	zero,16(a4)

    // Clear values in the string queue
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8005dac:	5f078793          	addi	a5,a5,1520
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8005db0:	20000613          	li	a2,512
 8005db4:	4681                	li	a3,0
            w.buf[i][j] = '\0';
 8005db6:	00d785b3          	add	a1,a5,a3
 8005dba:	00058023          	sb	zero,0(a1)
        for (int j = 0; j < MAX_STRING_SIZE; j++) {
 8005dbe:	0685                	addi	a3,a3,1
 8005dc0:	fec69be3          	bne	a3,a2,8005db6 <clear_queues+0x26>
 8005dc4:	20078793          	addi	a5,a5,512
    for (int i = 0; i < STRING_QUEUE_SIZE; i++) {
 8005dc8:	fef716e3          	bne	a4,a5,8005db4 <clear_queues+0x24>
        }
    }
}
 8005dcc:	8082                	ret

08005dce <init_radio>:


char rx_radio_buffer[1024] = {'\0'};
char tx_radio_buffer[1024] = {'\0'};

void init_radio(){
 8005dce:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 8005dd0:	50000513          	li	a0,1280
void init_radio(){
 8005dd4:	d606                	sw	ra,44(sp)
 8005dd6:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8005dd8:	ffffb097          	auipc	ra,0xffffb
 8005ddc:	2b8080e7          	jalr	696(ra) # 8001090 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOB);
 8005de0:	60300513          	li	a0,1539
 8005de4:	ffffb097          	auipc	ra,0xffffb
 8005de8:	2ac080e7          	jalr	684(ra) # 8001090 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART2);
 8005dec:	71200513          	li	a0,1810
 8005df0:	ffffb097          	auipc	ra,0xffffb
 8005df4:	2a0080e7          	jalr	672(ra) # 8001090 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOB, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_10); //PP for no half duplex
 8005df8:	40011437          	lui	s0,0x40011
 8005dfc:	c0040513          	addi	a0,s0,-1024 # 40010c00 <_sp+0x20008c00>
 8005e00:	40000693          	li	a3,1024
 8005e04:	460d                	li	a2,3
 8005e06:	45e1                	li	a1,24
 8005e08:	ffffb097          	auipc	ra,0xffffb
 8005e0c:	1d2080e7          	jalr	466(ra) # 8000fda <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOB, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
 8005e10:	6685                	lui	a3,0x1
 8005e12:	80068693          	addi	a3,a3,-2048 # 800 <__dbg_stack_size+0x800>
 8005e16:	460d                	li	a2,3
 8005e18:	4591                	li	a1,4
 8005e1a:	c0040513          	addi	a0,s0,-1024
 8005e1e:	ffffb097          	auipc	ra,0xffffb
 8005e22:	1bc080e7          	jalr	444(ra) # 8000fda <gpio_init>

    /* USART configure */
    usart_deinit(USART2);
 8005e26:	40005437          	lui	s0,0x40005
 8005e2a:	80040513          	addi	a0,s0,-2048 # 40004800 <_sp+0x1fffc800>
 8005e2e:	ffffc097          	auipc	ra,0xffffc
 8005e32:	976080e7          	jalr	-1674(ra) # 80017a4 <usart_deinit>
    usart_baudrate_set(USART2, 1200);
 8005e36:	80040513          	addi	a0,s0,-2048
 8005e3a:	4b000593          	li	a1,1200
 8005e3e:	ffffc097          	auipc	ra,0xffffc
 8005e42:	a08080e7          	jalr	-1528(ra) # 8001846 <usart_baudrate_set>
    usart_word_length_set(USART2, USART_WL_8BIT);
 8005e46:	80040513          	addi	a0,s0,-2048
 8005e4a:	4581                	li	a1,0
 8005e4c:	ffffc097          	auipc	ra,0xffffc
 8005e50:	a76080e7          	jalr	-1418(ra) # 80018c2 <usart_word_length_set>
    usart_stop_bit_set(USART2, USART_STB_1BIT);
 8005e54:	80040513          	addi	a0,s0,-2048
 8005e58:	4581                	li	a1,0
 8005e5a:	ffffc097          	auipc	ra,0xffffc
 8005e5e:	a7a080e7          	jalr	-1414(ra) # 80018d4 <usart_stop_bit_set>
    usart_parity_config(USART2, USART_PM_NONE);
 8005e62:	80040513          	addi	a0,s0,-2048
 8005e66:	4581                	li	a1,0
 8005e68:	ffffc097          	auipc	ra,0xffffc
 8005e6c:	a4a080e7          	jalr	-1462(ra) # 80018b2 <usart_parity_config>
    usart_hardware_flow_rts_config(USART2, USART_RTS_DISABLE);
 8005e70:	80040513          	addi	a0,s0,-2048
 8005e74:	4581                	li	a1,0
 8005e76:	ffffc097          	auipc	ra,0xffffc
 8005e7a:	a8e080e7          	jalr	-1394(ra) # 8001904 <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART2, USART_CTS_DISABLE);
 8005e7e:	80040513          	addi	a0,s0,-2048
 8005e82:	4581                	li	a1,0
 8005e84:	ffffc097          	auipc	ra,0xffffc
 8005e88:	a8c080e7          	jalr	-1396(ra) # 8001910 <usart_hardware_flow_cts_config>
    usart_receive_config(USART2, USART_RECEIVE_ENABLE);
 8005e8c:	80040513          	addi	a0,s0,-2048
 8005e90:	4591                	li	a1,4
 8005e92:	ffffc097          	auipc	ra,0xffffc
 8005e96:	a68080e7          	jalr	-1432(ra) # 80018fa <usart_receive_config>
    usart_transmit_config(USART2, USART_TRANSMIT_ENABLE);
 8005e9a:	45a1                	li	a1,8
 8005e9c:	80040513          	addi	a0,s0,-2048
 8005ea0:	ffffc097          	auipc	ra,0xffffc
 8005ea4:	a50080e7          	jalr	-1456(ra) # 80018f0 <usart_transmit_config>

    usart_enable(USART2);
 8005ea8:	80040513          	addi	a0,s0,-2048
 8005eac:	ffffc097          	auipc	ra,0xffffc
 8005eb0:	a3a080e7          	jalr	-1478(ra) # 80018e6 <usart_enable>

    usart_dma_transmit_config(USART2, USART_DENT_ENABLE);
 8005eb4:	80040513          	addi	a0,s0,-2048
 8005eb8:	08000593          	li	a1,128
 8005ebc:	ffffc097          	auipc	ra,0xffffc
 8005ec0:	a6c080e7          	jalr	-1428(ra) # 8001928 <usart_dma_transmit_config>
    usart_dma_receive_config(USART2, USART_DENR_ENABLE);
 8005ec4:	80040513          	addi	a0,s0,-2048
 8005ec8:	04000593          	li	a1,64
 8005ecc:	ffffc097          	auipc	ra,0xffffc
 8005ed0:	a50080e7          	jalr	-1456(ra) # 800191c <usart_dma_receive_config>

    dma_deinit(DMA0, DMA_CH2);
 8005ed4:	4589                	li	a1,2
 8005ed6:	40020537          	lui	a0,0x40020
 8005eda:	ffffb097          	auipc	ra,0xffffb
 8005ede:	f74080e7          	jalr	-140(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_radio_buffer;
 8005ee2:	200007b7          	lui	a5,0x20000
 8005ee6:	55478793          	addi	a5,a5,1364 # 20000554 <rx_radio_buffer>
 8005eea:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = 1024;
 8005eec:	40000793          	li	a5,1024
 8005ef0:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005ef2:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005ef4:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005ef6:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005ef8:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005efc:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005f00:	4589                	li	a1,2
 8005f02:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f06:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005f0a:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8005f0c:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8005f0e:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8005f10:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH2, &dma_init_struct);
 8005f14:	ffffb097          	auipc	ra,0xffffb
 8005f18:	f7e080e7          	jalr	-130(ra) # 8000e92 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH2);
 8005f1c:	4589                	li	a1,2
 8005f1e:	40020537          	lui	a0,0x40020
 8005f22:	ffffb097          	auipc	ra,0xffffb
 8005f26:	022080e7          	jalr	34(ra) # 8000f44 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH2);
 8005f2a:	4589                	li	a1,2
 8005f2c:	40020537          	lui	a0,0x40020
 8005f30:	ffffb097          	auipc	ra,0xffffb
 8005f34:	03a080e7          	jalr	58(ra) # 8000f6a <dma_channel_enable>
}
 8005f38:	50b2                	lw	ra,44(sp)
 8005f3a:	5422                	lw	s0,40(sp)
 8005f3c:	6145                	addi	sp,sp,48
 8005f3e:	8082                	ret

08005f40 <send_radio>:
        return i;
    }
    return 0;
}

size_t send_radio(char* message, uint32_t size){
 8005f40:	7179                	addi	sp,sp,-48
 8005f42:	d422                	sw	s0,40(sp)
 8005f44:	20001437          	lui	s0,0x20001
 8005f48:	d226                	sw	s1,36(sp)
 8005f4a:	d606                	sw	ra,44(sp)
 8005f4c:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < 1024; i++) {
 8005f4e:	4781                	li	a5,0
 8005f50:	95440413          	addi	s0,s0,-1708 # 20000954 <tx_radio_buffer>
 8005f54:	40000713          	li	a4,1024
 8005f58:	00978463          	beq	a5,s1,8005f60 <send_radio+0x20>
 8005f5c:	06e79663          	bne	a5,a4,8005fc8 <send_radio+0x88>
        tx_radio_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH1);
 8005f60:	4585                	li	a1,1
 8005f62:	40020537          	lui	a0,0x40020
 8005f66:	ffffb097          	auipc	ra,0xffffb
 8005f6a:	ee8080e7          	jalr	-280(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_radio_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART2);
 8005f6e:	400057b7          	lui	a5,0x40005
 8005f72:	80478793          	addi	a5,a5,-2044 # 40004804 <_sp+0x1fffc804>
 8005f76:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8005f78:	678d                	lui	a5,0x3
 8005f7a:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f7c:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f80:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8005f82:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f86:	4585                	li	a1,1
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8005f88:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f8a:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8005f8e:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_radio_buffer;
 8005f92:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 8005f94:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8005f96:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8005f98:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH1, &dma_init_struct);
 8005f9a:	ffffb097          	auipc	ra,0xffffb
 8005f9e:	ef8080e7          	jalr	-264(ra) # 8000e92 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH1);
 8005fa2:	4585                	li	a1,1
 8005fa4:	40020537          	lui	a0,0x40020
 8005fa8:	ffffb097          	auipc	ra,0xffffb
 8005fac:	f9c080e7          	jalr	-100(ra) # 8000f44 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH1);
 8005fb0:	40020537          	lui	a0,0x40020
 8005fb4:	4585                	li	a1,1
 8005fb6:	ffffb097          	auipc	ra,0xffffb
 8005fba:	fb4080e7          	jalr	-76(ra) # 8000f6a <dma_channel_enable>
}
 8005fbe:	50b2                	lw	ra,44(sp)
 8005fc0:	5422                	lw	s0,40(sp)
 8005fc2:	5492                	lw	s1,36(sp)
 8005fc4:	6145                	addi	sp,sp,48
 8005fc6:	8082                	ret
        tx_radio_buffer[i] = message[i];
 8005fc8:	00f506b3          	add	a3,a0,a5
 8005fcc:	0006c603          	lbu	a2,0(a3)
 8005fd0:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < 1024; i++) {
 8005fd4:	0785                	addi	a5,a5,1
        tx_radio_buffer[i] = message[i];
 8005fd6:	00c68023          	sb	a2,0(a3)
 8005fda:	bfbd                	j	8005f58 <send_radio+0x18>

08005fdc <enter_command_mode>:
        output[len - i - 1] = input[i + 1];
    }
    output[len] = '\0';
}

void enter_command_mode(void){
 8005fdc:	1101                	addi	sp,sp,-32
    usb_delay_1ms(1000);
 8005fde:	3e800513          	li	a0,1000
void enter_command_mode(void){
 8005fe2:	ce06                	sw	ra,28(sp)
    usb_delay_1ms(1000);
 8005fe4:	fffff097          	auipc	ra,0xfffff
 8005fe8:	90c080e7          	jalr	-1780(ra) # 80048f0 <usb_delay_1ms>
    char command_mode[] = "$$$";
 8005fec:	002427b7          	lui	a5,0x242
 8005ff0:	42478793          	addi	a5,a5,1060 # 242424 <__stack_size+0x241424>
    lio_send_bt(command_mode, 3);
 8005ff4:	458d                	li	a1,3
 8005ff6:	0068                	addi	a0,sp,12
    char command_mode[] = "$$$";
 8005ff8:	c63e                	sw	a5,12(sp)
    lio_send_bt(command_mode, 3);
 8005ffa:	00000097          	auipc	ra,0x0
 8005ffe:	254080e7          	jalr	596(ra) # 800624e <lio_send_bt>
    usb_delay_1ms(1000);
 8006002:	3e800513          	li	a0,1000
 8006006:	fffff097          	auipc	ra,0xfffff
 800600a:	8ea080e7          	jalr	-1814(ra) # 80048f0 <usb_delay_1ms>
    command_mode[0] = '\r';
 800600e:	47b5                	li	a5,13
    lio_send_bt(command_mode, 1);
 8006010:	0068                	addi	a0,sp,12
 8006012:	4585                	li	a1,1
    command_mode[0] = '\r';
 8006014:	00f10623          	sb	a5,12(sp)
    lio_send_bt(command_mode, 1);
 8006018:	00000097          	auipc	ra,0x0
 800601c:	236080e7          	jalr	566(ra) # 800624e <lio_send_bt>
}
 8006020:	40f2                	lw	ra,28(sp)
 8006022:	6105                	addi	sp,sp,32
 8006024:	8082                	ret

08006026 <lio_init_bt>:

void lio_init_bt(){
 8006026:	7179                	addi	sp,sp,-48
    dma_parameter_struct dma_init_struct;
    /* enable DMA0 */
    rcu_periph_clock_enable(RCU_DMA0);
 8006028:	50000513          	li	a0,1280
void lio_init_bt(){
 800602c:	d606                	sw	ra,44(sp)
 800602e:	d422                	sw	s0,40(sp)
    rcu_periph_clock_enable(RCU_DMA0);
 8006030:	ffffb097          	auipc	ra,0xffffb
 8006034:	060080e7          	jalr	96(ra) # 8001090 <rcu_periph_clock_enable>
    /* initialize USART */
    rcu_periph_clock_enable(RCU_GPIOA);
 8006038:	60200513          	li	a0,1538
 800603c:	ffffb097          	auipc	ra,0xffffb
 8006040:	054080e7          	jalr	84(ra) # 8001090 <rcu_periph_clock_enable>

    /* enable USART clock */
    rcu_periph_clock_enable(RCU_USART0);
 8006044:	60e00513          	li	a0,1550
 8006048:	ffffb097          	auipc	ra,0xffffb
 800604c:	048080e7          	jalr	72(ra) # 8001090 <rcu_periph_clock_enable>

    /* connect port to USARTx_Tx */
    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);
 8006050:	40011437          	lui	s0,0x40011
 8006054:	80040513          	addi	a0,s0,-2048 # 40010800 <_sp+0x20008800>
 8006058:	20000693          	li	a3,512
 800605c:	460d                	li	a2,3
 800605e:	45e1                	li	a1,24
 8006060:	ffffb097          	auipc	ra,0xffffb
 8006064:	f7a080e7          	jalr	-134(ra) # 8000fda <gpio_init>

    /* connect port to USARTx_Rx */
    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);
 8006068:	40000693          	li	a3,1024
 800606c:	460d                	li	a2,3
 800606e:	4591                	li	a1,4
 8006070:	80040513          	addi	a0,s0,-2048
 8006074:	ffffb097          	auipc	ra,0xffffb
 8006078:	f66080e7          	jalr	-154(ra) # 8000fda <gpio_init>

    /* USART configure */
    usart_deinit(USART0);
 800607c:	40014437          	lui	s0,0x40014
 8006080:	80040513          	addi	a0,s0,-2048 # 40013800 <_sp+0x2000b800>
 8006084:	ffffb097          	auipc	ra,0xffffb
 8006088:	720080e7          	jalr	1824(ra) # 80017a4 <usart_deinit>
    usart_baudrate_set(USART0, 115200U);
 800608c:	65f1                	lui	a1,0x1c
 800608e:	80040513          	addi	a0,s0,-2048
 8006092:	20058593          	addi	a1,a1,512 # 1c200 <__stack_size+0x1b200>
 8006096:	ffffb097          	auipc	ra,0xffffb
 800609a:	7b0080e7          	jalr	1968(ra) # 8001846 <usart_baudrate_set>
    usart_word_length_set(USART0, USART_WL_8BIT);
 800609e:	80040513          	addi	a0,s0,-2048
 80060a2:	4581                	li	a1,0
 80060a4:	ffffc097          	auipc	ra,0xffffc
 80060a8:	81e080e7          	jalr	-2018(ra) # 80018c2 <usart_word_length_set>
    usart_stop_bit_set(USART0, USART_STB_1BIT);
 80060ac:	80040513          	addi	a0,s0,-2048
 80060b0:	4581                	li	a1,0
 80060b2:	ffffc097          	auipc	ra,0xffffc
 80060b6:	822080e7          	jalr	-2014(ra) # 80018d4 <usart_stop_bit_set>
    usart_parity_config(USART0, USART_PM_NONE);
 80060ba:	80040513          	addi	a0,s0,-2048
 80060be:	4581                	li	a1,0
 80060c0:	ffffb097          	auipc	ra,0xffffb
 80060c4:	7f2080e7          	jalr	2034(ra) # 80018b2 <usart_parity_config>
    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);
 80060c8:	80040513          	addi	a0,s0,-2048
 80060cc:	4581                	li	a1,0
 80060ce:	ffffc097          	auipc	ra,0xffffc
 80060d2:	836080e7          	jalr	-1994(ra) # 8001904 <usart_hardware_flow_rts_config>
    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);
 80060d6:	80040513          	addi	a0,s0,-2048
 80060da:	4581                	li	a1,0
 80060dc:	ffffc097          	auipc	ra,0xffffc
 80060e0:	834080e7          	jalr	-1996(ra) # 8001910 <usart_hardware_flow_cts_config>
    usart_receive_config(USART0, USART_RECEIVE_ENABLE);
 80060e4:	80040513          	addi	a0,s0,-2048
 80060e8:	4591                	li	a1,4
 80060ea:	ffffc097          	auipc	ra,0xffffc
 80060ee:	810080e7          	jalr	-2032(ra) # 80018fa <usart_receive_config>
    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);
 80060f2:	45a1                	li	a1,8
 80060f4:	80040513          	addi	a0,s0,-2048
 80060f8:	ffffb097          	auipc	ra,0xffffb
 80060fc:	7f8080e7          	jalr	2040(ra) # 80018f0 <usart_transmit_config>
    usart_enable(USART0);
 8006100:	80040513          	addi	a0,s0,-2048
 8006104:	ffffb097          	auipc	ra,0xffffb
 8006108:	7e2080e7          	jalr	2018(ra) # 80018e6 <usart_enable>

    usart_dma_transmit_config(USART0, USART_DENT_ENABLE);
 800610c:	80040513          	addi	a0,s0,-2048
 8006110:	08000593          	li	a1,128
 8006114:	ffffc097          	auipc	ra,0xffffc
 8006118:	814080e7          	jalr	-2028(ra) # 8001928 <usart_dma_transmit_config>
    usart_dma_receive_config(USART0, USART_DENR_ENABLE);
 800611c:	80040513          	addi	a0,s0,-2048
 8006120:	04000593          	li	a1,64
 8006124:	ffffb097          	auipc	ra,0xffffb
 8006128:	7f8080e7          	jalr	2040(ra) # 800191c <usart_dma_receive_config>

   

    dma_deinit(DMA0, DMA_CH4);
 800612c:	4591                	li	a1,4
 800612e:	40020537          	lui	a0,0x40020
 8006132:	ffffb097          	auipc	ra,0xffffb
 8006136:	d1c080e7          	jalr	-740(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
    dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 800613a:	200017b7          	lui	a5,0x20001
 800613e:	d5478793          	addi	a5,a5,-684 # 20000d54 <rx_dma_buffer>
 8006142:	c63e                	sw	a5,12(sp)
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 8006144:	40000793          	li	a5,1024
 8006148:	ca3e                	sw	a5,20(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 800614a:	678d                	lui	a5,0x3
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800614c:	0050                	addi	a2,sp,4
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 800614e:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006150:	80440413          	addi	s0,s0,-2044
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006154:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006158:	4591                	li	a1,4
 800615a:	40020537          	lui	a0,0x40020
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800615e:	00f11e23          	sh	a5,28(sp)
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 8006162:	c222                	sw	s0,4(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8006164:	c402                	sw	zero,8(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8006166:	c802                	sw	zero,16(sp)
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 8006168:	00010f23          	sb	zero,30(sp)
    dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800616c:	ffffb097          	auipc	ra,0xffffb
 8006170:	d26080e7          	jalr	-730(ra) # 8000e92 <dma_init>
        /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH4);
 8006174:	4591                	li	a1,4
 8006176:	40020537          	lui	a0,0x40020
 800617a:	ffffb097          	auipc	ra,0xffffb
 800617e:	dca080e7          	jalr	-566(ra) # 8000f44 <dma_circulation_disable>
        /* enable DMA channel4 */
    dma_channel_enable(DMA0, DMA_CH4);
 8006182:	4591                	li	a1,4
 8006184:	40020537          	lui	a0,0x40020
 8006188:	ffffb097          	auipc	ra,0xffffb
 800618c:	de2080e7          	jalr	-542(ra) # 8000f6a <dma_channel_enable>
}
 8006190:	50b2                	lw	ra,44(sp)
 8006192:	5422                	lw	s0,40(sp)
 8006194:	6145                	addi	sp,sp,48
 8006196:	8082                	ret

08006198 <lio_read_bt>:

size_t lio_read_bt(char* buffer, uint32_t size){
    if(rx_dma_buffer[0] != 0)
 8006198:	20001737          	lui	a4,0x20001
 800619c:	d5474783          	lbu	a5,-684(a4) # 20000d54 <rx_dma_buffer>
size_t lio_read_bt(char* buffer, uint32_t size){
 80061a0:	7179                	addi	sp,sp,-48
 80061a2:	d422                	sw	s0,40(sp)
 80061a4:	d606                	sw	ra,44(sp)
 80061a6:	d226                	sw	s1,36(sp)
        dma_circulation_disable(DMA0, DMA_CH4);
        /* enable DMA channel4 */
        dma_channel_enable(DMA0, DMA_CH4);
        return i;
    }
    return 0;
 80061a8:	4401                	li	s0,0
    if(rx_dma_buffer[0] != 0)
 80061aa:	cfc1                	beqz	a5,8006242 <lio_read_bt+0xaa>
 80061ac:	d5470493          	addi	s1,a4,-684
        int i = 0;
 80061b0:	4781                	li	a5,0
    if(rx_dma_buffer[0] != 0)
 80061b2:	d5470713          	addi	a4,a4,-684
        for(; i < LIO_BT_BUFFER_SIZE && rx_dma_buffer[i] != 0 && i < size - 1; i++){
 80061b6:	15fd                	addi	a1,a1,-1
 80061b8:	40000613          	li	a2,1024
 80061bc:	00074683          	lbu	a3,0(a4)
 80061c0:	ce89                	beqz	a3,80061da <lio_read_bt+0x42>
 80061c2:	00b7fc63          	bgeu	a5,a1,80061da <lio_read_bt+0x42>
            buffer[i] = rx_dma_buffer[i];
 80061c6:	00f50833          	add	a6,a0,a5
 80061ca:	00d80023          	sb	a3,0(a6)
            rx_dma_buffer[i] = 0;
 80061ce:	00070023          	sb	zero,0(a4)
        for(; i < LIO_BT_BUFFER_SIZE && rx_dma_buffer[i] != 0 && i < size - 1; i++){
 80061d2:	0785                	addi	a5,a5,1
 80061d4:	0705                	addi	a4,a4,1
 80061d6:	fec793e3          	bne	a5,a2,80061bc <lio_read_bt+0x24>
        buffer[i] = '\0';
 80061da:	953e                	add	a0,a0,a5
 80061dc:	00050023          	sb	zero,0(a0) # 40020000 <_sp+0x20018000>
        dma_deinit(DMA0, DMA_CH4);
 80061e0:	4591                	li	a1,4
 80061e2:	40020537          	lui	a0,0x40020
        buffer[i] = '\0';
 80061e6:	843e                	mv	s0,a5
        dma_deinit(DMA0, DMA_CH4);
 80061e8:	ffffb097          	auipc	ra,0xffffb
 80061ec:	c66080e7          	jalr	-922(ra) # 8000e4e <dma_deinit>
        dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 80061f0:	400147b7          	lui	a5,0x40014
 80061f4:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 80061f8:	c23e                	sw	a5,4(sp)
        dma_init_struct.number = LIO_BT_BUFFER_SIZE;
 80061fa:	40000793          	li	a5,1024
 80061fe:	ca3e                	sw	a5,20(sp)
        dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006200:	678d                	lui	a5,0x3
 8006202:	cc3e                	sw	a5,24(sp)
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 8006204:	0050                	addi	a2,sp,4
        dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006206:	10000793          	li	a5,256
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800620a:	4591                	li	a1,4
 800620c:	40020537          	lui	a0,0x40020
        dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006210:	00f11e23          	sh	a5,28(sp)
        dma_init_struct.memory_addr = (uint32_t)rx_dma_buffer;
 8006214:	c626                	sw	s1,12(sp)
        dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8006216:	c402                	sw	zero,8(sp)
        dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8006218:	c802                	sw	zero,16(sp)
        dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 800621a:	00010f23          	sb	zero,30(sp)
        dma_init(DMA0, DMA_CH4, &dma_init_struct);
 800621e:	ffffb097          	auipc	ra,0xffffb
 8006222:	c74080e7          	jalr	-908(ra) # 8000e92 <dma_init>
        dma_circulation_disable(DMA0, DMA_CH4);
 8006226:	4591                	li	a1,4
 8006228:	40020537          	lui	a0,0x40020
 800622c:	ffffb097          	auipc	ra,0xffffb
 8006230:	d18080e7          	jalr	-744(ra) # 8000f44 <dma_circulation_disable>
        dma_channel_enable(DMA0, DMA_CH4);
 8006234:	4591                	li	a1,4
 8006236:	40020537          	lui	a0,0x40020
 800623a:	ffffb097          	auipc	ra,0xffffb
 800623e:	d30080e7          	jalr	-720(ra) # 8000f6a <dma_channel_enable>
}
 8006242:	8522                	mv	a0,s0
 8006244:	50b2                	lw	ra,44(sp)
 8006246:	5422                	lw	s0,40(sp)
 8006248:	5492                	lw	s1,36(sp)
 800624a:	6145                	addi	sp,sp,48
 800624c:	8082                	ret

0800624e <lio_send_bt>:

size_t lio_send_bt(char* message, uint32_t size){
 800624e:	7179                	addi	sp,sp,-48
 8006250:	d422                	sw	s0,40(sp)
 8006252:	20001437          	lui	s0,0x20001
 8006256:	d226                	sw	s1,36(sp)
 8006258:	d606                	sw	ra,44(sp)
 800625a:	84ae                	mv	s1,a1
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 800625c:	4781                	li	a5,0
 800625e:	15440413          	addi	s0,s0,340 # 20001154 <tx_dma_buffer>
 8006262:	40000713          	li	a4,1024
 8006266:	00978463          	beq	a5,s1,800626e <lio_send_bt+0x20>
 800626a:	06e79663          	bne	a5,a4,80062d6 <lio_send_bt+0x88>
        tx_dma_buffer[i] = message[i];
    }

    dma_parameter_struct dma_init_struct;
    dma_deinit(DMA0, DMA_CH3);
 800626e:	458d                	li	a1,3
 8006270:	40020537          	lui	a0,0x40020
 8006274:	ffffb097          	auipc	ra,0xffffb
 8006278:	bda080e7          	jalr	-1062(ra) # 8000e4e <dma_deinit>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
    dma_init_struct.number = size;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(USART0);
 800627c:	400147b7          	lui	a5,0x40014
 8006280:	80478793          	addi	a5,a5,-2044 # 40013804 <_sp+0x2000b804>
 8006284:	c23e                	sw	a5,4(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8006286:	678d                	lui	a5,0x3
 8006288:	cc3e                	sw	a5,24(sp)
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800628a:	10000793          	li	a5,256
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 800628e:	0050                	addi	a2,sp,4
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 8006290:	00f11e23          	sh	a5,28(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 8006294:	458d                	li	a1,3
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 8006296:	4785                	li	a5,1
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 8006298:	40020537          	lui	a0,0x40020
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 800629c:	00f10f23          	sb	a5,30(sp)
    dma_init_struct.memory_addr = (uint32_t)tx_dma_buffer;
 80062a0:	c622                	sw	s0,12(sp)
    dma_init_struct.number = size;
 80062a2:	ca26                	sw	s1,20(sp)
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 80062a4:	c802                	sw	zero,16(sp)
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 80062a6:	c402                	sw	zero,8(sp)
    dma_init(DMA0, DMA_CH3, &dma_init_struct);
 80062a8:	ffffb097          	auipc	ra,0xffffb
 80062ac:	bea080e7          	jalr	-1046(ra) # 8000e92 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(DMA0, DMA_CH3);
 80062b0:	458d                	li	a1,3
 80062b2:	40020537          	lui	a0,0x40020
 80062b6:	ffffb097          	auipc	ra,0xffffb
 80062ba:	c8e080e7          	jalr	-882(ra) # 8000f44 <dma_circulation_disable>
    /* enable DMA channel3 */
    dma_channel_enable(DMA0, DMA_CH3);
 80062be:	40020537          	lui	a0,0x40020
 80062c2:	458d                	li	a1,3
 80062c4:	ffffb097          	auipc	ra,0xffffb
 80062c8:	ca6080e7          	jalr	-858(ra) # 8000f6a <dma_channel_enable>
}
 80062cc:	50b2                	lw	ra,44(sp)
 80062ce:	5422                	lw	s0,40(sp)
 80062d0:	5492                	lw	s1,36(sp)
 80062d2:	6145                	addi	sp,sp,48
 80062d4:	8082                	ret
        tx_dma_buffer[i] = message[i];
 80062d6:	00f506b3          	add	a3,a0,a5
 80062da:	0006c603          	lbu	a2,0(a3)
 80062de:	00f406b3          	add	a3,s0,a5
    for(int i = 0; i < size && i < LIO_BT_BUFFER_SIZE; i++) {
 80062e2:	0785                	addi	a5,a5,1
        tx_dma_buffer[i] = message[i];
 80062e4:	00c68023          	sb	a2,0(a3)
 80062e8:	bfbd                	j	8006266 <lio_send_bt+0x18>

080062ea <get_state>:

static int current_state = RUNNING;

int get_state(){
    return current_state;
};
 80062ea:	200007b7          	lui	a5,0x20000
 80062ee:	5447a503          	lw	a0,1348(a5) # 20000544 <current_state>
 80062f2:	8082                	ret

080062f4 <set_state>:

void set_state(int state){
    current_state = state;
 80062f4:	200007b7          	lui	a5,0x20000
 80062f8:	54a7a223          	sw	a0,1348(a5) # 20000544 <current_state>
 80062fc:	8082                	ret
	...

08006300 <trap_entry>:
trap_entry:
  // Allocate the stack space
 // addi sp, sp, -19*REGBYTES

  // Save the caller saving registers (context)
  SAVE_CONTEXT
 8006300:	715d                	addi	sp,sp,-80
 8006302:	c006                	sw	ra,0(sp)
 8006304:	c212                	sw	tp,4(sp)
 8006306:	c416                	sw	t0,8(sp)
 8006308:	c61a                	sw	t1,12(sp)
 800630a:	c81e                	sw	t2,16(sp)
 800630c:	ca2a                	sw	a0,20(sp)
 800630e:	cc2e                	sw	a1,24(sp)
 8006310:	ce32                	sw	a2,28(sp)
 8006312:	d036                	sw	a3,32(sp)
 8006314:	d23a                	sw	a4,36(sp)
 8006316:	d43e                	sw	a5,40(sp)
 8006318:	d642                	sw	a6,44(sp)
 800631a:	d846                	sw	a7,48(sp)
 800631c:	da72                	sw	t3,52(sp)
 800631e:	dc76                	sw	t4,56(sp)
 8006320:	de7a                	sw	t5,60(sp)
 8006322:	c0fe                	sw	t6,64(sp)
  // Save the MEPC/Mstatus/Msubm reg
  SAVE_EPC_STATUS
 8006324:	341022f3          	csrr	t0,mepc
 8006328:	c096                	sw	t0,64(sp)
 800632a:	300022f3          	csrr	t0,mstatus
 800632e:	c296                	sw	t0,68(sp)
 8006330:	7c4022f3          	csrr	t0,0x7c4
 8006334:	c496                	sw	t0,72(sp)

     // Set the function argument
  csrr a0, mcause
 8006336:	34202573          	csrr	a0,mcause
  mv a1, sp
 800633a:	858a                	mv	a1,sp
     // Call the function
  call handle_trap
 800633c:	ffffc097          	auipc	ra,0xffffc
 8006340:	a04080e7          	jalr	-1532(ra) # 8001d40 <handle_trap>

  // Restore the MEPC/Mstatus/Msubm reg
  RESTORE_EPC_STATUS
 8006344:	4286                	lw	t0,64(sp)
 8006346:	34129073          	csrw	mepc,t0
 800634a:	4296                	lw	t0,68(sp)
 800634c:	30029073          	csrw	mstatus,t0
 8006350:	42a6                	lw	t0,72(sp)
 8006352:	7c429073          	csrw	0x7c4,t0
  // Restore the caller saving registers (context)
  RESTORE_CONTEXT
 8006356:	4082                	lw	ra,0(sp)
 8006358:	4212                	lw	tp,4(sp)
 800635a:	42a2                	lw	t0,8(sp)
 800635c:	4332                	lw	t1,12(sp)
 800635e:	43c2                	lw	t2,16(sp)
 8006360:	4552                	lw	a0,20(sp)
 8006362:	45e2                	lw	a1,24(sp)
 8006364:	4672                	lw	a2,28(sp)
 8006366:	5682                	lw	a3,32(sp)
 8006368:	5712                	lw	a4,36(sp)
 800636a:	57a2                	lw	a5,40(sp)
 800636c:	5832                	lw	a6,44(sp)
 800636e:	58c2                	lw	a7,48(sp)
 8006370:	5e52                	lw	t3,52(sp)
 8006372:	5ee2                	lw	t4,56(sp)
 8006374:	5f72                	lw	t5,60(sp)
 8006376:	4f86                	lw	t6,64(sp)
 8006378:	6161                	addi	sp,sp,80

  // De-allocate the stack space
 // addi sp, sp, 19*REGBYTES
  // Return to regular code
  mret
 800637a:	30200073          	mret
 800637e:	0000                	unimp
 8006380:	0000                	unimp
	...

08006384 <irq_entry>:
  csrrw 
  sp, mscratch, 
  sp

  #endif
  SAVE_CONTEXT// Save 16 regs
 8006384:	715d                	addi	sp,sp,-80
 8006386:	c006                	sw	ra,0(sp)
 8006388:	c212                	sw	tp,4(sp)
 800638a:	c416                	sw	t0,8(sp)
 800638c:	c61a                	sw	t1,12(sp)
 800638e:	c81e                	sw	t2,16(sp)
 8006390:	ca2a                	sw	a0,20(sp)
 8006392:	cc2e                	sw	a1,24(sp)
 8006394:	ce32                	sw	a2,28(sp)
 8006396:	d036                	sw	a3,32(sp)
 8006398:	d23a                	sw	a4,36(sp)
 800639a:	d43e                	sw	a5,40(sp)
 800639c:	d642                	sw	a6,44(sp)
 800639e:	d846                	sw	a7,48(sp)
 80063a0:	da72                	sw	t3,52(sp)
 80063a2:	dc76                	sw	t4,56(sp)
 80063a4:	de7a                	sw	t5,60(sp)
 80063a6:	c0fe                	sw	t6,64(sp)

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 80063a8:	7ee8d073          	csrwi	0x7ee,17
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 80063ac:	7ef95073          	csrwi	0x7ef,18
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 80063b0:	7eb9d073          	csrwi	0x7eb,19

080063b4 <service_loop>:
 
service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register 
  csrrw ra, CSR_JALMNXTI, ra 
 80063b4:	7ed090f3          	csrrw	ra,0x7ed,ra
  
  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts 
 80063b8:	30047073          	csrci	mstatus,8

  LOAD x5,  19*REGBYTES(sp)
 80063bc:	42b6                	lw	t0,76(sp)
  csrw CSR_MSUBM, x5  
 80063be:	7c429073          	csrw	0x7c4,t0
  LOAD x5,  18*REGBYTES(sp)
 80063c2:	42a6                	lw	t0,72(sp)
  csrw CSR_MEPC, x5  
 80063c4:	34129073          	csrw	mepc,t0
  LOAD x5,  17*REGBYTES(sp)
 80063c8:	4296                	lw	t0,68(sp)
  csrw CSR_MCAUSE, x5  
 80063ca:	34229073          	csrw	mcause,t0


  RESTORE_CONTEXT
 80063ce:	4082                	lw	ra,0(sp)
 80063d0:	4212                	lw	tp,4(sp)
 80063d2:	42a2                	lw	t0,8(sp)
 80063d4:	4332                	lw	t1,12(sp)
 80063d6:	43c2                	lw	t2,16(sp)
 80063d8:	4552                	lw	a0,20(sp)
 80063da:	45e2                	lw	a1,24(sp)
 80063dc:	4672                	lw	a2,28(sp)
 80063de:	5682                	lw	a3,32(sp)
 80063e0:	5712                	lw	a4,36(sp)
 80063e2:	57a2                	lw	a5,40(sp)
 80063e4:	5832                	lw	a6,44(sp)
 80063e6:	58c2                	lw	a7,48(sp)
 80063e8:	5e52                	lw	t3,52(sp)
 80063ea:	5ee2                	lw	t4,56(sp)
 80063ec:	5f72                	lw	t5,60(sp)
 80063ee:	4f86                	lw	t6,64(sp)
 80063f0:	6161                	addi	sp,sp,80
  sp
  
  #endif
  
  // Return to regular code
  mret
 80063f2:	30200073          	mret

080063f6 <__divdf3>:
 80063f6:	7179                	addi	sp,sp,-48
 80063f8:	0145d813          	srli	a6,a1,0x14
 80063fc:	d226                	sw	s1,36(sp)
 80063fe:	ce4e                	sw	s3,28(sp)
 8006400:	cc52                	sw	s4,24(sp)
 8006402:	c85a                	sw	s6,16(sp)
 8006404:	c65e                	sw	s7,12(sp)
 8006406:	00c59493          	slli	s1,a1,0xc
 800640a:	d606                	sw	ra,44(sp)
 800640c:	d422                	sw	s0,40(sp)
 800640e:	d04a                	sw	s2,32(sp)
 8006410:	ca56                	sw	s5,20(sp)
 8006412:	7ff87813          	andi	a6,a6,2047
 8006416:	8b2a                	mv	s6,a0
 8006418:	8bb2                	mv	s7,a2
 800641a:	8a36                	mv	s4,a3
 800641c:	80b1                	srli	s1,s1,0xc
 800641e:	01f5d993          	srli	s3,a1,0x1f
 8006422:	08080463          	beqz	a6,80064aa <__divdf3+0xb4>
 8006426:	7ff00793          	li	a5,2047
 800642a:	0cf80e63          	beq	a6,a5,8006506 <__divdf3+0x110>
 800642e:	01d55a93          	srli	s5,a0,0x1d
 8006432:	048e                	slli	s1,s1,0x3
 8006434:	009ae4b3          	or	s1,s5,s1
 8006438:	00800ab7          	lui	s5,0x800
 800643c:	0154eab3          	or	s5,s1,s5
 8006440:	00351413          	slli	s0,a0,0x3
 8006444:	c0180913          	addi	s2,a6,-1023
 8006448:	4b01                	li	s6,0
 800644a:	014a5513          	srli	a0,s4,0x14
 800644e:	00ca1493          	slli	s1,s4,0xc
 8006452:	7ff57813          	andi	a6,a0,2047
 8006456:	80b1                	srli	s1,s1,0xc
 8006458:	01fa5a13          	srli	s4,s4,0x1f
 800645c:	0c080863          	beqz	a6,800652c <__divdf3+0x136>
 8006460:	7ff00793          	li	a5,2047
 8006464:	12f80163          	beq	a6,a5,8006586 <__divdf3+0x190>
 8006468:	00349513          	slli	a0,s1,0x3
 800646c:	01dbd793          	srli	a5,s7,0x1d
 8006470:	8d5d                	or	a0,a0,a5
 8006472:	008004b7          	lui	s1,0x800
 8006476:	8cc9                	or	s1,s1,a0
 8006478:	003b9f13          	slli	t5,s7,0x3
 800647c:	c0180513          	addi	a0,a6,-1023
 8006480:	4781                	li	a5,0
 8006482:	002b1713          	slli	a4,s6,0x2
 8006486:	8f5d                	or	a4,a4,a5
 8006488:	177d                	addi	a4,a4,-1
 800648a:	46b9                	li	a3,14
 800648c:	0149c633          	xor	a2,s3,s4
 8006490:	40a90833          	sub	a6,s2,a0
 8006494:	10e6eb63          	bltu	a3,a4,80065aa <__divdf3+0x1b4>
 8006498:	ffffa697          	auipc	a3,0xffffa
 800649c:	00868693          	addi	a3,a3,8 # 80004a0 <_std_dev_req+0x110>
 80064a0:	070a                	slli	a4,a4,0x2
 80064a2:	9736                	add	a4,a4,a3
 80064a4:	4318                	lw	a4,0(a4)
 80064a6:	9736                	add	a4,a4,a3
 80064a8:	8702                	jr	a4
 80064aa:	00a4eab3          	or	s5,s1,a0
 80064ae:	060a8663          	beqz	s5,800651a <__divdf3+0x124>
 80064b2:	cc8d                	beqz	s1,80064ec <__divdf3+0xf6>
 80064b4:	8526                	mv	a0,s1
 80064b6:	00001097          	auipc	ra,0x1
 80064ba:	bea080e7          	jalr	-1046(ra) # 80070a0 <__clzsi2>
 80064be:	ff550793          	addi	a5,a0,-11 # 4001fff5 <_sp+0x20017ff5>
 80064c2:	4771                	li	a4,28
 80064c4:	02f74b63          	blt	a4,a5,80064fa <__divdf3+0x104>
 80064c8:	4af5                	li	s5,29
 80064ca:	ff850413          	addi	s0,a0,-8
 80064ce:	40fa8ab3          	sub	s5,s5,a5
 80064d2:	008494b3          	sll	s1,s1,s0
 80064d6:	015b5ab3          	srl	s5,s6,s5
 80064da:	009aeab3          	or	s5,s5,s1
 80064de:	008b1433          	sll	s0,s6,s0
 80064e2:	c0d00813          	li	a6,-1011
 80064e6:	40a80933          	sub	s2,a6,a0
 80064ea:	bfb9                	j	8006448 <__divdf3+0x52>
 80064ec:	00001097          	auipc	ra,0x1
 80064f0:	bb4080e7          	jalr	-1100(ra) # 80070a0 <__clzsi2>
 80064f4:	02050513          	addi	a0,a0,32
 80064f8:	b7d9                	j	80064be <__divdf3+0xc8>
 80064fa:	fd850493          	addi	s1,a0,-40
 80064fe:	009b1ab3          	sll	s5,s6,s1
 8006502:	4401                	li	s0,0
 8006504:	bff9                	j	80064e2 <__divdf3+0xec>
 8006506:	00a4eab3          	or	s5,s1,a0
 800650a:	000a8c63          	beqz	s5,8006522 <__divdf3+0x12c>
 800650e:	842a                	mv	s0,a0
 8006510:	8aa6                	mv	s5,s1
 8006512:	7ff00913          	li	s2,2047
 8006516:	4b0d                	li	s6,3
 8006518:	bf0d                	j	800644a <__divdf3+0x54>
 800651a:	4401                	li	s0,0
 800651c:	4901                	li	s2,0
 800651e:	4b05                	li	s6,1
 8006520:	b72d                	j	800644a <__divdf3+0x54>
 8006522:	4401                	li	s0,0
 8006524:	7ff00913          	li	s2,2047
 8006528:	4b09                	li	s6,2
 800652a:	b705                	j	800644a <__divdf3+0x54>
 800652c:	0174ef33          	or	t5,s1,s7
 8006530:	060f0463          	beqz	t5,8006598 <__divdf3+0x1a2>
 8006534:	c89d                	beqz	s1,800656a <__divdf3+0x174>
 8006536:	8526                	mv	a0,s1
 8006538:	00001097          	auipc	ra,0x1
 800653c:	b68080e7          	jalr	-1176(ra) # 80070a0 <__clzsi2>
 8006540:	ff550793          	addi	a5,a0,-11
 8006544:	4771                	li	a4,28
 8006546:	02f74a63          	blt	a4,a5,800657a <__divdf3+0x184>
 800654a:	4775                	li	a4,29
 800654c:	ff850f13          	addi	t5,a0,-8
 8006550:	8f1d                	sub	a4,a4,a5
 8006552:	01e494b3          	sll	s1,s1,t5
 8006556:	00ebd733          	srl	a4,s7,a4
 800655a:	8cd9                	or	s1,s1,a4
 800655c:	01eb9f33          	sll	t5,s7,t5
 8006560:	c0d00613          	li	a2,-1011
 8006564:	40a60533          	sub	a0,a2,a0
 8006568:	bf21                	j	8006480 <__divdf3+0x8a>
 800656a:	855e                	mv	a0,s7
 800656c:	00001097          	auipc	ra,0x1
 8006570:	b34080e7          	jalr	-1228(ra) # 80070a0 <__clzsi2>
 8006574:	02050513          	addi	a0,a0,32
 8006578:	b7e1                	j	8006540 <__divdf3+0x14a>
 800657a:	fd850493          	addi	s1,a0,-40
 800657e:	009b94b3          	sll	s1,s7,s1
 8006582:	4f01                	li	t5,0
 8006584:	bff1                	j	8006560 <__divdf3+0x16a>
 8006586:	0174ef33          	or	t5,s1,s7
 800658a:	000f0b63          	beqz	t5,80065a0 <__divdf3+0x1aa>
 800658e:	8f5e                	mv	t5,s7
 8006590:	7ff00513          	li	a0,2047
 8006594:	478d                	li	a5,3
 8006596:	b5f5                	j	8006482 <__divdf3+0x8c>
 8006598:	4481                	li	s1,0
 800659a:	4501                	li	a0,0
 800659c:	4785                	li	a5,1
 800659e:	b5d5                	j	8006482 <__divdf3+0x8c>
 80065a0:	4481                	li	s1,0
 80065a2:	7ff00513          	li	a0,2047
 80065a6:	4789                	li	a5,2
 80065a8:	bde9                	j	8006482 <__divdf3+0x8c>
 80065aa:	0154e663          	bltu	s1,s5,80065b6 <__divdf3+0x1c0>
 80065ae:	2a9a9363          	bne	s5,s1,8006854 <__divdf3+0x45e>
 80065b2:	2be46163          	bltu	s0,t5,8006854 <__divdf3+0x45e>
 80065b6:	01fa9693          	slli	a3,s5,0x1f
 80065ba:	00145713          	srli	a4,s0,0x1
 80065be:	01f41793          	slli	a5,s0,0x1f
 80065c2:	001ada93          	srli	s5,s5,0x1
 80065c6:	00e6e433          	or	s0,a3,a4
 80065ca:	00849513          	slli	a0,s1,0x8
 80065ce:	018f5493          	srli	s1,t5,0x18
 80065d2:	8d45                	or	a0,a0,s1
 80065d4:	01055e13          	srli	t3,a0,0x10
 80065d8:	03cad8b3          	divu	a7,s5,t3
 80065dc:	01051313          	slli	t1,a0,0x10
 80065e0:	01035313          	srli	t1,t1,0x10
 80065e4:	01045713          	srli	a4,s0,0x10
 80065e8:	008f1593          	slli	a1,t5,0x8
 80065ec:	03caf4b3          	remu	s1,s5,t3
 80065f0:	8fc6                	mv	t6,a7
 80065f2:	031306b3          	mul	a3,t1,a7
 80065f6:	01049a93          	slli	s5,s1,0x10
 80065fa:	01576733          	or	a4,a4,s5
 80065fe:	00d77c63          	bgeu	a4,a3,8006616 <__divdf3+0x220>
 8006602:	972a                	add	a4,a4,a0
 8006604:	fff88f93          	addi	t6,a7,-1
 8006608:	00a76763          	bltu	a4,a0,8006616 <__divdf3+0x220>
 800660c:	00d77563          	bgeu	a4,a3,8006616 <__divdf3+0x220>
 8006610:	ffe88f93          	addi	t6,a7,-2
 8006614:	972a                	add	a4,a4,a0
 8006616:	8f15                	sub	a4,a4,a3
 8006618:	03c75eb3          	divu	t4,a4,t3
 800661c:	0442                	slli	s0,s0,0x10
 800661e:	8041                	srli	s0,s0,0x10
 8006620:	03c77733          	remu	a4,a4,t3
 8006624:	86f6                	mv	a3,t4
 8006626:	03d308b3          	mul	a7,t1,t4
 800662a:	0742                	slli	a4,a4,0x10
 800662c:	8f41                	or	a4,a4,s0
 800662e:	01177c63          	bgeu	a4,a7,8006646 <__divdf3+0x250>
 8006632:	972a                	add	a4,a4,a0
 8006634:	fffe8693          	addi	a3,t4,-1
 8006638:	00a76763          	bltu	a4,a0,8006646 <__divdf3+0x250>
 800663c:	01177563          	bgeu	a4,a7,8006646 <__divdf3+0x250>
 8006640:	ffee8693          	addi	a3,t4,-2
 8006644:	972a                	add	a4,a4,a0
 8006646:	0fc2                	slli	t6,t6,0x10
 8006648:	00dfefb3          	or	t6,t6,a3
 800664c:	66c1                	lui	a3,0x10
 800664e:	41170433          	sub	s0,a4,a7
 8006652:	fff68893          	addi	a7,a3,-1 # ffff <__stack_size+0xefff>
 8006656:	010fdf13          	srli	t5,t6,0x10
 800665a:	011ff733          	and	a4,t6,a7
 800665e:	0105de93          	srli	t4,a1,0x10
 8006662:	0115f8b3          	and	a7,a1,a7
 8006666:	031703b3          	mul	t2,a4,a7
 800666a:	031f04b3          	mul	s1,t5,a7
 800666e:	02ee8733          	mul	a4,t4,a4
 8006672:	03df02b3          	mul	t0,t5,t4
 8006676:	00970f33          	add	t5,a4,s1
 800667a:	0103d713          	srli	a4,t2,0x10
 800667e:	977a                	add	a4,a4,t5
 8006680:	00977363          	bgeu	a4,s1,8006686 <__divdf3+0x290>
 8006684:	92b6                	add	t0,t0,a3
 8006686:	01075f13          	srli	t5,a4,0x10
 800668a:	9f16                	add	t5,t5,t0
 800668c:	62c1                	lui	t0,0x10
 800668e:	12fd                	addi	t0,t0,-1
 8006690:	005776b3          	and	a3,a4,t0
 8006694:	06c2                	slli	a3,a3,0x10
 8006696:	0053f3b3          	and	t2,t2,t0
 800669a:	969e                	add	a3,a3,t2
 800669c:	01e46763          	bltu	s0,t5,80066aa <__divdf3+0x2b4>
 80066a0:	84fe                	mv	s1,t6
 80066a2:	03e41e63          	bne	s0,t5,80066de <__divdf3+0x2e8>
 80066a6:	02d7fc63          	bgeu	a5,a3,80066de <__divdf3+0x2e8>
 80066aa:	97ae                	add	a5,a5,a1
 80066ac:	00b7b733          	sltu	a4,a5,a1
 80066b0:	972a                	add	a4,a4,a0
 80066b2:	943a                	add	s0,s0,a4
 80066b4:	ffff8493          	addi	s1,t6,-1
 80066b8:	00856663          	bltu	a0,s0,80066c4 <__divdf3+0x2ce>
 80066bc:	02851163          	bne	a0,s0,80066de <__divdf3+0x2e8>
 80066c0:	00b7ef63          	bltu	a5,a1,80066de <__divdf3+0x2e8>
 80066c4:	01e46663          	bltu	s0,t5,80066d0 <__divdf3+0x2da>
 80066c8:	008f1b63          	bne	t5,s0,80066de <__divdf3+0x2e8>
 80066cc:	00d7f963          	bgeu	a5,a3,80066de <__divdf3+0x2e8>
 80066d0:	97ae                	add	a5,a5,a1
 80066d2:	00b7b733          	sltu	a4,a5,a1
 80066d6:	972a                	add	a4,a4,a0
 80066d8:	ffef8493          	addi	s1,t6,-2
 80066dc:	943a                	add	s0,s0,a4
 80066de:	40d786b3          	sub	a3,a5,a3
 80066e2:	41e40433          	sub	s0,s0,t5
 80066e6:	00d7b7b3          	sltu	a5,a5,a3
 80066ea:	8c1d                	sub	s0,s0,a5
 80066ec:	5f7d                	li	t5,-1
 80066ee:	0e850563          	beq	a0,s0,80067d8 <__divdf3+0x3e2>
 80066f2:	03c45f33          	divu	t5,s0,t3
 80066f6:	0106d713          	srli	a4,a3,0x10
 80066fa:	03c47433          	remu	s0,s0,t3
 80066fe:	03e307b3          	mul	a5,t1,t5
 8006702:	0442                	slli	s0,s0,0x10
 8006704:	8c59                	or	s0,s0,a4
 8006706:	877a                	mv	a4,t5
 8006708:	00f47c63          	bgeu	s0,a5,8006720 <__divdf3+0x32a>
 800670c:	942a                	add	s0,s0,a0
 800670e:	ffff0713          	addi	a4,t5,-1
 8006712:	00a46763          	bltu	s0,a0,8006720 <__divdf3+0x32a>
 8006716:	00f47563          	bgeu	s0,a5,8006720 <__divdf3+0x32a>
 800671a:	ffef0713          	addi	a4,t5,-2
 800671e:	942a                	add	s0,s0,a0
 8006720:	8c1d                	sub	s0,s0,a5
 8006722:	03c45f33          	divu	t5,s0,t3
 8006726:	06c2                	slli	a3,a3,0x10
 8006728:	82c1                	srli	a3,a3,0x10
 800672a:	03c47433          	remu	s0,s0,t3
 800672e:	87fa                	mv	a5,t5
 8006730:	03e30333          	mul	t1,t1,t5
 8006734:	0442                	slli	s0,s0,0x10
 8006736:	8c55                	or	s0,s0,a3
 8006738:	00647c63          	bgeu	s0,t1,8006750 <__divdf3+0x35a>
 800673c:	942a                	add	s0,s0,a0
 800673e:	ffff0793          	addi	a5,t5,-1
 8006742:	00a46763          	bltu	s0,a0,8006750 <__divdf3+0x35a>
 8006746:	00647563          	bgeu	s0,t1,8006750 <__divdf3+0x35a>
 800674a:	ffef0793          	addi	a5,t5,-2
 800674e:	942a                	add	s0,s0,a0
 8006750:	0742                	slli	a4,a4,0x10
 8006752:	8f5d                	or	a4,a4,a5
 8006754:	01071793          	slli	a5,a4,0x10
 8006758:	83c1                	srli	a5,a5,0x10
 800675a:	40640433          	sub	s0,s0,t1
 800675e:	01075313          	srli	t1,a4,0x10
 8006762:	03178e33          	mul	t3,a5,a7
 8006766:	031308b3          	mul	a7,t1,a7
 800676a:	026e8333          	mul	t1,t4,t1
 800676e:	02fe8eb3          	mul	t4,t4,a5
 8006772:	010e5793          	srli	a5,t3,0x10
 8006776:	9ec6                	add	t4,t4,a7
 8006778:	97f6                	add	a5,a5,t4
 800677a:	0117f463          	bgeu	a5,a7,8006782 <__divdf3+0x38c>
 800677e:	66c1                	lui	a3,0x10
 8006780:	9336                	add	t1,t1,a3
 8006782:	0107d893          	srli	a7,a5,0x10
 8006786:	989a                	add	a7,a7,t1
 8006788:	6341                	lui	t1,0x10
 800678a:	137d                	addi	t1,t1,-1
 800678c:	0067f6b3          	and	a3,a5,t1
 8006790:	06c2                	slli	a3,a3,0x10
 8006792:	006e7e33          	and	t3,t3,t1
 8006796:	96f2                	add	a3,a3,t3
 8006798:	01146663          	bltu	s0,a7,80067a4 <__divdf3+0x3ae>
 800679c:	19141e63          	bne	s0,a7,8006938 <__divdf3+0x542>
 80067a0:	8f3a                	mv	t5,a4
 80067a2:	ca9d                	beqz	a3,80067d8 <__divdf3+0x3e2>
 80067a4:	942a                	add	s0,s0,a0
 80067a6:	fff70f13          	addi	t5,a4,-1
 80067aa:	02a46163          	bltu	s0,a0,80067cc <__divdf3+0x3d6>
 80067ae:	01146663          	bltu	s0,a7,80067ba <__divdf3+0x3c4>
 80067b2:	19141263          	bne	s0,a7,8006936 <__divdf3+0x540>
 80067b6:	00d5fd63          	bgeu	a1,a3,80067d0 <__divdf3+0x3da>
 80067ba:	00159793          	slli	a5,a1,0x1
 80067be:	00b7b5b3          	sltu	a1,a5,a1
 80067c2:	952e                	add	a0,a0,a1
 80067c4:	ffe70f13          	addi	t5,a4,-2
 80067c8:	942a                	add	s0,s0,a0
 80067ca:	85be                	mv	a1,a5
 80067cc:	01141463          	bne	s0,a7,80067d4 <__divdf3+0x3de>
 80067d0:	00b68463          	beq	a3,a1,80067d8 <__divdf3+0x3e2>
 80067d4:	001f6f13          	ori	t5,t5,1
 80067d8:	3ff80713          	addi	a4,a6,1023
 80067dc:	0ae05763          	blez	a4,800688a <__divdf3+0x494>
 80067e0:	007f7793          	andi	a5,t5,7
 80067e4:	cf81                	beqz	a5,80067fc <__divdf3+0x406>
 80067e6:	00ff7793          	andi	a5,t5,15
 80067ea:	4691                	li	a3,4
 80067ec:	00d78863          	beq	a5,a3,80067fc <__divdf3+0x406>
 80067f0:	004f0693          	addi	a3,t5,4
 80067f4:	01e6bf33          	sltu	t5,a3,t5
 80067f8:	94fa                	add	s1,s1,t5
 80067fa:	8f36                	mv	t5,a3
 80067fc:	00749793          	slli	a5,s1,0x7
 8006800:	0007d863          	bgez	a5,8006810 <__divdf3+0x41a>
 8006804:	ff0007b7          	lui	a5,0xff000
 8006808:	17fd                	addi	a5,a5,-1
 800680a:	8cfd                	and	s1,s1,a5
 800680c:	40080713          	addi	a4,a6,1024
 8006810:	7fe00793          	li	a5,2046
 8006814:	10e7c863          	blt	a5,a4,8006924 <__divdf3+0x52e>
 8006818:	003f5f13          	srli	t5,t5,0x3
 800681c:	01d49793          	slli	a5,s1,0x1d
 8006820:	01e7e7b3          	or	a5,a5,t5
 8006824:	0034d513          	srli	a0,s1,0x3
 8006828:	0532                	slli	a0,a0,0xc
 800682a:	7ff77713          	andi	a4,a4,2047
 800682e:	0752                	slli	a4,a4,0x14
 8006830:	50b2                	lw	ra,44(sp)
 8006832:	5422                	lw	s0,40(sp)
 8006834:	8131                	srli	a0,a0,0xc
 8006836:	8d59                	or	a0,a0,a4
 8006838:	067e                	slli	a2,a2,0x1f
 800683a:	00c56733          	or	a4,a0,a2
 800683e:	5492                	lw	s1,36(sp)
 8006840:	5902                	lw	s2,32(sp)
 8006842:	49f2                	lw	s3,28(sp)
 8006844:	4a62                	lw	s4,24(sp)
 8006846:	4ad2                	lw	s5,20(sp)
 8006848:	4b42                	lw	s6,16(sp)
 800684a:	4bb2                	lw	s7,12(sp)
 800684c:	853e                	mv	a0,a5
 800684e:	85ba                	mv	a1,a4
 8006850:	6145                	addi	sp,sp,48
 8006852:	8082                	ret
 8006854:	187d                	addi	a6,a6,-1
 8006856:	4781                	li	a5,0
 8006858:	bb8d                	j	80065ca <__divdf3+0x1d4>
 800685a:	864e                	mv	a2,s3
 800685c:	84d6                	mv	s1,s5
 800685e:	8f22                	mv	t5,s0
 8006860:	87da                	mv	a5,s6
 8006862:	4709                	li	a4,2
 8006864:	0ce78063          	beq	a5,a4,8006924 <__divdf3+0x52e>
 8006868:	470d                	li	a4,3
 800686a:	0ae78663          	beq	a5,a4,8006916 <__divdf3+0x520>
 800686e:	4705                	li	a4,1
 8006870:	f6e794e3          	bne	a5,a4,80067d8 <__divdf3+0x3e2>
 8006874:	4501                	li	a0,0
 8006876:	4781                	li	a5,0
 8006878:	a885                	j	80068e8 <__divdf3+0x4f2>
 800687a:	8652                	mv	a2,s4
 800687c:	b7dd                	j	8006862 <__divdf3+0x46c>
 800687e:	000804b7          	lui	s1,0x80
 8006882:	4f01                	li	t5,0
 8006884:	4601                	li	a2,0
 8006886:	478d                	li	a5,3
 8006888:	bfe9                	j	8006862 <__divdf3+0x46c>
 800688a:	4505                	li	a0,1
 800688c:	8d19                	sub	a0,a0,a4
 800688e:	03800793          	li	a5,56
 8006892:	fea7c1e3          	blt	a5,a0,8006874 <__divdf3+0x47e>
 8006896:	47fd                	li	a5,31
 8006898:	04a7ca63          	blt	a5,a0,80068ec <__divdf3+0x4f6>
 800689c:	41e80813          	addi	a6,a6,1054
 80068a0:	010497b3          	sll	a5,s1,a6
 80068a4:	00af5733          	srl	a4,t5,a0
 80068a8:	010f1833          	sll	a6,t5,a6
 80068ac:	8fd9                	or	a5,a5,a4
 80068ae:	01003833          	snez	a6,a6
 80068b2:	0107e7b3          	or	a5,a5,a6
 80068b6:	00a4d533          	srl	a0,s1,a0
 80068ba:	0077f713          	andi	a4,a5,7
 80068be:	cf01                	beqz	a4,80068d6 <__divdf3+0x4e0>
 80068c0:	00f7f713          	andi	a4,a5,15
 80068c4:	4691                	li	a3,4
 80068c6:	00d70863          	beq	a4,a3,80068d6 <__divdf3+0x4e0>
 80068ca:	00478713          	addi	a4,a5,4 # ff000004 <_sp+0xdeff8004>
 80068ce:	00f737b3          	sltu	a5,a4,a5
 80068d2:	953e                	add	a0,a0,a5
 80068d4:	87ba                	mv	a5,a4
 80068d6:	00851713          	slli	a4,a0,0x8
 80068da:	04074a63          	bltz	a4,800692e <__divdf3+0x538>
 80068de:	01d51713          	slli	a4,a0,0x1d
 80068e2:	838d                	srli	a5,a5,0x3
 80068e4:	8fd9                	or	a5,a5,a4
 80068e6:	810d                	srli	a0,a0,0x3
 80068e8:	4701                	li	a4,0
 80068ea:	bf3d                	j	8006828 <__divdf3+0x432>
 80068ec:	5785                	li	a5,-31
 80068ee:	8f99                	sub	a5,a5,a4
 80068f0:	02000693          	li	a3,32
 80068f4:	00f4d7b3          	srl	a5,s1,a5
 80068f8:	4701                	li	a4,0
 80068fa:	00d50663          	beq	a0,a3,8006906 <__divdf3+0x510>
 80068fe:	43e80813          	addi	a6,a6,1086
 8006902:	01049733          	sll	a4,s1,a6
 8006906:	01e76f33          	or	t5,a4,t5
 800690a:	01e03f33          	snez	t5,t5
 800690e:	01e7e7b3          	or	a5,a5,t5
 8006912:	4501                	li	a0,0
 8006914:	b75d                	j	80068ba <__divdf3+0x4c4>
 8006916:	00080537          	lui	a0,0x80
 800691a:	4781                	li	a5,0
 800691c:	7ff00713          	li	a4,2047
 8006920:	4601                	li	a2,0
 8006922:	b719                	j	8006828 <__divdf3+0x432>
 8006924:	4501                	li	a0,0
 8006926:	4781                	li	a5,0
 8006928:	7ff00713          	li	a4,2047
 800692c:	bdf5                	j	8006828 <__divdf3+0x432>
 800692e:	4501                	li	a0,0
 8006930:	4781                	li	a5,0
 8006932:	4705                	li	a4,1
 8006934:	bdd5                	j	8006828 <__divdf3+0x432>
 8006936:	877a                	mv	a4,t5
 8006938:	8f3a                	mv	t5,a4
 800693a:	bd69                	j	80067d4 <__divdf3+0x3de>

0800693c <__ledf2>:
 800693c:	0145d813          	srli	a6,a1,0x14
 8006940:	001007b7          	lui	a5,0x100
 8006944:	17fd                	addi	a5,a5,-1
 8006946:	0146d713          	srli	a4,a3,0x14
 800694a:	7ff87813          	andi	a6,a6,2047
 800694e:	7ff00e93          	li	t4,2047
 8006952:	00b7f8b3          	and	a7,a5,a1
 8006956:	832a                	mv	t1,a0
 8006958:	8ff5                	and	a5,a5,a3
 800695a:	81fd                	srli	a1,a1,0x1f
 800695c:	8e32                	mv	t3,a2
 800695e:	7ff77713          	andi	a4,a4,2047
 8006962:	82fd                	srli	a3,a3,0x1f
 8006964:	01d81863          	bne	a6,t4,8006974 <__ledf2+0x38>
 8006968:	00a8eeb3          	or	t4,a7,a0
 800696c:	060e8563          	beqz	t4,80069d6 <__ledf2+0x9a>
 8006970:	4589                	li	a1,2
 8006972:	a80d                	j	80069a4 <__ledf2+0x68>
 8006974:	01d71663          	bne	a4,t4,8006980 <__ledf2+0x44>
 8006978:	00c7eeb3          	or	t4,a5,a2
 800697c:	fe0e9ae3          	bnez	t4,8006970 <__ledf2+0x34>
 8006980:	04081d63          	bnez	a6,80069da <__ledf2+0x9e>
 8006984:	00a8e533          	or	a0,a7,a0
 8006988:	00153513          	seqz	a0,a0
 800698c:	e319                	bnez	a4,8006992 <__ledf2+0x56>
 800698e:	8e5d                	or	a2,a2,a5
 8006990:	ce15                	beqz	a2,80069cc <__ledf2+0x90>
 8006992:	e511                	bnez	a0,800699e <__ledf2+0x62>
 8006994:	00d58a63          	beq	a1,a3,80069a8 <__ledf2+0x6c>
 8006998:	c985                	beqz	a1,80069c8 <__ledf2+0x8c>
 800699a:	55fd                	li	a1,-1
 800699c:	a021                	j	80069a4 <__ledf2+0x68>
 800699e:	55fd                	li	a1,-1
 80069a0:	c291                	beqz	a3,80069a4 <__ledf2+0x68>
 80069a2:	85b6                	mv	a1,a3
 80069a4:	852e                	mv	a0,a1
 80069a6:	8082                	ret
 80069a8:	ff0748e3          	blt	a4,a6,8006998 <__ledf2+0x5c>
 80069ac:	00e85463          	bge	a6,a4,80069b4 <__ledf2+0x78>
 80069b0:	f9f5                	bnez	a1,80069a4 <__ledf2+0x68>
 80069b2:	b7e5                	j	800699a <__ledf2+0x5e>
 80069b4:	ff17e2e3          	bltu	a5,a7,8006998 <__ledf2+0x5c>
 80069b8:	00f89c63          	bne	a7,a5,80069d0 <__ledf2+0x94>
 80069bc:	fc6e6ee3          	bltu	t3,t1,8006998 <__ledf2+0x5c>
 80069c0:	ffc368e3          	bltu	t1,t3,80069b0 <__ledf2+0x74>
 80069c4:	4581                	li	a1,0
 80069c6:	bff9                	j	80069a4 <__ledf2+0x68>
 80069c8:	4585                	li	a1,1
 80069ca:	bfe9                	j	80069a4 <__ledf2+0x68>
 80069cc:	fd65                	bnez	a0,80069c4 <__ledf2+0x88>
 80069ce:	b7e9                	j	8006998 <__ledf2+0x5c>
 80069d0:	fef8e0e3          	bltu	a7,a5,80069b0 <__ledf2+0x74>
 80069d4:	bfc5                	j	80069c4 <__ledf2+0x88>
 80069d6:	fb0701e3          	beq	a4,a6,8006978 <__ledf2+0x3c>
 80069da:	ff4d                	bnez	a4,8006994 <__ledf2+0x58>
 80069dc:	4501                	li	a0,0
 80069de:	bf45                	j	800698e <__ledf2+0x52>

080069e0 <__muldf3>:
 80069e0:	7179                	addi	sp,sp,-48
 80069e2:	ce4e                	sw	s3,28(sp)
 80069e4:	0145d993          	srli	s3,a1,0x14
 80069e8:	d422                	sw	s0,40(sp)
 80069ea:	d226                	sw	s1,36(sp)
 80069ec:	cc52                	sw	s4,24(sp)
 80069ee:	ca56                	sw	s5,20(sp)
 80069f0:	c85a                	sw	s6,16(sp)
 80069f2:	00c59493          	slli	s1,a1,0xc
 80069f6:	d606                	sw	ra,44(sp)
 80069f8:	d04a                	sw	s2,32(sp)
 80069fa:	c65e                	sw	s7,12(sp)
 80069fc:	7ff9f993          	andi	s3,s3,2047
 8006a00:	842a                	mv	s0,a0
 8006a02:	8b32                	mv	s6,a2
 8006a04:	8ab6                	mv	s5,a3
 8006a06:	80b1                	srli	s1,s1,0xc
 8006a08:	01f5da13          	srli	s4,a1,0x1f
 8006a0c:	08098163          	beqz	s3,8006a8e <__muldf3+0xae>
 8006a10:	7ff00793          	li	a5,2047
 8006a14:	0cf98963          	beq	s3,a5,8006ae6 <__muldf3+0x106>
 8006a18:	01d55793          	srli	a5,a0,0x1d
 8006a1c:	048e                	slli	s1,s1,0x3
 8006a1e:	8cdd                	or	s1,s1,a5
 8006a20:	008007b7          	lui	a5,0x800
 8006a24:	8cdd                	or	s1,s1,a5
 8006a26:	00351913          	slli	s2,a0,0x3
 8006a2a:	c0198993          	addi	s3,s3,-1023
 8006a2e:	4b81                	li	s7,0
 8006a30:	014ad513          	srli	a0,s5,0x14
 8006a34:	00ca9413          	slli	s0,s5,0xc
 8006a38:	7ff57513          	andi	a0,a0,2047
 8006a3c:	8031                	srli	s0,s0,0xc
 8006a3e:	01fada93          	srli	s5,s5,0x1f
 8006a42:	c561                	beqz	a0,8006b0a <__muldf3+0x12a>
 8006a44:	7ff00793          	li	a5,2047
 8006a48:	10f50d63          	beq	a0,a5,8006b62 <__muldf3+0x182>
 8006a4c:	01db5793          	srli	a5,s6,0x1d
 8006a50:	040e                	slli	s0,s0,0x3
 8006a52:	8c5d                	or	s0,s0,a5
 8006a54:	008007b7          	lui	a5,0x800
 8006a58:	8c5d                	or	s0,s0,a5
 8006a5a:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__stack_size+0x7ec01>
 8006a5e:	003b1793          	slli	a5,s6,0x3
 8006a62:	4701                	li	a4,0
 8006a64:	002b9693          	slli	a3,s7,0x2
 8006a68:	8ed9                	or	a3,a3,a4
 8006a6a:	954e                	add	a0,a0,s3
 8006a6c:	16fd                	addi	a3,a3,-1
 8006a6e:	45b9                	li	a1,14
 8006a70:	015a4633          	xor	a2,s4,s5
 8006a74:	00150813          	addi	a6,a0,1
 8006a78:	10d5e663          	bltu	a1,a3,8006b84 <__muldf3+0x1a4>
 8006a7c:	ffffa597          	auipc	a1,0xffffa
 8006a80:	a6058593          	addi	a1,a1,-1440 # 80004dc <_std_dev_req+0x14c>
 8006a84:	068a                	slli	a3,a3,0x2
 8006a86:	96ae                	add	a3,a3,a1
 8006a88:	4294                	lw	a3,0(a3)
 8006a8a:	96ae                	add	a3,a3,a1
 8006a8c:	8682                	jr	a3
 8006a8e:	00a4e933          	or	s2,s1,a0
 8006a92:	06090363          	beqz	s2,8006af8 <__muldf3+0x118>
 8006a96:	c89d                	beqz	s1,8006acc <__muldf3+0xec>
 8006a98:	8526                	mv	a0,s1
 8006a9a:	00000097          	auipc	ra,0x0
 8006a9e:	606080e7          	jalr	1542(ra) # 80070a0 <__clzsi2>
 8006aa2:	ff550713          	addi	a4,a0,-11
 8006aa6:	47f1                	li	a5,28
 8006aa8:	02e7c963          	blt	a5,a4,8006ada <__muldf3+0xfa>
 8006aac:	47f5                	li	a5,29
 8006aae:	ff850913          	addi	s2,a0,-8
 8006ab2:	8f99                	sub	a5,a5,a4
 8006ab4:	012494b3          	sll	s1,s1,s2
 8006ab8:	00f457b3          	srl	a5,s0,a5
 8006abc:	8cdd                	or	s1,s1,a5
 8006abe:	01241933          	sll	s2,s0,s2
 8006ac2:	c0d00993          	li	s3,-1011
 8006ac6:	40a989b3          	sub	s3,s3,a0
 8006aca:	b795                	j	8006a2e <__muldf3+0x4e>
 8006acc:	00000097          	auipc	ra,0x0
 8006ad0:	5d4080e7          	jalr	1492(ra) # 80070a0 <__clzsi2>
 8006ad4:	02050513          	addi	a0,a0,32
 8006ad8:	b7e9                	j	8006aa2 <__muldf3+0xc2>
 8006ada:	fd850493          	addi	s1,a0,-40
 8006ade:	009414b3          	sll	s1,s0,s1
 8006ae2:	4901                	li	s2,0
 8006ae4:	bff9                	j	8006ac2 <__muldf3+0xe2>
 8006ae6:	00a4e933          	or	s2,s1,a0
 8006aea:	00090b63          	beqz	s2,8006b00 <__muldf3+0x120>
 8006aee:	892a                	mv	s2,a0
 8006af0:	7ff00993          	li	s3,2047
 8006af4:	4b8d                	li	s7,3
 8006af6:	bf2d                	j	8006a30 <__muldf3+0x50>
 8006af8:	4481                	li	s1,0
 8006afa:	4981                	li	s3,0
 8006afc:	4b85                	li	s7,1
 8006afe:	bf0d                	j	8006a30 <__muldf3+0x50>
 8006b00:	4481                	li	s1,0
 8006b02:	7ff00993          	li	s3,2047
 8006b06:	4b89                	li	s7,2
 8006b08:	b725                	j	8006a30 <__muldf3+0x50>
 8006b0a:	016467b3          	or	a5,s0,s6
 8006b0e:	c3b5                	beqz	a5,8006b72 <__muldf3+0x192>
 8006b10:	c81d                	beqz	s0,8006b46 <__muldf3+0x166>
 8006b12:	8522                	mv	a0,s0
 8006b14:	00000097          	auipc	ra,0x0
 8006b18:	58c080e7          	jalr	1420(ra) # 80070a0 <__clzsi2>
 8006b1c:	ff550693          	addi	a3,a0,-11
 8006b20:	47f1                	li	a5,28
 8006b22:	02d7ca63          	blt	a5,a3,8006b56 <__muldf3+0x176>
 8006b26:	4775                	li	a4,29
 8006b28:	ff850793          	addi	a5,a0,-8
 8006b2c:	8f15                	sub	a4,a4,a3
 8006b2e:	00f41433          	sll	s0,s0,a5
 8006b32:	00eb5733          	srl	a4,s6,a4
 8006b36:	8c59                	or	s0,s0,a4
 8006b38:	00fb17b3          	sll	a5,s6,a5
 8006b3c:	c0d00713          	li	a4,-1011
 8006b40:	40a70533          	sub	a0,a4,a0
 8006b44:	bf39                	j	8006a62 <__muldf3+0x82>
 8006b46:	855a                	mv	a0,s6
 8006b48:	00000097          	auipc	ra,0x0
 8006b4c:	558080e7          	jalr	1368(ra) # 80070a0 <__clzsi2>
 8006b50:	02050513          	addi	a0,a0,32
 8006b54:	b7e1                	j	8006b1c <__muldf3+0x13c>
 8006b56:	fd850413          	addi	s0,a0,-40
 8006b5a:	008b1433          	sll	s0,s6,s0
 8006b5e:	4781                	li	a5,0
 8006b60:	bff1                	j	8006b3c <__muldf3+0x15c>
 8006b62:	016467b3          	or	a5,s0,s6
 8006b66:	cb91                	beqz	a5,8006b7a <__muldf3+0x19a>
 8006b68:	87da                	mv	a5,s6
 8006b6a:	7ff00513          	li	a0,2047
 8006b6e:	470d                	li	a4,3
 8006b70:	bdd5                	j	8006a64 <__muldf3+0x84>
 8006b72:	4401                	li	s0,0
 8006b74:	4501                	li	a0,0
 8006b76:	4705                	li	a4,1
 8006b78:	b5f5                	j	8006a64 <__muldf3+0x84>
 8006b7a:	4401                	li	s0,0
 8006b7c:	7ff00513          	li	a0,2047
 8006b80:	4709                	li	a4,2
 8006b82:	b5cd                	j	8006a64 <__muldf3+0x84>
 8006b84:	6f41                	lui	t5,0x10
 8006b86:	ffff0e93          	addi	t4,t5,-1 # ffff <__stack_size+0xefff>
 8006b8a:	01095713          	srli	a4,s2,0x10
 8006b8e:	0107d893          	srli	a7,a5,0x10
 8006b92:	01d97933          	and	s2,s2,t4
 8006b96:	01d7f7b3          	and	a5,a5,t4
 8006b9a:	032885b3          	mul	a1,a7,s2
 8006b9e:	032786b3          	mul	a3,a5,s2
 8006ba2:	02f70fb3          	mul	t6,a4,a5
 8006ba6:	01f58333          	add	t1,a1,t6
 8006baa:	0106d593          	srli	a1,a3,0x10
 8006bae:	959a                	add	a1,a1,t1
 8006bb0:	03170e33          	mul	t3,a4,a7
 8006bb4:	01f5f363          	bgeu	a1,t6,8006bba <__muldf3+0x1da>
 8006bb8:	9e7a                	add	t3,t3,t5
 8006bba:	0105d393          	srli	t2,a1,0x10
 8006bbe:	01d5f5b3          	and	a1,a1,t4
 8006bc2:	01d6f6b3          	and	a3,a3,t4
 8006bc6:	01045f13          	srli	t5,s0,0x10
 8006bca:	01d472b3          	and	t0,s0,t4
 8006bce:	05c2                	slli	a1,a1,0x10
 8006bd0:	95b6                	add	a1,a1,a3
 8006bd2:	02570eb3          	mul	t4,a4,t0
 8006bd6:	032286b3          	mul	a3,t0,s2
 8006bda:	032f0933          	mul	s2,t5,s2
 8006bde:	01d90333          	add	t1,s2,t4
 8006be2:	0106d913          	srli	s2,a3,0x10
 8006be6:	991a                	add	s2,s2,t1
 8006be8:	03e70733          	mul	a4,a4,t5
 8006bec:	01d97463          	bgeu	s2,t4,8006bf4 <__muldf3+0x214>
 8006bf0:	6341                	lui	t1,0x10
 8006bf2:	971a                	add	a4,a4,t1
 8006bf4:	01095e93          	srli	t4,s2,0x10
 8006bf8:	69c1                	lui	s3,0x10
 8006bfa:	9eba                	add	t4,t4,a4
 8006bfc:	fff98713          	addi	a4,s3,-1 # ffff <__stack_size+0xefff>
 8006c00:	00e97933          	and	s2,s2,a4
 8006c04:	8ef9                	and	a3,a3,a4
 8006c06:	0104d413          	srli	s0,s1,0x10
 8006c0a:	0942                	slli	s2,s2,0x10
 8006c0c:	8cf9                	and	s1,s1,a4
 8006c0e:	9936                	add	s2,s2,a3
 8006c10:	02978733          	mul	a4,a5,s1
 8006c14:	93ca                	add	t2,t2,s2
 8006c16:	02f40333          	mul	t1,s0,a5
 8006c1a:	029886b3          	mul	a3,a7,s1
 8006c1e:	028887b3          	mul	a5,a7,s0
 8006c22:	006688b3          	add	a7,a3,t1
 8006c26:	01075693          	srli	a3,a4,0x10
 8006c2a:	96c6                	add	a3,a3,a7
 8006c2c:	0066f363          	bgeu	a3,t1,8006c32 <__muldf3+0x252>
 8006c30:	97ce                	add	a5,a5,s3
 8006c32:	0106d893          	srli	a7,a3,0x10
 8006c36:	69c1                	lui	s3,0x10
 8006c38:	00f88fb3          	add	t6,a7,a5
 8006c3c:	fff98793          	addi	a5,s3,-1 # ffff <__stack_size+0xefff>
 8006c40:	8efd                	and	a3,a3,a5
 8006c42:	8f7d                	and	a4,a4,a5
 8006c44:	029288b3          	mul	a7,t0,s1
 8006c48:	06c2                	slli	a3,a3,0x10
 8006c4a:	96ba                	add	a3,a3,a4
 8006c4c:	025407b3          	mul	a5,s0,t0
 8006c50:	029f04b3          	mul	s1,t5,s1
 8006c54:	028f0333          	mul	t1,t5,s0
 8006c58:	94be                	add	s1,s1,a5
 8006c5a:	0108d413          	srli	s0,a7,0x10
 8006c5e:	94a2                	add	s1,s1,s0
 8006c60:	00f4f363          	bgeu	s1,a5,8006c66 <__muldf3+0x286>
 8006c64:	934e                	add	t1,t1,s3
 8006c66:	67c1                	lui	a5,0x10
 8006c68:	17fd                	addi	a5,a5,-1
 8006c6a:	00f4f733          	and	a4,s1,a5
 8006c6e:	00f8f8b3          	and	a7,a7,a5
 8006c72:	0742                	slli	a4,a4,0x10
 8006c74:	9e1e                	add	t3,t3,t2
 8006c76:	9746                	add	a4,a4,a7
 8006c78:	012e3933          	sltu	s2,t3,s2
 8006c7c:	9776                	add	a4,a4,t4
 8006c7e:	01270433          	add	s0,a4,s2
 8006c82:	9e36                	add	t3,t3,a3
 8006c84:	00de36b3          	sltu	a3,t3,a3
 8006c88:	01f408b3          	add	a7,s0,t6
 8006c8c:	00d88f33          	add	t5,a7,a3
 8006c90:	01d73733          	sltu	a4,a4,t4
 8006c94:	01243433          	sltu	s0,s0,s2
 8006c98:	8c59                	or	s0,s0,a4
 8006c9a:	80c1                	srli	s1,s1,0x10
 8006c9c:	01f8b8b3          	sltu	a7,a7,t6
 8006ca0:	00df36b3          	sltu	a3,t5,a3
 8006ca4:	9426                	add	s0,s0,s1
 8006ca6:	00d8e6b3          	or	a3,a7,a3
 8006caa:	9436                	add	s0,s0,a3
 8006cac:	941a                	add	s0,s0,t1
 8006cae:	017f5793          	srli	a5,t5,0x17
 8006cb2:	0426                	slli	s0,s0,0x9
 8006cb4:	8c5d                	or	s0,s0,a5
 8006cb6:	009e1793          	slli	a5,t3,0x9
 8006cba:	8fcd                	or	a5,a5,a1
 8006cbc:	00f037b3          	snez	a5,a5
 8006cc0:	017e5e13          	srli	t3,t3,0x17
 8006cc4:	009f1713          	slli	a4,t5,0x9
 8006cc8:	01c7e7b3          	or	a5,a5,t3
 8006ccc:	8fd9                	or	a5,a5,a4
 8006cce:	00741713          	slli	a4,s0,0x7
 8006cd2:	0a075863          	bgez	a4,8006d82 <__muldf3+0x3a2>
 8006cd6:	0017d713          	srli	a4,a5,0x1
 8006cda:	8b85                	andi	a5,a5,1
 8006cdc:	8fd9                	or	a5,a5,a4
 8006cde:	01f41713          	slli	a4,s0,0x1f
 8006ce2:	8fd9                	or	a5,a5,a4
 8006ce4:	8005                	srli	s0,s0,0x1
 8006ce6:	3ff80693          	addi	a3,a6,1023
 8006cea:	08d05e63          	blez	a3,8006d86 <__muldf3+0x3a6>
 8006cee:	0077f713          	andi	a4,a5,7
 8006cf2:	cf01                	beqz	a4,8006d0a <__muldf3+0x32a>
 8006cf4:	00f7f713          	andi	a4,a5,15
 8006cf8:	4591                	li	a1,4
 8006cfa:	00b70863          	beq	a4,a1,8006d0a <__muldf3+0x32a>
 8006cfe:	00478713          	addi	a4,a5,4 # 10004 <__stack_size+0xf004>
 8006d02:	00f737b3          	sltu	a5,a4,a5
 8006d06:	943e                	add	s0,s0,a5
 8006d08:	87ba                	mv	a5,a4
 8006d0a:	00741713          	slli	a4,s0,0x7
 8006d0e:	00075863          	bgez	a4,8006d1e <__muldf3+0x33e>
 8006d12:	ff000737          	lui	a4,0xff000
 8006d16:	177d                	addi	a4,a4,-1
 8006d18:	8c79                	and	s0,s0,a4
 8006d1a:	40080693          	addi	a3,a6,1024
 8006d1e:	7fe00713          	li	a4,2046
 8006d22:	0ed74c63          	blt	a4,a3,8006e1a <__muldf3+0x43a>
 8006d26:	0037d713          	srli	a4,a5,0x3
 8006d2a:	01d41793          	slli	a5,s0,0x1d
 8006d2e:	8fd9                	or	a5,a5,a4
 8006d30:	800d                	srli	s0,s0,0x3
 8006d32:	0432                	slli	s0,s0,0xc
 8006d34:	7ff6f713          	andi	a4,a3,2047
 8006d38:	0752                	slli	a4,a4,0x14
 8006d3a:	8031                	srli	s0,s0,0xc
 8006d3c:	8c59                	or	s0,s0,a4
 8006d3e:	067e                	slli	a2,a2,0x1f
 8006d40:	00c46733          	or	a4,s0,a2
 8006d44:	50b2                	lw	ra,44(sp)
 8006d46:	5422                	lw	s0,40(sp)
 8006d48:	5492                	lw	s1,36(sp)
 8006d4a:	5902                	lw	s2,32(sp)
 8006d4c:	49f2                	lw	s3,28(sp)
 8006d4e:	4a62                	lw	s4,24(sp)
 8006d50:	4ad2                	lw	s5,20(sp)
 8006d52:	4b42                	lw	s6,16(sp)
 8006d54:	4bb2                	lw	s7,12(sp)
 8006d56:	853e                	mv	a0,a5
 8006d58:	85ba                	mv	a1,a4
 8006d5a:	6145                	addi	sp,sp,48
 8006d5c:	8082                	ret
 8006d5e:	8652                	mv	a2,s4
 8006d60:	8426                	mv	s0,s1
 8006d62:	87ca                	mv	a5,s2
 8006d64:	875e                	mv	a4,s7
 8006d66:	4689                	li	a3,2
 8006d68:	0ad70963          	beq	a4,a3,8006e1a <__muldf3+0x43a>
 8006d6c:	468d                	li	a3,3
 8006d6e:	08d70f63          	beq	a4,a3,8006e0c <__muldf3+0x42c>
 8006d72:	4685                	li	a3,1
 8006d74:	f6d719e3          	bne	a4,a3,8006ce6 <__muldf3+0x306>
 8006d78:	4401                	li	s0,0
 8006d7a:	4781                	li	a5,0
 8006d7c:	a09d                	j	8006de2 <__muldf3+0x402>
 8006d7e:	8656                	mv	a2,s5
 8006d80:	b7dd                	j	8006d66 <__muldf3+0x386>
 8006d82:	882a                	mv	a6,a0
 8006d84:	b78d                	j	8006ce6 <__muldf3+0x306>
 8006d86:	4585                	li	a1,1
 8006d88:	8d95                	sub	a1,a1,a3
 8006d8a:	03800713          	li	a4,56
 8006d8e:	feb745e3          	blt	a4,a1,8006d78 <__muldf3+0x398>
 8006d92:	477d                	li	a4,31
 8006d94:	04b74963          	blt	a4,a1,8006de6 <__muldf3+0x406>
 8006d98:	41e80813          	addi	a6,a6,1054
 8006d9c:	01041733          	sll	a4,s0,a6
 8006da0:	00b7d6b3          	srl	a3,a5,a1
 8006da4:	010797b3          	sll	a5,a5,a6
 8006da8:	8f55                	or	a4,a4,a3
 8006daa:	00f037b3          	snez	a5,a5
 8006dae:	8fd9                	or	a5,a5,a4
 8006db0:	00b45433          	srl	s0,s0,a1
 8006db4:	0077f713          	andi	a4,a5,7
 8006db8:	cf01                	beqz	a4,8006dd0 <__muldf3+0x3f0>
 8006dba:	00f7f713          	andi	a4,a5,15
 8006dbe:	4691                	li	a3,4
 8006dc0:	00d70863          	beq	a4,a3,8006dd0 <__muldf3+0x3f0>
 8006dc4:	00478713          	addi	a4,a5,4
 8006dc8:	00f737b3          	sltu	a5,a4,a5
 8006dcc:	943e                	add	s0,s0,a5
 8006dce:	87ba                	mv	a5,a4
 8006dd0:	00841713          	slli	a4,s0,0x8
 8006dd4:	04074863          	bltz	a4,8006e24 <__muldf3+0x444>
 8006dd8:	01d41713          	slli	a4,s0,0x1d
 8006ddc:	838d                	srli	a5,a5,0x3
 8006dde:	8fd9                	or	a5,a5,a4
 8006de0:	800d                	srli	s0,s0,0x3
 8006de2:	4681                	li	a3,0
 8006de4:	b7b9                	j	8006d32 <__muldf3+0x352>
 8006de6:	5705                	li	a4,-31
 8006de8:	8f15                	sub	a4,a4,a3
 8006dea:	02000513          	li	a0,32
 8006dee:	00e45733          	srl	a4,s0,a4
 8006df2:	4681                	li	a3,0
 8006df4:	00a58663          	beq	a1,a0,8006e00 <__muldf3+0x420>
 8006df8:	43e80813          	addi	a6,a6,1086
 8006dfc:	010416b3          	sll	a3,s0,a6
 8006e00:	8fd5                	or	a5,a5,a3
 8006e02:	00f037b3          	snez	a5,a5
 8006e06:	8fd9                	or	a5,a5,a4
 8006e08:	4401                	li	s0,0
 8006e0a:	b76d                	j	8006db4 <__muldf3+0x3d4>
 8006e0c:	00080437          	lui	s0,0x80
 8006e10:	4781                	li	a5,0
 8006e12:	7ff00693          	li	a3,2047
 8006e16:	4601                	li	a2,0
 8006e18:	bf29                	j	8006d32 <__muldf3+0x352>
 8006e1a:	4401                	li	s0,0
 8006e1c:	4781                	li	a5,0
 8006e1e:	7ff00693          	li	a3,2047
 8006e22:	bf01                	j	8006d32 <__muldf3+0x352>
 8006e24:	4401                	li	s0,0
 8006e26:	4781                	li	a5,0
 8006e28:	4685                	li	a3,1
 8006e2a:	b721                	j	8006d32 <__muldf3+0x352>

08006e2c <__fixdfsi>:
 8006e2c:	0145d713          	srli	a4,a1,0x14
 8006e30:	001006b7          	lui	a3,0x100
 8006e34:	fff68793          	addi	a5,a3,-1 # fffff <__stack_size+0xfefff>
 8006e38:	7ff77713          	andi	a4,a4,2047
 8006e3c:	3fe00613          	li	a2,1022
 8006e40:	8fed                	and	a5,a5,a1
 8006e42:	81fd                	srli	a1,a1,0x1f
 8006e44:	04e65463          	bge	a2,a4,8006e8c <__fixdfsi+0x60>
 8006e48:	41d00613          	li	a2,1053
 8006e4c:	00e65863          	bge	a2,a4,8006e5c <__fixdfsi+0x30>
 8006e50:	80000537          	lui	a0,0x80000
 8006e54:	fff54513          	not	a0,a0
 8006e58:	952e                	add	a0,a0,a1
 8006e5a:	8082                	ret
 8006e5c:	8fd5                	or	a5,a5,a3
 8006e5e:	43300693          	li	a3,1075
 8006e62:	8e99                	sub	a3,a3,a4
 8006e64:	467d                	li	a2,31
 8006e66:	00d64d63          	blt	a2,a3,8006e80 <__fixdfsi+0x54>
 8006e6a:	bed70713          	addi	a4,a4,-1043 # fefffbed <_sp+0xdeff7bed>
 8006e6e:	00e797b3          	sll	a5,a5,a4
 8006e72:	00d55533          	srl	a0,a0,a3
 8006e76:	8d5d                	or	a0,a0,a5
 8006e78:	c999                	beqz	a1,8006e8e <__fixdfsi+0x62>
 8006e7a:	40a00533          	neg	a0,a0
 8006e7e:	8082                	ret
 8006e80:	41300513          	li	a0,1043
 8006e84:	8d19                	sub	a0,a0,a4
 8006e86:	00a7d533          	srl	a0,a5,a0
 8006e8a:	b7fd                	j	8006e78 <__fixdfsi+0x4c>
 8006e8c:	4501                	li	a0,0
 8006e8e:	8082                	ret

08006e90 <__floatunsidf>:
 8006e90:	1141                	addi	sp,sp,-16
 8006e92:	c422                	sw	s0,8(sp)
 8006e94:	c606                	sw	ra,12(sp)
 8006e96:	842a                	mv	s0,a0
 8006e98:	c521                	beqz	a0,8006ee0 <__floatunsidf+0x50>
 8006e9a:	00000097          	auipc	ra,0x0
 8006e9e:	206080e7          	jalr	518(ra) # 80070a0 <__clzsi2>
 8006ea2:	41e00713          	li	a4,1054
 8006ea6:	47a9                	li	a5,10
 8006ea8:	8f09                	sub	a4,a4,a0
 8006eaa:	02a7c663          	blt	a5,a0,8006ed6 <__floatunsidf+0x46>
 8006eae:	47ad                	li	a5,11
 8006eb0:	8f89                	sub	a5,a5,a0
 8006eb2:	0555                	addi	a0,a0,21
 8006eb4:	00f457b3          	srl	a5,s0,a5
 8006eb8:	00a41433          	sll	s0,s0,a0
 8006ebc:	8522                	mv	a0,s0
 8006ebe:	40b2                	lw	ra,12(sp)
 8006ec0:	4422                	lw	s0,8(sp)
 8006ec2:	07b2                	slli	a5,a5,0xc
 8006ec4:	7ff77713          	andi	a4,a4,2047
 8006ec8:	0752                	slli	a4,a4,0x14
 8006eca:	83b1                	srli	a5,a5,0xc
 8006ecc:	00e7e6b3          	or	a3,a5,a4
 8006ed0:	85b6                	mv	a1,a3
 8006ed2:	0141                	addi	sp,sp,16
 8006ed4:	8082                	ret
 8006ed6:	1555                	addi	a0,a0,-11
 8006ed8:	00a417b3          	sll	a5,s0,a0
 8006edc:	4401                	li	s0,0
 8006ede:	bff9                	j	8006ebc <__floatunsidf+0x2c>
 8006ee0:	4781                	li	a5,0
 8006ee2:	4701                	li	a4,0
 8006ee4:	bfe1                	j	8006ebc <__floatunsidf+0x2c>

08006ee6 <__floatundidf>:
 8006ee6:	1101                	addi	sp,sp,-32
 8006ee8:	ce06                	sw	ra,28(sp)
 8006eea:	cc22                	sw	s0,24(sp)
 8006eec:	ca26                	sw	s1,20(sp)
 8006eee:	c84a                	sw	s2,16(sp)
 8006ef0:	c64e                	sw	s3,12(sp)
 8006ef2:	c452                	sw	s4,8(sp)
 8006ef4:	00b567b3          	or	a5,a0,a1
 8006ef8:	14078663          	beqz	a5,8007044 <__floatundidf+0x15e>
 8006efc:	842a                	mv	s0,a0
 8006efe:	892e                	mv	s2,a1
 8006f00:	84ae                	mv	s1,a1
 8006f02:	c5bd                	beqz	a1,8006f70 <__floatundidf+0x8a>
 8006f04:	852e                	mv	a0,a1
 8006f06:	00000097          	auipc	ra,0x0
 8006f0a:	19a080e7          	jalr	410(ra) # 80070a0 <__clzsi2>
 8006f0e:	89aa                	mv	s3,a0
 8006f10:	43e00a13          	li	s4,1086
 8006f14:	413a0a33          	sub	s4,s4,s3
 8006f18:	43300793          	li	a5,1075
 8006f1c:	0747c763          	blt	a5,s4,8006f8a <__floatundidf+0xa4>
 8006f20:	47ad                	li	a5,11
 8006f22:	8522                	mv	a0,s0
 8006f24:	0337d363          	bge	a5,s3,8006f4a <__floatundidf+0x64>
 8006f28:	02a00793          	li	a5,42
 8006f2c:	0537c963          	blt	a5,s3,8006f7e <__floatundidf+0x98>
 8006f30:	02b00593          	li	a1,43
 8006f34:	ff598793          	addi	a5,s3,-11
 8006f38:	413585b3          	sub	a1,a1,s3
 8006f3c:	00b455b3          	srl	a1,s0,a1
 8006f40:	00f914b3          	sll	s1,s2,a5
 8006f44:	8ccd                	or	s1,s1,a1
 8006f46:	00f41533          	sll	a0,s0,a5
 8006f4a:	00c49593          	slli	a1,s1,0xc
 8006f4e:	40f2                	lw	ra,28(sp)
 8006f50:	4462                	lw	s0,24(sp)
 8006f52:	7ffa7a13          	andi	s4,s4,2047
 8006f56:	0a52                	slli	s4,s4,0x14
 8006f58:	81b1                	srli	a1,a1,0xc
 8006f5a:	0145e7b3          	or	a5,a1,s4
 8006f5e:	872a                	mv	a4,a0
 8006f60:	44d2                	lw	s1,20(sp)
 8006f62:	4942                	lw	s2,16(sp)
 8006f64:	49b2                	lw	s3,12(sp)
 8006f66:	4a22                	lw	s4,8(sp)
 8006f68:	853a                	mv	a0,a4
 8006f6a:	85be                	mv	a1,a5
 8006f6c:	6105                	addi	sp,sp,32
 8006f6e:	8082                	ret
 8006f70:	00000097          	auipc	ra,0x0
 8006f74:	130080e7          	jalr	304(ra) # 80070a0 <__clzsi2>
 8006f78:	02050993          	addi	s3,a0,32 # 80000020 <_sp+0x5fff8020>
 8006f7c:	bf51                	j	8006f10 <__floatundidf+0x2a>
 8006f7e:	fd598593          	addi	a1,s3,-43
 8006f82:	00b414b3          	sll	s1,s0,a1
 8006f86:	4501                	li	a0,0
 8006f88:	b7c9                	j	8006f4a <__floatundidf+0x64>
 8006f8a:	43600793          	li	a5,1078
 8006f8e:	0347d963          	bge	a5,s4,8006fc0 <__floatundidf+0xda>
 8006f92:	03898613          	addi	a2,s3,56
 8006f96:	8522                	mv	a0,s0
 8006f98:	85ca                	mv	a1,s2
 8006f9a:	00000097          	auipc	ra,0x0
 8006f9e:	0dc080e7          	jalr	220(ra) # 8007076 <__ashldi3>
 8006fa2:	8dc9                	or	a1,a1,a0
 8006fa4:	4621                	li	a2,8
 8006fa6:	00b034b3          	snez	s1,a1
 8006faa:	8522                	mv	a0,s0
 8006fac:	85ca                	mv	a1,s2
 8006fae:	41360633          	sub	a2,a2,s3
 8006fb2:	00000097          	auipc	ra,0x0
 8006fb6:	09a080e7          	jalr	154(ra) # 800704c <__lshrdi3>
 8006fba:	00a4e433          	or	s0,s1,a0
 8006fbe:	892e                	mv	s2,a1
 8006fc0:	47a1                	li	a5,8
 8006fc2:	8522                	mv	a0,s0
 8006fc4:	0337d463          	bge	a5,s3,8006fec <__floatundidf+0x106>
 8006fc8:	02700793          	li	a5,39
 8006fcc:	0737c663          	blt	a5,s3,8007038 <__floatundidf+0x152>
 8006fd0:	02800593          	li	a1,40
 8006fd4:	ff898793          	addi	a5,s3,-8
 8006fd8:	413585b3          	sub	a1,a1,s3
 8006fdc:	00f91933          	sll	s2,s2,a5
 8006fe0:	00b455b3          	srl	a1,s0,a1
 8006fe4:	0125e933          	or	s2,a1,s2
 8006fe8:	00f41533          	sll	a0,s0,a5
 8006fec:	ff8007b7          	lui	a5,0xff800
 8006ff0:	17fd                	addi	a5,a5,-1
 8006ff2:	00f975b3          	and	a1,s2,a5
 8006ff6:	00757793          	andi	a5,a0,7
 8006ffa:	cf81                	beqz	a5,8007012 <__floatundidf+0x12c>
 8006ffc:	00f57793          	andi	a5,a0,15
 8007000:	4711                	li	a4,4
 8007002:	00e78863          	beq	a5,a4,8007012 <__floatundidf+0x12c>
 8007006:	00450793          	addi	a5,a0,4
 800700a:	00a7b533          	sltu	a0,a5,a0
 800700e:	95aa                	add	a1,a1,a0
 8007010:	853e                	mv	a0,a5
 8007012:	00859793          	slli	a5,a1,0x8
 8007016:	0007da63          	bgez	a5,800702a <__floatundidf+0x144>
 800701a:	ff8007b7          	lui	a5,0xff800
 800701e:	17fd                	addi	a5,a5,-1
 8007020:	43f00a13          	li	s4,1087
 8007024:	8dfd                	and	a1,a1,a5
 8007026:	413a0a33          	sub	s4,s4,s3
 800702a:	810d                	srli	a0,a0,0x3
 800702c:	01d59793          	slli	a5,a1,0x1d
 8007030:	8d5d                	or	a0,a0,a5
 8007032:	0035d493          	srli	s1,a1,0x3
 8007036:	bf11                	j	8006f4a <__floatundidf+0x64>
 8007038:	fd898913          	addi	s2,s3,-40
 800703c:	01241933          	sll	s2,s0,s2
 8007040:	4501                	li	a0,0
 8007042:	b76d                	j	8006fec <__floatundidf+0x106>
 8007044:	4481                	li	s1,0
 8007046:	4501                	li	a0,0
 8007048:	4a01                	li	s4,0
 800704a:	b701                	j	8006f4a <__floatundidf+0x64>

0800704c <__lshrdi3>:
 800704c:	ce01                	beqz	a2,8007064 <__lshrdi3+0x18>
 800704e:	02000793          	li	a5,32
 8007052:	8f91                	sub	a5,a5,a2
 8007054:	00f04963          	bgtz	a5,8007066 <__lshrdi3+0x1a>
 8007058:	fe060513          	addi	a0,a2,-32
 800705c:	4701                	li	a4,0
 800705e:	00a5d533          	srl	a0,a1,a0
 8007062:	85ba                	mv	a1,a4
 8007064:	8082                	ret
 8007066:	00c5d733          	srl	a4,a1,a2
 800706a:	00c55533          	srl	a0,a0,a2
 800706e:	00f595b3          	sll	a1,a1,a5
 8007072:	8d4d                	or	a0,a0,a1
 8007074:	b7fd                	j	8007062 <__lshrdi3+0x16>

08007076 <__ashldi3>:
 8007076:	ce01                	beqz	a2,800708e <__ashldi3+0x18>
 8007078:	02000793          	li	a5,32
 800707c:	8f91                	sub	a5,a5,a2
 800707e:	00f04963          	bgtz	a5,8007090 <__ashldi3+0x1a>
 8007082:	fe060593          	addi	a1,a2,-32
 8007086:	4701                	li	a4,0
 8007088:	00b515b3          	sll	a1,a0,a1
 800708c:	853a                	mv	a0,a4
 800708e:	8082                	ret
 8007090:	00c51733          	sll	a4,a0,a2
 8007094:	00c595b3          	sll	a1,a1,a2
 8007098:	00f55533          	srl	a0,a0,a5
 800709c:	8dc9                	or	a1,a1,a0
 800709e:	b7fd                	j	800708c <__ashldi3+0x16>

080070a0 <__clzsi2>:
 80070a0:	67c1                	lui	a5,0x10
 80070a2:	02f57663          	bgeu	a0,a5,80070ce <__clzsi2+0x2e>
 80070a6:	0ff00793          	li	a5,255
 80070aa:	00a7b7b3          	sltu	a5,a5,a0
 80070ae:	078e                	slli	a5,a5,0x3
 80070b0:	02000713          	li	a4,32
 80070b4:	8f1d                	sub	a4,a4,a5
 80070b6:	00f557b3          	srl	a5,a0,a5
 80070ba:	ffff9517          	auipc	a0,0xffff9
 80070be:	45e50513          	addi	a0,a0,1118 # 8000518 <__clz_tab>
 80070c2:	97aa                	add	a5,a5,a0
 80070c4:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xf000>
 80070c8:	40a70533          	sub	a0,a4,a0
 80070cc:	8082                	ret
 80070ce:	01000737          	lui	a4,0x1000
 80070d2:	47c1                	li	a5,16
 80070d4:	fce56ee3          	bltu	a0,a4,80070b0 <__clzsi2+0x10>
 80070d8:	47e1                	li	a5,24
 80070da:	bfd9                	j	80070b0 <__clzsi2+0x10>

080070dc <atexit>:
 80070dc:	85aa                	mv	a1,a0
 80070de:	4681                	li	a3,0
 80070e0:	4601                	li	a2,0
 80070e2:	4501                	li	a0,0
 80070e4:	00000317          	auipc	t1,0x0
 80070e8:	17e30067          	jr	382(t1) # 8007262 <__register_exitproc>

080070ec <exit>:
 80070ec:	1141                	addi	sp,sp,-16
 80070ee:	c422                	sw	s0,8(sp)
 80070f0:	c606                	sw	ra,12(sp)
 80070f2:	00000797          	auipc	a5,0x0
 80070f6:	1fc78793          	addi	a5,a5,508 # 80072ee <__call_exitprocs>
 80070fa:	842a                	mv	s0,a0
 80070fc:	c791                	beqz	a5,8007108 <exit+0x1c>
 80070fe:	4581                	li	a1,0
 8007100:	00000097          	auipc	ra,0x0
 8007104:	1ee080e7          	jalr	494(ra) # 80072ee <__call_exitprocs>
 8007108:	00001797          	auipc	a5,0x1
 800710c:	ccc78793          	addi	a5,a5,-820 # 8007dd4 <_global_impure_ptr>
 8007110:	4388                	lw	a0,0(a5)
 8007112:	551c                	lw	a5,40(a0)
 8007114:	c391                	beqz	a5,8007118 <exit+0x2c>
 8007116:	9782                	jalr	a5
 8007118:	8522                	mv	a0,s0
 800711a:	ffffb097          	auipc	ra,0xffffb
 800711e:	a00080e7          	jalr	-1536(ra) # 8001b1a <_exit>

08007122 <__libc_fini_array>:
 8007122:	1141                	addi	sp,sp,-16
 8007124:	00001797          	auipc	a5,0x1
 8007128:	cb478793          	addi	a5,a5,-844 # 8007dd8 <__fini_array_end>
 800712c:	c422                	sw	s0,8(sp)
 800712e:	00001417          	auipc	s0,0x1
 8007132:	caa40413          	addi	s0,s0,-854 # 8007dd8 <__fini_array_end>
 8007136:	8c1d                	sub	s0,s0,a5
 8007138:	c226                	sw	s1,4(sp)
 800713a:	c606                	sw	ra,12(sp)
 800713c:	8409                	srai	s0,s0,0x2
 800713e:	84be                	mv	s1,a5
 8007140:	e411                	bnez	s0,800714c <__libc_fini_array+0x2a>
 8007142:	40b2                	lw	ra,12(sp)
 8007144:	4422                	lw	s0,8(sp)
 8007146:	4492                	lw	s1,4(sp)
 8007148:	0141                	addi	sp,sp,16
 800714a:	8082                	ret
 800714c:	147d                	addi	s0,s0,-1
 800714e:	00241793          	slli	a5,s0,0x2
 8007152:	97a6                	add	a5,a5,s1
 8007154:	439c                	lw	a5,0(a5)
 8007156:	9782                	jalr	a5
 8007158:	b7e5                	j	8007140 <__libc_fini_array+0x1e>

0800715a <__libc_init_array>:
 800715a:	1141                	addi	sp,sp,-16
 800715c:	00001797          	auipc	a5,0x1
 8007160:	c7c78793          	addi	a5,a5,-900 # 8007dd8 <__fini_array_end>
 8007164:	c422                	sw	s0,8(sp)
 8007166:	00001417          	auipc	s0,0x1
 800716a:	c7240413          	addi	s0,s0,-910 # 8007dd8 <__fini_array_end>
 800716e:	8c1d                	sub	s0,s0,a5
 8007170:	c226                	sw	s1,4(sp)
 8007172:	c04a                	sw	s2,0(sp)
 8007174:	c606                	sw	ra,12(sp)
 8007176:	8409                	srai	s0,s0,0x2
 8007178:	4481                	li	s1,0
 800717a:	893e                	mv	s2,a5
 800717c:	02849663          	bne	s1,s0,80071a8 <__libc_init_array+0x4e>
 8007180:	00001797          	auipc	a5,0x1
 8007184:	c5878793          	addi	a5,a5,-936 # 8007dd8 <__fini_array_end>
 8007188:	00001417          	auipc	s0,0x1
 800718c:	c5040413          	addi	s0,s0,-944 # 8007dd8 <__fini_array_end>
 8007190:	8c1d                	sub	s0,s0,a5
 8007192:	8409                	srai	s0,s0,0x2
 8007194:	4481                	li	s1,0
 8007196:	893e                	mv	s2,a5
 8007198:	00849f63          	bne	s1,s0,80071b6 <__libc_init_array+0x5c>
 800719c:	40b2                	lw	ra,12(sp)
 800719e:	4422                	lw	s0,8(sp)
 80071a0:	4492                	lw	s1,4(sp)
 80071a2:	4902                	lw	s2,0(sp)
 80071a4:	0141                	addi	sp,sp,16
 80071a6:	8082                	ret
 80071a8:	00249793          	slli	a5,s1,0x2
 80071ac:	97ca                	add	a5,a5,s2
 80071ae:	439c                	lw	a5,0(a5)
 80071b0:	0485                	addi	s1,s1,1
 80071b2:	9782                	jalr	a5
 80071b4:	b7e1                	j	800717c <__libc_init_array+0x22>
 80071b6:	00249793          	slli	a5,s1,0x2
 80071ba:	97ca                	add	a5,a5,s2
 80071bc:	439c                	lw	a5,0(a5)
 80071be:	0485                	addi	s1,s1,1
 80071c0:	9782                	jalr	a5
 80071c2:	bfd9                	j	8007198 <__libc_init_array+0x3e>

080071c4 <memcpy>:
 80071c4:	832a                	mv	t1,a0
 80071c6:	ca09                	beqz	a2,80071d8 <memcpy+0x14>
 80071c8:	00058383          	lb	t2,0(a1)
 80071cc:	00730023          	sb	t2,0(t1)
 80071d0:	167d                	addi	a2,a2,-1
 80071d2:	0305                	addi	t1,t1,1
 80071d4:	0585                	addi	a1,a1,1
 80071d6:	fa6d                	bnez	a2,80071c8 <memcpy+0x4>
 80071d8:	8082                	ret

080071da <memset>:
 80071da:	832a                	mv	t1,a0
 80071dc:	c611                	beqz	a2,80071e8 <memset+0xe>
 80071de:	00b30023          	sb	a1,0(t1)
 80071e2:	167d                	addi	a2,a2,-1
 80071e4:	0305                	addi	t1,t1,1
 80071e6:	fe65                	bnez	a2,80071de <memset+0x4>
 80071e8:	8082                	ret

080071ea <siprintf>:
 80071ea:	7135                	addi	sp,sp,-160
 80071ec:	cb3e                	sw	a5,148(sp)
 80071ee:	800007b7          	lui	a5,0x80000
 80071f2:	fff7c793          	not	a5,a5
 80071f6:	ce3e                	sw	a5,28(sp)
 80071f8:	c83e                	sw	a5,16(sp)
 80071fa:	77c1                	lui	a5,0xffff0
 80071fc:	20878793          	addi	a5,a5,520 # ffff0208 <_sp+0xdffe8208>
 8007200:	c532                	sw	a2,136(sp)
 8007202:	c736                	sw	a3,140(sp)
 8007204:	c93a                	sw	a4,144(sp)
 8007206:	cd42                	sw	a6,152(sp)
 8007208:	cf46                	sw	a7,156(sp)
 800720a:	ca3e                	sw	a5,20(sp)
 800720c:	17ff9797          	auipc	a5,0x17ff9
 8007210:	2f078793          	addi	a5,a5,752 # 200004fc <_impure_ptr>
 8007214:	c42a                	sw	a0,8(sp)
 8007216:	cc2a                	sw	a0,24(sp)
 8007218:	4388                	lw	a0,0(a5)
 800721a:	0134                	addi	a3,sp,136
 800721c:	862e                	mv	a2,a1
 800721e:	002c                	addi	a1,sp,8
 8007220:	de86                	sw	ra,124(sp)
 8007222:	c236                	sw	a3,4(sp)
 8007224:	00000097          	auipc	ra,0x0
 8007228:	44e080e7          	jalr	1102(ra) # 8007672 <_svfiprintf_r>
 800722c:	47a2                	lw	a5,8(sp)
 800722e:	00078023          	sb	zero,0(a5)
 8007232:	50f6                	lw	ra,124(sp)
 8007234:	610d                	addi	sp,sp,160
 8007236:	8082                	ret

08007238 <strcmp>:
 8007238:	00054603          	lbu	a2,0(a0)
 800723c:	0005c683          	lbu	a3,0(a1)
 8007240:	0505                	addi	a0,a0,1
 8007242:	0585                	addi	a1,a1,1
 8007244:	00d61363          	bne	a2,a3,800724a <strcmp+0x12>
 8007248:	fa65                	bnez	a2,8007238 <strcmp>
 800724a:	40d60533          	sub	a0,a2,a3
 800724e:	8082                	ret

08007250 <strlen>:
 8007250:	87aa                	mv	a5,a0
 8007252:	0785                	addi	a5,a5,1
 8007254:	fff7c703          	lbu	a4,-1(a5)
 8007258:	ff6d                	bnez	a4,8007252 <strlen+0x2>
 800725a:	40a78533          	sub	a0,a5,a0
 800725e:	157d                	addi	a0,a0,-1
 8007260:	8082                	ret

08007262 <__register_exitproc>:
 8007262:	17ff9797          	auipc	a5,0x17ff9
 8007266:	2e678793          	addi	a5,a5,742 # 20000548 <_global_atexit>
 800726a:	439c                	lw	a5,0(a5)
 800726c:	8e2a                	mv	t3,a0
 800726e:	e78d                	bnez	a5,8007298 <__register_exitproc+0x36>
 8007270:	17ffa717          	auipc	a4,0x17ffa
 8007274:	2e470713          	addi	a4,a4,740 # 20001554 <_global_atexit0>
 8007278:	17ff9797          	auipc	a5,0x17ff9
 800727c:	2ce7a823          	sw	a4,720(a5) # 20000548 <_global_atexit>
 8007280:	f7ff9517          	auipc	a0,0xf7ff9
 8007284:	d8050513          	addi	a0,a0,-640 # 0 <__dbg_stack_size>
 8007288:	87ba                	mv	a5,a4
 800728a:	c519                	beqz	a0,8007298 <__register_exitproc+0x36>
 800728c:	411c                	lw	a5,0(a0)
 800728e:	17ffa517          	auipc	a0,0x17ffa
 8007292:	34f52723          	sw	a5,846(a0) # 200015dc <_global_atexit0+0x88>
 8007296:	87ba                	mv	a5,a4
 8007298:	43d8                	lw	a4,4(a5)
 800729a:	487d                	li	a6,31
 800729c:	557d                	li	a0,-1
 800729e:	04e84763          	blt	a6,a4,80072ec <__register_exitproc+0x8a>
 80072a2:	020e0e63          	beqz	t3,80072de <__register_exitproc+0x7c>
 80072a6:	0887a803          	lw	a6,136(a5)
 80072aa:	04080163          	beqz	a6,80072ec <__register_exitproc+0x8a>
 80072ae:	00271893          	slli	a7,a4,0x2
 80072b2:	98c2                	add	a7,a7,a6
 80072b4:	00c8a023          	sw	a2,0(a7)
 80072b8:	10082303          	lw	t1,256(a6)
 80072bc:	4605                	li	a2,1
 80072be:	00e61633          	sll	a2,a2,a4
 80072c2:	00c36333          	or	t1,t1,a2
 80072c6:	10682023          	sw	t1,256(a6)
 80072ca:	08d8a023          	sw	a3,128(a7)
 80072ce:	4689                	li	a3,2
 80072d0:	00de1763          	bne	t3,a3,80072de <__register_exitproc+0x7c>
 80072d4:	10482683          	lw	a3,260(a6)
 80072d8:	8e55                	or	a2,a2,a3
 80072da:	10c82223          	sw	a2,260(a6)
 80072de:	00170693          	addi	a3,a4,1
 80072e2:	070a                	slli	a4,a4,0x2
 80072e4:	c3d4                	sw	a3,4(a5)
 80072e6:	97ba                	add	a5,a5,a4
 80072e8:	c78c                	sw	a1,8(a5)
 80072ea:	4501                	li	a0,0
 80072ec:	8082                	ret

080072ee <__call_exitprocs>:
 80072ee:	7179                	addi	sp,sp,-48
 80072f0:	cc52                	sw	s4,24(sp)
 80072f2:	ca56                	sw	s5,20(sp)
 80072f4:	c85a                	sw	s6,16(sp)
 80072f6:	c65e                	sw	s7,12(sp)
 80072f8:	d606                	sw	ra,44(sp)
 80072fa:	d422                	sw	s0,40(sp)
 80072fc:	d226                	sw	s1,36(sp)
 80072fe:	d04a                	sw	s2,32(sp)
 8007300:	ce4e                	sw	s3,28(sp)
 8007302:	c462                	sw	s8,8(sp)
 8007304:	8b2a                	mv	s6,a0
 8007306:	8a2e                	mv	s4,a1
 8007308:	17ff9a97          	auipc	s5,0x17ff9
 800730c:	240a8a93          	addi	s5,s5,576 # 20000548 <_global_atexit>
 8007310:	4b85                	li	s7,1
 8007312:	000aa403          	lw	s0,0(s5)
 8007316:	c811                	beqz	s0,800732a <__call_exitprocs+0x3c>
 8007318:	4044                	lw	s1,4(s0)
 800731a:	08842983          	lw	s3,136(s0)
 800731e:	fff48913          	addi	s2,s1,-1 # 7ffff <__stack_size+0x7efff>
 8007322:	048a                	slli	s1,s1,0x2
 8007324:	94a2                	add	s1,s1,s0
 8007326:	00095e63          	bgez	s2,8007342 <__call_exitprocs+0x54>
 800732a:	50b2                	lw	ra,44(sp)
 800732c:	5422                	lw	s0,40(sp)
 800732e:	5492                	lw	s1,36(sp)
 8007330:	5902                	lw	s2,32(sp)
 8007332:	49f2                	lw	s3,28(sp)
 8007334:	4a62                	lw	s4,24(sp)
 8007336:	4ad2                	lw	s5,20(sp)
 8007338:	4b42                	lw	s6,16(sp)
 800733a:	4bb2                	lw	s7,12(sp)
 800733c:	4c22                	lw	s8,8(sp)
 800733e:	6145                	addi	sp,sp,48
 8007340:	8082                	ret
 8007342:	000a0e63          	beqz	s4,800735e <__call_exitprocs+0x70>
 8007346:	00099563          	bnez	s3,8007350 <__call_exitprocs+0x62>
 800734a:	197d                	addi	s2,s2,-1
 800734c:	14f1                	addi	s1,s1,-4
 800734e:	bfe1                	j	8007326 <__call_exitprocs+0x38>
 8007350:	00291793          	slli	a5,s2,0x2
 8007354:	97ce                	add	a5,a5,s3
 8007356:	0807a783          	lw	a5,128(a5)
 800735a:	ff4798e3          	bne	a5,s4,800734a <__call_exitprocs+0x5c>
 800735e:	4058                	lw	a4,4(s0)
 8007360:	40dc                	lw	a5,4(s1)
 8007362:	177d                	addi	a4,a4,-1
 8007364:	03271863          	bne	a4,s2,8007394 <__call_exitprocs+0xa6>
 8007368:	01242223          	sw	s2,4(s0)
 800736c:	dff9                	beqz	a5,800734a <__call_exitprocs+0x5c>
 800736e:	00442c03          	lw	s8,4(s0)
 8007372:	00098863          	beqz	s3,8007382 <__call_exitprocs+0x94>
 8007376:	1009a683          	lw	a3,256(s3)
 800737a:	012b9733          	sll	a4,s7,s2
 800737e:	8ef9                	and	a3,a3,a4
 8007380:	ee89                	bnez	a3,800739a <__call_exitprocs+0xac>
 8007382:	9782                	jalr	a5
 8007384:	4058                	lw	a4,4(s0)
 8007386:	000aa783          	lw	a5,0(s5)
 800738a:	f98714e3          	bne	a4,s8,8007312 <__call_exitprocs+0x24>
 800738e:	faf40ee3          	beq	s0,a5,800734a <__call_exitprocs+0x5c>
 8007392:	b741                	j	8007312 <__call_exitprocs+0x24>
 8007394:	0004a223          	sw	zero,4(s1)
 8007398:	bfd1                	j	800736c <__call_exitprocs+0x7e>
 800739a:	00291693          	slli	a3,s2,0x2
 800739e:	96ce                	add	a3,a3,s3
 80073a0:	428c                	lw	a1,0(a3)
 80073a2:	1049a683          	lw	a3,260(s3)
 80073a6:	8f75                	and	a4,a4,a3
 80073a8:	e701                	bnez	a4,80073b0 <__call_exitprocs+0xc2>
 80073aa:	855a                	mv	a0,s6
 80073ac:	9782                	jalr	a5
 80073ae:	bfd9                	j	8007384 <__call_exitprocs+0x96>
 80073b0:	852e                	mv	a0,a1
 80073b2:	9782                	jalr	a5
 80073b4:	bfc1                	j	8007384 <__call_exitprocs+0x96>

080073b6 <_free_r>:
 80073b6:	c9dd                	beqz	a1,800746c <_free_r+0xb6>
 80073b8:	ffc5a783          	lw	a5,-4(a1)
 80073bc:	1141                	addi	sp,sp,-16
 80073be:	c422                	sw	s0,8(sp)
 80073c0:	c606                	sw	ra,12(sp)
 80073c2:	c226                	sw	s1,4(sp)
 80073c4:	ffc58413          	addi	s0,a1,-4
 80073c8:	0007d363          	bgez	a5,80073ce <_free_r+0x18>
 80073cc:	943e                	add	s0,s0,a5
 80073ce:	84aa                	mv	s1,a0
 80073d0:	00001097          	auipc	ra,0x1
 80073d4:	96c080e7          	jalr	-1684(ra) # 8007d3c <__malloc_lock>
 80073d8:	17ff9797          	auipc	a5,0x17ff9
 80073dc:	17478793          	addi	a5,a5,372 # 2000054c <__malloc_free_list>
 80073e0:	439c                	lw	a5,0(a5)
 80073e2:	e385                	bnez	a5,8007402 <_free_r+0x4c>
 80073e4:	00042223          	sw	zero,4(s0)
 80073e8:	17ff9797          	auipc	a5,0x17ff9
 80073ec:	1687a223          	sw	s0,356(a5) # 2000054c <__malloc_free_list>
 80073f0:	4422                	lw	s0,8(sp)
 80073f2:	40b2                	lw	ra,12(sp)
 80073f4:	8526                	mv	a0,s1
 80073f6:	4492                	lw	s1,4(sp)
 80073f8:	0141                	addi	sp,sp,16
 80073fa:	00001317          	auipc	t1,0x1
 80073fe:	94430067          	jr	-1724(t1) # 8007d3e <__malloc_unlock>
 8007402:	00f47e63          	bgeu	s0,a5,800741e <_free_r+0x68>
 8007406:	4014                	lw	a3,0(s0)
 8007408:	00d40733          	add	a4,s0,a3
 800740c:	00e79663          	bne	a5,a4,8007418 <_free_r+0x62>
 8007410:	4398                	lw	a4,0(a5)
 8007412:	43dc                	lw	a5,4(a5)
 8007414:	9736                	add	a4,a4,a3
 8007416:	c018                	sw	a4,0(s0)
 8007418:	c05c                	sw	a5,4(s0)
 800741a:	b7f9                	j	80073e8 <_free_r+0x32>
 800741c:	87ba                	mv	a5,a4
 800741e:	43d8                	lw	a4,4(a5)
 8007420:	c319                	beqz	a4,8007426 <_free_r+0x70>
 8007422:	fee47de3          	bgeu	s0,a4,800741c <_free_r+0x66>
 8007426:	4394                	lw	a3,0(a5)
 8007428:	00d78633          	add	a2,a5,a3
 800742c:	00861f63          	bne	a2,s0,800744a <_free_r+0x94>
 8007430:	4010                	lw	a2,0(s0)
 8007432:	96b2                	add	a3,a3,a2
 8007434:	c394                	sw	a3,0(a5)
 8007436:	00d78633          	add	a2,a5,a3
 800743a:	fac71be3          	bne	a4,a2,80073f0 <_free_r+0x3a>
 800743e:	4310                	lw	a2,0(a4)
 8007440:	4358                	lw	a4,4(a4)
 8007442:	96b2                	add	a3,a3,a2
 8007444:	c394                	sw	a3,0(a5)
 8007446:	c3d8                	sw	a4,4(a5)
 8007448:	b765                	j	80073f0 <_free_r+0x3a>
 800744a:	00c47563          	bgeu	s0,a2,8007454 <_free_r+0x9e>
 800744e:	47b1                	li	a5,12
 8007450:	c09c                	sw	a5,0(s1)
 8007452:	bf79                	j	80073f0 <_free_r+0x3a>
 8007454:	4010                	lw	a2,0(s0)
 8007456:	00c406b3          	add	a3,s0,a2
 800745a:	00d71663          	bne	a4,a3,8007466 <_free_r+0xb0>
 800745e:	4314                	lw	a3,0(a4)
 8007460:	4358                	lw	a4,4(a4)
 8007462:	96b2                	add	a3,a3,a2
 8007464:	c014                	sw	a3,0(s0)
 8007466:	c058                	sw	a4,4(s0)
 8007468:	c3c0                	sw	s0,4(a5)
 800746a:	b759                	j	80073f0 <_free_r+0x3a>
 800746c:	8082                	ret

0800746e <_malloc_r>:
 800746e:	1101                	addi	sp,sp,-32
 8007470:	ca26                	sw	s1,20(sp)
 8007472:	00358493          	addi	s1,a1,3
 8007476:	98f1                	andi	s1,s1,-4
 8007478:	ce06                	sw	ra,28(sp)
 800747a:	cc22                	sw	s0,24(sp)
 800747c:	c84a                	sw	s2,16(sp)
 800747e:	c64e                	sw	s3,12(sp)
 8007480:	04a1                	addi	s1,s1,8
 8007482:	47b1                	li	a5,12
 8007484:	06f4f363          	bgeu	s1,a5,80074ea <_malloc_r+0x7c>
 8007488:	44b1                	li	s1,12
 800748a:	06b4e263          	bltu	s1,a1,80074ee <_malloc_r+0x80>
 800748e:	892a                	mv	s2,a0
 8007490:	00001097          	auipc	ra,0x1
 8007494:	8ac080e7          	jalr	-1876(ra) # 8007d3c <__malloc_lock>
 8007498:	17ff9797          	auipc	a5,0x17ff9
 800749c:	0b478793          	addi	a5,a5,180 # 2000054c <__malloc_free_list>
 80074a0:	4398                	lw	a4,0(a5)
 80074a2:	843a                	mv	s0,a4
 80074a4:	ec39                	bnez	s0,8007502 <_malloc_r+0x94>
 80074a6:	17ff9797          	auipc	a5,0x17ff9
 80074aa:	0aa78793          	addi	a5,a5,170 # 20000550 <__malloc_sbrk_start>
 80074ae:	439c                	lw	a5,0(a5)
 80074b0:	eb99                	bnez	a5,80074c6 <_malloc_r+0x58>
 80074b2:	4581                	li	a1,0
 80074b4:	854a                	mv	a0,s2
 80074b6:	00001097          	auipc	ra,0x1
 80074ba:	810080e7          	jalr	-2032(ra) # 8007cc6 <_sbrk_r>
 80074be:	17ff9797          	auipc	a5,0x17ff9
 80074c2:	08a7a923          	sw	a0,146(a5) # 20000550 <__malloc_sbrk_start>
 80074c6:	85a6                	mv	a1,s1
 80074c8:	854a                	mv	a0,s2
 80074ca:	00000097          	auipc	ra,0x0
 80074ce:	7fc080e7          	jalr	2044(ra) # 8007cc6 <_sbrk_r>
 80074d2:	59fd                	li	s3,-1
 80074d4:	07351f63          	bne	a0,s3,8007552 <_malloc_r+0xe4>
 80074d8:	47b1                	li	a5,12
 80074da:	00f92023          	sw	a5,0(s2)
 80074de:	854a                	mv	a0,s2
 80074e0:	00001097          	auipc	ra,0x1
 80074e4:	85e080e7          	jalr	-1954(ra) # 8007d3e <__malloc_unlock>
 80074e8:	a029                	j	80074f2 <_malloc_r+0x84>
 80074ea:	fa04d0e3          	bgez	s1,800748a <_malloc_r+0x1c>
 80074ee:	47b1                	li	a5,12
 80074f0:	c11c                	sw	a5,0(a0)
 80074f2:	4501                	li	a0,0
 80074f4:	40f2                	lw	ra,28(sp)
 80074f6:	4462                	lw	s0,24(sp)
 80074f8:	44d2                	lw	s1,20(sp)
 80074fa:	4942                	lw	s2,16(sp)
 80074fc:	49b2                	lw	s3,12(sp)
 80074fe:	6105                	addi	sp,sp,32
 8007500:	8082                	ret
 8007502:	401c                	lw	a5,0(s0)
 8007504:	8f85                	sub	a5,a5,s1
 8007506:	0407c363          	bltz	a5,800754c <_malloc_r+0xde>
 800750a:	46ad                	li	a3,11
 800750c:	00f6f663          	bgeu	a3,a5,8007518 <_malloc_r+0xaa>
 8007510:	c01c                	sw	a5,0(s0)
 8007512:	943e                	add	s0,s0,a5
 8007514:	c004                	sw	s1,0(s0)
 8007516:	a801                	j	8007526 <_malloc_r+0xb8>
 8007518:	405c                	lw	a5,4(s0)
 800751a:	02871763          	bne	a4,s0,8007548 <_malloc_r+0xda>
 800751e:	17ff9717          	auipc	a4,0x17ff9
 8007522:	02f72723          	sw	a5,46(a4) # 2000054c <__malloc_free_list>
 8007526:	854a                	mv	a0,s2
 8007528:	00001097          	auipc	ra,0x1
 800752c:	816080e7          	jalr	-2026(ra) # 8007d3e <__malloc_unlock>
 8007530:	00b40513          	addi	a0,s0,11
 8007534:	00440793          	addi	a5,s0,4
 8007538:	9961                	andi	a0,a0,-8
 800753a:	40f50733          	sub	a4,a0,a5
 800753e:	db5d                	beqz	a4,80074f4 <_malloc_r+0x86>
 8007540:	943a                	add	s0,s0,a4
 8007542:	8f89                	sub	a5,a5,a0
 8007544:	c01c                	sw	a5,0(s0)
 8007546:	b77d                	j	80074f4 <_malloc_r+0x86>
 8007548:	c35c                	sw	a5,4(a4)
 800754a:	bff1                	j	8007526 <_malloc_r+0xb8>
 800754c:	8722                	mv	a4,s0
 800754e:	4040                	lw	s0,4(s0)
 8007550:	bf91                	j	80074a4 <_malloc_r+0x36>
 8007552:	00350413          	addi	s0,a0,3
 8007556:	9871                	andi	s0,s0,-4
 8007558:	fa850ee3          	beq	a0,s0,8007514 <_malloc_r+0xa6>
 800755c:	40a405b3          	sub	a1,s0,a0
 8007560:	854a                	mv	a0,s2
 8007562:	00000097          	auipc	ra,0x0
 8007566:	764080e7          	jalr	1892(ra) # 8007cc6 <_sbrk_r>
 800756a:	fb3515e3          	bne	a0,s3,8007514 <_malloc_r+0xa6>
 800756e:	b7ad                	j	80074d8 <_malloc_r+0x6a>

08007570 <__ssputs_r>:
 8007570:	1101                	addi	sp,sp,-32
 8007572:	c84a                	sw	s2,16(sp)
 8007574:	0085a903          	lw	s2,8(a1)
 8007578:	cc22                	sw	s0,24(sp)
 800757a:	c452                	sw	s4,8(sp)
 800757c:	c05a                	sw	s6,0(sp)
 800757e:	ce06                	sw	ra,28(sp)
 8007580:	ca26                	sw	s1,20(sp)
 8007582:	c64e                	sw	s3,12(sp)
 8007584:	c256                	sw	s5,4(sp)
 8007586:	842e                	mv	s0,a1
 8007588:	8b32                	mv	s6,a2
 800758a:	8a36                	mv	s4,a3
 800758c:	0b26e263          	bltu	a3,s2,8007630 <__ssputs_r+0xc0>
 8007590:	00c5d783          	lhu	a5,12(a1)
 8007594:	4807f713          	andi	a4,a5,1152
 8007598:	cb51                	beqz	a4,800762c <__ssputs_r+0xbc>
 800759a:	4004                	lw	s1,0(s0)
 800759c:	498c                	lw	a1,16(a1)
 800759e:	4858                	lw	a4,20(s0)
 80075a0:	8aaa                	mv	s5,a0
 80075a2:	40b489b3          	sub	s3,s1,a1
 80075a6:	448d                	li	s1,3
 80075a8:	02e484b3          	mul	s1,s1,a4
 80075ac:	4709                	li	a4,2
 80075ae:	02e4c4b3          	div	s1,s1,a4
 80075b2:	00168713          	addi	a4,a3,1
 80075b6:	974e                	add	a4,a4,s3
 80075b8:	00e4f363          	bgeu	s1,a4,80075be <__ssputs_r+0x4e>
 80075bc:	84ba                	mv	s1,a4
 80075be:	4007f793          	andi	a5,a5,1024
 80075c2:	cbc9                	beqz	a5,8007654 <__ssputs_r+0xe4>
 80075c4:	85a6                	mv	a1,s1
 80075c6:	8556                	mv	a0,s5
 80075c8:	00000097          	auipc	ra,0x0
 80075cc:	ea6080e7          	jalr	-346(ra) # 800746e <_malloc_r>
 80075d0:	892a                	mv	s2,a0
 80075d2:	e50d                	bnez	a0,80075fc <__ssputs_r+0x8c>
 80075d4:	47b1                	li	a5,12
 80075d6:	00faa023          	sw	a5,0(s5)
 80075da:	00c45783          	lhu	a5,12(s0)
 80075de:	557d                	li	a0,-1
 80075e0:	0407e793          	ori	a5,a5,64
 80075e4:	00f41623          	sh	a5,12(s0)
 80075e8:	40f2                	lw	ra,28(sp)
 80075ea:	4462                	lw	s0,24(sp)
 80075ec:	44d2                	lw	s1,20(sp)
 80075ee:	4942                	lw	s2,16(sp)
 80075f0:	49b2                	lw	s3,12(sp)
 80075f2:	4a22                	lw	s4,8(sp)
 80075f4:	4a92                	lw	s5,4(sp)
 80075f6:	4b02                	lw	s6,0(sp)
 80075f8:	6105                	addi	sp,sp,32
 80075fa:	8082                	ret
 80075fc:	480c                	lw	a1,16(s0)
 80075fe:	864e                	mv	a2,s3
 8007600:	00000097          	auipc	ra,0x0
 8007604:	bc4080e7          	jalr	-1084(ra) # 80071c4 <memcpy>
 8007608:	00c45783          	lhu	a5,12(s0)
 800760c:	b7f7f793          	andi	a5,a5,-1153
 8007610:	0807e793          	ori	a5,a5,128
 8007614:	00f41623          	sh	a5,12(s0)
 8007618:	01242823          	sw	s2,16(s0)
 800761c:	c844                	sw	s1,20(s0)
 800761e:	994e                	add	s2,s2,s3
 8007620:	413484b3          	sub	s1,s1,s3
 8007624:	01242023          	sw	s2,0(s0)
 8007628:	c404                	sw	s1,8(s0)
 800762a:	8952                	mv	s2,s4
 800762c:	012a7363          	bgeu	s4,s2,8007632 <__ssputs_r+0xc2>
 8007630:	8952                	mv	s2,s4
 8007632:	4008                	lw	a0,0(s0)
 8007634:	864a                	mv	a2,s2
 8007636:	85da                	mv	a1,s6
 8007638:	00000097          	auipc	ra,0x0
 800763c:	6de080e7          	jalr	1758(ra) # 8007d16 <memmove>
 8007640:	441c                	lw	a5,8(s0)
 8007642:	4501                	li	a0,0
 8007644:	412787b3          	sub	a5,a5,s2
 8007648:	c41c                	sw	a5,8(s0)
 800764a:	401c                	lw	a5,0(s0)
 800764c:	993e                	add	s2,s2,a5
 800764e:	01242023          	sw	s2,0(s0)
 8007652:	bf59                	j	80075e8 <__ssputs_r+0x78>
 8007654:	8626                	mv	a2,s1
 8007656:	8556                	mv	a0,s5
 8007658:	00000097          	auipc	ra,0x0
 800765c:	6e8080e7          	jalr	1768(ra) # 8007d40 <_realloc_r>
 8007660:	892a                	mv	s2,a0
 8007662:	f95d                	bnez	a0,8007618 <__ssputs_r+0xa8>
 8007664:	480c                	lw	a1,16(s0)
 8007666:	8556                	mv	a0,s5
 8007668:	00000097          	auipc	ra,0x0
 800766c:	d4e080e7          	jalr	-690(ra) # 80073b6 <_free_r>
 8007670:	b795                	j	80075d4 <__ssputs_r+0x64>

08007672 <_svfiprintf_r>:
 8007672:	00c5d783          	lhu	a5,12(a1)
 8007676:	7171                	addi	sp,sp,-176
 8007678:	d326                	sw	s1,164(sp)
 800767a:	d14a                	sw	s2,160(sp)
 800767c:	cf4e                	sw	s3,156(sp)
 800767e:	d706                	sw	ra,172(sp)
 8007680:	d522                	sw	s0,168(sp)
 8007682:	cd52                	sw	s4,152(sp)
 8007684:	cb56                	sw	s5,148(sp)
 8007686:	c95a                	sw	s6,144(sp)
 8007688:	c75e                	sw	s7,140(sp)
 800768a:	c562                	sw	s8,136(sp)
 800768c:	c366                	sw	s9,132(sp)
 800768e:	0807f793          	andi	a5,a5,128
 8007692:	89aa                	mv	s3,a0
 8007694:	892e                	mv	s2,a1
 8007696:	84b2                	mv	s1,a2
 8007698:	c7a9                	beqz	a5,80076e2 <_svfiprintf_r+0x70>
 800769a:	499c                	lw	a5,16(a1)
 800769c:	e3b9                	bnez	a5,80076e2 <_svfiprintf_r+0x70>
 800769e:	04000593          	li	a1,64
 80076a2:	c636                	sw	a3,12(sp)
 80076a4:	00000097          	auipc	ra,0x0
 80076a8:	dca080e7          	jalr	-566(ra) # 800746e <_malloc_r>
 80076ac:	00a92023          	sw	a0,0(s2)
 80076b0:	00a92823          	sw	a0,16(s2)
 80076b4:	46b2                	lw	a3,12(sp)
 80076b6:	e115                	bnez	a0,80076da <_svfiprintf_r+0x68>
 80076b8:	47b1                	li	a5,12
 80076ba:	00f9a023          	sw	a5,0(s3)
 80076be:	557d                	li	a0,-1
 80076c0:	50ba                	lw	ra,172(sp)
 80076c2:	542a                	lw	s0,168(sp)
 80076c4:	549a                	lw	s1,164(sp)
 80076c6:	590a                	lw	s2,160(sp)
 80076c8:	49fa                	lw	s3,156(sp)
 80076ca:	4a6a                	lw	s4,152(sp)
 80076cc:	4ada                	lw	s5,148(sp)
 80076ce:	4b4a                	lw	s6,144(sp)
 80076d0:	4bba                	lw	s7,140(sp)
 80076d2:	4c2a                	lw	s8,136(sp)
 80076d4:	4c9a                	lw	s9,132(sp)
 80076d6:	614d                	addi	sp,sp,176
 80076d8:	8082                	ret
 80076da:	04000793          	li	a5,64
 80076de:	00f92a23          	sw	a5,20(s2)
 80076e2:	02000793          	li	a5,32
 80076e6:	02f10ca3          	sb	a5,57(sp)
 80076ea:	03000793          	li	a5,48
 80076ee:	da02                	sw	zero,52(sp)
 80076f0:	02f10d23          	sb	a5,58(sp)
 80076f4:	ce36                	sw	a3,28(sp)
 80076f6:	02500b93          	li	s7,37
 80076fa:	ffff9a97          	auipc	s5,0xffff9
 80076fe:	f7ea8a93          	addi	s5,s5,-130 # 8000678 <__sf_fake_stdout+0x20>
 8007702:	4c05                	li	s8,1
 8007704:	4b29                	li	s6,10
 8007706:	8426                	mv	s0,s1
 8007708:	00044783          	lbu	a5,0(s0)
 800770c:	c399                	beqz	a5,8007712 <_svfiprintf_r+0xa0>
 800770e:	0b779163          	bne	a5,s7,80077b0 <_svfiprintf_r+0x13e>
 8007712:	40940cb3          	sub	s9,s0,s1
 8007716:	020c8063          	beqz	s9,8007736 <_svfiprintf_r+0xc4>
 800771a:	86e6                	mv	a3,s9
 800771c:	8626                	mv	a2,s1
 800771e:	85ca                	mv	a1,s2
 8007720:	854e                	mv	a0,s3
 8007722:	00000097          	auipc	ra,0x0
 8007726:	e4e080e7          	jalr	-434(ra) # 8007570 <__ssputs_r>
 800772a:	57fd                	li	a5,-1
 800772c:	1af50a63          	beq	a0,a5,80078e0 <_svfiprintf_r+0x26e>
 8007730:	56d2                	lw	a3,52(sp)
 8007732:	96e6                	add	a3,a3,s9
 8007734:	da36                	sw	a3,52(sp)
 8007736:	00044783          	lbu	a5,0(s0)
 800773a:	1a078363          	beqz	a5,80078e0 <_svfiprintf_r+0x26e>
 800773e:	57fd                	li	a5,-1
 8007740:	00140493          	addi	s1,s0,1
 8007744:	d002                	sw	zero,32(sp)
 8007746:	d602                	sw	zero,44(sp)
 8007748:	d23e                	sw	a5,36(sp)
 800774a:	d402                	sw	zero,40(sp)
 800774c:	060101a3          	sb	zero,99(sp)
 8007750:	dc82                	sw	zero,120(sp)
 8007752:	0004c583          	lbu	a1,0(s1)
 8007756:	4615                	li	a2,5
 8007758:	8556                	mv	a0,s5
 800775a:	00000097          	auipc	ra,0x0
 800775e:	5a2080e7          	jalr	1442(ra) # 8007cfc <memchr>
 8007762:	00148413          	addi	s0,s1,1
 8007766:	5782                	lw	a5,32(sp)
 8007768:	e531                	bnez	a0,80077b4 <_svfiprintf_r+0x142>
 800776a:	0107f713          	andi	a4,a5,16
 800776e:	c709                	beqz	a4,8007778 <_svfiprintf_r+0x106>
 8007770:	02000713          	li	a4,32
 8007774:	06e101a3          	sb	a4,99(sp)
 8007778:	0087f713          	andi	a4,a5,8
 800777c:	c709                	beqz	a4,8007786 <_svfiprintf_r+0x114>
 800777e:	02b00713          	li	a4,43
 8007782:	06e101a3          	sb	a4,99(sp)
 8007786:	0004c683          	lbu	a3,0(s1)
 800778a:	02a00713          	li	a4,42
 800778e:	02e68b63          	beq	a3,a4,80077c4 <_svfiprintf_r+0x152>
 8007792:	57b2                	lw	a5,44(sp)
 8007794:	8426                	mv	s0,s1
 8007796:	4681                	li	a3,0
 8007798:	4625                	li	a2,9
 800779a:	00044703          	lbu	a4,0(s0)
 800779e:	00140593          	addi	a1,s0,1
 80077a2:	fd070713          	addi	a4,a4,-48
 80077a6:	06e67463          	bgeu	a2,a4,800780e <_svfiprintf_r+0x19c>
 80077aa:	c68d                	beqz	a3,80077d4 <_svfiprintf_r+0x162>
 80077ac:	d63e                	sw	a5,44(sp)
 80077ae:	a01d                	j	80077d4 <_svfiprintf_r+0x162>
 80077b0:	0405                	addi	s0,s0,1
 80077b2:	bf99                	j	8007708 <_svfiprintf_r+0x96>
 80077b4:	41550533          	sub	a0,a0,s5
 80077b8:	00ac1533          	sll	a0,s8,a0
 80077bc:	8fc9                	or	a5,a5,a0
 80077be:	d03e                	sw	a5,32(sp)
 80077c0:	84a2                	mv	s1,s0
 80077c2:	bf41                	j	8007752 <_svfiprintf_r+0xe0>
 80077c4:	4772                	lw	a4,28(sp)
 80077c6:	00470693          	addi	a3,a4,4
 80077ca:	4318                	lw	a4,0(a4)
 80077cc:	ce36                	sw	a3,28(sp)
 80077ce:	02074963          	bltz	a4,8007800 <_svfiprintf_r+0x18e>
 80077d2:	d63a                	sw	a4,44(sp)
 80077d4:	00044703          	lbu	a4,0(s0)
 80077d8:	02e00793          	li	a5,46
 80077dc:	04f71f63          	bne	a4,a5,800783a <_svfiprintf_r+0x1c8>
 80077e0:	00144703          	lbu	a4,1(s0)
 80077e4:	02a00793          	li	a5,42
 80077e8:	02f71b63          	bne	a4,a5,800781e <_svfiprintf_r+0x1ac>
 80077ec:	47f2                	lw	a5,28(sp)
 80077ee:	0409                	addi	s0,s0,2
 80077f0:	00478713          	addi	a4,a5,4
 80077f4:	439c                	lw	a5,0(a5)
 80077f6:	ce3a                	sw	a4,28(sp)
 80077f8:	0207c163          	bltz	a5,800781a <_svfiprintf_r+0x1a8>
 80077fc:	d23e                	sw	a5,36(sp)
 80077fe:	a835                	j	800783a <_svfiprintf_r+0x1c8>
 8007800:	40e00733          	neg	a4,a4
 8007804:	0027e793          	ori	a5,a5,2
 8007808:	d63a                	sw	a4,44(sp)
 800780a:	d03e                	sw	a5,32(sp)
 800780c:	b7e1                	j	80077d4 <_svfiprintf_r+0x162>
 800780e:	036787b3          	mul	a5,a5,s6
 8007812:	4685                	li	a3,1
 8007814:	842e                	mv	s0,a1
 8007816:	97ba                	add	a5,a5,a4
 8007818:	b749                	j	800779a <_svfiprintf_r+0x128>
 800781a:	57fd                	li	a5,-1
 800781c:	b7c5                	j	80077fc <_svfiprintf_r+0x18a>
 800781e:	0405                	addi	s0,s0,1
 8007820:	d202                	sw	zero,36(sp)
 8007822:	4681                	li	a3,0
 8007824:	4781                	li	a5,0
 8007826:	4625                	li	a2,9
 8007828:	00044703          	lbu	a4,0(s0)
 800782c:	00140593          	addi	a1,s0,1
 8007830:	fd070713          	addi	a4,a4,-48
 8007834:	06e67c63          	bgeu	a2,a4,80078ac <_svfiprintf_r+0x23a>
 8007838:	f2f1                	bnez	a3,80077fc <_svfiprintf_r+0x18a>
 800783a:	00044583          	lbu	a1,0(s0)
 800783e:	460d                	li	a2,3
 8007840:	ffff9517          	auipc	a0,0xffff9
 8007844:	e4050513          	addi	a0,a0,-448 # 8000680 <__sf_fake_stdout+0x28>
 8007848:	00000097          	auipc	ra,0x0
 800784c:	4b4080e7          	jalr	1204(ra) # 8007cfc <memchr>
 8007850:	cd11                	beqz	a0,800786c <_svfiprintf_r+0x1fa>
 8007852:	ffff9797          	auipc	a5,0xffff9
 8007856:	e2e78793          	addi	a5,a5,-466 # 8000680 <__sf_fake_stdout+0x28>
 800785a:	8d1d                	sub	a0,a0,a5
 800785c:	04000793          	li	a5,64
 8007860:	00a797b3          	sll	a5,a5,a0
 8007864:	5502                	lw	a0,32(sp)
 8007866:	0405                	addi	s0,s0,1
 8007868:	8d5d                	or	a0,a0,a5
 800786a:	d02a                	sw	a0,32(sp)
 800786c:	00044583          	lbu	a1,0(s0)
 8007870:	4619                	li	a2,6
 8007872:	ffff9517          	auipc	a0,0xffff9
 8007876:	e1250513          	addi	a0,a0,-494 # 8000684 <__sf_fake_stdout+0x2c>
 800787a:	00140493          	addi	s1,s0,1
 800787e:	02b10c23          	sb	a1,56(sp)
 8007882:	00000097          	auipc	ra,0x0
 8007886:	47a080e7          	jalr	1146(ra) # 8007cfc <memchr>
 800788a:	c525                	beqz	a0,80078f2 <_svfiprintf_r+0x280>
 800788c:	f7ff8797          	auipc	a5,0xf7ff8
 8007890:	77478793          	addi	a5,a5,1908 # 0 <__dbg_stack_size>
 8007894:	e795                	bnez	a5,80078c0 <_svfiprintf_r+0x24e>
 8007896:	5702                	lw	a4,32(sp)
 8007898:	47f2                	lw	a5,28(sp)
 800789a:	10077713          	andi	a4,a4,256
 800789e:	cf09                	beqz	a4,80078b8 <_svfiprintf_r+0x246>
 80078a0:	0791                	addi	a5,a5,4
 80078a2:	ce3e                	sw	a5,28(sp)
 80078a4:	57d2                	lw	a5,52(sp)
 80078a6:	97d2                	add	a5,a5,s4
 80078a8:	da3e                	sw	a5,52(sp)
 80078aa:	bdb1                	j	8007706 <_svfiprintf_r+0x94>
 80078ac:	036787b3          	mul	a5,a5,s6
 80078b0:	4685                	li	a3,1
 80078b2:	842e                	mv	s0,a1
 80078b4:	97ba                	add	a5,a5,a4
 80078b6:	bf8d                	j	8007828 <_svfiprintf_r+0x1b6>
 80078b8:	079d                	addi	a5,a5,7
 80078ba:	9be1                	andi	a5,a5,-8
 80078bc:	07a1                	addi	a5,a5,8
 80078be:	b7d5                	j	80078a2 <_svfiprintf_r+0x230>
 80078c0:	0878                	addi	a4,sp,28
 80078c2:	00000697          	auipc	a3,0x0
 80078c6:	cae68693          	addi	a3,a3,-850 # 8007570 <__ssputs_r>
 80078ca:	864a                	mv	a2,s2
 80078cc:	100c                	addi	a1,sp,32
 80078ce:	854e                	mv	a0,s3
 80078d0:	00000097          	auipc	ra,0x0
 80078d4:	000000e7          	jalr	zero # 0 <__dbg_stack_size>
 80078d8:	57fd                	li	a5,-1
 80078da:	8a2a                	mv	s4,a0
 80078dc:	fcf514e3          	bne	a0,a5,80078a4 <_svfiprintf_r+0x232>
 80078e0:	00c95783          	lhu	a5,12(s2)
 80078e4:	557d                	li	a0,-1
 80078e6:	0407f793          	andi	a5,a5,64
 80078ea:	dc079be3          	bnez	a5,80076c0 <_svfiprintf_r+0x4e>
 80078ee:	5552                	lw	a0,52(sp)
 80078f0:	bbc1                	j	80076c0 <_svfiprintf_r+0x4e>
 80078f2:	0878                	addi	a4,sp,28
 80078f4:	00000697          	auipc	a3,0x0
 80078f8:	c7c68693          	addi	a3,a3,-900 # 8007570 <__ssputs_r>
 80078fc:	864a                	mv	a2,s2
 80078fe:	100c                	addi	a1,sp,32
 8007900:	854e                	mv	a0,s3
 8007902:	00000097          	auipc	ra,0x0
 8007906:	116080e7          	jalr	278(ra) # 8007a18 <_printf_i>
 800790a:	b7f9                	j	80078d8 <_svfiprintf_r+0x266>

0800790c <_printf_common>:
 800790c:	7179                	addi	sp,sp,-48
 800790e:	ca56                	sw	s5,20(sp)
 8007910:	499c                	lw	a5,16(a1)
 8007912:	8aba                	mv	s5,a4
 8007914:	4598                	lw	a4,8(a1)
 8007916:	d422                	sw	s0,40(sp)
 8007918:	d226                	sw	s1,36(sp)
 800791a:	ce4e                	sw	s3,28(sp)
 800791c:	cc52                	sw	s4,24(sp)
 800791e:	d606                	sw	ra,44(sp)
 8007920:	d04a                	sw	s2,32(sp)
 8007922:	c85a                	sw	s6,16(sp)
 8007924:	c65e                	sw	s7,12(sp)
 8007926:	89aa                	mv	s3,a0
 8007928:	842e                	mv	s0,a1
 800792a:	84b2                	mv	s1,a2
 800792c:	8a36                	mv	s4,a3
 800792e:	00e7d363          	bge	a5,a4,8007934 <_printf_common+0x28>
 8007932:	87ba                	mv	a5,a4
 8007934:	c09c                	sw	a5,0(s1)
 8007936:	04344703          	lbu	a4,67(s0)
 800793a:	c319                	beqz	a4,8007940 <_printf_common+0x34>
 800793c:	0785                	addi	a5,a5,1
 800793e:	c09c                	sw	a5,0(s1)
 8007940:	401c                	lw	a5,0(s0)
 8007942:	0207f793          	andi	a5,a5,32
 8007946:	c781                	beqz	a5,800794e <_printf_common+0x42>
 8007948:	409c                	lw	a5,0(s1)
 800794a:	0789                	addi	a5,a5,2
 800794c:	c09c                	sw	a5,0(s1)
 800794e:	00042903          	lw	s2,0(s0)
 8007952:	00697913          	andi	s2,s2,6
 8007956:	00091a63          	bnez	s2,800796a <_printf_common+0x5e>
 800795a:	01940b13          	addi	s6,s0,25
 800795e:	5bfd                	li	s7,-1
 8007960:	445c                	lw	a5,12(s0)
 8007962:	4098                	lw	a4,0(s1)
 8007964:	8f99                	sub	a5,a5,a4
 8007966:	04f94c63          	blt	s2,a5,80079be <_printf_common+0xb2>
 800796a:	401c                	lw	a5,0(s0)
 800796c:	04344683          	lbu	a3,67(s0)
 8007970:	0207f793          	andi	a5,a5,32
 8007974:	00d036b3          	snez	a3,a3
 8007978:	eba5                	bnez	a5,80079e8 <_printf_common+0xdc>
 800797a:	04340613          	addi	a2,s0,67
 800797e:	85d2                	mv	a1,s4
 8007980:	854e                	mv	a0,s3
 8007982:	9a82                	jalr	s5
 8007984:	57fd                	li	a5,-1
 8007986:	04f50363          	beq	a0,a5,80079cc <_printf_common+0xc0>
 800798a:	401c                	lw	a5,0(s0)
 800798c:	4611                	li	a2,4
 800798e:	4098                	lw	a4,0(s1)
 8007990:	8b99                	andi	a5,a5,6
 8007992:	4454                	lw	a3,12(s0)
 8007994:	4481                	li	s1,0
 8007996:	00c79763          	bne	a5,a2,80079a4 <_printf_common+0x98>
 800799a:	40e684b3          	sub	s1,a3,a4
 800799e:	0004d363          	bgez	s1,80079a4 <_printf_common+0x98>
 80079a2:	4481                	li	s1,0
 80079a4:	441c                	lw	a5,8(s0)
 80079a6:	4818                	lw	a4,16(s0)
 80079a8:	00f75463          	bge	a4,a5,80079b0 <_printf_common+0xa4>
 80079ac:	8f99                	sub	a5,a5,a4
 80079ae:	94be                	add	s1,s1,a5
 80079b0:	4901                	li	s2,0
 80079b2:	0469                	addi	s0,s0,26
 80079b4:	5b7d                	li	s6,-1
 80079b6:	05249863          	bne	s1,s2,8007a06 <_printf_common+0xfa>
 80079ba:	4501                	li	a0,0
 80079bc:	a809                	j	80079ce <_printf_common+0xc2>
 80079be:	4685                	li	a3,1
 80079c0:	865a                	mv	a2,s6
 80079c2:	85d2                	mv	a1,s4
 80079c4:	854e                	mv	a0,s3
 80079c6:	9a82                	jalr	s5
 80079c8:	01751e63          	bne	a0,s7,80079e4 <_printf_common+0xd8>
 80079cc:	557d                	li	a0,-1
 80079ce:	50b2                	lw	ra,44(sp)
 80079d0:	5422                	lw	s0,40(sp)
 80079d2:	5492                	lw	s1,36(sp)
 80079d4:	5902                	lw	s2,32(sp)
 80079d6:	49f2                	lw	s3,28(sp)
 80079d8:	4a62                	lw	s4,24(sp)
 80079da:	4ad2                	lw	s5,20(sp)
 80079dc:	4b42                	lw	s6,16(sp)
 80079de:	4bb2                	lw	s7,12(sp)
 80079e0:	6145                	addi	sp,sp,48
 80079e2:	8082                	ret
 80079e4:	0905                	addi	s2,s2,1
 80079e6:	bfad                	j	8007960 <_printf_common+0x54>
 80079e8:	00d40733          	add	a4,s0,a3
 80079ec:	03000613          	li	a2,48
 80079f0:	04c701a3          	sb	a2,67(a4)
 80079f4:	04544703          	lbu	a4,69(s0)
 80079f8:	00168793          	addi	a5,a3,1
 80079fc:	97a2                	add	a5,a5,s0
 80079fe:	0689                	addi	a3,a3,2
 8007a00:	04e781a3          	sb	a4,67(a5)
 8007a04:	bf9d                	j	800797a <_printf_common+0x6e>
 8007a06:	4685                	li	a3,1
 8007a08:	8622                	mv	a2,s0
 8007a0a:	85d2                	mv	a1,s4
 8007a0c:	854e                	mv	a0,s3
 8007a0e:	9a82                	jalr	s5
 8007a10:	fb650ee3          	beq	a0,s6,80079cc <_printf_common+0xc0>
 8007a14:	0905                	addi	s2,s2,1
 8007a16:	b745                	j	80079b6 <_printf_common+0xaa>

08007a18 <_printf_i>:
 8007a18:	7179                	addi	sp,sp,-48
 8007a1a:	d422                	sw	s0,40(sp)
 8007a1c:	d226                	sw	s1,36(sp)
 8007a1e:	d04a                	sw	s2,32(sp)
 8007a20:	ce4e                	sw	s3,28(sp)
 8007a22:	d606                	sw	ra,44(sp)
 8007a24:	cc52                	sw	s4,24(sp)
 8007a26:	ca56                	sw	s5,20(sp)
 8007a28:	c85a                	sw	s6,16(sp)
 8007a2a:	89b6                	mv	s3,a3
 8007a2c:	0185c683          	lbu	a3,24(a1)
 8007a30:	06e00793          	li	a5,110
 8007a34:	8932                	mv	s2,a2
 8007a36:	84aa                	mv	s1,a0
 8007a38:	842e                	mv	s0,a1
 8007a3a:	04358613          	addi	a2,a1,67
 8007a3e:	1ef68363          	beq	a3,a5,8007c24 <_printf_i+0x20c>
 8007a42:	06d7e263          	bltu	a5,a3,8007aa6 <_printf_i+0x8e>
 8007a46:	06300793          	li	a5,99
 8007a4a:	0af68263          	beq	a3,a5,8007aee <_printf_i+0xd6>
 8007a4e:	00d7ed63          	bltu	a5,a3,8007a68 <_printf_i+0x50>
 8007a52:	1e068d63          	beqz	a3,8007c4c <_printf_i+0x234>
 8007a56:	05800793          	li	a5,88
 8007a5a:	16f68963          	beq	a3,a5,8007bcc <_printf_i+0x1b4>
 8007a5e:	04240a93          	addi	s5,s0,66
 8007a62:	04d40123          	sb	a3,66(s0)
 8007a66:	a869                	j	8007b00 <_printf_i+0xe8>
 8007a68:	06400793          	li	a5,100
 8007a6c:	00f68663          	beq	a3,a5,8007a78 <_printf_i+0x60>
 8007a70:	06900793          	li	a5,105
 8007a74:	fef695e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007a78:	401c                	lw	a5,0(s0)
 8007a7a:	4308                	lw	a0,0(a4)
 8007a7c:	0807f693          	andi	a3,a5,128
 8007a80:	00450593          	addi	a1,a0,4
 8007a84:	c2c1                	beqz	a3,8007b04 <_printf_i+0xec>
 8007a86:	411c                	lw	a5,0(a0)
 8007a88:	c30c                	sw	a1,0(a4)
 8007a8a:	0007d863          	bgez	a5,8007a9a <_printf_i+0x82>
 8007a8e:	02d00713          	li	a4,45
 8007a92:	40f007b3          	neg	a5,a5
 8007a96:	04e401a3          	sb	a4,67(s0)
 8007a9a:	ffff9697          	auipc	a3,0xffff9
 8007a9e:	bf268693          	addi	a3,a3,-1038 # 800068c <__sf_fake_stdout+0x34>
 8007aa2:	4729                	li	a4,10
 8007aa4:	a065                	j	8007b4c <_printf_i+0x134>
 8007aa6:	07300793          	li	a5,115
 8007aaa:	1af68563          	beq	a3,a5,8007c54 <_printf_i+0x23c>
 8007aae:	00d7ef63          	bltu	a5,a3,8007acc <_printf_i+0xb4>
 8007ab2:	06f00793          	li	a5,111
 8007ab6:	04f68f63          	beq	a3,a5,8007b14 <_printf_i+0xfc>
 8007aba:	07000793          	li	a5,112
 8007abe:	faf690e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007ac2:	419c                	lw	a5,0(a1)
 8007ac4:	0207e793          	ori	a5,a5,32
 8007ac8:	c19c                	sw	a5,0(a1)
 8007aca:	a809                	j	8007adc <_printf_i+0xc4>
 8007acc:	07500793          	li	a5,117
 8007ad0:	04f68263          	beq	a3,a5,8007b14 <_printf_i+0xfc>
 8007ad4:	07800793          	li	a5,120
 8007ad8:	f8f693e3          	bne	a3,a5,8007a5e <_printf_i+0x46>
 8007adc:	07800793          	li	a5,120
 8007ae0:	04f402a3          	sb	a5,69(s0)
 8007ae4:	ffff9697          	auipc	a3,0xffff9
 8007ae8:	bbc68693          	addi	a3,a3,-1092 # 80006a0 <__sf_fake_stdout+0x48>
 8007aec:	a0f5                	j	8007bd8 <_printf_i+0x1c0>
 8007aee:	431c                	lw	a5,0(a4)
 8007af0:	04258a93          	addi	s5,a1,66
 8007af4:	00478693          	addi	a3,a5,4
 8007af8:	439c                	lw	a5,0(a5)
 8007afa:	c314                	sw	a3,0(a4)
 8007afc:	04f58123          	sb	a5,66(a1)
 8007b00:	4785                	li	a5,1
 8007b02:	aa9d                	j	8007c78 <_printf_i+0x260>
 8007b04:	0407f693          	andi	a3,a5,64
 8007b08:	411c                	lw	a5,0(a0)
 8007b0a:	c30c                	sw	a1,0(a4)
 8007b0c:	debd                	beqz	a3,8007a8a <_printf_i+0x72>
 8007b0e:	07c2                	slli	a5,a5,0x10
 8007b10:	87c1                	srai	a5,a5,0x10
 8007b12:	bfa5                	j	8007a8a <_printf_i+0x72>
 8007b14:	400c                	lw	a1,0(s0)
 8007b16:	431c                	lw	a5,0(a4)
 8007b18:	0805f813          	andi	a6,a1,128
 8007b1c:	00478513          	addi	a0,a5,4
 8007b20:	00080563          	beqz	a6,8007b2a <_printf_i+0x112>
 8007b24:	c308                	sw	a0,0(a4)
 8007b26:	439c                	lw	a5,0(a5)
 8007b28:	a039                	j	8007b36 <_printf_i+0x11e>
 8007b2a:	0405f593          	andi	a1,a1,64
 8007b2e:	c308                	sw	a0,0(a4)
 8007b30:	d9fd                	beqz	a1,8007b26 <_printf_i+0x10e>
 8007b32:	0007d783          	lhu	a5,0(a5)
 8007b36:	06f00713          	li	a4,111
 8007b3a:	0ce68d63          	beq	a3,a4,8007c14 <_printf_i+0x1fc>
 8007b3e:	ffff9697          	auipc	a3,0xffff9
 8007b42:	b4e68693          	addi	a3,a3,-1202 # 800068c <__sf_fake_stdout+0x34>
 8007b46:	4729                	li	a4,10
 8007b48:	040401a3          	sb	zero,67(s0)
 8007b4c:	404c                	lw	a1,4(s0)
 8007b4e:	c40c                	sw	a1,8(s0)
 8007b50:	0005c563          	bltz	a1,8007b5a <_printf_i+0x142>
 8007b54:	4008                	lw	a0,0(s0)
 8007b56:	996d                	andi	a0,a0,-5
 8007b58:	c008                	sw	a0,0(s0)
 8007b5a:	e399                	bnez	a5,8007b60 <_printf_i+0x148>
 8007b5c:	8ab2                	mv	s5,a2
 8007b5e:	cd91                	beqz	a1,8007b7a <_printf_i+0x162>
 8007b60:	8ab2                	mv	s5,a2
 8007b62:	02e7f5b3          	remu	a1,a5,a4
 8007b66:	1afd                	addi	s5,s5,-1
 8007b68:	95b6                	add	a1,a1,a3
 8007b6a:	0005c583          	lbu	a1,0(a1)
 8007b6e:	00ba8023          	sb	a1,0(s5)
 8007b72:	02e7d5b3          	divu	a1,a5,a4
 8007b76:	0ae7f563          	bgeu	a5,a4,8007c20 <_printf_i+0x208>
 8007b7a:	47a1                	li	a5,8
 8007b7c:	00f71e63          	bne	a4,a5,8007b98 <_printf_i+0x180>
 8007b80:	401c                	lw	a5,0(s0)
 8007b82:	8b85                	andi	a5,a5,1
 8007b84:	cb91                	beqz	a5,8007b98 <_printf_i+0x180>
 8007b86:	4058                	lw	a4,4(s0)
 8007b88:	481c                	lw	a5,16(s0)
 8007b8a:	00e7c763          	blt	a5,a4,8007b98 <_printf_i+0x180>
 8007b8e:	03000793          	li	a5,48
 8007b92:	fefa8fa3          	sb	a5,-1(s5)
 8007b96:	1afd                	addi	s5,s5,-1
 8007b98:	41560633          	sub	a2,a2,s5
 8007b9c:	c810                	sw	a2,16(s0)
 8007b9e:	874e                	mv	a4,s3
 8007ba0:	86ca                	mv	a3,s2
 8007ba2:	0070                	addi	a2,sp,12
 8007ba4:	85a2                	mv	a1,s0
 8007ba6:	8526                	mv	a0,s1
 8007ba8:	00000097          	auipc	ra,0x0
 8007bac:	d64080e7          	jalr	-668(ra) # 800790c <_printf_common>
 8007bb0:	5a7d                	li	s4,-1
 8007bb2:	0d451763          	bne	a0,s4,8007c80 <_printf_i+0x268>
 8007bb6:	557d                	li	a0,-1
 8007bb8:	50b2                	lw	ra,44(sp)
 8007bba:	5422                	lw	s0,40(sp)
 8007bbc:	5492                	lw	s1,36(sp)
 8007bbe:	5902                	lw	s2,32(sp)
 8007bc0:	49f2                	lw	s3,28(sp)
 8007bc2:	4a62                	lw	s4,24(sp)
 8007bc4:	4ad2                	lw	s5,20(sp)
 8007bc6:	4b42                	lw	s6,16(sp)
 8007bc8:	6145                	addi	sp,sp,48
 8007bca:	8082                	ret
 8007bcc:	04d582a3          	sb	a3,69(a1)
 8007bd0:	ffff9697          	auipc	a3,0xffff9
 8007bd4:	abc68693          	addi	a3,a3,-1348 # 800068c <__sf_fake_stdout+0x34>
 8007bd8:	400c                	lw	a1,0(s0)
 8007bda:	4308                	lw	a0,0(a4)
 8007bdc:	0805f813          	andi	a6,a1,128
 8007be0:	411c                	lw	a5,0(a0)
 8007be2:	0511                	addi	a0,a0,4
 8007be4:	02080063          	beqz	a6,8007c04 <_printf_i+0x1ec>
 8007be8:	c308                	sw	a0,0(a4)
 8007bea:	0015f713          	andi	a4,a1,1
 8007bee:	c701                	beqz	a4,8007bf6 <_printf_i+0x1de>
 8007bf0:	0205e593          	ori	a1,a1,32
 8007bf4:	c00c                	sw	a1,0(s0)
 8007bf6:	4741                	li	a4,16
 8007bf8:	fba1                	bnez	a5,8007b48 <_printf_i+0x130>
 8007bfa:	400c                	lw	a1,0(s0)
 8007bfc:	fdf5f593          	andi	a1,a1,-33
 8007c00:	c00c                	sw	a1,0(s0)
 8007c02:	b799                	j	8007b48 <_printf_i+0x130>
 8007c04:	0405f813          	andi	a6,a1,64
 8007c08:	c308                	sw	a0,0(a4)
 8007c0a:	fe0800e3          	beqz	a6,8007bea <_printf_i+0x1d2>
 8007c0e:	07c2                	slli	a5,a5,0x10
 8007c10:	83c1                	srli	a5,a5,0x10
 8007c12:	bfe1                	j	8007bea <_printf_i+0x1d2>
 8007c14:	ffff9697          	auipc	a3,0xffff9
 8007c18:	a7868693          	addi	a3,a3,-1416 # 800068c <__sf_fake_stdout+0x34>
 8007c1c:	4721                	li	a4,8
 8007c1e:	b72d                	j	8007b48 <_printf_i+0x130>
 8007c20:	87ae                	mv	a5,a1
 8007c22:	b781                	j	8007b62 <_printf_i+0x14a>
 8007c24:	4194                	lw	a3,0(a1)
 8007c26:	431c                	lw	a5,0(a4)
 8007c28:	49cc                	lw	a1,20(a1)
 8007c2a:	0806f813          	andi	a6,a3,128
 8007c2e:	00478513          	addi	a0,a5,4
 8007c32:	00080663          	beqz	a6,8007c3e <_printf_i+0x226>
 8007c36:	c308                	sw	a0,0(a4)
 8007c38:	439c                	lw	a5,0(a5)
 8007c3a:	c38c                	sw	a1,0(a5)
 8007c3c:	a801                	j	8007c4c <_printf_i+0x234>
 8007c3e:	c308                	sw	a0,0(a4)
 8007c40:	0406f693          	andi	a3,a3,64
 8007c44:	439c                	lw	a5,0(a5)
 8007c46:	daf5                	beqz	a3,8007c3a <_printf_i+0x222>
 8007c48:	00b79023          	sh	a1,0(a5)
 8007c4c:	00042823          	sw	zero,16(s0)
 8007c50:	8ab2                	mv	s5,a2
 8007c52:	b7b1                	j	8007b9e <_printf_i+0x186>
 8007c54:	431c                	lw	a5,0(a4)
 8007c56:	41d0                	lw	a2,4(a1)
 8007c58:	4581                	li	a1,0
 8007c5a:	00478693          	addi	a3,a5,4
 8007c5e:	c314                	sw	a3,0(a4)
 8007c60:	0007aa83          	lw	s5,0(a5)
 8007c64:	8556                	mv	a0,s5
 8007c66:	00000097          	auipc	ra,0x0
 8007c6a:	096080e7          	jalr	150(ra) # 8007cfc <memchr>
 8007c6e:	c501                	beqz	a0,8007c76 <_printf_i+0x25e>
 8007c70:	41550533          	sub	a0,a0,s5
 8007c74:	c048                	sw	a0,4(s0)
 8007c76:	405c                	lw	a5,4(s0)
 8007c78:	c81c                	sw	a5,16(s0)
 8007c7a:	040401a3          	sb	zero,67(s0)
 8007c7e:	b705                	j	8007b9e <_printf_i+0x186>
 8007c80:	4814                	lw	a3,16(s0)
 8007c82:	8656                	mv	a2,s5
 8007c84:	85ca                	mv	a1,s2
 8007c86:	8526                	mv	a0,s1
 8007c88:	9982                	jalr	s3
 8007c8a:	f34506e3          	beq	a0,s4,8007bb6 <_printf_i+0x19e>
 8007c8e:	401c                	lw	a5,0(s0)
 8007c90:	8b89                	andi	a5,a5,2
 8007c92:	e78d                	bnez	a5,8007cbc <_printf_i+0x2a4>
 8007c94:	47b2                	lw	a5,12(sp)
 8007c96:	4448                	lw	a0,12(s0)
 8007c98:	f2f550e3          	bge	a0,a5,8007bb8 <_printf_i+0x1a0>
 8007c9c:	853e                	mv	a0,a5
 8007c9e:	bf29                	j	8007bb8 <_printf_i+0x1a0>
 8007ca0:	4685                	li	a3,1
 8007ca2:	8656                	mv	a2,s5
 8007ca4:	85ca                	mv	a1,s2
 8007ca6:	8526                	mv	a0,s1
 8007ca8:	9982                	jalr	s3
 8007caa:	f16506e3          	beq	a0,s6,8007bb6 <_printf_i+0x19e>
 8007cae:	0a05                	addi	s4,s4,1
 8007cb0:	445c                	lw	a5,12(s0)
 8007cb2:	4732                	lw	a4,12(sp)
 8007cb4:	8f99                	sub	a5,a5,a4
 8007cb6:	fefa45e3          	blt	s4,a5,8007ca0 <_printf_i+0x288>
 8007cba:	bfe9                	j	8007c94 <_printf_i+0x27c>
 8007cbc:	4a01                	li	s4,0
 8007cbe:	01940a93          	addi	s5,s0,25
 8007cc2:	5b7d                	li	s6,-1
 8007cc4:	b7f5                	j	8007cb0 <_printf_i+0x298>

08007cc6 <_sbrk_r>:
 8007cc6:	1141                	addi	sp,sp,-16
 8007cc8:	c422                	sw	s0,8(sp)
 8007cca:	842a                	mv	s0,a0
 8007ccc:	852e                	mv	a0,a1
 8007cce:	17ffe797          	auipc	a5,0x17ffe
 8007cd2:	9207ab23          	sw	zero,-1738(a5) # 20005604 <errno>
 8007cd6:	c606                	sw	ra,12(sp)
 8007cd8:	ffffa097          	auipc	ra,0xffffa
 8007cdc:	e8e080e7          	jalr	-370(ra) # 8001b66 <_sbrk>
 8007ce0:	57fd                	li	a5,-1
 8007ce2:	00f51963          	bne	a0,a5,8007cf4 <_sbrk_r+0x2e>
 8007ce6:	17ffe797          	auipc	a5,0x17ffe
 8007cea:	91e78793          	addi	a5,a5,-1762 # 20005604 <errno>
 8007cee:	439c                	lw	a5,0(a5)
 8007cf0:	c391                	beqz	a5,8007cf4 <_sbrk_r+0x2e>
 8007cf2:	c01c                	sw	a5,0(s0)
 8007cf4:	40b2                	lw	ra,12(sp)
 8007cf6:	4422                	lw	s0,8(sp)
 8007cf8:	0141                	addi	sp,sp,16
 8007cfa:	8082                	ret

08007cfc <memchr>:
 8007cfc:	0ff5f593          	andi	a1,a1,255
 8007d00:	962a                	add	a2,a2,a0
 8007d02:	00c51463          	bne	a0,a2,8007d0a <memchr+0xe>
 8007d06:	4501                	li	a0,0
 8007d08:	8082                	ret
 8007d0a:	00054783          	lbu	a5,0(a0)
 8007d0e:	feb78de3          	beq	a5,a1,8007d08 <memchr+0xc>
 8007d12:	0505                	addi	a0,a0,1
 8007d14:	b7fd                	j	8007d02 <memchr+0x6>

08007d16 <memmove>:
 8007d16:	c215                	beqz	a2,8007d3a <memmove+0x24>
 8007d18:	832a                	mv	t1,a0
 8007d1a:	4685                	li	a3,1
 8007d1c:	00b56763          	bltu	a0,a1,8007d2a <memmove+0x14>
 8007d20:	56fd                	li	a3,-1
 8007d22:	fff60713          	addi	a4,a2,-1
 8007d26:	933a                	add	t1,t1,a4
 8007d28:	95ba                	add	a1,a1,a4
 8007d2a:	00058383          	lb	t2,0(a1)
 8007d2e:	00730023          	sb	t2,0(t1)
 8007d32:	167d                	addi	a2,a2,-1
 8007d34:	9336                	add	t1,t1,a3
 8007d36:	95b6                	add	a1,a1,a3
 8007d38:	fa6d                	bnez	a2,8007d2a <memmove+0x14>
 8007d3a:	8082                	ret

08007d3c <__malloc_lock>:
 8007d3c:	8082                	ret

08007d3e <__malloc_unlock>:
 8007d3e:	8082                	ret

08007d40 <_realloc_r>:
 8007d40:	e591                	bnez	a1,8007d4c <_realloc_r+0xc>
 8007d42:	85b2                	mv	a1,a2
 8007d44:	fffff317          	auipc	t1,0xfffff
 8007d48:	72a30067          	jr	1834(t1) # 800746e <_malloc_r>
 8007d4c:	1101                	addi	sp,sp,-32
 8007d4e:	cc22                	sw	s0,24(sp)
 8007d50:	ce06                	sw	ra,28(sp)
 8007d52:	ca26                	sw	s1,20(sp)
 8007d54:	c84a                	sw	s2,16(sp)
 8007d56:	c64e                	sw	s3,12(sp)
 8007d58:	8432                	mv	s0,a2
 8007d5a:	ee11                	bnez	a2,8007d76 <_realloc_r+0x36>
 8007d5c:	fffff097          	auipc	ra,0xfffff
 8007d60:	65a080e7          	jalr	1626(ra) # 80073b6 <_free_r>
 8007d64:	4901                	li	s2,0
 8007d66:	40f2                	lw	ra,28(sp)
 8007d68:	4462                	lw	s0,24(sp)
 8007d6a:	854a                	mv	a0,s2
 8007d6c:	44d2                	lw	s1,20(sp)
 8007d6e:	4942                	lw	s2,16(sp)
 8007d70:	49b2                	lw	s3,12(sp)
 8007d72:	6105                	addi	sp,sp,32
 8007d74:	8082                	ret
 8007d76:	84ae                	mv	s1,a1
 8007d78:	89aa                	mv	s3,a0
 8007d7a:	00000097          	auipc	ra,0x0
 8007d7e:	038080e7          	jalr	56(ra) # 8007db2 <_malloc_usable_size_r>
 8007d82:	8926                	mv	s2,s1
 8007d84:	fe8571e3          	bgeu	a0,s0,8007d66 <_realloc_r+0x26>
 8007d88:	85a2                	mv	a1,s0
 8007d8a:	854e                	mv	a0,s3
 8007d8c:	fffff097          	auipc	ra,0xfffff
 8007d90:	6e2080e7          	jalr	1762(ra) # 800746e <_malloc_r>
 8007d94:	892a                	mv	s2,a0
 8007d96:	d961                	beqz	a0,8007d66 <_realloc_r+0x26>
 8007d98:	85a6                	mv	a1,s1
 8007d9a:	8622                	mv	a2,s0
 8007d9c:	fffff097          	auipc	ra,0xfffff
 8007da0:	428080e7          	jalr	1064(ra) # 80071c4 <memcpy>
 8007da4:	85a6                	mv	a1,s1
 8007da6:	854e                	mv	a0,s3
 8007da8:	fffff097          	auipc	ra,0xfffff
 8007dac:	60e080e7          	jalr	1550(ra) # 80073b6 <_free_r>
 8007db0:	bf5d                	j	8007d66 <_realloc_r+0x26>

08007db2 <_malloc_usable_size_r>:
 8007db2:	ffc5a783          	lw	a5,-4(a1)
 8007db6:	ffc78513          	addi	a0,a5,-4
 8007dba:	0007d563          	bgez	a5,8007dc4 <_malloc_usable_size_r+0x12>
 8007dbe:	95aa                	add	a1,a1,a0
 8007dc0:	419c                	lw	a5,0(a1)
 8007dc2:	953e                	add	a0,a0,a5
 8007dc4:	8082                	ret
